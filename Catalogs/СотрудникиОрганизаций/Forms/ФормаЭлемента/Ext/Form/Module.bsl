
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства	
	
	ЗаполнитьСведенияПредыдущегоМестаРаботыФизЛицНаборЗаписей (Объект.ФизЛицо);
	
	Если Параметры.Ключ.Пустая() Тогда
		ПроверитьИПодобратьОрганизацию();
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ФизическоеЛицоСсылка = Объект.ФизЛицо;
	
	// Заполним представление периодических сведений
	РедактированиеПериодическихСведенийСервер.ИнициализироватьЗаписьДляОтображенияНаФорме(ЭтотОбъект, "ФИОФизЛиц", ФизическоеЛицоСсылка);
	РедактированиеПериодическихСведенийСервер.ИнициализироватьЗаписьДляОтображенияНаФорме(ЭтотОбъект, "ГражданствоФизЛиц", ФизическоеЛицоСсылка);
	РедактированиеПериодическихСведенийСервер.ИнициализироватьЗаписьДляОтображенияНаФорме(ЭтотОбъект, "СведенияОПенсионномОбеспеченииФизЛиц", ФизическоеЛицоСсылка);
	РедактированиеПериодическихСведенийСервер.ИнициализироватьЗаписьДляОтображенияНаФорме(ЭтотОбъект, "СведенияОбИнвалидностиФизлиц", ФизическоеЛицоСсылка);
	РедактированиеПериодическихСведенийСервер.ИнициализироватьЗаписьДляОтображенияНаФорме(ЭтотОбъект, "ИПННалоговыеВычетыФизлиц", ФизическоеЛицоСсылка);
	РедактированиеПериодическихСведенийСервер.ИнициализироватьЗаписьДляОтображенияНаФорме(ЭтотОбъект, "ИПНПрименениеВычетов", ФизическоеЛицоСсылка);
	
	ЗаполнитьСведенияПредыдущегоМестаРаботыФизЛицНаборЗаписей (ФизическоеЛицоСсылка);
	
	// Сбрасываем периодические сведения
	ФИОФизЛицНаборЗаписейПрочитан 								= Ложь;
	ГражданствоФизЛицНаборЗаписейПрочитан 						= Ложь;
	СведенияОПенсионномОбеспеченииФизЛицНаборЗаписейПрочитан 	= Ложь;
	СведенияОбИнвалидностиФизлицНаборЗаписейПрочитан 			= Ложь;
	ИПННалоговыеВычетыФизлицНаборЗаписейПрочитан 				= Ложь;
	ИПНПрименениеВычетовНаборЗаписейПрочитан 					= Ложь;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды  
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчетаПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета
	
	ПодготовитьФормуНаСервере();
	УправлениеФормой(ЭтотОбъект);	
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)

	ОбработкаИзмененияПереключенияСправки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	// Текущую страницу устанавливаем один раз при открытии
	Если Параметры.Ключ.Пустая() Тогда
		Элементы.ГруппаСотрудники.ТекущаяСтраница = Элементы.ГруппаСотрудники.ПодчиненныеЭлементы.ГруппаНовыйСотрудник;
	Иначе 
		Элементы.ГруппаСотрудники.ТекущаяСтраница = Элементы.ГруппаСотрудники.ПодчиненныеЭлементы.ГруппаСотрудник;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УправлениеФормой(ЭтотОбъект);	

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОтредактированаИстория" И Источник = Объект.Физлицо Тогда
		РедактированиеПериодическихСведенийКлиент.ОбработкаОповещения(ЭтаФорма, Объект.Физлицо, ИмяСобытия, Параметр, Источник);
		ОбновитьПредставлениеЭлемента(ЭтотОбъект, Параметр.ИмяРегистра);
		
	ИначеЕсли ИмяСобытия = "ИзменениеДанныхСтандартныеВычеты" Тогда
		
		// ИПННалоговыеВычетыФизлиц
		ИПННалоговыеВычетыФизлицНаборЗаписей.Очистить();
		Для Каждого Строка Из Параметр.ИПННалоговыеВычетыФизлицНаборЗаписейНовый Цикл
				ЗаполнитьЗначенияСвойств(ИПННалоговыеВычетыФизлицНаборЗаписей.Добавить(), Строка);
		КонецЦикла;
		ИПННалоговыеВычетыФизлицНаборЗаписей.Сортировать("Период");
		
		Если ИПННалоговыеВычетыФизлицНаборЗаписей.Количество() > 0 Тогда
			ПоследняяЗапись = ИПННалоговыеВычетыФизлицНаборЗаписей[ИПННалоговыеВычетыФизлицНаборЗаписей.Количество()-1];
			ЗаполнитьЗначенияСвойств(ИПННалоговыеВычетыФизлиц, ПоследняяЗапись);
		Иначе
			ЗаполнитьЗначенияСвойств(ИПННалоговыеВычетыФизлиц, Новый Структура(ИПННалоговыеВычетыФизлицКлючСтруктуры));
		КонецЕсли;
	
		//ИПНПрименениеВычетов
		ИПНПрименениеВычетовНаборЗаписей.Очистить();
		Для Каждого Строка Из Параметр.ИПНПрименениеВычетовНаборЗаписейНовый Цикл
				ЗаполнитьЗначенияСвойств(ИПНПрименениеВычетовНаборЗаписей.Добавить(), Строка);
		КонецЦикла;
		ИПНПрименениеВычетовНаборЗаписей.Сортировать("Период");
		
		Если ИПНПрименениеВычетовНаборЗаписей.Количество() > 0 Тогда
			ПоследняяЗапись = ИПНПрименениеВычетовНаборЗаписей[ИПНПрименениеВычетовНаборЗаписей.Количество()-1];
			ЗаполнитьЗначенияСвойств(ИПНПрименениеВычетов, ПоследняяЗапись);
		Иначе
			ЗаполнитьЗначенияСвойств(ИПНПрименениеВычетов, Новый Структура(ИПНПрименениеВычетовКлючСтруктуры));
		КонецЕсли;
	
	ИначеЕсли ИмяСобытия = "ИзменениеДанныхПрочиеВычеты" Тогда
		ПрочитатьСведенияПрочиеВычетыНаСервере();
		
	ИначеЕсли ИмяСобытия = "ИзменениеДанныхСведенияПредыдущегоМестаРаботы" Тогда
		Если Параметр.Свойство("СведенияПредыдущегоМестаРаботыФизЛицНаборЗаписейНовый") Тогда
			СведенияПредыдущегоМестаРаботыФизЛицНаборЗаписей.Очистить();
			Для Каждого Строка Из Параметр.СведенияПредыдущегоМестаРаботыФизЛицНаборЗаписейНовый Цикл
				ЗаполнитьЗначенияСвойств(СведенияПредыдущегоМестаРаботыФизЛицНаборЗаписей.Добавить(), Строка);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;

	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр)Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	ПодготовитьСправкуФормы(ЭтотОбъект);
	
	РазблокироватьДанныеФормыДляРедактирования();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства 
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	// ФизЛицо
	Если СоздатьНовогоСотрудника = 1 Тогда
		Если Параметры.Ключ.Пустая() Тогда
			ФизЛицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
			ФизЛицоОбъект.УстановитьСсылкуНового(Объект.Физлицо);
		Иначе 
			ФизЛицоОбъект = Объект.Физлицо.ПолучитьОбъект();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ФизЛицоОбъект, ЭтотОбъект, "ДатаРождения, Пол, ИдентификационныйКодЛичности, РНН, СИК");
		ФизЛицоОбъект.Наименование  = НаименованиеФизЛица;
		ФизЛицоОбъект.ГруппаДоступа = ГруппаДоступа;
		ФизЛицоОбъект.Записать();
	КонецЕсли;                   
	
	// ФИО
	Если ФИОФизЛицНаборЗаписейПрочитан Тогда
		НаборФИО = РегистрыСведений.ФИОФизЛиц.СоздатьНаборЗаписей();
		НаборФИО.Отбор.ФизЛицо.Значение 		= ТекущийОбъект.ФизЛицо;
		НаборФИО.Отбор.ФизЛицо.Использование 	= Истина;
		НаборФИО.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		НаборФИО.Загрузить(ФИОФизЛицНаборЗаписей.Выгрузить());
		НаборФИО.Записать(Истина);
	КонецЕсли;
		
	// Гражданство
	Если ГражданствоФизЛицНаборЗаписейПрочитан Тогда
		НаборГражданство = РегистрыСведений.ГражданствоФизЛиц.СоздатьНаборЗаписей();
		НаборГражданство.Отбор.ФизЛицо.Значение 		= ТекущийОбъект.ФизЛицо;
		НаборГражданство.Отбор.ФизЛицо.Использование 	= Истина;
		НаборГражданство.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		НаборГражданство.Загрузить(ГражданствоФизЛицНаборЗаписей.Выгрузить());
		НаборГражданство.Записать(Истина);
	КонецЕсли;
		
	// Сведения о пенс. обеспечении
	Если СведенияОПенсионномОбеспеченииФизЛицНаборЗаписейПрочитан Тогда
		НаборСведенияОПенсОбеспечении = РегистрыСведений.СведенияОПенсионномОбеспеченииФизЛиц.СоздатьНаборЗаписей();
		НаборСведенияОПенсОбеспечении.Отбор.ФизЛицо.Значение 		= ТекущийОбъект.ФизЛицо;
		НаборСведенияОПенсОбеспечении.Отбор.ФизЛицо.Использование 	= Истина;
		НаборСведенияОПенсОбеспечении.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		НаборСведенияОПенсОбеспечении.Загрузить(СведенияОПенсионномОбеспеченииФизЛицНаборЗаписей.Выгрузить());
		НаборСведенияОПенсОбеспечении.Записать(Истина);
	КонецЕсли;
	
	// Сведения об инвалидности
	Если СведенияОбИнвалидностиФизлицНаборЗаписейПрочитан Тогда
		НаборСведенияОбИнвалидности = РегистрыСведений.СведенияОбИнвалидностиФизлиц.СоздатьНаборЗаписей();
		НаборСведенияОбИнвалидности.Отбор.ФизЛицо.Значение 		= ТекущийОбъект.ФизЛицо;
		НаборСведенияОбИнвалидности.Отбор.ФизЛицо.Использование 	= Истина;
		НаборСведенияОбИнвалидности.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		НаборСведенияОбИнвалидности.Загрузить(СведенияОбИнвалидностиФизлицНаборЗаписей.Выгрузить());
		НаборСведенияОбИнвалидности.Записать(Истина);
	КонецЕсли;
	
	// Стандартные вычеты
	Если ИПННалоговыеВычетыФизлицНаборЗаписейПрочитан Тогда
		НаборИПННалоговыеВычеты = РегистрыСведений.ИПННалоговыеВычетыФизлиц.СоздатьНаборЗаписей();
		НаборИПННалоговыеВычеты.Отбор.ФизЛицо.Значение 		= ТекущийОбъект.ФизЛицо;
		НаборИПННалоговыеВычеты.Отбор.ФизЛицо.Использование 	= Истина;
		НаборИПННалоговыеВычеты.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		НаборИПННалоговыеВычеты.Загрузить(ИПННалоговыеВычетыФизлицНаборЗаписей.Выгрузить());
		НаборИПННалоговыеВычеты.Записать(Истина);
	КонецЕсли;
	
	Если ИПНПрименениеВычетовНаборЗаписейПрочитан Тогда
		НаборИПНПрименениеВычетов = РегистрыСведений.ИПНПрименениеВычетов.СоздатьНаборЗаписей();
		НаборИПНПрименениеВычетов.Отбор.ФизЛицо.Значение 		= ТекущийОбъект.ФизЛицо;
		НаборИПНПрименениеВычетов.Отбор.ФизЛицо.Использование 	= Истина;
		НаборИПНПрименениеВычетов.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		НаборИПНПрименениеВычетов.Загрузить(ИПНПрименениеВычетовНаборЗаписей.Выгрузить());
		НаборИПНПрименениеВычетов.Записать(Истина);
	КонецЕсли;
	
	// Сведения с предыдущего места работы
	НаборСведенияПредыдущегоМестаРаботы = РегистрыСведений.СведенияПредыдущегоМестаРаботыФизЛиц.СоздатьНаборЗаписей();
	НаборСведенияПредыдущегоМестаРаботы.Отбор.ФизЛицо.Значение 		= ТекущийОбъект.ФизЛицо;
	НаборСведенияПредыдущегоМестаРаботы.Отбор.ФизЛицо.Использование 	= Истина;
	НаборСведенияПредыдущегоМестаРаботы.Загрузить(СведенияПредыдущегоМестаРаботыФизЛицНаборЗаписей.Выгрузить());
	НаборСведенияПредыдущегоМестаРаботы.Записать(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом  
	
	// СтандартныеПодсистемы.КонтрольВеденияУчета
	КонтрольВеденияУчетаПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.КонтрольВеденияУчета

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДекорацияЗакрытьСправкуФормыНажатие(Элемент)
	
	ОтображатьСправкуФормы = НЕ ОтображатьСправкуФормы;
	ОбработкаИзмененияПереключенияСправки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовогоСотрудникаПриИзменении(Элемент)

	Объект.Физлицо = Неопределено;
	ФИОФизЛицНаборЗаписейПрочитан = Ложь;
	ОбработатьИзменениеФизическогоЛицаНаСервере();
	
	УправлениеФормой(ЭтотОбъект);
	ПроверитьРегламентированныеДанные(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОткрытьСправочникФизЛицНажатие(Элемент)
	
	Если СоздатьНовогоСотрудника = 1 Тогда
		ОткрытьФорму("Справочник.ФизическиеЛица.ФормаСписка", , ЭтаФорма);
	ИначеЕсли СоздатьНовогоСотрудника = 2 Тогда 
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораФизЛица", ЭтаФорма);
		ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", Новый Структура("ТекущаяСтрока", Объект.Физлицо), ЭтаФорма,,,, Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФизлицоПриИзменении(Элемент)

	ОбработатьИзменениеФизическогоЛицаНаСервере();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеФизЛицаПриИзменении(Элемент)
	
	ФИО = НаименованиеФизЛица;

	МассивФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ФИО, " ", , Истина);
	ФИОФизЛиц.Фамилия  = ?(МассивФИО.Количество() > 0, МассивФИО[0], "");
	ФИОФизЛиц.Имя      = ?(МассивФИО.Количество() > 1, МассивФИО[1], "");
	ФИОФизЛиц.Отчество = ?(МассивФИО.Количество() > 2, МассивФИО[2], "");
	
	Если ФИОФизЛицНаборЗаписей.Количество() = 0 Тогда
		НоваяСтрока = ФИОФизЛицНаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ФИОФизЛиц);
		НоваяСтрока.Период = Дата(1900, 1, 1);
		НоваяСтрока.ФизЛицо = Объект.Физлицо;
		ФИОФизЛицНаборЗаписейПрочитан = Истина;
		ФИОФизЛицКлючСтруктуры = "Период, ФизЛицо, Фамилия, Имя, Отчество";
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ФИОФизЛиц.Отчество) Тогда
		Пол = ПроцедурыУправленияПерсоналомКлиентСервер.УстановитьПол(ФИОФизЛиц.Отчество)
	КонецЕсли;
	
	Объект.Наименование = НаименованиеФизЛица;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаДоступаПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораГруппыДоступа", ЭтаФорма);
	ОткрытьФорму("Справочник.ГруппыДоступаФизическихЛиц.ФормаВыбора", Новый Структура("ТекущаяСтрока", ГруппаДоступа), ЭтаФорма,,,, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРедактироватьФизлицоОтдельноНажатие(Элемент)
	
	СтруктураПараметров = Новый Структура("Ключ", Объект.ФизЛицо);
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаОбъекта", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ГражданствоНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РедактированиеПериодическихСведенийКлиент.ОткрытьФормуРедактированияИстории("ГражданствоФизЛиц", Объект.Физлицо, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвалидностьНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РедактированиеПериодическихСведенийКлиент.ОткрытьФормуРедактированияИстории("СведенияОбИнвалидностиФизлиц", Объект.Физлицо, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПенсионноеОбеспечениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РедактированиеПериодическихСведенийКлиент.ОткрытьФормуРедактированияИстории("СведенияОПенсионномОбеспеченииФизЛиц", Объект.Физлицо, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИПНСтандартныеВычетыДо2018Года(Команда)
	
	СтандартнаяОбработка = Ложь;
	
	ТолькоПросмотрИстории = ТолькоПросмотр;
	Если Не ТолькоПросмотрИстории Тогда
		Попытка
			ЗаблокироватьДанныеФормыДляРедактирования();
			ТолькоПросмотрИстории = Ложь;
		Исключение
			ТолькоПросмотрИстории = Истина;
		КонецПопытки
	КонецЕсли; 

	Если Не ИПННалоговыеВычетыФизлицНаборЗаписейПрочитан Тогда
		ПрочитатьНаборЗаписейПериодическихСведений("ИПННалоговыеВычетыФизлиц", Объект.Физлицо);
	КонецЕсли;
	Если Не ИПНПрименениеВычетовНаборЗаписейПрочитан Тогда
		ПрочитатьНаборЗаписейПериодическихСведений("ИПНПрименениеВычетов", Объект.Физлицо);
	КонецЕсли;
	
	МассивИПННалоговыеВычетыФизлиц = РедактированиеПериодическихСведенийКлиентСервер.МассивЗаписейИсторииВФорме(ЭтотОбъект, "ИПННалоговыеВычетыФизлиц");
	МассивИПНПрименениеВычетов = РедактированиеПериодическихСведенийКлиентСервер.МассивЗаписейИсторииВФорме(ЭтотОбъект, "ИПНПрименениеВычетов");	
	
	ПараметрыФормы = Новый Структура("ФизЛицо, ТолькоПросмотр, МассивИПННалоговыеВычетыФизлиц, МассивИПНПрименениеВычетов, ДатаЗапретаИзмененияДанных", Объект.Физлицо, ТолькоПросмотрИстории, МассивИПННалоговыеВычетыФизлиц, МассивИПНПрименениеВычетов, ДатаЗапретаИзмененияДанных);
	
	ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВводаСтандартныеВычеты", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИПНПрочиеВычетыДо2018Года(Команда)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("ФизЛицо", Объект.Физлицо);
	ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВводаПрочиеВычеты", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияПредыдущегоМестаРаботыФизЛицаНажатие(Элемент)
	
	ТолькоПросмотрИстории = ТолькоПросмотр;
	Если Не ТолькоПросмотрИстории Тогда
		Попытка
			ЗаблокироватьДанныеФормыДляРедактирования();
			ТолькоПросмотрИстории = Ложь;
		Исключение
			ТолькоПросмотрИстории = Истина;
		КонецПопытки
	КонецЕсли; 
	
	ПараметрыФормы = Новый Структура("ФизЛицо, ТолькоПросмотр, СведенияПредыдущегоМестаРаботыФизЛиц", Объект.Физлицо, ТолькоПросмотрИстории, СведенияПредыдущегоМестаРаботыФизЛицНаборЗаписей);
	ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВводаСведенияПредыдущегоМестаРаботы", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияОВычетахИПННажатие(Элемент)
	
	ТолькоПросмотрИстории = ТолькоПросмотр;
	Если Не ТолькоПросмотрИстории Тогда
		Попытка
			ЗаблокироватьДанныеФормыДляРедактирования();
			ТолькоПросмотрИстории = Ложь;
		Исключение
			ТолькоПросмотрИстории = Истина;
		КонецПопытки
	КонецЕсли; 
	
	ПараметрыФормы = Новый Структура("ФизическоеЛицо, ТолькоПросмотр", Объект.Физлицо, ТолькоПросмотрИстории);
	ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВычетыИПН", ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ФизлицоИдентификационныйКодЛичностиПриИзменении(Элемент)

	ПроверитьРегламентированныеДанные(ЭтотОбъект, "ИдентификационныйКодЛичности");
	
КонецПроцедуры

&НаКлиенте
Процедура ФизлицоРННПриИзменении(Элемент)
	
	ПроверитьРегламентированныеДанные(ЭтотОбъект, "РНН");
	
КонецПроцедуры

&НаКлиенте
Процедура ФизлицоСИКПриИзменении(Элемент)
	
	ПроверитьРегламентированныеДанные(ЭтотОбъект, "СИК");
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.СтруктурнаяЕдиница, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурнаяЕдиница = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе  
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.СтруктурнаяЕдиница, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктураРезультатаВыполнения = Неопределено;
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(, СтруктураРезультатаВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПостфиксНаименования 	= Объект.ПостфиксНаименования;
	
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение = "Произвольное" Тогда
		Текст = ПостфиксНаименования;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВводаПостфикса", ЭтаФорма);
		ПоказатьВводСтроки(ОписаниеОповещения, Текст, НСтр("ru = 'Введите дополнение наименования'"), 15);
	Иначе
		Объект.Наименование = ВыбранноеЗначение;
		Объект.ПостфиксНаименования = СокрЛП(СтрЗаменить(ВыбранноеЗначение, НаименованиеФизЛица, ""));	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Ожидание = 0;
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.Добавить(НаименованиеФизЛица);
	
	Если Объект.ВидЗанятости = ПредопределенноеЗначение("Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство") Тогда
		ДанныеВыбора.Добавить(СтрШаблон(НСтр("ru = '%1 (вн. совм.)'"), НаименованиеФизЛица));
	ИначеЕсли Объект.ВидЗанятости = ПредопределенноеЗначение("Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы") Тогда	
		ДанныеВыбора.Добавить(СтрШаблон(НСтр("ru = '%1 (осн.)'"), НаименованиеФизЛица));
	Иначе
		ДанныеВыбора.Добавить(СтрШаблон(НСтр("ru = '%1 (совм.)'"), НаименованиеФизЛица));			
	КонецЕсли; 
	
	Если НЕ ПустаяСтрока(Объект.ПостфиксНаименования) И ДанныеВыбора.НайтиПоЗначению(Объект.Наименование) = Неопределено Тогда
		ДанныеВыбора.Добавить(Объект.Наименование);	
	КонецЕсли;	
	
	ДанныеВыбора.Добавить("Произвольное", НСтр("ru = 'задать произвольное дополнение наименования (не более 15-и символов)'"));
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <ИМЯ ТАБЛИЦЫ ФОРМЫ>

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПереключениеСправкиФормы(Команда)

	ОтображатьСправкуФормы = НЕ ОтображатьСправкуФормы;
	ОбработкаИзмененияПереключенияСправки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СменаФИО(Команда)
	
	ФИОДоИзменения = СокрЛП(ФИОФизЛиц.Фамилия) + " " + СокрЛП(ФИОФизЛиц.Имя) + " " + СокрЛП(ФИОФизЛиц.Отчество);
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияОкнаРедактированияФИО", ЭтаФорма);
	РедактированиеПериодическихСведенийКлиент.ОткрытьФормуРедактированияИстории("ФИОФизЛиц", Объект.Физлицо, ЭтаФорма,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура История(Команда)

	СтруктураПараметров = Новый Структура("Сотрудник", Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.РеглУчетПлановыхНачисленийРаботниковОрганизаций.ФормаСписка", СтруктураПараметров, ЭтаФорма);

КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.КонтрольВеденияУчета
&НаКлиенте
Процедура Подключаемый_ОткрытьОтчетПоПроблемам(ЭлементИлиКоманда, НавигационнаяСсылка, СтандартнаяОбработка)
	
	КонтрольВеденияУчетаКлиент.ОткрытьОтчетПоПроблемамОбъекта(ЭтотОбъект, Объект.Ссылка, СтандартнаяОбработка);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтрольВеденияУчета

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(ЭтаФорма, Объект.СтруктурнаяЕдиница);
	
КонецПроцедуры 

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	Если Параметры.Ключ.Пустая() Тогда
		
		//получим очередной код элемента
		Объект.Код = ПроцедурыУправленияПерсоналомСервер.ОпределитьМаксимальныйТабельныйНомер(Объект.Организация, Объект.Ссылка);
		
		// Настройка элементов
		Если ЗначениеЗаполнено(Объект.Физлицо) Тогда
			СоздатьНовогоСотрудника = 2;			
		Иначе
			СоздатьНовогоСотрудника = 1;
			Объект.ВидЗанятости 	= Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы;
			Объект.Физлицо 			= Справочники.ФизическиеЛица.ПолучитьСсылку();
		КонецЕсли;
		
		Объект.Актуальность 	= Истина;
		
	Иначе
		
		ОбновитьПредставлениеЭлемента(ЭтотОбъект, "ГражданствоФизЛиц");
		ОбновитьПредставлениеЭлемента(ЭтотОбъект, "СведенияОбИнвалидностиФизлиц");
		ОбновитьПредставлениеЭлемента(ЭтотОбъект, "СведенияОПенсионномОбеспеченииФизЛиц");
		
		ПрочитатьСведенияПрочиеВычетыНаСервере();

		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(МестоРаботы, 				"Сотрудник", Объект.Ссылка);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПлановыеНачисления, 			"Сотрудник", Объект.Ссылка);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПлановыеУдержания, 			"ФизЛицо",	 Объект.Физлицо);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПлановыеУдержания, 			"Организация",	 Объект.Организация);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ОтражениеПлановыхНачислений, "Сотрудник", Объект.Ссылка);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(КадровыеДокументы, 			"Сотрудник", Объект.Ссылка);
		
		ПроверитьРегламентированныеДанные(ЭтотОбъект);

		Если ЗначениеЗаполнено(Объект.Физлицо) Тогда
			НаименованиеФизЛица = Строка(Объект.Физлицо);
			ЗначенияРеквизитовФизЛица = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Физлицо,"ДатаРождения,Пол,ИдентификационныйКодЛичности,РНН,СИК");
			ДатаРождения = ЗначенияРеквизитовФизЛица.ДатаРождения; 
			Пол = ЗначенияРеквизитовФизЛица.Пол;
			ИдентификационныйКодЛичности = ЗначенияРеквизитовФизЛица.ИдентификационныйКодЛичности;
			РНН = ЗначенияРеквизитовФизЛица.РНН;
			СИК = ЗначенияРеквизитовФизЛица.СИК;
		КонецЕсли;
		
		СотрудникПринятНаРаботу = ЕстьПриемНаРаботу();
		
	КонецЕсли;
	
	ОбработатьИзменениеФизическогоЛицаНаСервере();
	
	ФизическоеЛицоСтрока = Строка(Объект.ФизЛицо);
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.СтруктурнаяЕдиница, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация1, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);

	ЦветИнформационнойНадписи = ЦветаСтиля.ТекстИнформационнойНадписи;
	ЦветПредупреждающейНадписи = ЦветаСтиля.ТекстПредупреждающейНадписи;
	ИДКартинки = РаботаСДиалогами.ПолучитьИДКартинки(БиблиотекаКартинок.КартинкаВстроеннойСправкиФормы);

	ДанныеЗапретаИзменения = ДатыЗапретаИзмененияБК.ЗапретИзменения("РегистрСведений.ГражданствоФизЛиц");
	Если ДанныеЗапретаИзменения.ЗапретНайден Тогда
		ДатаЗапретаИзмененияДанных = ДанныеЗапретаИзменения.ДатаЗапрета;
	КонецЕсли;
	
	ПодготовитьСправкуФормы(ЭтотОбъект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	НовоеФизЛицо = ?(Форма.СоздатьНовогоСотрудника = 1, Истина, Ложь); 
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если Элементы.ГруппаСотрудники.ТекущаяСтраница = Элементы.ГруппаСотрудники.ПодчиненныеЭлементы.ГруппаНовыйСотрудник Тогда
		Если НовоеФизЛицо Тогда
			ТекстЗаголовка = НСтр("ru = 'Открыть справочник физ. лиц'");
		Иначе 
			ТекстЗаголовка = НСтр("ru = 'Открыть справочник физ. лиц для выбора...'");
		КонецЕсли;
		
		Элементы.ДекорацияОткрытьСправочникФизЛиц.Заголовок 	= ТекстЗаголовка;
		
		Элементы.Физлицо.Видимость								= НЕ НовоеФизЛицо;
		Элементы.НаименованиеФизЛица.Видимость					= НовоеФизЛицо;
		
		Элементы.ДекорацияРедактироватьФизлицоОтдельно.Видимость = (НЕ НовоеФизЛицо) И ЗначениеЗаполнено(Объект.Физлицо);
		Если ЗначениеЗаполнено(Объект.Физлицо) Тогда
			ТекстРедактироватьФизЛицо = СтрШаблон(НСтр("ru = 'Более подробно о физическом лице %1...'"), Строка(Объект.Физлицо));
			Элементы.ДекорацияРедактироватьФизлицоОтдельно.Заголовок = ТекстРедактироватьФизЛицо;
			Элементы.ДекорацияРедактироватьФизлицоОтдельно1.Заголовок = ТекстРедактироватьФизЛицо;
		КонецЕсли;
		
		// Доступность элементов управления
		Элементы.ФизлицоДатаРождения.Доступность 				= НовоеФизЛицо;
		Элементы.ФизлицоПол.Доступность 						= НовоеФизЛицо;
		Элементы.ФизлицоИдентификационныйКодЛичности.Доступность= НовоеФизЛицо;
		Элементы.ФизлицоРНН.Доступность 						= НовоеФизЛицо;
		Элементы.ФизлицоСИК.Доступность 						= НовоеФизЛицо;

		// Группа доступа
		Элементы.ГруппаДоступаПредставление.Видимость = НовоеФизЛицо И НЕ ПустаяСтрока(Форма.НаименованиеФизЛица);
		
		Если Элементы.ГруппаДоступаПредставление.Видимость Тогда
			Если ЗначениеЗаполнено(Форма.ГруппаДоступа) Тогда
				Форма.ГруппаДоступаПредставление = СтрШаблон(НСтр("ru = 'Группа доступа: %1 ...'"), Форма.ГруппаДоступа);
				Элементы.ГруппаДоступаПредставление.ЦветТекста = Форма.ЦветИнформационнойНадписи;
			Иначе
				Форма.ГруппаДоступаПредставление = НСтр("ru = 'Введите группу доступа для физического лица ...'");	
				Элементы.ГруппаДоступаПредставление.ЦветТекста = Форма.ЦветПредупреждающейНадписи;
			КонецЕсли;	
		КонецЕсли;
		
	Иначе
		
		Элементы.ДекорацияРедактироватьФизлицоОтдельно.Видимость = (НЕ НовоеФизЛицо) И ЗначениеЗаполнено(Объект.Физлицо);
		Если ЗначениеЗаполнено(Форма.ФизическоеЛицоСтрока) Тогда
			ТекстРедактироватьФизЛицо = СтрШаблон(НСтр("ru = 'Более подробно о физическом лице %1...'"), Форма.ФизическоеЛицоСтрока);
			Элементы.ДекорацияРедактироватьФизлицоОтдельно1.Заголовок = ТекстРедактироватьФизЛицо;
		КонецЕсли;
		
		Элементы.СтруктурноеПодразделениеОрганизация1.ТолькоПросмотр = Форма.СотрудникПринятНаРаботу;
		Элементы.ВидЗанятости1.ТолькоПросмотр						 = Форма.СотрудникПринятНаРаботу;

		Элементы.ДекорацияКартинка.Видимость 						 = НЕ Объект.Актуальность;
		Элементы.АктуальностьСотрудника.Видимость 					 = НЕ Объект.Актуальность;
	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИПодобратьОрганизацию()
	
	Организация = Объект.Организация;

	Если НЕ ЗначениеЗаполнено(Организация)  Тогда
		ОбособленноеПодразделение = ПолучитьОрганизацию();
		Объект.СтруктурнаяЕдиница = ОбособленноеПодразделение;
		Объект.Организация = ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(ОбособленноеПодразделение);
		СтруктурноеПодразделениеОрганизация = Организация;
	Иначе //организацию передали в форму
		// проверим является ли она головной, заполним обособленное подразделение
		ГоловнаяОрганизация = ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Организация);
		Если Организация = ГоловнаяОрганизация Тогда
			// подберем обособленное подразделение
			ОрганизацияПоУмолчанию = Справочники.Организации.ОрганизацияПоУмолчанию();
			Если НЕ ЗначениеЗаполнено(ОрганизацияПоУмолчанию) Тогда
				// не задана организация по умолчанию
				Объект.СтруктурнаяЕдиница = Организация;
				СтруктурноеПодразделениеОрганизация = Организация;
			ИначеЕсли Организация = ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(ОрганизацияПоУмолчанию) Тогда
				//организация по умолчанию или головная или является обособленным подразделением той организации, что передана в форму
				Объект.СтруктурнаяЕдиница = ОрганизацияПоУмолчанию;
				СтруктурноеПодразделениеОрганизация = ОрганизацияПоУмолчанию;
			Иначе
				//организация по умолчанию не соответствует организации переданной в форму
				Объект.СтруктурнаяЕдиница = Организация;
				СтруктурноеПодразделениеОрганизация = Организация;
			КонецЕсли;	
		Иначе // передали обособленное подразделение
			Объект.СтруктурнаяЕдиница = Организация;
			Объект.Организация = ГоловнаяОрганизация;
			СтруктурноеПодразделениеОрганизация = Организация;
		КонецЕсли;	
	КонецЕсли;

	
КонецПроцедуры

&НаСервере
// Функция возвращает организацию, указанную для пользователя по умолчанию
// а если она пустая, то первую разрешенную
//
// Параметры
//  ТолькоГоловныеОрганизации  – Булево – вернуть головную организацию
//
// Возвращаемое значение:
//   <Справочники.Организации>   – Ссылка на организацию, или пустая ссылка
//
Функция ПолучитьОрганизацию(ТолькоГоловныеОрганизации = Ложь)
	
	Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	Если ТолькоГоловныеОрганизации И НЕ Организация.Пустая() Тогда
		// получим головную организацию
		Организация = ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Организация);
	КонецЕсли;
	Если Организация.Пустая() Тогда
		//для пользователя не задана организация по умолчанию, подберем первую разрешенную
		Организация = ПодобратьОрганизацию(ТолькоГоловныеОрганизации);
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции 

&НаСервере
// Функция подбирает из справочника организаций первую разрешенную
//
// Параметры
//  ТолькоГоловныеОрганизации  – Булево – подбор только среди головных организаций
//
// Возвращаемое значение:
//   <Справочники.Организации>   – Ссылка на организацию, или пустая ссылка
//
Функция ПодобратьОрганизацию(ТолькоГоловныеОрганизации = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|	ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Организации.Ссылка КАК Организация,
		|	Организации.ПометкаУдаления
		|ИЗ
		|	Справочник.Организации КАК Организации";
	Если ТолькоГоловныеОрганизации Тогда
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|		ИЛИ Организации.ГоловнаяОрганизация = Организации.Ссылка";
	КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	Организации.Код";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Организация;
	Иначе
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции 

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.СтруктурнаяЕдиница, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	УстановитьФункциональныеОпцииФормы();
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктураРезультатаВыполнения = Неопределено;
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Результат, СтруктураРезультатаВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения = Неопределено)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
			И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.СтруктурнаяЕдиница, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;

	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	// Изменилась СЕ меняем головную организацию
	Объект.Организация = ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Объект.СтруктурнаяЕдиница);
	
	// Получим табельный номер для текущей организации
	Объект.Код = ПроцедурыУправленияПерсоналомСервер.ОпределитьМаксимальныйТабельныйНомер(Объект.Организация, Объект.Ссылка);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеЭлемента(Форма, ИмяОбновляемогоЭлемента)
	
	Если ИмяОбновляемогоЭлемента = "ГражданствоФизЛиц" Тогда
		ГражданствоФизЛиц = Форма.ГражданствоФизЛиц;
		Если НЕ ЗначениеЗаполнено(ГражданствоФизЛиц.Период) Тогда
			ГражданствоФизЛицПредставлениеЗаписи = НСтр("ru = 'Ввести данные о гражданстве'");
		Иначе
					  					  
			Результат = Новый Массив;  
						
			Результат.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1'"), ГражданствоФизЛиц.Страна));
			
			Результат.Добавить(?(ГражданствоФизЛиц.НеИмеетПравоНаПенсию, НСтр("ru = ', не имеет право на пенсионное обеспечение'"), НСтр("ru = ', имеет право на пенсионное обеспечение'")));	
			Результат.Добавить(?(ГражданствоФизЛиц.НеПодлежитСоциальномуСтрахованию, НСтр("ru = ', не подлежит социальному страхованию'"), НСтр("ru = ', подлежит социальному страхованию'")));	
			Результат.Добавить(?(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК, НСтр("ru = ', не является налоговым резидентом РК'"), НСтр("ru = ', является налоговым резидентом РК'")));
			Результат.Добавить(?(ГражданствоФизЛиц.ИностранныйСпециалист, НСтр("ru = ', является иностранным специалистом'"), НСтр("ru = ', не является иностранным специалистом'")));
					  			
			ГражданствоФизЛицПредставлениеЗаписи = СтрСоединить(Результат);
					  
			Если НЕ ЗначениеЗаполнено(ГражданствоФизЛиц.Страна) Тогда
				ГражданствоФизЛицПредставлениеЗаписи = НСтр("ru = 'Лицо без гражданства'") + ГражданствоФизЛицПредставлениеЗаписи;
			КонецЕсли;
		КонецЕсли;
		Форма.ГражданствоФизЛицПредставлениеЗаписи = ГражданствоФизЛицПредставлениеЗаписи;
		
	ИначеЕсли ИмяОбновляемогоЭлемента = "СведенияОПенсионномОбеспеченииФизЛиц" Тогда
		СведенияОПенсионномОбеспеченииФизЛиц = Форма.СведенияОПенсионномОбеспеченииФизЛиц;
				
		Результат = Новый Массив;  		
		Результат.Добавить(?(СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер, НСтр("ru = 'Является пенсионером'"), НСтр("ru = 'Не является пенсионером'")));	
		Результат.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '; Пенсионный фонд: %1'"), ?(НЕ ЗначениеЗаполнено(СведенияОПенсионномОбеспеченииФизЛиц.ПенсионныйФонд), НСтр("ru = 'не указан'"), СведенияОПенсионномОбеспеченииФизЛиц.ПенсионныйФонд)));	
											
		СведенияОПенсионномОбеспеченииФизЛицПредставлениеЗаписи = СтрСоединить(Результат);
		
		Форма.СведенияОПенсионномОбеспеченииФизЛицПредставлениеЗаписи = СведенияОПенсионномОбеспеченииФизЛицПредставлениеЗаписи;
		
	ИначеЕсли ИмяОбновляемогоЭлемента = "СведенияОбИнвалидностиФизлиц" Тогда
		СведенияОбИнвалидностиФизлиц = Форма.СведенияОбИнвалидностиФизлиц;
		Если ЗначениеЗаполнено(СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности) Тогда
			
			СведенияОбИнвалидностиФизлицПредставлениеЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1: %2 группы, справка серия: %3, номер: %4, выдана: %5 года , срок действия: %6 года '"), 
				СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности, 
				СведенияОбИнвалидностиФизлиц.ГруппаИнвалидности,
				СведенияОбИнвалидностиФизлиц.СерияСправки,
				СведенияОбИнвалидностиФизлиц.НомерСправки,
				Формат(СведенияОбИнвалидностиФизлиц.ДатаВыдачи,"ДФ='дд ММММ гггг';ДП='...'"),
				Формат(СведенияОбИнвалидностиФизлиц.СрокДействияСправки,"ДФ='дд ММММ гггг';ДП='...'"));
								
		Иначе
			СведенияОбИнвалидностиФизлицПредставлениеЗаписи = НСтр("ru = 'Не является лицом с инвалидностью'");
		КонецЕсли;
		Форма.СведенияОбИнвалидностиФизлицПредставлениеЗаписи = СведенияОбИнвалидностиФизлицПредставлениеЗаписи;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработкаИзмененияПереключенияСправки(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ФормаПереключениеСправкиФормы.Пометка = Форма.ОтображатьСправкуФормы;	
	Элементы.ГруппаШапкаПравая.Видимость 		   = Форма.ОтображатьСправкуФормы;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФизЛица(Результат, Параметры) Экспорт 
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Физлицо = Результат;
	ОбработатьИзменениеФизическогоЛицаНаСервере();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораГруппыДоступа(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаДоступа = Результат;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеФизическогоЛицаНаСервере()

	Если ЗначениеЗаполнено(Объект.Физлицо) Тогда
		
		РеквизитыФизЛица 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Физлицо, "Наименование, 
																						 |Пол, 
																						 |ДатаРождения, 
																						 |ИдентификационныйКодЛичности, 
																						 |РНН, 
																						 |СИК, 
																						 |ГруппаДоступа");
		Объект.Наименование = РеквизитыФизЛица.Наименование;
		Пол 				= РеквизитыФизЛица.Пол;
		ДатаРождения 		= РеквизитыФизЛица.ДатаРождения;
		ИдентификационныйКодЛичности = РеквизитыФизЛица.ИдентификационныйКодЛичности;
		РНН 				= РеквизитыФизЛица.РНН;
		СИК 				= РеквизитыФизЛица.СИК;
		ГруппаДоступа		= РеквизитыФизЛица.ГруппаДоступа;
		
		НаименованиеФизЛица = РеквизитыФизЛица.Наименование;
		
		// ФИО 
		ФИОФизЛицСрез = РегистрыСведений.ФИОФизЛиц.СрезПоследних(ОбщегоНазначения.ТекущаяДатаПользователя(), Новый Структура("ФизЛицо", Объект.Физлицо));
		Если ФИОФизЛицСрез.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(ФИОФизЛиц, ФИОФизЛицСрез[0]);
		Иначе
			ЗаполнитьЗначенияСвойств(ФИОФизЛиц, РегистрыСведений.ФИОФизЛиц.СоздатьМенеджерЗаписи());
		КонецЕсли;
		
		ПроверитьИУстановитьВидЗанятости();
		ЗаполнитьСведенияПредыдущегоМестаРаботыФизЛицНаборЗаписей (Объект.Физлицо);

	Иначе 
		Если СоздатьНовогоСотрудника = 1 Тогда
			Объект.Физлицо 		= Справочники.ФизическиеЛица.ПолучитьСсылку();		
		КонецЕсли;
		
		Пол 			= Перечисления.ПолФизическихЛиц.ПустаяСсылка();
		ДатаРождения 	= Дата(1,1,1);
		ИдентификационныйКодЛичности = "";
		РНН 			= "";
		СИК 			= "";
		ГруппаДоступа	= Справочники.ГруппыДоступаФизическихЛиц.ПустаяСсылка();
		
		Объект.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы;
		
		// ФИО
		Объект.Наименование = "";
		НаименованиеФизЛица = "";
		ЗаполнитьЗначенияСвойств(ФИОФизЛиц, РегистрыСведений.ФИОФизЛиц.СоздатьМенеджерЗаписи()); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИУстановитьВидЗанятости() Экспорт

	НадоПроверятьВидЗанятости = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Физлицо);
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		//проверим, что сотрудник не уволенный в этой организации 
		//если он уже уволен проверять вид занятости не нужно
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	РаботникиОрганизацийСрезПоследних.Сотрудник
		               |ИЗ
		               |	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		               |			&парамДатаСреза,
		               |			ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		               |				И Сотрудник = &парамТекущийСотрудник
		               |				И Организация = &парамОрганизация) КАК РаботникиОрганизацийСрезПоследних";
		
		Запрос.УстановитьПараметр("парамДатаСреза",   	   ОбщегоНазначения.ТекущаяДатаПользователя());
		Запрос.УстановитьПараметр("парамТекущийСотрудник", Объект.Ссылка);
		Запрос.УстановитьПараметр("парамОрганизация",	   Объект.Организация);
		
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			НадоПроверятьВидЗанятости = Ложь;	
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ НадоПроверятьВидЗанятости Тогда
		Возврат;
	КонецЕсли;
	
	// проверим, есть актуальный не уволенный сотрудник в этой организации с видом занятости
	// основное место работы или совместитель
	// и если есть установим вид занятости - Внутреннее совместительство
	
	//Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Сотрудники.ВидЗанятости,
		|	Сотрудники.Физлицо.Наименование КАК ФизлицоНаименование
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|			&парамДатаСреза,
		|			Организация = &парамОрганизация
		|				И Сотрудник.Физлицо = &парамФизлицо) КАК Работники
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК Сотрудники
		|		ПО (Сотрудники.Ссылка = Работники.Сотрудник)
		|			И (Работники.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
		|ГДЕ
		|	Сотрудники.Физлицо = &парамФизлицо
		|	И Сотрудники.Организация = &парамОрганизация
		|	И Сотрудники.Актуальность
		|	И НЕ Сотрудники.ПометкаУдаления
		|	И Сотрудники.Ссылка <> &парамТекущийСотрудник
		|	И Сотрудники.ВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство))";
		
	Запрос.УстановитьПараметр("парамДатаСреза",   	   ОбщегоНазначения.ТекущаяДатаПользователя());
	Запрос.УстановитьПараметр("парамТекущийСотрудник", Объект.Ссылка);
	Запрос.УстановитьПараметр("парамОрганизация",	   Объект.Организация);
	Запрос.УстановитьПараметр("парамФизлицо",     	   Объект.Физлицо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Объект.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ВидЗанятости) Тогда
		Объект.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы;
	КонецЕсли;

КонецПроцедуры 

&НаСервереБезКонтекста
Функция ЗначенияРеквизитовОбъекта(Объект, Реквизиты)

	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, Реквизиты);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьРегламентированныеДанные(Форма, ПроверяемыеДанные = "ИдентификационныйКодЛичности, РНН, СИК")
	
	МассивПроверяемыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПроверяемыеДанные, ",", , Истина);
	
	Если Форма.СоздатьНовогоСотрудника <> 1  Тогда
		Реквизиты = ЗначенияРеквизитовОбъекта(Форма.Объект.ФизЛицо, ПроверяемыеДанные);
	Иначе
		Реквизиты = Форма;
	КонецЕсли;
	
	Для Каждого Элемент Из МассивПроверяемыхДанных Цикл
		ИмяЭлементаНадписи = "НадписьПоясненияНекорректного" + Элемент;
		ТекстСообщения     = "";
		
		Если Форма.Элементы.Найти(ИмяЭлементаНадписи) <> Неопределено Тогда 
			Если Элемент = "ИдентификационныйКодЛичности" Тогда 
				Если НЕ ЗначениеЗаполнено(Реквизиты.ИдентификационныйКодЛичности) 
					ИЛИ РегламентированныеДанныеКлиентСервер.ИИНБИНСоответствуетТребованиям(Реквизиты.ИдентификационныйКодЛичности, ТекстСообщения) Тогда 
					ТекстСообщения = "";
				КонецЕсли;
				
			ИначеЕсли Элемент = "РНН" Тогда 
				Если НЕ ЗначениеЗаполнено(Реквизиты.РНН) 
					ИЛИ РегламентированныеДанныеКлиентСервер.РННСоответствуетТребованиям(Реквизиты.РНН, ТекстСообщения) Тогда 
					ТекстСообщения = "";
				КонецЕсли;
				
			ИначеЕсли Элемент = "СИК" Тогда 
				Если НЕ ЗначениеЗаполнено(Реквизиты.СИК) 
					ИЛИ РегламентированныеДанныеКлиентСервер.СИКСоответствуетТребованиям(Реквизиты.СИК, ТекстСообщения) Тогда 
					ТекстСообщения = "";
				КонецЕсли;
				
			КонецЕсли;
			Форма[ИмяЭлементаНадписи] = ТекстСообщения;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияОкнаРедактированияФИО(Результат, Параметры) Экспорт
	
	НовоеФИО = СокрЛП(ФИОФизЛиц.Фамилия) + " " + СокрЛП(ФИОФизЛиц.Имя) + " " + СокрЛП(ФИОФизЛиц.Отчество);
	Если ВРег(ФИОДоИзменения) <> ВРег(НовоеФИО) Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Изменить наименование элемента справочника на %1?'"), НовоеФИО);
		СтруктураПараметров = Новый Структура("НовоеФИО", НовоеФИО);
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОСменеНаименования", ЭтотОбъект, СтруктураПараметров);
	    ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОСменеНаименования(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Наименование = Параметры.НовоеФИО;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаПостфикса(Текст, Параметры) Экспорт
	
	Объект.ПостфиксНаименования = Текст;
	Объект.Наименование = НаименованиеФизЛица + Текст;

КонецПроцедуры

&НаСервере 
Функция ЕстьПриемНаРаботу()
	
	//проверим по наличию записей в регистре РаботникиОрганизаций
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РаботникиОрганизаций.Сотрудник
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|ГДЕ
	|	РаботникиОрганизаций.Сотрудник = &Сотрудник
	|	И РаботникиОрганизаций.Активность";
		 
	Запрос.УстановитьПараметр("Сотрудник", Объект.Ссылка);
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		 Возврат Истина;	
	КонецЕсли;
	 
	Возврат Ложь;
	
КонецФункции

&НаСервере 
Процедура ЗаполнитьСведенияПредыдущегоМестаРаботыФизЛицНаборЗаписей (ФизическоеЛицоСсылка) Экспорт
	
	// Сведения предыдущего места работы
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо", ФизическоеЛицоСсылка);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СведенияПредыдущегоМестаРаботыФизЛиц.ФизЛицо,
		|	СведенияПредыдущегоМестаРаботыФизЛиц.Налогоплательщик,
		|	СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода,
		|	СведенияПредыдущегоМестаРаботыФизЛиц.Доход,
		|	СведенияПредыдущегоМестаРаботыФизЛиц.ДоходНеОблагаемыйИПН,
		|	СведенияПредыдущегоМестаРаботыФизЛиц.ДоходОблагаемыйСН,
		|	СведенияПредыдущегоМестаРаботыФизЛиц.ПримененнаяЛьгота,
		|	СведенияПредыдущегоМестаРаботыФизЛиц.ПримененныйВычет,
		|	СведенияПредыдущегоМестаРаботыФизЛиц.ОПВ,
		|	СведенияПредыдущегоМестаРаботыФизЛиц.ИПН,
		|	СведенияПредыдущегоМестаРаботыФизЛиц.СН,
		|	СведенияПредыдущегоМестаРаботыФизЛиц.СО,
		|	СведенияПредыдущегоМестаРаботыФизЛиц.ВОСМС
		|ИЗ
		|	РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК СведенияПредыдущегоМестаРаботыФизЛиц
		|ГДЕ
		|	СведенияПредыдущегоМестаРаботыФизЛиц.ФизЛицо = &ФизЛицо";
	
	СведенияПредыдущегоМестаРаботыФизЛицНаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());

Конецпроцедуры

////////////////////////////////////////////////////////////////////////////////
// Контекстно-зависимая справка

&НаКлиентеНаСервереБезКонтекста
Процедура ПодготовитьСправкуФормы(Форма) 
	
	ЦветФонаСправки		= РаботаСДиалогамиКлиентСервер.ВернутьШестнадцатиричноеПредставлениеЦвета(РаботаСДиалогамиКлиентСервер.ВстроеннаяСправка_ЦветФона());
	ЦветСсылкиСправки	= РаботаСДиалогамиКлиентСервер.ВернутьШестнадцатиричноеПредставлениеЦвета(РаботаСДиалогамиКлиентСервер.ВстроеннаяСправка_ЦветСсылки());

	Элементы = Форма.Элементы;
	ТекстМакетаВстроеннойСправки = "";

	Если Форма.Параметры.Ключ.Пустая() Тогда
		
		ТекстМакетаВстроеннойСправки =
		"<HTML>
		|	<HEAD>
		|		<META http-equiv=Content-Type content=""text/html; charset=utf-8"">" + РаботаСДиалогамиКлиентСервер.ВстроеннаяСправка_СтилиДокумента() + "
		|	</HEAD>
		|
		|	<BODY aLink=" + ЦветСсылкиСправки+" vLink=" + ЦветСсылкиСправки + " link=" + ЦветСсылкиСправки + " bgColor=" + ЦветФонаСправки + " scroll=auto><FONT face=""MS Sans Serif"" size=1>
		|		<IMG src=" + РаботаСДиалогамиКлиентСервер.ПолучитьПутьККартинкеДляHTML(Форма.ИДКартинки)+">
		|		<DIV><B>" + НСтр("ru='Если сотрудник ранее уже работал в организации...'") + "</B><BR>
		|		" + НСтр("ru='Необходимо выбрать вариант «Создать нового сотрудника, выбрав его из справочника физических лиц» и далее выбрать физлицо из списка.'") + "</DIV>
		|		<DIV><B>" + НСтр("ru='Как уточнить наименование сотрудника?'") + "</B><BR>
		|		" + НСтр("ru='В поле ""Наименование"" нажать на кнопку выбора из списка, можно выбрать предложенные варианты или задать произвольное дополнение к наименованию.'") + "</DIV>
		|		
		|	</FONT></BODY>
		|</HTML>";
		
	Иначе
		
		ТекстМакетаВстроеннойСправки =
		"<HTML>
		|	<HEAD>
		|		<META http-equiv=Content-Type content=""text/html; charset=utf-8"">" + РаботаСДиалогамиКлиентСервер.ВстроеннаяСправка_СтилиДокумента() + "
		|	</HEAD>
		|
		|	<BODY aLink=" + ЦветСсылкиСправки + " vLink="+ЦветСсылкиСправки + " link=" + ЦветСсылкиСправки + " bgColor=" + ЦветФонаСправки + " scroll=auto><FONT face=""MS Sans Serif"" size=1>
		|		<IMG src=" + РаботаСДиалогамиКлиентСервер.ПолучитьПутьККартинкеДляHTML(Форма.ИДКартинки) + ">
		|		<DIV><B>" + НСтр("ru='Как создать документ по этому сотруднику?'") + "</B><BR>
		|		" + НСтр("ru='Кадровые документы и некоторые документы по начислению можно создать, нажав на кнопку ""Ввести документ"".'") + "</DIV>
		|		<DIV><B>" + НСтр("ru='Как уточнить наименование сотрудника?'") + "</B><BR>
		|		" + НСтр("ru='В поле ""Наименование"" нажать на кнопку выбора из списка, можно выбрать предложенные варианты или задать произвольное дополнение к наименованию.'") + "</DIV>
		|		<DIV><B>" + НСтр("ru='Как сменить фамилию?'") + "</B><BR>
		|		" + НСтр("ru='Открыть форму по кнопке ""Смена ФИО"". В появившемся диалоговом окне ввести новую фамилию и указать дату, с которой фамилия была изменена.'") + "</DIV>
		|		<BR>
		|	</FONT></BODY>
		|</HTML>";

	КонецЕсли;

	Форма.ВстроеннаяСправка = ТекстМакетаВстроеннойСправки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Редактирование периодических сведений

&НаСервере
Процедура ПрочитатьНаборЗаписейПериодическихСведений(ИмяРегистра, ВедущийОбъект) Экспорт
	
	РедактированиеПериодическихСведенийСервер.ПрочитатьНаборЗаписей(ЭтаФорма, ИмяРегистра, ВедущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСведенияПрочиеВычетыНаСервере()
	
	ИПНПрочиеВычеты = "";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо", Объект.Физлицо);
	Запрос.УстановитьПараметр("МесяцНалоговогоПериода", НачалоМесяца(ОбщегоНазначения.ТекущаяДатаПользователя()));
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИПНПлановыеНалоговыеВычетыФизлицСрезПоследних.Налогоплательщик.Представление КАК Налогоплательщик,
		|	ИПНПлановыеНалоговыеВычетыФизлицСрезПоследних.ВычетИПН,
		|	ИПНПлановыеНалоговыеВычетыФизлицСрезПоследних.СуммаВычета
		|ИЗ
		|	РегистрСведений.ИПНПлановыеНалоговыеВычетыФизлиц.СрезПоследних(
		|			,
		|			Физлицо = &Физлицо
		|				И НАЧАЛОПЕРИОДА(МесяцНалоговогоПериода, МЕСЯЦ) = &МесяцНалоговогоПериода) КАК ИПНПлановыеНалоговыеВычетыФизлицСрезПоследних
		|ГДЕ
		|	ИПНПлановыеНалоговыеВычетыФизлицСрезПоследних.СуммаВычета <> 0";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		
		Результат = Новый Массив;
		
		Пока Выборка.Следующий() Цикл							
							
			Если Результат.Количество() <> 0 Тогда
				Результат.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '; вычет ""%1"" в сумме %2, налогоплательщик %3'"),Выборка.ВычетИПН,Формат(Выборка.СуммаВычета, "ЧЦ=15; ЧДЦ=2; ЧРГ="),Выборка.Налогоплательщик));	
			Иначе
				Результат.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Предоставляется вычет ""%1"" в сумме %2, налогоплательщик %3'"),Выборка.ВычетИПН,Формат(Выборка.СуммаВычета, "ЧЦ=15; ЧДЦ=2; ЧРГ="),Выборка.Налогоплательщик));	
			КонецЕсли;  
												
		КонецЦикла;  
		
		ИПНПрочиеВычеты = СтрСоединить(Результат);
	Иначе 
		ИПНПрочиеВычеты = НСтр("ru = 'Дополнительные вычеты не зарегистрированы'");
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияИзмененийМестаРаботы(Команда)
	
	ПараметрыОткрытия = Новый Структура("СсылкаНаСотрудника", Объект.Ссылка);
	ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаИсторииИзмененияМестаРаботы", ПараметрыОткрытия, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура КадровыеДокументы(Команда)
	
	ПараметрыОткрытия = Новый Структура;                    
	ПараметрыОткрытия.Вставить("Работник", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ИспользоватьОтборПоРаботнику", Истина);

	ОткрытьФорму("ЖурналДокументов.УчетКадровОрганизаций.ФормаСписка", ПараметрыОткрытия, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура НачисленияИУдержания(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СсылкаНаСотрудника", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ФизЛицо", Объект.Физлицо);
	ПараметрыОткрытия.Вставить("Организация", Объект.Организация);

	ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаНачисленияИУдержания", ПараметрыОткрытия, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОтражениеПлановыхНачислений(Команда)
	
ПараметрыОткрытия = Новый Структура("СсылкаНаСотрудника", Объект.Ссылка);
	ОткрытьФорму("Справочник.СотрудникиОрганизаций.Форма.ФормаОтражениеПлановыхНачислений", ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства 
