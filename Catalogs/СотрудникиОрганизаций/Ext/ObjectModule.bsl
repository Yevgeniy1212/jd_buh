#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область УправлениеДоступом

// СтандартныеПодсистемы.УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если ЭтоГруппа Тогда
		
		СтрокаТаб = Таблица.Добавить();
		СтрокаТаб.ЗначениеДоступа = Ссылка;
		
	Иначе
	                                                              
		Запрос = ЗапросВТВсеЗначенияДоступаСотрудников(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка));
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Выполнить();

		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);

		Если ДополнительныеСвойства.Свойство("ТекущаяОрганизация") 
			И ЗначениеЗаполнено(ДополнительныеСвойства.ТекущаяОрганизация) Тогда
			
			ТекущаяОрганизация = ДополнительныеСвойства.ТекущаяОрганизация;
			
		Иначе
			ТекущаяОрганизация = Справочники.Организации.ПустаяСсылка();
		КонецЕсли;

		Запрос.УстановитьПараметр("ТекущаяОрганизация", ТекущаяОрганизация);

		Если ДополнительныеСвойства.Свойство("ТекущееСтруктурноеПодразделение") 
			И ЗначениеЗаполнено(ДополнительныеСвойства.ТекущееСтруктурноеПодразделение) Тогда
			
			ТекущееСтруктурноеПодразделение = ДополнительныеСвойства.ТекущееСтруктурноеПодразделение;
			
		Иначе
			ТекущееСтруктурноеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;

		Запрос.УстановитьПараметр("ТекущееСтруктурноеПодразделение", ТекущееСтруктурноеПодразделение);

		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВсеЗначенияДоступаСотрудников.ЗначениеДоступаОрганизация КАК ЗначениеДоступаОрганизация,
		|	ВсеЗначенияДоступаСотрудников.ЗначениеДоступаСП КАК ЗначениеДоступаСП
		|ПОМЕСТИТЬ ВТЗначенияДоступаСотрудника
		|ИЗ
		|	ВТВсеЗначенияДоступаСотрудников КАК ВсеЗначенияДоступаСотрудников
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&Организация,
		|	&СтруктурноеПодразделение
		|ГДЕ
		|	&Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&ТекущаяОрганизация,
		|	&ТекущееСтруктурноеПодразделение
		|ГДЕ
		|	&ТекущаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗначенияДоступаСотрудника.ЗначениеДоступаОрганизация,
		|	ЗначенияДоступаСотрудника.ЗначениеДоступаСП
		|ИЗ
		|	ВТЗначенияДоступаСотрудника КАК ЗначенияДоступаСотрудника";
			
		НомерНабора = 0;

		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
				
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				СтрокаТаб = Таблица.Добавить();
				СтрокаТаб.НомерНабора		= НомерНабора;
				СтрокаТаб.ЗначениеДоступа	= Выборка.ЗначениеДоступаОрганизация;
				
				СтрокаТаб = Таблица.Добавить();
				СтрокаТаб.НомерНабора		= НомерНабора;
				СтрокаТаб.ЗначениеДоступа	= Выборка.ЗначениеДоступаСП;
			
				СтрокаТаб = Таблица.Добавить();
				СтрокаТаб.НомерНабора		= НомерНабора;
				СтрокаТаб.ЗначениеДоступа	= Физлицо;
				
				НомерНабора = НомерНабора + 1;
				
			КонецЦикла;
				
		Иначе

			СтрокаТаб = Таблица.Добавить();
			СтрокаТаб.НомерНабора		= НомерНабора;
			СтрокаТаб.ЗначениеДоступа	= Физлицо;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ЗапросВТВсеЗначенияДоступаСотрудников(Сотрудники)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Сотрудник,
	|	ВложенныйЗапрос.ЗначениеДоступаОрганизация,
	|	ВложенныйЗапрос.ЗначениеДоступаСП
	|ПОМЕСТИТЬ ВТВсеЗначенияДоступаСотрудников
	|ИЗ
	|	(ВЫБРАТЬ
	|		Сотрудники.Ссылка КАК Сотрудник,
	|		Сотрудники.Организация КАК ЗначениеДоступаОрганизация,
	|		Сотрудники.СтруктурноеПодразделение КАК ЗначениеДоступаСП
	|	ИЗ
	|		Справочник.СотрудникиОрганизаций КАК Сотрудники
	|	ГДЕ
	|		Сотрудники.Ссылка В(&Сотрудники)
	|		И Сотрудники.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		РаботникиОрганизаций.Сотрудник,
	|		РаботникиОрганизаций.ОбособленноеПодразделение,
	|		РаботникиОрганизаций.СтруктурноеПодразделение
	|	ИЗ
	|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|	ГДЕ
	|		РаботникиОрганизаций.Сотрудник В(&Сотрудники)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Сотрудники.Ссылка,
	|		Сотрудники.ТекущаяСтруктурнаяЕдиница,
	|		Сотрудники.ТекущееСтруктурноеПодразделение
	|	ИЗ
	|		Справочник.СотрудникиОрганизаций КАК Сотрудники
	|	ГДЕ
	|		Сотрудники.Ссылка В(&Сотрудники)
	|		И Сотрудники.ТекущаяСтруктурнаяЕдиница <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ЗначениеДоступаСП,
	|	ВложенныйЗапрос.ЗначениеДоступаОрганизация,
	|	ВложенныйЗапрос.Сотрудник";
	
	Возврат Запрос;

КонецФункции	

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура") 
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоОснованию(ДанныеЗаполнения);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если НЕ ЭтоГруппа И СтруктурнаяЕдиница.Пустая() Тогда
		СтруктурнаяЕдиница = Организация;
	КонецЕсли;
	
	Если НЕ ЭтоГруппа И НЕ ЗначениеЗаполнено(ДатаПриемаНаРаботу) И ТекущаяСтруктурнаяЕдиница <> СтруктурнаяЕдиница Тогда
		ТекущаяСтруктурнаяЕдиница = СтруктурнаяЕдиница;
	КонецЕсли;
	    	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписей") 
		и ЭтоНовый() Тогда
		
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияГруппДоступаПоУмолчанию.ВсеРазрешеныБезИсключений КАК ВсеРазрешеныБезИсключений
		|ИЗ
		|	РегистрСведений.ЗначенияГруппДоступаПоУмолчанию КАК ЗначенияГруппДоступаПоУмолчанию
		|ГДЕ
		|	ЗначенияГруппДоступаПоУмолчанию.ГруппаДоступа.Пользователь = &Пользователь
		|	И ЗначенияГруппДоступаПоУмолчанию.ТипЗначенийДоступа = &ТипЗначенийДоступа";
		
		Запрос.УстановитьПараметр("Пользователь"		, Пользователи.ТекущийПользователь());
		Запрос.УстановитьПараметр("ТипЗначенийДоступа"	, Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			ТекстСообщения = НСтр("ru = 'Для пользователя не получилось определить правдо доступа к справочнику ""Подразделения организаций""!'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"СтруктурноеПодразделениеОрганизация",,Отказ);
		Иначе 
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			Если Выборка.ВсеРазрешеныБезИсключений Тогда 
				Возврат;
			КонецЕсли;
			
		КонецЕсли;	
		
		Если ЗначениеЗаполнено (СтруктурноеПодразделение) Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗначенияГруппДоступа.ЗначениеРазрешено КАК ЗначениеРазрешено
			|ИЗ
			|	РегистрСведений.ЗначенияГруппДоступа КАК ЗначенияГруппДоступа
			|ГДЕ
			|	ЗначенияГруппДоступа.ГруппаДоступа.Пользователь = &Пользователь
			|	И ЗначенияГруппДоступа.ЗначениеДоступа = &Подразделение
			|	И ЗначенияГруппДоступа.ЗначениеРазрешено";
			
			Запрос.УстановитьПараметр("Подразделение", СтруктурноеПодразделение);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если РезультатЗапроса.Пустой() Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Недостаточно прав доступа, на структурное подразделение: ""%1""!'")
				, ?(ЗначениеЗаполнено(СтруктурноеПодразделение), СтруктурноеПодразделение, "головное подразделение")); 
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"СтруктурноеПодразделениеОрганизация",,Отказ);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьПоОснованию(Основание) Экспорт

	Если ТипЗнч(Основание) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Физлицо = Основание;
	КонецЕсли;

КонецПроцедуры

#КонецЕсли
