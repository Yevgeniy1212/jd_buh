
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ПередЗаписью(Отказ, РежимЗаписи)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		//Автономная работа: созданиче начального образа, исключения ошибки Запись не верна!
		//До изменении в механизмах платформы
		Если ЭтотОбъект.ДополнительныеСвойства.Свойство("СозданиеНачальногоОбраза")
			ИЛИ ЭтотОбъект.ДополнительныеСвойства.Свойство("ОбработкаДанных") Тогда
			Для Каждого ТекЗапись Из ЭтотОбъект Цикл
				УстановитьЗначенияПоУмолчанию(ТекЗапись);
			КонецЦикла; 
		КонецЕсли; 		
		Возврат;
	КонецЕсли;
	
	Если Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Регистратор = ЭтотОбъект.Отбор.Регистратор.Значение;
	
	ПривестиПустыеЗначенияСубконтоСоставногоТипа(ЭтотОбъект, Отказ);
	
КонецПроцедуры

// Субконто составного типа

Процедура ПривестиПустыеЗначенияСубконтоСоставногоТипа(Проводки, Отказ)
	
	КэшВидыСоставныхСубконто = Новый Соответствие;
	НомерСтроки = 0;
	Для Каждого Проводка Из Проводки Цикл
		
		НомерСтроки = НомерСтроки + 1;
		Если НЕ ЗначениеЗаполнено(Проводка.СчетДт) И НЕ Проводка.СчетКт.Забалансовый Тогда
			ТекстСообщения = НСтр("ru = 'Проводка № %1 <%2>: не заполнен счет дебета'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НомерСтроки, Проводка.Содержание);			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Проводка.СчетКт) И НЕ Проводка.СчетДт.Забалансовый Тогда
			ТекстСообщения = НСтр("ru = 'Проводка № %1 <%2>: не заполнен счет кредита'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НомерСтроки, Проводка.Содержание);			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;

		Для Каждого Субконто Из Проводка.СубконтоДт Цикл
			
			Если НЕ ЗначениеЗаполнено(Субконто.Значение) 
				И Субконто.Значение <> Неопределено 
				И СоставнойТипСубконто(Субконто.Ключ, КэшВидыСоставныхСубконто) Тогда
				Проводка.СубконтоДт.Вставить(Субконто.Ключ, Неопределено);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Субконто Из Проводка.СубконтоКт Цикл
			
			Если НЕ ЗначениеЗаполнено(Субконто.Значение) 
				И Субконто.Значение <> Неопределено 
				И СоставнойТипСубконто(Субконто.Ключ, КэшВидыСоставныхСубконто) Тогда
				Проводка.СубконтоКт.Вставить(Субконто.Ключ, Неопределено);
			КонецЕсли;
			
		КонецЦикла;
				
	КонецЦикла;
	
КонецПроцедуры

Функция СоставнойТипСубконто(ВидСубконто, КэшВидыСоставныхСубконто)
	
	Составной = КэшВидыСоставныхСубконто.Получить(ВидСубконто);
	
	Если Составной = Неопределено Тогда
		Составной = ВидСубконто.ТипЗначения.Типы().Количество() > 1;
		КэшВидыСоставныхСубконто.Вставить(ВидСубконто, Составной);
	КонецЕсли;
	
	Возврат Составной;
	
КонецФункции

Процедура УстановитьЗначенияПоУмолчанию(СтрокаНабора)
	СвойстваСчетаДт = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаНабора.СчетДт);
	УстановитьЗначенияПоУмолчаниюДтКт(СтрокаНабора, СвойстваСчетаДт, "Дт");
	СвойстваСчетаКт = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаНабора.СчетКт);
	УстановитьЗначенияПоУмолчаниюДтКт(СтрокаНабора, СвойстваСчетаКт, "Кт");
КонецПроцедуры

Процедура УстановитьЗначенияПоУмолчаниюДтКт(СтрокаНабора, СвойстваСчета, ДтКт)
	
	ПроверитьУстановленныеСубконто(СтрокаНабора, СвойстваСчета, ДтКт);
	
КонецПроцедуры

Процедура ПроверитьУстановленныеСубконто(СтрокаНабора, СвойстваСчета, ДтКт)

	ЗначенияСубконто = Новый Соответствие;
	Для каждого ВидСубконтоСчета Из СтрокаНабора["Субконто" + ДтКт] Цикл
		ЗначенияСубконто.Вставить(ВидСубконтоСчета.Ключ, ВидСубконтоСчета.Значение);
	КонецЦикла;
	
	СтрокаНабора["Субконто" + ДтКт].Очистить();
	
	Для НомерСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
		ВидСубконто = СвойстваСчета["ВидСубконто" + НомерСубконто];
		ТипСубконто = СвойстваСчета["ВидСубконто" + НомерСубконто + "ТипЗначения"];
		Попытка
		СтрокаНабора["Субконто" + ДтКт].Вставить(
			ВидСубконто,
				ТипСубконто.ПривестиЗначение(ЗначенияСубконто.Получить(ВидСубконто)));
		Исключение
			Продолжить;				
		КонецПопытки; 			
	КонецЦикла;
	
КонецПроцедуры

#КонецЕсли

