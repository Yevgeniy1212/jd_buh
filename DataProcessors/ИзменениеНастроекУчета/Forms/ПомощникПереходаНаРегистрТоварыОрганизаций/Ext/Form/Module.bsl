////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДатаНачала = Параметры.ДатаНачала;	
	Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	
	Если Не УправлениеДоступомБК.ЕстьПравоДоступаКОрганизации(Пользователи.ТекущийПользователь(), Организация) Тогда
		Организация = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
	КонецЕсли;	
		
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Организация, СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	Элементы.ГруппаПредупреждениеВводОстатков.Видимость = СуществуютДокументыВводаОстатков();	
	
	Если Не РольДоступна("ПолныеПрава") Тогда
		Элементы.ЗаполнитьКлючСвязи.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Организация = Неопределено;
		СтруктурноеПодразделение = Неопределено;
	КонецЕсли;
	
	Элементы.ГруппаПредупреждениеВводОстатков.Видимость = СуществуютДокументыВводаОстатков();	
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Организация, СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Элементы.ГруппаПредупреждениеВводОстатков.Видимость = СуществуютДокументыВводаОстатков();	
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаСписокДокументов(Элемент)
				
	ПараметрыФормы = Новый Структура;
	ПараметрыОтбораСписка = Новый Структура("ПомощникВводаНачальныхОстатков, РазделУчета",
	                         Истина, ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.Запасы"));
	Если ЗначениеЗаполнено(Организация) Тогда
		ПараметрыОтбораСписка.Вставить("Организация", Организация);
	КонецЕсли;
	ПараметрыФормы.Вставить("ПараметрыОтбораСписка", ПараметрыОтбораСписка);
	
	Отбор = Новый Структура("Проведен, ОтражатьПоСпециальнымРегистрам", Истина, Истина);
	Если ЗначениеЗаполнено(Организация) И ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Отбор.Вставить("СтруктурноеПодразделение", СтруктурноеПодразделение);
	КонецЕсли;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ОткрытьФорму("Документ.ВводНачальныхОстатков.Форма.ФормаСписка", ПараметрыФормы,, Истина);
			
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыВводаОстатков(Команда)
	
	Если СуществуютДокументыВводаОстатков(Истина) Тогда
		Элементы.ГруппаПредупреждениеВводОстатков.Видимость = Истина;	
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ТекстВопроса = НСтр("ru = 'В конфигурации уже существуют проведенные документы ""Ввод начальных остатков"" от %1,
		                           |выполнившие движения по начальному заполнению регистра накопления ""Товары организаций (БУ)"".
								   |
								   |Создать новые документы?'");
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, НачалоДня(ДатаНачала)-1);						   
		Обработчик = Новый ОписаниеОповещения("СоздатьДокументыВводаОстатковЗавершение", ЭтотОбъект, Неопределено);
		ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки,, КодВозвратаДиалога.Отмена);
	Иначе
		ВвестиОстаткиНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКлючСвязи(Команда)

	ФормаЗапускаОбработчиков = ПолучитьФорму("Обработка.ОбновлениеИнформационнойБазыБК.Форма");
	ФормаЗапускаОбработчиков.Открыть();
	
	// Установить строку заполнения ключа связи как текущую.
	ИдентфиикаторСтроки = Неопределено;
	КоллекцияСтрокВерсий = ФормаЗапускаОбработчиков.ОбработчикиОбновления.ПолучитьЭлементы();
	Для Каждого СтрокаВерсии Из КоллекцияСтрокВерсий Цикл
		Если СтрокаВерсии.Версия = "3.0.9.25" Тогда
			КоллекцияСтрокОбработчиков = СтрокаВерсии.ПолучитьЭлементы();
			Для Каждого СтрокаОбработчика Из КоллекцияСтрокОбработчиков Цикл
				Если СтрокаОбработчика.Процедура = "Обработки.ОбновлениеИнформационнойБазыБК.ЗаполнитьКлючСвязи" Тогда
					ИдентфиикаторСтроки = СтрокаОбработчика.ПолучитьИдентификатор();	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ИдентфиикаторСтроки <> Неопределено Тогда
		ФормаЗапускаОбработчиков.Элементы.ОбработчикиОбновления.ТекущаяСтрока = ИдентфиикаторСтроки;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяПроцедуры", "Обработки.ОбновлениеИнформационнойБазыБК.ЗаполнитьКлючСвязи");	
	ДополнительныеПараметры.Вставить("ИмяСобытия", НСтр("ru = 'Заполнение служебных реквизитов в документах учета ТМЗ'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьОбработчикОбновления", ФормаЗапускаОбработчиков, ДополнительныеПараметры);	
	ОткрытьФорму("Обработка.ОбновлениеИнформационнойБазыБК.Форма.ЗаполнениеРеквизитаКлючСвязи", , ФормаЗапускаОбработчиков, , , , ОписаниеОповещения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ВвестиОстаткиНаСервере()
	
	МассивСчетовБУ     = Новый Массив;
	
	РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Запасы;
	
	ТаблицаСчетовРазделовУчета = Документы.ВводНачальныхОстатков.ПолучитьТаблицуСчетов();
	СтрокаТаблицыРазделовУчета = ТаблицаСчетовРазделовУчета.НайтиСтроки(Новый Структура("РазделУчета", РазделУчета));
	
	ДатаВводаОстатков = НачалоДня(ДатаНачала) - 1;
	
	Если СтрокаТаблицыРазделовУчета <> Неопределено Тогда
		
		СтрокаТаблицыРазделовУчета = СтрокаТаблицыРазделовУчета[0];
		
		СчетаГруппы		= СтрокаТаблицыРазделовУчета.СчетаГруппы;
		Счета			= СтрокаТаблицыРазделовУчета.Счета;
		СчетаИсключения	= СтрокаТаблицыРазделовУчета.СчетаИсключения;	
		
		МассивКодовСчетовГруппы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(СчетаГруппы, ",");
		МассивКодовИсключений   = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(СчетаИсключения, ",");
		МассивСчетовГруппы = Новый Массив;
		МассивИсключений   = Новый Массив;
		
		Для Инд = 0 По МассивКодовСчетовГруппы.Количество()-1  Цикл
			МассивСчетовГруппы.Добавить(ПланыСчетов.Типовой.НайтиПоКоду(МассивКодовСчетовГруппы[Инд]).Ссылка);		
		КонецЦикла; 
		
		Для Инд = 0 По МассивКодовИсключений.Количество()-1  Цикл
			МассивИсключений.Добавить(ПланыСчетов.Типовой.НайтиПоКоду(МассивКодовИсключений[Инд]).Ссылка);		
		КонецЦикла; 
		
		МассивСчетовБУ = ПроцедурыБухгалтерскогоУчета.ПолучитьМассивСчетовССубсчетами(МассивСчетовГруппы, Ложь, , , МассивИсключений);
		
	КонецЕсли;
	
	Если МассивСчетовБУ.Количество() = 0 Тогда
		// Состав счетов должен соответсвовать счетам для раздела учета "Запасы" документа ВводНачальныхОстатков
		// см. макет СписокСчетовРазделовУчета в документе
		МассивСчетовБУ.Добавить(ПланыСчетов.Типовой.СырьеИМатериалы);                 // 1310
		МассивСчетовБУ.Добавить(ПланыСчетов.Типовой.ГотоваяПродукция);                // 1320
		МассивСчетовБУ.Добавить(ПланыСчетов.Типовой.Товары);                          // 1330
		МассивСчетовБУ.Добавить(ПланыСчетов.Типовой.МатериалыПереданныеВПереработку); // 1351
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("МассивСчетов", МассивСчетовБУ);
	ПараметрыЗаполнения.Вставить("Дата", ДатаВводаОстатков);
	ПараметрыЗаполнения.Вставить("ПоддержкаРаботыСоСтруктурнымиПодразделениями", ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	ПараметрыЗаполнения.Вставить("ПомощникВводаНачальныхОстатков", Истина);
	ПараметрыЗаполнения.Вставить("ОтражатьПоСпециальнымРегистрам", Истина);
	ПараметрыЗаполнения.Вставить("ОтражатьВБухгалтерскомУчете", Ложь);
	ПараметрыЗаполнения.Вставить("УчитыватьКПН", Ложь);
	ПараметрыЗаполнения.Вставить("ИмяТабличнойЧасти", "ТоварыОрганизаций");
	ПараметрыЗаполнения.Вставить("РазделУчета", РазделУчета);

	Если ЗначениеЗаполнено(Организация) Тогда
		
		ПараметрыЗаполнения.Вставить("Организация", Организация);
		ПараметрыЗаполнения.Вставить("СтруктурноеПодразделение", СтруктурноеПодразделение);
		
		ДокументОбъект = СоздатьДокументВводаОстатков(ПараметрыЗаполнения);
		
		ПараметрыЗаполнения.Вставить("ТоварыОрганизаций", ДокументОбъект.ТоварыОрганизаций.Выгрузить());
		
		Документы.ВводНачальныхОстатков.ЗаполнитьОстаткамиТоварыОрганизацийПоБУНаСервере(ПараметрыЗаполнения);
		
		Если ПараметрыЗаполнения.ТоварыОрганизаций.Количество() <> 0 Тогда
			ДокументОбъект.ТоварыОрганизаций.Загрузить(ПараметрыЗаполнения.ТоварыОрганизаций);
			ЗаписатьДокумент(ДокументОбъект);
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 %2: В бухгалтерском учете нет данных по остаткам ТМЗ для ввода начальных остатков.'"), Организация, СтруктурноеПодразделение);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;		
	Иначе  		
		СубконтоСклады  = ?(Планысчетов.Налоговый.Товары.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады, "ВидСубконто") = Неопределено, Ложь, Истина);
		СтрокаСубконто = "";
		Если Не СубконтоСклады  Тогда
			СтрокаСубконто  = СтрокаСубконто +  " ТиповойОстатки.Субконто1 КАК Номенклатура,";
		Иначе
			СтрокаСубконто  = СтрокаСубконто +  " ТиповойОстатки.Субконто1 КАК Номенклатура, ТиповойОстатки.Субконто2 КАК Склад,";
		КонецЕсли;   
	           		
		Запрос = Новый Запрос;
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ТиповойОстатки.Организация КАК Организация,
		               |	ТиповойОстатки.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
		               |	" + СтрокаСубконто + "
		               |	ЕСТЬNULL(ТиповойОстатки.КоличествоОстаток, 0) КАК Количество
		               |ИЗ
		               |	РегистрБухгалтерии.Типовой.Остатки(&ДатаОстатков, Счет В ИЕРАРХИИ (&СписокСчетов),&ВидыСубконто , ) КАК ТиповойОстатки
					   |ГДЕ			
					   |	(ТиповойОстатки.КоличествоОстаток <> 0)";
					   
	Если СубконтоСклады Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ
			|ВЫБРАТЬ
			|	ТиповойОстатки.Организация,
			|	ТиповойОстатки.СтруктурноеПодразделение,
			|	ТиповойОстатки.Субконто1,
			|	&СкладПустаяСсылка,
			|	ЕСТЬNULL(ТиповойОстатки.КоличествоОстаток, 0) КАК Количество				   
			|ИЗ
			|	РегистрБухгалтерии.Типовой.Остатки(&ДатаОстатков, Счет В ИЕРАРХИИ (&СписокСчетовПрочие), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура)) КАК ТиповойОстатки
			|ГДЕ			
			|	(ТиповойОстатки.КоличествоОстаток <> 0)";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО
	|	ТиповойОстатки.Субконто1
	|ИТОГИ
	|	СУММА(Количество)
	|ПО
	|	Организация,
	|	СтруктурноеПодразделение";
	
	Запрос.Текст = ТекстЗапроса;	
	
	
	Запрос.УстановитьПараметр("СписокСчетов", МассивСчетовБУ);		   
	
	ГраницаКон = Новый Граница (ДатаВводаОстатков,ВидГраницы.Включая);
	Запрос.УстановитьПараметр("ДатаОстатков", ГраницаКон);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
	Если СубконтоСклады Тогда
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады);
		Запрос.УстановитьПараметр("СкладПустаяСсылка", Справочники.Склады.ПустаяСсылка());
		
		// Счета 1350 не попадут в результат запроса, т.к. у них нет субконто Склад.
		// В таком случае используется ОБЪЕДИНЕНИЕ 
		МассивСчетовПрочие = Новый Массив;
		МассивСчетовПрочие.Добавить(ПланыСчетов.Типовой.МатериалыПереданныеВПереработку); // 1351
		Запрос.УстановитьПараметр("СписокСчетовПрочие", МассивСчетовПрочие);
	КонецЕсли;
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'В бухгалтерском учете нет данных по остаткам ТМЗ для ввода начальных остатков.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ВыборкаОрганизация = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Организация");
	
	Пока ВыборкаОрганизация.Следующий() Цикл
		
		ВыборкаСтруктурноеПодразделение = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СтруктурноеПодразделение");
		
		Пока ВыборкаСтруктурноеПодразделение.Следующий() Цикл
			
			ПараметрыЗаполнения.Вставить("Организация", ВыборкаСтруктурноеПодразделение.Организация);
			ПараметрыЗаполнения.Вставить("СтруктурноеПодразделение", ВыборкаСтруктурноеПодразделение.СтруктурноеПодразделение);
			
			ДокументОбъект = СоздатьДокументВводаОстатков(ПараметрыЗаполнения);
			
			ВыборкаНоменклатура = ВыборкаСтруктурноеПодразделение.Выбрать();
			ТоварыОрганизаций   = ДокументОбъект.ТоварыОрганизаций;
			
			Пока ВыборкаНоменклатура.Следующий() Цикл
				
				НоваяСтрока = ТоварыОрганизаций.Добавить();
				НоваяСтрока.Номенклатура = ВыборкаНоменклатура.Номенклатура;
				Если СубконтоСклады Тогда
					НоваяСтрока.Склад    = ВыборкаНоменклатура.Склад;
				КонецЕсли;			
				НоваяСтрока.Количество   = ВыборкаНоменклатура.Количество;
				
			КонецЦикла;
			
			Если ТоварыОрганизаций.Количество() <> 0 Тогда
				ЗаписатьДокумент(ДокументОбъект);
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 %2: В бухгалтерском учете нет данных по остаткам ТМЗ для ввода начальных остатков.'"),
				ВыборкаСтруктурноеПодразделение.Организация, ВыборкаСтруктурноеПодразделение.СтруктурноеПодразделение);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;	
	
КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СоздатьДокументВводаОстатков(ПараметрыЗаполнения)
	
	ДокументОбъект = Документы.ВводНачальныхОстатков.СоздатьДокумент();
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект,ПараметрыЗаполнения);
	
	Возврат ДокументОбъект;
	
КонецФункции

&НаСервере
Процедура ЗаписатьДокумент(ДокументОбъект, РежимЗаписи = "Проведение")

	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента[РежимЗаписи]);
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Записан документ: %1'"), ДокументОбъект.Ссылка);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при записи документа ""%1"": %2'"), Строка(ДокументОбъект), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Организация, СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	
	Элементы.ГруппаПредупреждениеВводОстатков.Видимость = СуществуютДокументыВводаОстатков();	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыВводаОстатковЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВвестиОстаткиНаСервере();
		Элементы.ГруппаПредупреждениеВводОстатков.Видимость = СуществуютДокументыВводаОстатков();	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СуществуютДокументыВводаОстатков(ОтборПоДатеОстатков = Ложь)
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		|	ВводНачальныхОстатков.Ссылка КАК Документ,
		|	ВводНачальныхОстатков.Организация,
		|	ВводНачальныхОстатков.СтруктурноеПодразделение
		|ИЗ
		|	Документ.ВводНачальныхОстатков КАК ВводНачальныхОстатков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизацийБУ.Обороты(&ДатаОстатков, &ДатаОстатков, Регистратор, &УсловиеОрганизация) КАК ТоварыОрганизацийОбороты
		|		ПО ВводНачальныхОстатков.Ссылка = ТоварыОрганизацийОбороты.Регистратор";
		
	УсловиеОрганизация = "";	
	Если ЗначениеЗаполнено(Организация) Тогда
		УсловиеОрганизация = "Организация = &Организация";
		Запрос.УстановитьПараметр("Организация", Организация);
		Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			УсловиеОрганизация = УсловиеОрганизация + " И СтруктурноеПодразделение = &СтруктурноеПодразделение";
			Запрос.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
		КонецЕсли;
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОрганизация", УсловиеОрганизация);
	
	Если ОтборПоДатеОстатков Тогда
		Запрос.УстановитьПараметр("ДатаОстатков", НачалоДня(ДатаНачала)-1);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаОстатков", "");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаДокументы = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаДокументы.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции
