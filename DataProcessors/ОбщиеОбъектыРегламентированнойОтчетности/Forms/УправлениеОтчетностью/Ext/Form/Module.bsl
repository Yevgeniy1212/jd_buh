
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
			
	МассивНаименованийПравыхГраницПериода = Новый Структура;
	МассивНаименованийПравыхГраницПериода.Вставить("Месяц1" , НСтр("ru = 'января'"));
	МассивНаименованийПравыхГраницПериода.Вставить("Месяц2" , НСтр("ru = 'февраля'"));
	МассивНаименованийПравыхГраницПериода.Вставить("Месяц3" , НСтр("ru = 'I-го квартала'"));
	МассивНаименованийПравыхГраницПериода.Вставить("Месяц4" , НСтр("ru = 'апреля'"));
	МассивНаименованийПравыхГраницПериода.Вставить("Месяц5" , НСтр("ru = 'мая'"));
	МассивНаименованийПравыхГраницПериода.Вставить("Месяц6" , НСтр("ru = 'I-го полугодия'"));
	МассивНаименованийПравыхГраницПериода.Вставить("Месяц7" , НСтр("ru = 'июля'"));
	МассивНаименованийПравыхГраницПериода.Вставить("Месяц8" , НСтр("ru = 'августа'"));
	МассивНаименованийПравыхГраницПериода.Вставить("Месяц9" , НСтр("ru = 'III-го квартала'"));
	МассивНаименованийПравыхГраницПериода.Вставить("Месяц10", НСтр("ru = 'октября'"));
	МассивНаименованийПравыхГраницПериода.Вставить("Месяц11", НСтр("ru = 'ноября'"));
	МассивНаименованийПравыхГраницПериода.Вставить("Месяц12", НСтр("ru = 'года'"));
	
	мСписокОтчетовСОтражениемВУчете = Новый СписокЗначений;
	мСписокОтчетовСОтражениемВУчете.Добавить("РегламентированныйОтчет100Форма");
	мСписокОтчетовСОтражениемВУчете.Добавить("РегламентированныйОтчет220Форма");
	мСписокОтчетовСОтражениемВУчете.Добавить("РегламентированныйОтчет70101Форма");
	мСписокОтчетовСОтражениемВУчете.Добавить("РегламентированныйОтчет701Форма");
	мСписокОтчетовСОтражениемВУчете.Добавить("РегламентированныйОтчет700Форма");
	мСписокОтчетовСОтражениемВУчете.Добавить("РегламентированныйОтчет910Форма");
	мСписокОтчетовСОтражениемВУчете.Добавить("РегламентированныйОтчет913Форма");
		
	ПараметрыОткрытия = Параметры.ПараметрыОткрытия;
		
	МетаданныеВерсия = Метаданные.Версия;
	
	роНеПоказыватьИнформациюДляПользователей = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.ИнформацияДляПользователей", "роНеПоказыватьИнформациюДляПользователей") = Метаданные.Версия;
	
	ВосстановитьПараметрыОтбора();

	ЗаполнитьИзСправочникаРегламентированныеОтчеты();
	ВосстановитьСписокВыбранныхВидовОтчетов();
	Элементы.ДеревоОтчетовРазвернутьВсе.Доступность = мИерархическийПросмотр;
	Элементы.ДеревоОтчетовСвернутьВсе.Доступность   = мИерархическийПросмотр;
	
	Элементы.ДеревоОтчетовКонтекстноеМенюРазвернутьВсе.Доступность = мИерархическийПросмотр;
	Элементы.ДеревоОтчетовКонтекстноеМенюСвернутьВсе.Доступность   = мИерархическийПросмотр;
	
	//Пока отключим возможность выгрузки из списка отчетов
	//Элементы.Выгрузка.Видимость = НЕ РольДоступна("ЧтениеДанныхБухгалтерии");
	Элементы.Выгрузка.Видимость = Ложь;
	Элементы.КМВыгрузка.Видимость = Ложь;
	
	Элементы.ЖурналОтчетов.ВосстанавливатьТекущуюСтроку = Истина;
		
	Если НЕ ЗначениеЗаполнено(Периодичность) Тогда // первое открытие
		Периодичность = "По итогам";
		ДатаКонцаПериодаОтчета = КонецМесяца(ДобавитьМесяц(ТекущаяДатаСеанса(), -1));
		ДатаНачалаПериодаОтчета = НачалоГода(ДатаКонцаПериодаОтчета);
	КонецЕсли;
	
	ОргПоУмолчанию = РегламентированнаяОтчетностьПереопределяемый.ПолучитьОрганизациюПоУмолчанию();
	
	УчетПоВсемОрганизациям = РегламентированнаяОтчетностьПереопределяемый.ПолучитьПризнакУчетаПоВсемОрганизациям();
	Элементы.Организация.ТолькоПросмотр = НЕ УчетПоВсемОрганизациям;
	Если (ЗначениеЗаполнено(ОргПоУмолчанию) И НЕ УчетПоВсемОрганизациям) ИЛИ (Организация.Количество() = 0 И УчетПоВсемОрганизациям И (ЗначениеЗаполнено(ОргПоУмолчанию))) Тогда
		Организация.Очистить();
		Организация.Добавить(ОргПоУмолчанию);
	КонецЕсли;
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьПереопределяемый.ДобавитьНазначаемуюКоманду(ЭтаФорма, Элементы.ОтборПоПериоду);
	
	ЗаголовокФормы = РегламентированнаяОтчетностьПереопределяемый.ЗаголовокФормыУправлениеОтчетностью();
	
	Заголовок = ?(ЗначениеЗаполнено(ЗаголовокФормы), ЗаголовокФормы, Заголовок);
	
	РегламентированнаяОтчетностьПереопределяемый.НастроитьКнопкиКалендаряБухгалтера(, Элементы.ФормаОткрытьКалендарь);
	
	УстановитьОтборы();
	
	УправлениеЭлементамиОтбораПоПериоду(ЭтотОбъект);
	УправлениеНадписямиМесяцев(ЭтотОбъект);
	ПоказатьПериод(ЭтотОбъект);
	ОбновитьПодсказкиЭлементовУправленияПериодом(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
			
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Обновить дерево отчетов" И Параметр = "Обновить дерево отчетов" Тогда
		ОбновитьДеревоОтчетовНаКлиенте();
	ИначеЕсли ИмяСобытия = "Позиционирование в списке отчетов" И ТипЗнч(Параметр) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда		
		Элементы.ЖурналОтчетов.ТекущаяСтрока = Параметр;
		Если Элементы.ЖурналОтчетов.ТекущаяСтрока <> Параметр Тогда // позиционирование не произошло => мешает отбор
			ПоказатьПредупреждение(,НСтр("ru='Введенный отчет не отображен в журнале, так как не соответствует отбору!'"));
		КонецЕсли;	
	ИначеЕсли ИмяСобытия = "Запись_ОтражениеНалоговойОтчетностиВРеглУчете" Тогда		  		
		Элементы.ЖурналОтчетов.Обновить();
		УстановитьВидимостьКнопкиОтражениеВУчете();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.НачалоВыбораСпискаСтруктурныхЕдиниц(
		Организация, ЭтотОбъект, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСпискаСтруктурныхЕдиниц(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Организация = Результат;
	Организация.СортироватьПоЗначению();
	
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Организация.Количество() = 1 Тогда
		ПоказатьЗначение(,Организация.Получить(0).Значение);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	Организация.Очистить();
		
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодПриИзменении(Элемент)
	
	ОбновитьДеревоОтчетовНаКлиенте(Ложь);
	УправлениеЭлементамиОтбораПоПериоду(ЭтотОбъект);
	УправлениеНадписямиМесяцев(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьПриИзменении(Элемент)
	
	УстановитьДатыНачалаИКонцаПериодаОтчета();
	
	ОбновитьДеревоОтчетовНаКлиенте(Ложь);
	УправлениеЭлементамиОтбораПоПериоду(ЭтотОбъект);
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ГодПриИзменении(Элемент)
	
	ДатаКонцаПериодаОтчета = Дата(Год, Месяц(ДатаКонцаПериодаОтчета), День(КонецМесяца(Дата(Год, Месяц(ДатаКонцаПериодаОтчета), 1))));
	ДатаНачалаПериодаОтчета = НачалоГода(ДатаКонцаПериодаОтчета);
	ОбновитьДеревоОтчетовНаКлиенте(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
		
	УстановитьДатыНачалаИКонцаПериодаОтчета();
	
	УправлениеНадписямиМесяцев(ЭтотОбъект);
	ОбновитьДеревоОтчетовНаКлиенте(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПериодаОтчетаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ДатаНачалаПериодаОтчета) И ЗначениеЗаполнено(ДатаКонцаПериодаОтчета) И ДатаНачалаПериодаОтчета > ДатаКонцаПериодаОтчета Тогда
		ДатаКонцаПериодаОтчета = ДатаНачалаПериодаОтчета;
	КонецЕсли;
	
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаКонцаПериодаОтчетаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ДатаНачалаПериодаОтчета) И ЗначениеЗаполнено(ДатаКонцаПериодаОтчета) И ДатаНачалаПериодаОтчета > ДатаКонцаПериодаОтчета Тогда
		ДатаНачалаПериодаОтчета = ДатаКонцаПериодаОтчета;
	КонецЕсли;
	
	УстановитьОтборы();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ДеревоОтчетов

&НаКлиенте
Процедура ДеревоОтчетовПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ДеревоОтчетов.ТекущиеДанные <> Неопределено Тогда
		Элементы.ДеревоОтчетовСоздатьНовыйОтчет.Доступность = НЕ Элементы.ДеревоОтчетов.ТекущиеДанные.ЭтоГруппа;
		Элементы.ДеревоОтчетовКонтекстноеМенюСоздатьНовыйОтчет.Доступность = НЕ Элементы.ДеревоОтчетов.ТекущиеДанные.ЭтоГруппа;
		
	Иначе
		Элементы.ДеревоОтчетовСоздатьНовыйОтчет.Доступность = Ложь;
		Элементы.ДеревоОтчетовКонтекстноеМенюСоздатьНовыйОтчет.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтчетовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтчетовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтчетовПометкаПриИзменении(Элемент)
	
	АналогичнаяСтрокаПолногоДерева = ПолучитьСтрокуДереваПоСсылке(мПолноеДеревоОтчетов, Элементы.ДеревоОтчетов.ТекущиеДанные.Ссылка);
	Если Элементы.ДеревоОтчетов.ТекущиеДанные.Пометка = 2 Тогда
		Элементы.ДеревоОтчетов.ТекущиеДанные.Пометка = 0;
	КонецЕсли;
	АналогичнаяСтрокаПолногоДерева.Пометка = Элементы.ДеревоОтчетов.ТекущиеДанные.Пометка;
	ИзменитьПометкуПодчиненных(Элементы.ДеревоОтчетов.ТекущиеДанные, , , Истина, ДеревоОтчетов);
	ИзменитьПометкуПодчиненных(АналогичнаяСтрокаПолногоДерева, , , Истина, мПолноеДеревоОтчетов);
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтчетовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если НЕ Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		Доки = ДокументыСУчетомКритериевОтбора(Элементы.ДеревоОтчетов.ТекущиеДанные.ИсточникОтчета);
		Если Доки <> 0 Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ИсточникОтчета", Элементы.ДеревоОтчетов.ТекущиеДанные.ИсточникОтчета);
			ПараметрыФормы.Вставить("Периодичность", Периодичность);
			ПараметрыФормы.Вставить("ДатаКонцаПериодаОтчета", ДатаКонцаПериодаОтчета);
			ПараметрыФормы.Вставить("Организация", Организация);
			ПараметрыФормы.Вставить("ОтборПериод", ОтборПериод);
			ПараметрыФормы.Вставить("ДатаНачалаПериодаОтчета", ДатаНачалаПериодаОтчета);
																						
			ОписаниеОповещения = Новый ОписаниеОповещения("ДеревоОтчетовВыборЗавершение", ЭтотОбъект);
			
			РегламентированнаяОтчетностьКлиент.ОткрытьОбщуюФормуПоИмени(
				"ФормаВыбораОтчета", ПараметрыФормы, ЭтотОбъект, , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ОткрытьФормуОтчетаНаКлиенте(Элементы.ДеревоОтчетов.ТекущиеДанные);				
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ЖурналОтчетов

&НаКлиенте
Процедура ЖурналОтчетовПриАктивизацииСтроки(Элемент)

	УстановитьВидимостьКнопкиОтражениеВУчете();
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналОтчетовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
		
	Если НЕ Копирование Тогда
		Отказ = Истина;
		ДобавлениеОтчетаВЖурналеОтчетов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьОтборы();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОткрытьСправочник(Команда)
		
	ОткрытьФорму("Справочник.РегламентированныеОтчеты.Форма.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	
	ПараметрыФормы = Новый Структура;

	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьНастройкиЗавершение", ЭтотОбъект);
	РегламентированнаяОтчетностьКлиент.ОткрытьОбщуюФормуПоИмени("УправлениеОтчетностьюФормаНастройки", ПараметрыФормы, ЭтотОбъект, , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйОтчет(Команда)
	
	Если Элементы.ДеревоОтчетов.ТекущиеДанные <> Неопределено
	   И НЕ Элементы.ДеревоОтчетов.ТекущиеДанные.ЭтоГруппа Тогда
		ОткрытьФормуОтчетаНаКлиенте(Элементы.ДеревоОтчетов.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкиУВсех(Команда)
	
	ИзменитьПометкуПодчиненных(ДеревоОтчетов, Ложь);
	ИзменитьПометкуПодчиненных(мПолноеДеревоОтчетов, Ложь);
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьВсе(Команда)
	
	ИзменитьПометкуПодчиненных(ДеревоОтчетов, Истина);
	ИзменитьПометкуПодчиненных(мПолноеДеревоОтчетов, Истина);
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	Для Каждого Стр Из ДеревоОтчетов.ПолучитьЭлементы() Цикл
		Элементы.ДеревоОтчетов.Развернуть(Стр.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	Для Каждого Стр Из ДеревоОтчетов.ПолучитьЭлементы() Цикл
		Элементы.ДеревоОтчетов.Свернуть(Стр.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДеревоОтчетовНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИлиОтменитьИерархическийРежимПросмотра(Команда)
	
	мИерархическийПросмотр = НЕ мИерархическийПросмотр;
	Элементы.ДеревоОтчетовУстановитьИлиОтменитьИерархическийРежимПросмотра.Пометка = мИерархическийПросмотр;
	Элементы.ДеревоОтчетовКонтекстноеМенюУстановитьИлиОтменитьИерархическийРежимПросмотра.Пометка = мИерархическийПросмотр;
	ОбновитьДеревоОтчетовНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПроизвольныйПериод(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	
	Диалог.Период.ДатаНачала    = ДатаНачалаПериодаОтчета;
	Диалог.Период.ДатаОкончания = ДатаКонцаПериодаОтчета;
	
	ДополнительныеПараметры = Новый Структура("Диалог", Диалог);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПроизвольныйПериодЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	СтандартнаяОбработка = Истина;
	
	Если СтандартнаяОбработка Тогда
		
		ОтчетыДляПакетнойОбработки = Новый СписокЗначений;
		ОтчетыДляПакетнойОбработки.ЗагрузитьЗначения(Элементы.ЖурналОтчетов.ВыделенныеСтроки);
		
		Если ОтчетыДляПакетнойОбработки.Количество() <> 0 Тогда
			
			РегламентированнаяОтчетностьКлиент.НапечататьОтчеты(ОтчетыДляПакетнойОбработки, "ПоказатьБланк");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	СтандартнаяОбработка = Истина;
	
	Если СтандартнаяОбработка Тогда
		
		ОтчетыДляПакетнойОбработки = Новый СписокЗначений;
		ОтчетыДляПакетнойОбработки.ЗагрузитьЗначения(Элементы.ЖурналОтчетов.ВыделенныеСтроки);
		
		Если ОтчетыДляПакетнойОбработки.Количество() <> 0 Тогда
			
			Если ОтчетыДляПакетнойОбработки.Количество() = 1 Тогда
				ТекстВопроса = НСтр("ru = 'Напечатать выбранный отчет?'");
			Иначе
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтрокуИзМассива(НСтр("ru = 'Выбрано %1 отчетов.
				|Напечатать выбранные отчеты?'"), ОтчетыДляПакетнойОбработки.Количество());
			КонецЕсли;
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПечататьСразуЗавершение", ЭтотОбъект, Новый Структура("ОтчетыДляПакетнойОбработки", ОтчетыДляПакетнойОбработки));
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	СтандартнаяОбработка = Истина;
	
	Если СтандартнаяОбработка Тогда
	
		ОтчетыДляПакетнойОбработки = Новый СписокЗначений;
		ОтчетыДляПакетнойОбработки.ЗагрузитьЗначения(Элементы.ЖурналОтчетов.ВыделенныеСтроки);
		
		Если ОтчетыДляПакетнойОбработки.Количество() <> 0 Тогда 
			НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("ПодключениеРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ОтчетыДляПакетнойОбработки));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключениеРасширенияРаботыСФайламиЗавершение(ПодключеноРасширениеРаботыСФайлами, ОтчетыДляПакетнойОбработки) Экспорт
	
	Если ОтчетыДляПакетнойОбработки.Количество() = 1 Тогда
		ТекстВопроса = НСтр("ru = 'Выгрузить выбранный отчет?'");
	Иначе
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выбрано %1 отчетов.
		|Выгрузить выбранные отчеты?'"), ОтчетыДляПакетнойОбработки.Количество());
	КонецЕсли;
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОтчетыДляПакетнойОбработки", ОтчетыДляПакетнойОбработки);
	ДополнительныеПараметры.Вставить("ПодключеноРасширениеРаботыСФайлами", ПодключеноРасширениеРаботыСФайлами);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЖурнал(Команда)
		
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьВУчете(Команда)
	
	ТекущиеДанные = Элементы.ЖурналОтчетов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(,НСтр("ru='Не выбран отчет!'"));
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументОтраженияВУчете) Тогда
		РегламентированнаяОтчетностьКлиент.ОткрытьДокументОтраженияНалОтчетностиВУчете(ТекущиеДанные.Ссылка, ТекущиеДанные.ДокументОтраженияВУчете, ЭтотОбъект);
	Иначе
		Если ТекущиеДанные.ИсточникОтчета = "РегламентированныйОтчет910Форма" Тогда
			ДополнительныеПараметрыОтражения = СформироватьДополнительныеПараметрыОтраженияДанных(ТекущиеДанные.ИсточникОтчета, ТекущиеДанные.НалогоплательщикЯвляетсяИП);
			РегламентированнаяОтчетностьКлиент.СоздатьДокументОтраженияНалОтчетностиВУчете(ТекущиеДанные.Ссылка, ЭтотОбъект, ДополнительныеПараметрыОтражения);
		ИначеЕсли ТекущиеДанные.ИсточникОтчета = "РегламентированныйОтчет701Форма" Тогда
			ДополнительныеПараметрыОтражения = СформироватьДополнительныеПараметрыОтраженияДанных(ТекущиеДанные.ИсточникОтчета);
			РегламентированнаяОтчетностьКлиент.СоздатьДокументОтраженияНалОтчетностиВУчете(ТекущиеДанные.Ссылка, ЭтотОбъект, ДополнительныеПараметрыОтражения);
		ИначеЕсли ТекущиеДанные.ИсточникОтчета = "РегламентированныйОтчет700Форма"
			ИЛИ ТекущиеДанные.ИсточникОтчета = "РегламентированныйОтчет70101Форма" Тогда
			ДополнительныеПараметрыОтражения = СформироватьДополнительныеПараметрыОтраженияДанныхНаСервере(ТекущиеДанные);
			РегламентированнаяОтчетностьКлиент.СоздатьДокументОтраженияНалОтчетностиВУчете(ТекущиеДанные.Ссылка, ЭтотОбъект, ДополнительныеПараметрыОтражения);	
		Иначе
			РегламентированнаяОтчетностьКлиент.СоздатьДокументОтраженияНалОтчетностиВУчете(ТекущиеДанные.Ссылка, ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКалендарь(Команда)
	
	СтандартнаяОбработка = Истина;
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ОткрытьКалендарь(ЭтаФорма, Организация, СтандартнаяОбработка);
		
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаНачалаПериодаОтчета", ДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("ДатаКонцаПериодаОтчета", ДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("Периодичность", Периодичность = "Произвольный");
	ПараметрыФормы.Вставить("Организация", Организация);
			
	ОткрытьФорму("Обработка.КалендарьБухгалтера.Форма.ФормаКалендаря", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИнформациюДляПользователей(Команда)
	
	ПоказатьИнформациюДляПользователейНаКлиенте(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ОткрытьНастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ОбновитьДеревоОтчетовНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоОтчетовНаКлиенте(ОбновлятьИзИБ = Истина)
	Перем ТекущийОтчет;
	
	Если ОбновлятьИзИБ Тогда 
		
		Если Элементы.ДеревоОтчетов.ТекущиеДанные <> Неопределено Тогда
			ТекущийОтчет = Элементы.ДеревоОтчетов.ТекущиеДанные.Ссылка;
		КонецЕсли;
		
		СписокРаскрытых = СписокРаскрытыхВДеревеОтчетов();
		ОбновитьДеревоОтчетовНаСервере(ОбновлятьИзИБ);
		УстановитьРаскрытияВСпискеОтчетов(ДеревоОтчетов, СписокРаскрытых);
		
		Если НЕ Элементы.ДеревоОтчетов.ТекущаяСтрока = Неопределено Тогда
			Элементы.ДеревоОтчетов.ТекущаяСтрока = 0;
		КонецЕсли;
						
		Если ТекущийОтчет <> Неопределено Тогда
			УстановитьТекущуюСсылку(ТекущийОтчет);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьОтборы();
	Элементы.ДеревоОтчетовРазвернутьВсе.Доступность = мИерархическийПросмотр;
	Элементы.ДеревоОтчетовСвернутьВсе.Доступность   = мИерархическийПросмотр;
	
	Элементы.ДеревоОтчетовКонтекстноеМенюРазвернутьВсе.Доступность = мИерархическийПросмотр;
	Элементы.ДеревоОтчетовКонтекстноеМенюСвернутьВсе.Доступность   = мИерархическийПросмотр;
	
	ОбновитьПодсказкиЭлементовУправленияПериодом(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоОтчетовНаСервере(ОбновлятьИзИБ)
	
	СписокОтчетов = СписокВыбранныхСсылокВДеревеОтчетов();
	ЗаполнитьИзСправочникаРегламентированныеОтчеты(ОбновлятьИзИБ);
	Если ОбновлятьИзИБ Тогда
		ИзменитьПометкуПодчиненных(мПолноеДеревоОтчетов, Истина, СписокОтчетов, Истина);
	КонецЕсли;
	ИзменитьПометкуПодчиненных(ДеревоОтчетов, Истина, СписокОтчетов, Истина);
			
КонецПроцедуры

&НаСервере
Процедура ВосстановитьПараметрыОтбора()
	
	Если ТипЗнч(ПараметрыОткрытия) <> Тип("Структура") Тогда
		
		Организация   = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_Организация");
		ОтборПериод   = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ОтборПериод");
		Периодичность = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ПолеВыбораПериодичность");
		
		Если Периодичность = Неопределено Тогда
			Периодичность = "По итогам";
		КонецЕсли;
		
		ДатаНачалаПериодаОтчета = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ДатаНачалаПериодаОтчета");
		ДатаКонцаПериодаОтчета  = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ДатаКонцаПериодаОтчета");
		
		Если ЗначениеЗаполнено(ДатаНачалаПериодаОтчета) И ЗначениеЗаполнено(ДатаКонцаПериодаОтчета) И ДатаНачалаПериодаОтчета > ДатаКонцаПериодаОтчета Тогда
			ДатаКонцаПериодаОтчета = ДатаНачалаПериодаОтчета;
		КонецЕсли;
		
		ТекСтраница = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ТекущаяСтраницаОсновнойПанели");
		Если ТекСтраница <> Неопределено И Элементы.Журналы.ПодчиненныеЭлементы.Найти(ТекСтраница) <> Неопределено Тогда
			Элементы.Журналы.ТекущаяСтраница = Элементы[ТекСтраница];
		КонецЕсли;
		
		мСписокВыбранныхВидовОтчетов = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_СписокВидовОтчетов");
		
	КонецЕсли;
	
	сохрВыбранныеОтчеты = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ВыбранныеОтчеты");
	Если сохрВыбранныеОтчеты <> Неопределено Тогда
		ВыбранныеОтчеты.ЗагрузитьЗначения(сохрВыбранныеОтчеты);
	КонецЕсли;
		
	мИерархическийПросмотр = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_мИерархическийПросмотр");
	Если мИерархическийПросмотр = Неопределено Тогда
		мИерархическийПросмотр = Истина;
	КонецЕсли;
	
	Элементы.ДеревоОтчетовУстановитьИлиОтменитьИерархическийРежимПросмотра.Пометка = мИерархическийПросмотр;
	Элементы.ДеревоОтчетовКонтекстноеМенюУстановитьИлиОтменитьИерархическийРежимПросмотра.Пометка = мИерархическийПросмотр;
	
	ТекСтраница = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ТекущаяСтраницаОсновнойПанели");
	Если ТекСтраница <> Неопределено И Элементы.Журналы.ПодчиненныеЭлементы.Найти(ТекСтраница) <> Неопределено Тогда
		Элементы.Журналы.ТекущаяСтраница = Элементы[ТекСтраница];
	КонецЕсли;
	
	ГрупповойРежим = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ГрупповойРежим");
			
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_СписокВидовОтчетов", СписокВыбранныхСсылокВДеревеОтчетов());
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ТекущаяСтраницаОсновнойПанели", Элементы.Журналы.ТекущаяСтраница.Имя);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_Организация", Организация);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ОтборПериод", ОтборПериод);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ПолеВыбораПериодичность", Периодичность);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ДатаНачалаПериодаОтчета", ДатаНачалаПериодаОтчета);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ДатаКонцаПериодаОтчета", ДатаКонцаПериодаОтчета);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_мИерархическийПросмотр", мИерархическийПросмотр);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ВыбранныеОтчеты", ВыбранныеОтчеты.ВыгрузитьЗначения());

КонецПроцедуры

&НаСервере
Функция СписокВыбранныхСсылокВДеревеОтчетов(УзелДерева = Неопределено, СписокВидов = Неопределено)
	
	Если УзелДерева = Неопределено Тогда
		ПервыйЗаход = Истина;
		УзелДерева = мПолноеДеревоОтчетов;
		СписокВидов = Новый СписокЗначений;
	Иначе
		ПервыйЗаход = Ложь;
	КонецЕсли;
	
	Если НЕ ПервыйЗаход И СписокВидов.НайтиПоЗначению(УзелДерева.Ссылка) = Неопределено И УзелДерева.Пометка = 1 Тогда
		СписокВидов.Добавить(УзелДерева.Ссылка);
	КонецЕсли;
		
	Для Каждого Стр Из УзелДерева.ПолучитьЭлементы() Цикл
		СписокВыбранныхСсылокВДеревеОтчетов(Стр, СписокВидов);
	КонецЦикла;
		
	Если ПервыйЗаход Тогда
		Возврат СписокВидов;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИзСправочникаРегламентированныеОтчеты(ОбновлятьИзИБ = Истина)
	
	Если ОбновлятьИзИБ Тогда
		
		Если мИерархическийПросмотр Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
								  |	0 КАК Пометка,
								  |	ВЫБОР
								  |		КОГДА РегламентированныеОтчеты.ЭтоГруппа
								  |				И НЕ РегламентированныеОтчеты.ПометкаУдаления
								  |			ТОГДА 0
								  |		ИНАЧЕ ВЫБОР
								  |				КОГДА РегламентированныеОтчеты.ЭтоГруппа
								  |						И РегламентированныеОтчеты.ПометкаУдаления
								  |					ТОГДА 2
								  |				ИНАЧЕ ВЫБОР
								  |						КОГДА НЕ РегламентированныеОтчеты.ЭтоГруппа
								  |								И НЕ РегламентированныеОтчеты.ПометкаУдаления
								  |							ТОГДА 1
								  |						ИНАЧЕ ВЫБОР
								  |								КОГДА НЕ РегламентированныеОтчеты.ЭтоГруппа
								  |										И РегламентированныеОтчеты.ПометкаУдаления
								  |									ТОГДА 3
								  |							КОНЕЦ
								  |					КОНЕЦ
								  |			КОНЕЦ
								  |	КОНЕЦ КАК ИндексКартинки,
								  |	РегламентированныеОтчеты.Ссылка КАК Ссылка,
								  |	ВЫБОР
								  |		КОГДА РегламентированныеОтчеты.ВнешнийОтчетИспользовать
								  |			ТОГДА РегламентированныеОтчеты.Наименование + &Внешний
								  |		ИНАЧЕ РегламентированныеОтчеты.Наименование
								  |	КОНЕЦ КАК Наименование,
								  |	РегламентированныеОтчеты.ПометкаУдаления,
								  |	РегламентированныеОтчеты.ЭтоГруппа,
								  |	РегламентированныеОтчеты.ИсточникОтчета,
								  |	РегламентированныеОтчеты.Описание,
								  |	РегламентированныеОтчеты.ВнешнийОтчетИспользовать КАК ЭтоВнешнийОтчет,
								  |	РегламентированныеОтчеты.ПрефиксОтчета
								  |ИЗ
								  |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
								  |ГДЕ
								  |	(РегламентированныеОтчеты.НеПоказыватьВСписке = ЛОЖЬ
								  |			ИЛИ РегламентированныеОтчеты.ЭтоГруппа = ИСТИНА)
								  |
								  |УПОРЯДОЧИТЬ ПО
								  |	РегламентированныеОтчеты.Код ИЕРАРХИЯ");
			Запрос.УстановитьПараметр("Внешний", НСтр("ru = ' (внешний)'"));
			ЗначениеВДанныеФормы(Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией), мПолноеДеревоОтчетов);
		Иначе
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
								  |	0 КАК Пометка,
								  | ВЫБОР КОГДА РегламентированныеОтчеты.ЭтоГруппа И НЕ РегламентированныеОтчеты.ПометкаУдаления ТОГДА 0
                                  | ИНАЧЕ ВЫБОР КОГДА РегламентированныеОтчеты.ЭтоГруппа И РегламентированныеОтчеты.ПометкаУдаления ТОГДА 2
                                  | ИНАЧЕ ВЫБОР КОГДА НЕ РегламентированныеОтчеты.ЭтоГруппа И НЕ РегламентированныеОтчеты.ПометкаУдаления ТОГДА 1
								  | ИНАЧЕ ВЫБОР КОГДА НЕ РегламентированныеОтчеты.ЭтоГруппа И РегламентированныеОтчеты.ПометкаУдаления ТОГДА 3
								  | КОНЕЦ КОНЕЦ КОНЕЦ КОНЕЦ КАК ИндексКартинки,
			                      |	РегламентированныеОтчеты.Ссылка КАК Ссылка,
								  | ВЫБОР КОГДА РегламентированныеОтчеты.ВнешнийОтчетИспользовать ТОГДА РегламентированныеОтчеты.Наименование + &Внешний
								  | ИНАЧЕ РегламентированныеОтчеты.Наименование КОНЕЦ КАК Наименование,
			                      |	РегламентированныеОтчеты.ПометкаУдаления,
			                      |	РегламентированныеОтчеты.ЭтоГруппа,
			                      |	РегламентированныеОтчеты.ИсточникОтчета,
			                      |	РегламентированныеОтчеты.Описание,
								  |	РегламентированныеОтчеты.ВнешнийОтчетИспользовать КАК ЭтоВнешнийОтчет,
								  |	РегламентированныеОтчеты.ПрефиксОтчета
			                      |ИЗ
			                      |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
			                      |ГДЕ
			                      |	РегламентированныеОтчеты.НеПоказыватьВСписке = ЛОЖЬ И РегламентированныеОтчеты.ЭтоГруппа = ЛОЖЬ
			                      |
			                      |УПОРЯДОЧИТЬ ПО
			                      |	РегламентированныеОтчеты.Наименование ");
			Запрос.УстановитьПараметр("Внешний", НСтр("ru = ' (внешний)'"));
			РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
			мПолноеДеревоОтчетов.ПолучитьЭлементы().Очистить();
			Для Каждого Стр Из РезультатЗапроса Цикл
				НовСтр = мПолноеДеревоОтчетов.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, Стр);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
			
	СформироватьОтфильтрованноеДеревоОтчетов();
	УдалитьПустыеГруппыВОтфильтрованномДереве();
	Если мИерархическийПросмотр Тогда
		Элементы.ДеревоОтчетов.Отображение = ОтображениеТаблицы.Дерево;
	Иначе
		Элементы.ДеревоОтчетов.Отображение = ОтображениеТаблицы.Список;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция СформироватьТаблицуПериодов(СтруктураПериодов)
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("МесяцНач");
	ТаблицаПериодов.Колонки.Добавить("МесяцКон");
	Если ТипЗнч(СтруктураПериодов) = Тип("Структура") ИЛИ ТипЗнч(СтруктураПериодов) = Тип("Соответствие") Тогда
		Для Каждого Эл Из СтруктураПериодов Цикл
			Ключ = Эл.Ключ;
			Значение = Эл.Значение;
			Если Ключ = "Месяц" Тогда
				Для Каждого Пер Из Значение Цикл
					НовСтр = ТаблицаПериодов.Добавить();
					НовСтр.МесяцНач = Пер;
					НовСтр.МесяцКон = Пер;
				КонецЦикла;
			ИначеЕсли Ключ = "МесяцНарастающимИтогом" Тогда
				Для Каждого Пер Из Значение Цикл
					НовСтр = ТаблицаПериодов.Добавить();
					НовСтр.МесяцНач = 1;
					НовСтр.МесяцКон = Пер;
				КонецЦикла;
			ИначеЕсли Ключ = "Квартал" Тогда
				Для Каждого Пер Из Значение Цикл
					НовСтр = ТаблицаПериодов.Добавить();
					НовСтр.МесяцНач = 3*(Пер - 1) + 1;
					НовСтр.МесяцКон = 3*(Пер - 1) + 3;
				КонецЦикла;
			ИначеЕсли Ключ = "КварталНарастающимИтогом" Тогда
				Для Каждого Пер Из Значение Цикл
					НовСтр = ТаблицаПериодов.Добавить();
					НовСтр.МесяцНач = 1;
					НовСтр.МесяцКон = 3*(Пер - 1) + 3;
				КонецЦикла;
			ИначеЕсли Ключ = "Полугодие" Тогда
				Для Каждого Пер Из Значение Цикл
					НовСтр = ТаблицаПериодов.Добавить();
					НовСтр.МесяцНач = 1;
					НовСтр.МесяцКон = 6*(Пер - 1) + 6;
				КонецЦикла;
			ИначеЕсли Ключ = "Год" Тогда
				Для Каждого Пер Из Значение Цикл
					НовСтр = ТаблицаПериодов.Добавить();
					НовСтр.МесяцНач = 1;
					НовСтр.МесяцКон = 12;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат ТаблицаПериодов;
	
КонецФункции

&НаСервере
Процедура СформироватьОтфильтрованноеДеревоОтчетов(Узел = Неопределено)
	
	УзелБылУдален = Ложь;
	Если Узел = Неопределено Тогда
		КопироватьДанныеФормы(мПолноеДеревоОтчетов, ДеревоОтчетов);
		Узел = ДеревоОтчетов;
	КонецЕсли;
	
	Если НЕ УзелБылУдален Тогда
		Кол = Узел.ПолучитьЭлементы().Количество();
		Для Сч = 1 По Кол Цикл
			ТекИнд = Кол - Сч;
			Стр = Узел.ПолучитьЭлементы().Получить(ТекИнд);
			СформироватьОтфильтрованноеДеревоОтчетов(Стр);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАктуальнуюТаблицуПериодов(Периоды)
	
	Если ТипЗнч(Периоды) = Тип("ХранилищеЗначения") Тогда
		СтруктураПериодов = Периоды.Получить();
	Иначе
		СтруктураПериодов = Периоды;
	КонецЕсли;
		
	Если ТипЗнч(СтруктураПериодов) = Тип("Соответствие") Тогда
		ТаблицаПериодов = Неопределено;
		НачалоДействияТаблицыПериодов = '00010101000000';
		Для Каждого Элемент Из СтруктураПериодов Цикл
			Если Элемент.Ключ > ДатаКонцаПериодаОтчета ИЛИ Элемент.Ключ < НачалоДействияТаблицыПериодов Тогда
				Продолжить;
			Иначе
				ТаблицаПериодов = Элемент.Значение;
				НачалоДействияТаблицыПериодов = Элемент.Ключ;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТаблицаПериодов = СтруктураПериодов;
	КонецЕсли;
	Возврат ТаблицаПериодов;
	
КонецФункции

&НаСервере
Процедура УдалитьПустыеГруппыВОтфильтрованномДереве(Узел = Неопределено)
	
	Если Узел = Неопределено Тогда
		Узел = ДеревоОтчетов.ПолучитьЭлементы();
	КонецЕсли;
	
	КолСтрок = Узел.Количество();
	Для Сч = 1 По КолСтрок Цикл
		ТекИнд = КолСтрок - Сч;
		Стр = Узел.Получить(ТекИнд);
		УдалитьПустыеГруппыВОтфильтрованномДереве(Стр.ПолучитьЭлементы());
		Если Стр.ЭтоГруппа = Истина И Стр.ПолучитьЭлементы().Количество() = 0 Тогда
			Узел.Удалить(Стр);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСписокВыбранныхВидовОтчетов()
	
	ИзменитьПометкуПодчиненных(ДеревоОтчетов, Истина, мСписокВыбранныхВидовОтчетов, Истина);
	ИзменитьПометкуПодчиненных(мПолноеДеревоОтчетов, Истина, мСписокВыбранныхВидовОтчетов, Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ИзменитьПометкуПодчиненных(Узел, Пометка = Неопределено, СписокВыбранных = Неопределено, ОбновлятьПометкуРодительских = Ложь, Дерево = Неопределено)
	
	Если Пометка = Неопределено Тогда
		Пометка = Узел.Пометка;
	КонецЕсли;
	
	Если Дерево = Неопределено Тогда
		Дерево = Узел;
	КонецЕсли;
	
	Если СписокВыбранных = Неопределено ИЛИ СписокВыбранных.Количество() = 0 Тогда
		Для Каждого Стр1 Из Узел.ПолучитьЭлементы() Цикл
			Для Каждого Стр2 Из Стр1.ПолучитьЭлементы() Цикл
				Стр2.Пометка = Пометка;
			КонецЦикла;
			Стр1.Пометка = Пометка;
		КонецЦикла;
	Иначе
		Для Каждого Стр1 Из Дерево.ПолучитьЭлементы() Цикл
			Для Каждого Стр2 Из Стр1.ПолучитьЭлементы() Цикл
				Стр2.Пометка = Число(СписокВыбранных.НайтиПоЗначению(Стр2.Ссылка) <> Неопределено);
			КонецЦикла;
			Если Стр1.ЭтоГруппа <> Истина Тогда
				Стр1.Пометка = Число(СписокВыбранных.НайтиПоЗначению(Стр1.Ссылка) <> Неопределено);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Стр1 Из Дерево.ПолучитьЭлементы() Цикл
		Если Стр1.ЭтоГруппа <> Истина Тогда
			Продолжить;
		КонецЕсли;
		СуммаПометок = 0;
		Для Каждого Стр2 Из Стр1.ПолучитьЭлементы() Цикл
			 СуммаПометок = СуммаПометок + Число(Стр2.Пометка);
		КонецЦикла;
		Если СуммаПометок = Стр1.ПолучитьЭлементы().Количество() Тогда
			Стр1.Пометка = 1;
		ИначеЕсли СуммаПометок = 0 Тогда
			Стр1.Пометка = 0;
		Иначе
			Стр1.Пометка = 2;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОтчетаНаКлиенте(Отчет, ОрганизацияОтчета = Неопределено, ДатаНачалаПериодаОтчета = Неопределено, ДатаОкончанияПериодаОтчета = Неопределено, ПериодичностьОтчета = Неопределено)
	
	Если ТипЗнч(Отчет) = Тип("Структура") Тогда
		РезультатОткрытияФормыНаСервере = ОткрытьФормуОтчетаНаСервере(Отчет, ОрганизацияОтчета, ДатаНачалаПериодаОтчета, ДатаОкончанияПериодаОтчета, ПериодичностьОтчета);
	Иначе
		РезультатОткрытияФормыНаСервере = ОткрытьФормуОтчетаНаСервере(Отчет.ПолучитьИдентификатор(), ОрганизацияОтчета, ДатаНачалаПериодаОтчета, ДатаОкончанияПериодаОтчета, ПериодичностьОтчета);
	КонецЕсли;
		
	Если РезультатОткрытияФормыНаСервере = "Недостаточно прав" Тогда
		
		ПоказатьПредупреждение(,НСтр("ru='Недостаточно прав!'"));
				
	ИначеЕсли РезультатОткрытияФормыНаСервере = "Отчет не найден" Тогда
		
		ПоказатьПредупреждение(,НСтр("ru='Отчет не найден!'"));
		
	ИначеЕсли РезультатОткрытияФормыНаСервере = "Открыть внутренний отчет-документ" Тогда
		ОткрытьФорму("Документ." + Отчет.ИсточникОтчета + ".Форма.ОсновнаяФорма", , , Отчет.ИсточникОтчета);
		
	ИначеЕсли РезультатОткрытияФормыНаСервере = "Не удалось открыть отчет" Тогда
				
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Не удалось открыть отчет!'");

		Сообщение.Сообщить();
				
	ИначеЕсли ТипЗнч(РезультатОткрытияФормыНаСервере) = Тип("Структура") Тогда
		Попытка
			ВариантОткрытия = ?(РезультатОткрытияФормыНаСервере.ВнешнийОтчетИспользовать, "ВнешнийОтчет.", "Отчет.");
			ОткрытьФорму(ВариантОткрытия + Отчет.ИсточникОтчета + ".Форма.ОсновнаяФорма", РезультатОткрытияФормыНаСервере);
			
			РезультатОткрытияФормыНаСервере.Удалить("ВнешнийОтчетИспользовать");
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось открыть отчет!'");			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);	
		КонецПопытки
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОткрытьФормуОтчетаНаСервере(Знач Отчет, ОрганизацияОтчета = Неопределено, ДатаНачалаПериодаОтчета = Неопределено, ДатаОкончанияПериодаОтчета = Неопределено, ПериодичностьОтчета = Неопределено)
	
	Если НЕ ТипЗнч(Отчет) = Тип("Структура") Тогда
		Отчет = ДеревоОтчетов.НайтиПоИдентификатору(Отчет);
	КонецЕсли;
		
	Если ТипЗнч(Отчет) <> Тип("Строка") Тогда
		ИсточникОтчета = Отчет.ИсточникОтчета;
	КонецЕсли;
	
	ПравоДоступаКОтчету = РегламентированнаяОтчетностьВызовСервера.ПравоДоступаКРегламентированномуОтчету(ИсточникОтчета);
	
	Если ПравоДоступаКОтчету = Ложь Тогда
		Возврат "Недостаточно прав";
	ИначеЕсли ПравоДоступаКОтчету = Неопределено Тогда
		Возврат "Отчет не найден";
	КонецЕсли;
	
	Если Метаданные.Документы.Найти(ИсточникОтчета) <> Неопределено Тогда // это внутренний отчет-документ
		Возврат "Открыть внутренний отчет-документ";
	КонецЕсли;
	
	ТекОтчет = РегламентированнаяОтчетность.РеглОтчеты(ИсточникОтчета);
	Если ТекОтчет = Неопределено Тогда
		Возврат "Не удалось открыть отчет";
	КонецЕсли;
	
	ТекФорма = РегламентированнаяОтчетность.ФормаРеглОтчета(ИсточникОтчета);
	Если ТекФорма = Неопределено Тогда
		Возврат "Не удалось открыть отчет";
	КонецЕсли;
	
	ПараметрыТекФормы = Новый Структура;
	ПараметрыТекФормы.Вставить("Налогоплательщик");
	ПараметрыТекФормы.Вставить("мДатаНачалаПериодаОтчета");
	ПараметрыТекФормы.Вставить("мДатаКонцаПериодаОтчета");
	ПараметрыТекФормы.Вставить("мПериодичность");
	
	Если ОрганизацияОтчета = Неопределено Тогда
		Если Организация.Количество() = 1 Тогда
			Попытка
				ПараметрыТекФормы.Налогоплательщик = Организация.Получить(0).Значение;
			Исключение
			КонецПопытки;
		КонецЕсли;
	Иначе
		Попытка
			ПараметрыТекФормы.Налогоплательщик = ОрганизацияОтчета;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если ДатаНачалаПериодаОтчета <> Неопределено ИЛИ ДатаОкончанияПериодаОтчета <> Неопределено Тогда
		
		Попытка
			ПараметрыТекФормы.мДатаНачалаПериодаОтчета = НачалоДня(ДатаНачалаПериодаОтчета);
			ПараметрыТекФормы.мДатаКонцаПериодаОтчета = КонецДня(ДатаОкончанияПериодаОтчета);
		Исключение
		КонецПопытки;
		Если ПериодичностьОтчета <> Неопределено Тогда
			Попытка
				ПараметрыТекФормы.мПериодичность = ПериодичностьОтчета;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыТекФормы.Вставить("ВнешнийОтчетИспользовать", Отчет.Ссылка.ВнешнийОтчетИспользовать);
	
	Возврат ПараметрыТекФормы;
	
КонецФункции

&НаСервере
Процедура УстановитьОтборы() Экспорт
	
	СписокВидовОтчетов = СписокВыбранныхВидовОтчетов();
	
	Если Элементы.Журналы.ТекущаяСтраница = Элементы.ГруппаЖурналОтчетов Тогда
		
		ОтборДинамическогоСписка = ЖурналОтчетов.КомпоновщикНастроек.Настройки.Отбор;
				
		ОтборДинамическогоСписка.Элементы.Очистить();
		
		ОтборИсточникОтчета = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборОрганизация    = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборДатаНачала     = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборДатаОкончания  = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборДатаОкончания2 = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ОтборИсточникОтчета.Использование = Истина;
		ОтборИсточникОтчета.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ОтборИсточникОтчета.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИсточникОтчета");
		ОтборИсточникОтчета.ПравоеЗначение = СписокВидовОтчетов;
		
		ОтборОрганизация.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация");
		
		ОтборДатаНачала.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаНачала");
		
		ОтборДатаОкончания.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаОкончания");
		
		ОтборДатаОкончания2.Использование = Ложь;
		ОтборДатаОкончания2.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаОкончания");
		
		Если Организация.Количество() = 0 Тогда
			ОтборОрганизация.Использование = Ложь;
		Иначе
			ОтборОрганизация.Использование = Истина;
			ОтборОрганизация.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			ОтборОрганизация.ПравоеЗначение = Организация;
		КонецЕсли;
		
		Если НЕ ОтборПериод Тогда
			ОтборДатаНачала.Использование = Ложь;
			ОтборДатаОкончания.Использование = Ложь;
		Иначе                            
			Если Периодичность = "Произвольный" Тогда
				ОтборДатаНачала.Использование = Истина;
				ОтборДатаОкончания.Использование = Истина;
				ОтборДатаНачала.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
				ОтборДатаНачала.ПравоеЗначение = ДатаНачалаПериодаОтчета;
				ОтборДатаОкончания.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
				ОтборДатаОкончания.ПравоеЗначение = ДатаКонцаПериодаОтчета;
			Иначе
				ОтборДатаНачала.Использование = Ложь;
				
	            ОтборДатаОкончания.Использование = Истина;
				ОтборДатаОкончания.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
				ОтборДатаОкончания.ПравоеЗначение = НачалоДня(ДатаКонцаПериодаОтчета);
				
				ОтборДатаОкончания2.Использование = Истина;
				ОтборДатаОкончания2.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
				ОтборДатаОкончания2.ПравоеЗначение = КонецДня(ДатаКонцаПериодаОтчета);
			КонецЕсли;
		КонецЕсли;
		
		ОтборДинамическогоСписка.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СписокРаскрытыхВДеревеОтчетов(УзелДерева = Неопределено, СписокУзлов = Неопределено)
	
	Если УзелДерева = Неопределено Тогда
		ПервыйЗаход = Истина;
		УзелДерева  = ДеревоОтчетов;
		СписокУзлов = Новый СписокЗначений;
	Иначе
		ПервыйЗаход = Ложь;
	КонецЕсли;
	
	Если НЕ ПервыйЗаход И СписокУзлов.НайтиПоЗначению(УзелДерева.Ссылка) = Неопределено И УзелДерева.ПолучитьЭлементы().Количество() <> 0 Тогда
		
		СписокУзлов.Добавить(УзелДерева.Ссылка, Элементы.ДеревоОтчетов.Развернут(УзелДерева.ПолучитьИдентификатор()));
		
	КонецЕсли;
	
	Для Каждого Стр Из УзелДерева.ПолучитьЭлементы() Цикл
		СписокРаскрытыхВДеревеОтчетов(Стр, СписокУзлов);
	КонецЦикла;
	
	Если ПервыйЗаход Тогда
		Возврат СписокУзлов;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УстановитьТекущуюСсылку(Ссылка, Узел = Неопределено)
	
	Если Узел = Неопределено Тогда
		ПервыйПроход = Истина;
		Узел = ДеревоОтчетов;
	Иначе
		ПервыйПроход = Ложь;
	КонецЕсли;
	
	Если НЕ ПервыйПроход И Узел.Ссылка = Ссылка Тогда
		Элементы.ДеревоОтчетов.ТекущаяСтрока = Узел.ПолучитьИдентификатор();
		Возврат;
	КонецЕсли;
	
	Для Каждого Стр Из Узел.ПолучитьЭлементы() Цикл
		УстановитьТекущуюСсылку(Ссылка, Стр);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРаскрытияВСпискеОтчетов(Узел, СписокРаскрытых)
	
	Если Узел <> ДеревоОтчетов И Узел.ПолучитьЭлементы().Количество() <> 0 Тогда
		РезультатПоиска = СписокРаскрытых.НайтиПоЗначению(Узел.Ссылка);
		Если РезультатПоиска = Неопределено Тогда
			Элементы.ДеревоОтчетов.Развернуть(Узел.ПолучитьИдентификатор());
		Иначе
			Если РезультатПоиска.Представление Тогда
				Элементы.ДеревоОтчетов.Развернуть(Узел.ПолучитьИдентификатор());
			Иначе
				Элементы.ДеревоОтчетов.Свернуть(Узел.ПолучитьИдентификатор());
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Стр Из Узел.ПолучитьЭлементы() Цикл
		УстановитьРаскрытияВСпискеОтчетов(Стр, СписокРаскрытых)
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПодсказкиЭлементовУправленияПериодом(Форма)
	
	Элементы = Форма.Элементы;
	
	Если НЕ Форма.ОтборПериод Тогда
		Подсказка = НСтр("ru = 'Отбор по периоду не установлен'");
	Иначе
		Если Форма.Периодичность = "По итогам" Тогда
			НайденноеЗначение = "";
			Если Форма.МассивНаименованийПравыхГраницПериода.Свойство("Месяц" + Месяц(Форма.ДатаКонцаПериодаОтчета), НайденноеЗначение) Тогда
				Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отчеты, представляемые по истечении %1 %2 года'"), НайденноеЗначение, Формат(Форма.Год, "ЧГ=0"));
			КонецЕсли;
		Иначе
			Если Форма.ДатаНачалаПериодаОтчета <= Форма.ДатаКонцаПериодаОтчета Тогда
				Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отчеты за период %1'"), ПредставлениеПериода(Форма.ДатаНачалаПериодаОтчета, КонецДня(Форма.ДатаКонцаПериодаОтчета), "ФП = Истина"));
			Иначе
				Подсказка = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ОтборПериод.Подсказка = Подсказка;
	Элементы.Периодичность.Подсказка = Подсказка;
	Элементы.Период.Подсказка = Подсказка;
	Элементы.Год.Подсказка = Подсказка;
	Элементы.ДатаКонцаПериодаОтчета.Подсказка = Подсказка;
	Элементы.ДатаНачалаПериодаОтчета.Подсказка = Подсказка;
		
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтрокуДереваПоСсылке(Узел, Ссылка)
	
	Если ТипЗнч(Узел) = Тип("ДанныеФормыЭлементДерева") И Узел.Ссылка = Ссылка Тогда
		Возврат Узел;
	КонецЕсли;
	
	Для Каждого Стр Из Узел.ПолучитьЭлементы() Цикл
		ИскомаяСтрока = ПолучитьСтрокуДереваПоСсылке(Стр, Ссылка);
		Если ИскомаяСтрока <> Неопределено Тогда
			Возврат ИскомаяСтрока;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ДеревоОтчетовВыборЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Истина Тогда // создаем новый отчет
		ОткрытьФормуОтчетаНаКлиенте(Элементы.ДеревоОтчетов.ТекущиеДанные);
	ИначеЕсли ЗначениеЗаполнено(РезультатВыбора) Тогда
		ПоказатьЗначение(,РезультатВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДокументыСУчетомКритериевОтбора(ИсточникОтчета)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсточникОтчета", ИсточникОтчета);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаНачалаКон", КонецДня(ДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаНачала2", НачалоГода(ДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаНачала2Кон", КонецДня(НачалоГода(ДатаНачалаПериодаОтчета)));
	ДатаОконч = ?(НЕ ЗначениеЗаполнено(ДатаКонцаПериодаОтчета), '20291231', ДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаОкончания", НачалоДня(ДатаОконч));
	Запрос.УстановитьПараметр("ДатаОкончанияКон", КонецДня(ДатаОконч));
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	РегламентированныйОтчет.Ссылка
				   |ИЗ
				   |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
				   |ГДЕ
				   |	РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета";
	Если Организация.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + "
				   |	И РегламентированныйОтчет.Организация В (&Организация)";
	КонецЕсли;				   
	Если ОтборПериод Тогда
		Если Периодичность = "Произвольный" Тогда
			Запрос.Текст = Запрос.Текст + "
					   |	И РегламентированныйОтчет.ДатаОкончания >= &ДатаНачала
					   |	И РегламентированныйОтчет.ДатаОкончания <= &ДатаОкончанияКон";
		Иначе
			Запрос.Текст = Запрос.Текст + "
					   |	И (РегламентированныйОтчет.ДатаОкончания МЕЖДУ &ДатаОкончания И &ДатаОкончанияКон)";
		КонецЕсли;
	КонецЕсли;
			   
	ТаблРез = Запрос.Выполнить().Выгрузить();
	КолТаблРез = ТаблРез.Количество();
	Если КолТаблРез = 0 Тогда
		Возврат 0;
	Иначе
		Возврат КолТаблРез;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЭлементамиОтбораПоПериоду(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.Периодичность.Доступность = Форма.ОтборПериод;
	Элементы.Год.Доступность = Форма.ОтборПериод;
	Элементы.Период.Доступность = Форма.ОтборПериод;
	Элементы.ДатаНачалаПериодаОтчета.Доступность = Форма.ОтборПериод;
	Элементы.ДатаКонцаПериодаОтчета.Доступность = Форма.ОтборПериод;
	Элементы.ВыбратьПроизвольныйПериод.Доступность = Форма.ОтборПериод;
	          	
	Если Форма.ОтборПериод И Форма.Периодичность = "Произвольный" Тогда
		Элементы.Год.Доступность = Ложь;
		Элементы.Период.Доступность = Ложь;
		Элементы.ДатаНачалаПериодаОтчета.Доступность = Истина;
		Элементы.ДатаКонцаПериодаОтчета.Доступность = Истина;
		Элементы.ВыбратьПроизвольныйПериод.Доступность = Истина;
	ИначеЕсли Форма.ОтборПериод Тогда
		Элементы.Год.Доступность = Истина;
		Элементы.Период.Доступность = Истина;
		Элементы.ДатаНачалаПериодаОтчета.Доступность = Ложь;
		Элементы.ДатаКонцаПериодаОтчета.Доступность = Ложь;
		Элементы.ВыбратьПроизвольныйПериод.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеНадписямиМесяцев(Форма)
	
	Месяц = Месяц(Форма.ДатаКонцаПериодаОтчета);
	СписокМесяцев = Форма.Элементы.Период.СписокВыбора;
	Если СписокМесяцев.Количество() >= Месяц Тогда
		Форма.Период = Форма.Элементы.Период.СписокВыбора[Месяц - 1].Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДатыНачалаИКонцаПериодаОтчета()
	
	СписокМесяцев = Элементы.Период.СписокВыбора;
	Месяц = СписокМесяцев.Индекс(СписокМесяцев.НайтиПоЗначению(Период)) + 1;
	
	ДатаКонцаПериодаОтчета = КонецМесяца(Дата(Год, Месяц, 1));
	ДатаНачалаПериодаОтчета = НачалоГода(ДатаКонцаПериодаОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПроизвольныйПериодЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	
	Если Период <> Неопределено Тогда
		
		ДатаНачалаПериодаОтчета = Диалог.Период.ДатаНачала;
		ДатаКонцаПериодаОтчета  = Диалог.Период.ДатаОкончания;
		
		УстановитьОтборы(); 
		
		ПоказатьПериод(ЭтаФорма);
		УправлениеНадписямиМесяцев(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьПериод(Форма)

	Форма.Год = Год(Форма.ДатаКонцаПериодаОтчета);
	
КонецПроцедуры

&НаСервере
Функция СписокВыбранныхВидовОтчетов(УзелДерева = Неопределено, СписокВидов = Неопределено) Экспорт
	
	Если УзелДерева = Неопределено Тогда
		ПервыйЗаход = Истина;
		УзелДерева = ДеревоОтчетов;
		СписокВидов = Новый СписокЗначений;
	Иначе
		ПервыйЗаход = Ложь;
	КонецЕсли;
	
	Если НЕ ПервыйЗаход И СписокВидов.НайтиПоЗначению(УзелДерева.ИсточникОтчета) = Неопределено И УзелДерева.Пометка = 1 И НЕ УзелДерева.ЭтоГруппа Тогда
		СписокВидов.Добавить(УзелДерева.ИсточникОтчета);
	КонецЕсли;
	
	Для Каждого Стр Из УзелДерева.ПолучитьЭлементы() Цикл
		СписокВыбранныхВидовОтчетов(Стр, СписокВидов);
	КонецЦикла;
	
	Если ПервыйЗаход Тогда
		Возврат СписокВидов;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ОписаниеРегОтчета(ДокументРегОтчет)
	
	ОписаниеРегОтч = Новый Структура;
	
	ОбъектРегОтч = ДокументРегОтчет.ПолучитьОбъект();
	
	ОписаниеРегОтч.Вставить("Организация",             ОбъектРегОтч.Организация);
	ОписаниеРегОтч.Вставить("ДатаНачалаПериодаОтчета", ОбъектРегОтч.ДатаНачала);
	ОписаниеРегОтч.Вставить("ДатаКонцаПериодаОтчета",  ОбъектРегОтч.ДатаОкончания);
	ОписаниеРегОтч.Вставить("КорректирующаяФорма",     ОбъектРегОтч.Вид > 0);
	
	Возврат ОписаниеРегОтч;
	
КонецФункции

&НаКлиенте
Процедура ПечататьСразуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОтчетыДляПакетнойОбработки = ДополнительныеПараметры.ОтчетыДляПакетнойОбработки;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		РегламентированнаяОтчетностьКлиент.НапечататьОтчеты(ОтчетыДляПакетнойОбработки, "ПечататьСразу");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОтчетыДляПакетнойОбработки = ДополнительныеПараметры.ОтчетыДляПакетнойОбработки;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ВВебКлиентеСохранятьФайлВыгрузкиИнтерактивно = Истина;
		
		Если ДополнительныеПараметры.ПодключеноРасширениеРаботыСФайлами Тогда
			ВВебКлиентеСохранятьФайлВыгрузкиИнтерактивно = Ложь;
		КонецЕсли;
		
		Если НЕ РегламентированнаяОтчетностьКлиент.ВыгрузитьОтчеты(
				ОтчетыДляПакетнойОбработки, , , ВВебКлиентеСохранятьФайлВыгрузкиИнтерактивно) Тогда
			ПоказатьПредупреждение(,НСтр("ru='Выгрузка прервана!'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеОтчетаВЖурналеОтчетов()
	
	ФормаВыбораОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВыбораВидаОтчета", , ЭтаФорма);
	
	Если НЕ мИерархическийПросмотр Тогда
		ФормаВыбораОтчета.Элементы.СправочникСписок.Отображение = ОтображениеТаблицы.Список;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавлениеОтчетаВЖурналеОтчетовЗавершение", ЭтотОбъект);
	ФормаВыбораОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаВыбораОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВыбораОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеОтчетаВЖурналеОтчетовЗавершение(ВыбранныйВидОтчета, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранныйВидОтчета) Тогда
		ОткрытьФормуОтчетаНаКлиенте(ВыбранныйВидОтчета);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИнформациюДляПользователейНаКлиенте(Авто)
	
	Если Авто Тогда
		Если НЕ роНеПоказыватьИнформациюДляПользователей Тогда
			ПараметрыФормы = Новый Структура("АвтоматическийПоказ", Истина);
			ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.ИнформацияДляПользователей", ПараметрыФормы, ЭтотОбъект);
		КонецЕсли;
	Иначе
		ПараметрыФормы = Новый Структура("АвтоматическийПоказ", Ложь);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.ИнформацияДляПользователей", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКнопкиОтражениеВУчете()
	
	ТекущиеДанные   = Элементы.ЖурналОтчетов.ТекущиеДанные;
	КнопкаОтражения = Элементы.ОтражениеВУчете.ПодчиненныеЭлементы.ЖурналОтчетовОтразитьВУчете;
	ГруппаКоманднойПанели = Элементы.ЖурналОтчетовКоманднаяПанель.ПодчиненныеЭлементы.ОтражениеВУчете;
	КМКнопкаОтражения = Элементы.КМОтражениеВУчете.ПодчиненныеЭлементы.КМЖурналОтчетовОтразитьВУчете;
		
	Если ТекущиеДанные = Неопределено Тогда
		ГруппаКоманднойПанели.Видимость = Ложь; 
		КМКнопкаОтражения.Видимость     = Ложь;
	Иначе
		Если мСписокОтчетовСОтражениемВУчете.НайтиПоЗначению(ТекущиеДанные.ИсточникОтчета) <> Неопределено Тогда						
			ГруппаКоманднойПанели.Видимость = Истина;
			КМКнопкаОтражения.Видимость     = Истина;
			Если ЗначениеЗаполнено(ТекущиеДанные.ДокументОтраженияВУчете) Тогда
				КнопкаОтражения.Заголовок = НСтр("ru='Открыть документ отражения в регл. учете'");
				КМКнопкаОтражения.Заголовок = НСтр("ru='Открыть документ отражения в регл. учете'");
			Иначе
				КМКнопкаОтражения.Заголовок = НСтр("ru='Ввести документ отражения в регл. учете'");
				КнопкаОтражения.Заголовок = НСтр("ru='Ввести документ отражения в регл. учете'")
			КонецЕсли;
		Иначе
			ГруппаКоманднойПанели.Видимость = Ложь;
			КМКнопкаОтражения.Видимость     = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьДополнительныеПараметрыОтраженияДанных(ТекущийИсточникОтчета, НалогоплательщикЯвляетсяИП = Ложь)
	
	СтруктураПараметров = Новый Структура;  
	
	Если ТекущийИсточникОтчета = "РегламентированныйОтчет910Форма" Тогда
		
		// Для опционального отображения колонок для ИП и проведения по РН
		СтруктураПараметров.Вставить("ОтражениеДанныхИП", НалогоплательщикЯвляетсяИП);
		
		// Сформируем имена реквизитов и адреса ячеек данных для заполнения колонок документа
		// в данную структуру передаем только числовые значения, которые надо отразить
		// 		Ключ - имя колонки ТЧ документа ОтражениеНалоговойОтчетностиВРеглУчете с типом "Число"
		// 		Значение - номер колонки в макете, в колонке макета указываем имя ячейки с содержанием данных
		ПоказателиОтчета = Новый Структура;
		ПоказателиОтчета.Вставить("СуммаДохода", 12);
		
		СтруктураПараметров.Вставить("ПоказателиОтчета", ПоказателиОтчета);
		
		// В данную структуру передаем все прочие параметры нечислового типа
		// далее данные параметры будут использоваться в дополнительных колонках
		// 		Ключ - имя колонки ТЧ документа ОтражениеНалоговойОтчетностиВРеглУчете
		// 		Значение - номер колонки в макете, в колонке указываем путь к получению данных,
		//				получение будет осуществляться через данные отчета, например, Организация = Вычислить("РеглОтчет." + Значение), где Значение = "Организация"
		ПараметрыОтчета = Новый Структура; 
		ПараметрыОтчета.Вставить("ФизЛицо", 13);
		
		СтруктураПараметров.Вставить("ПараметрыОтчета", ПараметрыОтчета);
		
	ИначеЕсли ТекущийИсточникОтчета = "РегламентированныйОтчет701Форма" Тогда
		
		// Сформируем имена реквизитов и адреса ячеек данных для заполнения колонок документа
		// в данную структуру передаем только числовые значения, которые надо отразить
		// 		Ключ - имя колонки ТЧ документа ОтражениеНалоговойОтчетностиВРеглУчете с типом "Число"
		// 		Значение - номер колонки в макете, в колонке макета указываем имя ячейки с содержанием данных
		ПоказателиОтчета = Новый Структура;
		СтруктураПараметров.Вставить("ПоказателиОтчета", ПоказателиОтчета);
		
		// В данную структуру передаем все прочие параметры нечислового типа
		// далее данные параметры будут использоваться в дополнительных колонках
		// 		Ключ - имя колонки ТЧ документа ОтражениеНалоговойОтчетностиВРеглУчете
		// 		Значение - номер колонки в макете, в колонке указываем путь к получению данных,
		//				получение будет осуществляться через данные отчета, например, Организация = Вычислить("РеглОтчет." + Значение), где Значение = "Организация"
		ПараметрыОтчета = Новый Структура; 
		ПараметрыОтчета.Вставить("НалоговыйКомитет", 15);
		
		СтруктураПараметров.Вставить("ПараметрыОтчета", ПараметрыОтчета);
		
	КонецЕсли;
		
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция СформироватьДополнительныеПараметрыОтраженияДанныхНаСервере(ТекущиеДанные)
	
	СтруктураПараметров = Новый Структура;
	
	Если ТекущиеДанные.ИсточникОтчета = "РегламентированныйОтчет700Форма" Тогда 
		
		ПоказателиОтчета = Новый Структура();
		СтруктураПараметров.Вставить("ПоказателиОтчета", ПоказателиОтчета);
		
		ПараметрыОтчета = Новый Структура(); 
		ПараметрыОтчета.Вставить("НалоговыйКомитет", 15);
		СтруктураПараметров.Вставить("ПараметрыОтчета", ПараметрыОтчета);
		
		ТекДанныеОтчета = ТекущиеДанные.Ссылка.ДанныеОтчета.Получить();
		
		ТаблицаДобавленныхПриложенийДляОтражения = Новый Массив();
		
		ДобавленныеПриложения = ТекДанныеОтчета.СтруктураДополнительныхРеквизитовФормы.ТаблицаДобавленныхПриложений;

		Для Каждого Приложение Из ДобавленныеПриложения Цикл
			ДобавленноеПриложение = Новый Структура();
			ДобавленноеПриложение.Вставить("КодФормы", Приложение.КодФормы);
			ДобавленноеПриложение.Вставить("МестныйБюджет", Приложение.МестныйБюджет);
			ДобавленноеПриложение.Вставить("СтруктурнаяЕдиница", Приложение.СтруктурнаяЕдиница);
			ТаблицаДобавленныхПриложенийДляОтражения.Добавить(ДобавленноеПриложение);
		КонецЦикла;
		СтруктураПараметров.Вставить("ТаблицаДобавленныхПриложенийДляОтражения", ТаблицаДобавленныхПриложенийДляОтражения);
		
	ИначеЕсли ТекущиеДанные.ИсточникОтчета = "РегламентированныйОтчет70101Форма" Тогда
				
		// Сформируем имена реквизитов и адреса ячеек данных для заполнения колонок документа
		// в данную структуру передаем только числовые значения, которые надо отразить
		// 		Ключ - имя колонки ТЧ документа ОтражениеНалоговойОтчетностиВРеглУчете с типом "Число"
		// 		Значение - номер колонки в макете, в колонке макета указываем имя ячейки с содержанием данных
		ПоказателиОтчета = Новый Структура;
		СтруктураПараметров.Вставить("ПоказателиОтчета", ПоказателиОтчета);
		
		// В данную структуру передаем все прочие параметры нечислового типа
		// далее данные параметры будут использоваться в дополнительных колонках
		// 		Ключ - имя колонки ТЧ документа ОтражениеНалоговойОтчетностиВРеглУчете
		// 		Значение - номер колонки в макете, в колонке указываем путь к получению данных,
		//				получение будет осуществляться через данные отчета, например, Организация = Вычислить("РеглОтчет." + Значение), где Значение = "Организация"
		ПараметрыОтчета = Новый Структура; 
		ПараметрыОтчета.Вставить("НалоговыйКомитет", 15);
		
		СтруктураПараметров.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции
