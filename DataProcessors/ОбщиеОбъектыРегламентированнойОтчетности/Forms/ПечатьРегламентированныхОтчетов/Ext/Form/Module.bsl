
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ

&НаКлиенте
Перем ТекущаяСтрокаРазделовОтчета;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	СписокПечатаемыхЛистов = Параметры.СписокПечатаемыхЛистов;
	ВидПечати              = Параметры.ВидПечати;
	
	Если СписокПечатаемыхЛистов.Количество() = 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Не выбраны листы для вывода на печать!'");

		Сообщение.Сообщить();

		Отказ = Истина;
		
	КонецЕсли;
		
	Инициализация();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	Заголовок = ЗаголовокФормы + " - " + НСтр("ru = 'предварительный просмотр'");
	
	#Если ВебКлиент Тогда
		//Элементы.Сохранить.Видимость              = Ложь;
		Элементы.СохранитьНаДиск.Видимость        = Ложь;
		Элементы.ПараметрыПредПросмотра.Видимость = Ложь;
	#КонецЕсли
	 		
	ОтработатьИзмененияПараметровПечати();
	УстановитьОпцииТаблицы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ КоличествоКопий = СохрКоличествоКопий
	 ИЛИ НЕ	РазобратьПоКопиям = СохрРазобратьПоКопиям
	 ИЛИ НЕ ОтображатьСетку = СохрОтображатьСетку
	 ИЛИ НЕ ОтображатьЗаголовки = СохрОтображатьЗаголовки Тогда
	 
		СохранитьЗначениеНаСервере();
	 
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура КоличествоКопийПриИзменении(Элемент)
	
	ОтработатьИзмененияПараметровПечати();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьСеткуПриИзменении(Элемент)
	
	УстановитьОпцииТаблицы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьЗаголовкиПриИзменении(Элемент)
	
	УстановитьОпцииТаблицы();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ СписокЛистов

&НаКлиенте
Процедура СписокЛистовПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущаяСтрока = ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	Если Элемент.ТекущиеДанные.ПолучитьЭлементы().Количество() = 0 Тогда
		ВывестиВыбранныйЛистВТабличныйДокумент(Элемент.ТекущиеДанные.АдресВоВременномХранилище);
	Иначе
		ВывестиВыбранныйЛистВТабличныйДокумент(Неопределено);	
	КонецЕсли;
	    
КонецПроцедуры

&НаКлиенте
Процедура СписокЛистовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЛистовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЛистовПометкаПриИзменении(Элемент)
	
	Если Элементы.СписокЛистов.ТекущиеДанные.Пометка = 2 Тогда
		Элементы.СписокЛистов.ТекущиеДанные.Пометка = 0;
	КонецЕсли;
	
	Если Элементы.СписокЛистов.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		
		Для Каждого Стр Из Элементы.СписокЛистов.ТекущиеДанные.ПолучитьЭлементы() Цикл
			Стр.Пометка = Элементы.СписокЛистов.ТекущиеДанные.Пометка;
		КонецЦикла;
		
	Иначе
		
		ПометкиОдинаковы = Истина;
		Для Каждого Стр Из Элементы.СписокЛистов.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы() Цикл
			Если Стр.Пометка <> Элементы.СписокЛистов.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].Пометка Тогда
				ПометкиОдинаковы = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Элементы.СписокЛистов.ТекущиеДанные.ПолучитьРодителя().Пометка = ?(ПометкиОдинаковы, Элементы.СписокЛистов.ТекущиеДанные.Пометка, 2);
		
	КонецЕсли;
	
	СформироватьТекстПодсказки();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	УстановитьИлиСнятьФлажки(1);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	УстановитьИлиСнятьФлажки(0);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	Для Каждого Стр Из СписокЛистов.ПолучитьЭлементы() Цикл
		Элементы.СписокЛистов.Развернуть(Стр.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	Для Каждого Стр Из СписокЛистов.ПолучитьЭлементы() Цикл
		Элементы.СписокЛистов.ТекущаяСтрока = Стр.ПолучитьИдентификатор();
		Элементы.СписокЛистов.Свернуть(Стр.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	Родитель = ?(Элементы.СписокЛистов.ТекущиеДанные.ПолучитьРодителя() = Неопределено, СписокЛистов, Элементы.СписокЛистов.ТекущиеДанные.ПолучитьРодителя());
	Если Родитель.ПолучитьЭлементы().Индекс(Элементы.СписокЛистов.ТекущиеДанные) <> Родитель.ПолучитьЭлементы().Количество() - 1 Тогда
		Родитель.ПолучитьЭлементы().Сдвинуть(Родитель.ПолучитьЭлементы().Индекс(Элементы.СписокЛистов.ТекущиеДанные), 1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	Родитель = ?(Элементы.СписокЛистов.ТекущиеДанные.ПолучитьРодителя() = Неопределено, СписокЛистов, Элементы.СписокЛистов.ТекущиеДанные.ПолучитьРодителя());
	Если Родитель.ПолучитьЭлементы().Индекс(Элементы.СписокЛистов.ТекущиеДанные) <> 0 Тогда
		Родитель.ПолучитьЭлементы().Сдвинуть(Родитель.ПолучитьЭлементы().Индекс(Элементы.СписокЛистов.ТекущиеДанные), -1);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьРодительскийОтчет(Команда)
	
	Попытка
		ВладелецФормы.Активизировать();
	Исключение
		ПоказатьПредупреждение(,НСтр("ru='Не удалось активизировать родительский отчет! Вероятно, форма отчета закрыта.'"));
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Печатать(Команда)
	
	Если РазобратьПоКопиям Тогда
		Для Сч = 1 По КоличествоКопий Цикл
			Для Каждого Стр1 Из СписокЛистов.ПолучитьЭлементы() Цикл
				Для Каждого Эл из Стр1.ПолучитьЭлементы() Цикл
					Если НЕ Эл.Пометка Тогда
						Продолжить;
					КонецЕсли;
					
					ТаблДок = ПолучитьИзВременногоХранилища(Эл.АдресВоВременномХранилище);
					ТаблДок.КоличествоЭкземпляров = 1;
					ТаблДок.ЭкземпляровНаСтранице = 1;
					ТаблДок.Напечатать();

				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для Каждого Стр1 Из СписокЛистов.ПолучитьЭлементы() Цикл
			Для Каждого Эл из Стр1.ПолучитьЭлементы() Цикл
				Если НЕ Эл.Пометка Тогда
					Продолжить;
				КонецЕсли;
				Для Сч = 1 По КоличествоКопий Цикл
					
					ТаблДок = ПолучитьИзВременногоХранилища(Эл.АдресВоВременномХранилище);
					ТаблДок.КоличествоЭкземпляров = 1;
					ТаблДок.ЭкземпляровНаСтранице = 1;
					ТаблДок.Напечатать();
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаДиск(Команда)
	
	ВыгрузитьНаДиск();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура Инициализация()
			
	ЗаголовокФормы = Параметры.ЗаголовокФормы;
	
	Для Каждого Элемент Из СписокПечатаемыхЛистов Цикл
		Элемент.Значение[0] = ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(Элемент.Значение[0]), ЭтаФорма.УникальныйИдентификатор);
	КонецЦикла;
		
	Элемент = СписокПечатаемыхЛистов[0];
				
	// Инициализируем начальные установки
	СохрКоличествоКопий     = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.ПечатьРегламентированныхОтчетов", "ПредпросмотрРегламентированнойОтчетностиКоличествоКопий");
	СохрРазобратьПоКопиям   = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.ПечатьРегламентированныхОтчетов", "ПредпросмотрРегламентированнойОтчетностиРазобратьПоКопиям");
	СохрОтображатьСетку     = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.ПечатьРегламентированныхОтчетов", "ПредпросмотрРегламентированнойОтчетностиОтображатьСетку");
	СохрОтображатьЗаголовки = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.ПечатьРегламентированныхОтчетов", "ПредпросмотрРегламентированнойОтчетностиОтображатьЗаголовки");
	
	КоличествоКопий     = СохрКоличествоКопий;
	РазобратьПоКопиям   = СохрРазобратьПоКопиям;
	ОтображатьСетку     = СохрОтображатьСетку;
	ОтображатьЗаголовки = СохрОтображатьЗаголовки;
	     
	Если РазобратьПоКопиям = Неопределено Тогда
		РазобратьПоКопиям = Истина;
	КонецЕсли;
	Если ОтображатьСетку = Неопределено Тогда
		ОтображатьСетку = Ложь;
	КонецЕсли;
	Если ОтображатьЗаголовки = Неопределено Тогда
		ОтображатьЗаголовки = Ложь;
	КонецЕсли;
	
	ДеревоЛистов = РеквизитФормыВЗначение("СписокЛистов");
	
	ДеревоЛистов.Строки.Очистить();
	
	Для Каждого Сч Из СписокПечатаемыхЛистов Цикл
		
		Стр1Уровня = ДеревоЛистов.Строки.Найти(Сч.Значение[1], "Идентификатор");
		
		Если Стр1Уровня = Неопределено Тогда
			
			Стр1Уровня = ДеревоЛистов.Строки.Добавить();
			Стр1Уровня.Пометка       = 1;
			Стр1Уровня.Наименование  = Сч.Значение[2];
			Стр1Уровня.Идентификатор = Сч.Значение[1];
			
		КонецЕсли;
		
		НовСтр = Стр1Уровня.Строки.Добавить();
		НовСтр.Пометка                   = 1;
		НовСтр.Наименование              = Сч.Представление;
		НовСтр.Идентификатор             = Сч.Значение[1];
		НовСтр.АдресВоВременномХранилище = Сч.Значение[0];
				
	КонецЦикла;
		
	ЗначениеВРеквизитФормы(ДеревоЛистов, "СписокЛистов");
	
	Элементы.СписокЛистов.ТекущаяСтрока = СписокЛистов.ПолучитьЭлементы()[0].ПолучитьЭлементы()[0].ПолучитьИдентификатор();
			
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразу() Экспорт
	
	Для Каждого Эл Из СписокПечатаемыхЛистов Цикл
		
		ВывестиВыбранныйЛистВТабличныйДокумент(Эл.Значение[0]);
		
		ТабличныйДокумент.КоличествоЭкземпляров = 1;
		ТабличныйДокумент.ЭкземпляровНаСтранице = 1;
		ТабличныйДокумент.Напечатать();
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура формирует текст подсказки, отображаемой на командной панели ОсновныеДействияФормы.
//
// Параметры:
//	Нет.
//
&НаКлиенте
Процедура СформироватьТекстПодсказки()
	
	КоличествоТаблДок = КоличествоВыбранныхТабличныхДокументов();
	КоличествоЛистовВсего = 0;
	Для Каждого Стр1 Из СписокЛистов.ПолучитьЭлементы() Цикл
		КоличествоЛистовВсего = КоличествоЛистовВсего + Стр1.ПолучитьЭлементы().Количество();
	КонецЦикла;
	КоличествоЛистовТребуется = КоличествоТаблДок * КоличествоКопий;
	
	Если НСтр("ru = 'лист'") = "лист" Тогда // вместо вызова серверной ТекущийКодЛокализации() = "ru"
		ТекстЛистовВсего = СтрЗаменить(ЧислоПрописью(КоличествоЛистовВсего, "НП=Истина, НД=Ложь", "листа, листов, листов, м, , , , ,0"),
		                               ЧислоПрописью(КоличествоЛистовВсего, "НП=Ложь, НД=Ложь", " , , , , , , , ,0"),
		                               "");
		
		ТекстЛистовТребуется = СтрЗаменить(ЧислоПрописью(КоличествоЛистовТребуется, "НП=Истина, НД=Ложь", "лист, листа, листов, м, , , , ,0"),
		                                   ЧислоПрописью(КоличествоЛистовТребуется, "НП=Ложь, НД=Ложь", " , , , , , , , ,0"),
		                                   "");
		
		ТекстСтатистики = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Выбрано %1 из %2 %3. Для печати требуется %4 %5 бумаги",
			КоличествоТаблДок, КоличествоЛистовВсего, ТекстЛистовВсего, КоличествоЛистовТребуется, ТекстЛистовТребуется);
	Иначе
		
		ТекстСтатистики = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выбрано %1 из %2 листов. Для печати требуется %3 листа бумаги'"),
			КоличествоТаблДок, КоличествоЛистовВсего, КоличествоЛистовТребуется);
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает общее количество выбранных из списка печатаемых листов.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение: 
//	Число - общее количество выбранных из списка печатаемых листов.
//
&НаКлиенте
Функция КоличествоВыбранныхТабличныхДокументов()
	
	Кол = 0;
	Для Каждого Стр1 Из СписокЛистов.ПолучитьЭлементы() Цикл
		Для Каждого Стр2 Из Стр1.ПолучитьЭлементы() Цикл
			Кол = Кол + ?(Стр2.Пометка, 1, 0);
		КонецЦикла;
	КонецЦикла;
	Возврат Кол;
	
КонецФункции

// Процедура регулирует доступность флажка РазобратьПоКопиям и переформировывает текст подсказки,
// отображаемой на командной панели ОсновныеДействияФормы.
//
// Параметры:
//	Нет.
//
&НаКлиенте
Процедура ОтработатьИзмененияПараметровПечати()
	
	Если КоличествоКопий = 0 ИЛИ КоличествоКопий = Неопределено Тогда
		КоличествоКопий = 1;
	КонецЕсли;
	Если КоличествоКопий <> 1 Тогда
		Элементы.РазобратьПоКопиям.Доступность = Истина;
	Иначе
		Элементы.РазобратьПоКопиям.Доступность = Ложь;
	КонецЕсли;
	СформироватьТекстПодсказки();
	
КонецПроцедуры

// Процедура присваивает свойствам ОтображатьЗаголовки и ОтображатьСетку 
// поля табличного документа ИтоговаяТаблица значения, установленные пользователем.
//
// Параметры:
//	Нет.
//
&НаКлиенте
Процедура УстановитьОпцииТаблицы()
	
	Если Элементы.СписокЛистов.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Элементы.ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
		Элементы.ТабличныйДокумент.ОтображатьСетку     = Ложь;
	Иначе
		Элементы.ТабличныйДокумент.ОтображатьЗаголовки = ОтображатьЗаголовки;
		Элементы.ТабличныйДокумент.ОтображатьСетку     = ОтображатьСетку;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИлиСнятьФлажки(Пометка)
	
	Для Каждого Эл Из СписокЛистов.ПолучитьЭлементы() Цикл
		Эл.Пометка = Пометка;
		Для Каждого Стр Из Эл.ПолучитьЭлементы() Цикл
			Стр.Пометка = Пометка;
		КонецЦикла;
	КонецЦикла;
	СформироватьТекстПодсказки();	
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначениеНаСервере()
		
	// сохраняем параметры отображения таблицы и параметры печати
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.ПечатьРегламентированныхОтчетов", "ПредпросмотрРегламентированнойОтчетностиКоличествоКопий",     КоличествоКопий);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.ПечатьРегламентированныхОтчетов", "ПредпросмотрРегламентированнойОтчетностиРазобратьПоКопиям",   РазобратьПоКопиям);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.ПечатьРегламентированныхОтчетов", "ПредпросмотрРегламентированнойОтчетностиОтображатьСетку",     ОтображатьСетку);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.ПечатьРегламентированныхОтчетов", "ПредпросмотрРегламентированнойОтчетностиОтображатьЗаголовки", ОтображатьЗаголовки);										  
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьНаДиск()
	
	Если КоличествоВыбранныхТабличныхДокументов() = 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru='Выберите листы в дереве печатаемых листов!'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыСохраненияРегламентированногоОтчета();
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьИмяФайла(ИсходноеИмяФайла)
	
	ИмяФайла = СтрЗаменить(ИсходноеИмяФайла, "/", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, "\", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, ":", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, "*", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, "?", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, """","_");
	ИмяФайла = СтрЗаменить(ИмяФайла, "<", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, ">", "_");
	Возврат СтрЗаменить(ИмяФайла, "|", "_");
	
КонецФункции

&НаСервере
Процедура ВывестиВыбранныйЛистВТабличныйДокумент(АдресВоВременномХранилище)
	
	Если АдресВоВременномХранилище = Неопределено Тогда
		ТабличныйДокумент.Очистить();
	Иначе 		
		ТаблДок = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ТаблДок);
		
		ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ТаблДок);	
	КонецЕсли;

	ТабличныйДокумент.АвтоМасштаб        = Истина;
	ТабличныйДокумент.ЧерноБелаяПечать   = Ложь;
	ТабличныйДокумент.Область().Защита   = Ложь;
		
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСохраненияРегламентированногоОтчета()
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПараметрыСохраненияРегламентированногоОтчетаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.НастройкаПараметровСохраненияРегламентированногоОтчета",
		, // Параметры формы
		ЭтотОбъект,,,,
		ОписаниеОповещенияОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСохраненияРегламентированногоОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ ПустаяСтрока(Результат.ПутьДляВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеФорматаРасширению = РегламентированнаяОтчетностьКлиент.СоответствиеФорматовРасширениям();
	
	ПризнакОшибки = Ложь;
	Для Каждого Стр1 Из СписокЛистов.ПолучитьЭлементы() Цикл
		Для Каждого Эл Из Стр1.ПолучитьЭлементы() Цикл
			Если Эл.Пометка Тогда
				
				Для каждого ФорматСохранения Из Результат.ФорматыСохранения Цикл
					
					ИмяФайла = Результат.ПутьДляВыгрузки + СформироватьИмяФайла(Стр1.Наименование + ". " + Эл.Наименование + "." + СоответствиеФорматаРасширению[ФорматСохранения]);
					Попытка
						Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохранение %1'"), ИмяФайла), , , БиблиотекаКартинок.Записать);
						
						ТаблДок = ПолучитьИзВременногоХранилища(Эл.АдресВоВременномХранилище);
						ТаблДок.Область().ЦветФона = Новый Цвет();
						ТаблДок.Записать(ИмяФайла, ФорматСохранения);
						
					Исключение
						ПризнакОшибки = Истина;
					Конецпопытки;
					
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Состояние();
				
	Если ПризнакОшибки Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Один или несколько файлов не удалось записать в указанный каталог!
		|Возможно, недостаточно места на диске или диск защищен от записи.'"), , НСтр("ru = 'Ошибка записи на диск'"));
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Файлы успешно записаны в указанный каталог.'"));
	КонецЕсли;

КонецПроцедуры
