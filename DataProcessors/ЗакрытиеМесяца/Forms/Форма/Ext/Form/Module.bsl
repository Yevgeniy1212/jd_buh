&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьРеквизитСоответствиеСсылкиИменаВидыРегламентныхОпераций();
	ЗаполнитьТаблицуИменаОтчетовВидыОпераций(); 	
	
	СписокОперацийПоОрганизации = ЗакрытиеМесяца.ПолучитьСписокОперацийЗакрытияМесяцаПоОрганизации();
	
	СтруктурноеПодразделениеОрганизацияПриСозданииНаСервере();
	МесяцПриСозданииНаСервере();
	
	МесяцИлиСтруктурнаяЕдиницаПриИзменении();
	
	КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыполненаЗаписьДокумента" 
		ИЛИ ИмяСобытия = "Запись_ЗакрытиеМесяца" Тогда		
		
		// ВыполненаЗаписьДокумента - Оповещение из формы обработки КорректировкаДвижений.
		// Запись_ЗакрытиеМесяца - Оповещение из формы документа ЗакрытиеМесяца.
		
		ОбработкаОповещенияНаСервере();
		
	ИначеЕсли ИмяСобытия = "ИзмененПериод" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			
			Если Параметр.Свойство("Форма") Тогда
				
				Если Параметр.Форма.ИмяФормы = ИмяФормы Тогда
					
					МесяцИлиСтруктурнаяЕдиницаПриИзменении();	
					Модифицированность = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияНаСервере()
	
	ТаблицаОпераций_Заполнить();
	ОбновитьТаблицуКурсыВалютПоДокументуЗакрытиеМесяца();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область СтруктурнаяЕдиница

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте();
	
КонецПроцедуры

#КонецОбласти 

#Область МесяцНачисленияСтрокой

&НаКлиенте
Процедура МесяцНачисленияСтрокойПриИзменении(Элемент)	
	
	РаботаСДиалогамиКлиент.ДатаКакМесяцПодобратьДатуПоТексту(МесяцНачисленияСтрокой, Объект.ПериодРегистрации);
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
	
	МесяцИлиСтруктурнаяЕдиницаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры 

&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Объект.ПериодРегистрации = ДобавитьМесяц(Объект.ПериодРегистрации, Направление);
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
	
	МесяцИлиСтруктурнаяЕдиницаПриИзменении();
	
КонецПроцедуры 

&НаКлиенте
Процедура МесяцНачисленияСтрокойАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Текст = "" Тогда
		Ожидание = 0;
		РаботаСДиалогамиКлиент.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, Объект.ПериодРегистрации, ЭтаФорма);
	Иначе
		РаботаСДиалогамиКлиент.ДатаКакМесяцАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.ДатаКакМесяцОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти 

#Область НадписьОперация

&НаКлиенте
Процедура НадписьОперацияНажатие(Элемент)
	
	НомерСтрока = СтрЗаменить(Элемент.Имя, "НадписьОперация", "");
	НомерЧисло = Число(НомерСтрока);
	ИндексЧисло = НомерЧисло - 1;
	
	СтрокаТаблицыОпераций = ТаблицаОпераций.Получить(ИндексЧисло);
	ИдентификаторСтрокиТаблицыОпераций = СтрокаТаблицыОпераций.ПолучитьИдентификатор();
	
	СписокКоманд = НовыйСписокКоманд(ИдентификаторСтрокиТаблицыОпераций);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтрокаТаблицыОпераций", СтрокаТаблицыОпераций);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеНадписьОперацияНажатие", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВыборИзМеню(ОписаниеОповещения, СписокКоманд, Элемент);
	
КонецПроцедуры

&НаСервере
Функция НовыйСписокКоманд(ИдентификаторСтрокиТаблицыОпераций)
	
	СписокКоманд = Новый СписокЗначений;
	
	СтрокаТаблицыОпераций = ТаблицаОпераций.НайтиПоИдентификатору(ИдентификаторСтрокиТаблицыОпераций);
			
	Если РегламентнаяОперацияВыполнена(СтрокаТаблицыОпераций.Состояние) Тогда
				
		СписокКоманд.Добавить("Проводки", НСтр("ru = 'Показать проводки'"), , БиблиотекаКартинок.ЖурналПроводок);
		
		Если ЗакрытиеМесяца.СуществуетСправкаРасчет(СтрокаТаблицыОпераций.ВидОперации) Тогда
			СписокКоманд.Добавить("Справка", НСтр("ru = 'Сформировать справку-расчет'"));
		КонецЕсли;
		
		СсылкаЗакрытиеМесяца = НайтиДокументЗакрытиеМесяца(СтрокаТаблицыОпераций.ВидОперации);
		
		Если СсылкаЗакрытиеМесяца <> Неопределено Тогда
			
			ПараметрыПоиска = Новый Структура("Комментарий", Ложь);
			МассивОшибок = СсылкаЗакрытиеМесяца.Ошибки.НайтиСтроки(ПараметрыПоиска);
			Если МассивОшибок.Количество() > 0 Тогда
				СписокКоманд.Добавить("Ошибки", НСтр("ru = 'Показать ошибки'"), , БиблиотекаКартинок.ОперацияВыполненаСОшибками);
			КонецЕсли; 
			
			ПараметрыПоиска = Новый Структура("Комментарий", Истина);
			МассивКомментарий = СсылкаЗакрытиеМесяца.Ошибки.НайтиСтроки(ПараметрыПоиска);
			Если МассивКомментарий.Количество() > 0 Тогда
				СписокКоманд.Добавить("Комментарии", НСтр("ru = 'Показать комментарии'"), , БиблиотекаКартинок.СообщениеИнформация);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РежимТолькоПросмотр Тогда
		МожноВыполнять = Ложь;
	ИначеЕсли СтрокаТаблицыОпераций.Состояние = Состояние_НеВыполнено_НеТребуется() Тогда
		МожноВыполнять = Ложь;
	Иначе	
		МожноВыполнять = Истина;
	КонецЕсли;	
	
	Если МожноВыполнять Тогда
		
		СписокКоманд.Добавить("Выполнить", НСтр("ru = 'Выполнить операцию'"), , БиблиотекаКартинок.Провести);
		
		Если РегламентнаяОперацияВыполнена(СтрокаТаблицыОпераций.Состояние) Тогда
			СписокКоманд.Добавить("Отменить", НСтр("ru = 'Отменить операцию'"), , БиблиотекаКартинок.ОтменаПроведения);
		КонецЕсли;
		
		Если СтрокаТаблицыОпераций.Состояние <> Состояние_ВыполненоУспешно()
			И СтрокаТаблицыОпераций.Состояние <> Состояние_ВыполненоУспешно_РучнаяКорректировка() Тогда		
			СписокКоманд.Добавить("ВыполнитьДо", НСтр("ru = 'Выполнить операции до выбранной'"));
		КонецЕсли;
		
		Если РегламентнаяОперацияВыполнена(СтрокаТаблицыОпераций.Состояние) Тогда
			СписокКоманд.Добавить("ОтменитьПосле", НСтр("ru = 'Отменить операции после выбранной'"));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СписокКоманд;
	
КонецФункции

&НаКлиенте
Процедура ЗавершениеНадписьОперацияНажатие(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
		
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКоманды = ВыбранныйЭлемент.Значение;	
	СтрокаТаблицыОпераций = ДополнительныеПараметры.СтрокаТаблицыОпераций;
	
	ИмяОперацииЗакрытияМесяца = СоответствиеСсылкиИменаВидыРегламентныхОпераций[СтрокаТаблицыОпераций.ВидОперации];
	
	СсылкаЗакрытияМесяца = НайтиДокументЗакрытиеМесяца(СтрокаТаблицыОпераций.ВидОперации);
	
	Если ИмяКоманды = "Проводки" Тогда
				
		Если СсылкаЗакрытияМесяца <> Неопределено Тогда
			
			ПараметрыФормы = Новый Структура("ДокументСсылка", СсылкаЗакрытияМесяца);
			ОткрытьФорму("Обработка.КорректировкаДвижений.Форма", ПараметрыФормы, ЭтаФорма, СсылкаЗакрытияМесяца);
			
		КонецЕсли;
		
	ИначеЕсли ИмяКоманды = "Ошибки" Тогда
		
		Если СсылкаЗакрытияМесяца <> Неопределено Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ВидРегламентнойОперации", СтрокаТаблицыОпераций.ВидОперации);
			ПараметрыФормы.Вставить("СсылкаЗакрытиеМесяца", СсылкаЗакрытияМесяца);
			ПараметрыФормы.Вставить("Ошибки", Истина);
			
			ОткрытьФорму("Документ.ЗакрытиеМесяца.Форма.ФормаОшибок", ПараметрыФормы, ЭтаФорма);
			
		КонецЕсли;
		
	ИначеЕсли ИмяКоманды = "Комментарии" Тогда
		
		Если СсылкаЗакрытияМесяца <> Неопределено Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ВидРегламентнойОперации", СтрокаТаблицыОпераций.ВидОперации);
			ПараметрыФормы.Вставить("СсылкаЗакрытиеМесяца", СсылкаЗакрытияМесяца);
			ПараметрыФормы.Вставить("Ошибки", Ложь);
			
			ОткрытьФорму("Документ.ЗакрытиеМесяца.Форма.ФормаОшибок", ПараметрыФормы, ЭтаФорма);
			
		КонецЕсли;
		
	ИначеЕсли ИмяКоманды = "Выполнить" Тогда
	
		ОбработчикКомандыВыполнитьРегламентнуюОперациюНаКлиенте(СтрокаТаблицыОпераций.ВидОперации, СсылкаЗакрытияМесяца);
	
	ИначеЕсли ИмяКоманды = "ВыполнитьДо" Тогда
	
		ВыполнитьЗакрытиеМесяцаНаКлиенте(СтрокаТаблицыОпераций.ВидОперации);
	
	ИначеЕсли ИмяКоманды = "Отменить" Тогда
	
		ДокументЗакрытиеМесяца_ОтменитьОперацию(СсылкаЗакрытияМесяца, СтрокаТаблицыОпераций.ВидОперации);
				
	ИначеЕсли ИмяКоманды = "ОтменитьПосле" Тогда
	
	    ДокументЗакрытиеМесяца_ОтменитьВсеОперацииПослеВыбранной(СтрокаТаблицыОпераций.ВидОперации);
		
	ИначеЕсли ИмяКоманды = "Справка" Тогда
		
		МассивИменОтчетов = ИменаОтчетовСправкаРасчетПоВидуОперации(СтрокаТаблицыОпераций.ВидОперации);
		
		Для Каждого ИмяОтчета Из МассивИменОтчетов Цикл
			ЗаполнитьПараметрыИОткрытьСправкуРасчет(ИмяОтчета, СтрокаТаблицыОпераций.ВидОперации);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьЗакрытиеМесяца(Команда)

	ВыполнитьЗакрытиеМесяцаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокДокументов(Команда)
		
	ПараметрыФормы = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("Отбор", Отбор);
	КонецЕсли;
	
	ОткрытьФорму("Документ.ЗакрытиеМесяца.ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиСпискаОпераций(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресТаблицыОпераций", АдресТаблицыОпераций());
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеНастройкиСпискаОпераций", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ЗакрытиеМесяца.Форма.НастройкиСпискаОпераций", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ЗавершениеНастройкиСпискаОпераций(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Строка") Тогда
		
		Если ЭтоАдресВременногоХранилища(РезультатЗакрытия) Тогда
			
			// Очистить таблицу операций т.к. она будет перезаполнена, по данным из формы НастройкиСпискаОпераций.
			ТаблицаОпераций.Очистить();
			
			// Получить таблицу операций, которая была изменена в форме НастройкиСпискаОпераций.
			ТабЗначОперации = ПолучитьИзВременногоХранилища(РезультатЗакрытия);
			
			// Заполнить ТаблицаОпераций по таблице, измененной в форме НастройкиСпискаОпераций. 
			Для Каждого СтрокаТабЗначОперации Из ТабЗначОперации Цикл
				
				СтрокаТаблицыОпераций = ТаблицаОпераций.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыОпераций, СтрокаТабЗначОперации);
				
				Если СтрокаТабЗначОперации.Пометка Тогда
					
					// У выполненных операций невозможно изменять пометку,
					// поэтому либо это была выполненная операция,
					// либо это была операция в Состояние_НеВыполнено_НеТребуется(),
					// но ей установили пометку в форме НастройкиСпискаОпераций.
					Если РегламентнаяОперацияВыполнена(СтрокаТаблицыОпераций.Состояние) Тогда
						// Ничего не делаем, т.к. пометка была установлена до этого.
					Иначе
						// Эта операция не выполнена, но ее нужно выполнить, т.к. стоит пометка.
						СтрокаТаблицыОпераций.Состояние = Состояние_НеВыполнено_Требуется();
					КонецЕсли;
					
				Иначе
					
					// Если в форме НастройкиСпискаОпераций была снята пометка,
					// то данную операцию не требуется выполняться.
					//
					// Снять пометку можно только у не выполненной операции, 
					// поэтому операция точно не выполнена.
					СтрокаТаблицыОпераций.Состояние = Состояние_НеВыполнено_НеТребуется();
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// После обновления ТаблицаОпераций необходимо обновить связанные элементы формы.
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСправкуРасчет(Команда)
	
	СписокКоманд = Новый СписокЗначений;
	
	СписокКоманд.Добавить("Все", НСтр("ru = 'Все'"));
	СписокКоманд.Добавить("СправкаРасчетСписаниеРБП", НСтр("ru = 'Списание РБП'"));
	СписокКоманд.Добавить("СправкаРасчетВычетаПоРеализованнымТоварам", НСтр("ru = 'Расчет вычета  по реализованным товарам'"));
	
	Если ПолучитьФункциональнуюОпциюИнтерфейса("ВедетсяПроизводственнаяДеятельность") Тогда
		СписокКоманд.Добавить("СправкаРасчетСебестоимостиПродукцииИУслуг", НСтр("ru = 'Себестоимость продукции и услуг'"));
		СписокКоманд.Добавить("СправкаРасчетКалькуляцияСебестоимости", НСтр("ru = 'Калькуляция себестоимости'"));
		СписокКоманд.Добавить("СправкаРасчетРаспределенияКосвенныхРасходов", НСтр("ru = 'Распределение косвенных расходов'"));
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпциюИнтерфейса("ИспользоватьВалютныйУчет") Тогда
		СписокКоманд.Добавить("СправкаРасчетПереоценкаВалютныхСредств", НСтр("ru = 'Переоценка валютных средств'"));
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеОткрытьСправкуРасчет", ЭтотОбъект, СписокКоманд);
	ПоказатьВыборИзМеню(ОписаниеОповещения, СписокКоманд, Элементы.ОткрытьСправкуРасчет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеОткрытьСправкуРасчет(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКоманды = ВыбранныйЭлемент.Значение;
	
	Если ИмяКоманды = "Все" Тогда
		НайденныйЭлемент = ДополнительныеПараметры.НайтиПоЗначению("Все");
		ДополнительныеПараметры.Удалить(НайденныйЭлемент);
		Для Каждого ЭлементСписка Из ДополнительныеПараметры Цикл
			ЗаполнитьПараметрыИОткрытьСправкуРасчет(ЭлементСписка.Значение);
		КонецЦикла;
	Иначе
		ЗаполнитьПараметрыИОткрытьСправкуРасчет(ИмяКоманды);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыИОткрытьСправкуРасчет(Знач ИмяОтчета, Знач ВидОперации = Неопределено)
	
	Если ВидОперации = Неопределено Тогда		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ИмяОтчета", ИмяОтчета);
		МассивСтрокТаблицы = ИменаОтчетовВидыОпераций.НайтиСтроки(ПараметрыОтбора);
		ВидОперации = МассивСтрокТаблицы[0].ВидОперации;
	КонецЕсли;	
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	
	ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
	
	СписокСтруктурныхЕдиниц = Новый СписокЗначений;
	СписокСтруктурныхЕдиниц.Добавить(Объект.Организация);	
	Если СписокОперацийПоОрганизации.НайтиПоЗначению(ВидОперации) = Неопределено Тогда
		СписокСтруктурныхЕдиниц.Добавить(Объект.СтруктурноеПодразделение);
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("СписокСтруктурныхЕдиниц", СписокСтруктурныхЕдиниц);
	ПредставлениеСпискаОрганизаций = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(СписокСтруктурныхЕдиниц);
	ДополнительныеСвойства.Вставить("ПредставлениеСпискаОрганизаций", ПредставлениеСпискаОрганизаций);
	
	ДополнительныеСвойства.Вставить("НачалоПериода", НачалоМесяца(Объект.ПериодРегистрации));
	ДополнительныеСвойства.Вставить("КонецПериода" , КонецМесяца(Объект.ПериодРегистрации));
	ДополнительныеСвойства.Вставить("НаборПоказателейОтчета", 1);
	
	ЗаполняемыеНастройки = Новый Структура("Показатели, Группировка, Отбор, ВыводимыеДанные", Ложь, Истина, Истина, Истина);
	ПараметрыФормы = Новый Структура("ВидРасшифровки, ПользовательскиеНастройки, СформироватьПриОткрытии, ИДРасшифровки, ЗаполняемыеНастройки",
									 2, ПользовательскиеНастройки, Ложь, ИмяОтчета, ЗаполняемыеНастройки);
									 
	ОткрытьФорму("Отчет." + ИмяОтчета + ".Форма.ФормаОтчета", ПараметрыФормы, , Истина);
	
КонецПроцедуры

&НаКлиенте
Функция ИменаОтчетовСправкаРасчетПоВидуОперации(Знач ВидОперации)
	
	МассивИменОтчетов = Новый Массив;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВидОперации", ВидОперации);
	МассивСтрокТаблицы = ИменаОтчетовВидыОпераций.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаТаблицы Из МассивСтрокТаблицы Цикл
		МассивИменОтчетов.Добавить(СтрокаТаблицы.ИмяОтчета);	
	КонецЦикла;
	
	Возврат МассивИменОтчетов;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьОтчетОбОшибках(Команда)
	
	ОткрытьОтчетОбОшибкахИКомментариях(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетПоКомментариям(Команда)
	
	ОткрытьОтчетОбОшибкахИКомментариях(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетПоВыполненнымОперациям(Команда)
	
	ТабДок = ТабДокВыполненныеОперации();
	
	Если ТабДок <> Неопределено Тогда
		
		ПараметрыПечати = ОбщегоНазначенияБККлиент.ПустыеПараметрыПечати();
		ПараметрыПечати.ТабличныйДокумент = ТабДок;
		ПараметрыПечати.ЗаголовокФормы = НСтр("ru = 'Отчет о выполнении операций'");
		ОбщегоНазначенияБККлиент.ОткрытьФормуПечати(ПараметрыПечати);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗакрытиеМесяца(Команда)
	ДокументЗакрытиеМесяца_ОтменитьВсеОперации();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиЗакрытияМесяца(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПериодРегистрации", Объект.ПериодРегистрации);
	ПараметрыФормы.Вставить("АдресТаблицыЗначенийКурсыВалют", АдресТаблицыЗначенийКурсыВалют());
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияФормыНастроек", ЭтаФорма);
	
	ОткрытьФорму("Обработка.ЗакрытиеМесяца.Форма.Настройки", ПараметрыФормы, , , , , Оповещение);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедуры

#Область ВнешнийВидФормы

&НаСервере
Процедура УправлениеФормой()
	
	ОбновитьКартинкиИНадписиРегламентныхОпераций();
	ОбновитьТекстЭлементовЛевойКоманднойПанели();
	ОбновитьВидимостьКомандыОткрытьНастройкиЗакрытияМесяца();
	
КонецПроцедуры

// Обновляет КартинкаОперация<Номер> и НадписьОперация<Номер>.
// Перед вызовом функции должна быть заполнена ТаблицаОпераций.
//
&НаСервере
Процедура ОбновитьКартинкиИНадписиРегламентныхОпераций()
	
	Для Каждого СтрокаТаблицыОпераций Из ТаблицаОпераций Цикл
		
		НомерЧисло = ТаблицаОпераций.Индекс(СтрокаТаблицыОпераций) + 1;
		НомерСтрока = Формат(НомерЧисло, "ЧГ=");
		
		// Настроить свойства элемента НадписьОперация<Номер>.
		НадписьОперация = Элементы["НадписьОперация" + НомерСтрока];
		ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"НадписьОперация" + НомерСтрока, "Видимость", СтрокаТаблицыОпераций.Отображать);
		Если СтрокаТаблицыОпераций.Отображать Тогда
			НадписьОперация.Заголовок = СтрокаТаблицыОпераций.ВидОперации;
			НадписьОперация.ЦветТекста = ЦветСостояния(СтрокаТаблицыОпераций.Состояние);
			
			// Настроить свойства элемента КартинкаОперация<Номер>.
			КартинкаОперация = Элементы["КартинкаОперация" + НомерСтрока];
			КартинкаОперация.Картинка = КартинкаСостояния(СтрокаТаблицыОпераций.Состояние);		
		КонецЕсли;
		
	КонецЦикла;
	
	//скрывать видимость самих групп, если данные в группе все скрыты
	Для НомГруппы = 1 По  6 Цикл
		КоличествоСтрок  = ТаблицаОпераций.НайтиСтроки(Новый Структура("Группа, Отображать", НомГруппы, Истина)).Количество();
		Если КоличествоСтрок = 0 Тогда
			ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Группа" + НомГруппы, "Видимость", Ложь);
		Иначе
			ОбщегоНазначенияБККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Группа" + НомГруппы, "Видимость", Истина);
		КонецЕсли;			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекстЭлементовЛевойКоманднойПанели()
	
	Количество = КоличествоОперацийПоВидам();
	
	Текст = НСтр("ru = 'Выполнено успешно: [Количество]'");
	Текст = СтрЗаменить(Текст, "[Количество]", Количество.ВыполненоУспешно);
	Элементы.ТекстВыполненоУспешноКоличество.Заголовок = Текст;
	
	Текст = НСтр("ru = 'Выполнено с ошибками: [Количество]'");
	Текст = СтрЗаменить(Текст, "[Количество]", Количество.ВыполненоСОшибками);
	Элементы.ТекстВыполненоСОшибкамиКоличество.Заголовок = Текст;
	
	Текст = НСтр("ru = 'Не требуется выполнять: [Количество]'");
	Текст = СтрЗаменить(Текст, "[Количество]", Количество.НеТребуетсяВыполнять);
	Элементы.ТекстНеТребуетсяВыполнятьКоличество.Заголовок = Текст;
	
	// Установить текст элемента ТекстВыполнения.
	Если Количество.ВыполненоСОшибками > 0 Тогда
		
		Элементы.ТекстВыполнения.ЦветТекста = ЦветСостояния(Состояние_ВыполненоСОшибками());
		
		Элементы.ТекстВыполнения.Заголовок = НСтр(
		"ru = 'Закрытие месяца
		|выполнено с ошибками'");
		
	ИначеЕсли Количество.ОсталосьВыполнить > 0 Тогда 
		
		Элементы.ТекстВыполнения.ЦветТекста = ЦветСостояния(Состояние_НеВыполнено_Требуется());
		
		Элементы.ТекстВыполнения.Заголовок = НСтр(
		"ru = 'Закрытие месяца
		|не выполнено'");			
		
	Иначе
		
		Элементы.ТекстВыполнения.ЦветТекста = ЦветСостояния(Состояние_ВыполненоУспешно());
		
		Элементы.ТекстВыполнения.Заголовок = НСтр(
		"ru = 'Закрытие месяца
		|выполнено успешно'");			
		
	КонецЕсли;
	
	// Установить текст элемента ТекстВыполненияПримечание.
	ВсегоОсталосьВыполнитьОпераций = Количество.ВыполненоСОшибками + Количество.ОсталосьВыполнить;
	Если ВсегоОсталосьВыполнитьОпераций = 0 Тогда
		Элементы.ТекстВыполненияПримечание.Заголовок = "";
	Иначе
		ТекстЗаголовка =  НСтр(
		"ru = 'Осталось выполнить
		|операций: [Количество]'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "[Количество]", ВсегоОсталосьВыполнитьОпераций);
		Элементы.ТекстВыполненияПримечание.Заголовок = ТекстЗаголовка;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьКомандыОткрытьНастройкиЗакрытияМесяца()
	
	Элементы.ОткрытьНастройкиЗакрытияМесяца.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьВалютныйУчет");
	
КонецПроцедуры

&НаСервере
Функция КоличествоОперацийПоВидам()
	
	Количество = Новый Структура;
	
	Количество.Вставить("ВыполненоУспешно", 0);
	Количество.Вставить("ВыполненоСОшибками", 0); 
	Количество.Вставить("НеТребуетсяВыполнять", 0);
	Количество.Вставить("ОсталосьВыполнить", 0);
	
	Для Каждого СтрокаТаблицыОпераций Из ТаблицаОпераций Цикл
		
		Если СтрокаТаблицыОпераций.Состояние = Состояние_ВыполненоУспешно()
			ИЛИ СтрокаТаблицыОпераций.Состояние = Состояние_ВыполненоУспешно_РучнаяКорректировка() Тогда
			Количество.ВыполненоУспешно = Количество.ВыполненоУспешно + 1;	
			
		ИначеЕсли СтрокаТаблицыОпераций.Состояние = Состояние_ВыполненоСОшибками() Тогда
			Количество.ВыполненоСОшибками = Количество.ВыполненоСОшибками + 1;
			
		ИначеЕсли СтрокаТаблицыОпераций.Состояние = Состояние_НеВыполнено_НеТребуется() Тогда
			Количество.НеТребуетсяВыполнять = Количество.НеТребуетсяВыполнять + 1;
			
		ИначеЕсли СтрокаТаблицыОпераций.Состояние = Состояние_НеВыполнено_Требуется() Тогда
			Количество.ОсталосьВыполнить = Количество.ОсталосьВыполнить + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Количество;
	
КонецФункции

// Возвращает цвет состояния по его имени.
//
// Параметры:
//  Состояние - Строка - Смотрите функции Состояние_<Имя>().
//
// Возвращаемое значение:
//  Цвет - Цвет состояния.
//
&НаКлиентеНаСервереБезКонтекста
Функция ЦветСостояния(Состояние)
	
	Если Состояние = Состояние_ВыполненоУспешно() Тогда
		ЦветСостояния = WebЦвета.ТемноЗеленый;
		
	ИначеЕсли Состояние = Состояние_ВыполненоУспешно_РучнаяКорректировка() Тогда
		ЦветСостояния = WebЦвета.ТемноЗеленый;
		
	ИначеЕсли Состояние = Состояние_ВыполненоСОшибками() Тогда
		ЦветСостояния = WebЦвета.Кирпичный;
		
	ИначеЕсли Состояние = Состояние_НеВыполнено_Требуется() Тогда
		ЦветСостояния = WebЦвета.Черный;
		
	ИначеЕсли Состояние = Состояние_НеВыполнено_НеТребуется() Тогда
		ЦветСостояния = WebЦвета.Серый;
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка. Не удалось определить цвет состояния по его имени.'");
		
	КонецЕсли;
	
	Возврат ЦветСостояния;
	
КонецФункции

// Возвращает картинку состояния по его имени.
//
// Параметры:
//  Состояние - Строка - Смотрите функции Состояние_<Имя>().
//
// Возвращаемое значение:
//  Картинка - Картинка состояния.
//
&НаКлиентеНаСервереБезКонтекста
Функция КартинкаСостояния(Состояние)
	
	Если Состояние = Состояние_ВыполненоУспешно() Тогда
		КартинкаСостояния = БиблиотекаКартинок.ОперацияВыполненаУспешно;
		
	ИначеЕсли Состояние = Состояние_ВыполненоУспешно_РучнаяКорректировка() Тогда
		КартинкаСостояния = БиблиотекаКартинок.ОперацияИсправлена;
		
	ИначеЕсли Состояние = Состояние_ВыполненоСОшибками() Тогда
		КартинкаСостояния = БиблиотекаКартинок.ОперацияВыполненаСОшибками;
		
	ИначеЕсли Состояние = Состояние_НеВыполнено_Требуется() Тогда
		КартинкаСостояния = Новый Картинка;
		
	ИначеЕсли Состояние = Состояние_НеВыполнено_НеТребуется() Тогда
		КартинкаСостояния = Новый Картинка;
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка. Не удалось определить картинку состояния по его имени.'");
		
	КонецЕсли;
	
	Возврат КартинкаСостояния;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступность(Организация, Период, Форма, ИныеУсловия = Истина)
	
	УсловиеГраницы = Истина;	
	
	ДоступностьФормы = (УсловиеГраницы И ИныеУсловия И ЗначениеЗаполнено(Объект.Организация));
	
	Элементы.ВыполнитьЗакрытиеМесяца.Доступность = ДоступностьФормы;
	Элементы.ОтменитьЗакрытиеМесяца.Доступность = ДоступностьФормы;
	Элементы.ОткрытьНастройкиСпискаОпераций.Доступность = ДоступностьФормы;
	
	Форма.РежимТолькоПросмотр = НЕ ДоступностьФормы; // Для скрытия контекстных команд.
	
КонецПроцедуры


#КонецОбласти

#Область СтруктурнаяЕдиница

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриСозданииНаСервере()
	
	// Заполнить реквизит Организация.
	Объект.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	
	// Заполнить реквизит СтруктурноеПодразделение.
	СтруктурноеПодразделение = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(, "ОсновноеСтруктурноеПодразделениеОрганизации");
	Если СтруктурноеПодразделение = Неопределено Тогда
		Объект.СтруктурноеПодразделение = Объект.Организация;
	ИначеЕсли ТипЗнч(СтруктурноеПодразделение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		Объект.СтруктурноеПодразделение = СтруктурноеПодразделение;
	Иначе
		Объект.СтруктурноеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();							
	КонецЕсли;
	
	// Заполнить реквизит СтруктурноеПодразделениеОрганизация и настроить связанное поле.	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	МесяцИлиСтруктурнаяЕдиницаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте()
	
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере();
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере();			
		КонецЕсли;
	КонецЕсли;
	
	МесяцИлиСтруктурнаяЕдиницаПриИзменении();
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере()
	
	РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
	
КонецПроцедуры

#КонецОбласти

#Область МесяцНачисленияСтрокой

&НаСервере
Процедура МесяцПриСозданииНаСервере()
	
	Объект.ПериодРегистрации = КонецМесяца(ОбщегоНазначения.ТекущаяДатаПользователя());
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
	
КонецПроцедуры

#КонецОбласти

#Область ТаблицаОпераций

// Очищает таблицу операций и заполняет ее по данным ИБ.
//
&НаСервере
Процедура ТаблицаОпераций_Заполнить()
	
	ТабЗначОперации = ТабЗначОперации();
	
	ТаблицаОпераций.Очистить();
	
	Для Каждого СтрокаТабЗначОперации Из ТабЗначОперации Цикл
		
		СтрокаТаблицыОпераций = ТаблицаОпераций.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыОпераций, СтрокаТабЗначОперации);
		
	КонецЦикла;
	
	УправлениеФормой();
	
КонецПроцедуры

// Обновляет существующие строки в таблице операций.
//
// Параметры:
//  МассивОбновляемыхВидовОпераций - Массив - 
//   Массив оперций, строки которых необходимо обновить.
//   Каждый элемент ПеречислениеСсылка.ВидыРегламентныхОпераций.
//
&НаСервере
Процедура ТаблицаОпераций_Обновить(Знач МассивОбновляемыхВидовОпераций)
	
	Если ТипЗнч(МассивОбновляемыхВидовОпераций) = Тип("ПеречислениеСсылка.ВидыРегламентныхОпераций") Тогда
		ВидОперации = МассивОбновляемыхВидовОпераций;
		МассивОбновляемыхВидовОпераций = Новый Массив;
		МассивОбновляемыхВидовОпераций.Добавить(ВидОперации);
	КонецЕсли;
	
	ТабЗначОперации = ТабЗначОперации();
	
	Для Каждого ВидОперации Из МассивОбновляемыхВидовОпераций Цикл
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ВидОперации", ВидОперации);
		
		СтрокаТаблицыОпераций = ТаблицаОпераций.НайтиСтроки(ПараметрыПоиска).Получить(0);	
		СтрокаТабЗначОперации = ТабЗначОперации.НайтиСтроки(ПараметрыПоиска).Получить(0);
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыОпераций, СтрокаТабЗначОперации);
		
	КонецЦикла;
		
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Функция ТабЗначОперации()
	
	ТабЗначОперации = РеквизитФормыВЗначение("ТаблицаОпераций");
		
	ТабЗначОперации_СоздатьСтрокиЗаполнитьКолонкуВидОперации(ТабЗначОперации);
	ТабЗначОперации_ЗаполнитьКолонкиОрганизацияСтруктурноеПодразделение(ТабЗначОперации);	
	ТабЗначОперации_ЗаполнитьКолонкиСостояниеГруппа(ТабЗначОперации);
	
	Возврат ТабЗначОперации;
	
КонецФункции

&НаСервере
Процедура ТабЗначОперации_СоздатьСтрокиЗаполнитьКолонкуВидОперации(ТабЗначОперации)
	
	ТабЗначОперации.Очистить();
	
	ЗаполнитьОперацииЗакрытиМесяца();
	
	Для Каждого Строка Из ТаблицаОпераций Цикл
		НоваяСтрока = ТабЗначОперации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ТабЗначОперации_ЗаполнитьКолонкиОрганизацияСтруктурноеПодразделение(ТабЗначОперации)
	
	Для Каждого СтрокаТабЗначОперации Из ТабЗначОперации Цикл
		
		СтрокаТабЗначОперации.Организация = Объект.Организация;
		
		Если СписокОперацийПоОрганизации.НайтиПоЗначению(СтрокаТабЗначОперации.ВидОперации) = Неопределено Тогда
			СтрокаТабЗначОперации.СтруктурноеПодразделение = Объект.СтруктурноеПодразделение;			
		Иначе
			СтрокаТабЗначОперации.СтруктурноеПодразделение = Неопределено;			
		КонецЕсли;
		
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура ТабЗначОперации_ЗаполнитьКолонкиСостояниеГруппа(ТабЗначОперации)
	
	ТабЗначОперацииЗапрос = ЗакрытиеМесяца.СоставГруппыРегОпераций(1, Объект.Организация, Объект.СтруктурноеПодразделение, Объект.ПериодРегистрации);
	ТабЗначОперации_ЗаполнитьКолонкиСостояниеГруппаКоллекцииСтрок(ТабЗначОперации, 0, 4, ТабЗначОперацииЗапрос, 1);
	
	ТабЗначОперацииЗапрос = ЗакрытиеМесяца.СоставГруппыРегОпераций(2, Объект.Организация, Объект.СтруктурноеПодразделение, Объект.ПериодРегистрации);
	ТабЗначОперации_ЗаполнитьКолонкиСостояниеГруппаКоллекцииСтрок(ТабЗначОперации, 5, 8, ТабЗначОперацииЗапрос, 2);
	
	ТабЗначОперацииЗапрос = ЗакрытиеМесяца.СоставГруппыРегОпераций(3, Объект.Организация, Объект.СтруктурноеПодразделение, Объект.ПериодРегистрации);
	ТабЗначОперации_ЗаполнитьКолонкиСостояниеГруппаКоллекцииСтрок(ТабЗначОперации, 9, 13, ТабЗначОперацииЗапрос, 3);
	
	ТабЗначОперацииЗапрос = ЗакрытиеМесяца.СоставГруппыРегОпераций(4, Объект.Организация, Объект.СтруктурноеПодразделение, Объект.ПериодРегистрации);
	ТабЗначОперации_ЗаполнитьКолонкиСостояниеГруппаКоллекцииСтрок(ТабЗначОперации, 14, 15, ТабЗначОперацииЗапрос, 4);
	                                   		
	ТабЗначОперацииЗапрос = ЗакрытиеМесяца.СоставГруппыРегОпераций(5, Объект.Организация, Объект.СтруктурноеПодразделение, Объект.ПериодРегистрации);
	ТабЗначОперации_ЗаполнитьКолонкиСостояниеГруппаКоллекцииСтрок(ТабЗначОперации, 16, 24, ТабЗначОперацииЗапрос, 5);		
	
	ТабЗначОперацииЗапрос = ЗакрытиеМесяца.СоставГруппыРегОпераций(6, Объект.Организация, Объект.СтруктурноеПодразделение, Объект.ПериодРегистрации);
	ТабЗначОперации_ЗаполнитьКолонкиСостояниеГруппаКоллекцииСтрок(ТабЗначОперации, 25, 27, ТабЗначОперацииЗапрос, 6);
			
КонецПроцедуры

&НаСервере
Процедура ТабЗначОперации_ЗаполнитьКолонкиСостояниеГруппаКоллекцииСтрок(ТабЗначОперации, ИндексНачало, ИндексКонец, ТабЗначОперацииЗапрос, НомерГруппы)
		
	Для ИндексСтроки = ИндексНачало ПО ИндексКонец Цикл  
		Если ИндексНачало = ИндексКонец Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаТабЗначОперации = ТабЗначОперации.Получить(ИндексСтроки);
		ТабЗначОперации_ЗаполнитьКолонкиСостояниеГруппаОднойСтроки(СтрокаТабЗначОперации, ТабЗначОперацииЗапрос);
		СтрокаТабЗначОперации.Группа = НомерГруппы;
		
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура ТабЗначОперации_ЗаполнитьКолонкиСостояниеГруппаОднойСтроки(СтрокаТабЗначОперации, ТабЗначОперацииЗапрос)
	
	СтрокаТабЗначОперацииЗапрос = ТабЗначОперацииЗапрос.Найти(СтрокаТабЗначОперации.ВидОперации, "ВидОперации");
	
	// Возможно при открытии формы с пустой организацией.
	Если СтрокаТабЗначОперацииЗапрос = Неопределено Тогда
		СтрокаТабЗначОперацииЗапрос = Новый Структура;
		Если СтрокаТабЗначОперации.Отображать  Тогда
			СтрокаТабЗначОперацииЗапрос.Вставить("Требуется", Истина);			
		Иначе
			СтрокаТабЗначОперацииЗапрос.Вставить("Требуется", Ложь);			
		КонецЕсли; 		
		
		СтрокаТабЗначОперацииЗапрос.Вставить("Состояние", Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено);			
		СтрокаТабЗначОперацииЗапрос.Вставить("РучнаяКорректировка", Ложь);
		СтрокаТабЗначОперацииЗапрос.Вставить("ВидОперации", СтрокаТабЗначОперации.ВидОперации);
	КонецЕсли;
	
	Если СтрокаТабЗначОперации.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПереносНЗПБУ Тогда
		СтрокаОперацииСебестоимость = ТабЗначОперацииЗапрос.Найти(Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииБУ, "ВидОперации");
		Если СтрокаОперацииСебестоимость <> Неопределено Тогда
			СтрокаТабЗначОперацииЗапрос.Требуется = СтрокаОперацииСебестоимость.Требуется;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаТабЗначОперации.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПереносНЗПНУ Тогда
		СтрокаОперацииСебестоимость = ТабЗначОперацииЗапрос.Найти(Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииНУ, "ВидОперации");
		Если СтрокаОперацииСебестоимость <> Неопределено Тогда
			СтрокаТабЗначОперацииЗапрос.Требуется = СтрокаОперацииСебестоимость.Требуется;
		КонецЕсли;
	КонецЕсли;
	
	// Заполнить колонку Состояние в СтрокаТабЗначОперации. 
	Если СтрокаТабЗначОперацииЗапрос.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено Тогда
		
		Если СтрокаТабЗначОперацииЗапрос.РучнаяКорректировка Тогда
			СтрокаТабЗначОперации.Состояние = Состояние_ВыполненоУспешно_РучнаяКорректировка();	
		Иначе
			СтрокаТабЗначОперации.Состояние = Состояние_ВыполненоУспешно();	
		КонецЕсли;
		
	ИначеЕсли СтрокаТабЗначОперацииЗапрос.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками Тогда
		
		СтрокаТабЗначОперации.Состояние = Состояние_ВыполненоСОшибками();	
		
	ИначеЕсли СтрокаТабЗначОперацииЗапрос.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено Тогда
		
		Если СтрокаТабЗначОперацииЗапрос.Требуется И СтрокаТабЗначОперации.Отображать Тогда
			СтрокаТабЗначОперации.Состояние = Состояние_НеВыполнено_Требуется();	
		Иначе
			СтрокаТабЗначОперации.Состояние = Состояние_НеВыполнено_НеТребуется();
		КонецЕсли;
		
		Если (НЕ ВедениеУчетаВременныхРазницБалансовымМетодом)
			И (СтрокаТабЗначОперацииЗапрос.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПереносНЗПНУ 
			ИЛИ СтрокаТабЗначОперацииЗапрос.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииНУ) Тогда		
			
			СтрокаТабЗначОперации.Состояние = Состояние_НеВыполнено_НеТребуется();
			
		КонецЕсли;		
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка. Неизвестное состояние регламентной операции.'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьОперацииЗакрытиМесяца()
	
	ТаблицаОпераций.Очистить();
	
	МакетОпераций   = Обработки.ЗакрытиеМесяца.ПолучитьМакет("СписокРегламентныхОпераций");
	ОбластьОперации =  МакетОпераций.Области["ВидыОпераций"];
	
	Для Ном = ОбластьОперации.Верх По ОбластьОперации.Низ Цикл
		// перебираем строки области
		ВидОперации	    	= СокрП(МакетОпераций.Область(Ном, 1).Текст);
		Группа       		= СокрП(МакетОпераций.Область(Ном, 2).Текст);
		ИмяФО            	= СокрП(МакетОпераций.Область(Ном, 3).Текст);		
		
		НоваяСтрока = ТаблицаОпераций.Добавить();
		Если ЗначениеЗаполнено(ИмяФО) Тогда
			НоваяСтрока.Отображать = ПолучитьФункциональнуюОпцию(ИмяФО);
		Иначе
			НоваяСтрока.Отображать =  Истина;
		КонецЕсли;
		
		НоваяСтрока.Группа = Число(Группа); 			
		НоваяСтрока.ВидОперации = Перечисления.ВидыРегламентныхОпераций[ВидОперации];   
	КонецЦикла;

КонецФункции

#КонецОбласти

#Область Состояния

&НаКлиентеНаСервереБезКонтекста
Функция Состояние_ВыполненоУспешно()
	Возврат "ВыполненоУспешно";	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Состояние_ВыполненоУспешно_РучнаяКорректировка()
	Возврат "ВыполненоУспешно_РучнаяКорректировка";	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Состояние_ВыполненоСОшибками()
	Возврат "ВыполненоСОшибками";	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Состояние_НеВыполнено_Требуется()
	Возврат "НеВыполнено_Требуется";	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Состояние_НеВыполнено_НеТребуется()
	Возврат "НеВыполнено_НеТребуется";	
КонецФункции

#КонецОбласти

#Область ДокументЗакрытиеМесяца

// Возвращает ссылку на документ ЗакрытиеМесяца,
// который удовлетворяет условиям из СтрокаТаблицыОпераций.
//
// Параметры:
//  ВидОперации - ПеречислениеСсылка.ВидыРегламентныхОпераций
//   - Вид операции закрытия месяца, для которого необходимо найти документ ЗакрытиеМесяца.
//
// Возвращаемое значение:
//  ДокументСсылка.ЗакрытиеМесяца, Неопределено - Ссылка на документ ЗакрытиеМесяца.
//   Если документ не найден, то возвращает Неопределено.
//
&НаСервере
Функция НайтиДокументЗакрытиеМесяца(Знач ВидОперации)
		
	СсылкаЗакрытиеМесяца = Неопределено;
	
	Запрос = Новый Запрос;	
	Запрос.Текст = 	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗакрытиеМесяца.Ссылка
	|ИЗ
	|	Документ.ЗакрытиеМесяца КАК ЗакрытиеМесяца
	|ГДЕ
	|	ЗакрытиеМесяца.Дата МЕЖДУ &ДатаЗакрытияНачало И &ДатаЗакрытияКонец
	|	И ЗакрытиеМесяца.Организация = &Организация
	|	И &УсловиеНаСтруктурноеПодразделение
	|	И НЕ ЗакрытиеМесяца.ПометкаУдаления
	|	И ЗакрытиеМесяца.[ИмяОперацииЗакрытияМесяца]";
	
	ИмяОперацииЗакрытияМесяца = СоответствиеСсылкиИменаВидыРегламентныхОпераций[ВидОперации];	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "[ИмяОперацииЗакрытияМесяца]", ИмяОперацииЗакрытияМесяца);

	// Если данную операцию необходимо выполнять по структурному подразделению.
	Если СписокОперацийПоОрганизации.НайтиПоЗначению(ВидОперации) = Неопределено Тогда
		
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст, 
			"&УсловиеНаСтруктурноеПодразделение", 
			"ЗакрытиеМесяца.СтруктурноеПодразделение = &СтруктурноеПодразделение"
		);
		
	КонецЕсли;

	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("УсловиеНаСтруктурноеПодразделение", Истина);
	Запрос.УстановитьПараметр("ДатаЗакрытияНачало", НачалоМесяца(Объект.ПериодРегистрации));			
	Запрос.УстановитьПараметр("ДатаЗакрытияКонец", КонецМесяца(Объект.ПериодРегистрации));
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		СсылкаЗакрытиеМесяца = Неопределено;	
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СсылкаЗакрытиеМесяца = Выборка.Ссылка;	
	КонецЕсли;
	
	Возврат СсылкаЗакрытиеМесяца;
	
КонецФункции

&НаСервере
Процедура ДокументЗакрытиеМесяца_УдалитьОшибкиКомментарииПоВидуОперации(ОбъектЗакрытияМесяца, Знач ВидОперации)
		
	ПараметрыОтбора = Новый Структура("ВидРегламентнойОперации", ВидОперации);
	МассивНайденныхСтрок = ОбъектЗакрытияМесяца.Ошибки.НайтиСтроки(ПараметрыОтбора);
	
	Пока МассивНайденныхСтрок.Количество() <> 0 Цикл
		СтрокаТаблицыОшибки = МассивНайденныхСтрок[0];
		МассивНайденныхСтрок.Удалить(0);
		ОбъектЗакрытияМесяца.Ошибки.Удалить(СтрокаТаблицыОшибки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДокументЗакрытиеМесяца_КоличествоПомеченныхОпераций(Знач ОбъектЗакрытиеМесяца)
	
	КоличествоПомеченныхОпераций = 0;
	
	Для Каждого СтрокаТаблицыОпераций Из ТаблицаОпераций Цикл
		
		ИмяОперацииЗакрытияМесяца = СоответствиеСсылкиИменаВидыРегламентныхОпераций[СтрокаТаблицыОпераций.ВидОперации];
		
		Если ОбъектЗакрытиеМесяца[ИмяОперацииЗакрытияМесяца] = Истина Тогда
			КоличествоПомеченныхОпераций = КоличествоПомеченныхОпераций + 1 ;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоличествоПомеченныхОпераций;
	
КонецФункции

&НаСервере
Функция СоздатьИлиПолучитьОбъектДокументаЗакрытиеМесяца(Знач ВидОперации, Знач СсылкаЗакрытияМесяца)
	
	ОбъектЗакрытиеМесяца = Неопределено;
	
	Если СсылкаЗакрытияМесяца <> Неопределено Тогда
		
		ОбъектЗакрытиеМесяца = СсылкаЗакрытияМесяца.ПолучитьОбъект();	
		
	Иначе
		
		ОбъектЗакрытиеМесяца = Документы.ЗакрытиеМесяца.СоздатьДокумент();
		
		ОбъектЗакрытиеМесяца.Комментарий = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(НСтр("ru = '[ВидОперации] за [Месяц]'"), Новый Структура("ВидОперации, Месяц", Строка(ВидОперации), МесяцНачисленияСтрокой));
		
		ОбъектЗакрытиеМесяца.Дата = КонецМесяца(Объект.ПериодРегистрации);
		ОбъектЗакрытиеМесяца.Организация = Объект.Организация;
		
		Если СписокОперацийПоОрганизации.НайтиПоЗначению(ВидОперации) = Неопределено Тогда
			ОбъектЗакрытиеМесяца.СтруктурноеПодразделение = Объект.СтруктурноеПодразделение;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбъектЗакрытиеМесяца;
	
КонецФункции

// Отменяет проведение документа СсылкаЗакрытияМесяца, если в документе один вид операции.
// Устанавливает ВидОперации в Ложь и перепроводит документ, если в документе несколько видов операций. 
//
// Параметры:
//  СсылкаЗакрытияМесяца - ДокументСсылка.ЗакрытиеМесяца - Документ, над которым будет выполнено действие.
//  ВидОперации - ПеречислениеСсылка.ВидыРегламентныхОпераций - Вид операции, который необходимо отменить.
//
&НаСервере
Процедура ДокументЗакрытиеМесяца_ОтменитьОперацию(Знач СсылкаЗакрытияМесяца, Знач ВидОперации) 
	
	Если СсылкаЗакрытияМесяца = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектЗакрытияМесяца = СсылкаЗакрытияМесяца.ПолучитьОбъект();		
	ИмяОперацииЗакрытияМесяца = СоответствиеСсылкиИменаВидыРегламентныхОпераций[ВидОперации];
	
	Если ОбъектЗакрытияМесяца[ИмяОперацииЗакрытияМесяца] Тогда
		
		ДокументЗакрытиеМесяца_УдалитьОшибкиКомментарииПоВидуОперации(ОбъектЗакрытияМесяца, ВидОперации);	
		КоличествоПомеченныхОпераций = ДокументЗакрытиеМесяца_КоличествоПомеченныхОпераций(ОбъектЗакрытияМесяца);
		
		Если КоличествоПомеченныхОпераций = 1 Тогда
			
			ОбъектЗакрытияМесяца.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
			ОбъектЗакрытияМесяца.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			
		ИначеЕсли КоличествоПомеченныхОпераций > 1 Тогда
			
			Если ОбъектЗакрытияМесяца.Ошибки.Количество() = 0 И ОбъектЗакрытияМесяца.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСошибками Тогда
				ОбъектЗакрытияМесяца.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено;
			КонецЕсли;
			
			ОбъектЗакрытияМесяца[ИмяОперацииЗакрытияМесяца] = Ложь;
			
			Попытка
				ОбъектЗакрытияМесяца.Записать();
			Исключение
				
				ТекстСообщения = НСтр("ru = 'Не удалось отменить операцию ""[ВидОперации]"" у документа: ""[ЗакрытиеМесяца]"".'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ВидОперации]", ВидОперации);				
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЗакрытиеМесяца]", ОбъектЗакрытияМесяца.Ссылка);
				Сообщить(ТекстСообщения);
				
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ЗаписатьОшибкуВЖурналаРегистрации(ИнформацияОбОшибке);
								
			КонецПопытки;		
			
			ОбъектЗакрытияМесяца.ОтменитьОперацию(ВидОперации);
			
		КонецЕсли;
				
	КонецЕсли;
	
	ТаблицаОпераций_Заполнить();	
	
КонецПроцедуры

&НаСервере
Процедура ДокументЗакрытиеМесяца_ОтменитьВсеОперации() 
	
	НачатьТранзакцию();
	
	Попытка
		
		Для Каждого СтрокаТаблицыОперации Из ТаблицаОпераций Цикл
			
			Если РегламентнаяОперацияВыполнена(СтрокаТаблицыОперации.Состояние) Тогда
				
				СсылкаЗакрытиеМесяца = НайтиДокументЗакрытиеМесяца(СтрокаТаблицыОперации.ВидОперации);
				ДокументЗакрытиеМесяца_ОтменитьОперацию(СсылкаЗакрытиеМесяца, СтрокаТаблицыОперации.ВидОперации);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		Сообщить(НСтр("ru = 'Не удалось отменить закрытие месяца.'"));
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписатьОшибкуВЖурналаРегистрации(ИнформацияОбОшибке);
		
	КонецПопытки;
	
	ТаблицаОпераций_Заполнить();
	
КонецПроцедуры

&НаСервере
Процедура ДокументЗакрытиеМесяца_ОтменитьВсеОперацииПослеВыбранной(Знач ВидОперацииПослеКоторойНеобходимоОтменить) 
	
	НачатьТранзакцию();
	
	Попытка
		
		ПараметрыПоиска = Новый Структура("ВидОперации", ВидОперацииПослеКоторойНеобходимоОтменить);
		МассивСтрокТаблицыОпераций = ТаблицаОпераций.НайтиСтроки(ПараметрыПоиска);
		СтрокаПослеКоторойНеобходимоОтменить = МассивСтрокТаблицыОпераций[0];
		ИндексСтрокиПослеКоторойНеобходимоОтменить = ТаблицаОпераций.Индекс(СтрокаПослеКоторойНеобходимоОтменить);
		ВГраницаТаблицаОпераций = ТаблицаОпераций.Количество() - 1;
		
		Для ИндесСтроки = ИндексСтрокиПослеКоторойНеобходимоОтменить + 1 По ВГраницаТаблицаОпераций Цикл
			
			СтрокаТаблицыОперации = ТаблицаОпераций.Получить(ИндесСтроки);
			
			Если РегламентнаяОперацияВыполнена(СтрокаТаблицыОперации.Состояние) Тогда
				
				СсылкаЗакрытиеМесяца = НайтиДокументЗакрытиеМесяца(СтрокаТаблицыОперации.ВидОперации);
				ДокументЗакрытиеМесяца_ОтменитьОперацию(СсылкаЗакрытиеМесяца, СтрокаТаблицыОперации.ВидОперации);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		Сообщить(НСтр("ru = 'Не удалось отменить регламентные операции закрытия месяца.'"));
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписатьОшибкуВЖурналаРегистрации(ИнформацияОбОшибке);
		
	КонецПопытки;
	
	ТаблицаОпераций_Заполнить();
	
КонецПроцедуры


#КонецОбласти

#Область ПрочиеСлужебныеПроцедуры

&НаСервере
Процедура ЗаписатьОшибкуВЖурналаРегистрации(ИнформацияОбОшибке)
	
	ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Закрытие месяца'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки); 
	
КонецПроцедуры

&НаСервере
Процедура МесяцИлиСтруктурнаяЕдиницаПриИзменении()
		
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ВедениеУчетаВременныхРазницБалансовымМетодом = УчетнаяПолитикаСервер.ВедетсяУчетВременныхРазницБалансовымМетодом(Объект.Организация, Объект.ПериодРегистрации);
	Иначе 
		УстановитьДоступность(Объект.Организация, Объект.ПериодРегистрации, ЭтаФорма, Ложь); // Без выбора организации форма в режиме ТолькоПросмотр.
	КонецЕсли;
	
	ТаблицаОпераций_Заполнить();	
	
	УстановитьДоступность(Объект.Организация, Объект.ПериодРегистрации, ЭтаФорма);
	
	ОбновитьТаблицуКурсыВалютПоДокументуЗакрытиеМесяца();	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитСоответствиеСсылкиИменаВидыРегламентныхОпераций()
	
	Соответствие = Новый Соответствие;
	
	Для Каждого ЗначенияПеречисления Из Метаданные.Перечисления.ВидыРегламентныхОпераций.ЗначенияПеречисления Цикл
		Имя = ЗначенияПеречисления.Имя;
		Ссылка = Перечисления.ВидыРегламентныхОпераций[Имя];
		Соответствие.Вставить(Ссылка, Имя);
	КонецЦикла;
	
	СоответствиеСсылкиИменаВидыРегламентныхОпераций = Новый ФиксированноеСоответствие(Соответствие);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РегламентнаяОперацияВыполнена(Знач Состояние)
	
	Если Состояние = Состояние_ВыполненоУспешно_РучнаяКорректировка() 
		ИЛИ Состояние = Состояние_ВыполненоУспешно() 
		ИЛИ Состояние = Состояние_ВыполненоСОшибками() Тогда
		
		Выполнена = Истина;
		
	Иначе
		
		Выполнена = Ложь;
		
	КонецЕсли;
	
	Возврат Выполнена;
	
КонецФункции

&НаСервере
Функция АдресТаблицыОпераций()
	
	ТабЗначОперации = РеквизитФормыВЗначение("ТаблицаОпераций");
	АдресТаблицыОпераций = ПоместитьВоВременноеХранилище(ТабЗначОперации, УникальныйИдентификатор);
	
	Возврат АдресТаблицыОпераций;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьОтчетОбОшибкахИКомментариях(Знач ОтчетОбОшибках)
	
	ТабДок = ТабДокОтчетОбОшибкахИКомментариях(ОтчетОбОшибках);
	
	Если ТабДок <> Неопределено Тогда
		
		ПараметрыПечати = ОбщегоНазначенияБККлиент.ПустыеПараметрыПечати();
		ПараметрыПечати.ТабличныйДокумент = ТабДок;
		ПараметрыПечати.ЗаголовокФормы = НСтр("ru = 'Отчет об ошибках и комментариях'");
		ОбщегоНазначенияБККлиент.ОткрытьФормуПечати(ПараметрыПечати);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТабДокОтчетОбОшибкахИКомментариях(Знач Ошибки)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	Макет               = Обработки.ЗакрытиеМесяца.ПолучитьМакет("ОтчетОбОшибках");
	ОбластьШапка     	= Макет.ПолучитьОбласть("Заголовок");
	ОбластьГруппа    	= Макет.ПолучитьОбласть("ГруппаОшибок");
	ОбластьОшибка    	= Макет.ПолучитьОбласть("Ошибка");
	ОбластьШапкаОшибки  = Макет.ПолучитьОбласть("ШапкаОшибки");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаЗакрытияНачало", НачалоМесяца(Объект.ПериодРегистрации));
	Запрос.УстановитьПараметр("ДатаЗакрытияКонец", КонецМесяца(Объект.ПериодРегистрации));
	
	Если Ошибки Тогда
		Запрос.УстановитьПараметр("ЭтоКомментарий", Ложь);
	Иначе
		Запрос.УстановитьПараметр("ЭтоКомментарий", Истина);
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегламентнаяОперацияОшибки.НомерСтроки КАК НомерОшибки,
	|	РегламентнаяОперацияОшибки.Описание КАК ОписаниеОшибки,
	|	РегламентнаяОперацияОшибки.ВидРегламентнойОперации КАК ВидОперации,
	|	РегламентнаяОперацияОшибки.Ссылка КАК РегОперация
	|ИЗ
	|	Документ.ЗакрытиеМесяца.Ошибки КАК РегламентнаяОперацияОшибки
	|ГДЕ
	|	РегламентнаяОперацияОшибки.Ссылка.Дата МЕЖДУ &ДатаЗакрытияНачало И &ДатаЗакрытияКонец
	|	И РегламентнаяОперацияОшибки.Комментарий = &ЭтоКомментарий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерОшибки";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Если Ошибки Тогда
			ТекстСообщения = НСтр("ru = 'Ошибок при выполнении закрытия месяца не обнаружено.'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Комментариев при выполнении закрытия месяца не обнаружено.'");
		КонецЕсли;
		
		Сообщить(ТекстСообщения);
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	// Заполнить шапку
	СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(Объект.Организация, КонецМесяца(Объект.ПериодРегистрации));
	НазваниеОрганизации = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	Если ЗначениеЗаполнено(Объект.СтруктурноеПодразделение) Тогда
		НазваниеОрганизации = НазваниеОрганизации + ": " + Объект.СтруктурноеПодразделение.Наименование;
	КонецЕсли;
	
	ДатаСоставления = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
	Если Ошибки Тогда 
		ОбластьШапка.Параметры.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отчет об ошибках закрытия месяца за %1'"),ДатаСоставления);
	Иначе
		ОбластьШапка.Параметры.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отчет по комментариям закрытия месяца за %1'"), ДатаСоставления);
	КонецЕсли; 		

	ОбластьШапка.Параметры.НазваниеОрганизации = НазваниеОрганизации;	
	ДокументРезультат.Вывести(ОбластьШапка);
	                	
	Выборка = Результат.Выбрать();
	ВидОперации = Неопределено;
	НомерОшибки = 1;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ВидОперации <> ВидОперации Тогда			
			ОбластьШапкаОшибки.Параметры.НазваниеОтчета  = Выборка.ВидОперации;			
			ОбластьШапкаОшибки.Параметры.РегОперация    = Выборка.РегОперация;
			НомерОшибки = 1;
			ДокументРезультат.Вывести(ОбластьШапкаОшибки);
		КонецЕсли;
		
		ОбластьОшибка.Параметры.НомерОшибки    = НомерОшибки + ".";
		ОбластьОшибка.Параметры.ОписаниеОшибки = Выборка.ОписаниеОшибки;
		ОбластьОшибка.Параметры.РегОперация    = Выборка.РегОперация;

		ДокументРезультат.Вывести(ОбластьОшибка);
		ВидОперации = Выборка.ВидОперации;
		НомерОшибки = НомерОшибки + 1;
		
	КонецЦикла;
	
	// Зафиксируем заголовок отчета
	ДокументРезультат.ФиксацияСверху = 7;
	
	// Первую колонку не печатаем
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1, 2, ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы);
	
	// Присвоим имя для сохранения параметров печати табличного документа
	ДокументРезультат.ИмяПараметровПечати = "Отчет об ошибках рег.операции";
	
	ДокументРезультат.ТолькоПросмотр = Истина;
	ДокументРезультат.Защита = Истина;
	ДокументРезультат.ОтображатьСетку = Ложь;
	ДокументРезультат.ОтображатьЗаголовки = Ложь;
		
	Возврат ДокументРезультат;
	
КонецФункции

&НаСервере
Функция ТабДокВыполненныеОперации()
	
	//////////////////////////////////////////////////////////////////////////////
	// Получить список документов "Закрытие месяца".
	
	ЗапросПоДокументам = Новый Запрос;   	
	
	ПризнакПервойСтроки = Истина;
	
	Для Каждого СтрокаТаблицы Из ТаблицаОпераций Цикл
		
		Если СтрокаТаблицы.Состояние = Состояние_НеВыполнено_НеТребуется() Тогда
			Продолжить;
		КонецЕсли;
				
		ИмяОперацииЗакрытияМесяца = СоответствиеСсылкиИменаВидыРегламентныхОпераций[СтрокаТаблицы.ВидОперации];
		
		Если НЕ ПризнакПервойСтроки Тогда
			ЗапросПоДокументам.Текст = ЗапросПоДокументам.Текст +  "	
			| ОБЪЕДИНИТЬ ВСЕ ";		
		КонецЕсли;	
		
		ЗапросПоДокументам.Текст = ЗапросПоДокументам.Текст + "
		|ВЫБРАТЬ
		|	Значение(Перечисление.ВидыРегламентныхОпераций." + ИмяОперацииЗакрытияМесяца + ") КАК РегОперация,
		|	РегламентнаяОперация.Ссылка КАК ДокументСсылка,
		|	РегламентнаяОперация.Представление КАК ДокументПредставление
		|ИЗ
		|	Документ.ЗакрытиеМесяца КАК РегламентнаяОперация
		|ГДЕ
		|	РегламентнаяОперация.Дата МЕЖДУ &ДатаЗакрытияНачало И &ДатаЗакрытияКонец
		|				И РегламентнаяОперация." + ИмяОперацииЗакрытияМесяца + "
		|				И РегламентнаяОперация.Организация = &Организация		
		|				И РегламентнаяОперация.Проведен 	";
		
		Если СписокОперацийПоОрганизации.НайтиПоЗначению(СтрокаТаблицы.ВидОперации) = Неопределено Тогда
			ЗапросПоДокументам.Текст = ЗапросПоДокументам.Текст + "
			|				И РегламентнаяОперация.СтруктурноеПодразделение = &СтруктурноеПодразделение ";
		КонецЕсли;
		
		ПризнакПервойСтроки = Ложь;
		
	КонецЦикла;
	
	ЗапросПоДокументам.Текст = ЗапросПоДокументам.Текст + "	
	|ИТОГИ ПО
	|	РегОперация";
	
	ЗапросПоДокументам.УстановитьПараметр("Организация", 				Объект.Организация);
	ЗапросПоДокументам.УстановитьПараметр("СтруктурноеПодразделение", 	Объект.СтруктурноеПодразделение);
	ЗапросПоДокументам.УстановитьПараметр("ДатаЗакрытияНачало",			НачалоМесяца(Объект.ПериодРегистрации));				
	ЗапросПоДокументам.УстановитьПараметр("ДатаЗакрытияКонец",			КонецМесяца(Объект.ПериодРегистрации));
	
	РезультатЗапросаПоДокументам = ЗапросПоДокументам.Выполнить();
	ВыборкаЗапросаПоДокументам = РезультатЗапросаПоДокументам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Отчет_о_выполении_операций";
	
	Макет = Обработки.ЗакрытиеМесяца.ПолучитьМакет("ВыполненныеОперации");
	ОбластьМакета       		= Макет.ПолучитьОбласть("Заголовок");
	ОбластьСостояние    		= Макет.ПолучитьОбласть("Состояние");
	ОбластьМакетаОперация 		= Макет.ПолучитьОбласть("Операция");
	ОбластьДетальныхДокументов 	= Макет.ПолучитьОбласть("Документ");
	
	СведенияОбОрганизации = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(Объект.Организация, Объект.ПериодРегистрации);
	НазваниеОрганизации  = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		НазваниеОрганизации = НазваниеОрганизации + ": "  + Объект.СтруктурноеПодразделение.Наименование;
	КонецЕсли;
	
	ОбластьМакета.Параметры.Организация    = НазваниеОрганизации;
	ОбластьМакета.Параметры.Заголовок         = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Закрытие месяца за %1 г.'") , Формат(Объект.ПериодРегистрации, "ДФ='MMММ yyyy'"));
	ОбластьМакета.Параметры.ТекстСостояние = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ' на %1'"), Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy"));
	ТабДокумент.Вывести(ОбластьМакета);
	
	//////////////////////////////////////////////////////////////////////////////
	// Сформировать отчет
	
	МассивСостояний = Новый Массив;
	МассивСостояний.Добавить(Состояние_ВыполненоУспешно());
	МассивСостояний.Добавить(Состояние_ВыполненоСОшибками());
	МассивСостояний.Добавить(Состояние_НеВыполнено_Требуется());
		
	Для Каждого Состояние Из МассивСостояний Цикл
		
		Запрос = Новый Запрос;
		
		Если Состояние = Состояние_ВыполненоУспешно() Тогда 
			
			ТекстСостояние = НСтр("ru = 'Список выполненных операций'");
			
			Состояния = Новый Массив;
			Состояния.Добавить(Состояние_ВыполненоУспешно());
			Состояния.Добавить(Состояние_ВыполненоУспешно_РучнаяКорректировка());
			
		ИначеЕсли Состояние = Состояние_ВыполненоСОшибками() Тогда
			
			ТекстСостояние = НСтр("ru = 'Список операций, выполненных с ошибками'");
			Состояния = Состояние;
			
		ИначеЕсли Состояние = Состояние_НеВыполнено_Требуется() Тогда
			
			ТекстСостояние = НСтр("ru = 'Список невыполненных операций'");
			Состояния = Состояние;
			
		КонецЕсли;
		
		КоличествоОпераций = ТаблицаОпераций.НайтиСтроки(Новый Структура("Состояние", Состояние)).Количество();
		
		ОбластьСостояние.Параметры.Состояние = ТекстСостояние;
		ТабДокумент.Вывести(ОбластьСостояние);
		
		Если КоличествоОпераций = 0 Тогда
			ОбластьМакетаОперация.Параметры.Операция = НСтр("ru = 'Операций нет'");
			ТабДокумент.Вывести(ОбластьМакетаОперация);
			Продолжить;
		КонецЕсли;
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаОпераций.Состояние,
		|	ТаблицаОпераций.ВидОперации,
		|	ТаблицаОпераций.Организация
		|ПОМЕСТИТЬ ТаблицаОпераций
		|ИЗ
		|	&ТаблицаОпераций КАК ТаблицаОпераций
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОпераций.Организация КАК Поле1,
		|	ТаблицаОпераций.ВидОперации КАК Поле2,
		|	ВЫБОР
		|		КОГДА ТаблицаОпераций.Состояние = &Состояние_НеВыполнено_Требуется
		|			ТОГДА &ОперацияНеВыполнена
		|	КОНЕЦ КАК Поле3
		|ИЗ
		|	ТаблицаОпераций КАК ТаблицаОпераций
		|ГДЕ
		|	ТаблицаОпераций.Состояние В(&Состояние)";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КАК Поле2", "КАК Поле1");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация КАК Поле1", "Организация КАК Поле2");
		ПолеОперации = "Поле1";
		Запрос.Текст = Запрос.Текст + "
		|ИТОГИ ПО
		|	Поле1,
		|	Поле2,
		|	Поле3";
		
		Запрос.УстановитьПараметр("ТаблицаОпераций", РеквизитФормыВЗначение("ТаблицаОпераций"));
		Запрос.УстановитьПараметр("Состояние", Состояния);
		Запрос.УстановитьПараметр("Состояние_НеВыполнено_Требуется", Состояние_НеВыполнено_Требуется());
		Запрос.УстановитьПараметр("ОперацияНеВыполнена", НСтр("ru = 'Операция не выполнена'"));
		
		ВыборкаГруппировка0 = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		НомерОперации = 1;
				
		Пока ВыборкаГруппировка0.Следующий() Цикл			
			
			ОбластьМакетаОперация.Параметры.Операция = "" + НомерОперации + ". " + ВыборкаГруппировка0.Поле1;
			
			ТабДокумент.Вывести(ОбластьМакетаОперация, 0);	
			
			ВыборкаЗапросаПоДокументам.Сбросить();
			Пока ВыборкаЗапросаПоДокументам.НайтиСледующий(Новый Структура("РегОперация", ВыборкаГруппировка0[ПолеОперации])) Цикл
				
				ДетальнаяВыборкаЗапросаПоДокументам = ВыборкаЗапросаПоДокументам.Выбрать();
				
				Пока ДетальнаяВыборкаЗапросаПоДокументам.Следующий() Цикл
					ОбластьДетальныхДокументов.Параметры.Заполнить(ДетальнаяВыборкаЗапросаПоДокументам);
					ТабДокумент.Вывести(ОбластьДетальныхДокументов, 1);
				КонецЦикла;	
				
			КонецЦикла;	
			
			НомерОперации = НомерОперации + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТабДокумент.ОтображатьСетку = Ложь;
	ТабДокумент.ТолькоПросмотр = Истина;
	ТабДокумент.ОтображатьЗаголовки = Ложь;
	
	Возврат ТабДокумент;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуИменаОтчетовВидыОпераций()
	
	ИменаОтчетовВидыОпераций.Очистить();
	
	СтрокаТаблицы = ИменаОтчетовВидыОпераций.Добавить();
	СтрокаТаблицы.ИмяОтчета = "СправкаРасчетСписаниеРБП";
	СтрокаТаблицы.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыРегламентныхОпераций.СписаниеРБПБУ");
	
	СтрокаТаблицы = ИменаОтчетовВидыОпераций.Добавить();
	СтрокаТаблицы.ИмяОтчета = "СправкаРасчетПереоценкаВалютныхСредств";
	СтрокаТаблицы.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыРегламентныхОпераций.ПереоценкаВалютныхСредствБУ");
	
	СтрокаТаблицы = ИменаОтчетовВидыОпераций.Добавить();
	СтрокаТаблицы.ИмяОтчета = "СправкаРасчетСебестоимостиПродукцииИУслуг";
	СтрокаТаблицы.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииБУ");
	
	СтрокаТаблицы = ИменаОтчетовВидыОпераций.Добавить();
	СтрокаТаблицы.ИмяОтчета = "СправкаРасчетРаспределенияКосвенныхРасходов";
	СтрокаТаблицы.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииБУ");
	
	СтрокаТаблицы = ИменаОтчетовВидыОпераций.Добавить();
	СтрокаТаблицы.ИмяОтчета = "СправкаРасчетКалькуляцияСебестоимости";
	СтрокаТаблицы.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыРегламентныхОпераций.РасчетСтоимостиПродукцииБУ");
	
	СтрокаТаблицы = ИменаОтчетовВидыОпераций.Добавить();
	СтрокаТаблицы.ИмяОтчета = "СправкаРасчетВычетаПоРеализованнымТоварам";
	СтрокаТаблицы.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыРегламентныхОпераций.РасчетВычетаПоРеализованнымТоварам");
	
	СтрокаТаблицы = ИменаОтчетовВидыОпераций.Добавить();
	СтрокаТаблицы.ИмяОтчета = "СправкаРасчетВычетовПоНалогам";
	СтрокаТаблицы.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыРегламентныхОпераций.РасчетВычетовПоНалогам");
	
КонецПроцедуры

#КонецОбласти

#Область КурсыВалют

&НаСервере
Процедура ОбновитьТаблицуКурсыВалютПоДокументуЗакрытиеМесяца()
	
	Объект.КурсыВалют.Очистить();
	
	СсылкаЗакрытиеМесяца = НайтиДокументЗакрытиеМесяца(Перечисления.ВидыРегламентныхОпераций.ПереоценкаВалютныхСредствБУ);	
	
	Если СсылкаЗакрытиеМесяца <> Неопределено Тогда
		
		Для Каждого СтрокаДокумента Из СсылкаЗакрытиеМесяца.КурсыВалют Цикл
			СтрокаКурсыВалют = Объект.КурсыВалют.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКурсыВалют, СтрокаДокумента, "Валюта,Курс,Кратность");	
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НоваяТаблицаЗначенийКурсыВалют()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ТаблицаЗначенийКурсыВалют = ОбработкаОбъект.КурсыВалют.Выгрузить(, "Валюта,Курс,Кратность");
	
	Возврат ТаблицаЗначенийКурсыВалют;
	
КонецФункции 

&НаСервере
Функция АдресТаблицыЗначенийКурсыВалют()
	
	ТабЗначКурсыВалют = НоваяТаблицаЗначенийКурсыВалют();
	Адрес = ПоместитьВоВременноеХранилище(ТабЗначКурсыВалют, ЭтаФорма.УникальныйИдентификатор);
	
	Возврат Адрес;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияФормыНастроек(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		ПослеЗакрытияФормыНастроекНаСервере(РезультатЗакрытия, ДополнительныеПараметры);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияФормыНастроекНаСервере(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ТабЗначКурсыВалют = ПолучитьИзВременногоХранилища(РезультатЗакрытия.АдресТаблицыЗначенийКурсыВалют);
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.КурсыВалют.Загрузить(ТабЗначКурсыВалют);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыФоновогоРежима

&НаКлиенте
Процедура ВыполнитьЗакрытиеМесяцаНаКлиенте(Знач ПоследняяОперация = Неопределено)

	Результат = ВыполнитьЗакрытиеМесяцаНаСервере(ПоследняяОперация);
	
	Если НЕ Результат.ЗаданиеВыполнено  И ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
	Иначе
		Если Результат.Свойство("СтруктураДанныхКлиента") Тогда
			ОбработатьВыполнениеОперацииНаКлиенте(Результат.СтруктураДанныхКлиента);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьЗакрытиеМесяцаНаСервере(ПоследняяОперация)
	
	// Возможно, что фоновое задание было запущено раньше, 
	// пользователь дал команду его отменить, однако задание не отменено.
	// В таком случае не следует запускать задание повторно - следует дождаться его выполнения.
	// Мы можем отследить ситуацию только, если все это происходит в одной форме.
	// Потому что подсистема ДлительныеОперации не умеет устанавливать ключ фонового задания.
	Если ЗаданиеЕщеВыполняется(ИдентификаторЗадания) Тогда
		// Надо ждать
		Результат = Новый Структура;
		Результат.Вставить("АдресХранилища",       АдресХранилища);
		Результат.Вставить("ЗаданиеВыполнено",     Ложь);
		Результат.Вставить("ИдентификаторЗадания", ИдентификаторЗадания);
		
	Иначе
	
		МассивСтруктурЗакрытиеМесяца = Новый Массив;
		
		// Признак того, что выполнение дошло до последней операции.
		// Необходимо для выполнения операций до указанной.
		ВыполненаПоследняяОперация = Ложь;
		
		ТаблицаОпераций_ВГраница = ТаблицаОпераций.Количество() - 1;
		
		Для ИндексТекущейСтрокиТаблицыОпераций = 0 По ТаблицаОпераций_ВГраница Цикл
			
			СтрокаТаблицыОпераций = ТаблицаОпераций.Получить(ИндексТекущейСтрокиТаблицыОпераций);
			
			Если ВыполненаПоследняяОперация Тогда 
				Прервать;
			КонецЕсли;
			
			Если СтрокаТаблицыОпераций.Состояние = Состояние_НеВыполнено_НеТребуется() Тогда
				Продолжить;
			КонецЕсли;
			
			СсылкаЗакрытиеМесяца = НайтиДокументЗакрытиеМесяца(СтрокаТаблицыОпераций.ВидОперации);
			ИмяОперацииЗакрытияМесяца = СоответствиеСсылкиИменаВидыРегламентныхОпераций[СтрокаТаблицыОпераций.ВидОперации];
			
			Если СписокОперацийПоОрганизации.НайтиПоЗначению(СтрокаТаблицыОпераций.ВидОперации) = Неопределено Тогда
				СтруктурноеПодразделение = Объект.СтруктурноеПодразделение;
			Иначе
				СтруктурноеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			КонецЕсли;

			СтруктураЗакрытиеМесяца = Новый Структура;
			СтруктураЗакрытиеМесяца.Вставить("ВидОперации", СтрокаТаблицыОпераций.ВидОперации);
			СтруктураЗакрытиеМесяца.Вставить("СсылкаЗакрытиеМесяца", СсылкаЗакрытиеМесяца);
			СтруктураЗакрытиеМесяца.Вставить("МесяцНачисленияСтрокой", МесяцНачисленияСтрокой);
			СтруктураЗакрытиеМесяца.Вставить("ИмяОперацииЗакрытияМесяца", ИмяОперацииЗакрытияМесяца);
			СтруктураЗакрытиеМесяца.Вставить("Дата", КонецМесяца(Объект.ПериодРегистрации));
			СтруктураЗакрытиеМесяца.Вставить("Организация", Объект.Организация);
			СтруктураЗакрытиеМесяца.Вставить("СтруктурноеПодразделение", СтруктурноеПодразделение);
			СтруктураЗакрытиеМесяца.Вставить("Группа", СтрокаТаблицыОпераций.Группа);
			СтруктураЗакрытиеМесяца.Вставить("КурсыВалют", НоваяТаблицаЗначенийКурсыВалют());
			
			МассивСтруктурЗакрытиеМесяца.Добавить(СтруктураЗакрытиеМесяца);
			
			Если СтрокаТаблицыОпераций.ВидОперации = ПоследняяОперация Тогда
				ВыполненаПоследняяОперация = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивСтруктурЗакрытиеМесяца.Количество() > 0 Тогда
		
			// Запускаем выполнение в фоне
			
			НаименованиеЗадания = НСтр("ru = 'Помощник закрытия периода'");
			
			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("МассивРегОпераций", МассивСтруктурЗакрытиеМесяца);
			
			Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
				УникальныйИдентификатор,
				"Документы.ЗакрытиеМесяца.ПроведениеСпискаДокументовВФоне", 
				СтруктураПараметров, 
				НаименованиеЗадания);
				
			АдресХранилища= Результат.АдресХранилища;
			ИдентификаторЗадания = Результат.ИдентификаторЗадания;
			
		Иначе
			
			Результат = Новый Структура;
			Результат.Вставить("АдресХранилища", АдресХранилища);
			Результат.Вставить("ЗаданиеВыполнено", Истина);
			Результат.Вставить("ИдентификаторЗадания", ИдентификаторЗадания);
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		Результат.Вставить("СтруктураДанныхКлиента", ОбработатьВыполнениеОперации());
	КонецЕсли;
		
	Возврат Результат;
		
КонецФункции

&НаКлиенте
Процедура ОбработатьВыполнениеОперацииНаКлиенте(СтруктураДанных)
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("МассивНепроведенных") Тогда
		Если СтруктураДанных.МассивНепроведенных.Количество() = 1 Тогда
			ТекстПредупреждения = НСтр("ru = 'Не удалось провести ""%1"".
                                       |Подробности смотрите в Журнале регистрации.'");
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтруктураДанных.МассивНепроведенных[0]);
			ПоказатьПредупреждение( , ТекстПредупреждения);
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Не удалось провести:'");
			Для Каждого НепроведенныйДокумент Из СтруктураДанных.МассивНепроведенных Цикл
				ТекстПредупреждения = ТекстПредупреждения + Символы.ПС + НепроведенныйДокумент;
			КонецЦикла;
			ТекстПредупреждения = СокрЛП(ТекстПредупреждения) + Символы.ПС + НСтр("ru = 'Подробности смотрите в Журнале регистрации.'");
			ПоказатьПредупреждение( , ТекстПредупреждения);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("МассивРегОпераций") И СтруктураДанных.МассивРегОпераций.Количество() > 0 Тогда
		СформироватьИсториюИПоказатьОповещениюПользователю(
			СтруктураДанных.МассивРегОпераций,
			НСтр("ru = 'Изменение:'"),
			НСтр("ru = 'Изменение (%1)'")); // Параметр - количество документов
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьВыполнениеОперации()
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияБК.ПолучитьИзДлительнойОперацииСообщенияПользователю(ИдентификаторЗадания, УникальныйИдентификатор);
	КонецЕсли;
	
	ТаблицаОпераций_Заполнить();
	
	СтруктураДанныхНаКлиенте = Новый Структура();
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ВыполненоУспешно") Тогда
		СтруктураДанныхНаКлиенте.Вставить("МассивРегОпераций", СтруктураДанных.МассивРегОпераций);
		Если СтруктураДанных.Свойство("МассивНепроведенных") Тогда
			СтруктураДанныхНаКлиенте.Вставить("МассивНепроведенных", СтруктураДанных.МассивНепроведенных);
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат(СтруктураДанных);
	
КонецФункции

&НаКлиенте
Процедура СформироватьИсториюИПоказатьОповещениюПользователю(МассивРегОпераций, ТекстОповещенияОднаОперация, ШаблонОповещенияНесколькоОпераций)
	
	КоличествоОбработанных = МассивРегОпераций.Количество();
	
	Если КоличествоОбработанных = 1 Тогда
		РегОперация = МассивРегОпераций[0];
		
		ПоказатьОповещениеПользователя(
			ТекстОповещенияОднаОперация,
			ПолучитьНавигационнуюСсылку(РегОперация), Строка(РегОперация), БиблиотекаКартинок.Информация32);
		ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(РегОперация));
	Иначе // Несколько операций
		
		Для каждого РегОперация Из МассивРегОпераций Цикл
			
			ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОповещенияНесколькоОпераций,
				КоличествоОбработанных);
			
			ПоказатьОповещениеПользователя(ТекстОповещения,, НСтр("ru = 'Закрытия месяца'"), БиблиотекаКартинок.Информация32);
			ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(РегОперация));
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ОбработатьВыполнениеОперацииНаКлиенте(ОбработатьВыполнениеОперации());
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаданиеЕщеВыполняется(ИдентификаторЗадания)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	
	Возврат Задание <> Неопределено И Задание.Состояние = СостояниеФоновогоЗадания.Активно;
	
КонецФункции

&НаКлиенте
Процедура ОбработчикКомандыВыполнитьРегламентнуюОперациюНаКлиенте(Знач ВидОперации, Знач СсылкаЗакрытияМесяца)
	
	Результат = ОбработчикКомандыВыполнитьРегламентнуюОперациюНаСервере(ВидОперации, СсылкаЗакрытияМесяца);
	
	Если НЕ Результат.ЗаданиеВыполнено  И ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
	Иначе
		Если Результат.Свойство("СтруктураДанныхКлиента") Тогда
			ОбработатьВыполнениеОперацииНаКлиенте(Результат.СтруктураДанныхКлиента);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработчикКомандыВыполнитьРегламентнуюОперациюНаСервере(ВидОперации, СсылкаЗакрытиеМесяца)
	
	Если ЗаданиеЕщеВыполняется(ИдентификаторЗадания) Тогда
		// Надо ждать
		Результат = Новый Структура;
		Результат.Вставить("АдресХранилища",       АдресХранилища);
		Результат.Вставить("ЗаданиеВыполнено",     Ложь);
		Результат.Вставить("ИдентификаторЗадания", ИдентификаторЗадания);
		
	Иначе
	
		МассивСтруктурЗакрытиеМесяца = Новый Массив;
		
		ИмяОперацииЗакрытияМесяца = СоответствиеСсылкиИменаВидыРегламентныхОпераций[ВидОперации];
		
		Если СписокОперацийПоОрганизации.НайтиПоЗначению(ВидОперации) = Неопределено Тогда
			СтруктурноеПодразделение = Объект.СтруктурноеПодразделение;
		Иначе
			СтруктурноеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;

		СтруктураЗакрытиеМесяца = Новый Структура;
		СтруктураЗакрытиеМесяца.Вставить("ВидОперации", ВидОперации);
		СтруктураЗакрытиеМесяца.Вставить("СсылкаЗакрытиеМесяца", СсылкаЗакрытиеМесяца);
		СтруктураЗакрытиеМесяца.Вставить("МесяцНачисленияСтрокой", МесяцНачисленияСтрокой);
		СтруктураЗакрытиеМесяца.Вставить("ИмяОперацииЗакрытияМесяца", ИмяОперацииЗакрытияМесяца);
		СтруктураЗакрытиеМесяца.Вставить("Дата", КонецМесяца(Объект.ПериодРегистрации));
		СтруктураЗакрытиеМесяца.Вставить("Организация", Объект.Организация);
		СтруктураЗакрытиеМесяца.Вставить("СтруктурноеПодразделение", СтруктурноеПодразделение);
		СтруктураЗакрытиеМесяца.Вставить("Группа", 0);
		СтруктураЗакрытиеМесяца.Вставить("КурсыВалют", НоваяТаблицаЗначенийКурсыВалют());
		
		МассивСтруктурЗакрытиеМесяца.Добавить(СтруктураЗакрытиеМесяца);		
		// Запускаем выполнение в фоне
		
		НаименованиеЗадания = НСтр("ru = 'Помощник закрытия периода'");
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("МассивРегОпераций", МассивСтруктурЗакрытиеМесяца);
		
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Документы.ЗакрытиеМесяца.ПроведениеСпискаДокументовВФоне", 
			СтруктураПараметров, 
			НаименованиеЗадания);
		АдресХранилища       = Результат.АдресХранилища;
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		Результат.Вставить("СтруктураДанныхКлиента", ОбработатьВыполнениеОперации());
	КонецЕсли;
		
	Возврат Результат;
		
КонецФункции

#КонецОбласти

#КонецОбласти
