////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	АдресТаблицыОпераций = Параметры.АдресТаблицыОпераций;
	
	ЗаполнитьТаблицуОпераций();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <ИМЯ ТАБЛИЦЫ ФОРМЫ>

&НаКлиенте
Процедура ТаблицаОперацийПометкаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ТаблицаОпераций.ТекущиеДанные;
	ДанныеСтроки = Новый Структура("ВидОперации, Пометка");
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТаблицы);	
	ПроверитьВозможностьУстановленияФлажка(ДанныеСтроки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	Для Каждого СтрокаТаблицыОпераций Из ТаблицаОпераций Цикл
		Если НЕ СтрокаТаблицыОпераций.ТолькоПросмотр Тогда
			СтрокаТаблицыОпераций.Пометка = Истина;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	Для Каждого СтрокаТаблицыОпераций Из ТаблицаОпераций Цикл
		Если НЕ СтрокаТаблицыОпераций.ТолькоПросмотр Тогда
			СтрокаТаблицыОпераций.Пометка = Ложь;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	
	ПоместитьИзмененнуюТаблицуОперацийВоВременноеХранилище();
	ЭтаФорма.Закрыть(АдресТаблицыОпераций);	
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	ЭтаФорма.Закрыть(Неопределено);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ЗаполнитьТаблицуОпераций()
	
	ТабЗначОперации = ПолучитьИзВременногоХранилища(АдресТаблицыОпераций);	
	
	Для Каждого СтрокаТабЗначОперации Из ТабЗначОперации Цикл
		
		// ТаблицаОперацийОбщая содержит все операции.
		// ТаблицаОпераций содержит операции, доступные по функциональным опциям
		// и отображаемые на форме

		СтрокаТаблицыОперацийОбщая = ТаблицаОперацийОбщая.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыОперацийОбщая, СтрокаТабЗначОперации);
		
		Если Не СтрокаТабЗначОперации.Отображать Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТаблицыОпераций = ТаблицаОпераций.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыОпераций, СтрокаТабЗначОперации);
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицыОпераций Из ТаблицаОпераций Цикл
		
		Если СтрокаТаблицыОпераций.Состояние = Состояние_НеВыполнено_НеТребуется() Тогда
			
			СтрокаТаблицыОпераций.Пометка = Ложь;			
			
		Иначе
			
			СтрокаТаблицыОпераций.Пометка = Истина;
			
		КонецЕсли;
		
		Если СтрокаТаблицыОпераций.Состояние = Состояние_ВыполненоУспешно()
			ИЛИ СтрокаТаблицыОпераций.Состояние = Состояние_ВыполненоУспешно_РучнаяКорректировка()
			ИЛИ СтрокаТаблицыОпераций.Состояние = Состояние_ВыполненоСОшибками() Тогда
			
			СтрокаТаблицыОпераций.ТолькоПросмотр = Истина;
			
		Иначе
			
			СтрокаТаблицыОпераций.ТолькоПросмотр = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьИзмененнуюТаблицуОперацийВоВременноеХранилище()
	
	// Обновим ТаблицаОперацийОбщая значениями, установленными на форме в ТаблицаОпераций
	ТабЗначОперации    = РеквизитФормыВЗначение("ТаблицаОпераций");
	ТабЗначОперацииОбщ = РеквизитФормыВЗначение("ТаблицаОперацийОбщая");

	Для Каждого СтрокаТаблицыОпераций Из ТабЗначОперации Цикл
		СтрокаТаблицыОперацийОбщая = ТабЗначОперацииОбщ.Найти(СтрокаТаблицыОпераций.ВидОперации, "ВидОперации");
		Если СтрокаТаблицыОперацийОбщая <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыОперацийОбщая, СтрокаТаблицыОпераций);
		КонецЕсли;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ТабЗначОперацииОбщ, АдресТаблицыОпераций);
		
КонецПроцедуры

#Область Состояния

&НаКлиентеНаСервереБезКонтекста
Функция Состояние_ВыполненоУспешно()
	Возврат "ВыполненоУспешно";	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Состояние_ВыполненоУспешно_РучнаяКорректировка()
	Возврат "ВыполненоУспешно_РучнаяКорректировка";	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Состояние_ВыполненоСОшибками()
	Возврат "ВыполненоСОшибками";	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Состояние_НеВыполнено_Требуется()
	Возврат "НеВыполнено_Требуется";	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Состояние_НеВыполнено_НеТребуется()
	Возврат "НеВыполнено_НеТребуется";	
КонецФункции

&НаСервере
Процедура ПроверитьВозможностьУстановленияФлажка(СтрокаТаблицы)
	
	НеВыбранЗачетНДСКВозмещению = Ложь;
	ВыбранЗачетАвансовПоНДС = Ложь;
	
	Если СтрокаТаблицы <> Неопределено И 
		(СтрокаТаблицы.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗачетАвансовИПереплатПоНДС И СтрокаТаблицы.Пометка)
		ИЛИ (СтрокаТаблицы.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету И НЕ СтрокаТаблицы.Пометка) Тогда
		Для Каждого СтрокаТаблицыОпераций Из ТаблицаОпераций Цикл
			Если СтрокаТаблицыОпераций.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНДСКЗачету И НЕ СтрокаТаблицыОпераций.Пометка Тогда
				НеВыбранЗачетНДСКВозмещению = Истина;
			ИначеЕсли СтрокаТаблицыОпераций.ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗачетАвансовИПереплатПоНДС И СтрокаТаблицыОпераций.Пометка И НеВыбранЗачетНДСКВозмещению Тогда
				СтрокаТаблицыОпераций.Пометка = Ложь;
				ТекстСообщения = НСтр("ru = 'Зачет авансов и переплат выполняется только совместно с зачетом НДС к возмещению'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Прервать;
			КонецЕсли;
		Конеццикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
