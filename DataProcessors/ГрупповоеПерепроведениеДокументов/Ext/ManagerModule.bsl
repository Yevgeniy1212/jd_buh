#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ПерепроведениеДокументов(СтруктураПараметров, АдресХранилища) Экспорт
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", ?(СтруктураПараметров.ДатаНачала = Неопределено, '00010101', НачалоДня(СтруктураПараметров.ДатаНачала)));
	Если ЗначениеЗаполнено(СтруктураПараметров.ДатаОкончания) Тогда
		Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(СтруктураПараметров.ДатаОкончания));
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	
	ВозвращаемыеПараметры = Новый Структура("ПроведеноДокументов, НеУдалосьПровести, ВывестиИнформациюУведомлений, АдресХранилищаСОшибками, ПроведениеПрервано", 0, 0, Ложь, СтруктураПараметров.АдресХранилищаСОшибками, Ложь);  
	
	ПараметрыСообщенийПрогресса 			= НовыеПараметрыСообщенийПрогресса();
	ПараметрыСообщенийПрогресса.ИмяЭтапа 	= "ПерепроведениеДокументов";
	
	Запрос.Текст = ПолучитьТекстЗапросаПоПервичнымДокументам();
	
	// Устанавливаем отбор по организации
	ТекстУсловияПоОрганизации = ?(СтруктураПараметров.ТолькоВыбранныеОрганизации, "И Журнал.организация В (&Организация)", "");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &УсловиеОрганизации", ТекстУсловияПоОрганизации);
	
	// Устанавливаем отбор по периоду
	Если ЗначениеЗаполнено(СтруктураПараметров.ДатаОкончания) Тогда
		ТекстУсловияПериода = ?(ЗначениеЗаполнено(СтруктураПараметров.ДатаНачала), "И Журнал.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания", " И Журнал.Дата <= &ДатаОкончания");
	ИначеЕсли ЗначениеЗаполнено(СтруктураПараметров.ДатаНачала) Тогда
		ТекстУсловияПериода = " И Журнал.Дата >= &ДатаНачала";
	Иначе
		ТекстУсловияПериода = "";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &УсловиеПериода", ТекстУсловияПериода);
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	Месяц, Организация, Дата, Ссылка";
	
	ВсеДокументы = Запрос.Выполнить().Выгрузить();
	
	ВсегоДокументов = ВсеДокументы.Количество();
	
	ДатаНачала = '00010101';

	Если ЗначениеЗаполнено(СтруктураПараметров.ДатаНачала) Тогда
		ДатаНачала = НачалоДня(СтруктураПараметров.ДатаНачала);
	КонецЕсли;
	
	ДатаОкончания = '00010101';
	Если ЗначениеЗаполнено(СтруктураПараметров.ДатаОкончания) Тогда
		ДатаОкончания = КонецДня(СтруктураПараметров.ДатаОкончания);
	КонецЕсли;
	
	ТаблицаСообщений	= ПроведениеСервер.НовыеСообщенияПользователю();
	
	ПроведениеПрервано	= Ложь;
	
	Если НЕ СтруктураПараметров.ДанныеЗаблокированы Тогда
		ПроведениеПрервано = НЕ ЗаблокироватьДанныеПередПроведением(СтруктураПараметров.Организация, ТаблицаСообщений);
		
		Если ПроведениеПрервано Тогда
			ВозвращаемыеПараметры.ПроведениеПрервано = ПроведениеПрервано;
			ДобавитьСообщенияВРезультатОбработки(ТаблицаСообщений, ВозвращаемыеПараметры, ДатаНачала, ДатаОкончания);
	
			ОценкаПроизводительности.ЗакончитьЗамерВремени("Обработка ""групповое перепроведение документов""", ВремяНачала);
	
			ПоместитьВоВременноеХранилище(ВозвращаемыеПараметры, АдресХранилища);
			
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДатаПредыдущегоПерепроведения = '00010101';  	
	ТекущаяДатаПроведения  = ?(СтруктураПараметров.ДатаНачала = Неопределено, '00010101', НачалоДня(СтруктураПараметров.ДатаНачала));
	
	ТекущийМесяц = Неопределено;
	ТекущаяОрганизация = Неопределено;
	ТекущаяДатаПроведения  = Неопределено;
		
	Для Индекс = 0 По ВсегоДокументов - 1 Цикл
		
		СтрокаДокумента = ВсеДокументы[Индекс]; 
		
		Если ТекущийМесяц <> СтрокаДокумента.Месяц ИЛИ ТекущаяОрганизация <> СтрокаДокумента.Организация Тогда
			
			ТекущаяОрганизация = СтрокаДокумента.Организация;
			ТекущийМесяц = СтрокаДокумента.Месяц;
							
			ДатаОкончанияМесяца = Мин(ДатаОкончания, КонецМесяца(ТекущийМесяц));
			
			ТекущаяДатаПроведения  = СтрокаДокумента.Дата;

			// Заполним общие параметры для сообщений прогресса.
			ПараметрыСообщенийПрогресса.Месяц = ТекущийМесяц;
			ПараметрыСообщенийПрогресса.Организация   = ТекущаяОрганизация;
			ПараметрыСообщенийПрогресса.НачальноеЗначение = ТекущийМесяц;
			ПараметрыСообщенийПрогресса.КонечноеЗначение  = ДатаОкончанияМесяца;
			
			Если СтруктураПараметров.СообщатьПрогрессВыполнения Тогда
				// Сообщим, что начинаем перепроведение за новый месяц и/или по новой организации.
				СообщитьПрогресс(ПараметрыСообщенийПрогресса, НачалоДня(ТекущийМесяц) - 1);
			КонецЕсли;	
			
		КонецЕсли;	
		
		Если СтрокаДокумента.РучнаяКорректировка Тогда
			
			ТекстСообщения = НСтр(
			"ru = 'Не удалось провести документ ""%1"",
			|так как движения данного документа скорректированы вручную.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаДокумента.Ссылка);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СтрокаДокумента.Ссылка);
			ВозвращаемыеПараметры.НеУдалосьПровести = ВозвращаемыеПараметры.НеУдалосьПровести + 1;
			
			ПроведениеСервер.ЗапомнитьСообщенияПользователю(
					ТаблицаСообщений,
					СтрокаДокумента.Организация,
					ТекстСообщения,
					СтрокаДокумента.Ссылка,
					СтрокаДокумента.Дата);
			
		Иначе
			
			ДокументОбъект = СтрокаДокумента.Ссылка.ПолучитьОбъект();
			
			ДокументНеПровелся = Истина;
			
			Попытка
				Если ДокументОбъект.ПроверитьЗаполнение() Тогда  
					
					ДокументОбъект.ДополнительныеСвойства.Вставить("ГрупповоеПерепроведение", Истина);
					
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
					
					ПроведениеСервер.ЗапомнитьСообщенияПользователю(
						ТаблицаСообщений,
						СтрокаДокумента.Организация,
						"",
						СтрокаДокумента.Ссылка,
						СтрокаДокумента.Дата,
						Ложь);
					
					ДокументНеПровелся = Ложь;
					ВозвращаемыеПараметры.ПроведеноДокументов = ВозвращаемыеПараметры.ПроведеноДокументов + 1;
				КонецЕсли;
			Исключение					
			КонецПопытки;
			
			Если ДокументНеПровелся Тогда
				ТекстСообщения = НСтр("ru = 'Документ ""%1"" не проведен!'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаДокумента.Ссылка);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СтрокаДокумента.Ссылка); 
				
				ПроведениеСервер.ЗапомнитьСообщенияПользователю(
					ТаблицаСообщений,
					СтрокаДокумента.Организация,
					"",
					СтрокаДокумента.Ссылка,
					СтрокаДокумента.Дата);
				
				ВозвращаемыеПараметры.НеУдалосьПровести = ВозвращаемыеПараметры.НеУдалосьПровести + 1;
				Если СтруктураПараметров.ОстанавливатьсяПоОшибке Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		// Сообщим, если переходим к следующему дню.
		Если СтруктураПараметров.СообщатьПрогрессВыполнения 
			И ДатаПредыдущегоПерепроведения <> НачалоДня(ТекущаяДатаПроведения) Тогда

			// Сообщим, что начинаем перепроведение за новый месяц и/или по новой организации.
			СообщитьПрогресс(ПараметрыСообщенийПрогресса, ТекущаяДатаПроведения);
			ДатаПредыдущегоПерепроведения = НачалоДня(ТекущаяДатаПроведения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьСообщенияВРезультатОбработки(ТаблицаСообщений, ВозвращаемыеПараметры, ДатаНачала, ДатаОкончания);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени("Обработка ""групповое перепроведение документов""", ВремяНачала);
	
	ПоместитьВоВременноеХранилище(ВозвращаемыеПараметры, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТекстЗапросаПоПервичнымДокументам()

	ТекстЗапроса = "";
		
	Для Каждого МетаданныеДокумента Из Метаданные.Документы Цикл
		
		// У некоторых ролей нет прав на отдельные документы
		Если НЕ РольДоступна("ПолныеПрава") Тогда
			Если НЕ ПравоДоступа("Чтение", МетаданныеДокумента) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
				
		// Отсечь документы с префиксом Удалить
		Если Найти(МетаданныеДокумента.Имя, "Удалить") = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Если МетаданныеДокумента = Метаданные.Документы.РегламентированныйОтчет Тогда
			Продолжить;
		КонецЕсли;
				
		Если МетаданныеДокумента.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			
			ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ") + " 
				|	Дата КАК Дата,
				|	""" + МетаданныеДокумента.Имя + """ КАК ИмяДокумента, 
				|	""" + МетаданныеДокумента.Синоним + """ КАК СинонимДокумента, 
				|	Журнал.Ссылка КАК Ссылка, 
				|	" + ?(МетаданныеДокумента.Реквизиты.Найти("ВидОперации") <> Неопределено, "Журнал.ВидОперации", "Неопределено") + " КАК ВидОперации,
				|	" + ?(МетаданныеДокумента.Реквизиты.Найти("РучнаяКорректировка") <> Неопределено, "РучнаяКорректировка", "ЛОЖЬ") + " КАК РучнаяКорректировка,
				|	ЛОЖЬ КАК РеглДокументНДС,
				|	ЛОЖЬ КАК Выполнена,
				|	Журнал.Представление КАК Представление,
				|	ЛОЖЬ КАК БылаОшибка,
				|	" + ?(МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено, "Журнал.Организация", "Неопределено") + " КАК Организация,
				|	НАЧАЛОПЕРИОДА(Дата, МЕСЯЦ) КАК Месяц
				|ИЗ Документ." + МетаданныеДокумента.Имя + " КАК Журнал
				|ГДЕ Проведен 
				|	И &УсловиеПериода
				|	" + ?(МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено, "И &УсловиеОрганизации", "");
						
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура СообщитьПрогресс(ПараметрыСообщенийПрогресса, ТекущаяДатаПроведения)

	ПараметрыСообщенийПрогресса.ДостигнутоеЗначение = ТекущаяДатаПроведения;

	Если ПараметрыСообщенийПрогресса.НачальноеЗначение > ТекущаяДатаПроведения
		ИЛИ ПараметрыСообщенийПрогресса.КонечноеЗначение < ТекущаяДатаПроведения Тогда
		// Значение, которое лежит за пределами диапазона, не показываем.
		ТекстСообщения = "";
	Иначе
		ТекстСообщения = Формат(ТекущаяДатаПроведения, "ДФ=""д ММММ гггг 'г.'""");
	КонецЕсли;

	ДлительныеОперации.СообщитьПрогресс(, ТекстСообщения, ПараметрыСообщенийПрогресса);

КонецПроцедуры 

Процедура ДобавитьСообщенияВРезультатОбработки(ТаблицаСообщений, РезультатОбработки, ДатаНачала, ДатаОкончания)

	Если ТаблицаСообщений.Количество() > 0 Тогда
		
		РезультатОбработки.ВывестиИнформациюУведомлений = Истина;
		
		ПараметрыОтчета = ПроведениеСервер.НовыеПараметрыОтчетаССообщениямиПользователю(
			"Перепроведение",
			ТаблицаСообщений);
		ПараметрыОтчета.ДатаНачала               = ДатаНачала;
		ПараметрыОтчета.ДатаОкончания            = ДатаОкончания;
		ПараметрыОтчета.ПроведеноДокументов      = РезультатОбработки.ПроведеноДокументов;
		ПараметрыОтчета.НеУдалосьПровести        = РезультатОбработки.НеУдалосьПровести;
		
		ТабДокумент = ПроведениеСервер.ВывестиСообщенияПользователю(ПараметрыОтчета);
		
		ПроведениеСервер.ПоместитьСообщенияПользователюВоВременноеХранилищеДляФормыОшибок(
			ТаблицаСообщений,
			ТабДокумент,
			РезультатОбработки.АдресХранилищаСОшибками);
		
	Иначе
		// Если ошибок не возникло, то уничтожим временное хранилище для них, чтобы место не занимало.
		Если ЭтоАдресВременногоХранилища(РезультатОбработки.АдресХранилищаСОшибками) Тогда
			УдалитьИзВременногоХранилища(РезультатОбработки.АдресХранилищаСОшибками);
		КонецЕсли;
		РезультатОбработки.АдресХранилищаСОшибками = "";
	КонецЕсли;
	
КонецПроцедуры 

// Возвращает структуру параметров для сообщений прогресса выполнения.
//
Функция НовыеПараметрыСообщенийПрогресса() Экспорт

	Результат = Новый Структура();
	Результат.Вставить("Месяц",            '0001-01-01');
	Результат.Вставить("Организация",      ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	Результат.Вставить("ИмяЭтапа",         ""); // См. ЗакрытиеМесяцаКлиентСервер.ИмяЭтапаХХХ()
	Результат.Вставить("НачальноеЗначение"); 	// Число или Дата - начальная граница диапазона
	Результат.Вставить("КонечноеЗначение");  	// Число или Дата - конечная граница диапазона
	Результат.Вставить("ДостигнутоеЗначение");  // Число или Дата - текущее положение
	
	// Сообщение прогресса связано с контролем наличия ранее запущенных фоновых заданий на файловой базе.
	Результат.Вставить("КонтрольРанееЗапущенных", Ложь); // Булево

	Возврат Результат;

КонецФункции

// Выполняет подготовительные действия перед групповым перепроведением, 
// возвращает Истина, если успешно, иначе Ложь.
//
Функция ЗаблокироватьДанныеПередПроведением(МассивОрганизаций, ТаблицаСообщений)
	
	Успешно = Истина;
	
	Для Каждого Организация ИЗ МассивОрганизаций Цикл
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Организация);
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось заблокировать данные по организации %1 для группового перепроведения.%2 %3'"),
				Организация,
				Символы.ПС,
				ПодробноеПредставлениеОшибки(ИнфоОбОшибке));
			ТекстСообщенияКраткое = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось заблокировать данные по организации %1 для группового перепроведения.%2 %3'"),
				Организация,
				Символы.ПС,
				КраткоеПредставлениеОшибки(ИнфоОбОшибке));
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Групповое перепроведение документов'", ОбщегоНазначения.КодОсновногоЯзыка()), 
				УровеньЖурналаРегистрации.Ошибка, , ,
				ТекстСообщения);
			РазблокироватьДанныеДляРедактирования();
			
			Успешно = Ложь;
			
			НовоеСообщение 				= Новый СообщениеПользователю();
			НовоеСообщение.КлючДанных 	= Организация;
			НовоеСообщение.Текст 		= ТекстСообщенияКраткое;
			
			ПроведениеСервер.ДобавитьСообщениеПользователю(
				ТаблицаСообщений, 
				Организация,
				НовоеСообщение, 
				Организация,
				'0001-01-01',
				Истина);
			
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Успешно;
	
КонецФункции

#КонецОбласти

#КонецЕсли