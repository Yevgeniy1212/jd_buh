&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПодготовитьФормуНаСервере();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ТолькоВыбранныеОрганизацииПриИзменении(Элемент)
	
	Элементы.ТаблицаОрганизаций.Доступность = ТолькоВыбранныеОрганизации;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <ИМЯ ТАБЛИЦЫ ФОРМЫ>

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура КнопкаВыполнить(Команда)
	
	ОчиститьСообщения();
	
	Если ТолькоВыбранныеОрганизации <> 0 И НЕ ЗначениеЗаполнено(ТаблицаОрганизаций) Тогда
		ТекстСообщения = ОбщегоНазначенияБККлиентСервер.ПолучитьТекстСообщения("Список", , , , НСтр("ru = 'Список организаций'"));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ИнициализацияКомандДокументаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода", Объект.ДатаНачала, Объект.ДатаОкончания);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтаФорма);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачала) И НЕ ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		РабочаяДатаПриложения = ОбщегоНазначения.ТекущаяДатаПользователя();
		Если День(РабочаяДатаПриложения) < 25 Тогда
			Объект.ДатаНачала    = НачалоМесяца(НачалоМесяца(РабочаяДатаПриложения) - 1);
			Объект.ДатаОкончания = КонецМесяца(Объект.ДатаНачала);
		Иначе
			Объект.ДатаНачала    = НачалоМесяца(РабочаяДатаПриложения);
			Объект.ДатаОкончания = КонецМесяца(Объект.ДатаНачала);
		КонецЕсли; 
	КонецЕсли;
	
	Элементы.ТаблицаОрганизаций.Доступность = ТолькоВыбранныеОрганизации;
	
	ПроведеноДокументов = 0;
	НеУдалосьПровести   = 0;
	
КонецПроцедуры
 

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ПоказатьРезультатПерепроведения(РезультатЗадания, ДополнительныеПараметры) Экспорт
	
	ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
	ОписаниеФоновогоЗадания = Неопределено;
	
	Если РезультатЗадания = Неопределено
	 Или РезультатЗадания.Статус = "Отменено" Тогда
		Возврат;
	ИначеЕсли РезультатЗадания.Статус = "Ошибка" Тогда
		
		Если Не ПустаяСтрока(РезультатЗадания.ПодробноеПредставлениеОшибки) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатЗадания.ПодробноеПредставлениеОшибки);
		КонецЕсли;
		Для Каждого Сообщение Из РезультатЗадания.Сообщения Цикл
			Сообщение.Сообщить();
		КонецЦикла;
		ПоказатьПредупреждение(, РезультатЗадания.КраткоеПредставлениеОшибки);
		Возврат;
		
	КонецЕсли;
	
	Если Не ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	УдалитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
		
	Если Не Результат.Свойство("ПроведеноДокументов")
	 Или Не Результат.Свойство("НеУдалосьПровести") Тогда
		Возврат;
	КонецЕсли;
		
	Если Результат.ВывестиИнформациюУведомлений Тогда
		
		// Покажем подробный отчет об ошибках.
		ОткрытьФормуОшибокПерепроведения(ЭтотОбъект, Результат.АдресХранилищаСОшибками);
		
	ИначеЕсли Результат.НеУдалосьПровести = 0 Тогда
			
		ТекстСообщения = НСтр("ru='Выполнено перепроведение документов:
		| - проведено документов: %1;
		| - ошибок не обнаружено'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Результат.ПроведеноДокументов);
	
		ПоказатьПредупреждение(, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияКомандДокументаНаКлиенте()
	
	Результат = ВыполнитьНаСервере();
	
	Если ОписаниеФоновогоЗадания <> Неопределено И Результат = Неопределено Тогда
		// Ранее запущенное фоновое задание продолжает выполняться.
		Возврат;
	КонецЕсли;
	
	Если ОписаниеФоновогоЗадания.Статус = "Выполняется" Тогда
		// Отображаем для индикации ожидания специализированную форму для перепроведения и закрытия месяца.
		ОписаниеПроцесса = ОписаниеПроцессаДлительнойОперации();
		ОписаниеПроцесса.ИспользоватьПерепроведениеДокументов = Истина;
		ОписаниеПроцесса.КоличествоОрганизаций = Результат.ВыбранныеОрганизации.Количество();
				
		Если Результат.ВыбранныеОрганизации.Количество() > 0 Тогда
			ОписаниеПроцесса.Организация = Результат.ВыбранныеОрганизации[0];
		КонецЕсли;

		ОписаниеПроцесса.Месяц = НачалоМесяца(Результат.ДатаНачалаПерепроведения);
		Если НачалоМесяца(Результат.ДатаНачалаПерепроведения) = НачалоМесяца(Результат.ДатаОкончанияПерепроведения) Тогда
			ОписаниеПроцесса.КоличествоМесяцев = 1;
		Иначе
			НачальныйМесяц = Месяц(Результат.ДатаНачалаПерепроведения);
			КонечныйМесяц  = Месяц(Результат.ДатаОкончанияПерепроведения);
			НачальныйГод   = Год(Результат.ДатаНачалаПерепроведения);
			КонечныйГод    = Год(Результат.ДатаОкончанияПерепроведения);
			
			// Рассчитаем количество полных месяцев между двумя датами (включая месяцы обоих дат).
			Если НачальныйМесяц > КонечныйМесяц Тогда
				ОписаниеПроцесса.КоличествоМесяцев = (КонечныйГод - НачальныйГод - 1) * 12 + (12 - НачальныйМесяц + КонечныйМесяц) + 1;
			Иначе
				ОписаниеПроцесса.КоличествоМесяцев = (КонечныйГод - НачальныйГод) * 12 + (КонечныйМесяц - НачальныйМесяц) + 1;
			КонецЕсли;

		КонецЕсли;
		
		ФормаДлительнойОперации = ОткрытьФормуДлительнойОперации(
			ЭтотОбъект, ОписаниеФоновогоЗадания.ИдентификаторЗадания, ОписаниеПроцесса);
		
		// Запустить обработчик-метроном, который будет генерировать малые сдвиги индикатора на ФормаДлительнойОперации.
		ФормаДлительнойОперации.ЗапуститьПериодическиеПроверкиПрогресса();
		
	Иначе
		
		ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		
	КонецЕсли;
	
	// Регистрируем события получения сообщений прогресса и завершения фонового задания.
	ОповещениеОЗавершенииЗадания = Новый ОписаниеОповещения("ПоказатьРезультатПерепроведения", ЭтотОбъект);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);  
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеОПрогрессеВыполнения = ОповещениеОПрогрессеВыполнения(ФормаДлительнойОперации);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ОписаниеФоновогоЗадания, ОповещениеОЗавершенииЗадания, ПараметрыОжидания);
			
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодготовленныеДанныеНаСервере()

	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	Если СтруктураДанных.Свойство("ПроведеноДокументов") Тогда
		ПроведеноДокументов = СтруктураДанных.ПроведеноДокументов;
	КонецЕсли;
	Если СтруктураДанных.Свойство("НеУдалосьПровести") Тогда
		НеУдалосьПровести = СтруктураДанных.НеУдалосьПровести;
	КонецЕсли;
	
	СообщенияПользователю = Неопределено;
	Если СтруктураДанных.Свойство("СообщенияПользователю", СообщенияПользователю) Тогда
		ПоказатьСообщенияПользователю(СообщенияПользователю);
	КонецЕсли;
	
	ИдентификаторЗадания = Неопределено;
	РазблокироватьДанныеДляРедактирования(, УникальныйИдентификатор);

КонецПроцедуры

&НаСервере
Функция ВыполнитьНаСервере()
		
	Если ТолькоВыбранныеОрганизации = 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Организация
		|ИЗ
		|	Справочник.Организации КАК Организации";
		Выборка = Запрос.Выполнить().Выбрать();
		ВыбранныеОрганизации = Новый Массив;
		Пока Выборка.Следующий() Цикл
			ВыбранныеОрганизации.Добавить(Выборка.Организация);
		КонецЦикла;
	Иначе
		ВыбранныеОрганизации = Новый Массив;
		Для Каждого ЭлементСпискаОрганизаций Из ТаблицаОрганизаций Цикл
			Если ЗначениеЗаполнено(ЭлементСпискаОрганизаций.Организация) Тогда
				ВыбранныеОрганизации.Добавить(ЭлементСпискаОрганизаций.Организация);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; 
	
	// Возможно, что фоновое задание было запущено раньше, 
	// пользователь дал команду его отменить, однако задание не отменено.
	// В таком случае не следует запускать задание повторно - следует дождаться его выполнения.
	// Мы можем отследить ситуацию, только если все это происходит в одной форме.
	Если ОписаниеФоновогоЗадания <> Неопределено Тогда
		
		Если ЗаданиеЕщеВыполняется(ОписаниеФоновогоЗадания.ИдентификаторЗадания) Тогда
			Возврат Неопределено; // надо ждать
		КонецЕсли;
		ОписаниеФоновогоЗадания = Неопределено;
		
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Организация, ДатаНачала, ДатаОкончания, ЗаписыватьОшибкиВЖурналРегистрации, ОстанавливатьсяПоОшибке, СообщатьПрогрессВыполнения, АдресХранилищаСОшибками, ДанныеЗаблокированы, ТолькоВыбранныеОрганизации",
		ВыбранныеОрганизации,
		?(ЗначениеЗаполнено(Объект.ДатаНачала), Объект.ДатаНачала, Неопределено),
		?(ЗначениеЗаполнено(Объект.ДатаОкончания), Объект.ДатаОкончания, Неопределено),
		Истина,
		Объект.ОстанавливатьсяПоОшибке,
		Истина,
		"",
		Ложь,
		?(ТолькоВыбранныеОрганизации = 0, Ложь, Истина)); 
		
	// Временное хранилище для отчета об ошибках необходимо создавать
	// в том же сеансе работы с пользователем, из которого требуется обращение к ним, 
	// т.к. временное хранилище очищается при завершении сеанса фонового задания.
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.АдресХранилищаСОшибками) Тогда
		СтруктураПараметров.Вставить("АдресХранилищаСОшибками", ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор));
	КонецЕсли;
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	КлючЗадания = "";	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Групповое перепроведение документов'");
	ПараметрыВыполнения.КлючФоновогоЗадания = КлючЗадания;
	// Если на файловой базе уже запущено любое другое фоновое задание, то новое встанет в очередь, а не будет запущено в основном потоке.
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;

	ОписаниеФоновогоЗадания = ДлительныеОперации.ВыполнитьПроцедуру(
		ПараметрыВыполнения,
		"Обработки.ГрупповоеПерепроведениеДокументов.ПерепроведениеДокументов",
		СтруктураПараметров,
		АдресХранилища);

	ИдентификаторЗадания = ОписаниеФоновогоЗадания.ИдентификаторЗадания;
	
	Результат = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОписаниеФоновогоЗадания);

	Результат.Вставить("ВыбранныеОрганизации",        ВыбранныеОрганизации);
	Результат.Вставить("ДатаНачалаПерепроведения",    Объект.ДатаНачала);
	Результат.Вставить("ДатаОкончанияПерепроведения", Объект.ДатаОкончания);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСообщенияПользователю(МассивСообщений = Неопределено)
	
	Если МассивСообщений <> Неопределено Тогда
		Для Каждого Сообщение Из МассивСообщений Цикл
			Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДатаНачала	 = РезультатВыбора.НачалоПериода;
	Объект.ДатаОкончания = РезультатВыбора.КонецПериода;
	
КонецПроцедуры

// Конструктор для описания процесса длительной операции актуализации учета.
//
// Возвращаемое значение:
//   Структура   - значения по-умолчанию для описания операции.
//
&НаСервереБезКонтекста
Функция ОписаниеПроцессаДлительнойОперации() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьПерепроведениеДокументов", Ложь);
	Результат.Вставить("КоличествоМесяцев", 1);
	Результат.Вставить("КоличествоОрганизаций", 1);
	Результат.Вставить("Месяц", '0001-01-01');
	Результат.Вставить("Организация"); // СправочникСсылка.Организации
	
	Возврат Результат;
	
КонецФункции  

// Открывает форму индикации хода длительной операции.
// 
// Параметры:
//  ВладелецФормы        - ФормаКлиентскогоПриложения - форма, из которой производится открытие. 
//  ИдентификаторЗадания - УникальныйИдентификатор - Идентификатор фонового задания.
//  ОписаниеПроцесса     - Структура - см. ОписаниеПроцессаДлительнойОперации()
//
// Возвращаемое значение:
//  ФормаКлиентскогоПриложения     - ссылка на открытую форму.
// 
&НаКлиенте
Функция ОткрытьФормуДлительнойОперации(ВладелецФормы, ИдентификаторЗадания, ОписаниеПроцесса) Экспорт
	
	ПараметрыФормыИндикации = Новый Структура;
	ПараметрыФормыИндикации.Вставить("ИдентификаторЗадания", ИдентификаторЗадания);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыФормыИндикации, ОписаниеПроцесса, Ложь);
	
	ФормаДлительнойОперации = ОткрытьФорму("ОбщаяФорма.ИндикацияХодаПроцесса", ПараметрыФормыИндикации, ВладелецФормы);
	
	Возврат ФормаДлительнойОперации;
	
КонецФункции

// Закрывает форму индикации хода длительной операции.
//
// Параметры:
//  Форма        - ФормаКлиентскогоПриложения - форма с индикатором прогресса длительной операции.
//
&НаКлиенте
Процедура ЗакрытьФормуДлительнойОперации(Форма) Экспорт
	
	Если Форма = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ЗакрытьФормуДлительнойОперации();
	Форма = Неопределено;
	
КонецПроцедуры 

// Подготоваливает оповещение, которое будет вызываться БСП после получения событий от фонового задания.
//
// Параметры:
//  Форма        - ФормаКлиентскогоПриложения - форма с индикатором прогресса длительной операции.
//
&НаКлиенте
Функция ОповещениеОПрогрессеВыполнения(Форма) Экспорт
	
	Если Форма = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Новый ОписаниеОповещения("ОбновитьФормуДлительнойОперации", Форма);
	
КонецФункции  

&НаСервереБезКонтекста
Функция ЗаданиеЕщеВыполняется(ИдентификаторЗадания) Экспорт
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	
	Возврат Задание <> Неопределено И Задание.Состояние = СостояниеФоновогоЗадания.Активно;
	
КонецФункции

// Открывает форму со списком ошибок, возникших при групповом перепроведении документов.
//
&НаКлиенте
Процедура ОткрытьФормуОшибокПерепроведения(ВладелецФормы, АдресХранилищаСОшибками)

	Если НЕ ЗначениеЗаполнено(АдресХранилищаСОшибками) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресХранилища", АдресХранилищаСОшибками);
	ОткрытьФорму("Обработка.ГрупповоеПерепроведениеДокументов.Форма.ФормаОшибокПроведения", ПараметрыФормы, ВладелецФормы, Истина);

КонецПроцедуры

