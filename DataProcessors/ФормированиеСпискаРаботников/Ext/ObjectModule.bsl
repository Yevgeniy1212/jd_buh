#Если Клиент Тогда

Процедура ЗаполнитьНачальныеНастройки(НачальноеЗаполнение = Истина) Экспорт

	// структура представлений полей
	СтруктураПредставлениеПолей = Новый Структура();
	СтруктураФорматаПолей = Новый Структура();
	
	ТекстРаботникиОрганизации = "
	|ВЫБРАТЬ
	|	РаботникиОрганизации.Организация,
	|	РаботникиОрганизации.ОбособленноеПодразделение,
	|	РаботникиОрганизации.ФизЛицо,
	|	РаботникиОрганизации.ПричинаИзмененияСостояния,
	|	РаботникиОрганизации.ТабельныйНомер,
	|	РаботникиОрганизации.Должность,
	|	РаботникиОрганизации.Приказ,
	|	РаботникиОрганизации.ПодразделениеОрганизации КАК Подразделение,
	|	РаботникиОрганизации.Период,
	|	ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ВидРасчета,
	|	0 КАК Флаг
	|ИЗ";
		
	Если Не Уникальность Тогда
			
		ТекстРаботникиОрганизации = ТекстРаботникиОрганизации + "
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности, Организация = &ГоловнаяОрганизация) КАК РаботникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
		|				&парамКонецМесяца,
		|				Организация = &парамОрганизация
		|					И (ВидРасчета.ВидУчетаВремени = &парамПоЧасам
		|						ИЛИ ВидРасчета.ВидУчетаВремени = &парамПоДням
		|						ИЛИ ВидРасчета.ВидУчетаВремени = &парамПоНочнымЧасам
		|						ИЛИ ВидРасчета.ВидУчетаВремени = &парамПоПраздничнымЧасам
		|						ИЛИ ВидРасчета.ВидУчетаВремени = &парамПоСверхурочнымЧасам)) КАК ПлановыеНачисленияРаботниковОрганизацийСрезПоследних
		|		ПО РаботникиОрганизации.Физлицо = ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.ФизЛицо
		|			И РаботникиОрганизации.Приказ = ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Приказ
		|		ГДЕ
		|			ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Действие<>ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
		|";
			
	Иначе
			
		ТекстРаботникиОрганизации = ТекстРаботникиОрганизации + "
		|	(ВЫБРАТЬ
		|		РаботникиОрганизации.ФизЛицо,
		|		МАКСИМУМ(ВЫБОР
		|					КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &Уволен 
		|						ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
		|					ИНАЧЕ РаботникиОрганизации.Период
		|				 КОНЕЦ) КАК Период
		|	ИЗ
		|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|	ГДЕ
		|		РаботникиОрганизации.Организация = &ГоловнаяОрганизация
		|		И РаботникиОрганизации.Период <= &ДатаАктуальности
		|		И (РаботникиОрганизации.Приказ.Ссылка ЕСТЬ NULL
		|			ИЛИ РаботникиОрганизации.Приказ.ВидЗанятости <> &ВнутреннееСовместительство)
		|
		|	СГРУППИРОВАТЬ ПО
		|		РаботникиОрганизации.ФизЛицо) КАК ПоследниеДатыДвижений
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|		ПО ПоследниеДатыДвижений.ФизЛицо = РаботникиОрганизации.ФизЛицо
		|			И ПоследниеДатыДвижений.Период = ВЫБОР
		|												КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &Уволен
		|													ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
		|												ИНАЧЕ РаботникиОрганизации.Период
		|											 КОНЕЦ
		|			И РаботникиОрганизации.Организация = &ГоловнаяОрганизация
		|			И (РаботникиОрганизации.Приказ.Ссылка ЕСТЬ NULL
		|				ИЛИ РаботникиОрганизации.Приказ.ВидЗанятости <> &ВнутреннееСовместительство)
		|";
		
	КонецЕсли;
		
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РаботникиОрганизации.ФизЛицо,
	|	РаботникиОрганизации.ПричинаИзмененияСостояния";
	Если ВыбиратьМестоРаботы Тогда
		ТекстЗапроса = ТекстЗапроса	+ ",
		|	РаботникиОрганизации.Организация,
		|	РаботникиОрганизации.ОбособленноеПодразделение,
		|	РаботникиОрганизации.ТабельныйНомер КАК ТабельныйНомер,
		|	РаботникиОрганизации.Должность КАК Должность,
		|	РаботникиОрганизации.Приказ КАК Приказ,
		|	РаботникиОрганизации.Подразделение,
		|	РаботникиОрганизации.ВидРасчета,
		|	РаботникиОрганизации.Флаг";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|	(" + ТекстРаботникиОрганизации + ") КАК РаботникиОрганизации
	|
	|		{ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ДатыПоследнихДвиженийРаботников.Период,
	|			ДатыПоследнихДвиженийРаботников.Организация,
	|			ДатыПоследнихДвиженийРаботников.ФизЛицо,
	|			ДатыПоследнихДвиженийРаботников.Приказ Как ПриказИзмерение,
	|			ДанныеПоРаботникуПриНазначении.Регистратор КАК Приказ,
	|			ДанныеПоРаботникуПриНазначении.Регистратор.ВидЗанятости КАК ВидЗанятости
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ТЧРаботникиОрганизации.Организация,
	|				МАКСИМУМ(Работники.Период) КАК Период,
	|				ТЧРаботникиОрганизации.Физлицо КАК ФизЛицо,
	|				ТЧРаботникиОрганизации.Приказ КАК Приказ
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности,Организация = &ГоловнаяОрганизация) КАК ТЧРаботникиОрганизации
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	|					ПО ТЧРаботникиОрганизации.Физлицо = Работники.Физлицо
	|						И ТЧРаботникиОрганизации.Организация = Работники.Организация
	|						И ТЧРаботникиОрганизации.Приказ = Работники.Приказ
	|						И Работники.Период <= ТЧРаботникиОрганизации.Период
	|						И (Работники.ПричинаИзмененияСостояния = &Прием)
	|			{ГДЕ
	|				ТЧРаботникиОрганизации.Должность КАК Должность,
	|				ТЧРаботникиОрганизации.ТабельныйНомер КАК ТабельныйНомер,
	|				ТЧРаботникиОрганизации.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|				ТЧРаботникиОрганизации.ПодразделениеОрганизации КАК Подразделение}
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ТЧРаботникиОрганизации.Организация,
	|				ТЧРаботникиОрганизации.Физлицо,
	|				ТЧРаботникиОрганизации.Приказ) КАК ДатыПоследнихДвиженийРаботников
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуПриНазначении
	|				ПО ДанныеПоРаботникуПриНазначении.Период = ДатыПоследнихДвиженийРаботников.Период
	|					И ДатыПоследнихДвиженийРаботников.ФизЛицо = ДанныеПоРаботникуПриНазначении.Физлицо
	|					И ДатыПоследнихДвиженийРаботников.Приказ = ДанныеПоРаботникуПриНазначении.Приказ
	|					И ДатыПоследнихДвиженийРаботников.Организация = ДанныеПоРаботникуПриНазначении.Организация) КАК ПриказыОПриеме
	|		ПО ПриказыОПриеме.Организация = РаботникиОрганизации.Организация
	|			И ПриказыОПриеме.ФизЛицо = РаботникиОрганизации.ФизЛицо
	|			И ПриказыОПриеме.ПриказИзмерение = РаботникиОрганизации.Приказ}
	|
	|		//ДАННЫЕ О ФИЗЛИЦЕ: СОЕДИНЕНИЯ
	|";
	Если Не ВключатьУволенных Тогда 
		ТекстЗапроса = ТекстЗапроса	+ "
		|ГДЕ
		|	РаботникиОрганизации.ПричинаИзмененияСостояния <> &Уволен
		|"
	ИначеЕсли ЗначениеЗаполнено(ДатаУволенных) Тогда
		ТекстЗапроса = ТекстЗапроса	+ "
		|ГДЕ
		|	(РаботникиОрганизации.ПричинаИзмененияСостояния <> &Уволен) или (ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1) > &ДатаУволенных)
		|"
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса	+ "
	|
	|{ГДЕ
	|	РаботникиОрганизации.ФизЛицо.* КАК Работник,
	|	РаботникиОрганизации.ФизЛицо.Родитель КАК Группа,
	|	РаботникиОрганизации.Должность.* КАК Должность,
	|	РаботникиОрганизации.ТабельныйНомер КАК ТабельныйНомер,
	|	ПриказыОПриеме.Период КАК ДатаПриема,
	|	ПриказыОПриеме.ВидЗанятости КАК ВидЗанятости,
	|	РаботникиОрганизации.Подразделение.* КАК Подразделение,
	|	РаботникиОрганизации.ОбособленноеПодразделение.* КАК ОбособленноеПодразделение
	|	//ДАННЫЕ О ФИЗЛИЦЕ: ПОЛЯ
	|}
	|
	|УПОРЯДОЧИТЬ ПО
	|	РаботникиОрганизации.ФизЛицо.Наименование
	|
	|";

	// Преобразуем текст запроса для получения полной информации о физлице
	ПроцедурыУправленияПерсоналом.ДобавитьВТекстПостроителяДанныеОФизлице(ТекстЗапроса, СтруктураПредставлениеПолей, СтруктураФорматаПолей, "РаботникиОрганизации");	
	
	ПостроительОтчета.Текст = ТекстЗапроса;							  
	
	ПостроительОтчета.Параметры.Вставить("Уволен", Перечисления.ПричиныИзмененияСостояния.Увольнение);
	ПостроительОтчета.Параметры.Вставить("Прием", Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	ПостроительОтчета.Параметры.Вставить("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	ПостроительОтчета.Параметры.Вставить("ВнутреннееСовместительство", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
							  
	//представление полей запроса
	СтруктураПредставлениеПолей.Вставить("Группа", "Группа физ.лиц");
	СтруктураПредставлениеПолей.Вставить("ОбособленноеПодразделение", "Организация");
	СтруктураПредставлениеПолей.Вставить("ВидЗанятости", "Вид занятости");
	СтруктураПредставлениеПолей.Вставить("ДатаПриема", "Дата приема");
	СтруктураПредставлениеПолей.Вставить("ТабельныйНомер", "Табельный номер");
	СтруктураПредставлениеПолей.Вставить("ГрафикРаботы", "График работы");
	СтруктураПредставлениеПолей.Вставить("ЗанимаемыхСтавок", "Занимаемых ставок");
	
	УправлениеОтчетами.ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
	УправлениеОтчетами.УпорядочитьПоляПостроителяОтчета(ПостроительОтчета);
	
	Если НачальноеЗаполнение Тогда
		// отборы по умолчанию
		МассивОтбора = Новый Массив;
		МассивОтбора.Добавить("ОбособленноеПодразделение");
		МассивОтбора.Добавить("Подразделение");
		МассивОтбора.Добавить("Должность");
		МассивОтбора.Добавить("Работник");
		УправлениеОтчетами.ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
	КонецЕсли;
	
КонецПроцедуры
	
Функция ПолучитьСписокРаботников() Экспорт
	
	ПостроительОтчета.Параметры.Вставить("ДатаАктуальности", ДатаАктуальности);
	ПостроительОтчета.Параметры.Вставить("ДатаАктуальности_Год", Год(ДатаАктуальности));
	ПостроительОтчета.Параметры.Вставить("ДатаАктуальности_Месяц", Месяц(ДатаАктуальности));
	ПостроительОтчета.Параметры.Вставить("ДатаАктуальности_День", День(ДатаАктуальности));
	ПостроительОтчета.Параметры.Вставить("ДатаУволенных", ДатаУволенных);
	ПостроительОтчета.Параметры.Вставить("ОбособленноеПодразделение", ПостроительОтчета.Отбор.ОбособленноеПодразделение.Значение);
	ПостроительОтчета.Параметры.Вставить("парамНачалоМесяца",НачалоМесяца(ДатаАктуальности));
	// Этого параметра не было. Добавим
	ПостроительОтчета.Параметры.Вставить("парамКонецМесяца",КонецМесяца(ДатаАктуальности));
	//
	ПостроительОтчета.Параметры.Вставить("парамОрганизация",ПостроительОтчета.Отбор.ОбособленноеПодразделение.Значение);
	ПостроительОтчета.Параметры.Вставить("парамПоЧасам",Перечисления.ВидыУчетаВремени.ПоЧасам);
	ПостроительОтчета.Параметры.Вставить("парамПоДням",Перечисления.ВидыУчетаВремени.ПоДням);
	ПостроительОтчета.Параметры.Вставить("парамПоНочнымЧасам",Перечисления.ВидыУчетаВремени.ПоНочнымЧасам);
	ПостроительОтчета.Параметры.Вставить("парамПоПраздничнымЧасам",Перечисления.ВидыУчетаВремени.ПоПраздничнымЧасам);
	ПостроительОтчета.Параметры.Вставить("парамПоСверхурочнымЧасам",Перечисления.ВидыУчетаВремени.ПоСверурочнымЧасам);
	
	Если ИсполнятьЗапрос Тогда 
		ПостроительОтчета.Выполнить();
		РезультатОтбора = ПостроительОтчета.Результат;
		Если РезультатОтбора.Пустой() Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не обнаружено работников, удовлетворяющих указанным условиям!");
		КонецЕсли;
		
		ТаблицаЗначенияРеквизитов = РеквизитыТабличнойЧасти.Выгрузить();
		Если ТаблицаЗначенияРеквизитов.Найти(Истина, "Использование") = Неопределено Тогда
			Возврат Новый Структура("Команда,Данные","ЗаполнитьСписокРаботников",РезультатОтбора);
		Иначе
			Возврат Новый Структура("Команда,Данные,ЗначенияРеквизитов","ЗаполнитьСписокРаботников",РезультатОтбора,ТаблицаЗначенияРеквизитов);
		КонецЕсли;
		
	Иначе
		ПостроительЗапроса = Новый ПостроительЗапроса(ПостроительОтчета.Текст);
		Для каждого Параметр Из ПостроительОтчета.Параметры Цикл
			ПостроительЗапроса.Параметры.Вставить(Параметр.Ключ,Параметр.Значение);
		КонецЦикла; 
		Для каждого ЭлементОтбора Из ПостроительОтчета.Отбор Цикл
			Если ЭлементОтбора.Использование и ЗначениеЗаполнено(ЭлементОтбора.ПутьКДанным) Тогда
				//пропустим неправильно заполненные отборы
				//Если ЭлементОтбора.ТипЗначения.СодержитТип(Тип("Строка")) Тогда
				//	Если ЭлементОтбора.ТипЗначения.КвалификаторыСтроки.Длина = 0 И (ЭлементОтбора.ВидСравнения <> ВидСравнения.Содержит) И (ЭлементОтбора.ВидСравнения <> ВидСравнения.НеСодержит) Тогда
				//		Продолжить;
				//	КонецЕсли;;
				//КонецЕсли;
				НовыйОтбор = ПостроительЗапроса.Отбор.Добавить(ЭлементОтбора.ПутьКДанным,ЭлементОтбора.Имя,ЭлементОтбора.Представление);
				НовыйОтбор.ВидСравнения = ЭлементОтбора.ВидСравнения;
				НовыйОтбор.Значение = ЭлементОтбора.Значение;
				НовыйОтбор.ЗначениеПо = ЭлементОтбора.ЗначениеПо;
				НовыйОтбор.ЗначениеС = ЭлементОтбора.ЗначениеС;
				НовыйОтбор.Использование = Истина;
			КонецЕсли;
		КонецЦикла; 

		ТаблицаЗначенияРеквизитов = РеквизитыТабличнойЧасти.Выгрузить();
		Если ТаблицаЗначенияРеквизитов.Найти(Истина, "Использование") = Неопределено Тогда
			Возврат Новый Структура("Команда,ПостроительЗапроса","ЗаполнитьПостроительЗапроса",ПостроительЗапроса);
		Иначе
			Возврат Новый Структура("Команда,ПостроительЗапроса,ЗначенияРеквизитов","ЗаполнитьПостроительЗапроса",ПостроительЗапроса,ТаблицаЗначенияРеквизитов);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

#КонецЕсли

