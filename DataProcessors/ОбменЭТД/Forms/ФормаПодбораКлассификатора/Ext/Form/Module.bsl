
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ЗначениеВыбора = Неопределено;
	Если Параметры.Свойство("ЗначениеВыбора") Тогда
		ЗначениеВыбора = Параметры.ЗначениеВыбора;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	Заголовок = Параметры.Заголовок;
	ВыборГруппы = Параметры.ВыборГруппы; 

	ВидКлассификатора = Параметры.ВидКлассификатора;
	
	Дерево = ЭТДСервер.ПолучитьДанныеКлассификатора(ВидКлассификатора);
	
	Если ВидКлассификатора = "ПрофессийXML" 
		ИЛИ ВидКлассификатора = "ОснованияУвольнения"
		ИЛИ ВидКлассификатора = "ВредныхУсловийТруда"
		ИЛИ ВидКлассификатора = "ОбразованияИностранцев"
		ИЛИ ВидКлассификатора = "ОснованияДляПривлеченияИностранца"
		ИЛИ ВидКлассификатора = "Судов" Тогда
		Элементы.ДеревоКлассификатораВыбран.Видимость = Ложь;
		Элементы.ДеревоКлассификатора.РежимВыделенияСтроки = РежимВыделенияСтрокиТаблицы.Строка;
	КонецЕсли;
	
	Дерево.Колонки.Добавить("Выбран",     Новый ОписаниеТипов("Булево"));
	Дерево.Колонки.Добавить("Существует", Новый ОписаниеТипов("Булево"));
	
	Соответствие = Новый Соответствие;
	Отбор = Неопределено;
	
	ОбработатьДерево(Дерево, Отбор, Соответствие, Параметры.Уровень);
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоКлассификатора");

	Если ЗначениеЗаполнено(ЗначениеВыбора) Тогда
		
		ИдентификаторСтроки = 0;
		
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("Код", ИдентификаторСтроки, ДеревоКлассификатора.ПолучитьЭлементы(), ЗначениеВыбора, Ложь);
		
		Элементы.ДеревоКлассификатора.ТекущаяСтрока = ИдентификаторСтроки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОтображениеКлассификатора <> Элементы.ДеревоКлассификатора.Отображение Тогда
		СохраняемыеВНастройкахДанныеМодифицированы = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("ОтображениеДерева" + ВидКлассификатора, Элементы.ДеревоКлассификатора.Отображение);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)

	ОтображениеКлассификатора = Настройки.Получить("ОтображениеДерева" + ВидКлассификатора);
	
	Если НЕ ОтображениеКлассификатора = Неопределено Тогда
		Элементы.ДеревоКлассификатора.Отображение = ОтображениеКлассификатора;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоКлассификатора

&НаКлиенте
Процедура ОбходДереваВверх(ТекущиеДанные)

	Родитель = ТекущиеДанные.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда // Верхний уровень
		
		ДочерниеСтроки = Родитель.ПолучитьЭлементы();
		КоличествоВыбранных = 0;
		ОбщееКоличество = 0;
		Для каждого Элемент Из ДочерниеСтроки Цикл
			Если Элемент.Выбран = 2 Тогда
				КоличествоВыбранных = КоличествоВыбранных + 0.5;
			ИначеЕсли Элемент.Выбран = 1 Тогда
				КоличествоВыбранных = КоличествоВыбранных + 1;
			КонецЕсли;
			ОбщееКоличество = ОбщееКоличество + 1;
		КонецЦикла;
		
		Если ОбщееКоличество = КоличествоВыбранных Тогда
			Родитель.Выбран = 1;
		ИначеЕсли КоличествоВыбранных = 0 Тогда
			Родитель.Выбран = 0;
		Иначе
			Родитель.Выбран = 2;
		КонецЕсли;
		
		ОбходДереваВверх(Родитель);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбходДереваВниз(ТекущиеДанные)
	
	ДочерниеСтроки = ТекущиеДанные.ПолучитьЭлементы();
	Для каждого Элемент Из ДочерниеСтроки Цикл
		Элемент.Выбран = ТекущиеДанные.Выбран;
		ОбходДереваВниз(Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранПриИзменении(ТекущиеДанные)
	
	Если ТекущиеДанные.Выбран = 2 Тогда
		ТекущиеДанные.Выбран = 0;
	КонецЕсли;
	
	ОбходДереваВверх(ТекущиеДанные);
	ОбходДереваВниз(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКлассификатораВыбранПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоКлассификатора.ТекущиеДанные;
	ВыбранПриИзменении(ТекущиеДанные);
	
	Если Не ВыборГруппы Тогда
		
		ОбработкаПодбораВыполнена = Истина;
		РезультатПодбора = ОбработатьРезультатыПодбораНаСервере(ОбработкаПодбораВыполнена);
		
		Если ОбработкаПодбораВыполнена Тогда
			Закрыть(РезультатПодбора);
		Иначе
			Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выбрать(Команда)
	
	ОбработкаПодбораВыполнена = Истина;
	
	Если ВидКлассификатора = "ПрофессийXML" 
		ИЛИ ВидКлассификатора = "ОснованияУвольнения"
		ИЛИ ВидКлассификатора = "ВредныхУсловийТруда"
		ИЛИ ВидКлассификатора = "ОбразованияИностранцев"
		ИЛИ ВидКлассификатора = "ОснованияДляПривлеченияИностранца"
		ИЛИ ВидКлассификатора = "Судов" Тогда
		
		ТекущиеДанные = Элементы.ДеревоКлассификатора.ТекущиеДанные;
		// возвращаем структуру
		Если ТекущиеДанные = Неопределено Тогда
			ОбработкаПодбораВыполнена = Ложь;
		КонецЕсли;
		
		Если ВидКлассификатора = "ПрофессийXML" 
			И НЕ СтрДлина(ТекущиеДанные.Код) = 10 Тогда
			ТекстСообщения = НСтр("ru = 'Необходимо выбрать запись с 10 значным кодом профессии (конечные записи группировок)'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		Если ВидКлассификатора = "ОснованияУвольнения" 
			И НЕ СтрДлина(ТекущиеДанные.Код) = 6
			И ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Тогда
			ТекстСообщения = НСтр("ru = 'Необходимо выбрать запись с 6 значным кодом причины расторжения (конечные записи группировок)'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		Если (ВидКлассификатора = "ВредныхУсловийТруда" 
			ИЛИ ВидКлассификатора = "ОбразованияИностранцев"
			ИЛИ ВидКлассификатора = "ОснованияДляПривлеченияИностранца")
			И ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Тогда
			ТекстСообщения = НСтр("ru = 'Необходимо выбрать конечную запись группировок'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		РезультатПодбора = Новый Структура("Код, Наименование");

		Если ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка() = "ru" Тогда
			Наименование = "НаименованиеНаРусском";
		Иначе
			Наименование = "НаименованиеНаКазахском";
		КонецЕсли;
		
		РезультатПодбора.Код = ТекущиеДанные.Код;
		РезультатПодбора.Наименование = ТекущиеДанные[Наименование];
		
	Иначе
		// возвращаем таблицу
		РезультатПодбора = ОбработатьРезультатыПодбораНаСервере(ОбработкаПодбораВыполнена);
		
	КонецЕсли;

	
	Если ОбработкаПодбораВыполнена Тогда
		Закрыть(РезультатПодбора);
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДеревоКлассификатораВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыборГруппы Тогда
		Возврат;
	КонецЕсли;

	Если Элемент.ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Тогда
		
		Если Элементы.ДеревоКлассификатора.Развернут(Элемент.ТекущаяСтрока) Тогда
			Элементы.ДеревоКлассификатора.Свернуть(Элемент.ТекущаяСтрока);
		Иначе
			Элементы.ДеревоКлассификатора.Развернуть(Элемент.ТекущаяСтрока);
		КонецЕсли;
		
	Иначе
		ЗначениеВозврата = Новый Структура("Код, Наименование");

		Если ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка() = "ru" Тогда
			Наименование = "НаименованиеНаРусском";
		Иначе
			Наименование = "НаименованиеНаКазахском";
		КонецЕсли;
		
		ЗначениеВозврата.Код = Элемент.ТекущиеДанные.Код;
		ЗначениеВозврата.Наименование = Элемент.ТекущиеДанные[Наименование];
		
		Если ЗначениеВозврата = Неопределено Тогда
			Возврат
		КонецЕсли;
		
		ОповеститьОВыборе(ЗначениеВозврата);
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоКлассификатора.Имя);

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Истина, Ложь, Ложь, Ложь, ));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоКлассификатора.Имя);

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

#Область Прочее

&НаСервере
Функция ОбработатьРезультатыПодбораНаСервере(ОбработкаПодбораВыполнена)
	
	КоличествоНовыхЭлементов = 0;
	ОписаниеСтроки = Новый ОписаниеТипов("Строка");
	
	ТЗВыбраныхДанных = Новый ТаблицаЗначений;
	ТЗВыбраныхДанных.Колонки.Добавить("Код", ОписаниеСтроки);
	ТЗВыбраныхДанных.Колонки.Добавить("НаименованиеНаРусском", ОписаниеСтроки);
	ТЗВыбраныхДанных.Колонки.Добавить("НаименованиеНаКазахском", ОписаниеСтроки);
		
	Дерево = РеквизитФормыВЗначение("ДеревоКлассификатора");
	
	Для каждого СтрокаУровень1 Из Дерево.Строки Цикл
		Если СтрокаУровень1.Выбран Тогда
			
			Если СтрокаУровень1.Выбран = 1 И ВидКлассификатора <> "ПрофессиональныеНавыки" Тогда
				КоличествоНовыхЭлементов = КоличествоНовыхЭлементов + 1;
				
				Строка = ТЗВыбраныхДанных.Добавить();
				ЗаполнитьЗначенияСвойств(Строка,СтрокаУровень1);
			КонецЕсли;
			
			Для каждого СтрокаУровень2 Из СтрокаУровень1.Строки Цикл
				Если СтрокаУровень2.Выбран Тогда
					
					Если СтрокаУровень2.Выбран = 1 И ВидКлассификатора <> "ПрофессиональныеНавыки"  Тогда
						КоличествоНовыхЭлементов = КоличествоНовыхЭлементов + 1;
						
						Строка = ТЗВыбраныхДанных.Добавить();
						ЗаполнитьЗначенияСвойств(Строка,СтрокаУровень2);
					КонецЕсли;
					
					Для каждого СтрокаУровень3 Из СтрокаУровень2.Строки Цикл
						
						Если СтрокаУровень3.Выбран Тогда
							
							Если СтрокаУровень3.Выбран = 1 Тогда
								КоличествоНовыхЭлементов = КоличествоНовыхЭлементов + 1;
								
								Строка = ТЗВыбраныхДанных.Добавить();
								ЗаполнитьЗначенияСвойств(Строка,СтрокаУровень3);
							КонецЕсли;	
							
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
		
	Если КоличествоНовыхЭлементов = 0 Тогда
		ОбработкаПодбораВыполнена = Ложь;
	КонецЕсли;
		
	Если ВидКлассификатора = "ПрофессиональныеНавыки"
		ИЛИ ВидКлассификатора = "ОбщиеНавыки" Тогда
		
		ТЗВыбраныхДанных.Колонки.Код.Имя = "КодНавыка";
		
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка() = "ru" Тогда
		ТЗВыбраныхДанных.Колонки.НаименованиеНаРусском.Имя = "Наименование";
	Иначе
		ТЗВыбраныхДанных.Колонки.НаименованиеНаКазахском.Имя = "Наименование";
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(ТЗВыбраныхДанных,Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбработатьДерево(Дерево, Отбор, Соответствие, Уровень)
	
	МассивКУдалению = Новый Массив;
	ОбработатьУровень(Дерево.Строки, Отбор, МассивКУдалению, Соответствие, Уровень);
	УдалитьСтрокиИзКоллекцииСтрок(Дерево.Строки, МассивКУдалению);
		
КонецПроцедуры

&НаСервере
Процедура ОбработатьУровень(Строки, Отбор, МассивКУдалению, Соответствие, Уровень)
	
	Для каждого Строка Из Строки Цикл
		Если Уровень <> 3 Тогда
			МассивКУдалениюСледующегоУровня = Новый Массив;
			ОбработатьУровень(Строка.Строки, Отбор, МассивКУдалениюСледующегоУровня, Соответствие, Уровень + 1);
			УдалитьСтрокиИзКоллекцииСтрок(Строка.Строки, МассивКУдалениюСледующегоУровня);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиИзКоллекцииСтрок(Строки, МассивКУдалению)
	Для Каждого СтрокаКУдалению Из МассивКУдалению Цикл
		Строки.Удалить(СтрокаКУдалению);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#КонецОбласти
