
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Организация = ЭТДСервер.ОрганизацияПоУмолчанию();
	БИНОрганизации = ЭТДСервер.БИНОрганизации(Организация);
	
	ИспользоватьШтатноеРасписание = ЭТДСервер.ИспользоватьШтатноеРасписание();
	Элементы.ОсновныеДоговорыДолжностьПоШтатномуРасписанию.Видимость = ИспользоватьШтатноеРасписание;
	Элементы.ДополнительныеСоглашенияДолжностьПоШтатномуРасписанию.Видимость = ИспользоватьШтатноеРасписание;
	Элементы.ОсновныеДоговорыДолжность.Видимость = НЕ ИспользоватьШтатноеРасписание;
	Элементы.ДополнительныеСоглашенияДолжность.Видимость = НЕ ИспользоватьШтатноеРасписание;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	БИНОрганизации = ?(Организация.Пустая(), "", ЭТДВызовСервера.БИНОрганизации(Организация));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОсновныеДоговоры

&НаКлиенте
Процедура ОсновныеДоговорыСотрудникПриИзменении(Элемент)
	
	Строка = Элементы.ОсновныеДоговоры.ТекущиеДанные;
	
	ПараметрыСотрудника = ПолучитьПараметрыСотрудника(Строка.Сотрудник);
	
	Строка.ИИНДляПроверки = ПараметрыСотрудника.ИИН;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеДоговорыДолжностьПриИзменении(Элемент)
	
	Строка = Элементы.ОсновныеДоговоры.ТекущиеДанные;
	Если ЗначениеЗаполнено(Строка.КодДолжности) Тогда
		Строка.КодДолжностиДляПроверки = ПолучитьКодДолжностиНаСервере(КонецПериода, Строка.Должность, Строка.ДолжностьПоШтатномуРасписанию, Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеДоговорыДоговорЭТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Строка = Элементы.ОсновныеДоговоры.ТекущиеДанные;
	
	ПараметрыОткрытияФормы = Новый Структура();
	
	ПараметрыОткрытияФормы.Вставить("ВыбранноеЗначение", Строка.Идентификатор);
	ПараметрыОткрытияФормы.Вставить("Организация"	  , Организация);
	ПараметрыОткрытияФормы.Вставить("Сотрудник"		, Строка.Сотрудник);
	ПараметрыОткрытияФормы.Вставить("ЭтоДополнительноеСоглашение", Ложь);
	
	ОткрытьФорму("Документ.ЭТД.Форма.ФормаВыбора"
		, ПараметрыОткрытияФормы
		,,,,,Новый ОписаниеОповещения("ОбработатьВыборДоговора",ЭтотОбъект));
		
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеДоговорыСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЭТДКлиент.ОткрытиеФормыВыбораСотрудника(Организация, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеДоговорыДолжностьПоШтатномуРасписаниюПриИзменении(Элемент)
	
	Строка = Элементы.ОсновныеДоговоры.ТекущиеДанные;
	ДанныеДолжности = ПолучитьДанныеДолжностиПоШтатномуРасписанию(КонецПериода, Строка.ДолжностьПоШтатномуРасписанию, Организация);
	
	Если ЗначениеЗаполнено(Строка.КодДолжности) Тогда
		ЗаполнитьЗначенияСвойств(Строка, ДанныеДолжности);
	Иначе
		ЗаполнитьЗначенияСвойств(Строка, ДанныеДолжности,, "КодДолжностиДляПроверки");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеДоговорыДолжностьПоШтатномуРасписаниюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЭТДКлиент.ОткрытиеФормыВыбораДолжностиПоШтатномуРасписанию(Организация, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеДоговорыПередУдалением(Элемент, Отказ)
	
	ИдентификаторУдаляемогоОсновногоДоговора = Элемент.ТекущиеДанные.Идентификатор;
	ПараметрыОтбора = Новый Структура("ИдентификаторОсновногоЭТД", ИдентификаторУдаляемогоОсновногоДоговора);
	УдаляемыеДополнительныеСоглашения = ДополнительныеСоглашения.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаСоглашение Из УдаляемыеДополнительныеСоглашения Цикл
		ДополнительныеСоглашения.Удалить(СтрокаСоглашение);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеДоговорыДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокТипов = ЭТДКлиент.ПолучитьСписокВыбораДокументОснованиеЭТД();
	Оповещение = Новый ОписаниеОповещения("ОткрытиеФормыВыбораДокументаОснования", ЭтотОбъект);
	
	СписокТипов.ПоказатьВыборЭлемента(Оповещение, НСтр("ru = 'Выбор типа документа'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеДоговорыДокументОснованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	ЭТДКлиент.ОсновныеДоговорыДокументОснованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДополнительныеСоглашения

&НаКлиенте
Процедура ДополнительныеСоглашенияДоговорЭТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Строка = Элементы.ДополнительныеСоглашения.ТекущиеДанные;
	
	ПараметрыОткрытияФормы = Новый Структура();
	
	ПараметрыОткрытияФормы.Вставить("ВыбранноеЗначение", Строка.Идентификатор);
	ПараметрыОткрытияФормы.Вставить("Организация"	  , Организация);
	ПараметрыОткрытияФормы.Вставить("Сотрудник"		, Строка.Сотрудник);
	ПараметрыОткрытияФормы.Вставить("ЭтоДополнительноеСоглашение", Истина);
	
	ОткрытьФорму("Документ.ЭТД.Форма.ФормаВыбора"
		, ПараметрыОткрытияФормы
		, Строка.Идентификатор,,,,Новый ОписаниеОповещения("ОбработатьВыборДоговораДопСоглашения",ЭтотОбъект));

КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеСоглашенияСотрудникПриИзменении(Элемент)
	
	Строка = Элементы.ДополнительныеСоглашения.ТекущиеДанные;
	
	ПараметрыСотрудника = ПолучитьПараметрыСотрудника(Строка.Сотрудник);
	
	Строка.ИИНДляПроверки = ПараметрыСотрудника.ИИН;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеСоглашенияСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЭТДКлиент.ОткрытиеФормыВыбораСотрудника(Организация, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеСоглашенияДолжностьПриИзменении(Элемент)
	
	Строка = Элементы.ДополнительныеСоглашения.ТекущиеДанные;
	Если ЗначениеЗаполнено(Строка.КодДолжности) Тогда
		Строка.КодДолжностиДляПроверки = ПолучитьКодДолжностиНаСервере(КонецПериода, Строка.Должность, Строка.ДолжностьПоШтатномуРасписанию, Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеСоглашенияДолжностьПоШтатномуРасписаниюПриИзменении(Элемент)
	
	Строка = Элементы.ДополнительныеСоглашения.ТекущиеДанные;
	ДанныеДолжности = ПолучитьДанныеДолжностиПоШтатномуРасписанию(КонецПериода, Строка.ДолжностьПоШтатномуРасписанию, Организация);
	
	Если ЗначениеЗаполнено(Строка.КодДолжности) Тогда
		ЗаполнитьЗначенияСвойств(Строка, ДанныеДолжности);
	Иначе
		ЗаполнитьЗначенияСвойств(Строка, ДанныеДолжности,, "КодДолжностиДляПроверки");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеСоглашенияДолжностьПоШтатномуРасписаниюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЭТДКлиент.ОткрытиеФормыВыбораДолжностиПоШтатномуРасписанию(Организация, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеСоглашенияДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокТипов = ЭТДКлиент.ПолучитьСписокВыбораДокументОснованиеЭТД();
	Оповещение = Новый ОписаниеОповещения("ОткрытиеФормыВыбораДокументаОснования", ЭтотОбъект);
	
	СписокТипов.ПоказатьВыборЭлемента(Оповещение, НСтр("ru = 'Выбор типа документа'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеСоглашенияДокументОснованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	ЭТДКлиент.ДополнительныеСоглашенияДокументОснованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Далее(Команда)
	
	РаботаКнопокНавигации(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	РаботаКнопокНавигации(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭТД(Команда)
	
	Если ПроверкаЗаполненностиДокументаОснования(СтраницаМастера) Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьЭТДНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	
	СтраницаМастера = 7;
	Если ПроверкаЗаполненностиПолей(СтраницаМастера) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПерезаполнитьСуществующиеЭТД Тогда
		ЗагрузкаДанныхСинхронизации();
	КонецЕсли;
	
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(Команда)
	
	ОбновитьДанныеДляСопоставленияНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура РаботаКнопокНавигации(Вперед)
	
	Если НЕ СтраницаМастера = 0 И СтраницаМастера <= 6 Тогда
		СтраницаМастера = ?(Вперед,СтраницаМастера+1,СтраницаМастера-1);
	КонецЕсли;
	
	Если СтраницаМастера = 0 Тогда
		Если Вперед Тогда
			
			ОбщиеНавыки.Очистить();
			СпециальныеНавыки.Очистить();
			ОбщиеНавыкиДоп.Очистить();
			СпециальныеНавыкиДоп.Очистить();
			
			ОсновныеДоговоры.Очистить();
			ДополнительныеСоглашения.Очистить();
			
			ВызовФормыПодписи();
		Иначе
			Элементы.СотрудникиОсновные.Видимость = Ложь;
			Элементы.НачальнаяСтраница.Видимость  = Истина;
			Элементы.Назад.Видимость			  = Ложь;
			Элементы.Далее.ОтображениеПодсказки   = ОтображениеПодсказки.ОтображатьСлева;
			Элементы.ОбновитьДанные.Видимость	  = Ложь;
		КонецЕсли;
	ИначеЕсли СтраницаМастера = 1 Тогда // Сотрудники
		
		Если ПроверкаЗаполненностиПолей(СтраницаМастера) И Вперед Тогда
			Возврат;
		КонецЕсли;
		
		Элементы.Таблица.Заголовок = НСтр("ru = 'Сопоставление сотрудников организации с сотрудниками из ЕСУТД по ИИН'");
		Элементы.СотрудникиОсновные.Видимость = Истина;
		Элементы.ДолжностиОсновные.Видимость  = Ложь;
		
	ИначеЕсли СтраницаМастера = 2 Тогда // Должности
		
		Если ПроверкаЗаполненностиПолей(СтраницаМастера) И Вперед Тогда
			Возврат;
		КонецЕсли;
		
		Элементы.Таблица.Заголовок = НСтр("ru = 'Сопоставление должностей сотрудников организации с должностями из ЕСУТД по коду должности'");
		Элементы.СотрудникиОсновные.Видимость  = Ложь;
		Элементы.ДолжностиОсновные.Видимость   = Истина;
		Элементы.ДоговорыЭТДОсновные.Видимость = Ложь;
		Элементы.СоздатьЭТД.Видимость		  = Ложь;

	ИначеЕсли СтраницаМастера = 3 Тогда // Договоры
		
		Если ПроверкаЗаполненностиПолей(СтраницаМастера) И Вперед Тогда
			Возврат;
		КонецЕсли;
		
		Элементы.Таблица.Заголовок = НСтр("ru = 'Сопоставление основных договоров сотрудников организации с договорами из ЕСУТД по идентификатору'");
		Элементы.ДолжностиОсновные.Видимость		= Ложь;
		Элементы.ДоговорыЭТДОсновные.Видимость	  = Истина;
		Элементы.СоздатьЭТД.Видимость			   = Истина;
		Элементы.ДолжностиДополнительные.Видимость  = Ложь;
		Элементы.СотрудникиДополнительные.Видимость = Ложь;
		
	ИначеЕсли СтраницаМастера = 4 Тогда // Сотрудники доп
		
		Если ПроверкаЗаполненностиПолей(СтраницаМастера) И Вперед Тогда
			Возврат;
		КонецЕсли;
		
		Элементы.ТаблицаДоп.Заголовок = НСтр("ru = 'Сопоставление сотрудников организации с сотрудниками из ЕСУТД по ИИН (дополнительные соглашения)'");
		Элементы.СотрудникиДополнительные.Видимость  = Истина;
		Элементы.ДолжностиДополнительные.Видимость   = Ложь;
		Элементы.ДоговорыЭТДОсновные.Видимость	   = Ложь;
		Элементы.СоздатьЭТД.Видимость				= Ложь;
		
	ИначеЕсли СтраницаМастера = 5 Тогда // Должности доп
		
		Если ПроверкаЗаполненностиПолей(СтраницаМастера) И Вперед Тогда
			Возврат;
		КонецЕсли;
		
		Элементы.ТаблицаДоп.Заголовок = НСтр("ru = 'Сопоставление должностей сотрудников организации с должностями из ЕСУТД по коду должности (дополнительные соглашения)'");
		Элементы.ДолжностиДополнительные.Видимость   = Истина;
		Элементы.СотрудникиДополнительные.Видимость  = Ложь;
		Элементы.ДоговорыЭТДДополнительные.Видимость = Ложь;
		Элементы.Готово.Видимость					= Ложь;
		Элементы.СоздатьЭТД.Видимость				= Ложь;
		Элементы.Далее.Видимость					 = Истина;
		
		
	ИначеЕсли СтраницаМастера = 6 Тогда // Договоры доп
		
		Если ПроверкаЗаполненностиПолей(СтраницаМастера) И Вперед Тогда
			Возврат;
		КонецЕсли;
		
		Элементы.ТаблицаДоп.Заголовок = НСтр("ru = 'Сопоставление договоров сотрудников организации с договорами из ЕСУТД по идентификатору (дополнительные соглашения)'");
		Элементы.ДолжностиДополнительные.Видимость   = Ложь; 
		Элементы.СоздатьЭТД.Видимость				= Истина;
		Элементы.ДоговорыЭТДДополнительные.Видимость = Истина;
		Элементы.Далее.Видимость					 = Ложь;
		Элементы.Готово.Видимость					= Истина;
		
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибкеЗаполненияТаблицы(ТекстОшибки, Поле, Индекс, Таблица = "ОсновныеДоговоры")
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстОшибки;
	Сообщение.Поле  = Таблица + "[" + Индекс + "]." + Поле;
	Сообщение.Сообщить();	
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибкеЗаполнения(ТекстОшибки, ЭлементФормы)
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстОшибки;
	Сообщение.Поле = ЭлементФормы.Имя;
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИдентификаторДоговораЭТД(Договор)
	Возврат Договор.Идентификатор;
КонецФункции

&НаКлиенте
Функция ПроверкаЗаполненностиПолей(СтраницаМастера)
	
	ОшибкаЗаполнения = Ложь;
	
	ОчиститьСообщения();
	
	Если СтраницаМастера = 2 ИЛИ СтраницаМастера = 3 ИЛИ СтраницаМастера = 4 Тогда
		
		Для Каждого Строка Из ОсновныеДоговоры Цикл
			
			Индекс = ОсновныеДоговоры.Индекс(Строка);
			
			Если СтраницаМастера = 2 Тогда
				
				Если НЕ ЗначениеЗаполнено(Строка.Сотрудник) Тогда
					СообщитьОбОшибкеЗаполненияТаблицы(НСтр("ru = 'Поле Сотрудник не заполнено.'"), "Сотрудник", Индекс);
					ОшибкаЗаполнения = Истина;
				ИначеЕсли Строка.ИИНРаботника <> Строка.ИИНДляПроверки Тогда
					СообщитьОбОшибкеЗаполненияТаблицы(НСтр("ru = 'ИИН сотрудника не соответствует переданному сервисом.'"), "Сотрудник", Индекс);
					ОшибкаЗаполнения = Истина;
				КонецЕсли;
				
			ИначеЕсли СтраницаМастера = 3 Тогда
				
				Если НЕ ЗначениеЗаполнено(Строка.Должность) И НЕ ЗначениеЗаполнено(Строка.ДолжностьПоШтатномуРасписанию) Тогда
					Если ИспользоватьШтатноеРасписание Тогда
						ПолеДолжность = "ДолжностьПоШтатномуРасписанию";
					Иначе
						ПолеДолжность = "Должность";
					КонецЕсли;
					СообщитьОбОшибкеЗаполненияТаблицы(НСтр("ru = 'Поле Должность не заполнено.'"), ПолеДолжность, Индекс);
					ОшибкаЗаполнения = Истина;
				ИначеЕсли НЕ ЗначениеЗаполнено(Строка.КодДолжностиДляПроверки) И ЗначениеЗаполнено(Строка.КодДолжности) Тогда
					СообщитьОбОшибкеЗаполненияТаблицы(НСтр("ru = 'Поле Код должности не заполнено. Требуется сделать сопоставление должностей.'"), "КодДолжностиДляПроверки", Индекс);
					ОшибкаЗаполнения = Истина;
				ИначеЕсли Строка.КодДолжности <> Строка.КодДолжностиДляПроверки Тогда
					СообщитьОбОшибкеЗаполненияТаблицы(НСтр("ru = 'Код должности не соответствует переданному сервисом.'"), "КодДолжностиДляПроверки", Индекс);
					ОшибкаЗаполнения = Истина;
				КонецЕсли;
				
			ИначеЕсли СтраницаМастера = 4 Тогда
				
				Если НЕ ЗначениеЗаполнено(Строка.ДоговорЭТД) Тогда
					СообщитьОбОшибкеЗаполненияТаблицы(НСтр("ru = 'Поле Договор ЭТД не заполнено.'"), "ДоговорЭТД", Индекс);
					ОшибкаЗаполнения = Истина;
				Иначе
					ИдентификаторДокумента = ПолучитьИдентификаторДоговораЭТД(Строка.ДоговорЭТД);
					Если ЗначениеЗаполнено(ИдентификаторДокумента) И ИдентификаторДокумента <> Строка.Идентификатор Тогда
						СообщитьОбОшибкеЗаполненияТаблицы(НСтр("ru = 'Выбранный договор не соответствует идентификатору, переданному сервисом.'"), "ДоговорЭТД", Индекс);
						ОшибкаЗаполнения = Истина;
					ИначеЕсли НЕ ЗначениеЗаполнено(Строка.ДокументОснование) И НЕ Строка.ОснованиеОтсутствует Тогда
						СообщитьОбОшибкеЗаполненияТаблицы(НСтр("ru = 'Поле Документ-основание не заполнено.'"), "ДокументОснование", Индекс);
						ОшибкаЗаполнения = Истина;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтраницаМастера = 5 ИЛИ СтраницаМастера = 6 ИЛИ СтраницаМастера = 7 Тогда
		
		Для Каждого Строка Из ДополнительныеСоглашения Цикл
			
			Индекс = ДополнительныеСоглашения.Индекс(Строка);
			
			Если СтраницаМастера = 5 Тогда
				
				Если НЕ ЗначениеЗаполнено(Строка.Сотрудник) Тогда
					СообщитьОбОшибкеЗаполненияТаблицы(НСтр("ru = 'Поле Сотрудник не заполнено.'"), "Сотрудник", Индекс, "ДополнительныеСоглашения");
					ОшибкаЗаполнения = Истина;
				ИначеЕсли Строка.ИИНРаботника <> Строка.ИИНДляПроверки Тогда
					СообщитьОбОшибкеЗаполненияТаблицы(НСтр("ru = 'ИИН сотрудника не соответствует переданному сервисом.'"), "Сотрудник", Индекс, "ДополнительныеСоглашения");
					ОшибкаЗаполнения = Истина;
				КонецЕсли;
				
			ИначеЕсли СтраницаМастера = 6 Тогда
				
				Если НЕ ЗначениеЗаполнено(Строка.Должность) И НЕ ЗначениеЗаполнено(Строка.ДолжностьПоШтатномуРасписанию) Тогда
					Если ИспользоватьШтатноеРасписание Тогда
						ПолеДолжность = "ДолжностьПоШтатномуРасписанию";
					Иначе
						ПолеДолжность = "Должность";
					КонецЕсли;
					СообщитьОбОшибкеЗаполненияТаблицы(НСтр("ru = 'Поле Должность не заполнено.'"), ПолеДолжность, Индекс, "ДополнительныеСоглашения");
					ОшибкаЗаполнения = Истина;
				ИначеЕсли НЕ ЗначениеЗаполнено(Строка.КодДолжностиДляПроверки) И ЗначениеЗаполнено(Строка.КодДолжности) Тогда
					СообщитьОбОшибкеЗаполненияТаблицы(НСтр("ru = 'Поле Код должности не заполнено. Требуется сделать сопоставление должностей.'"), "КодДолжностиДляПроверки", Индекс, "ДополнительныеСоглашения");
					ОшибкаЗаполнения = Истина;
				ИначеЕсли Строка.КодДолжности <> Строка.КодДолжностиДляПроверки Тогда
					СообщитьОбОшибкеЗаполненияТаблицы(НСтр("ru = 'Код должности не соответствует переданному сервисом.'"), "КодДолжностиДляПроверки", Индекс, "ДополнительныеСоглашения");
					ОшибкаЗаполнения = Истина;
				КонецЕсли;
				
			ИначеЕсли СтраницаМастера = 7 Тогда
				
				Если НЕ ЗначениеЗаполнено(Строка.ДоговорЭТД) Тогда
					СообщитьОбОшибкеЗаполненияТаблицы(НСтр("ru = 'Поле Договор ЭТД не заполнено.'"), "ДоговорЭТД", Индекс, "ДополнительныеСоглашения");
					ОшибкаЗаполнения = Истина;
				Иначе
					ИдентификаторДокумента = ПолучитьИдентификаторДоговораЭТД(Строка.ДоговорЭТД);
					Если ЗначениеЗаполнено(ИдентификаторДокумента) И ИдентификаторДокумента <> Строка.Идентификатор Тогда
						СообщитьОбОшибкеЗаполненияТаблицы(НСтр("ru = 'Выбранный договор не соответствует идентификатору, переданному сервисом.'"), "ДоговорЭТД", Индекс, "ДополнительныеСоглашения");
						ОшибкаЗаполнения = Истина;
					ИначеЕсли НЕ ЗначениеЗаполнено(Строка.ДокументОснование) И НЕ Строка.ОснованиеОтсутствует Тогда
						СообщитьОбОшибкеЗаполненияТаблицы(НСтр("ru = 'Поле Документ-основание не заполнено.'"), "ДокументОснование", Индекс, "ДополнительныеСоглашения");
						ОшибкаЗаполнения = Истина;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОшибкаЗаполнения Тогда
		СтраницаМастера = СтраницаМастера - 1;
	КонецЕсли;
	
	Возврат ОшибкаЗаполнения;
	
КонецФункции

&НаКлиенте
Функция ПроверкаЗаполненностиДокументаОснования(СтраницаМастера)
	
	ОшибкаЗаполнения = Ложь;
	
	ОчиститьСообщения();
	
	Если СтраницаМастера = 3 Тогда
		
		Для Каждого Строка Из ОсновныеДоговоры Цикл
			
			Индекс = ОсновныеДоговоры.Индекс(Строка);
			
			Если НЕ ЗначениеЗаполнено(Строка.ДоговорЭТД) И НЕ ЗначениеЗаполнено(Строка.ДокументОснование) И НЕ Строка.ОснованиеОтсутствует Тогда
				СообщитьОбОшибкеЗаполненияТаблицы(НСтр("ru = 'Поле Документ-основание не заполнено.'"), "ДокументОснование", Индекс);
				ОшибкаЗаполнения = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли СтраницаМастера = 6 Тогда
		
		Для Каждого Строка Из ДополнительныеСоглашения Цикл
			
			Индекс = ДополнительныеСоглашения.Индекс(Строка);
			
			Если НЕ ЗначениеЗаполнено(Строка.ДоговорЭТД) И НЕ ЗначениеЗаполнено(Строка.ДокументОснование) И НЕ Строка.ОснованиеОтсутствует Тогда
				СообщитьОбОшибкеЗаполненияТаблицы(НСтр("ru = 'Поле Документ-основание не заполнено.'"), "ДокументОснование", Индекс, "ДополнительныеСоглашения");
				ОшибкаЗаполнения = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ОшибкаЗаполнения;
	
КонецФункции

&НаКлиенте
Процедура ВызовФормыПодписи()
	
	Если ПроверкаЗаполненостиШапки() Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыИмпорта = Новый Структура("bin, dateFrom, dateTo",
		БИНОрганизации,
		Формат(НачалоПериода, "ДФ=yyyy-MM-dd"),
		Формат(КонецПериода, "ДФ=yyyy-MM-dd"));
	
	СтруктураДанныхДляПодписи = ПолучитьДанныеДляПодписи(ПараметрыИмпорта);
	ДанныеДляПодписи = СтруктураДанныхДляПодписи.ТелоОтвета;
	
	Если СтруктураДанныхДляПодписи.КодОтвета <> 200 Тогда
		ВызватьИсключение ДанныеДляПодписи;
	КонецЕсли; 
	
	ЗапросСертификатаТребуется = ЭТДВызовСервера.ИспользоватьВнешнююКриптографиюДляКомпоненты();
	
	Если ЗапросСертификатаТребуется Тогда
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("ДанныеДляПодписи", ДанныеДляПодписи);
		
		ПродолжитьОтправкуЧерезНовуюКомпоненту = Новый ОписаниеОповещения("ПродолжитьОтправкуЧерезНовуюКомпоненту", ЭтаФорма, ПараметрыЗаписи);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СтруктурнаяЕдиница", Организация);
		ЭТДКлиент.ОткрытьФормуВводаДанныхЭЦП(ПродолжитьОтправкуЧерезНовуюКомпоненту, ДополнительныеПараметры);
	Иначе
		ПодписанныеДанные = ЭТДКлиентСервер.СоздатьЭЦП_XML_Криптопровайдер(ДанныеДляПодписи, БИНОрганизации);
		
		ОбработкаРезультатаЗапроса(ПодписанныеДанные, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьОтправкуЧерезНовуюКомпоненту(Результат, ПараметрыЗаписи) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Соответствие") Тогда
		ПараметрыКлюча = ЭТДКлиентСервер.ПодготовитьПараметрыКлючаДляПодписи(Результат.Получить(Организация));
		
		Если ЭТДВызовСервера.ВыполнятьКриптографическиеОперацииНаКлиенте() Тогда
			ПодписанныеДанные = ЭТДКлиентСервер.СоздатьЭЦП_XML_Криптопровайдер(ПараметрыЗаписи.ДанныеДляПодписи, БИНОрганизации, ПараметрыКлюча);
		Иначе
			ПодписанныеДанные = ЭТДВызовСервера.СоздатьЭЦП_XML_Криптопровайдер(ПараметрыЗаписи.ДанныеДляПодписи, БИНОрганизации, ПараметрыКлюча);
		КонецЕсли;
		
		ОбработкаРезультатаЗапроса(ПодписанныеДанные, Неопределено);
	ИначеЕсли Результат = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Выбор сертификата отменен пользователем.'");
		
		ОбработкаРезультатаЗапроса(ТекстСообщения, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыСотрудника(Сотрудник)
	
	ПараметрыСотрудника = Новый Структура;
	ПараметрыСотрудника.Вставить("ИИН", ЭТДСервер.ПолучитьИИНПоСотруднику(Сотрудник));
	
	Возврат ПараметрыСотрудника;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеДляПодписи(ПараметрыИмпорта)
	
	Возврат ЭлектронноеВзаимодействиеССервисами.ПодготовитьДанныеДляИмпортаЭТД(ПараметрыИмпорта);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДоговоры(ПараметрыИмпорта)
	
	Возврат ЭлектронноеВзаимодействиеССервисами.ПолучитьДоговорыИмпортЭТД(ПараметрыИмпорта);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТЗПолученнымиДанными(Договоры)
	
	Если НЕ ТипЗнч(Договоры) = Тип("Массив")  Тогда
		СтрокаДанных = ОсновныеДоговоры.Добавить();
		ЭТДСервер.ЗаполнитьЭТДПолученнымиДанными(Договоры, СтрокаДанных, ЭтаФорма);
	Иначе
		
		Для Каждого Договор Из Договоры Цикл
			СтрокаДанных = ОсновныеДоговоры.Добавить();
			ЭТДСервер.ЗаполнитьЭТДПолученнымиДанными(Договор, СтрокаДанных, ЭтаФорма);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеДляСопоставленияНаСервере()
	
	Если СтраницаМастера = 1 ИЛИ СтраницаМастера = 2 ИЛИ СтраницаМастера = 3 Тогда
		Таблица = ОсновныеДоговоры;
	Иначе
		Таблица = ДополнительныеСоглашения;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		Если СтраницаМастера = 1 ИЛИ СтраницаМастера = 4 Тогда
			Сотрудник = ЭТДСервер.ПолучитьСотрудникаПоИИН(СтрокаТаблицы.ИИНРаботника, Организация, СтрокаТаблицы.ДатаЗаключения);
			Если ЗначениеЗаполнено(Сотрудник) Тогда
				СтрокаТаблицы.Сотрудник = Сотрудник;
				СтрокаТаблицы.ИИНДляПроверки = СтрокаТаблицы.ИИНРаботника;
			КонецЕсли;
		ИначеЕсли СтраницаМастера = 2 ИЛИ СтраницаМастера = 5 Тогда
			ПериодДанных = ?(ЗначениеЗаполнено(СтрокаТаблицы.ДатаЗаключения), СтрокаТаблицы.ДатаЗаключения, ТекущаяДатаСеанса());
			Должности = ЭТДСервер.ПолучитьДолжностьПоКоду(СтрокаТаблицы.КодДолжности, СтрокаТаблицы.Организация, ПериодДанных);
			Если Должности <> Неопределено Тогда
				СтрокаТаблицы.Должность = Должности.Должность;
				СтрокаТаблицы.ДолжностьПоШтатномуРасписанию = Должности.ДолжностьПоШтатномуРасписанию;
				СтрокаТаблицы.КодДолжностиДляПроверки = СтрокаТаблицы.КодДолжности;
			КонецЕсли;
		ИначеЕсли СтраницаМастера = 3 ИЛИ СтраницаМастера = 6 Тогда
			СтрокаТаблицы.ДоговорЭТД = ЭТДСервер.ПолучитьЭТДПоИдентификатору(СтрокаТаблицы.Идентификатор);
			Если СтраницаМастера = 6 И ЗначениеЗаполнено(СтрокаТаблицы.ИдентификаторОсновногоЭТД) Тогда
				СтрокаТаблицы.ОсновнойЭТД = ЭТДСервер.ПолучитьЭТДПоИдентификатору(СтрокаТаблицы.ИдентификаторОсновногоЭТД);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаЗапроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка подписи запроса на загрузку ЭТД.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	ИначеЕсли Лев(Результат, 1) <> "<" Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка подписи запроса на загрузку ЭТД: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Результат);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	ДанныеАутентификации = ЭТДВызовСервера.ПолучитьДанныеАутентификации(БИНОрганизации);
	
	ПараметрыИмпорта = Новый Структура("login, ticket, signedData",
	БИНОрганизации,
	ДанныеАутентификации.Тикет,
	Результат);
	
	ДанныеДляПодписи = ПолучитьДоговоры(ПараметрыИмпорта);
	
	Если ДанныеДляПодписи.КодОтвета <> 200 Тогда
		ВызватьИсключение ДанныеДляПодписи.ТелоОтвета;
	КонецЕсли;

	// Чтение
	СтруктураОтвета = Неопределено;
	#Если ВебКлиент Тогда
		СтруктураОтвета = ЭТДВызовСервера.ЭТД_ПрочитатьЗначениеJSON(ДанныеДляПодписи.ТелоОтвета);
	#Иначе
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(ДанныеДляПодписи.ТелоОтвета);
		
		СтруктураОтвета = ПрочитатьJSON(Чтение);
		Чтение.Закрыть();
	#КонецЕсли
	
	ОсновныеДоговоры.Очистить();
	ДополнительныеСоглашения.Очистить();
	ОбщиеНавыки.Очистить();
	СпециальныеНавыки.Очистить();
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтруктураОтвета,"contractData") Тогда
		ВызватьИсключение НСтр("ru = 'За данный период нет данных.'");
	КонецЕсли;
	
	ЗаполнитьТЗПолученнымиДанными(СтруктураОтвета.contractData.contract);
	
	СтраницаМастера = 1;
	Элементы.Таблица.Заголовок			= НСтр("ru = 'Сопоставление сотрудников организации с сотрудниками из ЕСУТД по ИИН'");
	Элементы.СотрудникиОсновные.Видимость = Истина;
	Элементы.НачальнаяСтраница.Видимость  = Ложь;
	Элементы.Далее.ОтображениеПодсказки   = ОтображениеПодсказки.Нет;
	Элементы.Назад.Видимость			  = Истина;
	Элементы.ОбновитьДанные.Видимость	  = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверкаЗаполненостиШапки()

	ЕстьОшибки = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""Организация"" не заполнено.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.Организация);
	ИначеЕсли НЕ ЗначениеЗаполнено(БИНОрганизации) Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='У выбранной организации не заполнен БИН.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.Организация);
	КонецЕсли;
	
 	Если НЕ ЗначениеЗаполнено(НачалоПериода) Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""Начало периода"" не заполнено.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.НачалоПериода);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КонецПериода) Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Поле ""Конец периода"" не заполнено.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Элементы.КонецПериода);
	КонецЕсли;
	
	Возврат ЕстьОшибки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКодДолжностиНаСервере(КонецПериода, Должность, ДолжностьПоШтатномуРасписанию, Организация)
	
	ИнформацияОКодеДолжности = ЭТДСервер.ПолучитьИнформациюОКодеДолжности(КонецПериода, Должность, ДолжностьПоШтатномуРасписанию, Организация);
	
	Возврат ИнформацияОКодеДолжности.КодДолжности;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТЗПоОтбору(ПолеОтбора, ЗначениеПоиска, ТабличнаяЧасть);
	
	Отбор = Новый Структура;
	Отбор.Вставить(ПолеОтбора, ЗначениеПоиска);
	
	ТЗ = ТабличнаяЧасть.Выгрузить();
	Возврат ТЗ.Скопировать(Отбор);

КонецФункции

&НаСервере
Процедура СоздатьЭТДНаСервере()
	
	ОсновныеДоговорыСОтбором		 = ПолучитьТЗПоОтбору("ДоговорЭТД", Документы.ЭТД.ПустаяСсылка(), ОсновныеДоговоры);
	ДополнительныеСоглашенияСОтбором = ПолучитьТЗПоОтбору("ДоговорЭТД", Документы.ЭТД.ПустаяСсылка(), ДополнительныеСоглашения);
	
	Если СтраницаМастера = 3 Тогда
		
		Для Каждого Договор Из ОсновныеДоговорыСОтбором Цикл
			
			ДокументЭТД = Документы.ЭТД.СоздатьДокумент();
			ДокументЭТД.Заполнить(Договор);
			
			ДокументЭТД.ОбщиеНавыки.Загрузить(ПолучитьТЗПоОтбору("Идентификатор", Договор.Идентификатор, ОбщиеНавыки));
			ДокументЭТД.СпециальныеНавыки.Загрузить(ПолучитьТЗПоОтбору("Идентификатор", Договор.Идентификатор, СпециальныеНавыки));
			
			ДокументЭТД.ИзмененияИИНРаботника.Загрузить(ПолучитьТЗПоОтбору("Идентификатор", Договор.Идентификатор, ИзмененияИИНРаботника));
			ДокументЭТД.ВосстановленияНаРаботе.Загрузить(ПолучитьТЗПоОтбору("Идентификатор", Договор.Идентификатор, ВосстановленияНаРаботе));
			ДокументЭТД.РеорганизацияРаботодателя.Загрузить(ПолучитьТЗПоОтбору("Идентификатор", Договор.Идентификатор, РеорганизацияРаботодателя));
			ДокументЭТД.ПролонгацияДоговора.Загрузить(ПолучитьТЗПоОтбору("Идентификатор", Договор.Идентификатор, ПролонгацияДоговора));
			ДокументЭТД.СоциальныеОтпуска.Загрузить(ПолучитьТЗПоОтбору("Идентификатор", Договор.Идентификатор, СоциальныеОтпуска));
			
			ПрисоединенныеФайлы = ПолучитьТЗПоОтбору("Идентификатор", Договор.Идентификатор, ПрисоединенныеФайлыЭТД);
			Для Каждого СтрокаПрисоединенныхФайловЭТД Из ПрисоединенныеФайлы Цикл
				СтрокаПрисоединенныхФайлов = ДокументЭТД.ПрисоединенныеФайлыЭТД.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПрисоединенныхФайлов, СтрокаПрисоединенныхФайловЭТД);
			КонецЦикла;
			
			ДокументЭТД.ЗагруженИзЕСУТД = Истина;
			ДокументЭТД.ОбменДанными.Загрузка = Истина;
			ДокументЭТД.Записать();
			
			ПараметрыОтбора = Новый Структура("Идентификатор", Договор.Идентификатор);
			Договоры = ОсновныеДоговоры.НайтиСтроки(ПараметрыОтбора);
			Если Договоры.Количество() > 0 Тогда
				Договоры[0].ДоговорЭТД = ДокументЭТД.Ссылка;
				Договоры[0].ДанныеЗагружены = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого Договор Из ДополнительныеСоглашенияСОтбором Цикл
			
			ДокументЭТД = Документы.ЭТД.СоздатьДокумент();
			ДокументЭТД.Заполнить(Договор);
			
			ДокументЭТД.ОбщиеНавыки.Загрузить(ПолучитьТЗПоОтбору("Идентификатор", Договор.Идентификатор, ОбщиеНавыкиДоп));
			ДокументЭТД.СпециальныеНавыки.Загрузить(ПолучитьТЗПоОтбору("Идентификатор", Договор.Идентификатор, СпециальныеНавыкиДоп));
			
			ПрисоединенныеФайлы = ПолучитьТЗПоОтбору("Идентификатор", Договор.Идентификатор, ПрисоединенныеФайлыЭТД);
			Для Каждого СтрокаПрисоединенныхФайловЭТД Из ПрисоединенныеФайлы Цикл
				СтрокаПрисоединенныхФайлов = ДокументЭТД.ПрисоединенныеФайлыЭТД.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПрисоединенныхФайлов, СтрокаПрисоединенныхФайловЭТД);
			КонецЦикла;
			
			ДокументЭТД.ОсновнойЭТД = ЭТДСервер.ПолучитьЭТДПоИдентификатору(Договор.ИдентификаторОсновногоЭТД);
			
			ДокументЭТД.ЗагруженИзЕСУТД = Истина;
			ДокументЭТД.ОбменДанными.Загрузка = Истина;
			ДокументЭТД.Записать();
			
			ПараметрыОтбора = Новый Структура("Идентификатор", Договор.Идентификатор);
			Договоры = ДополнительныеСоглашения.НайтиСтроки(ПараметрыОтбора);
			Если Договоры.Количество() > 0 Тогда
				Договоры[0].ДоговорЭТД = ДокументЭТД.Ссылка;
				Договоры[0].ДанныеЗагружены = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузкаДанныхСинхронизации()
	
	Для Каждого ДокументЕСУТД Из ОсновныеДоговоры Цикл
		Если НЕ ДокументЕСУТД.ДанныеЗагружены Тогда
			ЗагрузкаДоговораЭТД(ДокументЕСУТД);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ДокументЕСУТД Из ДополнительныеСоглашения Цикл
		Если НЕ ДокументЕСУТД.ДанныеЗагружены Тогда
			ЗагрузкаДоговораЭТД(ДокументЕСУТД);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузкаДоговораЭТД(ДокументЕСУТД)
	
	Если ЗначениеЗаполнено(ДокументЕСУТД.ДоговорЭТД) Тогда
		ЭТД = ДокументЕСУТД.ДоговорЭТД.ПолучитьОбъект();
	Иначе
		ЭТД = Документы.ЭТД.СоздатьДокумент();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭТД, ДокументЕСУТД);
	
	ЭТД.ОбщиеНавыки.Загрузить(ПолучитьТЗПоОтбору("Идентификатор", ДокументЕСУТД.Идентификатор, ОбщиеНавыки));
	ЭТД.СпециальныеНавыки.Загрузить(ПолучитьТЗПоОтбору("Идентификатор", ДокументЕСУТД.Идентификатор, СпециальныеНавыки));
	
	ЭТД.ИзмененияИИНРаботника.Загрузить(ПолучитьТЗПоОтбору("Идентификатор", ДокументЕСУТД.Идентификатор, ИзмененияИИНРаботника));
	ЭТД.ВосстановленияНаРаботе.Загрузить(ПолучитьТЗПоОтбору("Идентификатор", ДокументЕСУТД.Идентификатор, ВосстановленияНаРаботе));
	ЭТД.РеорганизацияРаботодателя.Загрузить(ПолучитьТЗПоОтбору("Идентификатор", ДокументЕСУТД.Идентификатор, РеорганизацияРаботодателя));
	ЭТД.ПролонгацияДоговора.Загрузить(ПолучитьТЗПоОтбору("Идентификатор", ДокументЕСУТД.Идентификатор, ПролонгацияДоговора));
	ЭТД.СоциальныеОтпуска.Загрузить(ПолучитьТЗПоОтбору("Идентификатор", ДокументЕСУТД.Идентификатор, СоциальныеОтпуска));
	
	ПрисоединенныеФайлы = ПолучитьТЗПоОтбору("Идентификатор", ДокументЕСУТД.Идентификатор, ПрисоединенныеФайлыЭТД);
	Для Каждого СтрокаПрисоединенныхФайловЭТД Из ПрисоединенныеФайлы Цикл
		ПараметрыОтбора = Новый Структура("НаименованиеФайла,ФорматФайла", СтрокаПрисоединенныхФайловЭТД.НаименованиеФайла, СтрокаПрисоединенныхФайловЭТД.ФорматФайла);
		СтрокиПрисоединяемыхДокументов = ЭТД.ПрисоединенныеФайлыЭТД.НайтиСтроки(ПараметрыОтбора);
		Для Каждого СтрокаПрисоединенныхФайлов Из СтрокиПрисоединяемыхДокументов Цикл
			СтрокаПрисоединенныхФайлов.ИдентификаторФайлаЭТД = СтрокаПрисоединенныхФайловЭТД.ИдентификаторФайлаЭТД;
			Прервать;
		КонецЦикла;
	КонецЦикла;
	
	ЭТД.УсловияТруда.Очистить();
	СтрокаУсловияТруда = ЭТД.УсловияТруда.Добавить();
	СтрокаУсловияТруда.УсловиеТруда = ДокументЕСУТД.УсловиеТруда;
	
	ЭТД.ОбменДанными.Загрузка = Истина;
	ЭТД.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДоговора(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		Строка = Элементы.ОсновныеДоговоры.ТекущиеДанные;
		Строка.ДоговорЭТД = Результат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДоговораДопСоглашения(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		Строка = Элементы.ДополнительныеСоглашения.ТекущиеДанные;
		Строка.ДоговорЭТД = Результат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытиеФормыВыбораДокументаОснования(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если СтраницаМастера = 3 Тогда
		Сотрудник = Элементы.ОсновныеДоговоры.ТекущиеДанные.Сотрудник;
	Иначе
		Сотрудник = Элементы.ДополнительныеСоглашения.ТекущиеДанные.Сотрудник;
	КонецЕсли;
	
	ЭТДКлиент.ОткрытиеФормыВыбораДокументаОснования(ВыбранныйЭлемент, Организация, Сотрудник, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораДокументаОснования(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если СтраницаМастера = 3 Тогда
		ТекущаяСтрока = Элементы.ОсновныеДоговоры.ТекущиеДанные;
	Иначе
		ТекущаяСтрока = Элементы.ДополнительныеСоглашения.ТекущиеДанные;
	КонецЕсли;
	
	ТекущаяСтрока.ДокументОснование = РезультатЗакрытия;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеДолжностиПоШтатномуРасписанию(КонецПериода, ДолжностьПоШтатномуРасписанию, Организация)
	
	ДанныеДолжности = Новый Структура("Должность,КодДолжностиДляПроверки");
	ДанныеДолжности.Должность = ЭТДСервер.ПолучитьДолжностьОрганизации(ДолжностьПоШтатномуРасписанию);
	ДанныеДолжности.КодДолжностиДляПроверки = ПолучитьКодДолжностиНаСервере(КонецПериода, ДанныеДолжности.Должность, ДолжностьПоШтатномуРасписанию, Организация);
	
	Возврат ДанныеДолжности;
	
КонецФункции

#КонецОбласти
