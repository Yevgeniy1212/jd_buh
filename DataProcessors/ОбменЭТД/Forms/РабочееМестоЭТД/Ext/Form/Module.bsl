
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьШтатноеРасписание = ЭТДСервер.ИспользоватьШтатноеРасписание();
	Элементы.ОсновныеДоговорыДолжность.Видимость = НЕ ИспользоватьШтатноеРасписание;
	Элементы.ОсновныеДоговорыДолжностьПоШтатномуРасписанию.Видимость = ИспользоватьШтатноеРасписание;
	Элементы.ДополнительныеСоглашенияДолжность.Видимость = НЕ ИспользоватьШтатноеРасписание;
	Элементы.ДополнительныеСоглашенияДолжностьПоШтатномуРасписанию.Видимость = ИспользоватьШтатноеРасписание;
	
	ЭТДСервер.ПриСозданииНаСервереРабочееМестоЭТД(ЭтотОбъект, Отказ, СтандартнаяОбработка);

	Организация = ЭТДСервер.ОрганизацияПоУмолчанию();
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ДекорацияВсеОсновные.ЦветФона = ЦветФонаВыбранногоФильтра();
	Элементы.ДекорацияНеотправленныеОсновные.ЦветФона = ЦветФонаНеактивногоФильтра();
	Элементы.ДекорацияНесозданныеОсновные.ЦветФона = ЦветФонаНеактивногоФильтра();
	
	Элементы.ДекорацияВсеДополнительные.ЦветФона = ЦветФонаВыбранногоФильтра();
	Элементы.ДекорацияНеотправленныеДополнительные.ЦветФона = ЦветФонаНеактивногоФильтра();
	Элементы.ДекорацияНесозданныеДополнительные.ЦветФона = ЦветФонаНеактивногоФильтра();
	
	СменитьФильтрОсновной("ПустаяСсылка");
	СменитьФильтрДополнительно("ПустаяСсылка");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Оповещение = Новый ОписаниеОповещения("ПослеОтветаЗакрытьФорму", ЭтотОбъект);
	ПоказатьВопрос(Оповещение
		, НСтр("ru = 'Все изменения не сохранятся. Действительно закрыть форму?'")
		, РежимДиалогаВопрос.ДаНет
		,
		, КодВозвратаДиалога.Нет
		, НСтр("ru = 'Закрытие формы'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ФоновоеЗаданиеЭТД_ОбновлениеСтатусов"
		ИЛИ ИмяСобытия = "ЭТД_ЗаписьЭТД" Тогда
		ПерезаполнитьТаблицыДанных(); // Обновление даты синхронизации по результатам работы события
	ИначеЕсли ИмяСобытия = "ФоновоеЗаданиеЭТД_Отправка" Тогда
		Результат = ПолучитьИзВременногоХранилища(Параметр.АдресРезультата);
		КоличествоЭТД = Результат.МассивЭТДБезОшибок.Количество();
		Если Результат.ТелоОтвета = Строка(КоличествоЭТД) Тогда
			СменитьСтатусЭТД(Результат.МассивЭТДБезОшибок, "ОжиданиеОтвета");
		КонецЕсли;
		ПерезаполнитьТаблицыДанных();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВсеОсновныеНажатие(Элемент)
	
	Элементы.ОсновныеДоговоры.ОтборСтрок = Неопределено;
	
	Элементы.ДекорацияВсеОсновные.ЦветФона             = ЦветФонаВыбранногоФильтра();
	Элементы.ДекорацияНеотправленныеОсновные.ЦветФона  = ЦветФонаНеактивногоФильтра();
	Элементы.ДекорацияНесозданныеОсновные.ЦветФона     = ЦветФонаНеактивногоФильтра();
	Элементы.ДекорацияВОжиданииОтветаОсновные.ЦветФона = ЦветФонаНеактивногоФильтра();
	Элементы.ОсновныеДоговорыОтправить.Видимость       = Ложь;
	Элементы.ОсновныеДоговорыВыбрать.Видимость         = Истина;
	Элементы.ОсновныеДоговорыИсключить.Видимость       = Истина;
	Элементы.ОсновныеДоговорыСоздать.Видимость         = Истина;
	Элементы.ОсновныеДоговорыОбновитьСтатус.Видимость  = Ложь;
	
	Для Каждого СтрокаОсновные Из ОсновныеДоговоры Цикл
		
		Если НЕ СтрокаОсновные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭТД.ПустаяСсылка")
			И СтрокаОсновные.Выбран Тогда
			
			СтрокаОсновные.Выбран = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СменитьФильтрОсновной("ПустаяСсылка");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНесозданныеОсновныеНажатие(Элемент)
	
	Отбор = Новый Структура("ЭТДСсылка", ПредопределенноеЗначение("Документ.ЭТД.ПустаяСсылка"));
	Элементы.ОсновныеДоговоры.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	
	Элементы.ДекорацияВсеОсновные.ЦветФона                   = ЦветФонаНеактивногоФильтра();
	Элементы.ДекорацияНеотправленныеОсновные.ЦветФона        = ЦветФонаНеактивногоФильтра();
	Элементы.ДекорацияНесозданныеОсновные.ЦветФона           = ЦветФонаВыбранногоФильтра();
	Элементы.ДекорацияВОжиданииОтветаОсновные.ЦветФона = ЦветФонаНеактивногоФильтра();
	Элементы.ОсновныеДоговорыОбновитьСтатус.Видимость        = Ложь;
	Элементы.ОсновныеДоговорыСоздать.Видимость               = Истина;
	Элементы.ОсновныеДоговорыВыбрать.Видимость               = Истина;
	Элементы.ОсновныеДоговорыИсключить.Видимость             = Истина;
	Элементы.ОсновныеДоговорыОтправить.Видимость             = Ложь;
	
	Для Каждого СтрокаОсновные Из ОсновныеДоговоры Цикл
		
		Если НЕ СтрокаОсновные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭТД.ПустаяСсылка")
			И СтрокаОсновные.Выбран Тогда
			
			СтрокаОсновные.Выбран = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СменитьФильтрОсновной("ПустаяСсылка");

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНеотправленныеОсновныеНажатие(Элемент)
	
	Отбор = Новый Структура("Статус", ПредопределенноеЗначение("Перечисление.СтатусыЭТД.Сформирован"));

	Элементы.ОсновныеДоговоры.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	
	Элементы.ДекорацияВсеОсновные.ЦветФона             = ЦветФонаНеактивногоФильтра();
	Элементы.ДекорацияНеотправленныеОсновные.ЦветФона  = ЦветФонаВыбранногоФильтра();
	Элементы.ДекорацияНесозданныеОсновные.ЦветФона     = ЦветФонаНеактивногоФильтра();
	Элементы.ДекорацияВОжиданииОтветаОсновные.ЦветФона = ЦветФонаНеактивногоФильтра();
	Элементы.ОсновныеДоговорыСоздать.Видимость         = Ложь;
	Элементы.ОсновныеДоговорыВыбрать.Видимость         = Истина;
	Элементы.ОсновныеДоговорыИсключить.Видимость       = Истина;
	Элементы.ОсновныеДоговорыОтправить.Видимость       = Истина;
	Элементы.ОсновныеДоговорыОбновитьСтатус.Видимость  = Ложь;
	
	Для Каждого СтрокаОсновные Из ОсновныеДоговоры Цикл
		
		Если НЕ СтрокаОсновные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭТД.Сформирован")
			И СтрокаОсновные.Выбран Тогда
			
			СтрокаОсновные.Выбран = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СменитьФильтрОсновной("Сформирован");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВсеДополнительныеНажатие(Элемент)
	
	Элементы.ДополнительныеСоглашения.ОтборСтрок = Неопределено;
	
	Элементы.ДекорацияВсеДополнительные.ЦветФона              = ЦветФонаВыбранногоФильтра();
	Элементы.ДекорацияНеотправленныеДополнительные.ЦветФона   = ЦветФонаНеактивногоФильтра();
	Элементы.ДекорацияНесозданныеДополнительные.ЦветФона      = ЦветФонаНеактивногоФильтра();
	Элементы.ДекорацияВОжиданииОтветаДополнительные.ЦветФона  = ЦветФонаНеактивногоФильтра();
	Элементы.ДополнительныеСоглашенияСоздать.Видимость        = Истина;
	Элементы.ДополнительныеСоглашенияВыбрать.Видимость        = Истина;
	Элементы.ДополнительныеСоглашенияИсключить.Видимость      = Истина;
	Элементы.ДополнительныеСоглашенияОтправить.Видимость      = Ложь;
	Элементы.ДополнительныеСоглашенияОбновитьСтатус.Видимость = Ложь;
	
	СменитьФильтрДополнительно("ПустаяСсылка");
	
	Для Каждого СтрокаДополнительные Из ДополнительныеСоглашения Цикл
		
		Если НЕ СтрокаДополнительные.ДопСоглашениеСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЭТД.ПустаяСсылка")
			И СтрокаДополнительные.Выбран Тогда
			
			СтрокаДополнительные.Выбран = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНесозданныеДополнительныеНажатие(Элемент)
	
	Отбор = Новый Структура("ДопСоглашениеСсылка", ПредопределенноеЗначение("Документ.ЭТД.ПустаяСсылка"));
	Элементы.ДополнительныеСоглашения.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	
	Элементы.ДекорацияВсеДополнительные.ЦветФона              = ЦветФонаНеактивногоФильтра();
	Элементы.ДекорацияНеотправленныеДополнительные.ЦветФона   = ЦветФонаНеактивногоФильтра();
	Элементы.ДекорацияНесозданныеДополнительные.ЦветФона      = ЦветФонаВыбранногоФильтра();
	Элементы.ДекорацияВОжиданииОтветаДополнительные.ЦветФона  = ЦветФонаНеактивногоФильтра();
	Элементы.ДополнительныеСоглашенияСоздать.Видимость        = Истина;
	Элементы.ДополнительныеСоглашенияВыбрать.Видимость        = Истина;
	Элементы.ДополнительныеСоглашенияИсключить.Видимость      = Истина;
	Элементы.ДополнительныеСоглашенияОтправить.Видимость      = Ложь;
	Элементы.ДополнительныеСоглашенияОбновитьСтатус.Видимость = Ложь;
	
	Для Каждого СтрокаДополнительные Из ДополнительныеСоглашения Цикл
		
		Если НЕ СтрокаДополнительные.ДопСоглашениеСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЭТД.ПустаяСсылка")
			И СтрокаДополнительные.Выбран Тогда
			
			СтрокаДополнительные.Выбран = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СменитьФильтрДополнительно("ПустаяСсылка");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНеотправленныеДополнительныеНажатие(Элемент)
	
	Отбор = Новый Структура("ДопСоглашениеСтатус", ПредопределенноеЗначение("Перечисление.СтатусыЭТД.Сформирован"));
	Элементы.ДополнительныеСоглашения.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	
	Элементы.ДекорацияВсеДополнительные.ЦветФона              = ЦветФонаНеактивногоФильтра();
	Элементы.ДекорацияНеотправленныеДополнительные.ЦветФона   = ЦветФонаВыбранногоФильтра();
	Элементы.ДекорацияНесозданныеДополнительные.ЦветФона      = ЦветФонаНеактивногоФильтра();
	Элементы.ДекорацияВОжиданииОтветаДополнительные.ЦветФона  = ЦветФонаНеактивногоФильтра();
	Элементы.ДополнительныеСоглашенияСоздать.Видимость        = Ложь;
	Элементы.ДополнительныеСоглашенияВыбрать.Видимость        = Истина;
	Элементы.ДополнительныеСоглашенияИсключить.Видимость      = Истина;
	Элементы.ДополнительныеСоглашенияОтправить.Видимость      = Истина;
	Элементы.ДополнительныеСоглашенияОбновитьСтатус.Видимость = Ложь;
	
	Для Каждого СтрокаДополнительные Из ДополнительныеСоглашения Цикл
		
		Если НЕ СтрокаДополнительные.ДопСоглашениеСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЭТД.Сформирован")
			И СтрокаДополнительные.Выбран Тогда
			
			СтрокаДополнительные.Выбран = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СменитьФильтрДополнительно("Сформирован");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВОжиданииОтветаНажатие(Элемент)
	
	Отбор = Новый Структура("Статус", ПредопределенноеЗначение("Перечисление.СтатусыЭТД.ОжиданиеОтвета"));

	Элементы.ОсновныеДоговоры.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	
	Элементы.ДекорацияВсеОсновные.ЦветФона             = ЦветФонаНеактивногоФильтра();
	Элементы.ДекорацияНеотправленныеОсновные.ЦветФона  = ЦветФонаНеактивногоФильтра();
	Элементы.ДекорацияНесозданныеОсновные.ЦветФона     = ЦветФонаНеактивногоФильтра();
	Элементы.ДекорацияВОжиданииОтветаОсновные.ЦветФона = ЦветФонаВыбранногоФильтра();
	Элементы.ОсновныеДоговорыСоздать.Видимость         = Ложь;
	Элементы.ОсновныеДоговорыВыбрать.Видимость         = Ложь;
	Элементы.ОсновныеДоговорыИсключить.Видимость       = Ложь;
	Элементы.ОсновныеДоговорыОтправить.Видимость       = Ложь;
	Элементы.ОсновныеДоговорыОбновитьСтатус.Видимость  = Истина;
	
	Для Каждого СтрокаОсновные Из ОсновныеДоговоры Цикл
		
		Если НЕ СтрокаОсновные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭТД.ОжиданиеОтвета")
			И СтрокаОсновные.Выбран Тогда
			
			СтрокаОсновные.Выбран = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СменитьФильтрОсновной("ОжиданиеОтвета");

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВОжиданииОтветаДополнительныеНажатие(Элемент)
	
	Отбор = Новый Структура("ДопСоглашениеСтатус", ПредопределенноеЗначение("Перечисление.СтатусыЭТД.ОжиданиеОтвета"));

	Элементы.ДополнительныеСоглашения.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	
	Элементы.ДекорацияВсеДополнительные.ЦветФона              = ЦветФонаНеактивногоФильтра();
	Элементы.ДекорацияНеотправленныеДополнительные.ЦветФона   = ЦветФонаНеактивногоФильтра();
	Элементы.ДекорацияНесозданныеДополнительные.ЦветФона      = ЦветФонаНеактивногоФильтра();
	Элементы.ДекорацияВОжиданииОтветаДополнительные.ЦветФона  = ЦветФонаВыбранногоФильтра();
	Элементы.ДополнительныеСоглашенияСоздать.Видимость        = Ложь;
	Элементы.ДополнительныеСоглашенияВыбрать.Видимость        = Ложь;
	Элементы.ДополнительныеСоглашенияИсключить.Видимость      = Ложь;
	Элементы.ДополнительныеСоглашенияОтправить.Видимость      = Ложь;
	Элементы.ДополнительныеСоглашенияОбновитьСтатус.Видимость = Истина;
	
	Для Каждого СтрокаДополнительные Из ДополнительныеСоглашения Цикл
		
		Если НЕ СтрокаДополнительные.ДопСоглашениеСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЭТД.ОжиданиеОтвета")
			И СтрокаДополнительные.Выбран Тогда
			
			СтрокаДополнительные.Выбран = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СменитьФильтрДополнительно("ОжиданиеОтвета");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОсновныеДоговоры

&НаКлиенте
Процедура ОсновныеДоговорыМестоРаботыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЭТДКлиент.ОсновныеДоговорыМестоРаботыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеДоговорыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле.Имя = "ОсновныеДоговорыСотрудник" Тогда
		ПоказатьЗначение( , Элемент.ТекущиеДанные.Сотрудник);
	Иначе
		ПоказатьЗначение( , Элемент.ТекущиеДанные.ЭТДСсылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДополнительныеСоглашения

&НаКлиенте
Процедура ДополнительныеСоглашенияМестоРаботыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЭТДКлиент.ДополнительныеСоглашенияМестоРаботыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, ЭтаФорма)
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеСоглашенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Поле.Имя = "ДополнительныеСоглашенияСотрудник" Тогда
		ПоказатьЗначение( , Элемент.ТекущиеДанные.Сотрудник);
	Иначе
		ПоказатьЗначение( , Элемент.ТекущиеДанные.ДопСоглашениеСсылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДоговорыУволенных

&НаКлиенте
Процедура ДоговорыУволенныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьЗначение( , Элемент.ТекущиеДанные.ЭТДСсылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПросроченныеДоговоры

&НаКлиенте
Процедура ПросроченныеДоговорыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьЗначение( , Элемент.ТекущиеДанные.ЭТДСсылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВосстановленныеДоговоры

&НаКлиенте
Процедура ВосстановленныеДоговорыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьЗначение( , Элемент.ТекущиеДанные.ЭТДСсылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьДанные(Команда)
	
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеОтветаОбновитьДанные", ЭтотОбъект);
		ПоказатьВопрос(Оповещение
			, НСтр("ru = 'Все изменения будут потеряны. Очистить данные и заполнить заново?'")
			, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ОбновитьДанныеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЭТДУволенные(Команда)
	
	Договор = Элементы.ДоговорыУволенных.ТекущиеДанные;
	
	Если Договор = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана строка для открытия ЭТД'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Договор.ЭТДСсылка) Тогда
		ПараметрЭТД = Новый Структура("Ключ", Договор.ЭТДСсылка);
	
		ОткрытьФорму("Документ.ЭТД.ФормаОбъекта", ПараметрЭТД);
	Иначе
		ТекстСообщения = НСтр("ru = 'По данному сотруднику не найден зарегистрированный ЭТД'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусЭТДОсновные(Команда)
	
	ОчиститьСообщения();
	
	РезультатРаботыЗадания = ОбновитьСтатусЭТДОсновныеНаСервере(Истина);
	
	Если ТипЗнч(РезультатРаботыЗадания) = Тип("Структура") Тогда
		РезультатРаботыЗадания.Вставить("ТекстСообщения", НСтр("ru = 'Обновление статусов отправленных ЭТД'"));
		
		СтруктураОповещений = Новый Структура("ФоновоеЗаданиеЭТД_ОбновлениеСтатусов");
		РезультатРаботыЗадания.Вставить("ДополнительныеОповещения", СтруктураОповещений);
	КонецЕсли;
			
	ЭТДКлиент.ПроверятьОповещенияФоновогоЗадания(ЭтаФорма, РезультатРаботыЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭТДДополнительно(Команда)
	
	ОчиститьСообщения();
	
	Если ДополнительныеСоглашения.НайтиСтроки(Новый Структура ("Выбран", Истина)).Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не отмечены строки для формирования дополнительных соглашений'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеОтветаСоздатьЭТД", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Создать дополнительные соглашения по отмеченным сотрудникам?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусЭТДДополнительно(Команда)
	
	ОчиститьСообщения();
	
	РезультатРаботыЗадания = ОбновитьСтатусЭТДОсновныеНаСервере(Ложь);
	
	Если ТипЗнч(РезультатРаботыЗадания) = Тип("Структура") Тогда
		РезультатРаботыЗадания.Вставить("ТекстСообщения", НСтр("ru = 'Обновление статусов отправленных дополнительных соглашений'"));
		
		СтруктураОповещений = Новый Структура("ФоновоеЗаданиеЭТД_ОбновлениеСтатусов");
		РезультатРаботыЗадания.Вставить("ДополнительныеОповещения", СтруктураОповещений);
	КонецЕсли;
			
	ЭТДКлиент.ПроверятьОповещенияФоновогоЗадания(ЭтаФорма, РезультатРаботыЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДоговорыОсновные(Команда)
	
	Для Каждого Строка Из ОсновныеДоговоры Цикл
		Если ФильтрОсновные = Строка.Статус Тогда
			Строка.Выбран = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьДоговорыОсновные(Команда)
	
	Для Каждого Строка Из ОсновныеДоговоры Цикл
		Если ФильтрОсновные = Строка.Статус Тогда
			Строка.Выбран = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭТДОсновные(Команда)
	
	Если ОсновныеДоговоры.НайтиСтроки(Новый Структура ("Выбран", Истина)).Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не отмечены строки для формирования ЭТД'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеОтветаСоздатьЭТД", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Создать ЭТД по отмеченным сотрудникам?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьДоговорыДополнительно(Команда)
	
	Для Каждого Строка Из ДополнительныеСоглашения Цикл
		Если ФильтрДополнительно = Строка.ДопСоглашениеСтатус Тогда
			Строка.Выбран = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДоговорыДополнительно(Команда)
	
	Для Каждого Строка Из ДополнительныеСоглашения Цикл
		Если ФильтрДополнительно = Строка.ДопСоглашениеСтатус Тогда
			Строка.Выбран = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьГруппуДополнительно(Команда)
    
    Массив = ПолучитьДоговоры(Ложь);
    
    МассивЭТД = Новый Массив;
    
    Для каждого МассивСтрока Из Массив Цикл
        
        ПроверкаПройдена = ПроверитьЗаполнениеПриОтправкеДопСоглашения(МассивСтрока);
        
		Если Не ПроверкаПройдена Тогда
			ПараметрыОтбора = Новый Структура("ДопСоглашениеСсылка", МассивСтрока);
			СтрокиТЧ = ДополнительныеСоглашения.НайтиСтроки(ПараметрыОтбора);
			Если СтрокиТЧ.Количество() > 0 Тогда
				СтрокаТЧ = СтрокиТЧ[0];
				ТекстСообщения = НСтр("ru = 'Доп. соглашение номер %1 от %2 не было отправлено - документ содержит ошибки.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстСообщения, СтрокаТЧ.НомерДоговора, Формат(СтрокаТЧ.ДатаНачала, "ДЛФ=Д"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, МассивСтрока);
            КонецЕсли;
        Иначе
            МассивЭТД.Добавить(МассивСтрока);
        КонецЕсли;
        
    КонецЦикла;
    
    Если МассивЭТД.Количество() = 0 Тогда
        Отказ = Истина;
        Возврат;
    КонецЕсли;
    
    ДополнительныеПараметры = Новый Структура;
    ДополнительныеПараметры.Вставить("МассивЭТД",       МассивЭТД);
    ДополнительныеПараметры.Вставить("ОсновнойДоговор", Ложь);
    
    Параметр = ПродолжитьОтправку(ДополнительныеПараметры);
    
    Если Параметр = неопределено Тогда
        Возврат;	
    КонецЕсли; 
	
	ЗапросСертификатаТребуется = ЭТДВызовСервера.ИспользоватьВнешнююКриптографиюДляКомпоненты();
	
	Если ЗапросСертификатаТребуется Тогда
		ПродолжитьОтправкуЧерезНовуюКомпоненту = Новый ОписаниеОповещения("ПродолжитьОтправкуЧерезНовуюКомпоненту", ЭтаФорма, Параметр);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СтруктурнаяЕдиница", Организация);
		ЭТДКлиент.ОткрытьФормуВводаДанныхЭЦП(ПродолжитьОтправкуЧерезНовуюКомпоненту, ДополнительныеПараметры);
	Иначе
		ПодписанныеДанные = ЭТДКлиентСервер.СоздатьЭЦП_XML_КриптопровайдерДляСписка(Параметр.ПараметрыЗаписи.ДанныеДляПодписи, ЭТДВызовСервера.БИНОрганизации(Организация));
	
		ОбработатьОтправкуПослеПодписьЭЦП(ПодписанныеДанные, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьГруппу(Команда)
	
	Массив = ПолучитьДоговоры(Истина);
	
	МассивЭТД = Новый Массив;
	
	Для каждого МассивСтрока Из Массив Цикл
		
		ПроверкаПройдена = ПроверитьЗаполнениеПриОтправкеЭТД(МассивСтрока);
		
		Если Не ПроверкаПройдена Тогда
			ПараметрыОтбора = Новый Структура("ЭТДСсылка", МассивСтрока);
			СтрокиТЧ = ОсновныеДоговоры.НайтиСтроки(ПараметрыОтбора);
			Если СтрокиТЧ.Количество() > 0 Тогда
				СтрокаТЧ = СтрокиТЧ[0];
				ТекстСообщения = НСтр("ru = 'Основной договор номер %1 от %2 не был отправлен - документ содержит ошибки.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстСообщения, СтрокаТЧ.НомерДоговора, Формат(СтрокаТЧ.ДатаНачала, "ДЛФ=Д"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, МассивСтрока);
			КонецЕсли;
		Иначе
			МассивЭТД.Добавить(МассивСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивЭТД.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МассивЭТД",       МассивЭТД);
	ДополнительныеПараметры.Вставить("ОсновнойДоговор", Истина);
	
	Параметр = ПродолжитьОтправку(ДополнительныеПараметры);
    
    Если Параметр = неопределено Тогда
        Возврат;	
    КонецЕсли; 
	
	ЗапросСертификатаТребуется = ЭТДВызовСервера.ИспользоватьВнешнююКриптографиюДляКомпоненты();
	
	Если ЗапросСертификатаТребуется Тогда
		ПродолжитьОтправкуЧерезНовуюКомпоненту = Новый ОписаниеОповещения("ПродолжитьОтправкуЧерезНовуюКомпоненту", ЭтаФорма, Параметр);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СтруктурнаяЕдиница", Организация);
		ЭТДКлиент.ОткрытьФормуВводаДанныхЭЦП(ПродолжитьОтправкуЧерезНовуюКомпоненту, ДополнительныеПараметры);
	Иначе
		ПодписанныеДанные = ЭТДКлиентСервер.СоздатьЭЦП_XML_КриптопровайдерДляСписка(Параметр.ПараметрыЗаписи.ДанныеДляПодписи, ЭТДВызовСервера.БИНОрганизации(Организация));
	
		ОбработатьОтправкуПослеПодписьЭЦП(ПодписанныеДанные, Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЭТДПросроченные(Команда)
	
	Договор = Элементы.ПросроченныеДоговоры.ТекущиеДанные;
	
	Если Договор = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана строка для открытия ЭТД'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Договор.ЭТДСсылка) Тогда
		ПараметрЭТД = Новый Структура("Ключ", Договор.ЭТДСсылка);
	
		ОткрытьФорму("Документ.ЭТД.ФормаОбъекта", ПараметрЭТД);
	Иначе
		ТекстСообщения = НСтр("ru = 'По данному сотруднику не найден зарегистрированный ЭТД'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЭТДВосстановленные(Команда)
	
	Договор = Элементы.ВосстановленныеДоговоры.ТекущиеДанные;
	
	Если Договор = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана строка для открытия ЭТД'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Договор.ЭТДСсылка) Тогда
		ПараметрЭТД = Новый Структура("Ключ", Договор.ЭТДСсылка);
	
		ОткрытьФорму("Документ.ЭТД.ФормаОбъекта", ПараметрЭТД);
	Иначе
		ТекстСообщения = НСтр("ru = 'По данному сотруднику не найден зарегистрированный ЭТД'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	БИНОрганизации = ЭТДСервер.БИНОрганизации(Организация);
	ПерезаполнитьТаблицыДанных();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНаСервере()
	
	ПерезаполнитьТаблицыДанных();
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьТаблицыДанных()
	
	ЗаполнитьТаблицыДанных();
	
	ОбновитьНадписиФильтров();
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыДанных()
	
	ОсновныеДоговоры.Очистить();
	ДополнительныеСоглашения.Очистить();
	ДоговорыУволенных.Очистить();
	ПросроченныеДоговоры.Очистить();
	ВосстановленныеДоговоры.Очистить();
	
	КоличестваЭТД = СтруктураКоличестваДляФильтровФормы();
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЭТДСервер.СформироватьЗапросОсновныеДоговоры(Запрос);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ОсновныеДоговоры.Добавить(), Выборка);
		
		КоличестваЭТД.ВсеОсновные = КоличестваЭТД.ВсеОсновные + 1;
		
		Если Выборка.Статус = Перечисления.СтатусыЭТД.ПустаяСсылка() Тогда
			КоличестваЭТД.НесозданныеОсновные = КоличестваЭТД.НесозданныеОсновные + 1;
		ИначеЕсли Выборка.Статус = Перечисления.СтатусыЭТД.Сформирован Тогда
			КоличестваЭТД.НеотправленныеОсновные = КоличестваЭТД.НеотправленныеОсновные + 1;
		ИначеЕсли Выборка.Статус = Перечисления.СтатусыЭТД.ОжиданиеОтвета Тогда
			КоличестваЭТД.ОжидающиеОтветаОсновные = КоличестваЭТД.ОжидающиеОтветаОсновные + 1;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЭТДСервер.СформироватьЗапросДопСоглашения(Запрос);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Строка = ДополнительныеСоглашения.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, ВыборкаДетальныеЗаписи);
		
		КоличестваЭТД.ВсеДополнительные = КоличестваЭТД.ВсеДополнительные + 1;
		
		Если Строка.ДопСоглашениеСтатус = Перечисления.СтатусыЭТД.ПустаяСсылка()  Тогда
			КоличестваЭТД.НесозданныеДополнительные = КоличестваЭТД.НесозданныеДополнительные + 1;
		ИначеЕсли Строка.ДопСоглашениеСтатус = Перечисления.СтатусыЭТД.Сформирован Тогда
			КоличестваЭТД.НеотправленныеДополнительные = КоличестваЭТД.НеотправленныеДополнительные + 1;
		ИначеЕсли Строка.ДопСоглашениеСтатус = Перечисления.СтатусыЭТД.ОжиданиеОтвета Тогда
			КоличестваЭТД.ОжидающиеОтветаДополнительные = КоличестваЭТД.ОжидающиеОтветаДополнительные + 1;
		КонецЕсли;
		
		Должность = ВыборкаДетальныеЗаписи.Должность;
		
	КонецЦикла;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЭТДСервер.СформироватьЗапросДоговорыУволенных(Запрос);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДоговорыУволенных.Добавить(), Выборка);
	КонецЦикла;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЭТДСервер.СформироватьЗапросПросроченныеДоговоры(Запрос);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ПросроченныеДоговоры.Добавить(), Выборка);
	КонецЦикла;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЭТДСервер.СформироватьЗапросВосстановленныеДоговоры(Запрос);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ВосстановленныеДоговоры.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаЗакрытьФорму(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Ложь;
	
	ЭтотОбъект.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаОбновитьДанные(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанныеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаСоздатьЭТД(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьЭТДНаСервере();
	
	ПерезаполнитьТаблицыДанных();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭТДНаСервере()
	
	Ошибки = Неопределено;
	
	ТекущиеПараметры = ЭТДСервер.ПолучитьДанныеДляАвтозаполненияЭТД(Организация, ТекущаяДатаСеанса());
	
	Для Каждого Договор Из ОсновныеДоговоры Цикл
		
		Если Не Договор.Выбран Тогда
			Продолжить;
		КонецЕсли;
		
		Если Договор.Статус <> Перечисления.СтатусыЭТД.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыЗаполнения = СтруктураПараметровЭТД();
		ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, Договор);
		ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, ТекущиеПараметры);
		
		ДокументЭТД = Документы.ЭТД.СоздатьДокумент();
		
		ДокументЭТД.Заполнить(ПараметрыЗаполнения);
		ДокументЭТД.НаименованиеДолжности = Договор.ЭТДДолжность;
		ДокументЭТД.КодДолжности = Договор.ЭТДКодДолжности;
		
		ДокументЭТД.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
	НомерСтроки = 0;
	Для Каждого Соглашение Из ДополнительныеСоглашения Цикл
		
		НомерСтроки = НомерСтроки + 1;
		Если Не Соглашение.Выбран Тогда
			Продолжить;
		КонецЕсли;
		
		Если Перечисления.СтатусыЭТД.ПустаяСсылка() <> Соглашение.ДопСоглашениеСтатус Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыЗаполнения = СтруктураПараметровЭТД();
		ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, Соглашение);
		ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, ТекущиеПараметры);
		ПараметрыЗаполнения.ОсновнойЭТД = Соглашение.ОсновнойДоговорСсылка;
		ПараметрыЗаполнения.ИдентификаторОсновногоЭТД = ЭТДСервер.ИдентификаторЭТД(Соглашение.ОсновнойДоговорСсылка);
		ПараметрыЗаполнения.ЭтоДополнительноеСоглашение = Истина;
		ПараметрыЗаполнения.НомерДоговора  				= ПараметрыЗаполнения.НомерДоговора + ПолучитьНомерДопСоглашения(Соглашение);
		ПараметрыЗаполнения.КодДолжности				= Соглашение.ЭТДКодДолжности;
		ПараметрыЗаполнения.НаименованиеДолжности		= Соглашение.ЭТДДолжность;
		ПараметрыЗаполнения.СрокДействия				= Соглашение.ОсновнойДоговорСсылка.СрокДействия;
		ПараметрыЗаполнения.ДатаЗаключения				= ПараметрыЗаполнения.ДатаНачала;
		
		ДокументЭТД = Документы.ЭТД.СоздатьДокумент();
		ДокументЭТД.Заполнить(ПараметрыЗаполнения);
		Если ЗначениеЗаполнено(ПараметрыЗаполнения.КодТяжелыхУсловийТруда) Тогда
			ДокументЭТД.УсловияТруда.Очистить();
			СтрокаУсловийТруда = ДокументЭТД.УсловияТруда.Добавить();
			СтрокаУсловийТруда.УсловиеТруда = "1";
		КонецЕсли;
		ДокументЭТД.Записать(РежимЗаписиДокумента.Запись);
				
	КонецЦикла;
	
	Если Ошибки <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураПараметровЭТД()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ДатаНачала"                 , ТекущаяДатаСеанса());
	Результат.Вставить("ДатаЗаключения"             , Дата('00010101'));
	Результат.Вставить("Должность"                  , Неопределено);
	Результат.Вставить("ДолжностьПоШтатномуРасписанию", Неопределено);
	Результат.Вставить("МестоРаботы"                , "");
	Результат.Вставить("Организация"                , Неопределено);
	Результат.Вставить("Сотрудник"                  , Неопределено);
	Результат.Вставить("Статус"                     , ПредопределенноеЗначение("Перечисление.СтатусыЭТД.Сформирован"));
	Результат.Вставить("ЭтоДополнительноеСоглашение", Ложь);
	Результат.Вставить("ПоСовместительству"         , Ложь);
	Результат.Вставить("ИИНРаботника"               , "");
	Результат.Вставить("БИНОрганизации"             , "");
	Результат.Вставить("КодДолжности"               , "");
	Результат.Вставить("НаименованиеДолжности"      , "");
	Результат.Вставить("КодРегиона"                 , "");
	Результат.Вставить("НомерДоговора"              , "");
	Результат.Вставить("ОтношениеКВоинскойСлужбе"   , "");
	Результат.Вставить("РежимРабочегоВремени"   	, "");
	Результат.Вставить("ДоляНеполногоРабочегоВремени", "");
	Результат.Вставить("ДокументОснование"          , "");
	Результат.Вставить("СрокДействия"               , "");
	Результат.Вставить("ОсновнойЭТД"                , "");
	Результат.Вставить("ИдентификаторОсновногоЭТД"  , "");
	Результат.Вставить("КодТяжелыхУсловийТруда"  , "");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьНадписиФильтров()
	
	Элементы.ДекорацияВсеОсновные.Заголовок = 
		СтрШаблон(НСтр("ru = 'Все (%1)'"), КоличестваЭТД.ВсеОсновные);
	Элементы.ДекорацияНесозданныеОсновные.Заголовок = 
		СтрШаблон(НСтр("ru = 'Не созданы (%1)'"), КоличестваЭТД.НесозданныеОсновные);
	Элементы.ДекорацияНеотправленныеОсновные.Заголовок = 
		СтрШаблон(НСтр("ru = 'Не отправлены (%1)'"), КоличестваЭТД.НеотправленныеОсновные);
	Элементы.ДекорацияВОжиданииОтветаОсновные.Заголовок = 
		СтрШаблон(НСтр("ru = 'В ожидании ответа (%1)'"), КоличестваЭТД.ОжидающиеОтветаОсновные);
	
	Элементы.ДекорацияВсеДополнительные.Заголовок = 
		СтрШаблон(НСтр("ru = 'Все (%1)'"), КоличестваЭТД.ВсеДополнительные);
	Элементы.ДекорацияНесозданныеДополнительные.Заголовок = 
		СтрШаблон(НСтр("ru = 'Не созданы (%1)'"), КоличестваЭТД.НесозданныеДополнительные);
	Элементы.ДекорацияНеотправленныеДополнительные.Заголовок = 
		СтрШаблон(НСтр("ru = 'Не отправлены (%1)'"), КоличестваЭТД.НеотправленныеДополнительные);
	Элементы.ДекорацияВОжиданииОтветаДополнительные.Заголовок = 
		СтрШаблон(НСтр("ru = 'В ожидании ответа (%1)'"), КоличестваЭТД.ОжидающиеОтветаДополнительные);
	
КонецПроцедуры

&НаСервере
Функция СтруктураКоличестваДляФильтровФормы()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ВсеОсновные", 0);
	Результат.Вставить("НесозданныеОсновные", 0);
	Результат.Вставить("НеотправленныеОсновные", 0);
	Результат.Вставить("ОжидающиеОтветаОсновные", 0);
	
	Результат.Вставить("ВсеДополнительные", 0);
	Результат.Вставить("НесозданныеДополнительные", 0);
	Результат.Вставить("НеотправленныеДополнительные", 0);
	Результат.Вставить("ОжидающиеОтветаДополнительные", 0);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЦветФонаВыбранногоФильтра()
	
	Результат = WebЦвета.СветлоЗеленый;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЦветФонаНеактивногоФильтра()
	
	Результат = Новый Цвет();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияРедактированиеМестоРаботыОсновной(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ОсновныеДоговоры.ТекущиеДанные.МестоРаботы = Результат.Представление;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияРедактированиеМестоРаботыДополнительный(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ДополнительныеСоглашения.ТекущиеДанные.МестоРаботы = Результат.Представление;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ПродолжитьОтправку(ПараметрыЗаписи);
	
	СтруктураПараметров = ПродолжитьОтправкуНаСервере(ПараметрыЗаписи);
	
	Если СтруктураПараметров = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ПараметрыЗаписи.Вставить("ДанныеДляПодписи",     СтруктураПараметров.МассивДанныеДляПодписи);
	ПараметрыЗаписи.Вставить("ДанныеАутентификации", СтруктураПараметров.ДанныеАутентификации);
	
    Параметр = Новый Структура;
    Параметр.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
	
	Возврат Параметр;
    
КонецФункции

&НаСервере
Функция ПродолжитьОтправкуНаСервере(ПараметрыЗаписи)

	МассивДанныеДоговоров = Новый Массив;
	МассивПодписанныеДоговоры = Новый Массив;
	МассивИдентификаторыДоговоров = Новый Массив;
	
	Если ПараметрыЗаписи.ОсновнойДоговор Тогда
		ТипДокумента = "contract";
	Иначе
		ТипДокумента = "supply"; 
	КонецЕсли;
	
    БИНОрганизацииДляСервиса = "";
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		БИНОрганизацииДляСервиса = ЭТДСервер.БИНОрганизации(Организация);		
	КонецЕсли;

	ДанныеАутентификации = ЭлектронноеВзаимодействиеССервисами.ПолучитьДанныеАутентификацииЭТД(БИНОрганизацииДляСервиса);
	
	МассивДанныеДляПодписи = Новый Массив;
    МассивЭТДБезОшибок     = Новый Массив;
	
    Для каждого СтрокаМассива Из ПараметрыЗаписи.МассивЭТД Цикл
    	
    	GUIDДоговора = Строка(СтрокаМассива.Ссылка.УникальныйИдентификатор());
    	
    	ЭтоИзменениеДоговора = (СтрокаМассива.Идентификатор <> "");
    	
    	Если ПараметрыЗаписи.ОсновнойДоговор Тогда
    		ВидДокумента = "Договор";
    	Иначе
    		ВидДокумента = "Соглашение";
    	КонецЕсли;
    
    	Попытка
    		СтруктураДанныхДоговора = ЭлектронноеВзаимодействиеССервисами.ПодготовитьДанныеДоговораЭТД(СтрокаМассива, ВидДокумента);
			МассивДанныеДляПодписи.Добавить(СтруктураДанныхДоговора.ДанныеДляПодписи);
			МассивДанныеДоговоров.Добавить(СтруктураДанныхДоговора.ДанныеДоговора);
        Исключение
    		ТекстСообщения = НСтр("ru = '%1 не был отправлен, договор содержит ошибки'");
    		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка(СтрокаМассива));
    		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
    		Продолжить;
    	КонецПопытки;
    	
    	// В каких договорах нет ошибок продолжаем
    	МассивИдентификаторыДоговоров.Добавить(GUIDДоговора);
        МассивЭТДБезОшибок.Добавить(СтрокаМассива);

    КонецЦикла;
	
    //Если все договора с ошибками не продолжаем
    Если МассивЭТДБезОшибок.Количество() = 0 Тогда
    	Возврат неопределено;
    КонецЕсли;
	
	//Параметры для асинхронно вызванной формы
	СтруктураПараметровОтправки = Новый Структура;
	СтруктураПараметровОтправки.Вставить("МассивДанныеДоговоров",        МассивДанныеДоговоров);
	СтруктураПараметровОтправки.Вставить("МассивИдентификаторыДоговоров",МассивИдентификаторыДоговоров);
	СтруктураПараметровОтправки.Вставить("ТипДокумента",                 ТипДокумента);
	СтруктураПараметровОтправки.Вставить("ИзменениеДоговора",            ?(ЭтоИзменениеДоговора, "edit", "create"));
	СтруктураПараметровОтправки.Вставить("МассивЭТДБезОшибок",           МассивЭТДБезОшибок);
	СтруктураПараметровОтправки.Вставить("ДанныеАутентификации",         ДанныеАутентификации);	
	СтруктураПараметровОтправки.Вставить("МассивДанныеДляПодписи",       МассивДанныеДляПодписи);
    
    ХранилищеПараметров = ПоместитьВоВременноеХранилище(СтруктураПараметровОтправки,Новый УникальныйИдентификатор);
    
    Возврат СтруктураПараметровОтправки;

КонецФункции // ПродолжитьОтправкуНаСервере()

&НаКлиенте
Процедура ОбработатьОтправкуПослеПодписьЭЦП(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		
		Если ДополнительныеПараметры = Неопределено Тогда
			ДополнительныеПараметры = Новый Структура;	
		КонецЕсли;
		
		ДополнительныеПараметры.Вставить("МассивЭТД", Результат);
		
		СтруктураПараметровОтправки = ПолучитьИзВременногоХранилища(ХранилищеПараметров);
		
		ДополнительныеПараметры.Вставить("СтруктураПараметров", СтруктураПараметровОтправки);
		РезультатРаботыЗадания = ОтправитьПодписанныеЭТДНаСервере(ДополнительныеПараметры);
	
		Если ТипЗнч(РезультатРаботыЗадания) = Тип("Структура") Тогда
			РезультатРаботыЗадания.Вставить("ТекстСообщения", НСтр("ru = 'Отправка ЭТД (дополнительных соглашений)'"));
			
			СтруктураОповещений = Новый Структура("ФоновоеЗаданиеЭТД_Отправка");
			РезультатРаботыЗадания.Вставить("ДополнительныеОповещения", СтруктураОповещений);
		КонецЕсли;
				
		ЭТДКлиент.ПроверятьОповещенияФоновогоЗадания(ЭтаФорма, РезультатРаботыЗадания);
	
	ИначеЕсли ТипЗнч(Результат) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОтправитьПодписанныеЭТДНаСервере(ДополнительныеПараметры)

	Если ДополнительныеПараметры.МассивЭТД.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыЗадания = ДополнительныеПараметры;
	
	РезультатРаботыЗадания = Неопределено;

	ИмяПроцедурыОбновленияСтатусов = "ЭлектронноеВзаимодействиеССервисами.ОтправитьПодписанныеДоговорыВФоне";
	
	СтруктураВыполненияЗадания = ЭТДСервер.ФоновоеЗаданиеЗапущено(ИмяПроцедурыОбновленияСтатусов);
	
	Если НЕ СтруктураВыполненияЗадания.ЗаданиеАктивно Тогда
		
		ПараметрыВыполнения = ЭТДСервер.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		НаименованиеЗадания = НСтр("ru = 'Отправка подписанных ЭТД (дополнительных соглашений) в ЕСУТД'");
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
		
		РезультатРаботыЗадания = ЭТДСервер.ВыполнитьВФоне(ИмяПроцедурыОбновленияСтатусов, ПараметрыЗадания, ПараметрыВыполнения);
			
	Иначе
		
		ТекстСообщения = НСтр("ru = 'В информационной базе уже запущен процесс отправки подписанных ЭТД (дополнительных соглашений)");
									
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить();
			
	КонецЕсли;
	
	Возврат РезультатРаботыЗадания;
	
КонецФункции

&НаСервере
Процедура СменитьСтатусЭТД(МассивЭТД, Статус)
    
    Если Статус = "ОжиданиеОтвета" Тогда
        СтатусЭТД = Перечисления.СтатусыЭТД.ОжиданиеОтвета; 	  
    КонецЕсли; 
      
   Для каждого ДоговорЭТД из МассивЭТД Цикл
        Договор = ДоговорЭТД.ПолучитьОбъект();
        Договор.Статус = СтатусЭТД;
        Договор.Записать(РежимЗаписиДокумента.Запись);     
    КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДоговоры(ОсновнойДоговор)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Выбран", Истина);
	
	Если ОсновнойДоговор Тогда
		ТЗ = ОсновныеДоговоры.Выгрузить();
		ТЗКопия = ТЗ.Скопировать(Отбор);
		МассивЭТД = ТЗКопия.ВыгрузитьКолонку("ЭТДСсылка");
	Иначе
		ТЗ = ДополнительныеСоглашения.Выгрузить();
		ТЗКопия = ТЗ.Скопировать(Отбор);
		МассивЭТД = ТЗКопия.ВыгрузитьКолонку("ДопСоглашениеСсылка");	
	КонецЕсли;
	
	Возврат МассивЭТД;
	
КонецФункции

&НаКлиенте
Функция ПроверитьЗаполнениеПриОтправкеЭТД(Ссылка)
	
	Возврат ПроверитьЗаполнениеПриОтправкеЭТДНаСервере(Ссылка);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьЗаполнениеПриОтправкеЭТДНаСервере(Ссылка)
	
	ЕстьОшибки = Ложь;
	ДатаСеанса = ТекущаяДатаСеанса();
	
	Объект = Ссылка.ПолучитьОбъект();
	Если НЕ Объект.ПроверитьЗаполнение() Тогда
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	НачалоТекстаОшибки = НСтр("ru='Основной договор номер %1 от %2: '");
	НачалоТекстаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НачалоТекстаОшибки, Ссылка.НомерДоговора, Формат(Ссылка.ДатаЗаключения, "ДЛФ=Д"));
	
	Если НачалоДня(Ссылка.ДатаЗаключения) > НачалоДня(ДатаСеанса) Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НачалоТекстаОшибки + НСтр("ru='Дата заключения договора не должна быть позже текущего дня.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Ссылка, "ДатаЗаключения");
	КонецЕсли;
	
	Если Ссылка.ДатаНачала > НачалоДня(ДатаСеанса) Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НачалоТекстаОшибки + НСтр("ru='Дата начала не должна быть позже текущего дня.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Ссылка, "ДатаНачала");
	КонецЕсли;
	
	Если НачалоДня(Ссылка.ДатаЗаключения) > Ссылка.ДатаНачала Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НачалоТекстаОшибки + НСтр("ru='Дата заключения договора не должна быть позже даты начала договора.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Ссылка, "ДатаЗаключения");
	КонецЕсли;
	 
	Если Ссылка.ДатаОкончания <> '00010101' И Ссылка.ДатаНачала > Ссылка.ДатаОкончания Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НачалоТекстаОшибки + НСтр("ru='Дата начала не должна быть позже даты окончания.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Ссылка, "ДатаНачала");
	КонецЕсли;
		
	Если Ссылка.СрокДействия = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НачалоТекстаОшибки + НСтр("ru='Поле ""Срок действия"" не заполнено.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Ссылка, "СрокДействия");
	КонецЕсли;
	
	Если Ссылка.КодДолжности = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НачалоТекстаОшибки + НСтр("ru='Поле ""Код должности"" не заполнено.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Ссылка, "КодДолжности");
	КонецЕсли;
	
	Если Ссылка.КодРегиона = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НачалоТекстаОшибки + НСтр("ru='Поле ""Код КАТО"" не заполнено.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Ссылка, "КодРегиона");
	ИначеЕсли СтрДлина(Ссылка.КодРегиона) <> 9 Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НачалоТекстаОшибки + НСтр("ru='Длина кода КАТО должна быть 9 символов.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Ссылка, "КодРегиона");
	КонецЕсли;
	
	Если Ссылка.МестоРаботы = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НачалоТекстаОшибки + НСтр("ru='Поле ""Место работы"" не заполнено.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Ссылка, "МестоРаботы");
	КонецЕсли;
	
	Если Ссылка.СрокДействия = "2" ИЛИ Ссылка.СрокДействия = "3" Тогда
		Если НЕ ЗначениеЗаполнено(Ссылка.ДатаОкончания) Тогда
			ЕстьОшибки = Истина;
			ТекстОшибки = НачалоТекстаОшибки + НСтр("ru='Для срока действия ""На определенный срок не менее одного года"" и ""На определенный срок менее одного года (для субъектов малого предпринимательства)"" должно быть заполнено поле ""Дата окончания"".'");
			СообщитьОбОшибкеЗаполнения(ТекстОшибки, Ссылка, "СрокДействия");
		КонецЕсли;
	КонецЕсли;
	
	Если Ссылка.НомерДоговора = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НачалоТекстаОшибки + НСтр("ru='Поле ""Номер договора"" не заполнено.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Ссылка, "НомерДоговора");
	КонецЕсли;
	
	Если Ссылка.ИИНРаботника = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НачалоТекстаОшибки + НСтр("ru='Поле ""ИИН"" не заполнено.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Ссылка, "ИИНРаботника");
	КонецЕсли;
	
	Если Ссылка.БИНОрганизации = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НачалоТекстаОшибки + НСтр("ru='Поле ""БИН/ИИН"" не заполнено.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Ссылка, "БИНОрганизации");
	КонецЕсли;
	
	Если ЭТДСервер.ИспользоватьШтатноеРасписание() Тогда
		ДолжностьЗначение = Ссылка.ДолжностьПоШтатномуРасписанию;
		ДолжностьРеквизит = "ДолжностьПоШтатномуРасписанию";
	Иначе
		ДолжностьЗначение = Ссылка.Должность;
		ДолжностьРеквизит = "Должность";
	КонецЕсли;
	
	Если ДолжностьЗначение = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НачалоТекстаОшибки + НСтр("ru='Поле ""Штатная должность"" не заполнено.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Ссылка, ДолжностьРеквизит);
	КонецЕсли;
	
	Если Ссылка.УсловияТруда.Количество() = 0 Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НачалоТекстаОшибки + НСтр("ru='Поле ""Условия труда"" не заполнено.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Ссылка, "УсловияТруда");
	КонецЕсли;
	
	Если Ссылка.УсловияТруда.Количество() > 0 И Ссылка.УсловияТруда[0].УсловиеТруда = "1" И Ссылка.КодТяжелыхУсловийТруда = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НачалоТекстаОшибки + НСтр("ru='Поле ""Код тяжелых условий труда"" не заполнено.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Ссылка, "КодТяжелыхУсловийТруда");
	КонецЕсли;
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

&НаКлиенте
Функция ПроверитьЗаполнениеПриОтправкеДопСоглашения(Ссылка)
	
	Возврат ПроверитьЗаполнениеПриОтправкеДопСоглашенияНаСервере(Ссылка);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьЗаполнениеПриОтправкеДопСоглашенияНаСервере(Ссылка)
	
	ЕстьОшибки = Ложь;
	ДатаСеанса = ТекущаяДатаСеанса();
	
	Объект = Ссылка.ПолучитьОбъект();
	Если НЕ Объект.ПроверитьЗаполнение() Тогда
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	НачалоТекстаОшибки = НСтр("ru='Доп. соглашение номер %1 от %2: '");
	НачалоТекстаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НачалоТекстаОшибки, Ссылка.НомерДоговора, Формат(Ссылка.ДатаЗаключения, "ДЛФ=Д"));
	
	Если НачалоДня(Объект.ДатаЗаключения) > НачалоДня(ДатаСеанса) Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НачалоТекстаОшибки + НСтр("ru='Дата заключения дополнительного соглашения не должна быть позже текущего дня.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Ссылка, "ДатаЗаключения");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ОсновнойЭТД) Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НачалоТекстаОшибки + НСтр("ru='Поле ""Основной ЭТД"" не заполнено.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Ссылка, "ОсновнойЭТД");
	КонецЕсли;
	
	Если Объект.СрокДействия = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НачалоТекстаОшибки + НСтр("ru='Поле ""Срок действия"" не заполнено.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Ссылка, "СрокДействия");
	КонецЕсли;
	
	Если Объект.КодДолжности = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НачалоТекстаОшибки + НСтр("ru='Поле ""Код должности"" не заполнено.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Ссылка, "КодДолжности");
	КонецЕсли;
	
	Если Объект.КодРегиона = "" Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НачалоТекстаОшибки + НСтр("ru='Поле ""Код КАТО"" не заполнено.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Ссылка, "КодРегиона");
	ИначеЕсли СтрДлина(Объект.КодРегиона) <> 9 Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НачалоТекстаОшибки + НСтр("ru='Длина поля ""Код КАТО"" должна быть 9 символов.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Ссылка, "КодРегиона");
	КонецЕсли;
	
	Если НачалоДня(Объект.ДатаЗаключения) > Объект.ДатаНачала Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НачалоТекстаОшибки + НСтр("ru='Дата начала договора не должна быть раньше даты заключения договора.'");
		СообщитьОбОшибкеЗаполнения(ТекстОшибки, Ссылка, "ДатаНачала");
	КонецЕсли;
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СообщитьОбОшибкеЗаполнения(ТекстОшибки, Ссылка, ИмяЭлементаФормы)
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстОшибки;
	Сообщение.КлючДанных = Ссылка;
	Сообщение.Поле = ИмяЭлементаФормы;
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьФильтрДополнительно(СтатусыЭТД)
	
	ФильтрДополнительно = ПредопределенноеЗначение("Перечисление.СтатусыЭТД.ПустаяСсылка");
	
	Если СтатусыЭТД = "ОжиданиеОтвета" Тогда
		ФильтрДополнительно = ПредопределенноеЗначение("Перечисление.СтатусыЭТД.ОжиданиеОтвета");
	ИначеЕсли СтатусыЭТД = "Сформирован" Тогда
		ФильтрДополнительно = ПредопределенноеЗначение("Перечисление.СтатусыЭТД.Сформирован");		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьФильтрОсновной(СтатусыЭТД)
	
	ФильтрОсновные = ПредопределенноеЗначение("Перечисление.СтатусыЭТД.ПустаяСсылка");
	
	Если СтатусыЭТД = "ОжиданиеОтвета" Тогда
		ФильтрОсновные = ПредопределенноеЗначение("Перечисление.СтатусыЭТД.ОжиданиеОтвета");
	ИначеЕсли СтатусыЭТД = "Сформирован" Тогда
		ФильтрОсновные = ПредопределенноеЗначение("Перечисление.СтатусыЭТД.Сформирован");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьСтатусЭТДОсновныеНаСервере(ОсновнойДоговор)
	
	ПараметрыЭТД = ЭТДСерверПовтИсп.ПолучитьПараметрыЭТД();
	
	Если ОсновнойДоговор Тогда
		
		Адрес = ПараметрыЭТД.АдресГрупповогоПолученияДоговоров;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Статус", Перечисления.СтатусыЭТД.ОжиданиеОтвета);
		
		ТЗ = ОсновныеДоговоры.Выгрузить();
		ТЗКопия = ТЗ.Скопировать(Отбор);
		МассивЭТД = ТЗКопия.ВыгрузитьКолонку("ЭТДСсылка");
		
	Иначе
		
		Адрес = ПараметрыЭТД.АдресГрупповогоПолученияДопСоглашений;
		
		Отбор = Новый Структура;
		Отбор.Вставить("ДопСоглашениеСтатус", Перечисления.СтатусыЭТД.ОжиданиеОтвета);
		
		ТЗ = ДополнительныеСоглашения.Выгрузить();
		ТЗКопия = ТЗ.Скопировать(Отбор);
		МассивЭТД = ТЗКопия.ВыгрузитьКолонку("ДопСоглашениеСсылка");
		
	КонецЕсли;

	Если МассивЭТД.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("МассивЭТД", МассивЭТД);
	ПараметрыЗадания.Вставить("ЭтоОсновнойДоговор", ОсновнойДоговор);
	ПараметрыЗадания.Вставить("Адрес", Адрес);
	
	РезультатРаботыЗадания = Неопределено;

	ИмяПроцедурыОбновленияСтатусов = "ЭлектронноеВзаимодействиеССервисами.ОбновитьСтатусЭТД";
	
	СтруктураВыполненияЗадания = ЭТДСервер.ФоновоеЗаданиеЗапущено(ИмяПроцедурыОбновленияСтатусов);
	
	Если НЕ СтруктураВыполненияЗадания.ЗаданиеАктивно Тогда
		
		ПараметрыВыполнения = ЭТДСервер.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		НаименованиеЗадания = НСтр("ru = 'Обновление статусов отправленных ЭТД (дополнительных соглашений)'");
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
		
		РезультатРаботыЗадания = ЭТДСервер.ВыполнитьВФоне(ИмяПроцедурыОбновленияСтатусов, ПараметрыЗадания, ПараметрыВыполнения);
			
	Иначе
		
		ТекстСообщения = НСтр("ru = 'В информационной базе уже запущен процесс обновления статусов ЭТД (дополнительных соглашений)");
									
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить();
			
	КонецЕсли;
	
	Возврат РезультатРаботыЗадания;

КонецФункции

&НаСервере
Функция ПолучитьНомерДопСоглашения(Соглашение)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ЭТДСервер.ТекстЗапросаКоличествоДляНумерации();
	Запрос.УстановитьПараметр("ОсновнойДоговор", Соглашение.ОсновнойДоговорСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		
		Возврат Строка(ВыборкаДетальныеЗаписи.Количество + 1);
	Иначе 
		Возврат "1";
	КонецЕсли; 
	
КонецФункции // ПолучитьНомерДопСоглашения()

&НаКлиенте
Процедура ПродолжитьОтправкуЧерезНовуюКомпоненту(Результат, Параметр) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Соответствие") Тогда
		ПараметрыКлюча = ЭТДКлиентСервер.ПодготовитьПараметрыКлючаДляПодписи(Результат.Получить(Организация));
		
		Если ЭТДВызовСервера.ВыполнятьКриптографическиеОперацииНаКлиенте() Тогда
			ПодписанныеДанные = ЭТДКлиентСервер.СоздатьЭЦП_XML_КриптопровайдерДляСписка(Параметр.ПараметрыЗаписи.ДанныеДляПодписи, ЭТДВызовСервера.БИНОрганизации(Организация), ПараметрыКлюча);
		Иначе
			ПодписанныеДанные = ЭТДВызовСервера.СоздатьЭЦП_XML_КриптопровайдерДляСписка(Параметр.ПараметрыЗаписи.ДанныеДляПодписи, ЭТДВызовСервера.БИНОрганизации(Организация), ПараметрыКлюча);
		КонецЕсли;
		
		ОбработатьОтправкуПослеПодписьЭЦП(ПодписанныеДанные, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти