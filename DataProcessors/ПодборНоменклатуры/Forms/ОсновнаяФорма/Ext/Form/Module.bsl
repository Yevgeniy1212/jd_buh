////////////////////////////////////////////////////////////////////////////////
// Основная форма для выполнения подбора номенклатуры в табличные части документов.
//  
// Параметры формы:
//  ВалютаДокумента - СправочникСсылка.Валюты - Определяет валюту цены подобранной номенклатуры, возвращаемой в документ.
//                    Если ВалютаДокумента не совпадает с валютой цены подобранной номенклатуры (зависит от ТипЦен),
//                    то будет выполняться пересчет цены в ВалютаДокумента.
//                    Если параметр не задан, за валюту возвращаемой цены принимается валюта регламентированного учета.
//  ДатаРасчетов    - Дата - Определяет дату, на которую будут получаться остатки и цены номенклатуры для подбора.
//  ЕстьЦена   - Булево - Определяет, будет ли возвращаться в документ цена подобранной номенклатуры.
//               Если Ложь (не задан), то цена подобранной номенклатуры будет равняться 0, и возможность
//               задавать цену вручную будет отключена.
//  Заголовок  - Строка - Используется для формирования заголовка формы.
//  ИмяТаблицы - Строка - Содержит наименование табличной части документа, в которую осуществляется подбор номенклатуры.
//               Используется для формирования имени настроек обработки при их сохранении/восстановлении.
//  Организация - СправочникСсылка.Организации - Используется для получения остатков номенклатуры по регистру бухгалтерии Типовой
//                и цен по регистру сведений ЦеныНоменклатуры. Если не задан, то остатки и цены определяться не будут.
//  Склад - СправочникСсылка.Склады - Используется для получения остатков номенклатуры по регистру бухгалтерии Типовой.
//          Если на счетах ТМЗ ведется складской учет, то по параметру устанавливается отбор по Субконто2 (Склады).
//          Если не задан, то остатки будут определяться по всем складам организации.
//  СписокВидовПодбора - СписокЗначений - Обязательный параметр. Содержит список строк с именами возможных вариантов подбора.
//  СтруктурноеПодразделение - СправочникСсылка.ПодразделенияОрганизаций - Используется для получения остатков номенклатуры
//                             по регистру бухгалтерии Типовой. Если не задан, то остатки будут определяться по всей организации.
//  ТипЦен - СправочникСсылка.ТипыЦенНоменклатуры - Используется для определения цены по регистру сведений ЦеныНоменклатуры.
//           Если не задан, то цена номенклатуры для подбора определяться не будет.                                       
//  Товар  - Булево - Если Ложь (не задан), то в списке номенклатуры для подбора не будет отображаться "товар".
//  Услуги - Булево - Если Ложь (не задан), то в списке номенклатуры для подбора не будут отображаться услуги.
//  ЕстьСпецификация - Булево - Если Ложь (не задан), то в списках номенклатуры для подбора и уже подобранной номенклатуры
//                     не будут отображаться колонки "Спецификация", и в результате подбора "Спецификация" будет пустой ссылкой справочника.
//                     Если параметр задан (Истина), то в обработке для номенклатуры будет определяться спецификация по умолчанию
//                     по регистру сведений ОсновныеСпецификацииНоменклатуры.
// Возвращаемое значение:
//  Структура, содержащая адрес временного хранилища, в которое помещена табличная часть обработки ПодобраннаяНоменклатура.
//  Формируется в процедуре ПоместитьПодобраннуюНоменклатуруВХранилище().
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

//&НаКлиенте
//Перем ФормаЗакрыта;


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
//

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();	
	
	ЕстьКоличество			= Истина;
	ПоказыватьТолькоОстатки	= Ложь;
	
	СписокСвойств = "ЕстьЦена, ВалютаДокумента, ДатаРасчетов, Заголовок, Организация, ВыбиратьВсе,
		            |СтруктурноеПодразделение, Склад, ТипЦен, Товар, Услуги, ИмяТаблицы, ЕстьСпецификация";
		
	СписокСвойств = СписокСвойств + ?(Параметры.Свойство("ЕстьКоличество"), ", ЕстьКоличество", "");
	СписокСвойств = СписокСвойств + ?(Параметры.Свойство("Приход")        , ", Приход"        , "");
	
	//ИнтеграцияИСМПТК
	СписокСвойств = СписокСвойств + ?(Параметры.Свойство("ОсобенностьУчета"), ", ОсобенностьУчета", "");
	//Конец ИнтеграцияИСМПТК
	
	ИмяОбъекта = ?(Параметры.Свойство("ОбъектСсылка"), Параметры.ОбъектСсылка.Метаданные().Имя, "");
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры, СписокСвойств);
	
	Если ЗначениеЗаполнено(Параметры.Заголовок) Тогда
		Заголовок     = Параметры.Заголовок;
		АвтоЗаголовок = Ложь;
	КонецЕсли;
	
	СчетТовары           = ПланыСчетов.Типовой.Товары;
	ВедетсяУчетПоСкладам = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ВедетсяУчетПоСкладам(СчетТовары);

	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента	= Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипЦен) Тогда
		ВалютаЦены = ТипЦен.ВалютаЦены;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВалютаЦены) Тогда
		ВалютаЦены	= ВалютаДокумента;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаРасчетов) Тогда
		ДатаРасчетов = ПолучитьДатуОстатковПоУмолчанию();
	КонецЕсли;
	    
	Если Параметры.ЗаполнятьЦеныПоПродаже Тогда
		СпособЗаполненияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаполненияЦен.ПоПродажнымЦенам");
	КонецЕсли;
	
	ЗаполнятьЦеныНоменклатурыДокументов = ЕстьЦена И НЕ ЗначениеЗаполнено(ТипЦен) И ЗначениеЗаполнено(СпособЗаполненияЦены);
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ЦеныНоменклатурыДокументов) Тогда
		ЗаполнятьЦеныНоменклатурыДокументов = Ложь;
	КонецЕсли;
	
	// Настройка первоначального запроса для СписокНоменклатуры
	Если Параметры.СписокВидовПодбора.Количество() > 0 Тогда
		Для Каждого ВариантПодбора Из Параметры.СписокВидовПодбора Цикл
			Элементы.СписокВидовПодбора.СписокВыбора.Добавить(ВариантПодбора.Значение, ВариантПодбора.Представление);
			ПоказыватьОстатки = ПоказыватьОстатки ИЛИ ТребуютсяОстатки(ВариантПодбора.Значение);
			ПоказыватьЦены    = ПоказыватьЦены    ИЛИ ТребуетсяЦена(ВариантПодбора.Значение);
		КонецЦикла;
		СписокВидовПодбора = Параметры.СписокВидовПодбора[0].Значение;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма, Истина);
	
	Если ПоказыватьОстатки Тогда
		ВидыСубконто = Новый Массив;
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
		ИспользоватьОтборПоСкладу = ВедетсяУчетПоСкладам И ЗначениеЗаполнено(Склад);
		Если ИспользоватьОтборПоСкладу Тогда
			ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Склады);
		КонецЕсли;
		УстановитьЗначениеПараметраСпискаНоменклатуры("ВидыСубконто", ВидыСубконто);
	КонецЕсли;
	
	Если ПоказыватьОстатки ИЛИ ПоказыватьЦены Тогда
		УстановитьЗначениеПараметраСпискаНоменклатуры("ПериодРасчета", ДатаРасчетов);
	КонецЕсли;
	
	ЗаданаОрганизация   = ЗначениеЗаполнено(Организация);
	ЗаданТипЦен         = ЗначениеЗаполнено(ТипЦен);
	УстановитьЗначениеПараметраСпискаНоменклатуры("ЗаданаОрганизация", ЗаданаОрганизация);
	УстановитьЗначениеПараметраСпискаНоменклатуры("ЗаданТипЦен"      , ЗаданТипЦен);
	УстановитьЗначениеПараметраСпискаНоменклатуры("Организация"      , Организация);
	УстановитьЗначениеПараметраСпискаНоменклатуры("ТипЦен"           , ТипЦен);
	УстановитьЗначениеПараметраСпискаНоменклатуры("ЕстьСпецификация" , ЕстьСпецификация);
	
	УстановитьЗначениеПараметраСпискаНоменклатуры("ЗаполнятьЦеныНоменклатурыДокументов" , ЗаполнятьЦеныНоменклатурыДокументов);
	УстановитьЗначениеПараметраСпискаНоменклатуры("СпособЗаполненияЦены"                , СпособЗаполненияЦены);
	
	// Получение сохраненных ранее настроек
	ВосстановленныеНастройкиОбщие = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПодборНоменклатуры", "НастройкиПодбора");
	ВосстановленныеНастройки      = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПодборНоменклатуры" + ИмяОбъекта + ИмяТаблицы, "ПараметрыПодбора");

	ОбновитьИнформационнуюНадписьПараметрыПодбора(ЭтаФорма);
	
	//ИнтеграцияИСМПТК
	//Если ЗначениеЗаполнено(ОсобенностьУчета) Тогда
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокНоменклатуры, "ОсобенностьУчета",
			ОсобенностьУчета, ЗначениеЗаполнено(ОсобенностьУчета), ВидСравненияКомпоновкиДанных.Равно);
	//КонецЕсли;
	//Конец ИнтеграцияИСМПТК
	
	ОбщегоНазначенияБКВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, "СписокВидовПодбора");
	
	ВыводДанныхСпискаНоменклатуры();

	ОценкаПроизводительности.ЗакончитьЗамерВремени("Обработка ""подбор номенклатуры"" (открытие " +  ?(ЗначениеЗаполнено(СписокВидовПодбора), СписокВидовПодбора, "") +  ")",
		ВремяНачалаЗамера);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ФормаЗакрыта Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗавершениеРаботы Тогда
		Возврат;	
	КонецЕсли;	

	Если НЕ ФормаЗакрыта И Не ПеренестиВДокумент И Объект.ПодобраннаяНоменклатура.Количество() > 0 Тогда

		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Отказ", Отказ);
		ТекстВопроса = НСтр("ru = 'Подобранные товары не перенесены в документ.
			|
			|Перенести?'");
		Режим = РежимДиалогаВопрос.ДаНетОтмена;	
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПеренестиТовары", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	Если ЗавершениеРаботы Тогда
		Возврат;	
	КонецЕсли;
	
	СтруктураВозврата = ПриЗакрытииНаСервере();

	Если ПеренестиВДокумент Тогда
		ОповеститьОВыборе(СтруктураВозврата);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ФормаЗакрыта = Ложь;
	
	// Настройка формы по сохраненным ранее настройкам
	Если ВосстановленныеНастройкиОбщие <> Неопределено Тогда
		Если ВосстановленныеНастройкиОбщие.Свойство("НоменклатурнаяГруппа") Тогда
			НоменклатурнаяГруппа = ВосстановленныеНастройкиОбщие.НоменклатурнаяГруппа;
		КонецЕсли;
		Если ВосстановленныеНастройкиОбщие.Свойство("ИсторияПоискаНоменклатуры") Тогда
			Элементы.СтрокаПоиска.СписокВыбора.ЗагрузитьЗначения(ВосстановленныеНастройкиОбщие.ИсторияПоискаНоменклатуры);
		КонецЕсли;
		Если ВосстановленныеНастройкиОбщие.Свойство("ВидПоиска") Тогда
			НайденныйВидПоиска = Элементы.ВидПоиска.СписокВыбора.НайтиПоЗначению(ВосстановленныеНастройкиОбщие.ВидПоиска);
			Если НайденныйВидПоиска <> Неопределено Тогда
				ВидПоиска = НайденныйВидПоиска.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВидПоиска) Тогда
		ВидПоиска = Элементы.ВидПоиска.СписокВыбора[0].Значение;
	КонецЕсли;
	
	Если ВосстановленныеНастройки <> Неопределено Тогда
		Если ВосстановленныеНастройки.Свойство("ЗапрашиватьКоличество") И ЕстьКоличество Тогда
			ЗапрашиватьКоличество = ВосстановленныеНастройки.ЗапрашиватьКоличество;
		КонецЕсли;
		Если ВосстановленныеНастройки.Свойство("ЗапрашиватьЦену") И ЕстьЦена Тогда
			ЗапрашиватьЦену = ВосстановленныеНастройки.ЗапрашиватьЦену;
		КонецЕсли;
		Если ВосстановленныеНастройки.Свойство("ПоказыватьТолькоОстатки") Тогда
			ПоказыватьТолькоОстатки = ВосстановленныеНастройки.ПоказыватьТолькоОстатки;
		КонецЕсли;
		Если ВосстановленныеНастройки.Свойство("СписокВидовПодбора") Тогда
			НайденныйВидПодбора = Элементы.СписокВидовПодбора.СписокВыбора.НайтиПоЗначению(ВосстановленныеНастройки.СписокВидовПодбора);
			Если НайденныйВидПодбора <> Неопределено Тогда
				СписокВидовПодбора = НайденныйВидПодбора.Значение;
			КонецЕсли;
		КонецЕсли;
		Если ВосстановленныеНастройки.Свойство("СчетОстатков") Тогда
			СчетОстатков = ВосстановленныеНастройки.СчетОстатков;
		КонецЕсли;
	КонецЕсли;

	//НастроитьВариантПодбора();
	ПоказыватьОстатки = ТребуютсяОстатки(СписокВидовПодбора);
	ПоказыватьЦены    = ТребуетсяЦена(СписокВидовПодбора);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		
		Если ИмяСобытия = "ScanData" Тогда
			Результат = МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр);
			Результат.Штрихкод = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(Результат.Штрихкод);

			ДобавитьПоШтрихкодуНаКлиенте(Результат);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры  

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ
//

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)

	ПрименитьПоиск();

КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьТолькоОстаткиПриИзменении(Элемент)
	
	Элементы.СписокНоменклатуры.ТекущаяСтрока = Неопределено;
	ЗначениеПараметра = ПоказыватьТолькоОстатки И ПоказыватьОстатки;
	Если ЗначениеПараметра Тогда
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокНоменклатуры, "КоличествоОстаток",
			0, Истина, ВидСравненияКомпоновкиДанных.Больше);
	Иначе
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокНоменклатуры, "КоличествоОстаток");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВидовПодбораПриИзменении(Элемент)
	
	КлючеваяОперация = "Обработка ""подбор номенклатуры"" (установка вида подбора" + ?(ЗначениеЗаполнено(СписокВидовПодбора), СписокВидовПодбора, "")+  ")";	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
	Элементы.СписокНоменклатуры.ТекущаяСтрока = Неопределено;
	
	ПоказыватьОстатки = ТребуютсяОстатки(СписокВидовПодбора);
	ПоказыватьЦены    = ТребуетсяЦена(СписокВидовПодбора);
	ОбновитьИнформационнуюНадписьПараметрыПодбора(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СчетОстатковПриИзменении(Элемент)
	
	Элементы.СписокНоменклатуры.ТекущаяСтрока = Неопределено;
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокНоменклатуры, "Счет",
		СчетОстатков, ЗначениеЗаполнено(СчетОстатков), ВидСравненияКомпоновкиДанных.ВИерархии);
		
КонецПроцедуры

&НаКлиенте
Процедура ДатаРасчетовПриИзменении(Элемент)
	
	Элементы.СписокНоменклатуры.ТекущаяСтрока = Неопределено;
	УстановитьЗначениеПараметраСпискаНоменклатуры("ПериодРасчета", ДатаРасчетов);
	ОбновитьИнформационнуюНадписьПараметрыПодбора(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПоискаПриИзменении(Элемент)
	
	ПрименитьПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатурнаяГруппаПриИзменении(Элемент)
	
	Элементы.СписокНоменклатуры.ТекущаяСтрока = Неопределено;
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокНоменклатуры, "НоменклатурнаяГруппа",
		НоменклатурнаяГруппа, ЗначениеЗаполнено(НоменклатурнаяГруппа), ВидСравненияКомпоновкиДанных.ВИерархии);
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ИерархияНоменклатуры
//

&НаКлиенте
Процедура ИерархияНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Элементы.СписокНоменклатуры.ТекущаяСтрока = Неопределено;
	УстановитьОтборПоИерархииНоменклатуры(ВыбраннаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ИерархияНоменклатурыПриАктивизацииСтроки(Элемент)

	Элементы.СписокНоменклатуры.ТекущаяСтрока = Неопределено;
	УстановитьОтборПоИерархииНоменклатуры(Элементы.ИерархияНоменклатуры.ТекущаяСтрока);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ СписокНоменклатуры
//

&НаКлиенте
Процедура СписокНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		СтруктураПараметрыНоменклатуры = Новый Структура;
		СтруктураПараметрыНоменклатуры.Вставить("Номенклатура"    , Элемент.ТекущиеДанные.Номенклатура);
		СтруктураПараметрыНоменклатуры.Вставить("ЕдиницаИзмерения", Элемент.ТекущиеДанные.ЕдиницаИзмерения);
		Если Элемент.ТекущиеДанные.Свойство("Валюта") Тогда
			Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Валюта) Тогда
				СтруктураПараметрыНоменклатуры.Вставить("Валюта", Элемент.ТекущиеДанные.Валюта);
			Иначе
				СтруктураПараметрыНоменклатуры.Вставить("Валюта", ВалютаЦены);
			КонецЕсли;
		Иначе
			СтруктураПараметрыНоменклатуры.Вставить("Валюта", ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
		КонецЕсли;
		Если Элемент.ТекущиеДанные.Свойство("Цена") Тогда
			Если ЗначениеЗаполнено(СтруктураПараметрыНоменклатуры.Валюта)
				И ЗначениеЗаполнено(ВалютаДокумента)
				И СтруктураПараметрыНоменклатуры.Валюта <> ВалютаДокумента Тогда
				Цена = ПолучитьЦенуПослеПересчета(Элемент.ТекущиеДанные.Цена,
					СтруктураПараметрыНоменклатуры.Валюта, ВалютаДокумента, ДатаРасчетов);
				СтруктураПараметрыНоменклатуры.Вставить("Цена"  , Цена);
				СтруктураПараметрыНоменклатуры.Вставить("Валюта", ВалютаДокумента);
			Иначе
				СтруктураПараметрыНоменклатуры.Вставить("Цена", Элемент.ТекущиеДанные.Цена);
			КонецЕсли;
		КонецЕсли;
		Если Элемент.ТекущиеДанные.Свойство("Спецификация") Тогда
			СтруктураПараметрыНоменклатуры.Вставить("Спецификация", Элемент.ТекущиеДанные.Спецификация);
		КонецЕсли;

		Если ЗапрашиватьКоличество И ЕстьКоличество ИЛИ ЗапрашиватьЦену И ЕстьЦена Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Номенклатура"    , СтруктураПараметрыНоменклатуры.Номенклатура);
			ПараметрыФормы.Вставить("Цена"            , ?(СтруктураПараметрыНоменклатуры.Свойство("Цена"), СтруктураПараметрыНоменклатуры.Цена, 0));
			ПараметрыФормы.Вставить("Количество"      , 1);
			ПараметрыФормы.Вставить("Валюта"          , ВалютаДокумента);
			ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураПараметрыНоменклатуры.ЕдиницаИзмерения);
			ПараметрыФормы.Вставить("ЕстьЦена"        , ЗапрашиватьЦену И ЕстьЦена);
			ПараметрыФормы.Вставить("ЕстьКоличество"  , ЗапрашиватьКоличество И ЕстьКоличество);
			Если СтруктураПараметрыНоменклатуры.Свойство("Спецификация") Тогда
				ПараметрыФормы.Вставить("Спецификация", СтруктураПараметрыНоменклатуры.Спецификация);
			КонецЕсли;
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВыбраннуюНоменклатуруПродолжение", ЭтаФорма);
			ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ВводПараметров", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения);
		Иначе
			ДобавитьВыбраннуюНоменклатуру(СтруктураПараметрыНоменклатуры, 1);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокНоменклатурыПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	ВССерверПереопределяемый.УстановитьПараметрыДинамическогоСпискаНоменклатуры(Строки, "Номенклатура");
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ПодобраннаяНоменклатура
//

&НаКлиенте
Процедура ПодобраннаяНоменклатураПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)

	Отказ = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяНоменклатураКоличествоПриИзменении(Элемент)

	ТекущиеДанные       = Элементы.ПодобраннаяНоменклатура.ТекущиеДанные;
	ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.Количество;

КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяНоменклатураЦенаПриИзменении(Элемент)

	ТекущиеДанные       = Элементы.ПодобраннаяНоменклатура.ТекущиеДанные;
	ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.Количество;

КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяНоменклатураСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПодобраннаяНоменклатура.ТекущиеДанные;
	Если ТекущиеДанные.Количество = 0 Тогда
		ТекущиеДанные.Цена = 0;
	Иначе
		ТекущиеДанные.Цена = ТекущиеДанные.Сумма / ТекущиеДанные.Количество;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
//

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)

	ПеренестиВДокумент = Истина;
	Закрыть(КодВозвратаДиалога.OK);

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсе(Команда)
	
	МассивСтруктурПодбора = ВыбратьВсеНаСервере();
	
	Для Каждого СтруктураПодбора Из МассивСтруктурПодбора Цикл
		ДобавитьВыбраннуюНоменклатуру(СтруктураПодбора, 1, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовуюНоменклатуру(Команда)
	
	ПараметрыСозданияНовойНоменклатуры = Новый Структура("Родитель, НоменклатурнаяГруппа");
	ПараметрыСозданияНовойНоменклатуры.Родитель = Элементы.ИерархияНоменклатуры.ТекущаяСтрока;
	ПараметрыСозданияНовойНоменклатуры.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьНовуюНоменклатуруПродолжение", ЭтаФорма);
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаЭлемента", ПараметрыСозданияНовойНоменклатуры, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоШтрихкоду(Команда)
	
	ОписаниеОповещенияПоискПоШтрихкоду = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект); 
	
	ПараметрыФормыВводаШтрихкода = Новый Структура;
	ПараметрыФормыВводаШтрихкода.Вставить("ИмяТаблицы", ЭтаФорма.ИмяТаблицы);
	ПараметрыФормыВводаШтрихкода.Вставить("ИмяФормы", ЭтаФорма.ВладелецФормы.ИмяФормы);
	
	ОткрытьФорму(
		"РегистрСведений.ШтрихкодыНоменклатуры.Форма.ФормаВводШтрихкода",ПараметрыФормыВводаШтрихкода,
		ЭтотОбъект,,,,
		ОписаниеОповещенияПоискПоШтрихкоду,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры  

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПоляИнформационнойНадписи(Форма) Экспорт

	СписокПолей = Новый Массив;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("СтруктурноеПодразделение");

	Если Форма.ПоказыватьОстатки ИЛИ Форма.ПоказыватьЦены Тогда
		СписокПолей.Добавить("ДатаРасчетов");
	КонецЕсли;

	Если Форма.ПоказыватьОстатки И Форма.ВедетсяУчетПоСкладам Тогда
		СписокПолей.Добавить("Склад");
	КонецЕсли;
		
	Если Форма.ПоказыватьЦены Тогда
		СписокПолей.Добавить("ТипЦен");
	КонецЕсли;
		
	Если Форма.ЗаполнятьЦеныНоменклатурыДокументов Тогда
		СписокПолей.Добавить("СпособЗаполненияЦены");
	КонецЕсли;

	Возврат Новый ФиксированныйМассив(СписокПолей);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИнформационнуюНадписьПараметрыПодбора(Форма)

	СписокПолей = ПолучитьПоляИнформационнойНадписи(Форма);

	ТекстНадписи = "";
	Для Каждого Поле Из СписокПолей Цикл
		Если ЗначениеЗаполнено(Форма[Поле]) Тогда
			ТекстНадписи = ТекстНадписи + Форма[Поле] + "; ";
		КонецЕсли;
	КонецЦикла;
	ТекстНадписи = Лев(ТекстНадписи, СтрДлина(ТекстНадписи) - 2);

	Форма.ИнформационнаяНадписьПараметровПодбора = ТекстНадписи;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоИерархииНоменклатуры(ГруппаНоменклатуры)

	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокНоменклатуры, "Номенклатура",
		ГруппаНоменклатуры, ЗначениеЗаполнено(ГруппаНоменклатуры), ВидСравненияКомпоновкиДанных.ВИерархии);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВыбраннуюНоменклатуруПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВыбраннуюНоменклатуру(Результат, ДополнительныеПараметры, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВыбраннуюНоменклатуру(ПараметрыНоменклатуры, Количество, ВыбратьВсе = Ложь) Экспорт

	Если ПараметрыНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыНоменклатуры.Свойство("Количество") И ПараметрыНоменклатуры.Количество <> 0 Тогда
		Количество = ПараметрыНоменклатуры.Количество;
	КонецЕсли;

	ПараметрыПоиска = Новый Структура("Номенклатура", ПараметрыНоменклатуры.Номенклатура);
	
	Если ПараметрыНоменклатуры.Свойство("Цена") Тогда
		ПараметрыПоиска.Вставить("Цена"	, ПараметрыНоменклатуры.Цена);
	КонецЕсли;
	Если ПараметрыНоменклатуры.Свойство("Спецификация") Тогда
		ПараметрыПоиска.Вставить("Спецификация"	, ПараметрыНоменклатуры.Спецификация);
	КонецЕсли;

	РезультатПоиска = Объект.ПодобраннаяНоменклатура.НайтиСтроки(ПараметрыПоиска);
	Если РезультатПоиска.Количество() = 0 Тогда
		ТекущаяСтрока = Объект.ПодобраннаяНоменклатура.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ПараметрыНоменклатуры);
		ТекущаяСтрока.Количество = Количество;
	Иначе
		ТекущаяСтрока            = РезультатПоиска[0];
		ТекущаяСтрока.Количество = Количество + ТекущаяСтрока.Количество;
	КонецЕсли;

	Если ПараметрыНоменклатуры.Свойство("Цена") Тогда
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Количество * ТекущаяСтрока.Цена;
	КонецЕсли;
	
	Если Элементы.СписокНоменклатуры.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если НЕ Приход И Элементы.СписокНоменклатуры.ТекущиеДанные.Свойство("КоличествоОстаток") И НЕ ВыбратьВсе Тогда
		Элементы.СписокНоменклатуры.ТекущиеДанные.КоличествоОстаток =
			Элементы.СписокНоменклатуры.ТекущиеДанные.КоличествоОстаток - Количество;
	КонецЕсли;

	// Активизируем текущую строку табличной части
	Элементы.ПодобраннаяНоменклатура.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовуюНоменклатуруПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьПодобраннуюНоменклатуруВХранилище()

	ТаблицаНоменклатуры = Объект.ПодобраннаяНоменклатура.Выгрузить();

	АдресПодобраннойНоменклатурыВХранилище = ПоместитьВоВременноеХранилище(ТаблицаНоменклатуры, УникальныйИдентификатор);

	Возврат АдресПодобраннойНоменклатурыВХранилище;

КонецФункции

&НаКлиенте
Процедура ПрименитьПоиск()

	Использование = ЗначениеЗаполнено(СтрокаПоиска);

	ГруппаОтбора = ОтборыСписковКлиентСервер.СоздатьГруппуЭлементовОтбора(
		СписокНоменклатуры.Отбор.Элементы, "ПоискПоПодстроке",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора, "Номенклатура." + ВидПоиска, СтрокаПоиска,
		Использование, ВидСравненияКомпоновкиДанных.Содержит);

	СпискиВыбораКлиентСервер.ОбновитьСписокВыбора(Элементы.СтрокаПоиска.СписокВыбора, СтрокаПоиска);
	
	ТекущийЭлемент = Элементы.СписокНоменклатуры;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЦенуПослеПересчета(Знач Цена, Знач ВалютаНач, Знач ВалютаКон, Знач ДатаПересчета)
	
	КурсКратностьНач = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ВалютаНач, ДатаПересчета);
	КурсКратностьКон = ОбщегоНазначенияБК.ПолучитьКурсВалюты(ВалютаКон, ДатаПересчета);

	Возврат ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(Цена, ВалютаНач, ВалютаКон,
		КурсКратностьНач.Курс, КурсКратностьКон.Курс,
		КурсКратностьНач.Кратность, КурсКратностьКон.Кратность);

КонецФункции

&НаСервере
Процедура УстановитьЗначениеПараметраСпискаНоменклатуры(ИмяПараметра, ЗначениеПараметра)
	
	СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра(ИмяПараметра, ЗначениеПараметра);
	
КонецПроцедуры

&НаСервере
Функция ПриЗакрытииНаСервере()

	СтруктураВозврата = Новый Структура();

	ПараметрыЗакрытия = Новый Структура;
	ПараметрыЗакрытия.Вставить("ЗапрашиватьКоличество"    , ЗапрашиватьКоличество);
	ПараметрыЗакрытия.Вставить("ЗапрашиватьЦену"          , ЗапрашиватьЦену);
	ПараметрыЗакрытия.Вставить("ПоказыватьТолькоОстатки"  , ПоказыватьТолькоОстатки);
	ПараметрыЗакрытия.Вставить("СчетОстатков"             , СчетОстатков);  
	ПараметрыЗакрытия.Вставить("СписокВидовПодбора"       , СписокВидовПодбора);
	
	ПараметрыЗакрытияОбщие = Новый Структура;
	ПараметрыЗакрытияОбщие.Вставить("ИсторияПоискаНоменклатуры", Элементы.СтрокаПоиска.СписокВыбора.ВыгрузитьЗначения());
	ПараметрыЗакрытияОбщие.Вставить("ВидПоиска"                , Элементы.СтрокаПоиска.СписокВыбора.ВыгрузитьЗначения());
	ПараметрыЗакрытияОбщие.Вставить("НоменклатурнаяГруппа"     , Элементы.СтрокаПоиска.СписокВыбора.ВыгрузитьЗначения());
	
	НаименованиеНастроек = "ПодборНоменклатуры" + ИмяОбъекта + ИмяТаблицы;
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(НаименованиеНастроек, "ПараметрыПодбора", ПараметрыЗакрытия);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ПодборНоменклатуры", "НастройкиПодбора" , ПараметрыЗакрытияОбщие);

	Если ПеренестиВДокумент Тогда
		АдресПодобраннойНоменклатурыВХранилище = ПоместитьПодобраннуюНоменклатуруВХранилище();
		//ИнтеграцияИСМПТК
		Если ИмяОбъекта = "ЗаказКодовМаркировкиСУЗИСМПТК" Тогда
			СтруктураВозврата.Вставить("АдресТоваровВХранилище", АдресПодобраннойНоменклатурыВХранилище);
		Иначе
			СтруктураВозврата.Вставить("АдресПодобраннойНоменклатурыВХранилище", АдресПодобраннойНоменклатурыВХранилище);
		КонецЕсли;
		//Конец ИнтеграцияИСМПТК
	КонецЕсли;
	
	Возврат СтруктураВозврата;

КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаПеренестиТовары(Результат, Параметры) Экспорт

		Если Результат = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
			ПеренестиВДокумент = Истина;
			ФормаЗакрыта       = Истина;
			Закрыть();
		ИначеЕсли  Результат = КодВозвратаДиалога.Нет Тогда
			ФормаЗакрыта = Истина;
			Закрыть();
		КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТребуютсяОстатки(ВидПодбора)
	
	Возврат ВидПодбора = "ОстаткиНоменклатуры"
		ИЛИ ВидПодбора = "ОстаткиИЦеныНоменклатуры"
		ИЛИ ВидПодбора = "ОстаткиИПлановаяСебестоимость"
		ИЛИ ВидПодбора = "ОстаткиИЦеныНоменклатурыДокументов";
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяЦена(ВидПодбора)
	
	Возврат ВидПодбора = "ЦеныУслуг"
		ИЛИ ВидПодбора = "ЦеныНоменклатуры"
		ИЛИ ВидПодбора = "ОстаткиИЦеныНоменклатуры"
		ИЛИ ВидПодбора = "ОстаткиИПлановаяСебестоимость"
		ИЛИ ВидПодбора = "ЦеныНоменклатурыДокументов"
		ИЛИ ВидПодбора = "ОстаткиИЦеныНоменклатурыДокументов";
	
КонецФункции
	
&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма, СозданиеФормы = Ложь)
	
	Элементы           = Форма.Элементы;
	ВыбиратьВсе        = Форма.ВыбиратьВсе;
	ПоказыватьЦены     = Форма.ПоказыватьЦены;
	ПоказыватьОстатки  = Форма.ПоказыватьОстатки;
	СписокВидовПодбора = Форма.СписокВидовПодбора;
	СписокНоменклатуры = Форма.СписокНоменклатуры;
	
	Если СозданиеФормы Тогда
		// Колонки надо "отключить" ДО выполнения запроса в СписокНоменклатуры
		// Если указывать условия только в условном оформлении, то они не успеют сработать до выполнения запроса.
		Если НЕ ПоказыватьЦены Тогда
			Элементы.СписокНоменклатурыЦена.Видимость   = Ложь;
			Элементы.СписокНоменклатурыВалюта.Видимость = Ложь;
		КонецЕсли;
		Если НЕ ПоказыватьОстатки Тогда
			Элементы.СписокНоменклатурыКоличествоОстаток.Видимость = Ложь;
		КонецЕсли;
		Элементы.ФормаВыбратьВсе.Видимость = ВыбиратьВсе;
		Возврат;
	КонецЕсли;
	
	Если ПоказыватьОстатки Тогда
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокНоменклатуры, "СтруктурноеПодразделение",
			Форма.СтруктурноеПодразделение, Истина);
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокНоменклатуры, "КоличествоОстаток",
			0, Форма.ПоказыватьТолькоОстатки, ВидСравненияКомпоновкиДанных.Больше);
		ИспользоватьОтборПоСкладу = Форма.ВедетсяУчетПоСкладам И ЗначениеЗаполнено(Форма.Склад);	
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокНоменклатуры, "Субконто2",
			Форма.Склад, ИспользоватьОтборПоСкладу);
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокНоменклатуры, "Счет",
			Форма.СчетОстатков, ЗначениеЗаполнено(Форма.СчетОстатков), ВидСравненияКомпоновкиДанных.ВИерархии);
	Иначе
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокНоменклатуры, "СтруктурноеПодразделение");
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокНоменклатуры, "КоличествоОстаток");
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокНоменклатуры, "Субконто2");
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокНоменклатуры, "Счет");
	КонецЕсли;
	
	Если Форма.Товар = Форма.Услуги И Форма.Товар Тогда
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокНоменклатуры, "Номенклатура.Услуга");
	ИначеЕсли Форма.Товар = Форма.Услуги И НЕ Форма.Товар Тогда
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокНоменклатуры, "Номенклатура.Услуга",
			"НетНоменклатуры", Истина);
	ИначеЕсли Форма.Товар Тогда
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокНоменклатуры, "Номенклатура.Услуга",
			Ложь, Истина);
	ИначеЕсли Форма.Услуги Тогда
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокНоменклатуры, "Номенклатура.Услуга",
			Истина, Истина);
	КонецЕсли;
	
	Форма.Элементы.ЗапрашиватьЦену.Доступность       = Форма.ЕстьЦена;
	Форма.Элементы.ЗапрашиватьКоличество.Доступность = Форма.ЕстьКоличество;
	
	Форма.Элементы.ГруппаОстаткиИЦены.Доступность    = СписокВидовПодбора <> "ПоСправочнику" И СписокВидовПодбора <> "Услуги"; 
	Форма.Элементы.ГруппаСчет.Доступность            = Форма.ПоказыватьОстатки;
		
КонецПроцедуры

&НаСервере
Функция ВыбратьВсеНаСервере()
	
	// 1. Сформируем таблицу отобранной номенклатуры - копию динамического списка
	СхемаКомпоновки = Новый СхемаКомпоновкиДанных();

	Источник                    = СхемаКомпоновки.ИсточникиДанных.Добавить();
	Источник.Имя                = "Источник1";
	Источник.СтрокаСоединения   = "";
	Источник.ТипИсточникаДанных = "local";

	НаборДанных = СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));

	НаборДанных.Имя            = "Запрос";
	НаборДанных.Запрос         = СписокНоменклатуры.ТекстЗапроса;
	НаборДанных.ИсточникДанных = "Источник1";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;

	НастройкиКомпоновки = СкомпоноватьНастройки(СхемаКомпоновки);

	СкопироватьЭлементы(НастройкиКомпоновки.Отбор  , СписокНоменклатуры.Отбор);
	СкопироватьЭлементы(НастройкиКомпоновки.Порядок, СписокНоменклатуры.Порядок);
	
	Для Каждого ПараметрДанных Из СписокНоменклатуры.Параметры.Элементы Цикл
		НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра(ПараметрДанных.Параметр, ПараметрДанных.Значение);
	КонецЦикла;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновки, НастройкиКомпоновки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаНоменклатуры);
	ПроцессорВывода.НачатьВывод();

	Пока Истина Цикл
	    
	    ЭлементРезультатаКомпоновкиДанных      = ПроцессорКомпоновкиДанных.Следующий();
	    Если ЭлементРезультатаКомпоновкиДанных = Неопределено Тогда 
	        Прервать;
	    КонецЕсли;
	    
	    ПроцессорВывода.ВывестиЭлемент(ЭлементРезультатаКомпоновкиДанных);
	    
	КонецЦикла;

	ПроцессорВывода.ЗакончитьВывод();
	
	
	// 2. Сформируем массив для заполнения таб. части ПодобраннаяНоменклатура обработки
	МассивВозврата = Новый Массив;
	
	ЕстьКолонкаЦена         = ТаблицаНоменклатуры.Колонки.Найти("Цена") <> Неопределено;
	ЕстьКолонкаВалюта       = ТаблицаНоменклатуры.Колонки.Найти("Валюта") <> Неопределено;
	ЕстьКолонкаСпецификация = ТаблицаНоменклатуры.Колонки.Найти("Спецификация") <> Неопределено;
	
	Для Каждого СтрокаПодбора Из ТаблицаНоменклатуры Цикл
		
		СтруктураПараметрыНоменклатуры = Новый Структура;
		
		Если ПоказыватьОстатки И ЕстьКоличество Тогда
			Если СтрокаПодбора.КоличествоОстаток = 0 Тогда
				Продолжить;
			Иначе
				СтруктураПараметрыНоменклатуры.Вставить("Количество", СтрокаПодбора.КоличествоОстаток);
			КонецЕсли;
		КонецЕсли;
		
		СтруктураПараметрыНоменклатуры.Вставить("Номенклатура"    , СтрокаПодбора.Номенклатура);
		СтруктураПараметрыНоменклатуры.Вставить("ЕдиницаИзмерения", СтрокаПодбора.ЕдиницаИзмерения);
		Если ПоказыватьЦены И ЕстьКолонкаВалюта Тогда
			Если ЗначениеЗаполнено(СтрокаПодбора.Валюта) Тогда
				СтруктураПараметрыНоменклатуры.Вставить("Валюта", СтрокаПодбора.Валюта);
			Иначе
				СтруктураПараметрыНоменклатуры.Вставить("Валюта", ВалютаЦены);
			КонецЕсли;
		КонецЕсли;
		Если ПоказыватьЦены И ЕстьКолонкаЦена Тогда
			Если ЗначениеЗаполнено(СтруктураПараметрыНоменклатуры.Валюта)
				И ЗначениеЗаполнено(ВалютаДокумента)
				И СтруктураПараметрыНоменклатуры.Валюта <> ВалютаДокумента Тогда
				Цена = ПолучитьЦенуПослеПересчета(СтрокаПодбора.Цена,
					СтруктураПараметрыНоменклатуры.Валюта, ВалютаДокумента, ДатаРасчетов);
				СтруктураПараметрыНоменклатуры.Вставить("Цена"  , Цена);
				СтруктураПараметрыНоменклатуры.Вставить("Валюта", ВалютаДокумента);
			Иначе
				СтруктураПараметрыНоменклатуры.Вставить("Цена", СтрокаПодбора.Цена);
			КонецЕсли;
		КонецЕсли;
		Если ЕстьСпецификация И ЕстьКолонкаСпецификация Тогда
			СтруктураПараметрыНоменклатуры.Вставить("Спецификация", СтрокаПодбора.Спецификация);
		КонецЕсли;

		МассивВозврата.Добавить(СтруктураПараметрыНоменклатуры);
		
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Функция СкомпоноватьНастройки(СхемаКомпоновки) Экспорт

	ИсточникНастроек    = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки);
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	
	// Добавим выбранные поля
	Для Каждого Элемент Из КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора.Элементы Цикл
		
		Если НЕ Элемент.Папка Тогда
			ВыбранноеПоле               = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле          = Элемент.Поле;
			ВыбранноеПоле.Использование = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавим группировку
	ГруппировкаНастроек = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Поле                = ГруппировкаНастроек.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	Возврат КомпоновщикНастроек.Настройки;

КонецФункции

// Копирует элементы из одной коллекции в другую
&НаСервереБезКонтекста
Процедура СкопироватьЭлементы(ПриемникЗначения, ИсточникЗначения, ПроверятьДоступность = Ложь, ОчищатьПриемник = Истина) Экспорт
	
	Если ТипЗнч(ИсточникЗначения) = Тип("УсловноеОформлениеКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ВариантыПользовательскогоПоляВыборКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ОформляемыеПоляКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ЗначенияПараметровДанныхКомпоновкиДанных") Тогда
		СоздаватьПоТипу = Ложь;
	Иначе
		СоздаватьПоТипу = Истина;
	КонецЕсли;
	ПриемникЭлементов = ПриемникЗначения.Элементы;
	ИсточникЭлементов = ИсточникЗначения.Элементы;
	Если ОчищатьПриемник Тогда
		ПриемникЭлементов.Очистить();
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из ИсточникЭлементов Цикл
		
		Если ТипЗнч(ЭлементИсточник) = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
			// Элементы порядка добавляем в начало
			Индекс = ИсточникЭлементов.Индекс(ЭлементИсточник);
			ЭлементПриемник = ПриемникЭлементов.Вставить(Индекс, ТипЗнч(ЭлементИсточник));
		Иначе
			Если СоздаватьПоТипу Тогда
				ЭлементПриемник = ПриемникЭлементов.Добавить(ТипЗнч(ЭлементИсточник));
			Иначе
				ЭлементПриемник = ПриемникЭлементов.Добавить();
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		// В некоторых коллекциях необходимо заполнить другие коллекции
		Если ТипЗнч(ИсточникЭлементов) = Тип("КоллекцияЭлементовУсловногоОформленияКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Поля, ЭлементИсточник.Поля);
			СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
			ЗаполнитьЭлементы(ЭлементПриемник.Оформление, ЭлементИсточник.Оформление); 
		ИначеЕсли ТипЗнч(ИсточникЭлементов)	= Тип("КоллекцияВариантовПользовательскогоПоляВыборКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
		КонецЕсли;
		
		// В некоторых элементах коллекции необходимо заполнить другие коллекции
		Если ТипЗнч(ЭлементИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыборКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Варианты, ЭлементИсточник.Варианты);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных") Тогда
			ЭлементПриемник.УстановитьВыражениеДетальныхЗаписей (ЭлементИсточник.ПолучитьВыражениеДетальныхЗаписей());
			ЭлементПриемник.УстановитьВыражениеИтоговыхЗаписей(ЭлементИсточник.ПолучитьВыражениеИтоговыхЗаписей());
			ЭлементПриемник.УстановитьПредставлениеВыраженияДетальныхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияДетальныхЗаписей ());
			ЭлементПриемник.УстановитьПредставлениеВыраженияИтоговыхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияИтоговыхЗаписей ());
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьЭлементы(ПриемникЗначения, ИсточникЗначения, ПервыйУровень = Неопределено) Экспорт
	
	Если ТипЗнч(ПриемникЗначения) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		КоллекцияЗначений = ИсточникЗначения;
	Иначе
		КоллекцияЗначений = ИсточникЗначения.Элементы;
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из КоллекцияЗначений Цикл
		Если ПервыйУровень = Неопределено Тогда
			ЭлементПриемник = ПриемникЗначения.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		Иначе
			ЭлементПриемник = ПервыйУровень.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		КонецЕсли;
		Если ЭлементПриемник = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		Если ТипЗнч(ЭлементИсточник) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
			Если ЭлементИсточник.ЗначенияВложенныхПараметров.Количество() <> 0 Тогда
				ЗаполнитьЭлементы(ЭлементПриемник.ЗначенияВложенныхПараметров, ЭлементИсточник.ЗначенияВложенныхПараметров, ПриемникЗначения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыводДанныхСпискаНоменклатуры()
	
	Видимость = ЭСФСервер.ВедетсяУчетПоТоварамНаВС(ТекущаяДата());
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СписокНоменклатурыПризнакПеречняИзьятий",
		"Видимость",
		Видимость);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СписокНоменклатурыПризнакУникальногоТовара",
		"Видимость",
		Видимость);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СписокНоменклатурыПризнакУчетаНаВиртуальномСкладе",
		"Видимость",
		Видимость);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СписокНоменклатурыПризнакТовараДвойногоНазначения",
		"Видимость",
		Видимость);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СписокНоменклатурыПризнакАктивности",
		"Видимость",
		Видимость);
	
	Если Видимость Тогда
			
		Поля = Новый Массив;
		Поля.Добавить("ПризнакУчетаНаВиртуальномСкладе");
		Поля.Добавить("ПризнакТовараДвойногоНазначения");
		Поля.Добавить("ПризнакУникальногоТовара");
		Поля.Добавить("ПризнакПеречняИзьятий");
		Поля.Добавить("ПризнакАктивности");
		
		СписокНоменклатуры.УстановитьОграниченияИспользованияВГруппировке(Поля);
		СписокНоменклатуры.УстановитьОграниченияИспользованияВОтборе(Поля);
		СписокНоменклатуры.УстановитьОграниченияИспользованияВПорядке(Поля);
			
	КонецЕсли;
	
КонецПроцедуры   

&НаСервереБезКонтекста
Функция ПолучитьДатуОстатковПоУмолчанию()
	
	ТекущаяРабочаяДата = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	Если ТекущаяРабочаяДата = НачалоДня(ТекущаяДатаСеанса()) Тогда
		Возврат ТекущаяДатаСеанса();
	Иначе
		Возврат ТекущаяРабочаяДата;
	КонецЕсли; 
	
КонецФункции 

#Область ПоискПоШтрихкоду

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ДобавитьНоменклатуру(Результат.Номенклатура);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНоменклатуру(Номенклатура)
		
	ДанныеОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка, ТипЦен,
		|УчитыватьНДС, СуммаВключаетНДС, УчитыватьКПН, ВидОперации, Склад, ДоговорКонтрагента,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		СведенияОНоменклатуре = ПолучитьСведенияОНоменклатуре(Номенклатура, ДанныеОбъекта);
	Иначе
		СведенияОНоменклатуре = Неопределено;
	КонецЕсли;    
	
	РезультатВыбора = НовыйРезультатВыбораНоменклатуры();
	РезультатВыбора.Номенклатура = Номенклатура;
	РезультатВыбора.Количество   = 1;
	РезультатВыбора.Цена         = ?(СведенияОНоменклатуре = Неопределено, 0, СведенияОНоменклатуре.Цена); 
	РезультатВыбора.ЕдиницаИзмерения = ?(СведенияОНоменклатуре = Неопределено, Неопределено, СведенияОНоменклатуре.БазоваяЕдиницаИзмерения); 
	
	ДобавитьСтрокуПодобраннаяНоменклатура(РезультатВыбора);

КонецПроцедуры 

&НаСервере
Функция ПолучитьСведенияОНоменклатуре(Номенклатура, ДанныеОбъекта) 
	
	Результат = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(Номенклатура, ДанныеОбъекта); 
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ДобавитьПоШтрихкодуНаКлиенте(ШтрихкодСтруктура)
	
	РезультатПоиска = ПолучитьНоменклатуруПоШтрихкоду(ШтрихкодСтруктура);
	Если РезультатПоиска <> Неопределено Тогда
		ДобавитьНоменклатуру(РезультатПоиска.Номенклатура);
	Иначе
		ДобавитьНоменклатуру(ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	КонецЕсли; 
	
КонецФункции

&НаСервереБезКонтекста
//&НаСервере
Функция ПолучитьНоменклатуруПоШтрихкоду(ШтрихкодСтруктура)
	
	Если ТипЗнч(ШтрихкодСтруктура) = Тип("Структура") И ШтрихкодСтруктура.Свойство("Штрихкод") Тогда
		ШтрихкодСтруктура.Вставить("ФорматBase64", Истина);
		РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ДекодироватьШтрихкодДанныхBase64(ШтрихкодСтруктура);
		Штрихкод = ШтрихкодСтруктура.Штрихкод;
		ШтрихкодСтруктура.Очистить();
	Иначе
		ШтрихКод = "";
	КонецЕсли;
	
	ТаблицаНоменклатурыПоШтрихкоду = РегистрыСведений.ШтрихкодыНоменклатуры.НоменклатураПоШтрихкоду(Штрихкод);

	Если ТаблицаНоменклатурыПоШтрихкоду.Количество() <> 1 Тогда
		Возврат Неопределено;
	Иначе
		Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаНоменклатурыПоШтрихкоду[0]);
	КонецЕсли;
	
КонецФункции

#КонецОбласти  

&НаКлиенте
Функция НовыйРезультатВыбораНоменклатуры() 
	
	Результат = Новый Структура;
	
	Результат.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	Результат.Вставить("Количество",   1);
	Результат.Вставить("Цена",         0); 
	Результат.Вставить("ЕдиницаИзмерения",         Неопределено);
	
	Возврат Результат;
	
КонецФункции     

// Добавляет новую строку в подобранную номенклатуру. 
// Если номенклатура с такой ценой уже есть, добавляется количество
// Если нет - добавляется новая строка
//
// Параметры
// ДобавляемыеДанные  - Структура
// - Номенклатура  - СправочникСсылка.Номенклатура 
// - Количество    - <Число 19.3>
// - Цена          - <Число 19.2>
&НаКлиенте
Процедура ДобавитьСтрокуПодобраннаяНоменклатура(ДанныеДобавляемойСтроки)
	
	ПараметрыПоиска = Новый Структура;
	
	ПараметрыПоиска.Вставить("Номенклатура", ДанныеДобавляемойСтроки.Номенклатура);
	Если ДанныеДобавляемойСтроки.Свойство("Цена") Тогда
		ПараметрыПоиска.Вставить("Цена", ДанныеДобавляемойСтроки.Цена);
	КонецЕсли;
	
	РезультатПоиска = Объект.ПодобраннаяНоменклатура.НайтиСтроки(ПараметрыПоиска);
	
	Если РезультатПоиска.Количество() = 0 Тогда
		ТекущаяСтрока = Объект.ПодобраннаяНоменклатура.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ДанныеДобавляемойСтроки,, "Количество");
	Иначе
		ТекущаяСтрока = РезультатПоиска[0];
	КонецЕсли;
	
	ТекущаяСтрока.Количество = ДанныеДобавляемойСтроки.Количество + ТекущаяСтрока.Количество;
	
	Если ДанныеДобавляемойСтроки.Свойство("Цена") Тогда
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Количество * ТекущаяСтрока.Цена;
	КонецЕсли;
	
	// Активизируем текущую строку табличной части
	Элементы.ПодобраннаяНоменклатура.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
	
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОсобенностьУчетаПриИзменении(Элемент)
	
	Элементы.СписокНоменклатуры.ТекущаяСтрока = Неопределено;
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокНоменклатуры, "ОсобенностьУчета",
		ОсобенностьУчета, ЗначениеЗаполнено(ОсобенностьУчета), ВидСравненияКомпоновкиДанных.Равно);
		
КонецПроцедуры
