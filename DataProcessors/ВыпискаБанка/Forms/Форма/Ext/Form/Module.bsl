
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;	
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("ВыпискаБанка", "КнопкаПроводкиДтКтПометка", Элементы.СписокДокументовДвиженияДтКт.Пометка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ТолькоОплаченныеПриИзменении(Элемент)
	
	СписокДокументов.Очистить();
	
	ЗаполнитьВыписку();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетОрганизацииПриИзменении(Элемент)
	
	СписокДокументов.Очистить();

	СчетОрганизацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Организация = Неопределено;
		СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Организация, СтруктурноеПодразделение);
		
		Если ТипЗнч(СтруктурноеПодразделениеОрганизация) = Тип("СправочникСсылка.Организации") Тогда 
			Организация = СтруктурноеПодразделениеОрганизация;
			СтруктурноеПодразделение = ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");
		КонецЕсли;
		
		УстановитьПараметрыВыбораБанковскогоСчета(ЭтаФорма);

		Если Результат.ИзмененаОрганизация Тогда
			
			СписокПодразделений.Очистить();
			СписокВладельцевГоловныхПодразделений.Очистить();
			СписокСтруктурныхЕдиниц.Очистить();
			
			СписокПодразделений.Добавить(ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка"), НСтр("ru = 'Головное подразделение'"));	
			ЗаполнитьПредставлениеСпискаПодразделений(ПредставлениеСпискаПодразделений, СписокПодразделений);
			
			СписокВладельцевГоловныхПодразделений.Добавить(Организация);
			СписокСтруктурныхЕдиниц.Добавить(Организация);
			
			ПриИзмененииЗначенияОрганизацииНаСервере();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ (ПоддержкаРаботыСоСтруктурнымиПодразделениями ) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораСтруктурногоПодразделения", ЭтаФорма, Параметры);

	ПараметрыФормы = Новый Структура("Организация, СтруктурноеПодразделение,СписокПодразделений, СписокСтруктурныхЕдиниц,СписокВладельцевГоловныхПодразделений, ДоступноИзменениеОрганизации, РежимРаботы"
									, Организация, СтруктурноеПодразделение,СписокПодразделений,СписокСтруктурныхЕдиниц, СписокВладельцевГоловныхПодразделений, Истина, "ПодборВОбработку");
	
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораСтруктурногоПодразделения", ПараметрыФормы, ЭтаФорма, Истина,,, ОписаниеОповещения);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ СПИСОК ДОКУМЕНТОВ

&НаКлиенте
Процедура СписокДокументовПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.СписокДокументов.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТекущаяСтрока.Документ) Тогда
		УстановитьДанныеПоРегистраторуНаСервере(Неопределено);
	Иначе      		
		УстановитьДанныеПоРегистраторуНаСервере(ТекущаяСтрока.Документ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовПослеУдаления(Элемент)
	
	РасчетОборотов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовДокументПриИзменении(Элемент)
	
	ДанныеСтрокиТаблицы  = Новый Структура("Документ, Оплачено, Контрагент, Организация, ВидОперации, СуммаДокумента, СуммаПриход, СуммаРасход, ИзменятьСостояние, ДокументПроведен"); 
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.СписокДокументов.ТекущиеДанные);	
	
	ЗаполнитьПоДаннымДокументамНаСервере(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(Элементы.СписокДокументов.ТекущиеДанные, ДанныеСтрокиТаблицы);
	
	РасчетОборотов(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОтбора	= Новый Структура;
	СтруктураОтбора.Вставить("Организация",	    Организация);
	СтруктураОтбора.Вставить("СчетОрганизации",	СчетОрганизации);
	СтруктураОтбора.Вставить("Оплачено",	    ТолькоОплаченные);
	СтруктураОтбора.Вставить("ДатаОтбора",	    ДатаОплаты);
	
	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("Отбор",              СтруктураОтбора);
	СтруктураПараметров.Вставить("РежимВыбора",        Истина);
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе", Истина);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("СписокДокументовСписокЗавершениеВыбора", ЭтотОбъект);

	ОткрытьФорму("ЖурналДокументов.РасчетныеДокументыБанк.Форма.ФормаСписка", СтруктураПараметров, Элемент,,,,ОбработчикОповещения, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовОплаченоПриИзменении(Элемент)
	
	РасчетОборотов(ЭтаФорма);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ДвиженияДтКт(Команда)
	
	Если Элементы.СписокДокументовДвиженияДтКт.Пометка Тогда
		Элементы.СписокДокументовДвиженияДтКт.Пометка = Ложь;		
	Иначе
		Элементы.СписокДокументовДвиженияДтКт.Пометка = Истина;		
	КонецЕсли;

	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокументы(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "Обработка ""выписка банка"" (проведение документов)");
	ПровестиДокументыНаСервере()
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписок(Команда)
	   	
	Если СписокДокументов.Количество() > 0 Тогда

		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?'");
				
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОчищениеТабличнойЧастиСписокДокументов", ЭтотОбъект, Параметры);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);		
	Иначе
		ЗаполнитьВыписку();
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(Команда)
	
	Для Каждого Строка из СписокДокументов Цикл
		Если Строка.ИзменятьСостояние Тогда
			Строка.Оплачено = Истина;
		КонецЕсли; 
	КонецЦикла;
	
	РасчетОборотов(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	
	Для Каждого Строка из СписокДокументов Цикл
		Если Строка.ИзменятьСостояние Тогда
			Строка.Оплачено = Ложь;
		КонецЕсли;                         		
	КонецЦикла;
	
	РасчетОборотов(ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Действия, после выбора значений

&НаКлиенте
Процедура ПослеЗакрытияВопросаОчищениеТабличнойЧастиСписокДокументов(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	

	СписокДокументов.Очистить();
	
	ЗаполнитьВыписку();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		СписокПодразделений = РезультатВыбора.СписокПодразделений;
		СписокСтруктурныхЕдиниц = РезультатВыбора.СписокСтруктурныхЕдиниц;
		СписокВладельцевГоловныхПодразделений = РезультатВыбора.СписокВладельцевГоловныхПодразделений;	
		
		ЗаполнитьПредставлениеСпискаПодразделений(ПредставлениеСпискаПодразделений, СписокПодразделений);		
		
		Если РезультатВыбора.ИзмененаОрганизация Тогда
			СтруктурноеПодразделениеОрганизация = РезультатВыбора.Организация;
			Организация = РезультатВыбора.Организация;
			ПриИзмененииЗначенияОрганизацииНаСервере();
		Иначе
			СписокДокументов.Очистить();			
			ЗаполнитьВыписку();         			
			УправлениеФормой(ЭтаФорма); 			
		КонецЕсли;			
	КонецЕсли;  	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовСписокЗавершениеВыбора(ВыбранноеЗначение, Параметры) Экспорт

	ТекущаяСтрока = Элементы.СписокДокументов.ТекущиеДанные;
	Если  ТекущаяСтрока = Неопределено ИЛИ ВыбранноеЗначение = Неопределено  Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока.Документ = ВыбранноеЗначение;	
	
КонецПроцедуры

//Управление формой
&НаСервере
Процедура ПодготовитьФормуНаСервере()

	Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	ДатаОплаты  = ОбщегоНазначения.ТекущаяДатаПользователя();	
	
	ВалютаРегламентированногоУчета	= ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Элементы.СписокДокументовДвиженияДтКт.Пометка = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ВыпискаБанка", "КнопкаПроводкиДтКтПометка", Истина);
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");;	
		
	СписокПодразделений.Добавить(Справочники.ПодразделенияОрганизаций.ПустаяСсылка(), НСтр("ru = 'Головное подразделение'"));	
	
	ПредставлениеСпискаПодразделений = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(СписокПодразделений);					
	
	СписокСтруктурныхЕдиниц.Добавить(Организация);		
	СписокВладельцевГоловныхПодразделений.Добавить(Организация);				
		
	Если ЗначениеЗаполнено(Организация) Тогда
		СчетОрганизации = Организация.ОсновнойБанковскийСчет;	
	КонецЕсли;
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Организация, СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	ПолучитьКурсВалютыСчета();
	
	ЗаполнитьВыписку();
	
	УстановитьПараметрыВыбораБанковскогоСчета(ЭтаФорма);
	
	ВалютаДенежныхСредств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетОрганизации,"ВалютаДенежныхСредств");
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	Если Форма.ВалютаДенежныхСредств = Форма.ВалютаРегламентированногоУчета ИЛИ НЕ ЗначениеЗаполнено(Форма.СчетОрганизации) Тогда		
		Элементы.ОстатокНаНачалоДняТенге.Видимость = Ложь;
		Элементы.ОстатокНаКонецДняТенге.Видимость  = Ложь;                                                                             		
	Иначе                                                 		
		Элементы.ОстатокНаНачалоДняТенге.Видимость = Истина;
		Элементы.ОстатокНаКонецДняТенге.Видимость  = Истина;		
	КонецЕсли;
	
	Элементы.ГруппаРегистрыБухгалтерии.Видимость = Элементы.СписокДокументовДвиженияДтКт.Пометка;
	Элементы.ПредставлениеСпискаПодразделений.Видимость = Форма.ПоддержкаРаботыСоСтруктурнымиПодразделениями;
				
КонецПроцедуры

&НаСервере
Процедура ПровестиДокументыНаСервере()

	Документ = "";
	
	Попытка   
		НачатьТранзакцию();

		Для Каждого Строка из СписокДокументов Цикл
			
			Если НЕ Строка.ИзменятьСостояние Тогда
				Продолжить;
			КонецЕсли;
            			
			Документ = Строка.Документ.ПолучитьОбъект();

			Если Строка.Оплачено И (НЕ Документ.Проведен) Тогда    
				Документ.Оплачено = Истина;
				Документ.Дата = ДатаОплаты;
				Документ.Записать(РежимЗаписиДокумента.Проведение);						
				Строка.ДокументПроведен = Истина;				
			КонецЕсли;  
		КонецЦикла;

		ЗафиксироватьТранзакцию();		
		РасчетОборотов(ЭтаФорма);
		//ЗаполнитьВыписку();

	Исключение
		ТекстСообщения = НСтр("ru='Ошибка при проведении документа %1. Проведение документов не выполнено!'");
		ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Документ));
	КонецПопытки
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеСпискаПодразделений(ПредставлениеСпискаПодразделений, СписокПодразделений)  
	
	Если Не СписокПодразделений.Количество() = 0 Тогда
		ПредставлениеСпискаПодразделений = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(СписокПодразделений);					
	Иначе
		ПредставлениеСпискаПодразделений = НСтр("ru = 'В целом по организации'");
	КонецЕсли;		
		
КонецПроцедуры

		
////////////////////////////////////////////////////////////
&НаСервере
Процедура УстановитьДанныеПоРегистраторуНаСервере(ТекущийДокумент)

	НаборЗаписей = РегистрыБухгалтерии.Типовой.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Значение = ТекущийДокумент;
	НаборЗаписей.Отбор.Регистратор.Использование = Истина;
	
	НаборЗаписей.Прочитать();
	
	ЗначениеВРеквизитФормы(НаборЗаписей, "РегистрБухгалтерииСписок");
	
	НаборЗаписей = РегистрыБухгалтерии.Налоговый.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Значение = ТекущийДокумент;
	НаборЗаписей.Отбор.Регистратор.Использование = Истина;
	
	НаборЗаписей.Прочитать();
	
	ЗначениеВРеквизитФормы(НаборЗаписей, "РегистрБухгалтерииНУСписок");	
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьКурсВалютыСчета()
	
	Если ВалютаДенежныхСредств = ВалютаРегламентированногоУчета ИЛИ СчетОрганизации.Пустая() Тогда		
		КурсВалютыСчета      = 1;
		КратностьВалютыСчета = 1;
	Иначе		
		СтруктураКурсыВалют = ОбщегоНазначенияБК.ПолучитьКурсВалюты(СчетОрганизации.ВалютаДенежныхСредств,КонецДня(ДатаОплаты));
		КурсВалютыСчета     = СтруктураКурсыВалют.Курс;
		КратностьВалютыСчета= СтруктураКурсыВалют.Кратность;		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьКурсВалютыСчета()	

&НаСервере
Процедура ЗаполнитьВыписку()
	
	ЗначениеТаймера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	УстановитьДанныеПоРегистраторуНаСервере(Неопределено);
		
	Если Организация.Пустая() ИЛИ СчетОрганизации.Пустая() ИЛИ
		НЕ ЗначениеЗаполнено(ДатаОплаты) Тогда		
		ОстатокНаНачалоДня      = 0;
		ОстатокНаНачалоДняТенге = 0;
		СуммаПриходИтого        = 0;
		СуммаРасходИтого        = 0;
		ОстатокНаКонецДня       = 0;
		ОстатокНаКонецДняТенге  = 0;		
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	// исходящие платежные поручения	
	ТекстЗапроса = "ВЫБРАТЬ
				   |	ПлатежноеПоручениеИсходящее.Проведен КАК Проведен,
	               |	ПлатежноеПоручениеИсходящее.Ссылка КАК Документ,
	               |	ПлатежноеПоручениеИсходящее.ВидОперации КАК ВидОперации,
	               |	ВЫБОР
	               |		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации = &Перевод
	               |			ТОГДА ПлатежноеПоручениеИсходящее.Организация.Представление
	               |		ИНАЧЕ ПлатежноеПоручениеИсходящее.Контрагент.Представление
	               |	КОНЕЦ КАК Контрагент,
	               |	ПлатежноеПоручениеИсходящее.Оплачено КАК Оплачено,
	               |	ИСТИНА КАК ИзменятьСостояние,
	               |	0 КАК СуммаПриход,
	               |	ЕСТЬNULL(ПлатежноеПоручениеИсходящее.СуммаДокумента, 0) + ЕСТЬNULL(ПлатежноеПоручениеИсходящее.СуммаКомиссии, 0) КАК СуммаРасход
	               |ИЗ
	               |	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	               |ГДЕ
	               |	ПлатежноеПоручениеИсходящее.СчетОрганизации = &СчетОрганизации
	               |	И ПлатежноеПоручениеИсходящее.Организация = &Организация
	               |	И НЕ ПлатежноеПоручениеИсходящее.ПометкаУдаления";
				   
	//Если список подразделений пустой, значит в целом по голове нужно рассчитать остатки, т.ею по всем СП
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями  И СписокПодразделений.Количество() <> 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "
					|	И ПлатежноеПоручениеИсходящее.СтруктурноеПодразделениеОтправитель В (&СтруктурноеПодразделение)";
	КонецЕсли;

	Если ТолькоОплаченные Тогда
		ТекстЗапроса = ТекстЗапроса + "
					|	И ПлатежноеПоручениеИсходящее.Оплачено
					|	И КонецПериода(ПлатежноеПоручениеИсходящее.Дата,День) = &ДатаОплаты";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
					|	И ((ПлатежноеПоручениеИсходящее.Оплачено И КонецПериода(ПлатежноеПоручениеИсходящее.Дата,День) = &ДатаОплаты)
					|	ИЛИ (НЕ ПлатежноеПоручениеИсходящее.Оплачено И КонецПериода(ПлатежноеПоручениеИсходящее.Дата,День) <= &ДатаОплаты))";
	КонецЕсли;

	// Входящие платежные поручения
	ТекстЗапроса = ТекстЗапроса + "
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	ПлатежноеПоручениеВходящее.Проведен,
					|	ПлатежноеПоручениеВходящее.Ссылка,
					|	ПлатежноеПоручениеВходящее.ВидОперации,
					|	ПлатежноеПоручениеВходящее.Контрагент.Представление,
					|	ПлатежноеПоручениеВходящее.Оплачено,
					|	ИСТИНА,
					|	ПлатежноеПоручениеВходящее.СуммаДокумента,
					|	0
					|ИЗ
					|	Документ.ПлатежноеПоручениеВходящее КАК ПлатежноеПоручениеВходящее
					|
					|ГДЕ
					|	ПлатежноеПоручениеВходящее.СчетОрганизации = &СчетОрганизации
					|	И ПлатежноеПоручениеВходящее.Организация = &Организация
					|	И НЕ ПлатежноеПоручениеВходящее.ПометкаУдаления";
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями  И СписокПодразделений.Количество() <> 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "
					|	И ПлатежноеПоручениеВходящее.СтруктурноеПодразделениеОтправитель В (&СтруктурноеПодразделение)";
	КонецЕсли;

	Если ТолькоОплаченные Тогда
		ТекстЗапроса = ТекстЗапроса + "
					|	И ПлатежноеПоручениеВходящее.Оплачено
					|	И КонецПериода(ПлатежноеПоручениеВходящее.Дата,День) = &ДатаОплаты";

	Иначе
		ТекстЗапроса = ТекстЗапроса + "
					|	И ((ПлатежноеПоручениеВходящее.Оплачено И КонецПериода(ПлатежноеПоручениеВходящее.Дата,День) = &ДатаОплаты)
					|	ИЛИ (НЕ ПлатежноеПоручениеВходящее.Оплачено И КонецПериода(ПлатежноеПоручениеВходящее.Дата,День) <= &ДатаОплаты))";

	КонецЕсли;
	
	// Платежные ордера
	ТекстЗапроса=ТекстЗапроса+"
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	ПлатежныйОрдерВходящий.Проведен,
					|	ПлатежныйОрдерВходящий.Ссылка,
					|	ПлатежныйОрдерВходящий.ВидОперации,
					|	ВЫБОР 
					|		Когда ПлатежныйОрдерВходящий.ВидОперации=&Инкассация 
					|		Тогда ПлатежныйОрдерВходящий.Организация.Представление
					|	    Иначе ПлатежныйОрдерВходящий.Контрагент.Представление	
					|   КОНЕЦ КАК Контрагент,
					|	ИСТИНА,
					|	ЛОЖЬ,
					|	ПлатежныйОрдерВходящий.СуммаДокумента,
					|	0
					|ИЗ
					|	Документ.ПлатежныйОрдерПоступлениеДенежныхСредств КАК ПлатежныйОрдерВходящий
					|
					|ГДЕ
					|	ПлатежныйОрдерВходящий.СчетОрганизации = &СчетОрганизации
					|	И ПлатежныйОрдерВходящий.Организация = &Организация
					|   И ПлатежныйОрдерВходящий.Проведен
					|	И КонецПериода(ПлатежныйОрдерВходящий.Дата,День) = &ДатаОплаты";
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями И СписокПодразделений.Количество() <> 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "
					|	И ПлатежныйОрдерВходящий.СтруктурноеПодразделениеОтправитель В (&СтруктурноеПодразделение)";
	КонецЕсли;
	
	ТекстЗапроса=ТекстЗапроса+"
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	ПлатежныйОрдерИсходящий.Проведен,
					|	ПлатежныйОрдерИсходящий.Ссылка,
					|	ПлатежныйОрдерИсходящий.ВидОперации,
					|	ПлатежныйОрдерИсходящий.Контрагент.Представление,
					|	ИСТИНА,
					|	ЛОЖЬ,
					|	0,
					|	ЕстьNull(ПлатежныйОрдерИсходящий.СуммаДокумента,0) + ЕстьNull(ПлатежныйОрдерИсходящий.СуммаКомиссии,0)
					|ИЗ
					|	Документ.ПлатежныйОрдерСписаниеДенежныхСредств КАК ПлатежныйОрдерИсходящий
					|
					|ГДЕ
					|	ПлатежныйОрдерИсходящий.СчетОрганизации = &СчетОрганизации
					|	И ПлатежныйОрдерИсходящий.Организация = &Организация
					|   И ПлатежныйОрдерИсходящий.Проведен
					|	И КонецПериода(ПлатежныйОрдерИсходящий.Дата,День) = &ДатаОплаты";
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями И СписокПодразделений.Количество() <> 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "
					|	И ПлатежныйОрдерИсходящий.СтруктурноеПодразделениеОтправитель В (&СтруктурноеПодразделение)";
	КонецЕсли;
	
	//Платежные поручения на перевод денежных средств: приход
		
	ТекстЗапроса = ТекстЗапроса+"
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|ВЫБРАТЬ
					|	ПлатежноеПоручениеИсходящее.Проведен,
					|	ПлатежноеПоручениеИсходящее.Ссылка,
					|	ПлатежноеПоручениеИсходящее.ВидОперации,
					|	ПлатежноеПоручениеИсходящее.Организация.Представление,	
					|	ПлатежноеПоручениеИсходящее.Оплачено,
					|	ИСТИНА,
					|	ПлатежноеПоручениеИсходящее.СуммаДокумента,
					|	0
					|ИЗ
					|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
					|
					|ГДЕ
					|	ПлатежноеПоручениеИсходящее.СчетКонтрагента = &СчетОрганизации
					|	И ПлатежноеПоручениеИсходящее.Организация = &Организация
					|	И ПлатежноеПоручениеИсходящее.ВидОперации=&Перевод
					|	И НЕ ПлатежноеПоручениеИсходящее.ПометкаУдаления";
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями И СписокПодразделений.Количество() <> 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "
					|	И ПлатежноеПоручениеИсходящее.СтруктурноеПодразделениеОтправитель В (&СтруктурноеПодразделение)";
	КонецЕсли;

	Если ТолькоОплаченные Тогда
		ТекстЗапроса = ТекстЗапроса + "
					|	И ПлатежноеПоручениеИсходящее.Оплачено
					|	И КонецПериода(ПлатежноеПоручениеИсходящее.Дата,День) = &ДатаОплаты";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
					|	И ((ПлатежноеПоручениеИсходящее.Оплачено И КонецПериода(ПлатежноеПоручениеИсходящее.Дата,День) = &ДатаОплаты)
					|	ИЛИ (НЕ ПлатежноеПоручениеИсходящее.Оплачено И КонецПериода(ПлатежноеПоручениеИсходящее.Дата,День) <= &ДатаОплаты))";
	КонецЕсли;
	
	//Платежные ордера на перевод денежных средств: при списании
		
	ТекстЗапроса=ТекстЗапроса+"
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|ВЫБРАТЬ
					|	ПлатежныйОрдерИсходящийПеревод.Проведен,
					|	ПлатежныйОрдерИсходящийПеревод.Ссылка,
					|	ПлатежныйОрдерИсходящийПеревод.ВидОперации,
					|	ПлатежныйОрдерИсходящийПеревод.Организация.Представление,
					|	ИСТИНА,
					|	ЛОЖЬ,
					|	ЕстьNull(ПлатежныйОрдерИсходящийПеревод.СуммаДокумента,0) + ЕстьNull(ПлатежныйОрдерИсходящийПеревод.СуммаКомиссии,0),
					|	0
					|ИЗ
					|	Документ.ПлатежныйОрдерСписаниеДенежныхСредств КАК ПлатежныйОрдерИсходящийПеревод
					|
					|ГДЕ
					|	ПлатежныйОрдерИсходящийПеревод.СчетКонтрагента = &СчетОрганизации
					|	И ПлатежныйОрдерИсходящийПеревод.Организация = &Организация
					|   И ПлатежныйОрдерИсходящийПеревод.Проведен
					|	И КонецПериода(ПлатежныйОрдерИсходящийПеревод.Дата,День) = &ДатаОплаты";
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями И СписокПодразделений.Количество() <> 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "
					|	И ПлатежныйОрдерИсходящийПеревод.СтруктурноеПодразделениеОтправитель В (&СтруктурноеПодразделение)";
	КонецЕсли;

	//Приходный кассовый ордер: получение наличности в банке
	ТекстЗапроса=ТекстЗапроса+"
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|ВЫБРАТЬ
					|	ПриходныйКассовыйОрдер.Проведен,
					|	ПриходныйКассовыйОрдер.Ссылка,
					|	ПриходныйКассовыйОрдер.ВидОперации,
					|	ПриходныйКассовыйОрдер.Организация.Представление,
					|	ИСТИНА,
					|	ЛОЖЬ,
					|	0,
					|	ПриходныйКассовыйОрдер.СуммаДокумента
					|ИЗ
					|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
					|
					|ГДЕ
					|	ПриходныйКассовыйОрдер.ВидОперации=&ПолучениеНаличности
					|	И ПриходныйКассовыйОрдер.СчетОрганизации = &СчетОрганизации
					|	И ПриходныйКассовыйОрдер.Организация = &Организация
					|   И ПриходныйКассовыйОрдер.Проведен
					|	И КонецПериода(ПриходныйКассовыйОрдер.Дата,День) = &ДатаОплаты";
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями И СписокПодразделений.Количество() <> 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "
					|	И ПриходныйКассовыйОрдер.СтруктурноеПодразделениеПолучатель В (&СтруктурноеПодразделение)";
	КонецЕсли;
	
	//Расходный кассовый ордер: взнос наличными в банк
	ТекстЗапроса=ТекстЗапроса+"
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	РасходныйКассовыйОрдер.Проведен,
					|	РасходныйКассовыйОрдер.Ссылка,
					|	РасходныйКассовыйОрдер.ВидОперации,
					|	РасходныйКассовыйОрдер.Организация.Представление,
					|	ИСТИНА,
					|	ЛОЖЬ,
					|	РасходныйКассовыйОрдер.СуммаДокумента,
					|	0
					|ИЗ
					|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
					|
					|ГДЕ
					|   РасходныйКассовыйОрдер.ВидОперации=&ВзносНаличными
					|	И РасходныйКассовыйОрдер.СчетОрганизации = &СчетОрганизации
					|	И РасходныйКассовыйОрдер.Организация = &Организация
					|   И РасходныйКассовыйОрдер.Проведен
					|	И КонецПериода(РасходныйКассовыйОрдер.Дата,День) = &ДатаОплаты";
					
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями И СписокПодразделений.Количество() <> 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "
					|	И РасходныйКассовыйОрдер.СтруктурноеПодразделениеОтправитель В (&СтруктурноеПодразделение)";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
					|УПОРЯДОЧИТЬ ПО
					|	Документ";

	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("СчетОрганизации", 		  СчетОрганизации);
	Запрос.УстановитьПараметр("Организация", 			  Организация);
    Запрос.УстановитьПараметр("ДатаОплаты",      		  КонецДня(ДатаОплаты));
	Запрос.УстановитьПараметр("Перевод",				  Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет);
	Запрос.УстановитьПараметр("ПолучениеНаличности",	  Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке);
	Запрос.УстановитьПараметр("ВзносНаличными",		      Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк);
	Запрос.УстановитьПараметр("Инкассация",				  Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ИнкассацияДенежныхСредств);
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями  Тогда
		Если СписокПодразделений.Количество() = 0 Тогда
			Запрос.УстановитьПараметр("СтруктурноеПодразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());	
		Иначе
			Запрос.УстановитьПараметр("СтруктурноеПодразделение", СписокПодразделений.ВыгрузитьЗначения());
		КонецЕсли;
		
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить().Выбрать();

	Пока РезультатЗапроса.Следующий() Цикл

		Строка = СписокДокументов.Добавить();

		Строка.Документ        		= РезультатЗапроса.Документ;
		Строка.Контрагент      		= РезультатЗапроса.Контрагент;
		Строка.ВидОперации      	= РезультатЗапроса.ВидОперации;
		Строка.СуммаПриход     		= РезультатЗапроса.СуммаПриход;
		Строка.СуммаРасход     		= РезультатЗапроса.СуммаРасход;
		Строка.ДокументПроведен     = РезультатЗапроса.Проведен;
		Если РезультатЗапроса.Документ.Проведен Тогда
			Строка.Оплачено        		= РезультатЗапроса.Оплачено;
		Иначе
			Строка.Оплачено = Ложь;
		КонецЕсли;
		Строка.ИзменятьСостояние	= РезультатЗапроса.ИзменятьСостояние;		
	КонецЦикла;

	Если  СписокДокументов.Количество() > 0 Тогда
		УстановитьДанныеПоРегистраторуНаСервере(СписокДокументов[0].Документ);
	КонецЕсли;
	
	РасчетНачальногоОстатка();
	
	РасчетОборотов(ЭтаФорма);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени("Обработка ""выписка банка"" (заполнение)", ЗначениеТаймера);
	
КонецПроцедуры // ЗаполнитьВыписку()

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетОборотов(Форма)

	Форма.СуммаПриходИтого = 0;
	Форма.СуммаРасходИтого = 0;
//	Форма.ОстатокНаКонецДня = 0;
	Форма.ОстатокНаКонецДняТенге = 0;

	Для Каждого Строка Из Форма.СписокДокументов Цикл

		Если Строка.Оплачено Тогда

			Форма.СуммаПриходИтого = Форма.СуммаПриходИтого + Строка.СуммаПриход;
			Форма.СуммаРасходИтого = Форма.СуммаРасходИтого + Строка.СуммаРасход;

		КонецЕсли;

	КонецЦикла;

	Форма.ОстатокНаКонецДня = Форма.ОстатокНаНачалоДня + Форма.СуммаПриходИтого - Форма.СуммаРасходИтого;
	
	Если НЕ Форма.ВалютаДенежныхСредств = Форма.ВалютаРегламентированногоУчета Тогда
		Форма.ОстатокНаКонецДняТенге =?(НЕ Форма.КратностьВалютыСчета = 0, Форма.ОстатокНаКонецДня * Форма.КурсВалютыСчета/Форма.КратностьВалютыСчета, 0);
	КонецЕсли;

КонецПроцедуры // РасчетОборотов()

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииНаСервере()
	
	Если ЗначениеЗаполнено(СтруктурноеПодразделение) Тогда
		СчетОрганизации = СтруктурноеПодразделение.ОсновнойБанковскийСчет;
	Иначе
		СчетОрганизации = Организация.ОсновнойБанковскийСчет;
	КонецЕсли;

	ПолучитьКурсВалютыСчета();

	СписокДокументов.Очистить();
	
	ЗаполнитьВыписку();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура РасчетНачальногоОстатка()

	МассивВидов = Новый Массив;
	МассивВидов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДенежныеСредства);
    СчетУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетУчетаДенежныхСредств(СчетОрганизации, Истина).СчетУчетаБУ;
	
	Запрос = Новый Запрос;
	УсловиеСтруктурноеПодразделение = "";
	Запрос.УстановитьПараметр("СчетОрганизации",		  СчетОрганизации);
	Запрос.УстановитьПараметр("Организация",     		  Организация);
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями И  СписокПодразделений.Количество() <> 0 Тогда
	    Запрос.УстановитьПараметр("СтруктурноеПодразделение", СписокПодразделений.ВыгрузитьЗначения());
		УсловиеСтруктурноеПодразделение = " И СтруктурноеПодразделение В (&СтруктурноеПодразделение)";
	КонецЕсли;
	Запрос.УстановитьПараметр("Период",         		  ДатаОплаты);
	Запрос.УстановитьПараметр("Субконто",          		  МассивВидов);
	
	ОстатокНаНачалоДня = 0;
	ОстатокНаНачалоДняТенге = 0;
	
	Если СчетОрганизации.ВалютаДенежныхСредств = ВалютаРегламентированногоУчета Тогда
		
		Запрос.УстановитьПараметр("Счет", СчетУчета);
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТиповойОстатки.Счет,
		|	ТиповойОстатки.Субконто1,
		|	ТиповойОстатки.СуммаОстаток
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(&Период, Счет в иерархии(&Счет), &Субконто, Организация = &Организация" + УсловиеСтруктурноеПодразделение + " И Субконто1 = &СчетОрганизации) КАК ТиповойОстатки";
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			ОстатокНаНачалоДня = Результат.СуммаОстаток;
		Иначе
			ОстатокНаНачалоДня = 0;
		КонецЕсли;
		
	Иначе
		
		Запрос.УстановитьПараметр("Счет", СчетУчета);
		
		Запрос.Текст = "	
		|ВЫБРАТЬ
		|	ТиповойОстатки.Счет,
		|	ТиповойОстатки.Субконто1,
		|	ТиповойОстатки.ВалютнаяСуммаОстаток,
		|ВЫРАЗИТЬ 
		|	(ВЫБОР 
		|		КОГДА КурсыВалютСчета.Курс <>0 ТОГДА
		|			ТиповойОстатки.ВалютнаяСуммаОстаток*КурсыВалютСчета.Курс
		|			/ КурсыВалютСчета.Кратность
		|		ИНАЧЕ
		|			0
		|		КОНЕЦ КАК ЧИСЛО (15,2)) КАК СуммаОстатокТенге,
		|	КурсыВалютСчета.Курс КАК КурсВалютыСчета,
		|	КурсыВалютСчета.Кратность КАК КратностьВалютыСчета
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(&Период, Счет в иерархии(&Счет), &Субконто, Организация = &Организация" + УсловиеСтруктурноеПодразделение + " И Субконто1 = &СчетОрганизации) КАК ТиповойОстатки,
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаРасчета, Валюта=&ВалютаСчета) КАК КурсыВалютСчета";
		
		Запрос.УстановитьПараметр("ДатаРасчета",КонецДня(ДатаОплаты));
		Запрос.УстановитьПараметр("ВалютаСчета",СчетОрганизации.ВалютаДенежныхСредств);
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если  Результат.Следующий() Тогда                         			
			ОстатокНаНачалоДня = Результат.ВалютнаяСуммаОстаток;
			ОстатокНаНачалоДняТенге = Результат.СуммаОстатокТенге;					
		Иначе  			
			ОстатокНаНачалоДня=0;
			ОстатокНаНачалоДняТенге=0;				
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры // РасчетНачальногоОстатка()

&НаСервере
Процедура ЗаполнитьПоДаннымДокументамНаСервере(ТекущиеДанныеДокумента)
	
	ТекущийДокумент        = ТекущиеДанныеДокумента.Документ;
	Если ЗначениеЗаполнено(ТекущийДокумент) Тогда

		ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийДокумент, "Организация, Контрагент, ВидОперации, СуммаДокумента, Оплачено, Проведен");
		ТекущиеДанныеДокумента.Оплачено    = ДанныеДокумента.Оплачено;
		ТекущиеДанныеДокумента.ВидОперации = ДанныеДокумента.ВидОперации;
		ТекущиеДанныеДокумента.ДокументПроведен = ДанныеДокумента.Проведен;
		
		ТипДокумента = ТипЗнч(ТекущийДокумент);

		Если ТипДокумента = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда

			ТекущиеДанныеДокумента.Контрагент        = ДанныеДокумента.Контрагент;
			ТекущиеДанныеДокумента.СуммаРасход       = ДанныеДокумента.СуммаДокумента;
			ТекущиеДанныеДокумента.СуммаПриход       = 0;
			ТекущиеДанныеДокумента.ИзменятьСостояние = Истина;

		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда

			ТекущиеДанныеДокумента.Контрагент        = ДанныеДокумента.Контрагент;
			ТекущиеДанныеДокумента.СуммаПриход       = ДанныеДокумента.СуммаДокумента;;
			ТекущиеДанныеДокумента.СуммаРасход       = 0;
            ТекущиеДанныеДокумента.ИзменятьСостояние = Истина;
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств") Тогда

			ТекущиеДанныеДокумента.Контрагент        = ДанныеДокумента.Контрагент;
			ТекущиеДанныеДокумента.СуммаРасход       = ДанныеДокумента.СуммаДокумента;
			ТекущиеДанныеДокумента.СуммаПриход       = 0;
			ТекущиеДанныеДокумента.ИзменятьСостояние = Ложь;
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств") Тогда

			ТекущиеДанныеДокумента.Контрагент        = ?(ДанныеДокумента.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ИнкассацияДенежныхСредств"),
			                                            ДанныеДокумента.Организация,
														ДанныеДокумента.Контрагент);
														
			ТекущиеДанныеДокумента.СуммаРасход       = 0;
			ТекущиеДанныеДокумента.СуммаПриход       = ДанныеДокумента.СуммаДокумента;
			ТекущиеДанныеДокумента.ИзменятьСостояние = Ложь;
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда

			ТекущиеДанныеДокумента.Контрагент        = ДанныеДокумента.Организация;
			ТекущиеДанныеДокумента.СуммаРасход       = ДанныеДокумента.СуммаДокумента;
			ТекущиеДанныеДокумента.СуммаПриход       = 0;
			ТекущиеДанныеДокумента.ИзменятьСостояние = Ложь;
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда

			ТекущиеДанныеДокумента.Контрагент        = ДанныеДокумента.Организация;
			ТекущиеДанныеДокумента.СуммаРасход       = 0;
			ТекущиеДанныеДокумента.СуммаПриход       = ДанныеДокумента.СуммаДокумента;
			ТекущиеДанныеДокумента.ИзменятьСостояние = Ложь;
				
		КонецЕсли;

	Иначе  
		ТекущиеДанныеДокумента.Контрагент  = Новый(Тип("СправочникСсылка.Контрагенты"));
		ТекущиеДанныеДокумента.СуммаПриход = 0;
		ТекущиеДанныеДокумента.СуммаРасход = 0;
		ТекущиеДанныеДокумента.Оплачено    = Ложь;
	КонецЕсли;

	УстановитьДанныеПоРегистраторуНаСервере(ТекущийДокумент);
	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораБанковскогоСчета(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	НовыйМассивПараметров = Новый Массив();			
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Форма.Организация));		
	Элементы.СчетОрганизации.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);	
			
КонецПроцедуры

&НаСервере
Процедура СчетОрганизацииПриИзмененииНаСервере()	
	
	ВалютаДенежныхСредств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетОрганизации,"ВалютаДенежныхСредств");
	
	ПолучитьКурсВалютыСчета();
		
	ЗаполнитьВыписку();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КарточкаСубконто(Команда)
	                   	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", ДатаОплаты);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  ДатаОплаты);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СписокСтруктурныхЕдиниц", СписокСтруктурныхЕдиниц);
	ПредставлениеСпискаОрганизаций = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(СписокСтруктурныхЕдиниц);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПредставлениеСпискаОрганизаций", ПредставлениеСпискаОрганизаций);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СписокПодразделений", СписокПодразделений);
	ПредставлениеСпискаПодразделений = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(СписокПодразделений);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПредставлениеСпискаПодразделений", ПредставлениеСпискаПодразделений);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СписокВладельцевГоловныхПодразделений", СписокВладельцевГоловныхПодразделений);
		
	СписокВидовСубконто  = Новый СписокЗначений;
	СписокВидовСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоТиповые.ДенежныеСредства"));
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СписокВидовСубконто", СписокВидовСубконто);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательБУ", Истина);

	Если ЗначениеЗаполнено(СчетОрганизации) Тогда
		ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
		ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Субконто1", СчетОрганизации, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;	
	//ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	//ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";
	//БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Счет",  ПроцедурыБухгалтерскогоУчета.ПолучитьСчетУчетаДенежныхСредств(СчетОрганизации, Истина).СчетУчетаБУ, ВидСравненияКомпоновкиДанных.Равно);
	     	     									 
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);	

	ОткрытьФорму("Отчет.КарточкаСубконтоТиповой.Форма.ФормаОтчета", ПараметрыФормы,, Истина);

	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОплатыПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ДатаОплаты) Тогда  
		Возврат;
	ИначеЕсли ДатаОплаты >= '39990101' Тогда 
		ДатаОплаты = '39990101';
	КонецЕсли;
    
	ПолучитьКурсВалютыСчета();
	
	Если СписокДокументов.Количество() > 0 Тогда

		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?'");
				
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОчищениеТабличнойЧастиСписокДокументов", ЭтотОбъект, Параметры);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);		
	Иначе
		ЗаполнитьВыписку();
	КонецЕсли;
	
КонецПроцедуры


