
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьОбменВС = ПолучитьФункциональнуюОпцию("ИспользоватьОбменВС");
	// вставить проверку на полные права, в таком случае берем всех пользователей
	ПользовательИБ = ЭСФКлиентСерверПереопределяемый.ТекущийПользователь();
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеНастроекЭСФ",ПользовательИБ) Тогда
		ЗаполнитьОбновитьПрофили();
		Элементы.ОтборПоПрофилю.Видимость = Истина;
	Иначе
		Элементы.ОтборПоПрофилю.Видимость = Ложь;
			
		МассивПрофилейИСЭСФ = ЭСФВызовСервераПовтИсп.ПрофилиИСЭСФ(Неопределено, Неопределено, ПользовательИБ);		
		ЗаполнитьОбновитьПрофили(?(МассивПрофилейИСЭСФ.Количество()>0, МассивПрофилейИСЭСФ, Неопределено));		
	КонецЕсли;
		
	Для Каждого Строка из ПрофилиАвтосинхронизации Цикл 
		Если ИспользоватьОбменВС Тогда
			Если ЗначениеЗаполнено(Строка.ВремяТикетаВС) и не Строка.ВремяТикетаВС = НСтр("ru='Тикет отсутствует'")  Тогда
				Попытка
					ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(Строка.ВремяТикетаВС, ФабрикаXDTO);
					timeMark = ОтветXDTO.timeMark;
					ttlInMinutes = ОтветXDTO.ttlInMinutes;
					Строка.ВремяТикетаВС = ДатаИзUnixTime(timeMark)+ttlInMinutes*60;
				Исключение					
				КонецПопытки;	
			Иначе
				Строка.ВремяТикетаВС = НСтр("ru='Тикет отсутствует'");
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.ВремяТикетаЭСФ) и не Строка.ВремяТикетаЭСФ = НСтр("ru='Тикет отсутствует'") Тогда
			Попытка
				ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(Строка.ВремяТикетаЭСФ, ФабрикаXDTO);
				timeMark = ОтветXDTO.timeMark;
				ttlInMinutes = ОтветXDTO.ttlInMinutes;
				Строка.ВремяТикетаЭСФ = ДатаИзUnixTime(timeMark)+ttlInMinutes*60;
			Исключение
			КонецПопытки;
		Иначе
			Строка.ВремяТикетаЭСФ = НСтр("ru='Тикет отсутствует'");
		КонецЕсли;
	КонецЦикла;		
		
	Если не ИспользоватьОбменВС Тогда		
		Элементы.ПрофилиАвтосинхронизацииВремяТикетаВС.Видимость = Ложь;		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьТикет(Команда)
	
	ТекущиеДанные = Элементы.ПрофилиАвтосинхронизации.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда		
		
		ТекущийПрофиль = ЭСФВызовСервера.ДанныеПрофиляИСЭСФ(ТекущиеДанные.Профиль);
		ТекущаяОрганизация = ТекущиеДанные.Организация;
		
		ПользователиИСЭСФ = Новый Массив;
		ПользователиИСЭСФ.Добавить(ТекущийПрофиль.ПользовательИСЭСФ.Ссылка);
		
		ТикетЗаполнен = Ложь;

		Попытка
			ТекущаяДатаТикета = Дата(ТекущиеДанные.ВремяТикетаЭСФ);
			ТикетЗаполнен = Истина;
			
		Исключение
			ТикетЗаполнен = Ложь;
		КонецПопытки;	
			
		ДопПараметры = Новый Структура("Профиль, СтруктурнаяЕдиница, ТикетЗаполнен", ТекущиеДанные.Профиль, ТекущаяОрганизация, ТикетЗаполнен);
		ОбработчикОповещенияВыбораДанных = Новый ОписаниеОповещения("ОбработчикОповещенияВыбораДанных", ЭтаФорма, ДопПараметры);
			
		Если ЭСФВызовСервера.ИспользоватьОткрытиеСессииСПодписью() И ЭСФВызовСервера.ИспользоватьВнешнююКриптографиюДляКомпоненты() Тогда
			КоллекцияСтруктурныхЕдиниц = Новый Соответствие;
			КоллекцияСтруктурныхЕдиниц.Вставить(ТекущаяОрганизация, ТекущийПрофиль);
			ДополнительныеПараметры = Новый Структура("СписокСтруктурныхЕдиниц, МассивПользователейИСЭСФБезПароля, ТребуетсяВыборСертификатаВхода", 
				КоллекцияСтруктурныхЕдиниц, ПользователиИСЭСФ, Истина);
			ЭСФКлиент.ОткрытьФормуВводаДанныхИСЭСФ(ОбработчикОповещенияВыбораДанных, ДополнительныеПараметры);
		Иначе
			ЭСФКлиент.ПаролиАутентификации(ОбработчикОповещенияВыбораДанных, ПользователиИСЭСФ);
		КонецЕсли;	
				
		ЗаполнитьОбновитьПрофили(ТекущиеДанные.Профиль);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВсеТикеты(Команда)
	
	ОчиститьВсеТикетыНаСервере();
		
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТикет(Команда)
	
	ТекущиеДанные = Элементы.ПрофилиАвтосинхронизации.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ОчиститьТекущийТикетНаСервере(ТекущиеДанные.Профиль);
				
	КонецЕсли;		
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Конвертирует дату из формата UnixTime в тип Дата.
//
// Параметры:
// Источник - Число - число в формате UnixTime, например 1405955187848899.
//
// Возвращаемое значение:
// Дата - значение даты.
//
&НаСервере
Функция ДатаИзUnixTime(Источник) Экспорт
    
    Возврат МестноеВремя(Дата(1970, 1, 1, 0 ,0, 0) + Источник / 1000)
    
КонецФункции

&НаСервере
Процедура ЗаполнитьОбновитьПрофили(Профиль = Неопределено, ЭтоОтбор = Ложь)
	
	Запрос = Новый Запрос;	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |		АктивныеСессииИСЭСФ.ПрофильИСЭСФ КАК Профиль,
	               |		АктивныеСессииИСЭСФ.ПрофильИСЭСФ.СтруктурнаяЕдиница КАК Организация,
	               |		ВЫБОР
	               |			КОГДА АктивныеСессииИСЭСФ.ПрофильИСЭСФ = &ПользовательДляГСВС
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ КАК ИспользуетсяДляГСВС,
	               |		ВЫБОР
	               |			КОГДА АктивныеСессииИСЭСФ.ИмяМодуля = ""ESF""
	               |				ТОГДА АктивныеСессииИСЭСФ.ТикетСессии
	               |		КОНЕЦ КАК ВремяТикетаЭСФ,
	               |		ВЫБОР
	               |			КОГДА АктивныеСессииИСЭСФ.ИмяМодуля = ""VS""
	               |				ТОГДА АктивныеСессииИСЭСФ.ТикетСессии
	               |		КОНЕЦ КАК ВремяТикетаВС
	               |	ИЗ
	               |		РегистрСведений.АктивныеСессииИСЭСФ КАК АктивныеСессииИСЭСФ
	               |	ГДЕ  НЕ АктивныеСессииИСЭСФ.ПрофильИСЭСФ.ПометкаУдаления
				   |		И АктивныеСессииИСЭСФ.ПрофильИСЭСФ.ИспользоватьДляСинхронизации
				   |		И АктивныеСессииИСЭСФ.ПрофильИСЭСФ.ИспользоватьДляРегламентногоЗадания	              	
				   |" + ?(Профиль<>Неопределено, "  
	               |	И АктивныеСессииИСЭСФ.ПрофильИСЭСФ " + ?(ТипЗнч(Профиль)=Тип("ФиксированныйМассив"), "В (&Профиль)", " = &Профиль"), "");
	
	Запрос.УстановитьПараметр("ПользовательДляГСВС", Константы.ПользовательДляСинхронизацииСГСВС.Получить());
	Запрос.УстановитьПараметр("Профиль", Профиль);
	Результат = Запрос.Выполнить();
	ИсходнаяТаблицаЗначений = Результат.Выгрузить();
	
	Если ЭтоОтбор Тогда
		ПрофилиАвтосинхронизации.Очистить();	
	КонецЕсли;	
	
	КопияТаблицаЗначений = ИсходнаяТаблицаЗначений.Скопировать();
	ИсходнаяТаблицаЗначений.Свернуть("Профиль, Организация, ИспользуетсяДляГСВС");
	
	Если ИспользоватьОбменВС Тогда
		ИсходнаяТаблицаЗначений.Колонки.Добавить("ВремяТикетаВС");
	КонецЕсли;
	
	ИсходнаяТаблицаЗначений.Колонки.Добавить("ВремяТикетаЭСФ");
	
	Для каждого Стр из ИсходнаяТаблицаЗначений Цикл
		масСтрок = КопияТаблицаЗначений.НайтиСтроки(Новый Структура("Профиль, Организация, ИспользуетсяДляГСВС", Стр.Профиль, Стр.Организация, Стр.ИспользуетсяДляГСВС));
		Для каждого СтрМас из масСтрок Цикл		
			
			Если ИспользоватьОбменВС Тогда
				Если ЗначениеЗаполнено(СтрМас.ВремяТикетаВС) и не СтрМас.ВремяТикетаВС=НСтр("ru='Тикет отсутствует'") Тогда
					Стр.ВремяТикетаВС = СтрМас.ВремяТикетаВС;					
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрМас.ВремяТикетаЭСФ) и не СтрМас.ВремяТикетаЭСФ=НСтр("ru='Тикет отсутствует'")  Тогда
				Стр.ВремяТикетаЭСФ = СтрМас.ВремяТикетаЭСФ;							
			КонецЕсли;

		КонецЦикла;	
	КонецЦикла;
	
	Для каждого Строка из ИсходнаяТаблицаЗначений Цикл
		
		Если не ЗначениеЗаполнено(Строка.ВремяТикетаЭСФ)  Тогда
			Строка.ВремяТикетаЭСФ = НСтр("ru='Тикет отсутствует'"); 
		Иначе
			Попытка
				ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(Строка.ВремяТикетаЭСФ, ФабрикаXDTO);
				timeMark = ОтветXDTO.timeMark;
				ttlInMinutes = ОтветXDTO.ttlInMinutes;
				Строка.ВремяТикетаЭСФ = ДатаИзUnixTime(timeMark)+ttlInMinutes*60;				
			Исключение
			КонецПопытки;
			
		КонецЕсли;	
		
		Если ИспользоватьОбменВС Тогда
			Если не ЗначениеЗаполнено(Строка.ВремяТикетаВС)  Тогда
				Строка.ВремяТикетаВС = НСтр("ru='Тикет отсутствует'"); 
			Иначе
				Попытка
					ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(Строка.ВремяТикетаВС, ФабрикаXDTO);
					timeMark = ОтветXDTO.timeMark;
					ttlInMinutes = ОтветXDTO.ttlInMinutes;
					Строка.ВремяТикетаВС = ДатаИзUnixTime(timeMark)+ttlInMinutes*60;
				Исключение
				КонецПопытки;
			КонецЕсли;	 
		КонецЕсли;
	КонецЦикла;	
	
	Если Профиль = Неопределено Тогда
		
		ПрофилиАвтосинхронизации.Загрузить(ИсходнаяТаблицаЗначений);		
		
	Иначе		
		
		Если ТипЗнч(Профиль) = Тип("СправочникСсылка.ПрофилиИСЭСФ") и не ЭтоОтбор  Тогда
			
			масПрофилей = ПрофилиАвтосинхронизации.НайтиСтроки(Новый Структура("Профиль",Профиль));
			
			Если масПрофилей.Количество()>0 Тогда 
				Если ИспользоватьОбменВС Тогда	
					Если ЗначениеЗаполнено(ИсходнаяТаблицаЗначений[0].ВремяТикетаВС)  Тогда
						Попытка
							ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ИсходнаяТаблицаЗначений[0].ВремяТикетаВС, ФабрикаXDTO);
							timeMark = ОтветXDTO.timeMark;
							ttlInMinutes = ОтветXDTO.ttlInMinutes;
							масПрофилей[0].ВремяТикетаВС = ДатаИзUnixTime(timeMark)+ttlInMinutes*60;
						Исключение
							Попытка
								Если ТипЗнч(Дата(ИсходнаяТаблицаЗначений[0].ВремяТикетаВС)) = Тип("Дата") Тогда
									масПрофилей[0].ВремяТикетаВС = ИсходнаяТаблицаЗначений[0].ВремяТикетаВС;
								КонецЕсли;	
							Исключение	
								масПрофилей[0].ВремяТикетаВС = НСтр("ru='Тикет отсутствует'"); 
							КонецПопытки;
						КонецПопытки;						
					Иначе
						масПрофилей[0].ВремяТикетаВС = НСтр("ru='Тикет отсутствует'");
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ИсходнаяТаблицаЗначений[0].ВремяТикетаЭСФ)   Тогда
					Попытка
						ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ИсходнаяТаблицаЗначений[0].ВремяТикетаЭСФ, ФабрикаXDTO);
						timeMark = ОтветXDTO.timeMark;
						ttlInMinutes = ОтветXDTO.ttlInMinutes;
						масПрофилей[0].ВремяТикетаЭСФ = ДатаИзUnixTime(timeMark)+ttlInMinutes*60;
					Исключение
						
						Попытка
							Если ТипЗнч(Дата(ИсходнаяТаблицаЗначений[0].ВремяТикетаЭСФ)) = Тип("Дата") Тогда
								масПрофилей[0].ВремяТикетаЭСФ = ИсходнаяТаблицаЗначений[0].ВремяТикетаЭСФ;
							КонецЕсли;	
						Исключение	
							масПрофилей[0].ВремяТикетаЭСФ = НСтр("ru='Тикет отсутствует'"); 
						КонецПопытки;							
					КонецПопытки;
				Иначе
					масПрофилей[0].ВремяТикетаЭСФ = НСтр("ru='Тикет отсутствует'");
				КонецЕсли; 
				
			КонецЕсли;			
			
		Иначе
			
			ПрофилиАвтосинхронизации.Загрузить(ИсходнаяТаблицаЗначений);
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, ИмяРеквизита)
											
	Возврат ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);										
											
КонецФункции

&НаКлиенте
Процедура ОбработчикОповещенияВыбораДанных(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если ЭСФВызовСервера.ИспользоватьОткрытиеСессииСПодписью() Тогда
			ДанныеКлючаЭЦП = ПодготовитьДанныеКлючаЭЦП(Результат, ДополнительныеПараметры.СтруктурнаяЕдиница);
			ОткрытьСессиюСПодписьюПоПрофилюНаКлиенте(ДополнительныеПараметры.Профиль, ДанныеКлючаЭЦП, ДополнительныеПараметры.ТикетЗаполнен);
		Иначе
			ОткрытьСессиюПоПрофилю(ДополнительныеПараметры.Профиль);
		КонецЕсли;
		ЗаполнитьОбновитьПрофили(ДополнительныеПараметры.Профиль);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОткрытьСессиюПоПрофилю(Профиль)
	
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(Профиль);
	
	ИдентификаторСессии = ЭСФСервер.ОткрытьСессию(ДанныеПрофиляИСЭСФ);
	Если ЗначениеЗаполнено(ИдентификаторСессии) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Вход в ИС ЭСФ успешно выполнен.'");
		Сообщение.Сообщить();
		ЭСФСервер.ЗакрытьСессию(ДанныеПрофиляИСЭСФ, ИдентификаторСессии);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСессиюСПодписьюПоПрофилюНаКлиенте(Профиль, ДанныеКлючаЭЦП = Неопределено, ТикетЗаполнен)
	
	ДанныеПрофиляИСЭСФ = ЭСФВызовСервера.ДанныеПрофиляИСЭСФ(Профиль);
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();
	ПараметрыОткрытияСессии = ЭСФКлиентСервер.ПолучитьПараметрыОткрытияСессииСПодписьюПоУмолчанию();
	
	ПараметрыОткрытияСессии.ТребуетсяДополнительноеОткрытиеСессииВС = Истина;
	ПараметрыОткрытияСессии.ОткрытьСессиюБезПроверок = ТикетЗаполнен;
	ИдентификаторСессии = ЭСФКлиент.ОткрытьСессиюСПодписьюПользователя(Профиль, ПараметрыОткрытияСессии, ДанныеКлючаЭЦП);
	
	Если ЗначениеЗаполнено(ИдентификаторСессии) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Вход в ИС ЭСФ успешно выполнен.'");
		Сообщение.Сообщить();
		ЗакрытьСессию(ДанныеПрофиляИСЭСФ, ИдентификаторСессии);
	КонецЕсли;
	
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.АктивныеСессииИСЭСФ"));
	
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьДанныеКлючаЭЦП(РезультатВводаДанных, СтруктурнаяЕдиница)
	
	ДанныеКлючаДляВхода = Неопределено;
	Если ТипЗнч(РезультатВводаДанных) = Тип("Соответствие") Тогда
		ДанныеСтруктурнойЕдиницы = РезультатВводаДанных.Получить(СтруктурнаяЕдиница);
		Если ТипЗнч(ДанныеСтруктурнойЕдиницы) = Тип("Структура") Тогда
			КлючВхода = Неопределено;
			ПарольВхода = Неопределено;
			ДанныеСтруктурнойЕдиницы.Свойство("КлючВходаBase64", КлючВхода);
			ДанныеСтруктурнойЕдиницы.Свойство("ПарольВхода", ПарольВхода);
			Если ЗначениеЗаполнено(КлючВхода) И ЗначениеЗаполнено(ПарольВхода) Тогда
				ДанныеКлючаДляВхода = Новый Структура;
				ДанныеКлючаДляВхода.Вставить("КлючBase64",КлючВхода);
				ДанныеКлючаДляВхода.Вставить("Пароль",ПарольВхода);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеКлючаДляВхода;
	
КонецФункции

&НаСервере
Процедура ОчиститьТекущийТикетНаСервере(ТекущийПрофиль)
	
	ЭСФСервер.СохранитьТикетСессии(ТекущийПрофиль, "ESF", Неопределено);
	ЭСФСервер.СохранитьТикетСессии(ТекущийПрофиль, "VS", Неопределено);
	ЗаполнитьОбновитьПрофили(ТекущийПрофиль);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьВсеТикетыНаСервере()
	
	Для Каждого Строка из ПрофилиАвтосинхронизации Цикл
		
		ЭСФСервер.СохранитьТикетСессии(Строка.Профиль, "ESF", Неопределено);
		ЭСФСервер.СохранитьТикетСессии(Строка.Профиль, "VS", Неопределено);
		
	КонецЦикла;	
	
	Если не Пользователи.РолиДоступны("ДобавлениеИзменениеНастроекЭСФ",ПользовательИБ) Тогда
		ЗаполнитьОбновитьПрофили(?(МассивПрофилейИСЭСФ.Количество()>0, МассивПрофилейИСЭСФ, Неопределено));
	Иначе
		ЗаполнитьОбновитьПрофили();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтборПоПрофилюПриИзмененииНаСервере()
	
	ЗаполнитьОбновитьПрофили(?(ЗначениеЗаполнено(ОтборПоПрофилю), ОтборПоПрофилю,Неопределено), Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоПрофилюПриИзменении(Элемент)
	ОтборПоПрофилюПриИзмененииНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗакрытьСессию(ДанныеПрофиляИСЭСФ, ИдентификаторСессии)
	
	Если ТипЗнч(ИдентификаторСессии) = Тип("Структура") Тогда
		Если ИдентификаторСессии.Свойство("ИдентфикаторСессии") Тогда
			ЭСФВызовСервера.ЗакрытьСессию(ДанныеПрофиляИСЭСФ, ИдентификаторСессии.ИдентфикаторСессии);
		КонецЕсли;
		Если ИдентификаторСессии.Свойство("ИдентфикаторСессииВС") Тогда
			ВСВызовСервера.ЗакрытьСессию(ДанныеПрофиляИСЭСФ, ИдентификаторСессии.ИдентфикаторСессииВС);
		КонецЕсли;
	Иначе
		ЭСФВызовСервера.ЗакрытьСессию(ДанныеПрофиляИСЭСФ, ИдентификаторСессии);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
