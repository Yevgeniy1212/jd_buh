////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МестоУстановкиБиблиотеки = Константы.МестоВыполненияКриптографическихОпераций.Получить();
	ИнформационнаяБазаФайловая = ЭСФСерверПереопределяемый.ИнформационнаяБазаФайловая();
	ИспользоватьОбменЭСФЧерезAPI = Константы.ИспользоватьОбменЭСФЧерезAPI.Получить();
	Если ИспользоватьОбменЭСФЧерезAPI Тогда
		// Константа установлена, следовательно ранее пользователь уже принял условия оферты
		СогласенСУсловиямиОфертыКриптографии = Истина;
	КонецЕсли;
	
	ИспользоватьОбменЭСФЧерезXML = Константы.ИспользоватьОбменЭСФЧерезXML.Получить();
	
	Если МестоУстановкиБиблиотеки = Перечисления.МестаВыполненияКриптографическихОпераций.ПустаяСсылка() Тогда
		МестоУстановкиБиблиотеки = Перечисления.МестаВыполненияКриптографическихОпераций.НаКлиенте;
		Константы.МестоВыполненияКриптографическихОпераций.Установить(МестоУстановкиБиблиотеки);
	КонецЕсли;
	
	Если ИнформационнаяБазаФайловая Тогда
		Элементы.МестоУстановкиБиблиотеки.Видимость = Ложь;
		Если МестоУстановкиБиблиотеки <> Перечисления.МестаВыполненияКриптографическихОпераций.НаКлиенте Тогда
			МестоУстановкиБиблиотеки = Перечисления.МестаВыполненияКриптографическихОпераций.НаКлиенте;
			Константы.МестоВыполненияКриптографическихОпераций.Установить(МестоУстановкиБиблиотеки);
		КонецЕсли;
	КонецЕсли;
	
	ИспользуетсяРазделениеДанных = ЭСФСерверПереопределяемый.ИспользуетсяРазделениеДанных();
	
	Если НЕ ИспользуетсяРазделениеДанных Тогда	
		//++ НЕ ЭСФ
		ИспользоватьВнешнийМодуль = Константы.ЭСФИспользоватьВнешнийМодульОбменаДанными.Получить();
		ДанныеМодуля = Константы.ЭСФВнешнийМодульОбменаДанными.Получить().Получить();
		//-- НЕ ЭСФ
	КонецЕсли;
	
	Элементы.ГруппаДоступ.ОтображениеСтраниц       = ОтображениеСтраницФормы.Нет;
	Элементы.ГруппаВерсия.ОтображениеСтраниц       = ОтображениеСтраницФормы.Нет;
	Элементы.ГруппаДоступСервис.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.ГруппаДоступИТС.ОтображениеСтраниц    = ОтображениеСтраницФормы.Нет;
	
	Если ПравоДоступа("Администрирование", Метаданные) Тогда
		РегламентноеЗадание = ПолучитьРегламентноеЗадание("СинхронизацияСИСЭСФ");
		Если РегламентноеЗадание <> Неопределено Тогда
			РасписаниеРегламентногоЗадания  = РегламентноеЗадание.Расписание;
			ОбновлятьСтатусыЭСФПоРасписанию = РегламентноеЗадание.Использование;
		КонецЕсли;
		
		ОбновитьПредставлениеРасписания(РасписаниеРегламентногоЗадания, Элементы.НастроитьРасписаниеРегламентногоЗадания.Заголовок);
		Элементы.НастроитьРасписаниеРегламентногоЗадания.Доступность = ОбновлятьСтатусыЭСФПоРасписанию;
		
		Если ОбновлятьСтатусыЭСФПоРасписанию Тогда
			ЗаполнитьТаблицуПрофилейИСЭСФ();
		КонецЕсли;
		
		//++ НЕ ЭСФ
		РегламентноеЗадание = ПолучитьРегламентноеЗадание("ОбновлениеНоменклатурыГСВС");
		Если РегламентноеЗадание <> Неопределено Тогда
			РасписаниеРегламентногоЗаданияГСВС  = РегламентноеЗадание.Расписание;
			ОбновлятьНоменклатуруГСВСПоРасписанию = РегламентноеЗадание.Использование;
		КонецЕсли;
		
		ОбновитьПредставлениеРасписания(РасписаниеРегламентногоЗаданияГСВС, Элементы.НастроитьРасписаниеРегламентногоЗаданияГСВС.Заголовок);
		Элементы.НастроитьРасписаниеРегламентногоЗаданияГСВС.Доступность = ОбновлятьНоменклатуруГСВСПоРасписанию; 
		//-- НЕ ЭСФ
	Иначе		
		Элементы.ГруппаОбновлениеСтатусов.Видимость = Ложь;		
	КонецЕсли;

	Элементы.СписокПользователейСоздатьНовогоПользователя.Видимость = РольДоступна("ПолныеПрава");
	
	ПараметрыЭСФ = ЭСФСервер.ПолучитьПараметрыЭСФ();
	ПерезаполнитьПризнакПроисхождения = ПараметрыЭСФ.ПерезаполнитьПризнакПроисхождения;
	СпособОпределенияВхожденияВПеречень = ПараметрыЭСФ.СпособОпределенияВхожденияВПеречень;
	ЗаполнитьИсточникиПроисхожденияБезусловно = ПараметрыЭСФ.ЗаполнитьИсточникиПроисхожденияБезусловно;
	ПорогОкругленияСумм = ПараметрыЭСФ.ПорогОкругленияСумм;
	ИспользоватьКомпонентуНЦАДляПодписиДокументов = ПараметрыЭСФ.ИспользоватьПодписьНовойКомпоненты;
	ОткрыватьСессиюСПодписью = ПараметрыЭСФ.ИспользоватьОткрытиеСессииСПодписью;
	ВремяЖизниТикетаЭСФ = ПараметрыЭСФ.ВремяЖизниТикетаЭСФ;
	ИспользоватьВнешнююКриптографиюДляКомпоненты = ПараметрыЭСФ.ИспользоватьВнешнююКриптографиюДляКомпоненты;
	УстановитьДоступностьИспользоватьВнешнююКриптографиюДляКомпоненты();
	
	Элементы.ГруппаРаботаСТикетами.Видимость = ОткрыватьСессиюСПодписью;
	
	//++ НЕ ЭСФ
	ПараметрыЭДВС 				= ВССервер.ПолучитьПараметрыЭДВС();
	ЭДВСЗначениеЦены 			= ПараметрыЭДВС.ЗначениеЦены;
	ЭДВССпособЗаполненияЦены 	= ПараметрыЭДВС.СпособЗаполненияЦены;
	ЭДВСТипЦены 				= ПараметрыЭДВС.ТипЦены;
	ВремяЖизниТикетаВС = ПараметрыЭДВС.ВремяЖизниТикетаВС;
	//-- НЕ ЭСФ
	ПолучатьОповещенияИСЭСФ = Константы.ИспользоватьОповещенияИСЭСФ.Получить();
	Если ПолучатьОповещенияИСЭСФ Тогда
		ПолучатьОповещенияИСЭСФПриИзмененииНаСервере();
	КонецЕсли;
	УправлениеФормой(ЭтаФорма);
	
	//ВС
	ИспользоватьОбменВС = ПолучитьФункциональнуюОпцию("ИспользоватьОбменВС");	
	Элементы.ГруппаДоступКВС.Видимость 		 = ИспользоватьОбменВС;
	Элементы.ГруппаСинхронизацияВС.Видимость = ИспользоватьОбменВС;		
	Элементы.ГруппаДополнительныеНастройкиЭДВС.Видимость = ИспользоватьОбменВС;
	Элементы.ВремяТикетаВС.Видимость		 = ИспользоватьОбменВС;
	Элементы.ВремяЖизниТикетаВС.Видимость	 = ИспользоватьОбменВС;
	Элементы.ВремяТикетаВСМинуты.Видимость	 = ИспользоватьОбменВС;
	
	Если ИспользоватьОбменВС Тогда
		ПриСозданииНаСервереВС();
	КонецЕсли;
	
	Элементы.СоответствиеОрганизацийПрофилей.Видимость = ОбновлятьСтатусыЭСФПоРасписанию;
	
	ПрофильИСЭСФ = Константы.ПользовательДляСинхронизацииСГСВС.Получить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Контейнер.ПриОткрытииФормы(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПредставлениеСтатусаКриптобиблиотеки();
	ОбновитьПредставлениеСтатусаКомпонентыНЦА();
	УстановитьДоступностьОпределенияПризнака();
	УстановитьДоступностьАутентификацииСПодписью();
	
	ЭСФКлиент.ПоказатьПредупреждениеМестоУстановкиБиблиотеки(МестоУстановкиБиблиотеки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновленМодульКриптографии" Тогда
		ОбновитьПредставлениеСтатусаКриптобиблиотеки();
		ОбновитьПредставлениеСтатусаКомпонентыНЦА();
	ИначеЕсли ИмяСобытия = ЭСФКлиентСервер.ИмяСобытияЗаписьУведомленийИСЭСФ() Тогда
		ОбновитьЗаголовокОповещенийИСЭСФ();
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ОбновлятьСтатусыЭСФПоРасписаниюПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Элементы.НастроитьРасписаниеРегламентногоЗадания.Доступность = ОбновлятьСтатусыЭСФПоРасписанию;
	Если ОбновлятьСтатусыЭСФПоРасписанию Тогда
		ЗаполнитьТаблицуПрофилейИСЭСФ();
	КонецЕсли;
	Элементы.СоответствиеОрганизацийПрофилей.Видимость = ОбновлятьСтатусыЭСФПоРасписанию;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлятьНоменклатуруГСВСПоРасписаниюПриИзменении(Элемент)
//++ НЕ ЭСФ	
	Модифицированность = Истина;
	Элементы.НастроитьРасписаниеРегламентногоЗаданияГСВС.Доступность = ОбновлятьНоменклатуруГСВСПоРасписанию;
//-- НЕ ЭСФ	
КонецПроцедуры

&НаКлиенте
Процедура НадписьДоступПодробнееНажатие(Элемент)
	Сообщить(ОшибкаСоединения, СтатусСообщения.Внимание);
КонецПроцедуры

&НаКлиенте
Процедура НадписьДоступСервисПодробнееНажатие(Элемент)
	Сообщить(ОшибкаСоединенияССервисом1СЭСФ, СтатусСообщения.Внимание);
КонецПроцедуры

&НаКлиенте
Процедура НадписьДоступИТСПодробнееНажатие(Элемент)
	Сообщить(ОшибкаСоединенияССервисомИТС, СтатусСообщения.Внимание);
КонецПроцедуры

&НаКлиенте
Процедура НадписьВерсияПодробнееНажатие(Элемент)
	Сообщить(ОшибкаВерсии, СтатусСообщения.Внимание);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПараметрыПодключенияКСерверуИСЭСФНажатие(Элемент)
	ДополнительныеПараметры = Новый Структура("ЦельОткрытияФормы", "НастройкаПодключенияКСерверуИСЭСФ");	
	ОткрытьФорму("Обработка.ОбменЭСФ.Форма.ПараметрыПодключенияКСерверуИСЭСФ", ДополнительныеПараметры, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОбменЭСФЧерезAPIПриИзменении(Элемент)	
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОбменЭСФЧерезXMLПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ОбновитьИнтерфейс = Ложь;
	
	// Возможно, что нужно записать константу ИспользоватьОбменЭСФЧерезAPI, иначе список пользователей, связанный с ней по ФО, будет не доступен
	ГруппаСтраницыПриСменеСтраницыНаСервере(ТекущаяСтраница.Имя, ОбновитьИнтерфейс);
	
	Если ОбновитьИнтерфейс Тогда
		ОбновитьИнтерфейс();
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ПолучатьОповещенияИСЭСФПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ПолучатьОповещенияИСЭСФПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОписаниеНастройкиОповещенийИСЭСФОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПользователя;
	
	ОбновитьИнтерфейс = Ложь;
	ГруппаСтраницыПриСменеСтраницыНаСервере(Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя, ОбновитьИнтерфейс);
	
	Если ОбновитьИнтерфейс Тогда
		ОбновитьИнтерфейс();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ СписокПользователей

&НаКлиенте
Процедура СписокПользователейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если НЕ Копирование Тогда 
		Отказ = Истина;
		ОткрытьФорму("Справочник.ПользователиИСЭСФ.Форма.ПомощникНового", , ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОК(Команда)
	СохранитьИЗакрыть();
КонецПроцедуры

&НаКлиенте
Процедура Применить(Команда)
	Отказ = Ложь;
	СохранитьНастройки(Отказ);
	Если НЕ Отказ Тогда
		ОбновитьИнтерфейс();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКриптобиблиотеку(Команда)	
	ПоказатьПользовательскоеСоглашение("Заключение");		
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеРегламентногоЗадания(Команда)
	
	РедактированиеРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания, "РасписаниеРегламентногоЗадания");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступИВерсию(Команда)
	
	СтруктураПараметров = ЭСФВызовСервера.ПроверитьДоступИВерсиюНаСервере();
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураПараметров);
	                                                                                
	Если СтруктураПараметров.ВерсияИСЭСФ = Неопределено Тогда
		Элементы.ГруппаДоступ.ТекущаяСтраница = Элементы.СтраницаДоступОшибка;
		Элементы.ГруппаВерсия.ТекущаяСтраница = Элементы.СтраницаВерсияВопрос;
		
	Иначе
		Элементы.ГруппаДоступ.ТекущаяСтраница = Элементы.СтраницаДоступУспешно;
		Элементы.НадписьВерсияОшибка.Заголовок = СтруктураПараметров.ТекстВерсияОшибка;
		Элементы.НадписьВерсияПоддерживает.Заголовок = СтруктураПараметров.ТекстВерсияПоддерживает;
		
		Если НЕ СтруктураПараметров.ВерсияИСЭСФПоддерживается Тогда
			Элементы.ГруппаВерсия.ТекущаяСтраница = Элементы.СтраницаВерсияОшибка;
		Иначе
			Элементы.ГруппаВерсия.ТекущаяСтраница = Элементы.СтраницаВерсияУспешно;	
		КонецЕсли; 
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступКСервисам(Команда)
	
	ПроверитьДоступКСервисамНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДоступКСервисамНаСервере()
	
	РезультатПроверкиДоступностиСервисов = ЭлектронноеВзаимодействиеССервисами.ПроверитьДоступКСервисам();
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РезультатПроверкиДоступностиСервисов);
	
	Элементы.ГруппаДоступСервис.ТекущаяСтраница = ?(РезультатПроверкиДоступностиСервисов.Сервис1СЭСФДоступен,
		Элементы.СтраницаДоступСервисУспешно,
		Элементы.СтраницаДоступСервисОшибка);
	
	Элементы.ГруппаДоступИТС.ТекущаяСтраница = ?(РезультатПроверкиДоступностиСервисов.СервисИТСДоступен,
		Элементы.СтраницаДоступИТСУспешно,
		Элементы.СтраницаДоступИТСОшибка);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовогоПользователя(Команда)
	ОткрытьФорму("Справочник.ПользователиИСЭСФ.Форма.ФормаЭлемента", , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьБиблиотеку(Команда)
	
	Если ВерсияКриптобиблиотекиНаСайте <> ВерсияКриптобиблиотекиБД Тогда
		ПоказатьПользовательскоеСоглашение("Обновление");		
		ОбновитьПредставлениеСтатусаКриптобиблиотеки();
	Иначе
		ОткрытьФорму("Обработка.ОбменЭСФ.Форма.ОбновлениеКомпонентыКриптографии");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеРегламентногоЗаданияГСВС(Команда)
//++ НЕ ЭСФ	
	РедактированиеРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗаданияГСВС, "РасписаниеРегламентногоЗаданияГСВС");
	//ОбновитьПредставлениеРасписания(РасписаниеРегламентногоЗаданияГСВС, Элементы.НастроитьРасписаниеРегламентногоЗаданияГСВС.Заголовок);
//-- НЕ ЭСФ

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОповещенияИСЭСФ(Команда)
	
	Если Не ПолучитьЗначениеКонстантыОповещенияНаСервере() Тогда
		
		ТекстВопроса = НСтр(
			"ru = 'Для перехода к списку оповещений необходимо сохранить настройки.
			|Продолжить?'"
		);
		
		ОткрытьОповещенияИСЭСФЗавершение = Новый ОписаниеОповещения("ОткрытьОповещенияИСЭСФЗавершение", ЭтаФорма);
		ПоказатьВопрос(ОткрытьОповещенияИСЭСФЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		ЭСФКлиент.ОткрытьФормуОповещенийИСЭСФ(,);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОповещенияИСЭСФ(Команда)
	ОбновитьЗаголовокОповещенийИСЭСФ();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиОповещений(Команда)
	
	ТекущиеДанные = Элементы.СписокПользователей.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПользовательИСЭСФ", ТекущиеДанные.Ссылка);
	ОткрытьФорму("РегистрСведений.НастройкиОповещенияИСЭСФ.Форма.ФормаНастройкиОповещений", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДанныеАутентификации(Команда)
	
	ОткрытьФорму("Обработка.ОбменЭСФ.Форма.РаботаСТикетами");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура СохранитьИЗакрыть(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Отказ = Ложь;
	СохранитьНастройки(Отказ);
	Если НЕ Отказ Тогда
		ОбновитьИнтерфейс();
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки(Отказ = Ложь)
	
	// Проверим корректность настроек
	Если ИспользоватьОбменЭСФЧерезAPI И НЕ ЗначениеЗаполнено(ВерсияКриптобиблиотекиБД) 
		И НЕ (ЗначениеЗаполнено(ВерсияКомпонентыНЦА) И ИспользоватьКомпонентуНЦАДляПодписиДокументов) Тогда
		Отказ = Истина;
		ТекстИсключения = НСтр("ru = 'Прямой обмен данными с ИС ЭСФ невозможен, так как не установлены средства криптографии.'") + Символы.ПС + 
			НСтр("ru = 'Необходимо использовать один из следующих вариантов:
			| - установить библиотеку криптографии;
			| - установить компоненту для работы со средствами криптографии НУЦ РК и включить настройку подписи документов при помощи данных средств;
			| - либо отключить признак использования прямого обмена данными с ИС ЭСФ.'");
		
		ЭСФКлиентСервер.СообщитьПользователю(ТекстИсключения);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И ПроверитьЗаполнение() Тогда		
		
		Константы.ИспользоватьОбменЭСФЧерезAPI.Установить(ИспользоватьОбменЭСФЧерезAPI);
		Константы.ИспользоватьОбменЭСФЧерезXML.Установить(ИспользоватьОбменЭСФЧерезXML);
		
		Константы.МестоВыполненияКриптографическихОпераций.Установить(МестоУстановкиБиблиотеки);
		
		Константы.ИспользоватьОповещенияИСЭСФ.Установить(ПолучатьОповещенияИСЭСФ);
		
		Константы.ПользовательДляСинхронизацииСГСВС.Установить(ПрофильИСЭСФ);
		
		Если ПравоДоступа("Администрирование", Метаданные) Тогда
			
			// Без права "Администрирование" платформа не позволяет внести изменения
			// в регламентированное задание.
			УстановитьНастройкиРегламентногоЗадания("СинхронизацияСИСЭСФ", РасписаниеРегламентногоЗадания, ОбновлятьСтатусыЭСФПоРасписанию);	
			
			Если ОбновлятьСтатусыЭСФПоРасписанию Тогда
				УстановитьПрофилиДляРегламентногоЗадания();
			КонецЕсли;
			
			//++ НЕ ЭСФ
			УстановитьНастройкиРегламентногоЗадания("ОбновлениеНоменклатурыГСВС", РасписаниеРегламентногоЗаданияГСВС, ОбновлятьНоменклатуруГСВСПоРасписанию);	
			//-- НЕ ЭСФ
		КонецЕсли;
		
		//++ НЕ ЭСФ
		ВедетсяУчетПоТоварамНаВС = ЭСФСервер.ВедетсяУчетПоТоварамНаВС(ТекущаяДатаСеанса());
		
		Если ВедетсяУчетПоТоварамНаВС Тогда
			Константы.ДатаПереходаНаУчетПоИдентификаторамТоваровВС.Установить(ДатаПереходаНаУчетПоИдентификаторамТоваровВС);
		ИначеЕсли ЗначениеЗаполнено(Константы.ДатаПереходаНаУчетПоИдентификаторамТоваровВС.Получить()) Тогда
			Константы.ДатаПереходаНаУчетПоИдентификаторамТоваровВС.Установить(Дата(1,1,1));
		КонецЕсли;	
		
		Если НЕ ИспользуетсяРазделениеДанных Тогда
			Если ИспользоватьВнешнийМодуль И НЕ ЗначениеЗаполнено(ДанныеМодуля) Тогда
				ЭСФКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите внешний модуль.'"));
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			// сохраняем общие настройки
			КонстантыНабор = Константы.СоздатьНабор("ЭСФИспользоватьВнешнийМодульОбменаДанными,
			|ЭСФВнешнийМодульОбменаДанными");
			КонстантыНабор.ЭСФИспользоватьВнешнийМодульОбменаДанными = ИспользоватьВнешнийМодуль;
			
			Если ЗначениеЗаполнено(ДанныеМодуля) Тогда
				Если ТипЗнч(ДанныеМодуля) = Тип("ДвоичныеДанные") Тогда
					КонстантыНабор.ЭСФВнешнийМодульОбменаДанными = Новый ХранилищеЗначения(ДанныеМодуля);
				ИначеЕсли ЭтоАдресВременногоХранилища(ДанныеМодуля) Тогда
					ДанныеМодуля = ПолучитьИзВременногоХранилища(ДанныеМодуля);
					КонстантыНабор.ЭСФВнешнийМодульОбменаДанными = Новый ХранилищеЗначения(ДанныеМодуля);
				КонецЕсли;
			Иначе
				КонстантыНабор.ЭСФВнешнийМодульОбменаДанными = Неопределено;
			КонецЕсли;
			
			КонстантыНабор.Записать();
		КонецЕсли;
		//-- НЕ ЭСФ
		
		ПараметрыЭСФ = ЭСФСервер.ПолучитьПараметрыЭСФ();
		ПараметрыЭСФ.ПерезаполнитьПризнакПроисхождения = ПерезаполнитьПризнакПроисхождения;
		ПараметрыЭСФ.СпособОпределенияВхожденияВПеречень = СпособОпределенияВхожденияВПеречень;
		ПараметрыЭСФ.ЗаполнитьИсточникиПроисхожденияБезусловно = ЗаполнитьИсточникиПроисхожденияБезусловно;
		ПараметрыЭСФ.ПорогОкругленияСумм = ПорогОкругленияСумм;
		ПараметрыЭСФ.ИспользоватьПодписьНовойКомпоненты = ИспользоватьКомпонентуНЦАДляПодписиДокументов;
		ПараметрыЭСФ.ИспользоватьОткрытиеСессииСПодписью = ОткрыватьСессиюСПодписью;
		ПараметрыЭСФ.ВремяЖизниТикетаЭСФ = ВремяЖизниТикетаЭСФ;
		ПараметрыЭСФ.ИспользоватьВнешнююКриптографиюДляКомпоненты = ИспользоватьВнешнююКриптографиюДляКомпоненты;
		
		ЭСФСервер.СохранитьПараметрыЭСФ(ПараметрыЭСФ);
		
		Элементы.ГруппаРаботаСТикетами.Видимость = ОткрыватьСессиюСПодписью;
		
		//++ НЕ ЭСФ
		ПараметрыЭДВС 						= ВССервер.ПолучитьПараметрыЭДВС();
		ПараметрыЭДВС.ЗначениеЦены 			= ЭДВСЗначениеЦены;
		ПараметрыЭДВС.СпособЗаполненияЦены 	= ЭДВССпособЗаполненияЦены;
		ПараметрыЭДВС.ТипЦены 				= ЭДВСТипЦены;
		ПараметрыЭДВС.ВремяЖизниТикетаВС 	= ВремяЖизниТикетаВС;
		
		ВССервер.СохранитьПараметрыЭДВС(ПараметрыЭДВС);
		//-- НЕ ЭСФ
		Если ПолучатьОповещенияИСЭСФ Тогда
			ЭСФСервер.ЗаполнитьНастройкиОповещенийПоУмолчанию();
		КонецЕсли;
		
		ОбновитьПредставлениеСтатусаКриптобиблиотекиНаСервере();

		Модифицированность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеРасписанияРегламентногоЗадания(ЭкземплярРасписанияРегламентногоЗадания = Неопределено, РасписаниеРегламентногоЗадания = "РасписаниеРегламентногоЗадания")
	
	Если ЭкземплярРасписанияРегламентногоЗадания = Неопределено Тогда
		ЭкземплярРасписанияРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(ЭкземплярРасписанияРегламентногоЗадания);
	Диалог.Показать(Новый ОписаниеОповещения("РедактированиеРасписанияРегламентногоЗаданияЗавершение", ЭтотОбъект, Новый Структура("ЭкземплярРасписанияРегламентногоЗадания, РасписаниеРегламентногоЗадания", ЭкземплярРасписанияРегламентногоЗадания, РасписаниеРегламентногоЗадания)));
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеРасписанияРегламентногоЗаданияЗавершение(Расписание, Контекст) Экспорт
	
	Если Расписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Контекст.ЭкземплярРасписанияРегламентногоЗадания <> Расписание Тогда
		Если Расписание.ПериодПовтораВТечениеДня < 600 Тогда
			Предупреждение(НСтр(
			"ru = 'Интервал повтора, устанавливаемое в расписании регламентного задания синхронизации с ИС ЭСФ, должен быть более чем 600 секунд!'"));
			Возврат; 	
		Иначе			
			Модифицированность = Истина;
			Если Контекст.РасписаниеРегламентногоЗадания = "РасписаниеРегламентногоЗадания" Тогда
				РасписаниеРегламентногоЗадания = Расписание;
				ОбновитьПредставлениеРасписания(РасписаниеРегламентногоЗадания, Элементы.НастроитьРасписаниеРегламентногоЗадания.Заголовок);
			ИначеЕсли Контекст.РасписаниеРегламентногоЗадания = "РасписаниеРегламентногоЗаданияГСВС" Тогда
				РасписаниеРегламентногоЗаданияГСВС = Расписание;
				ОбновитьПредставлениеРасписания(РасписаниеРегламентногоЗаданияГСВС, Элементы.НастроитьРасписаниеРегламентногоЗаданияГСВС.Заголовок);
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеРасписания(РасписаниеРегламентногоЗадания, СтрокаЗаголовка)
	
	ПредставлениеРасписания = Строка(РасписаниеРегламентногоЗадания);
	
	Если ПредставлениеРасписания = Строка(Новый РасписаниеРегламентногоЗадания) Тогда
		ПредставлениеРасписания = НСтр("ru = 'Расписание не задано'");
	КонецЕсли;
	
	СтрокаЗаголовка = ПредставлениеРасписания;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеСтатусаКриптобиблиотекиНаКлиентеНаСервере(Форма)
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();
	// Данные о наличии загруженной библиотеки
	ВерсияВнешнегоМодуляКриптографии = Контейнер.ВерсияВнешнегоМодуляКриптографии();
	Форма.ВерсияКриптобиблиотекиБД = ВерсияВнешнегоМодуляКриптографии;
	
	СвойстваМодуляДляТекущегоРелиза = Неопределено;
	ШапкаОшибки = НСтр("ru = 'Ошибка получения версии модуля криптографии:'");
	ВерсияМодуляНаСайте = "";
	НужноОбновление =  ЭлектронноеВзаимодействиеССервисамиВызовСервера.ПроверитьНаличиеОбновлений(СвойстваМодуляДляТекущегоРелиза, ШапкаОшибки);
	Если СвойстваМодуляДляТекущегоРелиза <> Неопределено Тогда
		ВерсияМодуляНаСайте = СвойстваМодуляДляТекущегоРелиза.Версия;
	КонецЕсли;
	
	Форма.ВерсияКриптобиблиотекиНаСайте = ВерсияМодуляНаСайте;
	БиблиотекаЗагружена = ЗначениеЗаполнено(ВерсияВнешнегоМодуляКриптографии);
	
	Форма.Элементы.ГруппаБиблиотекаУстановлена.Видимость = БиблиотекаЗагружена;
	
	РезультатПроверки = Ложь;
	Если БиблиотекаЗагружена Тогда
		// Обновление данные о наличии установленной библиотекии, 
		// заполнение реквизита ВерсияКриптобиблиотеки в форме настройки
		Попытка
			РезультатПроверки = Контейнер.КриптопровайдерПодключается(Форма.ВерсияКриптобиблиотеки,,Форма.МестоУстановкиБиблиотеки, Истина, Ложь); // Без выдачи сообщения пользователю. Так как 	информация о статуске отображается визуально.
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		КонецПопытки;
		Форма.ВерсияКриптобиблиотеки = СтрЗаменить(Форма.ВерсияКриптобиблиотеки, ",", ".");
	Иначе
		РезультатПроверки = Ложь;
	КонецЕсли;
	
	ВерсияИБОтличаетсяОтВерсииНаСайте = (ЗначениеЗаполнено(Форма.ВерсияКриптобиблиотекиБД) И ЗначениеЗаполнено(Форма.ВерсияКриптобиблиотекиНаСайте)
		И Форма.ВерсияКриптобиблиотекиБД <> Форма.ВерсияКриптобиблиотекиНаСайте);
		
	ВерсияНаКомпьютереПользователяОтличаетсяОтВерсииИБ = (ЗначениеЗаполнено(Форма.ВерсияКриптобиблиотекиБД)
		И Форма.ВерсияКриптобиблиотеки <> Форма.ВерсияКриптобиблиотекиБД);
	
	Форма.Элементы.КартинкаБиблиотекаУстановлена.Видимость = НЕ ВерсияИБОтличаетсяОтВерсииНаСайте И НЕ ВерсияНаКомпьютереПользователяОтличаетсяОтВерсииИБ;	
	Форма.Элементы.КартинкаБиблиотекаНеОбновлена.Видимость = ВерсияИБОтличаетсяОтВерсииНаСайте ИЛИ ВерсияНаКомпьютереПользователяОтличаетсяОтВерсииИБ;	
	Форма.Элементы.ГруппаБиблиотекаНеУстановлена.Видимость = НЕ БиблиотекаЗагружена;
	
	Форма.Элементы.ГруппаВерсияБиблиотекиНаСайте.Видимость = ВерсияИБОтличаетсяОтВерсииНаСайте;
	Форма.Элементы.ГруппаДанныеБД.Видимость = НЕ ВерсияИБОтличаетсяОтВерсииНаСайте;
	Форма.Элементы.ГруппаВерсияБиблиотеки.Видимость = НЕ ВерсияИБОтличаетсяОтВерсииНаСайте;
	Форма.Элементы.НадписьБиблиотекаУстановлена.Видимость = НЕ ВерсияИБОтличаетсяОтВерсииНаСайте;

	Если ВерсияИБОтличаетсяОтВерсииНаСайте Тогда
		Форма.Элементы.НадписьБиблиотекаУстановлена.Заголовок = НСтр("ru = 'Библиотека установлена, но требует обновления версии'");	
	ИначеЕсли ВерсияНаКомпьютереПользователяОтличаетсяОтВерсииИБ Тогда
		Форма.Элементы.НадписьБиблиотекаУстановлена.Заголовок = НСтр("ru = 'Библиотека загружена в информационную базу, требуется установка версии на клиенте'");	
	ИначеЕсли НЕ РезультатПроверки Тогда
		Форма.Элементы.НадписьБиблиотекаУстановлена.Заголовок = НСтр("ru = 'Библиотека получена, но не установлена'");	
	Иначе
		Форма.Элементы.НадписьБиблиотекаУстановлена.Заголовок = НСтр("ru = 'Библиотека получена и готова к использованию'");	
	КонецЕсли;
	
	Если ВерсияИБОтличаетсяОтВерсииНаСайте Тогда
		Форма.Элементы.ОбновитьКриптобиблиотеку.Заголовок = НСтр("ru = 'Обновить криптобиблиотеку'");
	Иначе
		Форма.Элементы.ОбновитьКриптобиблиотеку.Заголовок = НСтр("ru = 'Установить криптобиблиотеку'");
	КонецЕсли;

	СформироватьЗаголовокЛокальнаяВерсияБиблиотеки(Форма, Форма.МестоУстановкиБиблиотеки);
	
	Форма.Элементы.ОбновитьКриптобиблиотеку.Видимость = ВерсияИБОтличаетсяОтВерсииНаСайте ИЛИ ВерсияНаКомпьютереПользователяОтличаетсяОтВерсииИБ;
	
	Если Не ЭСФКлиентСерверПереопределяемый.ПроверитьВозможностьИспользованияКриптопровайдера() Тогда
		Форма.Элементы.НадписьБиблиотекаУстановлена.Заголовок = НСтр("ru = 'В используемой операционной системе невозможно применение данной криптобиблиотеки, рекомендуется использовать библиотеку для работы с криптографией НУЦ РК'");
		Форма.Элементы.ОбновитьКриптобиблиотеку.Доступность = Ложь;
		Форма.Элементы.НадписьДоступДоступна1.Заголовок = НСтр("ru = 'В используемой операционной системе невозможно применение данной криптобиблиотеки, рекомендуется использовать библиотеку для работы с криптографией НУЦ РК'");
		Форма.Элементы.ЗагрузитьИУстановитьКриптобиблиотеку.Доступность = Ложь;
	Иначе
		Форма.Элементы.ОбновитьКриптобиблиотеку.Доступность = Истина;
		Форма.Элементы.НадписьДоступДоступна1.Заголовок = НСтр("ru = 'Для обмена данными с ИС ЭСФ необходимо установить библиотеку'");
		Форма.Элементы.ЗагрузитьИУстановитьКриптобиблиотеку.Доступность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеСтатусаКриптобиблиотекиНаСервере()
	
	ОбновитьПредставлениеСтатусаКриптобиблиотекиНаКлиентеНаСервере(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеСтатусаКриптобиблиотеки()
	
	Если ЭтаФорма.ИнформационнаяБазаФайловая Тогда
		ОбновитьПредставлениеСтатусаКриптобиблиотекиНаКлиентеНаСервере(ЭтаФорма);
	Иначе 

		Если ЭтаФорма.МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаКлиенте") Тогда
			ОбновитьПредставлениеСтатусаКриптобиблиотекиНаКлиентеНаСервере(ЭтаФорма);
		Иначе
			Если НЕ ЭтаФорма.ИспользоватьВнешнююКриптографиюДляКомпоненты И (ЭтаФорма.ОткрыватьСессиюСПодписью ИЛИ ЭтаФорма.ИспользоватьКомпонентуНЦАДляПодписиДокументов) Тогда
				МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаКлиенте");  
				Модифицированность = Истина;
				ТекстСообщения = НСтр("ru='Для выполнения криптографии на сервере 1C:Предприятие необходимо включение настройки использование внешней криптографии Kalkan.'");
				ЭСФКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ОбновитьПредставлениеСтатусаКриптобиблиотекиНаКлиентеНаСервере(ЭтаФорма);
			Иначе
				ОбновитьПредставлениеСтатусаКриптобиблиотекиНаСервере();	
			КонецЕсли;
		КонецЕсли;
		УстановитьДоступностьИспользоватьВнешнююКриптографиюДляКомпоненты();
		
	КонецЕсли;

	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьЗаголовокЛокальнаяВерсияБиблиотеки(Форма, МестоУстановкиБиблиотеки)
	Если МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаСервере") Тогда
		Форма.Элементы.НадписьВерсияКриптобиблиотеки.Заголовок = "Версия на сервере:"
	Иначе	
		Форма.Элементы.НадписьВерсияКриптобиблиотеки.Заголовок = "Версия на машине пользователя:"
	КонецЕсли;		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьНастройкиРегламентногоЗадания(ИмяЗадания, РасписаниеРегламентногоЗадания, ИспользованиеРегЗадания) 
	
	РегламентноеЗадание = ПолучитьРегламентноеЗадание(ИмяЗадания);
	Если РегламентноеЗадание <> Неопределено Тогда
		РегламентноеЗадание.Расписание    = РасписаниеРегламентногоЗадания;
		РегламентноеЗадание.Использование = ИспользованиеРегЗадания;
		РегламентноеЗадание.ИнтервалПовтораПриАварийномЗавершении = 600; // Чтобы исключить нагрузку на сервер в случае аварийных повторов
		РегламентноеЗадание.Записать();
	КонецЕсли; 
	
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРегламентноеЗадание(ИмяЗадания);
	
	МетаданныеРегЗадания = Метаданные.РегламентныеЗадания[ИмяЗадания];
	
	МассивРегламентныхЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные", МетаданныеРегЗадания));
	
	Для Каждого ТекСтрока Из МассивРегламентныхЗаданий Цикл
		
		Если ТекСтрока.Метаданные = МетаданныеРегЗадания Тогда
			Возврат ТекСтрока;
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат РегламентныеЗадания.СоздатьРегламентноеЗадание(ИмяЗадания);
	
КонецФункции
 
&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Если Форма.ИспользоватьОбменЭСФЧерезAPI Тогда
		Доступность = Истина;
	Иначе
		Доступность = Ложь;
	КонецЕсли;
	
	Форма.Элементы.ГруппаКриптоБиблиотека.Доступность = Доступность;
	Форма.Элементы.ГруппаСтраницыДоступ.Доступность = Доступность;
	Форма.Элементы.ГруппаОбновлениеСтатусов.Доступность = Доступность;
	Форма.Элементы.ГруппаПользователя.Доступность = Доступность;
	Форма.Элементы.ГруппаНастройкиОповещенийИСЭСФ.Доступность = Доступность;
	Форма.Элементы.ГруппаОповещенийИСЭСФ.Видимость = Форма.ПолучатьОповещенияИСЭСФ;
	
	Форма.Элементы.СоответствиеОрганизацийПрофилей.Видимость = Форма.ОбновлятьНоменклатуруГСВСПоРасписанию;

	//++ НЕ ЭСФ	
	Если НЕ Форма.ИспользуетсяРазделениеДанных Тогда
	
		Форма.Элементы.ГруппаВнешнийМодуль.Доступность      = Форма.ИспользоватьОбменЭСФЧерезAPI ИЛИ Форма.ИспользоватьОбменЭСФЧерезXML;
		
		// Поле с представлением внешнего модуля делаем доступным только если установлен
		// признак использования внешнего модуля
		Форма.Элементы.ПолеМодульОбменаПредставление.Доступность = Форма.ИспользоватьВнешнийМодуль;
		
		// Формируем представление внешнего модуля.
		Если НЕ ЗначениеЗаполнено(Форма.ДанныеМодуля) Тогда
			Форма.МодульОбменаЭСФПредставление = "";
		Иначе
			Форма.МодульОбменаЭСФПредставление = "";
			Если НЕ ЗначениеЗаполнено(Форма.МодульОбменаЭСФПредставление) И ЗначениеЗаполнено(Форма.ДанныеМодуля) Тогда
				ТекстПредставленияМодуля = НСтр("ru = 'Модуль загружен [обработка ""%1.epf""]'");
				ТекстПредставленияМодуля =
					ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстПредставленияМодуля, ЭСФКлиентСервер.ИмяВнешнейОбработкиОбменЭСФ());
				Форма.МодульОбменаЭСФПредставление = ТекстПредставленияМодуля;
			КонецЕсли;
		КонецЕсли;
		
		Форма.Элементы.ВыгрузитьВФайл.Доступность = Форма.ИспользоватьВнешнийМодуль И ЗначениеЗаполнено(Форма.ДанныеМодуля);
	Иначе
	//-- НЕ ЭСФ	
		Форма.Элементы.ГруппаВнешнийМодуль.Видимость = Ложь;
	//++ НЕ ЭСФ		
	КонецЕсли;
	
	Если Форма.ЭДВССпособЗаполненияЦены = ПредопределенноеЗначение("Перечисление.СпособЗаполненияЦеныЭДВС.ПоТипуЦены") Тогда
		Форма.Элементы.ТипЦены.Видимость 	  = Истина;
		Форма.Элементы.ЗначениеЦены.Видимость = Ложь; 
	ИначеЕсли Форма.ЭДВССпособЗаполненияЦены = ПредопределенноеЗначение("Перечисление.СпособЗаполненияЦеныЭДВС.ФиксированнымЗначением") Тогда
		Форма.Элементы.ТипЦены.Видимость 	  = Ложь;
		Форма.Элементы.ЗначениеЦены.Видимость = Истина; 
	Иначе
		Форма.Элементы.ТипЦены.Видимость 	  = Ложь;
		Форма.Элементы.ЗначениеЦены.Видимость = Ложь; 
	КонецЕсли;	
	//-- НЕ ЭСФ

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПользовательскоеСоглашение(ЦельОткрытияСоглашения)
	ДополнительныеПараметры = Новый Структура("ЦельОткрытияСоглашения, ИспользоватьОбменЭСФЧерезAPI", ЦельОткрытияСоглашения, ИспользоватьОбменЭСФЧерезAPI);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаключениеПользовательскогоСоглашенияЗавершение", ЭтаФорма, ДополнительныеПараметры);		
	ОткрытьФорму("Обработка.ОбменЭСФ.Форма.ПользовательскоеСоглашение", ДополнительныеПараметры, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройкиПрокси()
	ОткрытьФорму("Обработка.ОбменЭСФ.Форма.ПараметрыПроксиСервера", , ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗаключениеПользовательскогоСоглашенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	// Если условия использования не приняты, то использование криптографии недоступно.
	Если ДополнительныеПараметры.ЦельОткрытияСоглашения = "Заключение" Тогда
		
		Если Результат <> Истина Тогда
			
			Если ЭтаФорма.ИспользоватьВнешнююКриптографиюДляКомпоненты ИЛИ ЭтаФорма.ОткрыватьСессиюСПодписью ИЛИ ЭтаФорма.ИспользоватьКомпонентуНЦАДляПодписиДокументов Тогда
				УправлениеФормой(ЭтаФорма);
			Иначе
				ЭСФКлиентСервер.СообщитьПользователю(НСТР("ru='В связи с отказом от заключения Соглашения возможность прямого обмена данными с ИС ЭСФ отключена.'"));
				ИспользоватьОбменЭСФЧерезAPI = Ложь;
				УправлениеФормой(ЭтаФорма);
			КонецЕсли;
			
		КонецЕсли;
		ОбновитьПредставлениеСтатусаКриптобиблиотеки();
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьБиблиотекуИзБДНаСервере()
	Константы.ЭСФВерсияВнешнегоМодуля.Установить(Неопределено);	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьБиблиотекуИзБД(Команда)
	УдалитьБиблиотекуИзБДНаСервере();
	ОбновитьПредставлениеСтатусаКриптобиблиотеки();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРаботуБиблиотеки(Команда)
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	
	Версия = "";
	Результат = Контейнер.КриптопровайдерПодключается(Версия, Ложь, МестоУстановкиБиблиотеки,,Ложь);
	Если Результат Тогда
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru = 'Библиотека успешно подключена! Версия: %1'"), СокрЛП(Версия));
		ЭСФКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе	
		ВызватьИсключение НСтр("ru = 'Не удалось подключить библиотеку криптографии.'") + Символы.ПС + ОписаниеОшибки();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановкаБиблиотекиОфертаНажатие(Элемент)
	ПоказатьПользовательскоеСоглашение("Ознакомление");
КонецПроцедуры

&НаКлиенте
Процедура НадписьОписаниеОбменаЧерезAPIПроксиНажатие(Элемент)
	ПоказатьНастройкиПрокси();
КонецПроцедуры

&НаКлиенте
Процедура МестоУстановкиБиблиотекиПриИзменении(Элемент)
	
	Если ЭтаФорма.МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаКлиенте")
		И ЭСФКлиентСерверПереопределяемый.ПоказыватьОповещенияСервернаяКриптография() Тогда
		НовоеОповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаМестоУстановкиБиблиотекиПриИзменении",
			ЭтотОбъект);
		ПоказатьВопрос(НовоеОповещение,
			ЭСФКлиент.ТекстВопросаМестоУстановкиБиблиотекиПриИзменении(),
			РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	Иначе
		МестоУстановкиБиблиотекиПриИзмененииНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаМестоУстановкиБиблиотекиПриИзменении(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да
		И ЭтаФорма.МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаКлиенте") Тогда
		МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаСервере");
	Иначе
		МестоУстановкиБиблиотекиПриИзмененииНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МестоУстановкиБиблиотекиПриИзмененииНаКлиенте()
	
	ОбновитьПовторноИспользуемыеЗначения();
	ОбновитьПредставлениеСтатусаКриптобиблиотеки();
	ОбновитьПредставлениеСтатусаКомпонентыНЦА();
	
КонецПроцедуры

&НаСервере
Процедура ГруппаСтраницыПриСменеСтраницыНаСервере(Знач ТекущаяСтраница, ОбновитьИнтерфейс)
	ОбновитьИнтерфейс = Ложь;
	Если ТекущаяСтраница = "ГруппаПользователя" Тогда
		Если ИспользоватьОбменЭСФЧерезAPI И НЕ Константы.ИспользоватьОбменЭСФЧерезAPI.Получить() Тогда
			
			Отказ = Ложь;
			СохранитьНастройки(Отказ);
			
			Если Не Отказ Тогда
				ОбновитьИнтерфейс = Истина;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнятьПризнакПроисхожденияПриИзменении(Элемент)
	
	Модифицированность = Истина;
	УстановитьДоступностьОпределенияПризнака();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьОпределенияПризнака()
	
	Элементы.СпособОпределенияВхожденияВПеречень.Доступность = ПерезаполнитьПризнакПроисхождения;
	
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьДоступностьАутентификацииСПодписью()
	
	ДоступностьМеханизма = ЭСФКлиентСервер.ДоступенНовыйМетодАутентификации();
	ДоступностьКонтроляВремени = ЭСФКлиентСервер.ДоступенКонтрольАктивностиСессии();
	Элементы.ГруппаИспользованиеКомпонентыНЦА.Видимость = ДоступностьМеханизма;
	Элементы.ГруппаБиблиотекаУстановленаНЦА.Видимость = ДоступностьМеханизма;
	Элементы.ВремяТикетаЭСФ.Видимость = ДоступностьКонтроляВремени;
	Элементы.ВремяТикетаВС.Видимость = ДоступностьКонтроляВремени;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьПризнакВхожденияВПереченьПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсточникиПроисхожденияБезусловноПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПорогОкругленияСуммПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПрофилейИСЭСФ()
	
	ТаблицаПрофилей = ПолучитьТекущуюТаблицуПрофилей();
	СоответствиеОрганизацийПрофилей.Загрузить(ТаблицаПрофилей);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПрофилиДляРегламентногоЗадания()
	
	ПрофилиДляСинхронизации = Новый Массив();
	Для Каждого ТекСтрока Из СоответствиеОрганизацийПрофилей Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ПрофильИСЭСФ) Тогда
			ПрофилиДляСинхронизации.Добавить(ТекСтрока.ПрофильИСЭСФ);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПрофилиИСЭСФ.Ссылка КАК Ссылка,
	|	ИСТИНА КАК ИспользоватьДляРегламентногоЗадания
	|ИЗ
	|	Справочник.ПрофилиИСЭСФ КАК ПрофилиИСЭСФ
	|ГДЕ
	|	НЕ ПрофилиИСЭСФ.ИспользоватьДляРегламентногоЗадания
	|	И ПрофилиИСЭСФ.Ссылка В(&ПрофилиДляСинхронизации)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПрофилиИСЭСФ.Ссылка,
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.ПрофилиИСЭСФ КАК ПрофилиИСЭСФ
	|ГДЕ
	|	ПрофилиИСЭСФ.ИспользоватьДляРегламентногоЗадания
	|	И НЕ ПрофилиИСЭСФ.Ссылка В (&ПрофилиДляСинхронизации)");
	
	Запрос.УстановитьПараметр("ПрофилиДляСинхронизации", ПрофилиДляСинхронизации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПрофильОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПрофильОбъект.ИспользоватьДляРегламентногоЗадания = Выборка.ИспользоватьДляРегламентногоЗадания;
		Попытка
			ПрофильОбъект.Записать();
		Исключение
			ТекстОшибки = НСтр("ru='Не удалось записать %1!'");
			ТекстОшибки = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, Выборка.Ссылка);
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере 
Функция ПолучитьТекущуюТаблицуПрофилей()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрофилиИСЭСФ.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|ПОМЕСТИТЬ ВТ_Организации
	|ИЗ
	|	Справочник.ПрофилиИСЭСФ КАК ПрофилиИСЭСФ
	|ГДЕ
	|	НЕ ПрофилиИСЭСФ.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтруктурнаяЕдиница
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЕСТЬNULL(ПрофилиИСЭСФ.Ссылка, ЗНАЧЕНИЕ(Справочник.ПрофилиИСЭСФ.ПустаяСсылка)) КАК ПрофильИСЭСФ
	|ИЗ
	|	ВТ_Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиИСЭСФ КАК ПрофилиИСЭСФ
	|		ПО Организации.СтруктурнаяЕдиница = ПрофилиИСЭСФ.СтруктурнаяЕдиница
	|			И (ПрофилиИСЭСФ.ИспользоватьДляСинхронизации)
	|			И (ПрофилиИСЭСФ.ИспользоватьДляРегламентногоЗадания)
	|			И (НЕ ПрофилиИСЭСФ.ПометкаУдаления)");
	
	ТаблицаПрофилей = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаПрофилей
	
КонецФункции

#Область ВС

&НаКлиенте
Процедура НастроитьПараметрыПодключенияКМодулюВС(Элемент)
	//++ НЕ ЭСФ
	ДополнительныеПараметры = Новый Структура("ЦельОткрытияФормы", "НастройкаПодключенияКСерверуВС");	
	ОткрытьФорму("Обработка.ОбменЭСФ.Форма.ПараметрыПодключенияКСерверуВС", ДополнительныеПараметры, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//-- НЕ ЭСФ
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступИВерсиюВС(Команда)
	//++ НЕ ЭСФ
	СтруктураПараметров = ВСВызовСервера.ПроверитьДоступИВерсиюВСНаСервере();
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураПараметров);
	                                                                                
	Если СтруктураПараметров.ВерсияВС = Неопределено Тогда
		Элементы.ГруппаДоступВС.ТекущаяСтраница = Элементы.СтраницаДоступОшибкаВС;
		Элементы.ГруппаВерсияВС.ТекущаяСтраница = Элементы.СтраницаВерсияВопросВС;
		
	Иначе
		Элементы.ГруппаДоступВС.ТекущаяСтраница = Элементы.СтраницаДоступУспешноВС;
		Элементы.НадписьВерсияОшибкаВС.Заголовок = СтруктураПараметров.ТекстВерсияОшибка;
		Элементы.НадписьВерсияПоддерживаетВС.Заголовок = СтруктураПараметров.ТекстВерсияПоддерживает;
		
		Если НЕ СтруктураПараметров.ВерсияВСПоддерживается Тогда
			Элементы.ГруппаВерсияВС.ТекущаяСтраница = Элементы.СтраницаВерсияОшибкаВС;
		Иначе
			Элементы.ГруппаВерсияВС.ТекущаяСтраница = Элементы.СтраницаВерсияУспешноВС;	
		КонецЕсли; 
		
	КонецЕсли;
	//-- НЕ ЭСФ	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервереВС()
	//++ НЕ ЭСФ
	Элементы.ГруппаДоступВС.ОтображениеСтраниц 	= ОтображениеСтраницФормы.Нет;
	Элементы.ГруппаВерсияВС.ОтображениеСтраниц	= ОтображениеСтраницФормы.Нет;
	Элементы.ГруппаЗаполнениеИП.Видимость 		= Ложь;
	
	ДатаПереходаНаУчетПоИдентификаторамТоваровВС = Константы.ДатаПереходаНаУчетПоИдентификаторамТоваровВС.Получить();
	//-- НЕ ЭСФ	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОписаниеОбменаЧерезAPIПрокси1Нажатие(Элемент)
	ПоказатьНастройкиПрокси();
КонецПроцедуры

&НаКлиенте
Процедура НадписьОписаниеОбменаЧерезAPIПрокси2Нажатие(Элемент)
	ПоказатьНастройкиПрокси();
КонецПроцедуры

&НаКлиенте
Процедура СпособЗаполненияЦеныПриИзменении(Элемент)
	//++ НЕ ЭСФ
	Модифицированность = Истина;
	Если ЭДВССпособЗаполненияЦены = ПредопределенноеЗначение("Перечисление.СпособЗаполненияЦеныЭДВС.ПоТипуЦены") Тогда
		Элементы.ТипЦены.Видимость 		= Истина;
		Элементы.ЗначениеЦены.Видимость = Ложь; 
		ЭДВСЗначениеЦены				= 0;
	ИначеЕсли ЭДВССпособЗаполненияЦены = ПредопределенноеЗначение("Перечисление.СпособЗаполненияЦеныЭДВС.ФиксированнымЗначением") Тогда
		Элементы.ТипЦены.Видимость 		= Ложь;
		Элементы.ЗначениеЦены.Видимость = Истина; 
		ЭДВСТипЦены						= Неопределено;
	Иначе
		Элементы.ТипЦены.Видимость 		= Ложь;
		Элементы.ЗначениеЦены.Видимость = Ложь; 
		ЭДВСЗначениеЦены				= 0;
		ЭДВСТипЦены						= Неопределено;
	КонецЕсли;
	//-- НЕ ЭСФ	
КонецПроцедуры

&НаКлиенте
Процедура ТипЦеныПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеЦеныПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДатаПереходаНаУчетПоИдентификаторамТоваровВСПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область ВнешнийМодуль

&НаКлиенте
Процедура ИспользоватьВнешнийМодульПриИзменении(Элемент)
	
	//++ НЕ ЭСФ
	УправлениеФормой(ЭтаФорма);
	
	Если ИспользоватьВнешнийМодуль И НЕ ЗначениеЗаполнено(ДанныеМодуля) Тогда
		ВыбратьВнешнийМодуль();
	ИначеЕсли НЕ ИспользоватьВнешнийМодуль Тогда
		ДанныеМодуля = Неопределено;
		Модифицированность = Истина;
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	//-- НЕ ЭСФ
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеМодульОбменаПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//++ НЕ ЭСФ
	СтандартнаяОбработка = Ложь;
	ВыбратьВнешнийМодуль();
	//-- НЕ ЭСФ
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеМодульОбменаПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	//++ НЕ ЭСФ
	ДанныеМодуля = Неопределено;
	
	Модифицированность = Истина;
	УправлениеФормой(ЭтаФорма);
	//-- НЕ ЭСФ
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВФайл(Команда)
	//++ НЕ ЭСФ	
	Если ЗначениеЗаполнено(ДанныеМодуля) Тогда
		ТекстСообщения = НСтр("ru = 'Для выгрузки внешней обработки в файл рекомендуется установить расширение для веб-клиента 1С:Предприятие.'");
		Обработчик = Новый ОписаниеОповещения("ВыгрузитьВФайлЗавершение", ЭтотОбъект);
		ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик, ТекстСообщения);
	Иначе
		ЭСФКлиентСервер.СообщитьПользователю(НСтр("ru = 'Отсутствует файл внешней обработки для сохранения.'"));
	КонецЕсли;
	//-- НЕ ЭСФ	
КонецПроцедуры

//++ НЕ ЭСФ

&НаКлиенте
Процедура ВыбратьВнешнийМодуль()
	
	ДанныеМодуля = Неопределено;
	
	ВыбранноеИмяФайла = "";
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьВнешнийМодульЗавершение", ЭтотОбъект);
	НачатьПомещениеФайла(ОписаниеОповещения, ДанныеМодуля, ВыбранноеИмяФайла, Истина, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВнешнийМодульЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранКорректныйФайл = ВыбранКорректныйФайл(ВыбранноеИмяФайла, ".epf");
	Если НЕ ВыбранКорректныйФайл Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Загружать можно только файлы с расширением *.epf'"));
	Иначе
		ДанныеМодуля = Адрес;
		ВыбратьВнешнийМодульИзменитьПеременные(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВнешнийМодульИзменитьПеременные(ФайлыБылиВыбраны)
	
	Если ФайлыБылиВыбраны И ЗначениеЗаполнено(ДанныеМодуля) Тогда
		стрВерсияМодуля = ПолучитьВерсиюВнешнегоМодуляИзФайла(ДанныеМодуля);
		Если стрВерсияМодуля = Неопределено Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Выбранный файл не является внешним модулем обмена с ИС ЭСФ!'"));
			
		Иначе
			Модифицированность = Истина;
			УправлениеФормой(ЭтаФорма);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ВыбранКорректныйФайл(Знач ПолныйПуть, Знач ПолноеИмяФайлаБезПути) Экспорт
	
	ПолныйПуть = Врег(ПолныйПуть);
	ПолноеИмяФайлаБезПути = Врег(ПолноеИмяФайлаБезПути);
	
	ДлинаПолногоИмениФайлаБезПути = СтрДлина(ПолноеИмяФайлаБезПути);
	Возврат Прав(ПолныйПуть, ДлинаПолногоИмениФайлаБезПути) = ПолноеИмяФайлаБезПути;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВерсиюВнешнегоМодуляИзФайла(МодульДвоичныеДанные)
	
	// Сохраняем обработку во временный файл.
	Если МодульДвоичныеДанные <> Неопределено Тогда
		ИмяФайлаОбработки = ПолучитьИмяВременногоФайла("epf");
		Если ЭтоАдресВременногоХранилища(МодульДвоичныеДанные) Тогда
			ПолучитьИзВременногоХранилища(МодульДвоичныеДанные).Записать(ИмяФайлаОбработки);
		Иначе
			МодульДвоичныеДанные.Записать(ИмяФайлаОбработки);
		КонецЕсли;
	Иначе
		Возврат Неопределено
	КонецЕсли;
	
	// Пытаемся извлечь версию внешнего модуля.
	Попытка
		Результат = ВнешниеОбработки.Создать(ИмяФайлаОбработки).ВерсияБЭСФ;
	Исключение
		Результат = Неопределено;
	КонецПопытки;
	
	// Удаляем временный файл обработки.
	УдалитьФайлы(ИмяФайлаОбработки);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещенияОЗакрытии, ТекстПредложения = "", 
	ВозможноПродолжениеБезУстановки = Истина) Экспорт
	
	ОписаниеОповещенияЗавершение = Новый ОписаниеОповещения("ПоказатьВопросОбУстановкеРасширенияРаботыСФайламиЗавершение",
		ЭтотОбъект, ОписаниеОповещенияОЗакрытии);
	
#Если Не ВебКлиент Тогда
	// В тонком и толстом клиентах расширение подключено всегда.
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияЗавершение, "ПодключениеНеТребуется");
	Возврат;
#КонецЕсли
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОписаниеОповещенияЗавершение", ОписаниеОповещенияЗавершение);
	ДополнительныеПараметры.Вставить("ТекстПредложения", ТекстПредложения);
	ДополнительныеПараметры.Вставить("ВозможноПродолжениеБезУстановки", ВозможноПродолжениеБезУстановки);
	
	Оповещение = Новый ОписаниеОповещения("ПоказатьВопросОбУстановкеРасширенияРаботыСФайламиПриУстановкеРасширения",
		ЭтотОбъект, ДополнительныеПараметры);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОбУстановкеРасширенияРаботыСФайламиЗавершение(Действие, ОповещениеОЗакрытии) Экспорт
	
	РасширениеПодключено = (Действие = "РасширениеПодключено" Или Действие = "ПодключениеНеТребуется");
#Если ВебКлиент Тогда
	Если Действие = "БольшеНеПредлагать"
		Или Действие = "РасширениеПодключено" Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация();
		ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
		ПараметрыПриложения["СтандартныеПодсистемы.ПредлагатьУстановкуРасширенияРаботыСФайлами"] = Ложь;
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить(
			"НастройкиПрограммы/ПредлагатьУстановкуРасширенияРаботыСФайлами", ИдентификаторКлиента, Ложь);
	КонецЕсли;
#КонецЕсли
	
	ВыполнитьОбработкуОповещения(ОповещениеОЗакрытии, РасширениеПодключено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОбУстановкеРасширенияРаботыСФайламиПриУстановкеРасширения(Подключено, ДополнительныеПараметры) Экспорт
	
	// Если расширение и так уже подключено, незачем про него спрашивать.
	Если Подключено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияЗавершение, "ПодключениеНеТребуется");
		Возврат;
	КонецЕсли;
	
	// В веб клиенте под MacOS расширение не доступно.
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ЭтоMacКлиент = (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86
		Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86_64);
	Если ЭтоMacКлиент Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияЗавершение);
		Возврат;
	КонецЕсли;
	
	ИмяПараметра = "СтандартныеПодсистемы.ПредлагатьУстановкуРасширенияРаботыСФайлами";
	ПервоеОбращениеЗаСеанс = ПараметрыПриложения[ИмяПараметра] = Неопределено;
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, ОбщегоНазначенияКлиент.ПредлагатьУстановкуРасширенияРаботыСФайлами());
	КонецЕсли;
	ПредлагатьУстановкуРасширенияРаботыСФайлами	= ПараметрыПриложения[ИмяПараметра] Или ПервоеОбращениеЗаСеанс;
	
	Если ДополнительныеПараметры.ВозможноПродолжениеБезУстановки И Не ПредлагатьУстановкуРасширенияРаботыСФайлами Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияЗавершение);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекстПредложения", ДополнительныеПараметры.ТекстПредложения);
	ПараметрыФормы.Вставить("ВозможноПродолжениеБезУстановки", ДополнительныеПараметры.ВозможноПродолжениеБезУстановки);
	ОткрытьФорму("ОбщаяФорма.ВопросОбУстановкеРасширенияРаботыСФайлами", ПараметрыФормы,,,,,ДополнительныеПараметры.ОписаниеОповещенияЗавершение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВФайлЗавершение(Подключено, ПараметрыВыгрузки) Экспорт
	
	Перем Адрес;
	
	Если ТипЗнч(ДанныеМодуля) = Тип("ДвоичныеДанные") Тогда
		Адрес = ПоместитьВоВременноеХранилище(ДанныеМодуля, Неопределено);
	ИначеЕсли ЭтоАдресВременногоХранилища(ДанныеМодуля) Тогда
		Адрес = ДанныеМодуля;
	КонецЕсли;
	
	ИмяФайла = ЭСФКлиентСервер.ИмяВнешнейОбработкиОбменЭСФ();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Адрес", Адрес);
	
	Если Не Подключено Тогда
		ПолучитьФайл(Адрес, ИмяФайла, Истина);
		Возврат;
	КонецЕсли;
	
	ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогСохраненияФайла.ПолноеИмяФайла = ИмяФайла;
	ДиалогСохраненияФайла.Фильтр = НСтр("ru = 'Внешние обработки (*.epf)|*.epf'");
	ДиалогСохраненияФайла.ИндексФильтра = 1;
	ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
	ДиалогСохраненияФайла.Заголовок = НСтр("ru = 'Укажите файл'");
	
	Обработчик = Новый ОписаниеОповещения("ВыгрузитьФайлВыборФайла", ЭтотОбъект, ДополнительныеПараметры);
	ДиалогСохраненияФайла.Показать(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлВыборФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		ПолноеИмяФайла = ВыбранныеФайлы[0];
		ПолучаемыеФайлы = Новый Массив;
		ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, ДополнительныеПараметры.Адрес));
		
		Обработчик = Новый ОписаниеОповещения("ОбработкаРезультатаНеТребуется", ЭтотОбъект);
		НачатьПолучениеФайлов(Обработчик, ПолучаемыеФайлы, ПолноеИмяФайла, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаНеТребуется(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	Возврат;
КонецПроцедуры
//-- НЕ ЭСФ

&НаКлиенте
Процедура ЗаполнитьПризнакУчетаНаВиртуальномСкладе(Команда)
	//++ НЕ ЭСФ
	Если ПолучитьДатаПереходаНаУчетПоИдентификаторамТоваровВС() <> ДатаПереходаНаУчетПоИдентификаторамТоваровВС Тогда
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Записать и продолжить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ТекстВопроса = НСтр("ru = 'Для заполнения служебных реквизитов необходимо записать значение даты перехода.'");
		Обработчик = Новый ОписаниеОповещения("ЗаполнитьПризнакУчетаНаВиртуальномСкладеЗавершение", ЭтотОбъект, Неопределено);
		ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки,, КодВозвратаДиалога.Да);
	Иначе
		ОткрытьЗаполнитьПризнакУчетаНаВиртуальномСкладеЗавершение();
	КонецЕсли;
	//-- НЕ ЭСФ

КонецПроцедуры
//++ НЕ ЭСФ

&НаКлиенте
Процедура ЗаполнитьПризнакУчетаНаВиртуальномСкладеЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если ДатаПереходаНаУчетПоИдентификаторамТоваровВСЗаписатьНаСервере() Тогда
			ОткрытьЗаполнитьПризнакУчетаНаВиртуальномСкладеЗавершение();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаполнитьПризнакУчетаНаВиртуальномСкладеЗавершение()
	
	ПараметрыФормы = Новый Структура("ДатаНачала", ДатаПереходаНаУчетПоИдентификаторамТоваровВС);
	ОткрытьФорму("Обработка.ОбменЭСФ.Форма.ЗаполнениеПризнакаУчетаНаВиртуальномСкладе", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ДатаПереходаНаУчетПоИдентификаторамТоваровВСЗаписатьНаСервере()
		
	НачатьТранзакцию();
	
	МенеджерЗаписи 			= Константы.ДатаПереходаНаУчетПоИдентификаторамТоваровВС.СоздатьМенеджерЗначения();	
	МенеджерЗаписи.Значение = ДатаПереходаНаУчетПоИдентификаторамТоваровВС;
	Попытка
		МенеджерЗаписи.Записать();
	Исключение
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(НСтр("ru = 'Не удалось изменить значение константы: '") + ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДатаПереходаНаУчетПоИдентификаторамТоваровВС()
	Возврат Константы.ДатаПереходаНаУчетПоИдентификаторамТоваровВС.Получить();
КонецФункции

//-- НЕ ЭСФ

&НаКлиенте
Процедура СоответствиеОрганизацийПрофилейПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКомпонентуНЦАПриИзменении(Элемент)
	
	Если ИспользоватьКомпонентуНЦАДляПодписиДокументов = Ложь Тогда
		Модифицированность = Истина;
	Иначе
		Если ЭтаФорма.МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаСервере") 
			И НЕ ЭтаФорма.ИспользоватьВнешнююКриптографиюДляКомпоненты Тогда
			ТекстСообщения = НСтр("ru='Использование криптографии НУЦ РК для подписи возможно только при включеной внешней криптографии Kalkan.'");
			ЭСФКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ИспользоватьКомпонентуНЦАДляПодписиДокументов = Ложь;
		Иначе
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьИспользоватьВнешнююКриптографиюДляКомпоненты();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрыватьСессиюСПодписьюПриИзменении(Элемент)
	
	Если ОткрыватьСессиюСПодписью = Ложь Тогда
		Модифицированность = Истина;
	Иначе
		Если ЭтаФорма.МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаСервере")
			И НЕ ЭтаФорма.ИспользоватьВнешнююКриптографиюДляКомпоненты Тогда
			ТекстСообщения = НСтр("ru='Использование механизма открытия сессий с подписью возможно только при включеной внешней криптографии Kalkan.'");
			ЭСФКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ОткрыватьСессиюСПодписью = Ложь;
		Иначе
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьИспользоватьВнешнююКриптографиюДляКомпоненты();

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВнешнююКриптографиюДляКомпонентыПриИзменении(Элемент)
	
	Если Не ЭтаФорма.ИспользоватьВнешнююКриптографиюДляКомпоненты И ЭтаФорма.МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаСервере")
		И (ЭтаФорма.ОткрыватьСессиюСПодписью ИЛИ ЭтаФорма.ИспользоватьКомпонентуНЦАДляПодписиДокументов) Тогда
		  		
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаИспользоватьВнешнююКриптографиюДляКомпонентыПриИзменении",
			ЭтотОбъект);	
			
			ПоказатьВопрос(Оповещение,
			НСтр("ru='Выполнение криптографических операций на сервере возможно только с использованием внешней криптографии Kalkan. При отключении данной настройки место выполнения криптографических операций будет установлено ""На компьютерах пользователей"" с использованием компоненты NCA Layer. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет,
			0, // таймаут в секундах
			КодВозвратаДиалога.Да // (необ.) кнопка по умолчанию
			);         
		Иначе
			Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаИспользоватьВнешнююКриптографиюДляКомпонентыПриИзменении(Результат, Параметры) Экспорт
 
    Если Результат = КодВозвратаДиалога.Да Тогда
        МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаКлиенте");  
		Модифицированность = Истина;
	Иначе
		ИспользоватьВнешнююКриптографиюДляКомпоненты = Истина;
    КонецЕсли;	
 
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьКомпонентуНЦА(Команда)
	
	УникальныйИдентификаторФормыКлиента = ЭтаФорма.УникальныйИдентификатор;
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	СсылкаНаМодуль = Контейнер.АдресБиблиотекиКриптографииНЦА(УникальныйИдентификаторФормыКлиента);	
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановкаКомпонентыЗавершение", ЭтаФорма);		
	НачатьУстановкуВнешнейКомпоненты(ОписаниеОповещения, СсылкаНаМодуль);
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановкаКомпонентыЗавершение(Результат)Экспорт
	
	Оповестить("ОбновленМодульКриптографии");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРаботуНЦА(Команда)	
	
	Если ЭтаФорма.МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаКлиенте") Тогда
		СистемнаяИнформация = ИнформацияОСистемеКлиент();
	Иначе
		СистемнаяИнформация = ИнформацияОСистемеСервер();
	КонецЕсли;
	ИнформацияОСистеме = Символы.ПС + "Сведения об аппаратном и программном обеспечении:";
	ИнформацияОСистеме = ИнформацияОСистеме + Символы.ПС + "ОС: " + СистемнаяИнформация.ВерсияОС;
	ИнформацияОСистеме = ИнформацияОСистеме + Символы.ПС + "Версия 1С:" + СистемнаяИнформация.ВерсияПриложения;
	ИнформацияОСистеме = ИнформацияОСистеме + Символы.ПС + "Тип платформы:" + СистемнаяИнформация.ТипПлатформы;	
	ИнформацияОСистеме = ИнформацияОСистеме + Символы.ПС + "Тип процессора:" + СистемнаяИнформация.Процессор;	
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Результат = Контейнер.КриптопровайдерПодключается(ВерсияКомпонентыНЦА, Ложь, МестоУстановкиБиблиотеки, Истина, Истина);
	ВерсияКомпонентыНЦА = СтрЗаменить(ВерсияКомпонентыНЦА, ",", ".");
	
	Если Результат Тогда
		
		ДопСведенияКомпоненты = ПолучитьИнформациюКриптопровайдера();
		
		Если ЗначениеЗаполнено(ДопСведенияКомпоненты) Тогда
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru = 'Библиотека успешно подключена! Версия: %1 %2 %3'"), СокрЛП(ВерсияКомпонентыНЦА), Символы.ПС + ИнформацияОСистеме, Символы.ПС + Символы.ПС + ДопСведенияКомпоненты);
		Иначе
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru = 'Библиотека успешно подключена! Версия: %1 %2'"), СокрЛП(ВерсияКомпонентыНЦА), Символы.ПС + ИнформацияОСистеме);
		КонецЕсли;
		
	Иначе	
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось подключить библиотеку криптографии. Возможно она не установлена или возникла ошибка при попытке ее подключения. %1 %2'"), Символы.ПС + ОписаниеОшибки(), ИнформацияОСистеме);
	КонецЕсли;
	ЭСФКлиентСервер.СообщитьПользователю(ТекстСообщения);

КонецПроцедуры

&НаКлиенте
Функция ИнформацияОСистемеКлиент()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Результат = Новый Структура("ВерсияОС, ВерсияПриложения, ТипПлатформы, Процессор");
	Результат.ТипПлатформы = Строка(СистемнаяИнформация.ТипПлатформы);
	ЗаполнитьЗначенияСвойств(Результат, СистемнаяИнформация);
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ИнформацияОСистемеСервер()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Результат = Новый Структура("ВерсияОС, ВерсияПриложения, ТипПлатформы, Процессор");
	ЗаполнитьЗначенияСвойств(Результат, СистемнаяИнформация);
	Результат.ТипПлатформы = Строка(СистемнаяИнформация.ТипПлатформы);
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьИнформациюКриптопровайдера()
	
	Попытка
		
		Если ЭтаФорма.МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаКлиенте") Тогда
			ДополнительныеСведенияКриптопровайдера = ЭСФКлиентСервер.ПолучитьДополнительныеСведенияКриптопровайдера();
		Иначе
			ДополнительныеСведенияКриптопровайдера = ЭСФВызовСервера.ПолучитьДополнительныеСведенияКриптопровайдера();
		КонецЕсли;
		
		ШаблонИнформацияКомпоненты = НСтр("ru = 'Дополнительная информация:
		|Версия компоненты: %1
		|NCALayer:
		|   Подключено: %2
		|   Модуль ""1С-Рейтинг ЭДО"" установлен: %3
		|   Версия модуля ""1С-Рейтинг ЭДО"": %4
		|   Порт запуска: %5
		|Библиотека Kalkan:
		|   Подключено: %6'");
		
		ИнформацияКомпоненты = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
			ШаблонИнформацияКомпоненты,
			ДополнительныеСведенияКриптопровайдера.version,
			ДополнительныеСведенияКриптопровайдера.NCALayer.NCALayer_Connected,
			ДополнительныеСведенияКриптопровайдера.NCALayer.NCALayer_ModuleEDOInstalled,
			ДополнительныеСведенияКриптопровайдера.NCALayer.NCALayer_ModuleEDOVersion,
			ДополнительныеСведенияКриптопровайдера.NCALayer.NCALayer_Port,
			ДополнительныеСведенияКриптопровайдера.Kalkan.Kalan_Init
		);
		Возврат ИнформацияКомпоненты;
		
	Исключение
		
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка получение доп. данных компоненты'"), "Ошибка", , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат "";
		
	КонецПопытки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеСтатусаКомпонентыНЦАНаКлиентеНаСервере(Форма)
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	РезультатПроверки = Ложь;
	Попытка
		РезультатПроверки = Контейнер.КриптопровайдерПодключается(Форма.ВерсияКомпонентыНЦА,,Форма.МестоУстановкиБиблиотеки, Истина, Истина);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
	КонецПопытки;
	ВерсияВБазе = ЭСФКлиентСервер.ВерсияКомпонентыНЦАВБазе();	
	Форма.ВерсияКомпонентыНЦА = СтрЗаменить(Форма.ВерсияКомпонентыНЦА, ",", ".");
	Форма.Элементы.ОбновитьКомпонентуНЦА.Видимость = Истина;
	Форма.ВерсияКомпонентыНЦАВБД = ВерсияВБазе;
	
	Если НЕ РезультатПроверки Тогда
		Форма.Элементы.НадписьБиблиотекаНЦАУстановлена.Заголовок = НСтр("ru = 'Библиотека не установлена'");
		Форма.Элементы.ОбновитьКомпонентуНЦА.Заголовок = НСтр("ru = 'Установить компоненту'");
		Форма.Элементы.КартинкаКомпонентаНЦАУстановлена.Видимость = Ложь;	
		Форма.Элементы.КартинкаКомпонентаНЦАНеОбновлена.Видимость = Истина;	
	ИначеЕсли Форма.ВерсияКомпонентыНЦА < ВерсияВБазе Тогда
		Форма.Элементы.НадписьБиблиотекаНЦАУстановлена.Заголовок = НСтр("ru = 'Библиотека установлена, но требует обновления версии'");		
		Форма.Элементы.ОбновитьКомпонентуНЦА.Заголовок = НСтр("ru = 'Обновить компоненту'");
		Форма.Элементы.КартинкаКомпонентаНЦАУстановлена.Видимость = Ложь;
	Иначе
		Форма.Элементы.НадписьБиблиотекаНЦАУстановлена.Заголовок = НСтр("ru = 'Библиотека установлена и готова к использованию'");
		Форма.Элементы.ОбновитьКомпонентуНЦА.Видимость = Ложь;
		Форма.Элементы.КартинкаКомпонентаНЦАУстановлена.Видимость = Истина;
		Форма.Элементы.КартинкаКомпонентаНЦАНеОбновлена.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеСтатусаКомпонентыНЦАНаСервере()
	
	ОбновитьПредставлениеСтатусаКомпонентыНЦАНаКлиентеНаСервере(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеСтатусаКомпонентыНЦА()
	
	Если ЭтаФорма.ИнформационнаяБазаФайловая Тогда
		ОбновитьПредставлениеСтатусаКомпонентыНЦАНаКлиентеНаСервере(ЭтаФорма);
	Иначе
		Если ЭтаФорма.МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаКлиенте") Тогда
			ОбновитьПредставлениеСтатусаКомпонентыНЦАНаКлиентеНаСервере(ЭтаФорма);
		Иначе
			ОбновитьПредставлениеСтатусаКомпонентыНЦАНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяЖизниТикетаЭСФПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВремяЖизниТикетаВСПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьИспользоватьВнешнююКриптографиюДляКомпоненты()
	
	Если ЭтаФорма.МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаКлиенте") Тогда
		Элементы.ИспользоватьВнешнююКриптографиюДляКомпоненты.Доступность = ?(НЕ ЭтаФорма.ОткрыватьСессиюСПодписью И НЕ ЭтаФорма.ИспользоватьКомпонентуНЦАДляПодписиДокументов, Ложь, Истина);
	ИначеЕсли ЭтаФорма.МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаСервере") Тогда
		Элементы.ИспользоватьВнешнююКриптографиюДляКомпоненты.Доступность = Истина;
	КонецЕсли;
	
	ЭСФСервер.ПроверитьИспользованиеСервернойКриптографииФормыНастройки(ЭтаФорма, МестоУстановкиБиблиотеки);
	
КонецПроцедуры

&НаСервере
Процедура ПолучатьОповещенияИСЭСФПриИзмененииНаСервере()

	Элементы.ОткрытьОповещенияЭСФ.Заголовок = ЭСФВызовСервера.ПолучитьТекстГиперссылкиОповещений();
	Элементы.ГруппаОповещенийИСЭСФ.Видимость = ПолучатьОповещенияИСЭСФ;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокОповещенийИСЭСФ()
	Элементы.ОткрытьОповещенияЭСФ.Заголовок = ЭСФВызовСервера.ПолучитьТекстГиперссылкиОповещений();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеКонстантыОповещенияНаСервере()
	
	Возврат Константы.ИспользоватьОповещенияИСЭСФ.Получить();
	
КонецФункции

&НаКлиенте
Процедура ОткрытьОповещенияИСЭСФЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Отказ = Ложь;
		СохранитьНастройки(Отказ);
		
		Если Не Отказ Тогда
			ЭСФКлиент.ОткрытьФормуОповещенийИСЭСФ(,);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрофильИСЭСФПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

