////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РежимЗапуска = Параметры.РежимЗапуска;
	
	ЗаполнитьТаблицуПрофилейДляСинхронизации();
		
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Контейнер.ПриОткрытииФормы(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ

&НаКлиенте
Процедура ТаблицаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)	
	Отказ = Истина;	
	ОткрытьФорму("Справочник.ПрофилиИСЭСФ.ФормаВыбора", , Элемент);	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)	
	СтандартнаяОбработка = Ложь;
	ТаблицаОбработкаВыбораНаСервере(ВыбранноеЗначение);
КонецПроцедуры

&НаСервере
Процедура ТаблицаОбработкаВыбораНаСервере(ВыбранноеЗначение)	
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ПрофилиИСЭСФ") Тогда
		СтрокаТаблицы = Таблица.Добавить();
		СтрокаТаблицы.Пометка = Истина;
		СтрокаТаблицы.СтруктурнаяЕдиница = ВыбранноеЗначение.СтруктурнаяЕдиница;
		СтрокаТаблицы.ПрофильИСЭСФ = ВыбранноеЗначение;
		СтрокаТаблицы.ПользовательИСЭСФ = ВыбранноеЗначение.Владелец;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтруктурнаяЕдиницаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтруктурнаяЕдиницаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПрофильИСЭСФНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПрофильИСЭСФОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКомментарийОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПрофильИСЭСФОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Элементы.Таблица.ТекущиеДанные.СтруктурнаяЕдиница = ПолучитьСтруктурнуюЕдиницуИзПрофиля(ВыбранноеЗначение);
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктурнуюЕдиницуИзПрофиля(Профиль)
	Возврат Профиль.СтруктурнаяЕдиница;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Синхронизировать(Команда)
	
	// Очистить комментарий.
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		СтрокаТаблицы.Комментарий = "";
	КонецЦикла;
	
	// Создать массив профилей ИС ЭСФ из помеченных строк таблицы.
	МассивПрофилейИСЭСФ = Новый Массив;	
	МассивПользователейИСЭСФ = Новый Массив;
	МассивПрофилейИСЭСФСДатойСинхронизации = Новый Массив; // Для получения входящих ЭСФ в версии 5.0, в свзяи с вводом параметра LastEventDate
	КоллекцияСтруктурныхЕдиницИСЭСФ = Новый Соответствие;
	
	
	//Проверка на наличие настроек
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Если СтрокаТаблицы.Пометка Тогда
			МассивПользователейИСЭСФ.Добавить(СтрокаТаблицы.ПользовательИСЭСФ);
		КонецЕсли;
	КонецЦикла;

	МассивПользователейИСЭСФСНастройками = ПроверитьНастройкиОповещенийПоПользователям(МассивПользователейИСЭСФ);
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Если СтрокаТаблицы.Пометка И МассивПользователейИСЭСФСНастройками.Найти(СтрокаТаблицы.ПользовательИСЭСФ) <> Неопределено Тогда  
			МассивПрофилейИСЭСФ.Добавить(СтрокаТаблицы.ПрофильИСЭСФ);
			МассивПрофилейИСЭСФСДатойСинхронизации.Добавить(Новый Структура("ПрофильИСЭСФ, ДатаНачалаСинхронизацииВходящихЭСФ, ДатаНачалаСинхронизацииИсходящихЭСФ", СтрокаТаблицы.ПрофильИСЭСФ, СтрокаТаблицы.ДатаНачалаСинхронизацииУведомлений, Дата(1, 1, 1)));	
			КоллекцияСтруктурныхЕдиницИСЭСФ.Вставить(СтрокаТаблицы.СтруктурнаяЕдиница, СтрокаТаблицы.ПрофильИСЭСФ);
		ИначеЕсли СтрокаТаблицы.Пометка И МассивПользователейИСЭСФСНастройками.Найти(СтрокаТаблицы.ПользовательИСЭСФ) = Неопределено Тогда
			ТекстОшибки = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр(
		"ru = 'У пользователя ИС ЭСФ %1 не выбраны оповещения для получения, данный пользователь исключен из синхронизации.
		|Проверьте настройки оповещений, выберите необходимые типы оповещений и попробуйте еще раз.'"),СтрокаТаблицы.ПользовательИСЭСФ);
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);	
		КонецЕсли;
	КонецЦикла;
	
	Если МассивПрофилейИСЭСФ.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Выберите хотя бы один профиль для синхронизации с ИС ЭСФ.'");
		Сообщение.Поле = "Таблица";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
		
	// Получить пароли для пользователей ИС ЭСФ, которые не имеют сохраненных паролей.
	МассивПользователейИСЭСФБезПароля = ЭСФВызовСервера.ПользователиИСЭСФБезПароляАутентификации(МассивПрофилейИСЭСФ);
	
	ДополнительныеПараметры = Новый Структура("МассивПрофилейИСЭСФ, МассивПользователейИСЭСФБезПароля, МассивПрофилейИСЭСФСДатойСинхронизации", МассивПрофилейИСЭСФ, МассивПользователейИСЭСФБезПароля, МассивПрофилейИСЭСФСДатойСинхронизации);
	
	СинхронизироватьЗавершение = Новый ОписаниеОповещения("СинхронизироватьЗавершение", ЭтаФорма, ДополнительныеПараметры);
	
	Если МассивПользователейИСЭСФБезПароля.Количество() > 0 Тогда
		Если ЭСФВызовСервера.ИспользоватьОткрытиеСессииСПодписью() И ЭСФВызовСервера.ИспользоватьВнешнююКриптографиюДляКомпоненты() Тогда
			ДополнительныеПараметры = Новый Структура("СписокСтруктурныхЕдиниц, МассивПользователейИСЭСФБезПароля, МассивПрофилейИСЭСФСДатойСинхронизации, ТребуетсяВыборСертификатаВхода", КоллекцияСтруктурныхЕдиницИСЭСФ, МассивПользователейИСЭСФБезПароля, МассивПрофилейИСЭСФСДатойСинхронизации, Истина);
			ЭСФКлиент.ОткрытьФормуВводаДанныхИСЭСФ(СинхронизироватьЗавершение, ДополнительныеПараметры);
		Иначе
			ЭСФКлиент.ПаролиАутентификации(СинхронизироватьЗавершение, МассивПользователейИСЭСФБезПароля, ПредопределенноеЗначение("Перечисление.МодулиЭСФ.ВС"));
		КонецЕсли;
	ИначеЕсли ЭСФВызовСервера.ИспользоватьОткрытиеСессииСПодписью() И ЭСФВызовСервера.ИспользоватьВнешнююКриптографиюДляКомпоненты() Тогда
		ДополнительныеПараметры = Новый Структура("СписокСтруктурныхЕдиниц, МассивПользователейИСЭСФБезПароля, МассивПрофилейИСЭСФСДатойСинхронизации, ТребуетсяВыборСертификатаВхода", КоллекцияСтруктурныхЕдиницИСЭСФ, МассивПользователейИСЭСФБезПароля, МассивПрофилейИСЭСФСДатойСинхронизации, Истина);
		ЭСФКлиент.ОткрытьФормуВводаДанныхИСЭСФ(СинхронизироватьЗавершение, ДополнительныеПараметры);
	Иначе
		СинхронизироватьЗавершение(МассивПрофилейИСЭСФ, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СинхронизироватьНаСервере(МассивДанныхПрофилейИСЭСФ, МассивПрофилейИСЭСФСДатойСинхронизации)
	
	ПараметрыЗадания = Новый Структура("МассивДанныхПрофилейИСЭСФ, МассивПрофилейИСЭСФСДатойСинхронизации, ПолучитьОднуПорцию, ТолькоСоздатьОбновитьФайлы, ЗапускатьФоновоеЗадание");
	ПараметрыЗадания.Вставить("МассивДанныхПрофилейИСЭСФ", МассивДанныхПрофилейИСЭСФ);
	ПараметрыЗадания.Вставить("ПолучитьОднуПорцию", Истина);
	ПараметрыЗадания.Вставить("ТолькоСоздатьОбновитьФайлы", Ложь);
	ПараметрыЗадания.Вставить("ЗапускатьФоновоеЗадание", ЭСФКлиентСерверПереопределяемый.ИспользоватьФоновуюОтправкуЭСФ());
	ПараметрыЗадания.Вставить("МассивПрофилейИСЭСФСДатойСинхронизации", МассивПрофилейИСЭСФСДатойСинхронизации);
	
	Если ПараметрыЗадания.ЗапускатьФоновоеЗадание Тогда
		
		РезультатРаботыЗадания = Неопределено;
		
					ИмяПроцедурыПолученияУведомлений = "ЭСФВызовСервера.ПолучитьНовыеУведомления";
			НаименованиеЗадания = НСтр("ru = 'Синхронизация оповещений'");
			
			ТекстСообщения = НСтр("ru = 'В информационной базе уже запущен процесс получения оповещений из ИС ЭСФ.  
										|Перед запуском нового процесса синхронизации, необходимо дождаться завершения предыдущего (запущено на %1, время запуска %2'");
					
		СтруктураВыполненияЗадания = ЭСФСерверПереопределяемый.ФоновоеЗаданиеЗапущено(ИмяПроцедурыПолученияУведомлений);
		
		Если НЕ СтруктураВыполненияЗадания.ЗаданиеАктивно Тогда
			
			ПараметрыВыполнения = ЭСФКлиентСерверПереопределяемый.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
			
			ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
			
			РезультатРаботыЗадания = ЭСФВызовСервера.ВыполнитьВФоне(ИмяПроцедурыПолученияУведомлений, ПараметрыЗадания, ПараметрыВыполнения);
			
		Иначе
			
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СтруктураВыполненияЗадания.Расположение, СтруктураВыполненияЗадания.Начало);
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	Иначе
				
		ЭСФВызовСервера.ПолучитьНовыеУведомления(ПараметрыЗадания);
		
	КонецЕсли;
	
	Возврат РезультатРаботыЗадания;

КонецФункции

&НаКлиенте
Процедура УстановитьФлажки(Команда)	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		СтрокаТаблицы.Пометка = Истина;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		СтрокаТаблицы.Пометка = Ложь;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Функция ПроверитьНастройкиОповещенийПоПользователям(МассивПользователейИСЭСФ)
	
	НастройкиОповещений = "";
	                           
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиОповещенияИСЭСФ.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.НастройкиОповещенияИСЭСФ КАК НастройкиОповещенияИСЭСФ
	|ГДЕ
	|	НастройкиОповещенияИСЭСФ.Пользователь В(&МассивПользователейИСЭСФ)
	|	И НастройкиОповещенияИСЭСФ.ПолучатьУведомления
	|
	|СГРУППИРОВАТЬ ПО
	|	НастройкиОповещенияИСЭСФ.Пользователь";
	
	Запрос.УстановитьПараметр("МассивПользователейИСЭСФ", МассивПользователейИСЭСФ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивПользователейИСЭСФСНастройками = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		МассивПользователейИСЭСФСНастройками.Добавить(Выборка.Пользователь);	
	КонецЦикла;
	
	Возврат МассивПользователейИСЭСФСНастройками;
	
КонецФункции


&НаКлиенте
Процедура СинхронизироватьЗавершение(Результат = Неопределено, ДополнительныеПараметры) Экспорт
	
	МассивПрофилейИСЭСФ = ДополнительныеПараметры.МассивПрофилейИСЭСФ;
	МассивПользователейИСЭСФБезПароля = ДополнительныеПараметры.МассивПользователейИСЭСФБезПароля;
	МассивПрофилейИСЭСФСДатойСинхронизации = ДополнительныеПараметры.МассивПрофилейИСЭСФСДатойСинхронизации; 
	
	Если НЕ Результат = Неопределено Тогда
		
		КоллецияПаролей = Результат;
		МассивДанныхПрофилейИСЭСФ = ДанныеПрофилейДляСинхронизацииНаСервере(МассивПрофилейИСЭСФ, КоллецияПаролей);
	
	КонецЕсли;

	Если МассивДанныхПрофилейИСЭСФ = Неопределено ИЛИ МассивДанныхПрофилейИСЭСФ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	
	// До перехода на сервер нужно получить ИД сессии на клиенте! При этом учеть получение для каждого профиля
 	Если НЕ ОткрытьСессиюСПодписьюДляПрофилей(МассивДанныхПрофилейИСЭСФ) Тогда
		Возврат;
	КонецЕсли;
	

	ОчиститьСообщения();
	
	РезультатРаботыЗадания = СинхронизироватьНаСервере(МассивДанныхПрофилейИСЭСФ, МассивПрофилейИСЭСФСДатойСинхронизации);
	
	Если Параметры.ЗапускатьФоновоеЗадание Тогда
		
		Если ТипЗнч(РезультатРаботыЗадания) = Тип("Структура") Тогда
			
			РезультатРаботыЗадания.Вставить("ТекстСообщения", НСтр("ru = 'Получение оповещений ИС ЭСФ'"));
			
			СтруктураОповещений = Новый Структура(ЭСФКлиентСервер.ИмяСобытияСинхронизацияУведомленийИСЭСФ());
			СтруктураОповещений.Вставить(ЭСФКлиентСервер.ИмяСобытияЗаписьУведомленийИСЭСФ());
			РезультатРаботыЗадания.Вставить("ДополнительныеОповещения", СтруктураОповещений);
		КонецЕсли;
				
		ЭСФКлиентПереопределяемый.ОбработкаОповещенияЭСФ_ПроверятьОповещенияФоновогоЗадания(ЭтаФорма, РезультатРаботыЗадания);
		
	Иначе
		ЭСФКлиент.ОповеститьФормы(ЭСФКлиентСервер.ИмяСобытияЗаписьУведомленийИСЭСФ());
		ЭСФКлиент.ОповеститьФормы(ЭСФКлиентСервер.ИмяСобытияСинхронизацияУведомленийИСЭСФ());
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеПрофилейДляСинхронизацииНаСервере(Знач МассивПрофилейИСЭСФ, Знач КоллецияПаролей)
	
	// Создать массив, содержащий данные профилей ИС ЭСФ.
	МассивДанныхПрофилейИСЭСФ = Новый Массив();
	Для Каждого ПрофильИСЭСФ Из МассивПрофилейИСЭСФ Цикл
		ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
		МассивДанныхПрофилейИСЭСФ.Добавить(ДанныеПрофиляИСЭСФ);
	КонецЦикла;
	
	МетодKalkan = ?(ЭСФВызовСервера.ИспользоватьОткрытиеСессииСПодписью() И ЭСФВызовСервера.ИспользоватьВнешнююКриптографиюДляКомпоненты(), Истина, Ложь);
	// Заполнить пароли, у пользователей, которые не имеют сохраненных паролей. 
	Для Каждого ДанныеПрофиляИСЭСФ Из МассивДанныхПрофилейИСЭСФ Цикл
		Если МетодKalkan Тогда
			Для Каждого КлючЗначение Из КоллецияПаролей Цикл
				Если ПустаяСтрока(ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации) Тогда
					Если ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка = КлючЗначение.Значение.ПрофильИСЭСФ Тогда
						СтруктурнаяЕдиница = КлючЗначение.Ключ;
						ДанныеПоСтруктурнойЕдиницы = КлючЗначение.Значение;
						ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации = ДанныеПоСтруктурнойЕдиницы.ПарольИСЭСФ;
					КонецЕсли;
				КонецЕсли;
				ДанныеПрофиляИСЭСФ.Вставить("КлючВходаBase64", КлючЗначение.Значение.КлючВходаBase64);
				ДанныеПрофиляИСЭСФ.Вставить("ПарольВхода", КлючЗначение.Значение.ПарольВхода);
			КонецЦикла;
		Иначе
			Если ПустаяСтрока(ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации) Тогда
				ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации = КоллецияПаролей[ДанныеПрофиляИСЭСФ.ПользовательИСЭСФ.Ссылка];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивДанныхПрофилейИСЭСФ;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуПрофилейДляСинхронизации()
	
	// Запрос организован таким образом, чтобы сработал RLS.
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК СтруктурнаяЕдиница,
	|	Организации.Наименование
	|ПОМЕСТИТЬ СтруктурныеЕдиницы
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	| [ЗапросПоСтруктурнымЕдиницам]
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрофилиИСЭСФ.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ПрофилиИСЭСФ.Ссылка КАК ПрофильИСЭСФ,
	|	ПрофилиИСЭСФ.Владелец КАК ПользовательИСЭСФ
	|ПОМЕСТИТЬ ВТ_ПрофилиСинхронизации	
	|ИЗ
	|	Справочник.ПрофилиИСЭСФ КАК ПрофилиИСЭСФ	
	|ГДЕ
	|	НЕ ПрофилиИСЭСФ.ПометкаУдаления
	|	И ПрофилиИСЭСФ.ИспользоватьДляСинхронизации
	|	И ПрофилиИСЭСФ.СтруктурнаяЕдиница В
	|			(ВЫБРАТЬ
	|				СтруктурныеЕдиницы.СтруктурнаяЕдиница
	|			ИЗ
	|				СтруктурныеЕдиницы КАК СтруктурныеЕдиницы);
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрофилиСинхронизации.СтруктурнаяЕдиница,
	|	ПрофилиСинхронизации.ПрофильИСЭСФ,
	|	ПрофилиСинхронизации.ПользовательИСЭСФ,
	|	ЕСТЬNULL(ПараметрыМетодовИСЭСФ.ЗначениеПараметра, &ДатаПоУмолчанию) КАК ДатаНачалаСинхронизацииУведомлений
	|ИЗ
	|	ВТ_ПрофилиСинхронизации КАК ПрофилиСинхронизации
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыМетодовИСЭСФ КАК ПараметрыМетодовИСЭСФ
	|		ПО (ПрофилиСинхронизации.ПользовательИСЭСФ = ПараметрыМетодовИСЭСФ.ПользовательИСЭСФ
	|				И ПараметрыМетодовИСЭСФ.ИмяМетода = &ИмяМетода     // дата начала синхронизации
	|				И ПараметрыМетодовИСЭСФ.НаправлениеЭСФ = &Направление
	|				И ПараметрыМетодовИСЭСФ.ИмяПараметра = &ИмяПараметра)
	|
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПрофилиСинхронизации.ПользовательИСЭСФ.Ссылка
	|	АВТОУПОРЯДОЧИВАНИЕ";
	
	// Не все конфигурации поддерживают структурные единицы.
	Если ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
		ЗапросПоСтруктурнымЕдиницам = 
		"ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка,
		|	ПодразделенияОрганизаций.Наименование
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	ПодразделенияОрганизаций.ЯвляетсяСтруктурнымПодразделением";		
	Иначе
		ЗапросПоСтруктурнымЕдиницам = "";
	КонецЕсли;	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "[ЗапросПоСтруктурнымЕдиницам]", ЗапросПоСтруктурнымЕдиницам);
	Запрос.УстановитьПараметр("ИмяПараметра", "LASTEVENTDATE");
	
	
	Запрос.УстановитьПараметр("ИмяМетода",	"QUERYNOTIFICATIONUPDATES");	
	Запрос.УстановитьПараметр("Направление", Перечисления.НаправленияЭСФ.ПустаяСсылка());
	Запрос.УстановитьПараметр("ДатаПоУмолчанию", Дата(2024, 1, 1, 0, 0, 0));
	
	Выборка = Запрос.Выполнить().Выбрать();
	ПредыдущийПользователь = Неопределено;
	Пока Выборка.Следующий() Цикл
		Если Выборка.ПользовательИСЭСФ <> ПредыдущийПользователь Тогда
			СтрокаТаблицы = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
		КонецЕсли;
		ПредыдущийПользователь = Выборка.ПользовательИСЭСФ;
		//СтрокаТаблицы.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуПрофилейДляСинхронизации()
	МассивПрофилейИСЭСФ = Новый Массив;
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Если СтрокаТаблицы.Пометка Тогда
			МассивПрофилейИСЭСФ.Добавить(СтрокаТаблицы.ПрофильИСЭСФ);				
		КонецЕсли;
	КонецЦикла;
	Таблица.Очистить();
	ЗаполнитьТаблицуПрофилейДляСинхронизации();
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Если МассивПрофилейИСЭСФ.Найти(СтрокаТаблицы.ПрофильИСЭСФ)<>Неопределено Тогда
			СтрокаТаблицы.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;		
КонецПроцедуры

&НаКлиенте
// Открывает сессии с подписью для переданных данных с профилей ИСЭСФ.
//
// Параметры:
//  ДанныеПрофилейИСЭСФ - Массив или Соответствие, или Ссылка  на справочник ПрофилиИСЭСФ,
//   по которым(му) происходит открытие сессий.
//  ПараметрыОткрытияСессии - Структура - параметры для открытия сессии с подписью,
//   функция для получения параметров - ЭСФКлиентСервер.ПолучитьПараметрыОткрытияСессииСПодписьюПоУмолчанию().
//
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
//
Функция ОткрытьСессиюСПодписьюДляПрофилей(ДанныеПрофилейИСЭСФ,ПараметрыОткрытияСессии = Неопределено) Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();
	
	Возврат Контейнер.ОткрытьСессиюСПодписьюДляПрофилей(ДанныеПрофилейИСЭСФ,ПараметрыОткрытияСессии);
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = ЭСФКлиентСервер.ИмяСобытияСинхронизацияУведомленийИСЭСФ() Тогда
		ОбновитьТаблицуПрофилейДляСинхронизации(); // Обновление даты синхронизации по результататм работы события
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
		
КонецПроцедуры	

