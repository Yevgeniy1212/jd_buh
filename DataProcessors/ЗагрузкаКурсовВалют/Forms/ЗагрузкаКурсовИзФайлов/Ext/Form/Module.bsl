////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьТаблицуВалюты();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗагрузитьКурсы(Команда)
	
	Если НЕ УказанныВсеДанныеНеобходимыеДляЗагрузкиКурсовВалютИзФайлов() Тогда
		Возврат;	
	КонецЕсли;

	СообщитьНачатаЗагрузкаКурсов();
	
	МассивВалют = СоздатьМассивВалютДляКоторыхНеобходимоЗагрузитьКурсы();
	МассивФайлов = СоздатьМассивФайловИзКоторыхНеобходимоЗагрузитьКурсы();
	
	Результат = ЗагрузитьКурсыВРегистрКурсыВалют(МассивВалют, МассивФайлов);
	
	Если Результат.ВсеКурсыУспешноЗагружены Тогда
		СообщитьЗагрузкаКурсовУспешноЗавершена();
	Иначе
		СообщитьНеУдалосьЗагрузитьКурсыВалют(Результат.Ошибки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВалютыУстановитьФлажки(Команда)
	
	Для Каждого СтрокаТаблицыВалюты Из Валюты Цикл
		СтрокаТаблицыВалюты.Загружать = Истина;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютыСнятьФлажки(Команда)
	
	Для Каждого СтрокаТаблицыВалюты Из Валюты Цикл
		СтрокаТаблицыВалюты.Загружать = Ложь;	
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыУстановитьФлажки(Команда)
	
	Для Каждого СтрокаТаблицыФайлы Из Файлы Цикл
		СтрокаТаблицыФайлы.Загружать = Истина;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыСнятьФлажки(Команда)
	
	Для Каждого СтрокаТаблицыФайлы Из Файлы Цикл
		СтрокаТаблицыФайлы.Загружать = Ложь;	
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДатыКурсов(Команда)
	ОбновитьТаблицуВалюты();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКурсыИзИнтернета(Команда)
	ОткрытьФорму("Обработка.ЗагрузкаКурсовВалют.Форма.ЗагрузкаКурсовИзИнтернета");
КонецПроцедуры

&НаКлиенте
Процедура Подобрать(Команда)
	
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Ложь);
	ОткрытьФорму("Справочник.Валюты.ФормаВыбора", ПараметрыФормы, Элементы.Валюты);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ВАЛЮТЫ

&НаКлиенте
Процедура ВалютыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВалютыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВалютыОбработкаВыбора(Элемент, Валюта, СтандартнаяОбработка)
	
	Отбор = Новый Структура("Валюта", Валюта);
	МассивСтрок = Валюты.НайтиСтроки(Отбор);	
	
	Если МассивСтрок.Количество() = 0 Тогда
		
		СтрокаСпискаВалют = Валюты.Добавить();
		СтрокаСпискаВалют.Валюта = Валюта;
		СтрокаСпискаВалют.Загружать = Истина;
		
		ОбновитьТаблицуВалюты();
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ФАЙЛЫ

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	МассивИменФайлов = Новый Массив();	
	Если РаботаСФайламиСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		ФайлыВыбраны = ПоместитьФайлы(, МассивИменФайлов, , Истина, УникальныйИдентификатор);
	КонецЕсли;
	
	МассивФайлов = СоздатьМассивФайловКурсовВалют(МассивИменФайлов);
	
	Для Каждого Файл Из МассивФайлов Цикл
		
		СтрокаТаблицыФайлы = Файлы.Добавить();
		СтрокаТаблицыФайлы.Загружать  = ?(Файл.ЭтоКорректныйФайлКурсов, Истина, Ложь);
		СтрокаТаблицыФайлы.ИмяФайла   = Файл.ИмяФайла;
		СтрокаТаблицыФайлы.АдресФайла = Файл.АдресФайла;
		СтрокаТаблицыФайлы.ДатаКурса  = Файл.ДатаКурса;
		СтрокаТаблицыФайлы.Корректный = Файл.ЭтоКорректныйФайлКурсов;
		
	КонецЦикла;
	
	ЗаменитьПустыеДатыНадписьюФайлНеКорректен(Файлы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьДляФайловЗавершение(Результат, АдресФайла, ИмяФайла, ДополнительныеПараметры)  Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
		
	МассивСодержащийОдноИмяФайла = Новый Массив();
	Соответсиве = Новый ОписаниеПередаваемогоФайла(ИмяФайла, АдресФайла);
	МассивСодержащийОдноИмяФайла.Добавить(Соответсиве);
	
	МассивСодержащийОдинФайл = СоздатьМассивФайловКурсовВалют(МассивСодержащийОдноИмяФайла);
	Файл = МассивСодержащийОдинФайл.Получить(0);
	
	СтрокаТаблицыФайлы = Элементы.Файлы.ТекущиеДанные;
	СтрокаТаблицыФайлы.Загружать  = ?(Файл.ЭтоКорректныйФайлКурсов, Истина, Ложь);
	СтрокаТаблицыФайлы.ИмяФайла   = Файл.ИмяФайла;
	СтрокаТаблицыФайлы.АдресФайла = Файл.АдресФайла;
	СтрокаТаблицыФайлы.ДатаКурса  = Файл.ДатаКурса;
	СтрокаТаблицыФайлы.Корректный = Файл.ЭтоКорректныйФайлКурсов;
	
	ЗаменитьПустыеДатыНадписьюФайлНеКорректен(Файлы);
		
КонецПроцедуры

&НаКлиенте
Процедура ПутьДляФайловНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат = Ложь Тогда
		Возврат
	КонецЕсли;
	
	АдресФайла = "";
	ИмяФайла = "";

	ОповещениеЗавершение = Новый ОписаниеОповещения("ПутьДляФайловЗавершение", ЭтотОбъект, Новый Структура);	
	
	НачатьПомещениеФайла(ОповещениеЗавершение,АдресФайла, ИмяФайла, Истина, УникальныйИдентификатор);
		
КонецПроцедуры

&НаКлиенте
Процедура ФайлыФайлНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	     		
	ОписаниеОповещения = Новый ОписаниеОповещения("ПутьДляФайловНачалоВыбораЗавершение", ЭтотОбъект);
	ТекстПредупреждения = НСтр("ru='Не удалось подключить расширение работы с файлами!
		|Выбор каталога невозможен.'");
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(ОписаниеОповещения, , ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыФайлОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВалютыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ВалютыВалюта" Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, Элементы.Валюты.ТекущиеДанные.Валюта);
		
	ИначеЕсли Поле.Имя = "ВалютыДатаКурса" Тогда
		
		СтандартнаяОбработка = Ложь;
		Валюта = Элементы.Валюты.ТекущиеДанные.Валюта;
		Отбор = Новый Структура("Валюта", Валюта);
		ПараметрыФормы = Новый Структура("Отбор, Валюта", Отбор, Валюта);
		ОткрытьФорму("РегистрСведений.КурсыВалют.ФормаСписка", ПараметрыФормы);
		
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервереБезКонтекста
Функция СоздатьМассивФайловКурсовВалют(Знач МассивИменФайловКурсовВалют)
	
	МассивФайлов = Новый Массив();
	
	Для Каждого СоответствиеИмен Из МассивИменФайловКурсовВалют Цикл
		
		Файл = Новый Структура("АдресФайла, ИмяФайла, ЭтоКорректныйФайлКурсов, ДатаКурса");
			
		Файл.АдресФайла = СоответствиеИмен.Хранение;
		Файл.ИмяФайла = СоответствиеИмен.Имя;
		
		Файл.ДатаКурса = РаботаСКурсамиВалют.ПолучитьДатуИзФайлаКурсовВалют(Файл.АдресФайла);
		
		Если ЗначениеЗаполнено(Файл.ДатаКурса) Тогда
			Файл.ЭтоКорректныйФайлКурсов = Истина;
		Иначе
			Файл.ЭтоКорректныйФайлКурсов = Ложь;
		КонецЕсли;
		
		МассивФайлов.Добавить(Файл);
			
	КонецЦикла;
	
	Возврат МассивФайлов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуВалюты()
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИСТИНА КАК Загружать,
	|	Валюты.Ссылка КАК Валюта,
	|	КурсыВалютСрезПоследних.Период КАК ДатаКурса
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютСрезПоследних
	|		ПО Валюты.Ссылка = КурсыВалютСрезПоследних.Валюта
	|ГДЕ
	|	Валюты.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаКурса";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицыВалюты = Валюты.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыВалюты, Выборка);	
	КонецЦикла;
	
	ЗаменитьПустыеДатыНадписьюКурсОтсутствует(Валюты);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуВалюты()
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Валюты.Ссылка КАК Валюта,
	|	КурсыВалютСрезПоследних.Период КАК ДатаКурса
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютСрезПоследних
	|		ПО Валюты.Ссылка = КурсыВалютСрезПоследних.Валюта";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Отбор = Новый Структура("Валюта", Выборка.Валюта);
		МассивСтрокТаблицыВалюты = Валюты.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаТаблицыВалюты Из МассивСтрокТаблицыВалюты Цикл
			СтрокаТаблицыВалюты.ДатаКурса = Выборка.ДатаКурса;	
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаменитьПустыеДатыНадписьюКурсОтсутствует(Валюты);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаменитьПустыеДатыНадписьюКурсОтсутствует(Валюты)
	
	Для Каждого СтрокаТаблицыВалюты Из Валюты Цикл
		Если ПустаяСтрока(СтрокаТаблицыВалюты.ДатаКурса) Тогда
			СтрокаТаблицыВалюты.ДатаКурса = НСтр("ru = 'Курс отсутствует'");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаменитьПустыеДатыНадписьюФайлНеКорректен(Файлы)
	
	Для Каждого СтрокаТаблицыФайлы Из Файлы Цикл
		Если ПустаяСтрока(СтрокаТаблицыФайлы.ДатаКурса) Тогда
			СтрокаТаблицыФайлы.ДатаКурса = НСтр("ru = 'Файл не корректен'");	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция УказанныВсеДанныеНеобходимыеДляЗагрузкиКурсовВалютИзФайлов()
	
	УказанныВсеДанные = Истина;
	
	// Проверка 1. Выберите хотя бы одну валюту.
	
	МассивВалютДляЗагрузки = СоздатьМассивВалютДляКоторыхНеобходимоЗагрузитьКурсы();
	Если МассивВалютДляЗагрузки.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Выберите хотя бы одну валюту.'"),
			,
			"Валюты");
			
		УказанныВсеДанные = Ложь;
		
	КонецЕсли;
	
	// Проверка 2. Выберите хотя бы один файл.
	
	МассивФайловДляЗагрузки = СоздатьМассивФайловИзКоторыхНеобходимоЗагрузитьКурсы();
	Если МассивФайловДляЗагрузки.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Выберите хотя бы один файл.'"),
			,
			"Файлы");
			
		УказанныВсеДанные = Ложь;
		
	КонецЕсли;
	
	// Проверка 3. Невозможно загрузить курсы из некорректного файла.
	
	ПараметрыПоиска = Новый Структура("Загружать, Корректный", Истина, Ложь);	
	НекорректныеФайлыМассивСтрокТаблицы = Файлы.НайтиСтроки(ПараметрыПоиска);
	Для Каждого НекорректныйФайлСтрокаТаблицы Из НекорректныеФайлыМассивСтрокТаблицы Цикл
		
		Поле = "Файлы[%Индекс%].ИмяФайла";
		Индекс = Файлы.Индекс(НекорректныйФайлСтрокаТаблицы);
		Поле = СтрЗаменить(Поле, "%Индекс%", Индекс);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Невозможно загрузить курсы из некорректного файла.'"),
			,
			Поле);
			
		УказанныВсеДанные = Ложь;
	
	КонецЦикла;
	
	// Проверка 4. В списке уже выбран файл с курсами на %Дата%.
	
	МассивСтрокИмеющихОдинаковыеДаты = СоздатьМассивСтрокСодержащихЗагружаемыеФайлыИмеющиеОдинаковыеДаты();
	Для Каждого СтрокаТаблицыФайлы Из МассивСтрокИмеющихОдинаковыеДаты Цикл
		
		Поле = "Файлы[%Индекс%].ДатаКурса";
		Индекс = Файлы.Индекс(СтрокаТаблицыФайлы);
		Поле = СтрЗаменить(Поле, "%Индекс%", Индекс);
		
		ТекстСообщения = НСтр("ru = 'В списке уже выбран файл с курсами на %Дата%'");
		Дата = Формат(СтрокаТаблицыФайлы.ДатаКурса, "ДФ=dd.MM.yyyy");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Дата%", Дата); 
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,
			Поле);
			
		УказанныВсеДанные = Ложь;
		
	КонецЦикла;
	
	Возврат УказанныВсеДанные;	
	
КонецФункции

&НаКлиенте
Функция СоздатьМассивВалютДляКоторыхНеобходимоЗагрузитьКурсы()
	
	ВалютыДляЗагрузкиМассивСсылок = Новый Массив();
	
	ПараметрыПоиска = Новый Структура("Загружать", Истина);
	ВалютыДляЗагрузкиМассивСтрокТаблицы = Валюты.НайтиСтроки(ПараметрыПоиска);
		
	Для Каждого СтрокаТаблицы Из ВалютыДляЗагрузкиМассивСтрокТаблицы Цикл
		ВалютыДляЗагрузкиМассивСсылок.Добавить(СтрокаТаблицы.Валюта);	
	КонецЦикла;
	
	Возврат ВалютыДляЗагрузкиМассивСсылок;
	
КонецФункции

&НаКлиенте
Функция СоздатьМассивФайловИзКоторыхНеобходимоЗагрузитьКурсы()
	
	ФайлыДляЗагрузки = Новый Массив();
	
	ПараметрыПоиска = Новый Структура("Загружать", Истина);
	ФайлыДляЗагрузкиМассивСтрокТаблицы = Файлы.НайтиСтроки(ПараметрыПоиска);
	
	Для Каждого СтрокаТаблицы Из ФайлыДляЗагрузкиМассивСтрокТаблицы Цикл
		Файл = Новый ОписаниеПередаваемогоФайла(СтрокаТаблицы.ИмяФайла, СтрокаТаблицы.АдресФайла);
		ФайлыДляЗагрузки.Добавить(Файл);	
	КонецЦикла;
	
	Возврат ФайлыДляЗагрузки;
	
КонецФункции

&НаКлиенте
Функция СоздатьМассивСтрокСодержащихЗагружаемыеФайлыИмеющиеОдинаковыеДаты()
	
	СтрокиСодержащиеДублирующиесяДаты = Новый Массив();
	
	// Шаг 1. Получение массива корректных загружаемых файлов.
	
	ПараметрыПоиска = Новый Структура("Загружать, Корректный", Истина, Истина);	
	МассивСтрокЗагружаемыеФайлы = Файлы.НайтиСтроки(ПараметрыПоиска);
	
	// Шаг 2. Сортировка массива по возрастанию даты курса.
	
	Для ИндексТекущегоЭлемента = 0 По МассивСтрокЗагружаемыеФайлы.ВГраница() Цикл
		Для ИндексСравниваемогоЭлемента = ИндексТекущегоЭлемента + 1 По МассивСтрокЗагружаемыеФайлы.ВГраница() Цикл
			Если МассивСтрокЗагружаемыеФайлы[ИндексТекущегоЭлемента].ДатаКурса > МассивСтрокЗагружаемыеФайлы[ИндексСравниваемогоЭлемента].ДатаКурса Тогда
				Буфер = МассивСтрокЗагружаемыеФайлы[ИндексТекущегоЭлемента];
				МассивСтрокЗагружаемыеФайлы[ИндексТекущегоЭлемента] = МассивСтрокЗагружаемыеФайлы[ИндексСравниваемогоЭлемента];
				МассивСтрокЗагружаемыеФайлы[ИндексСравниваемогоЭлемента] = Буфер;
			КонецЕсли;
		КонецЦикла;		
	КонецЦикла;
	
	// Шаг 3. Поиск строк, которые имеют одинаковую дату курса
	
	МассивДублирующиесяДаты = Новый Массив();	
	
	Для Индекс = 1 По МассивСтрокЗагружаемыеФайлы.ВГраница() Цикл	
		
		Если МассивСтрокЗагружаемыеФайлы[Индекс].ДатаКурса = МассивСтрокЗагружаемыеФайлы[Индекс - 1].ДатаКурса Тогда
			
			ДублирующаясяДата = МассивСтрокЗагружаемыеФайлы[Индекс].ДатаКурса; 
			
			МассивУжеСодержитДату = Ложь;
			
			Для Каждого Дата Из МассивДублирующиесяДаты Цикл
				Если Дата = ДублирующаясяДата Тогда
					МассивУжеСодержитДату = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;
			
			Если НЕ МассивУжеСодержитДату Тогда
				МассивДублирующиесяДаты.Добавить(ДублирующаясяДата);	
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
		
	Для Каждого ДублирующаясяДата Из МассивДублирующиесяДаты Цикл
		
		Для Каждого СтрокаТаблицыВалюты Из МассивСтрокЗагружаемыеФайлы Цикл
			Если СтрокаТаблицыВалюты.ДатаКурса = ДублирующаясяДата Тогда
				СтрокиСодержащиеДублирующиесяДаты.Добавить(СтрокаТаблицыВалюты);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СтрокиСодержащиеДублирующиесяДаты;
	
КонецФункции

&НаКлиенте
Функция СообщитьНачатаЗагрузкаКурсов()
	
	ТекстСообщения = НСтр("ru='Выполняется загрузка курсов валют...'");
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
	#Иначе
		Состояние(ТекстСообщения);
	#КонецЕсли
	
КонецФункции

&НаСервере
Функция ЗагрузитьКурсыВРегистрКурсыВалют(Знач МассивВалют, Знач МассивФайлов);
	
	ЗначениеТаймера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	Результат = РаботаСКурсамиВалют.ЗагрузитьКурсыИзФайлов(МассивВалют, МассивФайлов);
	
	Если Результат.ВсеКурсыУспешноЗагружены Тогда
		ОбновитьТаблицуВалюты();		
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени("Обработка ""Загрузка курсов валют"" (загрузка из файла)", ЗначениеТаймера);
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

 &НаКлиенте
Функция СообщитьЗагрузкаКурсовУспешноЗавершена()
	
	ТекстСообщения = НСтр("ru='Курсы валют успешно загружены'");

	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	#Иначе
		ПоказатьПредупреждение(, ТекстСообщения);
	#КонецЕсли
	
КонецФункции

 &НаКлиенте
Функция СообщитьНеУдалосьЗагрузитьКурсыВалют(Знач Ошибки)
		
	ТекстСообщения = НСтр("ru='Не удалось загрузить курсы валют!'");
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
		
		Для Каждого Ошибка Из Ошибки Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибка.Значение + Символы.ПС);				
		КонецЦикла;
		
	#Иначе
		
		Для Каждого Ошибка Из Ошибки Цикл
			
			ПараметрыОтбора = Новый Структура("АдресФайла", Ошибка.Ключ.Хранение);
			МассивСтрокТаблицыФайлы = Файлы.НайтиСтроки(ПараметрыОтбора);
			
			Для Каждого СтрокаТаблицыФайлы Из МассивСтрокТаблицыФайлы Цикл
				
				Поле = "Файлы[" + Файлы.Индекс(СтрокаТаблицыФайлы) + "].ИмяФайла";
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Ошибка.Значение,
					,
					Поле);
					
			КонецЦикла;
			
		КонецЦикла;
		
		ПоказатьПредупреждение(, ТекстСообщения);
		
	#КонецЕсли
	
КонецФункции
