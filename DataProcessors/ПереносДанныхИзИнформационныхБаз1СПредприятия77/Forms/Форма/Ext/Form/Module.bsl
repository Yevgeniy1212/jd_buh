#Область ПеременныеФормы

// Переменная содержит COMОбъект, подключения к 7.7, инициализируется методом ПодключитьсяКИБ.
// Если COMОбъект еще не создан или его не удалось создать, то переменная содержит Неопределено.
&НаКлиенте
Перем v7;

// Массив содержит объекты организаций из 7.7.
// Количество и состав элементов массива совпадает с ТаблицаОрганизации. 
// Для связи МассивОрганизаций77 и ТаблицаОрганизации используется колонка ИндексМассива.
&НаКлиенте
Перем МассивОрганизаций77;

// Имена служебных файлов на клиенте, необходимых при выгрузке из ИБ.
// Переменная заполняется в процедуре ЗаполнитьПеременнуюСлужебныеФайлыИБ().
&НаКлиенте
Перем СлужебныеФайлыИБ;

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоБазоваяВерсияКонфигурации = СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	
	// Установка значений по умолчанию.
	ВариантПереноса = ВариантПереноса_Справочники();
	ПериодНачало = НачалоГода(ТекущаяДата());
	ПериодКонец = НачалоМесяца(ТекущаяДата());
	                             
	СкрытьЗакладкиСтраниц();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьПредставлениеПериода();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	УдалитьСлужебныеФайлыИБ();
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

#Область СтраницаНачало

#Область СтраницаНачалоИБ

&НаКлиенте
Процедура ГиперссылкаЗагрузкаИБНажатие(Элемент)
	ЗагрузкаИБНажатие();
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЗагрузкаИБНажатие(Элемент)
	ЗагрузкаИБНажатие();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИБНажатие()
	
	Текст = "";
	Если ДоступнаЗагрузкаИзИБ(Текст) Тогда
		ПерейтиНаСтраницу(Элементы.Шапка_ИББаза);
	Иначе
		ПоказатьПредупреждение(, Текст);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаНачалоФайл

&НаКлиенте
Процедура ГиперссылкаЗагрузкаФайлНажатие(Элемент)
	ЗагрузкаФайлНажатие();
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЗагрузкаФайлНажатие(Элемент)
	ЗагрузкаФайлНажатие();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаФайлНажатие()
	ПерейтиНаСтраницу(Элементы.Шапка_ФайлВыбор);	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СтраницаИБНастройка

&НаКлиенте
Процедура ВариантПереносаПриИзменении(Элемент)
	ОбновитьПредставлениеПериода();
КонецПроцедуры

#КонецОбласти

#Область СтраницаФайлВыбор

&НаКлиенте
Процедура ПолноеИмяФайлаИз77НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВыбораФайла", ЭтаФорма);
	НачатьПомещениеФайла(ОписаниеОповещения, Файл_АдресФайла, Файл_ПолноеИмя, Истина, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораФайла(ФайлВыбран, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт

	Если НЕ ФайлВыбран Тогда
		Возврат;
	КонецЕсли;
	
	Файл_АдресФайла = Адрес;
	Файл_ПолноеИмя = ВыбранноеИмяФайла;
	
	Сведения = СведенияОФайлеВыгруженномИз77(Файл_АдресФайла);
	
	Если ТипЗнч(Сведения) = Тип("Структура") Тогда
		
		// Заполнить сведения о файле.
		Для Каждого ЭлементСведений Из Сведения Цикл
			ЭтаФорма[ЭлементСведений.Ключ] = ЭлементСведений.Значение;
		КонецЦикла;
		
		// Необходимо для корректного проведения документов,
		// т.к. они проводятся начиная с ПериодНачало.
		ЭтаФорма.ПериодНачало = Файл_ПериодНачало;
		ЭтаФорма.ПериодКонец = Файл_ПериодКонец;
		
	Иначе // ТипЗнч(Сведения) = Тип("Строка")
		      
		ОчиститьСведенияОФайлеИз77();		
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось загрузить данные из выбранного файла.'"));		
		Сообщить(НСтр("ru = 'При загрузке данных из выбранного файла возникла ошибка:'") + Символы.ПС + Сведения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолноеИмяФайлаИз77Очистка(Элемент, СтандартнаяОбработка)
	
	ОчиститьСведенияОФайлеИз77();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСведенияОФайлеИз77()
	
	Файл_АдресФайла = Неопределено;
	Файл_ДатаВыгрузки = Неопределено;
	Файл_Конфигурация = Неопределено;
	Файл_НомерРелиза = Неопределено;
	Файл_ОрганизацияНаименование = Неопределено;
	Файл_ОрганизацияКод = Неопределено;
	Файл_ПериодКонец = Неопределено;
	Файл_ПериодНачало = Неопределено;
	Файл_ПолноеИмя = Неопределено;	
	
	// Необходимо для корректного проведения документов,
	// т.к. они проводятся начиная с ПериодНачало.
	ЭтаФорма.ПериодНачало = Неопределено;
	ЭтаФорма.ПериодКонец = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦ ФОРМЫ

#Область ОбработчикиСобытийТаблицФормы

#Область ТаблицаИБ

&НаКлиенте
Процедура ТаблицаИБПометкаПриИзменении(Элемент)
	
	// Пометку можно устанавливать только у одной ИБ.
	ТекущаяСтрокаТаблицыИБ = Элементы.ТаблицаИБ.ТекущиеДанные;	
	Для Каждого СтрокаТаблицыИБ Из ТаблицаИБ Цикл
		Если СтрокаТаблицыИБ <> ТекущаяСтрокаТаблицыИБ Тогда
			СтрокаТаблицыИБ.Пометка = Ложь;	
		КонецЕсли;
	КонецЦикла;
	
	// Выбрана новая ИБ, к ней нужно проверить подключение.
	v7 = Неопределено;
	Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.ПроверкаНачало;	
	Элементы.ИББаза_ПодключитьсяКИБ.КнопкаПоУмолчанию = Истина;	
	
КонецПроцедуры

#КонецОбласти

#Область ТаблицаОрганизации

&НаКлиенте
Процедура ТаблицаОрганизацииПометкаПриИзменении(Элемент)
	
	// Пометку можно устанавливать только у одной организации.
	ТекущаяСтрокаТаблицыОрганизации = Элементы.ТаблицаОрганизации.ТекущиеДанные;	
	
	Для Каждого СтрокаТаблицыОрганизации Из ТаблицаОрганизации Цикл
		
		Если СтрокаТаблицыОрганизации <> ТекущаяСтрокаТаблицыОрганизации Тогда
			СтрокаТаблицыОрганизации.Пометка = Ложь;	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКоманд

#Область ОбработчикиКомандИБ

&НаКлиенте
Процедура ИББаза_ПодключитьсяКИБ(Команда)
	
	// Иногда проверка занимает много времени.
	// Пока идет проверка форма не изменяется.
	// Данный подход используется, чтобы сделать на время проверки текущей страницу ИдетПроверка.
	Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.ПроверкаВыполняется;	
	ПодключитьОбработчикОжидания("ПодключитьсяКИБ", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьсяКИБ()
		
	ВыбраннаяИБ = ВыбраннаяИБ(ЭтаФорма);
	
	Если ВыбраннаяИБ <> Неопределено Тогда
		v7 = НовоеПодключениеКИБ(ВыбраннаяИБ);
		УстановитьТекущуюСтраницуПроверкиПодключения(v7);
	Иначе
		ПоказатьСообщениеВыберитеИБ();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИББаза_Далее(Команда)
	
	// Иногда проверка занимает много времени.
	// Пока идет проверка форма не изменяется.
	// Данный подход используется, чтобы сделать на время проверки текущей страницу ИдетПроверка.
	Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.ПроверкаВыполняется;	
	ПодключитьОбработчикОжидания("ИББаза_ДалееОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИББаза_ДалееОбработчикОжидания()	
	ПерейтиНаСтраницу(Элементы.Шапка_ИБНастройка);
КонецПроцедуры

&НаКлиенте
Процедура ИБНастройка_Далее(Команда)
	ПерейтиНаСтраницу(Элементы.Шапка_ИБПрогресс);
КонецПроцедуры

&НаКлиенте
Процедура ПериодУменьшить(Команда)
	УменьшитьПериод();
КонецПроцедуры

&НаКлиенте
Процедура ПериодУвеличить(Команда)
	УвеличитьПериод();
КонецПроцедуры

&НаКлиенте
Процедура ИБПрогресс_Завершить(Команда)
	ЭтаФорма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ФайлПрогресс_Завершить(Команда)
	ЭтаФорма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ИББаза_Назад(Команда)
	
	ПерейтиНаСтраницу(Элементы.Шапка_Начало);
	
КонецПроцедуры

&НаКлиенте
Процедура ИБНастройка_Назад(Команда)
	
	ПерейтиНаСтраницу(Элементы.Шапка_ИББаза);
	
КонецПроцедуры

&НаКлиенте
Процедура ИБПрогресс_Назад(Команда)
	
	ПерейтиНаСтраницу(Элементы.Шапка_ИБНастройка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИБНастройка_СравнитьДанные(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаНачала", ПериодНачало);
	ПараметрыФормы.Вставить("ДатаОкончания", ПериодКонец);
	
	
	СтрокаТаблицыОрганизации = ВыбраннаяОрганизация(ЭтаФорма);
	Если СтрокаТаблицыОрганизации <> Неопределено Тогда
		КодОрганизации77 = СтрокаТаблицыОрганизации.Код;
		Организация8 = Организация8(КодОрганизации77, Ложь);
		Если Организация8 <> Неопределено Тогда
			ПараметрыФормы.Вставить("Организация", Организация8);
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму(
		"Обработка.ПереносДанныхИзИнформационныхБаз1СПредприятия77.Форма.СравнениеДанных",
		ПараметрыФормы,
		ЭтаФорма,
		1);
	
КонецПроцедуры

&НаКлиенте
Процедура ИБПрогресс_Ошибки(Команда)
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресТаблицыОшибок", АдресТаблицыОшибок());
	
	ОткрытьФорму("Обработка.ПереносДанныхИзИнформационныхБаз1СПредприятия77.Форма.Ошибки", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФайл

&НаКлиенте
Процедура ФайлВыбор_ЗагрузитьИзФайла(Команда)
	
	ПерейтиНаСтраницу(Элементы.Шапка_ФайлПрогресс);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлВыбор_Назад(Команда)
	ПерейтиНаСтраницу(Элементы.Шапка_Начало);
КонецПроцедуры

&НаКлиенте
Процедура ФайлПрогресс_Назад(Команда)
	
	// Если пользователь изменил файл и хочет повторно загрузить данные из него,
	// то необходимо повторно выбрать этото файл.
	ОчиститьСведенияОФайлеИз77();
	
	ПерейтиНаСтраницу(Элементы.Шапка_ФайлВыбор);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлПрогресс_Ошибки(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресТаблицыОшибок", АдресТаблицыОшибок());
	
	ОткрытьФорму("Обработка.ПереносДанныхИзИнформационныхБаз1СПредприятия77.Форма.Ошибки", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

#Область ПереходПоСтраницамШапки

&НаКлиенте
Процедура ПерейтиНаСтраницу(НоваяСтраницаШапки)
	
	СтараяСтраницаШапки = Элементы.Шапка.ТекущаяСтраница;
	
	// Выполнение индивидуальных дополнительных действий перед изменением страницы.
	Отказ = Ложь;
	Если НоваяСтраницаШапки = Элементы.Шапка_ИББаза Тогда
		ПередПереходомНаСтраницуШапка_ИББаза(Отказ);
	ИначеЕсли НоваяСтраницаШапки = Элементы.Шапка_ИБНастройка Тогда
		ПередПереходомНаСтраницуШапка_ИБНастройка(Отказ);
	ИначеЕсли НоваяСтраницаШапки = Элементы.Шапка_ИБПрогресс Тогда	
		ПередПереходомНаСтраницуШапка_ИБПрогресс(Отказ);
	ИначеЕсли НоваяСтраницаШапки = Элементы.Шапка_ФайлПрогресс Тогда
		ПередПереходомНаСтраницуШапка_ФайлПрогресс(Отказ);
	КонецЕсли;
	
	// Переход на страницу не будет выполнен.
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Изменение текущей страницы в Шапке и Подвале.
	ИмяСтраницыБезПрефикса = СтрЗаменить(НоваяСтраницаШапки.Имя, "Шапка_", "");	
	Элементы.Шапка.ТекущаяСтраница = Элементы["Шапка_" + ИмяСтраницыБезПрефикса];
	Элементы.Подвал.ТекущаяСтраница = Элементы["Подвал_" + ИмяСтраницыБезПрефикса];
	
	// Выполнение индивидуальных дополнительных действий после изменения страницы.
	Если НоваяСтраницаШапки = Элементы.Шапка_ИБПрогресс Тогда
		ПослеПереходаНаСтраницуШапка_ИБПрогресс();
	ИначеЕсли НоваяСтраницаШапки = Элементы.Шапка_ИББаза Тогда
		ПослеПереходаНаСтраницуШапка_ИББаза();		
	ИначеЕсли НоваяСтраницаШапки = Элементы.Шапка_ФайлВыбор Тогда
		ПослеПереходаНаСтраницуШапка_ФайлВыбор();
	ИначеЕсли НоваяСтраницаШапки = Элементы.Шапка_ФайлПрогресс Тогда
		ПослеПереходаНаСтраницуШапка_ФайлПрогресс();
	ИначеЕсли НоваяСтраницаШапки = Элементы.Шапка_ИБНастройка Тогда
		ПослеПереходаНаСтраницуШапка_ИБНастройка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередПереходомНаСтраницуШапка_ИББаза(Отказ)
	Если ТаблицаИБ.Количество() = 0 Тогда
		ЗаполнитьРеквизитТаблицаИБ();
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ПослеПереходаНаСтраницуШапка_ИББаза()
	Элементы.ИББаза_ПодключитьсяКИБ.КнопкаПоУмолчанию = Истина;
	ЗаполнитьПеременнуюСлужебныеФайлыИБ();
КонецПроцедуры

&НаКлиенте
Процедура ПередПереходомНаСтраницуШапка_ИБНастройка(Отказ)
	
	// Для перехода на страницу Шапка_ИБНастройка нужно, чтобы была выбрана ИБ 7.7.
	ВыбраннаяИБ = ВыбраннаяИБ(ЭтаФорма);
	Если ВыбраннаяИБ = Неопределено Тогда
		ПоказатьСообщениеВыберитеИБ();
		Отказ = Истина;
		Возврат;
	КонецЕсли;		
	
	// Для перехода на страницу Шапка_ИБНастройка нужно подключение к 7.7.
	Если v7 = Неопределено Тогда			
		
		v7 = НовоеПодключениеКИБ(ВыбраннаяИБ);			
		УстановитьТекущуюСтраницуПроверкиПодключения(v7);
		
		Если v7 = Неопределено Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьРеквизитТаблицаОрганизации();
	
	// Если в ИБ только одна организация, то сделать ее выбранной.
	Если ТаблицаОрганизации.Количество() = 1 Тогда
		ТаблицаОрганизации[0].Пометка = Истина;
	КонецЕсли;
	
	// Если сначала была попытка загрузить из файла, а затем начали загружать из ИБ,
	// то ПериодНачало и ПериодКонец будут пустыми, а они должны быть в текущим году.
	Если Элементы.Шапка.ТекущаяСтраница = Элементы.Шапка_ИББаза Тогда
		ПериодНачало = НачалоГода(ТекущаяДата());
		ПериодКонец = НачалоМесяца(ТекущаяДата());	
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПослеПереходаНаСтраницуШапка_ИБНастройка()	
	Элементы.ИБНастройка_ЗагрузитьИзИБ.КнопкаПоУмолчанию = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПередПереходомНаСтраницуШапка_ИБПрогресс(Отказ)
		
	//////////////////////////////////////////////////////////////////////////////
	// Проверить, что организация выбрана.
	
	Организация = ВыбраннаяОрганизация(ЭтаФорма);	
	Если Организация = Неопределено Тогда
		
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Выберите организацию по которой будут выгружаться данные из 1С:Предприятие 7.7.'");
		Сообщение.Поле = "ТаблицаОрганизации";
		Сообщение.Сообщить();		
		
	КонецЕсли;
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Проверить заполнение поля ВыполнениеРабот.
	
	Если ПустаяСтрока(ВыполнениеРабот) Тогда
		
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Укажите в какой документ необходимо переносить документ ""Выполнение работ"".'");
		Сообщение.Поле = "ВыполнениеРабот";
		Сообщение.Сообщить();		
		
	КонецЕсли;	
	
КонецПроцедуры
&НаКлиенте
Процедура ПослеПереходаНаСтраницуШапка_ИБПрогресс()
	
	ОчиститьСообщения();
	
	Элементы.ИБПрогресс_Завершить.КнопкаПоУмолчанию = Истина;
	
	// Если процедура вызывается через ВыполнитьОбработкуОповещения,
	// то все изменения интерфейса, которые в ней происходят сразу же отображаются пользователю.
	
	// Если бы процедура была вызвана на прямую ИмяПроцедуры(),
	// то все изменения интерфейста применились бы только после завершения выполнения процедуры.
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПеренестиДанныеИзИБ", ЭтаФорма);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПереходаНаСтраницуШапка_ФайлВыбор()
	Элементы.ФайлВыбор_ЗагрузитьИзФайла.КнопкаПоУмолчанию = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура ПередПереходомНаСтраницуШапка_ФайлПрогресс(Отказ)
	
	Если ПустаяСтрока(Файл_ПолноеИмя) Тогда
		
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Выберите файл для загрузки.'");
		Сообщение.Поле = "Файл_ПолноеИмя";
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПослеПереходаНаСтраницуШапка_ФайлПрогресс()
	
	Элементы.ФайлПрогресс_Завершить.КнопкаПоУмолчанию = Истина;
	
	ПеренестиДанныеИзФайла();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеИБ

#Область Прочие

&НаКлиенте
Функция ДоступнаЗагрузкаИзИБ(Текст)
	
	ВозможноЗагрузить = Истина;
	Текст = "";
	
	СистемнаяИнформацияПользователя = Новый СистемнаяИнформация;
	
	Если ЭтоБазоваяВерсияКонфигурации Тогда
		
		ВозможноЗагрузить = Ложь;
		
		Текст = НСтр(
		"ru = 'Вы используете Базовую версию конфигурации.
		|Команда ""Загрузить данные из информационной базы"" недоступна в Базовой версии конфигурации.
		|В Базовой версии конфигурации доступна команда ""Загрузить данные из файла"".'");		
		
	ИначеЕсли ЗначениеЗаполнено(СистемнаяИнформацияПользователя.ИнформацияПрограммыПросмотра) Тогда
		
		ВозможноЗагрузить = Ложь;
		
		Текст = НСтр(
		"ru = 'Команда ""Загрузить данные из информационной базы"" недоступна в веб-клиенте.
		|В веб-клиенте доступна только команда ""Загрузить данные из файла"".
		|
		|Для использования команды ""Загрузить данные из информационной базы""
		|воспользуйтесь тонким клиентом под управлением Windows.'");		
		
	КонецЕсли;
	
	Возврат ВозможноЗагрузить;
	
КонецФункции

&НаКлиенте
Функция НовоеПодключениеКИБ(ВыбраннаяИБ)
	
	Коннектор = Неопределено;
	
	#Если НЕ МобильныйКлиент Тогда 
		
	Если ВыбраннаяИБ <> Неопределено Тогда
		
		/////////////////////////////////////////////////////////////////////////////
		// Скопировать в каталог ИБ 7.7 служебный файл V7PLUS.DLL.
	
		Попытка
			
			Файл = Новый Файл(ВыбраннаяИБ.Путь + "V7PLUS.DLL");
			
			Если НЕ Файл.Существует() Тогда
				ДвоичныеДанные = Новый ДвоичныеДанные(СлужебныеФайлыИБ["V7Plus.dll"]);
				ДвоичныеДанные.Записать(Файл.ПолноеИмя);
			КонецЕсли;
			
		Исключение
			
			ТекстСообщения = НСтр(
			"ru = 'Не удалось записать служебный файл ""V7PLUS.DLL"" в каталог базы 1С:Предприятие 7.7:
			|[Каталог].'");
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Каталог]", ВыбраннаяИБ.Путь);
			
			Сообщить(ТекстСообщения);
			
		КонецПопытки;
		
		
		
		/////////////////////////////////////////////////////////////////////////////
		// Установить соединение с ИБ 7.7.
		
		Попытка
			
			Коннектор = Новый COMObject("V1CEnterprise.Application"); 
			
		Исключение
			
			ТекстОшибки = НСтр(
			"ru = 'Не удалось подключиться к информационной базе 1С:Предприятие 7.7 по причине:
			|[Причина]'");
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "[Причина]", ПодробноеПредставлениеОшибки);
			
			Сообщить(ТекстОшибки);           
			
			Коннектор = Неопределено;
			Возврат Коннектор;
			
		КонецПопытки;
		
		ТекстПояснения = НСтр("ru = 'Если окно входа в 1С:Предприятие 7.7 еще не появилось, то нажмите на клаваитуре Alt+Tab.'");
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Подключение к 1С:Предприятие 7.7'"), 
			, 
			ТекстПояснения,
			БиблиотекаКартинок.Предупреждение32);
			
		Открыта = Коннектор.Initialize(Коннектор.RMTrade, "/D""" + ВыбраннаяИБ.Путь + """ /M ", "NO_SPLASH_SHOW");
		
		Если НЕ Открыта Тогда
			
			Коннектор = Неопределено;	
			Сообщить(НСтр("ru = 'Не удалось подключиться к информационной базе 1С:Предприятие 7.7.'"));
			
		КонецЕсли;
		
	КонецЕсли;  
	
	#КонецЕсли
	
	Возврат Коннектор;
	
КонецФункции

&НаКлиенте
Процедура УстановитьТекущуюСтраницуПроверкиПодключения(Коннектор)
	
	Если Коннектор = Неопределено Тогда
		Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.ПроверкаОшибка;
		Элементы.ИББаза_ПодключитьсяКИБ.КнопкаПоУмолчанию = Истина;
	Иначе
		Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.ПроверкаУспешно;
		Элементы.ИББаза_Далее.КнопкаПоУмолчанию = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьВременныйФайл(ПолноеИмяФайла)
	
	Попытка
		УдалитьФайлы(ПолноеИмяФайла);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		// Ничего не делаем, т.к. временный файл больше не нужен.
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область РеквизитТаблицаИБ

&НаКлиенте
Процедура ЗаполнитьРеквизитТаблицаИБ()
	
	ТаблицаИБ.Очистить(); 
	
	#Если НЕ МобильныйКлиент Тогда
	
	Попытка
		
		ScrptCtrl = Новый COMObject("MSScriptControl.ScriptControl");
		ScrptCtrl.Language = "vbscript";
		ScrptCtrl.AddCode("
		|Function Get1CV77Titles()
		|	const HKEY_CURRENT_USER = &H80000001
		|	Set oReg=GetObject(""winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv"")
		|	strKeyPath = ""Software\1C\1Cv7\7.7\Titles""
		|	oReg.EnumValues HKEY_CURRENT_USER, strKeyPath, arrValues
		|	strInfo=vbNullString
		|   Get1CV77Titles = strInfo
		|	On Error Resume Next
		|	For i = LBound(arrValues) To UBound(arrValues)
		|		call oReg.GetStringValue(HKEY_CURRENT_USER,strKeyPath,arrValues(i),Value)
		|		strInfo=strInfo & arrValues(i) & vbTab & Value & vbCrLf
		|	Next		
		| 	Get1CV77Titles = strInfo
		|End Function
		|");
		
		СтрокаТаблицаИБ = СокрЛП(ScrptCtrl.Run("Get1CV77Titles"));
		
	Исключение
		
		ТекстОшибки = НСтр(
		"ru = 'Не удалось заполнить список информационных баз 1С:Предприятия 7.7 по причине:
		|[Причина]'");
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "[Причина]", СокрЛП(ПодробноеПредставлениеОшибки));
		
		Сообщить(ТекстОшибки);
		
		Возврат;
		
	КонецПопытки;
	
	Если НЕ ПустаяСтрока(СтрокаТаблицаИБ) Тогда
		ЗаполнитьРеквизитТаблицаИБНаСервере(СтрокаТаблицаИБ);	
	КонецЕсли;
	
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитТаблицаИБНаСервере(СтрокаТаблицаИБ)
	
	ТабЗначИБ = Новый ТаблицаЗначений;
	ТабЗначИБ.Колонки.Добавить("Имя");
	ТабЗначИБ.Колонки.Добавить("Путь");
	ТабЗначИБ.Колонки.Добавить("Пометка");
	
	Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаТаблицаИБ) Цикл
		
		НоваяСтрокаТабЗначИБ = ТабЗначИБ.Добавить();
		
		СтрокаИБ = СтрПолучитьСтроку(СтрокаТаблицаИБ, НомерСтроки);
		ПозицияРазделителя = Найти(СтрокаИБ, Символы.Таб);
		
		НоваяСтрокаТабЗначИБ.Путь = Лев(СтрокаИБ, ПозицияРазделителя-1);
		НоваяСтрокаТабЗначИБ.Имя = Прав(СтрокаИБ, СтрДлина(СтрокаИБ)-ПозицияРазделителя);
		
	КонецЦикла;
	
	ТабЗначИБ.Сортировать("Имя");
	
	Если ТабЗначИБ.Количество() = 1 Тогда
		ТабЗначИБ[0].Пометка = Истина;
	КонецЕсли;
	
	ЗначениеВДанныеФормы(ТабЗначИБ, ТаблицаИБ);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВыбраннаяИБ(Знач Форма)
	
	ВыбраннаяИБ = Неопределено;
	
	Для Каждого СтрокаТаблицаИБ Из Форма.ТаблицаИБ Цикл		
		Если СтрокаТаблицаИБ.Пометка Тогда
			ВыбраннаяИБ = СтрокаТаблицаИБ;
			Прервать;
		КонецЕсли;		
	КонецЦикла;
	
	Возврат ВыбраннаяИБ;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСообщениеВыберитеИБ()
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = НСтр("ru = 'Выберите информационную базу 1С:Предприятия 7.7 из которой будут выгружаться данные.'");
	Сообщение.Поле = "ТаблицаИБ";
	Сообщение.Сообщить();
	
	// Если ИБ 7.7 не выбрана, то страница проверки должна быть "ПроверкаНачало".
	Элементы.СтраницыПроверкаПодключения.ТекущаяСтраница = Элементы.ПроверкаНачало;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСообщениеНеУдалосьНайтиОрганизацию77(Организация8)
	
	Сообщение = Новый СообщениеПользователю;
	
	Сообщение.Текст = НСтр(
	"ru = 'Не удалось найти организацию ""[Организация]"" в базе 1С:Предприятие 7.7.
	|Поиск выполнялся по коду: ""[Код]"".'");
	
	Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "[Организация]", Организация8); 
	Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "[Код]", КодОрганизации77(Организация8));
	
	Сообщение.Поле = "ТаблицаОрганизации";
	Сообщение.Сообщить();
		
КонецПроцедуры


#КонецОбласти

#Область РеквизитТаблицаОрганизации

&НаКлиенте
Процедура ЗаполнитьРеквизитТаблицаОрганизации()
	
	ТаблицаОрганизации.Очистить();
	МассивОрганизаций77.Очистить();
	
	Попытка
		
		СправочникОрганизации = v7.CreateObject("Справочник.Организации");
	  	СправочникОрганизации.ВыбратьЭлементы();
		
		ИндексМассива = 0;
		
		Пока СправочникОрганизации.ПолучитьЭлемент() = 1 Цикл
			
			НоваяСтрока = ТаблицаОрганизации.Добавить();
			НоваяСтрока.Наименование = СправочникОрганизации.Наименование;
			НоваяСтрока.Код = СправочникОрганизации.Код;
			НоваяСтрока.ИндексМассива = ИндексМассива;
			
			МассивОрганизаций77.Добавить(СправочникОрганизации.ТекущийЭлемент());
			
			ИндексМассива = ИндексМассива + 1;
			
		КонецЦикла;
		
	Исключение
		
		ТаблицаОрганизации.Очистить();
		МассивОрганизаций77.Очистить();
		
		ТекстОшибки = НСтр(
		"ru = 'Не удалось заполнить список информационных баз 1С:Предприятия 7.7 по причине:
		|[Причина]'");
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "[Причина]", СокрЛП(ПодробноеПредставлениеОшибки));
		
		Сообщить(ТекстОшибки);
		
	КонецПопытки;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВыбраннаяОрганизация(Знач Форма)
		
	ВыбраннаяОрганизация = Неопределено;
	
	Для Каждого СтрокаТаблицаОрганизации Из Форма.ТаблицаОрганизации Цикл		
		Если СтрокаТаблицаОрганизации.Пометка Тогда
			ВыбраннаяОрганизация = СтрокаТаблицаОрганизации;
			Прервать;
		КонецЕсли;		
	КонецЦикла;
	
	Возврат ВыбраннаяОрганизация;
	
КонецФункции

#КонецОбласти

#Область ПеременнаяСлужебныеФайлыИБ

&НаКлиенте
Процедура ЗаполнитьПеременнуюСлужебныеФайлыИБ()
	
	Если СлужебныеФайлыИБ <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СлужебныеФайлыИБ = Новый Соответствие;
	
	ДанныеФайлов = ДвоичныеДанныеСлужебныхФайловДляВыгрузкиИз77();
	ВременныйКаталог = СоздатьВременныйКаталог();
	
	Для Каждого Данные Из ДанныеФайлов Цикл
		ПолноеИмяФайла = ВременныйКаталог + "\" + Данные.Ключ;
		Данные.Значение.Записать(ПолноеИмяФайла);
		СлужебныеФайлыИБ.Вставить(Данные.Ключ, ПолноеИмяФайла); 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДвоичныеДанныеСлужебныхФайловДляВыгрузкиИз77()
	
	ДанныеФайлов = Новый Соответствие;
	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");
	
	Макет = ЭтаОбработка.ПолучитьМакет("Acc77_81_xml");
	ДанныеФайлов.Вставить("Acc77_81.xml", Макет); 
		
	Макет = ЭтаОбработка.ПолучитьМакет("V77Exp_ert");	
	ДанныеФайлов.Вставить("V77Exp.ert", Макет); 
	
	Макет = ЭтаОбработка.ПолучитьМакет("V7Plus_dll");	
	ДанныеФайлов.Вставить("V7Plus.dll", Макет);
	
	Возврат ДанныеФайлов;
	
КонецФункции

// Создает временную папку.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Строка, имя созданной временной папки без косой черты в конце, например: "C:\Каталог".
//
&НаКлиенте
Функция СоздатьВременныйКаталог()
	
	#Если НЕ ВебКлиент Тогда
		
	Перем ИмяВременногоКаталога;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("folder");
	ИмяВременногоКаталога = СтрЗаменить(ИмяВременногоФайла, ".folder", "");	
	СоздатьКаталог(ИмяВременногоКаталога);
	
	Возврат ИмяВременногоКаталога;
	
	#КонецЕсли
	
КонецФункции

&НаКлиенте
Процедура УдалитьСлужебныеФайлыИБ()
	
	Если СлужебныеФайлыИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из СлужебныеФайлыИБ Цикл
		УдалитьФайлы(Элемент.Значение);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Константы

Функция ВариантПереноса_Справочники()
	Возврат "Справочники"; 
КонецФункции

Функция ВариантПереноса_Остатки()
	Возврат "Остатки";	
КонецФункции

Функция ВариантПереноса_ОстаткиИОбороты()
	Возврат "ОстаткиИОбороты";	
КонецФункции

Функция ВариантПереноса77_Справочники()
	Возврат "Справочники"; 
КонецФункции

Функция ВариантПереноса77_СправочникиИОстатки()
	Возврат "СправочникиИОстатки";	
КонецФункции

Функция ВариантПереноса77_СправочникиИДокументы()
	Возврат "СправочникиИДокументы";	
КонецФункции

#КонецОбласти

#Область Период

&НаКлиенте
Процедура ОбновитьПредставлениеПериода()
	
	Если ВариантПереноса = ВариантПереноса_Справочники() Тогда
		
		ДоступностьИзмененияПериода = Ложь;
		
		ПериодКратко = НСтр("ru = 'Справочники за все время'");
		
		ПериодПодробно = НСтр("ru = 'Перенести только данные справочников за все время.'");
		
	ИначеЕсли ВариантПереноса = ВариантПереноса_Остатки() Тогда
		
		ДоступностьИзмененияПериода = Истина;
		
		ПериодКратко = Формат(ПериодНачало, НСтр("ru='ДФ=''yyyy ""г.""'''"));
		
		ПериодПодробно = НСтр("ru = 'Перенести остатки на начало [Год] года, а также данные справочников за все время.'");
		ПериодПодробно = СтрЗаменить(ПериодПодробно, "[Год]", Формат(ПериодНачало, "ДФ=yyyy"));
		
	ИначеЕсли ВариантПереноса = ВариантПереноса_ОстаткиИОбороты() Тогда
		
		ДоступностьИзмененияПериода = Истина;
		
		ПериодКратко = НСтр("ru = '[Начало] - [Конец]'");
		ПериодКратко = СтрЗаменить(ПериодКратко, "[Начало]", Формат(ПериодНачало, "ДФ='ММММ'"));
		ПериодКратко = СтрЗаменить(ПериодКратко, "[Конец]", Формат(ПериодКонец, НСтр("ru = 'ДФ=''ММММ yyyy ""г.""'''")));
		
		ПериодПодробно = НСтр(
		"ru = 'Перенести остатки на начало [Год] г. и обороты за период:
		|С [Начало] по [Конец]
		|Также перенести данные справочников за все время.'");
		ПериодПодробно = СтрЗаменить(ПериодПодробно, "[Год]", Формат(ПериодНачало, "ДФ=yyyy"));
		ПериодПодробно = СтрЗаменить(ПериодПодробно, "[Начало]", Формат(ПериодНачало, "ДЛФ=DD"));
		ПериодПодробно = СтрЗаменить(ПериодПодробно, "[Конец]", Формат(ПериодКонец, "ДЛФ=DD"));
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Не удалось найти обработчик для указанного варианта переноса данных.'");
		
	КонецЕсли;
	
	Элементы.Период_Изменение.Доступность = ДоступностьИзмененияПериода;
	Элементы.ПериодКратко.Заголовок = ПериодКратко;	
	Элементы.ПериодПодробно.Заголовок = ПериодПодробно;
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшитьПериод()
	ИзменитьПериод("Уменьшить");	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьПериод()
	ИзменитьПериод("Увеличить")		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПериод(Действие)
	
	Если Действие = "Уменьшить" Тогда
		Направление = -1;	
	ИначеЕсли Действие = "Увеличить" Тогда
		Направление = 1;	
	Иначе
		ВызватьИсключение НСтр("ru = 'Не удалось изменить период для указанного вида изменения периода.'");	
	КонецЕсли;
	
	ПериодНачало = НачалоГода(ПериодНачало);
	ПериодКонец = НачалоМесяца(ПериодКонец);
	
	Если ВариантПереноса = ВариантПереноса_Остатки() Тогда
		
		ЧислоМесяцев = Направление * 12;
		ПериодНачало = ДобавитьМесяц(ПериодНачало, ЧислоМесяцев);	
		ПериодКонец = ДобавитьМесяц(ПериодКонец, ЧислоМесяцев);
		
	ИначеЕсли ВариантПереноса = ВариантПереноса_ОстаткиИОбороты() Тогда
		
		ЧислоМесяцев = Направление * 1;
		ПериодКонец = ДобавитьМесяц(ПериодКонец, ЧислоМесяцев);		
		ПериодНачало = НачалоГода(ПериодКонец);
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Не удалось уменьшить период для указанного варианта переноса данных.'");
		
	КонецЕсли;
	
	ОбновитьПредставлениеПериода();
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаИБПрогресс

&НаКлиенте
Процедура ПеренестиДанныеИзИБ(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ТаблицаОшибок.Очистить();
	
	УстановитьНачальнуюСтраницуВсехЭтапов();
	
	Элементы.ИБПрогресс_Шапка.ТекущаяСтраница = Элементы.ИБПрогресс_Выполняется;
	Элементы.ИБПрогресс_Результат.ТекущаяСтраница = Элементы.ИБ_Прогресс;
	
	// Если удалось выполнить переход на страницу Шапка_ИБПрогресс,
	// то подключение уже есть и сейчас начнется выгрузка из 7.7.
	УстановитьСтраницуЭтапа(Источник_ИБ(), Этап_Подключение(), СостояниеЭтапа_ВыполненУспешно());
	УстановитьСтраницуЭтапа(Источник_ИБ(), Этап_Выгрузка(), СостояниеЭтапа_Выполняется());
	
	Если МожноВыгружатьИзКонфигурации77() Тогда
		
		Если ВариантПереноса = ВариантПереноса_Справочники() Тогда
			ПеренестиСправочникиИзИБ();	
		ИначеЕсли ВариантПереноса = ВариантПереноса_Остатки() Тогда
			ПеренестиОстаткиИзИБ();	
		ИначеЕсли ВариантПереноса = ВариантПереноса_ОстаткиИОбороты() Тогда
			ПеренестиОстаткиИДокументыИзИБ();	
		Иначе
			ВызватьИсключение НСтр("ru = 'Не удалось выполнить перенос данных для указанного варианта переноса.'");	
		КонецЕсли;
		
		ОбновитьПовторноИспользуемыеЗначения();
		ОбновитьИнтерфейс();
		
	Иначе
		
		УстановитьСтраницуЭтапа(Источник_ИБ(), Этап_Выгрузка(), СостояниеЭтапа_ВозниклаОшибка());
		Элементы.ИБПрогресс_Результат.ТекущаяСтраница = Элементы.ИБ_Ошибка;
		
	КонецЕсли;
	
	Элементы.ИБПрогресс_Шапка.ТекущаяСтраница = Элементы.ИБПрогресс_Завершено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиСправочникиИзИБ()
	
	//////////////////////////////////////////////////////////////////////////////
	// Выгрузка из 7.7.
	
	ФайлВыгруженныйИз77 = ВыгрузитьИз77(ВариантПереноса77_Справочники(), ПериодНачало, ПериодКонец);
	
	Если ТипЗнч(ФайлВыгруженныйИз77) <> Тип("ДвоичныеДанные") Тогда		
	 
		УстановитьСтраницуЭтапа(Источник_ИБ(), Этап_Выгрузка(), СостояниеЭтапа_ВозниклаОшибка());
		Элементы.ИБПрогресс_Результат.ТекущаяСтраница = Элементы.ИБ_Ошибка;
		Возврат;
		
	КонецЕсли;
	
	УстановитьСтраницуЭтапа(Источник_ИБ(), Этап_Выгрузка(), СостояниеЭтапа_ВыполненУспешно());
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Загрузка справочников.
	
	УстановитьСтраницуЭтапа(Источник_ИБ(), Этап_Загрузка(), СостояниеЭтапа_Выполняется());	
	ЗагрузкаСправочниковУспешноЗавершена = ЗагрузитьДанныеИзФайлаВыгруженногоИз77(ФайлВыгруженныйИз77);	
	
	Если НЕ ЗагрузкаСправочниковУспешноЗавершена Тогда
		
		УстановитьСтраницуЭтапа(Источник_ИБ(), Этап_Загрузка(), СостояниеЭтапа_ВозниклаОшибка());
		Элементы.ИБПрогресс_Результат.ТекущаяСтраница = Элементы.ИБ_Ошибка;
		Возврат;
		
	КонецЕсли;
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Установка учетной политики и отображение результатов загрузки.
	
	КодОрганизации77 = Элементы.ТаблицаОрганизации.ТекущиеДанные.Код;
	Организация = Организация8(КодОрганизации77, Истина);	
	УстановитьУчетнуюПолитикуИСоответствиеСчетов(Организация);
	
	// При загрузке справочников не требуется проводить документы и проверять результат загрузки.
	УстановитьСтраницуЭтапа(Источник_ИБ(), Этап_Загрузка(), СостояниеЭтапа_ВыполненУспешно());	
	УстановитьСтраницуЭтапа(Источник_ИБ(), Этап_Проведение(), СостояниеЭтапа_ВыполненУспешно());
	УстановитьСтраницуЭтапа(Источник_ИБ(), Этап_Проверка(), СостояниеЭтапа_ВыполненУспешно());
	
	Элементы.ИБПрогресс_Результат.ТекущаяСтраница = Элементы.ИБ_Успех;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиОстаткиИзИБ()
	
	//////////////////////////////////////////////////////////////////////////////
	// Выгрузка из 7.7.
	
	СправочникиИз77 = ВыгрузитьИз77(ВариантПереноса77_Справочники(), ПериодНачало, ПериодКонец);	
	ОстаткиИз77 = ВыгрузитьИз77(ВариантПереноса77_СправочникиИОстатки(), ПериодНачало, ПериодКонец);
	
	Если ТипЗнч(СправочникиИз77) <> Тип("ДвоичныеДанные")
	 ИЛИ ТипЗнч(ОстаткиИз77) <> Тип("ДвоичныеДанные") Тогда		
	 
		УстановитьСтраницуЭтапа(Источник_ИБ(), Этап_Выгрузка(), СостояниеЭтапа_ВозниклаОшибка());
		Элементы.ИБПрогресс_Результат.ТекущаяСтраница = Элементы.ИБ_Ошибка;
		Возврат;
		
	КонецЕсли;
	
	УстановитьСтраницуЭтапа(Источник_ИБ(), Этап_Выгрузка(), СостояниеЭтапа_ВыполненУспешно());
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Загрузка справочников.
	
	УстановитьСтраницуЭтапа(Источник_ИБ(), Этап_Загрузка(), СостояниеЭтапа_Выполняется());	
	
	ЗагрузкаСправочниковУспешноЗавершена = Ложь;
	ЗагрузкаОстатковУспешноЗавершена = Ложь;
	
	ЗагрузкаСправочниковУспешноЗавершена = ЗагрузитьДанныеИзФайлаВыгруженногоИз77(СправочникиИз77);	
	
	Если НЕ ЗагрузкаСправочниковУспешноЗавершена Тогда
		
		УстановитьСтраницуЭтапа(Источник_ИБ(), Этап_Загрузка(), СостояниеЭтапа_ВозниклаОшибка());
		Элементы.ИБПрогресс_Результат.ТекущаяСтраница = Элементы.ИБ_Ошибка;
		Возврат;
		
	КонецЕсли;
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Загрузка справочников и остатков.
	
	КодОрганизации77 = Элементы.ТаблицаОрганизации.ТекущиеДанные.Код;
	Организация = Организация8(КодОрганизации77, Истина);
	
	УстановитьУчетнуюПолитикуИСоответствиеСчетов(Организация);
	
	ЗагрузкаОстатковУспешноЗавершена = ЗагрузитьДанныеИзФайлаВыгруженногоИз77(ОстаткиИз77);
	
	Если НЕ ЗагрузкаОстатковУспешноЗавершена Тогда
		
		УстановитьСтраницуЭтапа(Источник_ИБ(), Этап_Загрузка(), СостояниеЭтапа_ВозниклаОшибка());
		Элементы.ИБПрогресс_Результат.ТекущаяСтраница = Элементы.ИБ_Ошибка;
		Возврат;
		
	КонецЕсли;	
	
	УстановитьСтраницуЭтапа(Источник_ИБ(), Этап_Загрузка(), СостояниеЭтапа_ВыполненУспешно());	
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Проведение документов.
	
	УстановитьСтраницуЭтапа(Источник_ИБ(), Этап_Проведение(), СостояниеЭтапа_Выполняется());	
	ВсеДокументыУспешноПроведены = ПровестиДокументы(Организация);
	ПроверитьЗаполнениеПроведенныхДокументов(Организация);
	
	Если ВсеДокументыУспешноПроведены Тогда
		УстановитьСтраницуЭтапа(Источник_ИБ(), Этап_Проведение(), СостояниеЭтапа_ВыполненУспешно());	
	Иначе
		УстановитьСтраницуЭтапа(Источник_ИБ(), Этап_Проведение(), СостояниеЭтапа_ВозниклаОшибка());
		// Выполнение не прерывается, чтобы выполнить сравнение данных ИБ с данными из 7.7.
	КонецЕсли;
	
	
	
	//////////////////////////////////////////////////////////////////////////////			
	// Проверка результатов
	
	УстановитьСтраницуЭтапа(Источник_ИБ(), Этап_Проверка(), СостояниеЭтапа_Выполняется());		
	ДанныеСовпадают = ДанныеИБСовпадаютСДаннымиИз77();
	
	Если ДанныеСовпадают Тогда
		УстановитьСтраницуЭтапа(Источник_ИБ(), Этап_Проверка(), СостояниеЭтапа_ВыполненУспешно());		
	Иначе
		УстановитьСтраницуЭтапа(Источник_ИБ(), Этап_Проверка(), СостояниеЭтапа_ВозниклаОшибка());		
	КонецЕсли;
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Вывести окончательный результат загрузки данных
	
	Если Элементы.ИБ_Подключение_Надпись.ТекущаяСтраница = Элементы.ИБ_Подключение_Надпись_ВыполненУспешно
		И Элементы.ИБ_Выгрузка_Надпись.ТекущаяСтраница = Элементы.ИБ_Выгрузка_Надпись_ВыполненУспешно
		И Элементы.ИБ_Загрузка_Надпись.ТекущаяСтраница = Элементы.ИБ_Загрузка_Надпись_ВыполненУспешно
		И Элементы.ИБ_Проведение_Надпись.ТекущаяСтраница = Элементы.ИБ_Проведение_Надпись_ВыполненУспешно
		И Элементы.ИБ_Проверка_Надпись.ТекущаяСтраница = Элементы.ИБ_Проверка_Надпись_ВыполненУспешно Тогда
		
		Элементы.ИБПрогресс_Результат.ТекущаяСтраница = Элементы.ИБ_Успех;
		
	Иначе
		
		Элементы.ИБПрогресс_Результат.ТекущаяСтраница = Элементы.ИБ_Ошибка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиОстаткиИДокументыИзИБ()
	
	//////////////////////////////////////////////////////////////////////////////
	// Выгрузка данных из 7.7.
	
	СправочникиИз77 = ВыгрузитьИз77(ВариантПереноса77_Справочники(),           ПериодНачало, ПериодКонец);	
	ОстаткиИз77     = ВыгрузитьИз77(ВариантПереноса77_СправочникиИОстатки(),   ПериодНачало, ПериодКонец);
	ДокументыИз77   = ВыгрузитьИз77(ВариантПереноса77_СправочникиИДокументы(), ПериодНачало, ПериодКонец);
	
	Если ТипЗнч(СправочникиИз77) <> Тип("ДвоичныеДанные")
	 ИЛИ ТипЗнч(ОстаткиИз77) <> Тип("ДвоичныеДанные") 
	 ИЛИ ТипЗнч(ДокументыИз77) <> Тип("ДвоичныеДанные") Тогда		
				
		УстановитьСтраницуЭтапа(Источник_ИБ(), Этап_Выгрузка(), СостояниеЭтапа_ВозниклаОшибка());
		Элементы.ИБПрогресс_Результат.ТекущаяСтраница = Элементы.ИБ_Ошибка;
		Возврат;
		
	КонецЕсли;
	
	// Выгрузка успешно завершена и сейчас начнется загрузка.
	УстановитьСтраницуЭтапа(Источник_ИБ(), Этап_Выгрузка(), СостояниеЭтапа_ВыполненУспешно());
	УстановитьСтраницуЭтапа(Источник_ИБ(), Этап_Загрузка(), СостояниеЭтапа_Выполняется());
	
	
	
	//////////////////////////////////////////////////////////////////////////////	
	// Загрузка справочников
	
	ЗагрузкаСправочниковУспешноЗавершена = Ложь;
	ЗагрузкаОстатковУспешноЗавершена = Ложь;
	ЗагрузкаДокументовУспешноЗавершена = Ложь;
	
	ЗагрузкаСправочниковУспешноЗавершена = ЗагрузитьДанныеИзФайлаВыгруженногоИз77(СправочникиИз77);	
		
	Если НЕ ЗагрузкаСправочниковУспешноЗавершена Тогда
		
		УстановитьСтраницуЭтапа(Источник_ИБ(), Этап_Загрузка(), СостояниеЭтапа_ВозниклаОшибка());
		Элементы.ИБПрогресс_Результат.ТекущаяСтраница = Элементы.ИБ_Ошибка;
		Возврат;
		
	КонецЕсли;
	
	КодОрганизации77 = Элементы.ТаблицаОрганизации.ТекущиеДанные.Код;
	Организация = Организация8(КодОрганизации77, Истина);
	
	УстановитьУчетнуюПолитикуИСоответствиеСчетов(Организация);
	
	
	
	//////////////////////////////////////////////////////////////////////////////		
	// Загрузка остатков
	
	ЗагрузкаОстатковУспешноЗавершена = ЗагрузитьДанныеИзФайлаВыгруженногоИз77(ОстаткиИз77);
	
	Если НЕ ЗагрузкаОстатковУспешноЗавершена Тогда
		УстановитьСтраницуЭтапа(Источник_ИБ(), Этап_Загрузка(), СостояниеЭтапа_ВозниклаОшибка());
		Элементы.ИБПрогресс_Результат.ТекущаяСтраница = Элементы.ИБ_Ошибка;
		Возврат;		
	КонецЕсли;
	
	// Проведение документов остатков, так как движения документов остатков 
	// могут понадобится при загрузке документов за выбранный период.
	ПровестиДокументы(Организация);
	
	
	//////////////////////////////////////////////////////////////////////////////			
	// Загрузка документов
	
	ЗагрузкаДокументовУспешноЗавершена = ЗагрузитьДанныеИзФайлаВыгруженногоИз77(ДокументыИз77);
	
	Если НЕ ЗагрузкаДокументовУспешноЗавершена Тогда
		УстановитьСтраницуЭтапа(Источник_ИБ(), Этап_Загрузка(), СостояниеЭтапа_ВозниклаОшибка());
		Элементы.ИБПрогресс_Результат.ТекущаяСтраница = Элементы.ИБ_Ошибка;
		Возврат;		
	КонецЕсли;		
	
	УстановитьСтраницуЭтапа(Источник_ИБ(), Этап_Загрузка(), СостояниеЭтапа_ВыполненУспешно());
	
	
	
	//////////////////////////////////////////////////////////////////////////////			
	// Проведение документов
	
	УстановитьСтраницуЭтапа(Источник_ИБ(), Этап_Проведение(), СостояниеЭтапа_Выполняется());	
	ВсеДокументыУспешноПроведены = ПровестиДокументы(Организация);	
	ПроверитьЗаполнениеПроведенныхДокументов(Организация);
	
	Если ВсеДокументыУспешноПроведены Тогда
		УстановитьСтраницуЭтапа(Источник_ИБ(), Этап_Проведение(), СостояниеЭтапа_ВыполненУспешно());
	Иначе
		УстановитьСтраницуЭтапа(Источник_ИБ(), Этап_Проведение(), СостояниеЭтапа_ВозниклаОшибка());
		// Выполнение не прерывается, чтобы выполнить сравнение данных ИБ с данными из 7.7.
	КонецЕсли;
	
	
	
	//////////////////////////////////////////////////////////////////////////////			
	// Проверка результатов
	
	УстановитьСтраницуЭтапа(Источник_ИБ(), Этап_Проверка(), СостояниеЭтапа_Выполняется());		
	ДанныеСовпадают = ДанныеИБСовпадаютСДаннымиИз77();
	
	Если ДанныеСовпадают Тогда
		УстановитьСтраницуЭтапа(Источник_ИБ(), Этап_Проверка(), СостояниеЭтапа_ВыполненУспешно());		
	Иначе
		УстановитьСтраницуЭтапа(Источник_ИБ(), Этап_Проверка(), СостояниеЭтапа_ВозниклаОшибка());		
	КонецЕсли;
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Вывести окончательный результат загрузки данных
	
	Если Элементы.ИБ_Подключение_Надпись.ТекущаяСтраница = Элементы.ИБ_Подключение_Надпись_ВыполненУспешно
		И Элементы.ИБ_Выгрузка_Надпись.ТекущаяСтраница = Элементы.ИБ_Выгрузка_Надпись_ВыполненУспешно
		И Элементы.ИБ_Загрузка_Надпись.ТекущаяСтраница = Элементы.ИБ_Загрузка_Надпись_ВыполненУспешно
		И Элементы.ИБ_Проведение_Надпись.ТекущаяСтраница = Элементы.ИБ_Проведение_Надпись_ВыполненУспешно
		И Элементы.ИБ_Проверка_Надпись.ТекущаяСтраница = Элементы.ИБ_Проверка_Надпись_ВыполненУспешно Тогда
		
		Элементы.ИБПрогресс_Результат.ТекущаяСтраница = Элементы.ИБ_Успех;
		
	Иначе
		
		Элементы.ИБПрогресс_Результат.ТекущаяСтраница = Элементы.ИБ_Ошибка;
		
	КонецЕсли;
	
КонецПроцедуры

// Определение конфигурации и поиск соответствующих конвертаций
&НаКлиенте
Функция МожноВыгружатьИзКонфигурации77()
	
	МожноВыгружать = Истина;
	
	Попытка
		
		ИдентификаторКонфигурации = v7.глИдентификаторКонфигурации();
		НомерРелизаКонфигурации = v7.Константа.НомерРелиза;
		
	Исключение
		
		МожноВыгружать = Ложь;
		
		Ошибка = ТаблицаОшибок.Добавить();
		Ошибка.Этап = Этап_Выгрузка();
		Ошибка.Кратко = НСтр("ru = 'Не удалось выполнить выгрузку данных из 1С:Предериятие 7.7.'");
		Ошибка.Подробно = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Ошибка.Рекомендация = НСтр("ru = 'Проверьте, что выгрузка производится из типовой конфигурации ""Бухгалтерский учет для Казахстана"" и версия конфигурации не ниже 7.70.261.'");
		
	КонецПопытки;
	
	Если МожноВыгружать Тогда
		
		ВозрастРелизаКонфигурации = Число(Прав(СокрЛП(НомерРелизаКонфигурации), 3));	
		ВозрастРелизаПравил = 261; 
		
		Если ВозрастРелизаКонфигурации < ВозрастРелизаПравил Тогда
			
			МожноВыгружать = Ложь;
			
			Ошибка = ТаблицаОшибок.Добавить();
			Ошибка.Этап = Этап_Выгрузка();
			Ошибка.Кратко = НСтр("ru = 'Не удалось выполнить выгрузку данных из 1С:Предериятие 7.7.'");
			Ошибка.Подробно = НСтр("ru = 'Не удалось выполнить выгрузку данных из 1С:Предериятие 7.7.'");
			Ошибка.Рекомендация = НСтр("ru = 'Версия конфигурации ""Бухгалтерский учет для Казахстана"" ниже 7.70.261. Обновите конфигурацию.'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если МожноВыгружать Тогда
		
		ИтогиРассчитаны = БухгалтерскиеИтогиРассчитаны();

		Если НЕ ИтогиРассчитаны Тогда
			
			МожноВыгружать = Ложь;
			
			Ошибка = ТаблицаОшибок.Добавить();
			Ошибка.Этап = Этап_Выгрузка();
			Ошибка.Кратко = НСтр("ru = 'Не удалось выполнить выгрузку данных из 1С:Предериятие 7.7.'");
			Ошибка.Подробно = НСтр("ru = 'Не удалось выполнить выгрузку данных из 1С:Предериятие 7.7.'");		
			Ошибка.Рекомендация = НСтр("ru = 'Возможно в 1С:Предприятие 7.7 не рассчитаны бухгалтерские итоги на [Дата]'");
			Ошибка.Рекомендация = СтрЗаменить(Ошибка.Рекомендация, "[Дата]", Формат(ПериодКонец, "ДЛФ=DD"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МожноВыгружать;
			
КонецФункции

// Подключается к базе 7.7 и выгружает из нее данные.
//
// Возвращаемое значение:
//  ДвоичныеДанные XML-файла выгруженного из 7.7.
//  Неопределено - если не удалось выгрузить из 7.7.
//
&НаКлиенте
Функция ВыгрузитьИз77(ВариантПереноса77, ДатаНачалаПереноса, ДатаКонцаПереноса)
	
	ФайлВыгруженныйИз77 = Неопределено;
	
	// Установить переменную Организация77.
	ВыбраннаяОрганизация = ВыбраннаяОрганизация(ЭтаФорма);
	Организация77 = МассивОрганизаций77[ВыбраннаяОрганизация.ИндексМассива];
	
	Если Организация77 = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	// Установить перемнные ДатаНачалаСтрокой, ДатаКонцаСтрокой.
	Если ВариантПереноса77 = ВариантПереноса77_Справочники()
	 ИЛИ ВариантПереноса77 = ВариантПереноса77_СправочникиИОстатки() Тогда
	 
		// Сдвинуть дату на конец предыдыдущего года, т.к. при получении остатков на начало 
		// года, в 7.7 нужно передать конец предыдущего года.
		ДатаНачалаСтрокой = Формат(НачалоГода(ДатаНачалаПереноса) - 60*60*24, "ДФ=dd.MM.yyyy");
		ДатаКонцаСтрокой = ДатаНачалаСтрокой;
		
	ИначеЕсли ВариантПереноса77 = ВариантПереноса77_СправочникиИДокументы() Тогда	
		
		ДатаНачалаСтрокой = Формат(НачалоГода(ДатаНачалаПереноса), "ДФ=dd.MM.yyyy");
		ДатаКонцаСтрокой = Формат(КонецМесяца(ДатаКонцаПереноса), "ДФ=dd.MM.yyyy");		
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Не удалось выгрузить из 1С:Предприятие 7.7 для указанного варианта переноса.'");		
		
	КонецЕсли;
		
	#Если НЕ ВебКлиент Тогда
		ИмяФайлаВыгруженногоИз77 = ПолучитьИмяВременногоФайла("xml");	
	#Иначе
		ИмяФайлаВыгруженногоИз77 = Неопределено;
		ВызватьИсключение НСтр("ru = 'Выгрузка из базы 1С:Предприятие 7.7 не поддерживается в веб-клиенте.'");	
	#КонецЕсли
	
	Попытка
		
		ДополнительныеПараметры = v7.CreateObject("СписокЗначений");
		ДополнительныеПараметры.ДобавитьЗначение(Организация77, "ВыбОрганизация");
		ДополнительныеПараметры.ДобавитьЗначение(ВариантПереноса77, "СпособВыгрузки");
		ДополнительныеПараметры.ДобавитьЗначение(ВыполнениеРабот, "ВыполнениеРабот");
		
		// Возвращает пустую строку, если выгрузка прошла успешно.
		// Возвращает строку ошибок через запятую или 0, если при выгрузке возникли ошибки.
		РезультатВыгрузкиИз77 = v7.ВыгрузкаВ1СБухгалтерию8(
			ДатаНачалаСтрокой, 
			ДатаКонцаСтрокой, 
			СлужебныеФайлыИБ["V77Exp.ert"], 
			СлужебныеФайлыИБ["Acc77_81.xml"],  
			ИмяФайлаВыгруженногоИз77, 
			ДополнительныеПараметры);
			
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке); 
		
		Ошибка = ТаблицаОшибок.Добавить();
		Ошибка.Этап = Этап_Выгрузка();
		Ошибка.Кратко = НСтр("ru = 'Не удалось произвести выгрузку данных из информационной базы 1С:Предприятие 7.7.'");
		Ошибка.Подробно = ПодробноеПредставлениеОшибки;
		Ошибка.Рекомендация = НСтр("ru = 'Возможно, с информационной базой работают пользователи. Перенос данных возможен только при наличии монопольного доступа к информационной базе, из которой выгружаются данные.'");
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	// Проверка результатов выгрузки из 7.7.
	#Если НЕ ВебКлиент Тогда	
		
		Файл = Новый Файл(ИмяФайлаВыгруженногоИз77);	
		
		Если Файл.Существует() Тогда
			
			ФайлВыгруженныйИз77 = Новый ДвоичныеДанные(ИмяФайлаВыгруженногоИз77);
			
		Иначе
			
			Ошибка = ТаблицаОшибок.Добавить();
			Ошибка.Этап = Этап_Выгрузка();
			Ошибка.Кратко = НСтр("ru = 'Не удалось произвести выгрузку данных из информационной базы 1С:Предприятие 7.7.'");
			Ошибка.Подробно = ПодробноеПредставлениеОшибки;
			Ошибка.Рекомендация = НСтр("ru = 'Попытайтесь запустить 1С:Предприятие 8 от имени администратора Windows.'");
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	#Иначе
		
		ВызватьИсключение НСтр("ru = 'Выгрузка из базы 1С:Предприятие 7.7 не поддерживается в веб-клиенте.'");	
		
	#КонецЕсли
	
	УдалитьВременныйФайл(ИмяФайлаВыгруженногоИз77);
	
	Возврат ФайлВыгруженныйИз77;
	
КонецФункции

&НаСервере
Функция ЗагрузитьДанныеИзФайлаВыгруженногоИз77(ФайлВыгруженныйИз77)
		
	ИмяФайлаВыгруженногоИз77 = ПолучитьИмяВременногоФайла("xml");
	ФайлВыгруженныйИз77.Записать(ИмяФайлаВыгруженногоИз77);
	
	Если ЭтоБазоваяВерсияКонфигурации Тогда
		ИзменитьРеквизитыОрганизацииНаРеквизитыИзФайла(ИмяФайлаВыгруженногоИз77);
	КонецЕсли;
	
	УниверсальныйОбменДаннымиXML = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	УниверсальныйОбменДаннымиXML.ИмяФайлаОбмена = ИмяФайлаВыгруженногоИз77;
	УниверсальныйОбменДаннымиXML.РежимОбмена = "Загрузка";
	УниверсальныйОбменДаннымиXML.ЭтоИнтерактивныйРежим = Ложь;
		
	УниверсальныйОбменДаннымиXML.ВыполнитьЗагрузку();	
	
	УдалитьВременныйФайл(ИмяФайлаВыгруженногоИз77);
	
	Если УниверсальныйОбменДаннымиXML.ФлагОшибки Тогда
		ЗагрузкаУспешноЗавершена = Ложь; 
	Иначе
		ЗагрузкаУспешноЗавершена = Истина; 
	КонецЕсли;
	
	Возврат ЗагрузкаУспешноЗавершена;
	
КонецФункции

Процедура ИзменитьРеквизитыОрганизацииНаРеквизитыИзФайла(ИмяФайлаВыгруженногоИз77)
	
	Если НЕ ЭтоБазоваяВерсияКонфигурации Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации";	
	
	Выборка = Запрос.Выполнить().Выбрать();	
	
	// В базовой версии только одна организация.
	Если Выборка.Следующий() Тогда

		ОрганизацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ОрганизацияОбъект.Код = "0" + Файл_ОрганизацияКод;
		ОрганизацияОбъект.Наименование = Файл_ОрганизацияНаименование;
		ОрганизацияОбъект.НаименованиеПолное = Файл_ОрганизацияНаименование;		
		// Остальные реквизиты организации будут изменены в процессе загрузки.
		
		ОрганизацияОбъект.ОбменДанными.Загрузка = Истина;
		ОрганизацияОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СравнениеДанных

#Область ОСВПоСчетамБезСубконто

&НаКлиенте
Процедура ОткрытьОтчетОСВПоГруппамБезСубконто(Организация8, Знач ДатаНачала, Знач ДатаКонца) Экспорт
	
	Организация77 = Организация77(Организация8);
	
	Если Организация77 = Неопределено Тогда
		ПоказатьСообщениеНеУдалосьНайтиОрганизацию77(Организация8);
		Возврат;
	КонецЕсли;
	
	АдресТаблицы77 = ОСВПоСчетамБезСубконто77(Организация77, ДатаНачала, ДатаКонца, Истина);			
	АдресТаблицы8 = ОСВПоСчетамБезСубконто8(Организация8, ДатаНачала, ДатаКонца, Истина);	
	
	Если АдресТаблицы77 <> Неопределено И АдресТаблицы8 <> Неопределено Тогда
		
		АдресТаблицыДляОтчета = АдресТаблицыДляОтчетаСравнениеОСВБезСубконто(АдресТаблицы77, АдресТаблицы8);
		
		ТабличныйДокумент = ТабличныйДокументИзТаблицыЗначений(АдресТаблицыДляОтчета, "ОСВБезСубконто");
		ТабличныйДокумент.ФиксацияСлева = 1; // Зафиксировать колонку Счет.
		
		ПараметрыПечати = ОбщегоНазначенияБККлиент.ПустыеПараметрыПечати();
		ПараметрыПечати.ТабличныйДокумент = ТабличныйДокумент;
		ПараметрыПечати.ВладелецФормы = ЭтаФорма;
		ПараметрыПечати.ЗаголовокФормы = НСтр("ru = 'Сравнение оборотно-сальдовых ведомостей по счетам верхнего уровня'");
		ОбщегоНазначенияБККлиент.ОткрытьФормуПечати(ПараметрыПечати);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетОСВПоВсемСчетамБезСубконто(Организация8, Знач ДатаНачала, Знач ДатаКонца) Экспорт
	
	Организация77 = Организация77(Организация8);
	
	Если Организация77 = Неопределено Тогда
		ПоказатьСообщениеНеУдалосьНайтиОрганизацию77(Организация8);
		Возврат;
	КонецЕсли;
	
	АдресТаблицы77 = ОСВПоСчетамБезСубконто77(Организация77, ДатаНачала, ДатаКонца, Ложь);	
	АдресТаблицы8 = ОСВПоСчетамБезСубконто8(Организация8, ДатаНачала, ДатаКонца, Ложь);	
	
	Если АдресТаблицы77 <> Неопределено И АдресТаблицы8 <> Неопределено Тогда
		
		АдресТаблицыДляОтчета = АдресТаблицыДляОтчетаСравнениеОСВБезСубконто(АдресТаблицы77, АдресТаблицы8);
		
		ТабличныйДокумент = ТабличныйДокументИзТаблицыЗначений(АдресТаблицыДляОтчета, "ОСВБезСубконто");	
		ТабличныйДокумент.ФиксацияСлева = 1; // Зафиксировать колонку Счет.
		
		ПараметрыПечати = ОбщегоНазначенияБККлиент.ПустыеПараметрыПечати();
		ПараметрыПечати.ТабличныйДокумент = ТабличныйДокумент;
		ПараметрыПечати.ВладелецФормы = ЭтаФорма;
		ПараметрыПечати.ЗаголовокФормы = НСтр("ru = 'Сравнение оборотно-сальдовых ведомостей по всем счетам'");
		ОбщегоНазначенияБККлиент.ОткрытьФормуПечати(ПараметрыПечати);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Функция ОСВПоСчетамБезСубконто77(Знач Организация77, Знач ДатаНачала, Знач ДатаКонца, Знач ТолькоВерхниеГруппы)
	
	БухгалтерскиеИтоги = v7.CreateObject("БухгалтерскиеИтоги");
	БухгалтерскиеИтоги.ИспользоватьРазделительУчета(Организация77);
	
	// <ФлагСчета> - необязательный параметр. Признак развертывания сальдо по субсчетам основного счета. Число:
	// 0 - не разворачить по субсчетам. 
	// 1 - разворачивать по субсчетам. 
	// -1 (минус единица) - не выдавать итоги по счетам-группам. 
	ФлагСчета = ?(ТолькоВерхниеГруппы, 0, 1);	
	БухгалтерскиеИтоги.ВключатьСубсчета(ФлагСчета);
	
	УдалосьПолучитьИтоги = Истина;
	
	Попытка
		
		// Возвращает число: 1 - запрос выполнен, 0 - запрос не выполнен.
		РезультатЗапроса = БухгалтерскиеИтоги.ВыполнитьЗапрос(ДатаНачала, ДатаКонца);
		
		Если РезультатЗапроса = 1 Тогда	
			УдалосьПолучитьИтоги = Истина;
		ИначеЕсли РезультатЗапроса = 0 Тогда
			УдалосьПолучитьИтоги = Ложь;		
		Иначе
			ВызватьИсключение НСтр("ru = 'Метод БухгалтерскиеИтоги.ВыполнитьЗапрос() вернул значение, отличное от 0 или 1.'");			
		КонецЕсли;
		
	Исключение
		
		УдалосьПолучитьИтоги = Ложь;
		
	КонецПопытки;
	
	Если НЕ УдалосьПолучитьИтоги Тогда		
		ТекстПредупреждения = НСтр(
		"ru = 'Не удалось получить данные из 1С:Предприятие 7.7.
        |Возможно в 1С:Предприятие 7.7 не рассчитаны бухгалтерские итоги на [Дата]'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "[Дата]", Формат(ДатаКонца, "ДЛФ=DD"));
		ПоказатьПредупреждение(, ТекстПредупреждения);	
		Возврат Неопределено;	
	КонецЕсли;
	
	БухгалтерскиеИтоги.ВыбратьСчета();
	
	Массив = Новый Массив;
	
	// Получить из выборки следующий счет. Выборка должна быть предварительно открыта при помощи метода ВыбратьСчета(). 
	// Возвращает: 1 - следующий счет выбран успешно. 0 - следующий счет не выбран (отсутствует).
	Пока БухгалтерскиеИтоги.ПолучитьСчет() = 1 Цикл	
		
		// Получать только балансовые счета.
		Если БухгалтерскиеИтоги.Счет.Забалансовый = 0 Тогда
			
			Структура = Новый Структура;
			
			// Из 7.7 счета получаются в виде строк: "2930   ".
			Счет = СокрЛП(БухгалтерскиеИтоги.Счет.Представление);
			Структура.Вставить("Счет", Счет);
			
			Структура.Вставить("СальдоНачальноеДт", БухгалтерскиеИтоги.СНД());
			Структура.Вставить("СальдоНачальноеКт", БухгалтерскиеИтоги.СНК());
			
			Структура.Вставить("ОборотДт", БухгалтерскиеИтоги.ДО());
			Структура.Вставить("ОборотКт", БухгалтерскиеИтоги.КО());
			
			Структура.Вставить("СальдоКонечноеДт", БухгалтерскиеИтоги.СКД());
			Структура.Вставить("СальдоКонечноеКт", БухгалтерскиеИтоги.СКК());
			
			Массив.Добавить(Структура);
			
		КонецЕсли;
	
	КонецЦикла;
	
	АдресТаблицы = ТаблицаЗначенийИзМассиваСтруктур(Массив);
	
	Возврат АдресТаблицы;
	
КонецФункции

&НаСервере
Функция ОСВПоСчетамБезСубконто8(Знач Организация8, Знач ДатаНачала, Знач ДатаКонца, Знач ТолькоВерхниеГруппы)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиИОбороты.Счет.Код КАК Счет,
	|	ОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СальдоНачальноеДт,
	|	ОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СальдоНачальноеКт,
	|	ОстаткиИОбороты.СуммаОборотДт КАК ОборотДт,
	|	ОстаткиИОбороты.СуммаОборотКт КАК ОборотКт,
	|	ОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СальдоКонечноеДт,
	|	ОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СальдоКонечноеКт
	|ИЗ
	|	РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&ДатаНачала, &ДатаКонца, , , НЕ Счет.Забалансовый, , Организация = &Организация) КАК ОстаткиИОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Счет
	|ИТОГИ
	|	СУММА(СальдоНачальноеДт),
	|	СУММА(СальдоНачальноеКт),
	|	СУММА(ОборотДт),
	|	СУММА(ОборотКт),
	|	СУММА(СальдоКонечноеДт),
	|	СУММА(СальдоКонечноеКт)
	|ПО
	|	ОстаткиИОбороты.Счет ИЕРАРХИЯ";
		
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКонца", ДатаКонца);
	Запрос.УстановитьПараметр("Организация", Организация8);
	
	ТаблицаЗначенийОСВ = Новый ТаблицаЗначений;
	
	ВариантОбхода = ?(ТолькоВерхниеГруппы, ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, ОбходРезультатаЗапроса.Прямой);	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать(ВариантОбхода);
	
	// Создать колонки таблицы ТаблицаЗначенийОСВ.
	Для Каждого Колонка Из Результат.Колонки Цикл
		ТаблицаЗначенийОСВ.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;		
	
	// Заполнить строки таблицы ТаблицаЗначенийОСВ.
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаЗначенийОСВ.Добавить();
		Для Каждого Колонка Из Результат.Колонки Цикл
			СтрокаТаблицы[Колонка.Имя] = Выборка[Колонка.Имя];
		КонецЦикла;
	КонецЦикла;
	
	АдресТаблицы = ПоместитьВоВременноеХранилище(ТаблицаЗначенийОСВ, ЭтаФорма.УникальныйИдентификатор);
	
	Возврат АдресТаблицы;
	
КонецФункции

&НаСервере
Функция АдресТаблицыДляОтчетаСравнениеОСВБезСубконто(АдресТаблицы77, АдресТаблицы8)
	
	//////////////////////////////////////////////////////////////////////////////
	// Подготовительные действия.

	Таблица77 = ПолучитьИзВременногоХранилища(АдресТаблицы77);
	Таблица8 = ПолучитьИзВременногоХранилища(АдресТаблицы8);
	
	ТипСчет = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(4));
	ТипСумма = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(32, 2));
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Сформировать коллекцию счетов, которая будет содержать все счета из Таблица77 и все Таблица8.
	// Все счета в созданной коллекции будут уникальны, т.е. дублирования счетов не будет.
	
	ТаблицаСчетов = Новый ТаблицаЗначений;
	ТаблицаСчетов.Колонки.Добавить("Счет", ТипСчет);
	
	Для Каждого СтрокаТаблица77 Из Таблица77 Цикл
		СтрокаТаблицыСчетов = ТаблицаСчетов.Добавить();
		СтрокаТаблицыСчетов.Счет = СтрокаТаблица77.Счет; 
	КонецЦикла;
	
	Для Каждого СтрокаТаблица8 Из Таблица8 Цикл
		СтрокаТаблицыСчетов = ТаблицаСчетов.Добавить();
		СтрокаТаблицыСчетов.Счет = СтрокаТаблица8.Счет; 
	КонецЦикла;
	
	ТаблицаСчетов.Свернуть("Счет");
	МассивВсехСчетов = ТаблицаСчетов.ВыгрузитьКолонку("Счет");
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Сформировать таблицу, которая будет содержать все счета и суммы из 7 и 8.
	
	ТаблицаДляОтчета = Новый ТаблицаЗначений;
	
	ТаблицаДляОтчета.Колонки.Добавить("Счет", ТипСчет);
	
	ТаблицаДляОтчета.Колонки.Добавить("СальдоНачальноеДт77", ТипСумма);
	ТаблицаДляОтчета.Колонки.Добавить("СальдоНачальноеДт8", ТипСумма);
	
	ТаблицаДляОтчета.Колонки.Добавить("СальдоНачальноеКт77", ТипСумма);
	ТаблицаДляОтчета.Колонки.Добавить("СальдоНачальноеКт8", ТипСумма);
	
	ТаблицаДляОтчета.Колонки.Добавить("ОборотДт77", ТипСумма);
	ТаблицаДляОтчета.Колонки.Добавить("ОборотДт8", ТипСумма);
	
	ТаблицаДляОтчета.Колонки.Добавить("ОборотКт77", ТипСумма);
	ТаблицаДляОтчета.Колонки.Добавить("ОборотКт8", ТипСумма);
	
	ТаблицаДляОтчета.Колонки.Добавить("СальдоКонечноеДт77", ТипСумма);
	ТаблицаДляОтчета.Колонки.Добавить("СальдоКонечноеДт8", ТипСумма);
	
	ТаблицаДляОтчета.Колонки.Добавить("СальдоКонечноеКт77", ТипСумма);	
	ТаблицаДляОтчета.Колонки.Добавить("СальдоКонечноеКт8", ТипСумма);
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("77", Таблица77);
	Соответствие.Вставить("8", Таблица8);
	
	Для Каждого Счет Из МассивВсехСчетов Цикл
		
		СтрокаТаблицыДляОтчета = ТаблицаДляОтчета.Добавить();
		СтрокаТаблицыДляОтчета.Счет = Счет;
		
		// Перебрать все строки таблиц Таблица77 и Таблица8.  
		Для Каждого Элемент Из Соответствие Цикл
			
			НомерВерсии = Элемент.Ключ;
			ТаблицаВерсии = Элемент.Значение;
			
			// В таблице может не быть строки для счета, например, из-за расхождений данных в 7 и 8.
			СтрокаПоСчету = ТаблицаВерсии.Найти(Счет, "Счет");
			Если СтрокаПоСчету <> Неопределено Тогда	
				
				// Перебрать все колонки таблицы Таблица77 или Таблица8.
				Для Каждого Колонка Из ТаблицаВерсии.Колонки Цикл
					Если Колонка.Имя <> "Счет" Тогда
						СтрокаТаблицыДляОтчета[Колонка.Имя + НомерВерсии] = Окр(СтрокаПоСчету[Колонка.Имя], 2);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;		
			
		КонецЦикла;
		
	КонецЦикла;
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Вернуть сформированную таблицу.
	
	АдресТаблицыДляОтчета = ПоместитьВоВременноеХранилище(ТаблицаДляОтчета, ЭтаФорма.УникальныйИдентификатор);
	Возврат АдресТаблицыДляОтчета;
	
КонецФункции

&НаСервере
Функция ТабличныйДокументИзТаблицыЗначений(АдресТаблицыДляОтчета, ИмяМакетаСКД)
	
	ТаблицаДляОтчета = ПолучитьИзВременногоХранилища(АдресТаблицыДляОтчета);
	ВнешниеНаборыДанных = Новый Структура;	
	ВнешниеНаборыДанных.Вставить("ТаблицаДляОтчета", ТаблицаДляОтчета);
	
	СхемаКомпоновки = Обработки.ПереносДанныхИзИнформационныхБаз1СПредприятия77.ПолучитьМакет(ИмяМакетаСКД);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, СхемаКомпоновки.НастройкиПоУмолчанию);

    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных);

	ТабличныйДокумент = Новый ТабличныйДокумент;	
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(ТабличныйДокумент);
    ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область ОСВПоСчетуССубконто

&НаКлиенте
Функция ОСВПоСчетуССубконто77(Знач Счет8, Знач Организация77, Знач ДатаНачала, Знач ДатаКонца)
		
	//////////////////////////////////////////////////////////////////////////////
	// Если четвертый символ 0, а третий не ноль, то удаляется только четвертый.
	// Если четвертый символ 0, и третий символ 0, то удаляется оба символа.
	// Примеры:
	// 1000 -> 10
	// 1010 -> 101
	// 1011 -> 1011
	
	КодСчета8 = РеквизитСсылки(Счет8, "Код");
	
	Если Прав(КодСчета8, 2) = "00" Тогда 		
		КодСчета77 = Лев(КодСчета8, 2);	
	ИначеЕсли Прав(КодСчета8, 1) = "0" Тогда
		КодСчета77 = Лев(КодСчета8, 3);
	Иначе // КодСчета8 не содержит нулей справа, например: 1011. 
		КодСчета77 = Лев(КодСчета8, 4);	
	КонецЕсли;
			
	БухгалтерскиеИтоги = v7.CreateObject("БухгалтерскиеИтоги");	
	БухгалтерскиеИтоги.ИспользоватьРазделительУчета(Организация77);
	
	Для Счетчик = 1 по 3 Цикл
		БухгалтерскиеИтоги.ИспользоватьСубконто();
	КонецЦикла;
	
	УдалосьПолучитьИтоги = Истина;
	
	Попытка
		
		Счет77 = v7.EvalExpr("СчетПоКоду(""" + КодСчета77 + """)");
		
		// Возвращает число: 1 - запрос выполнен, 0 - запрос не выполнен.
		РезультатЗапроса = БухгалтерскиеИтоги.ВыполнитьЗапрос(ДатаНачала, ДатаКонца, Счет77);
		
		Если РезультатЗапроса = 1 Тогда	
			УдалосьПолучитьИтоги = Истина;
		ИначеЕсли РезультатЗапроса = 0 Тогда
			УдалосьПолучитьИтоги = Ложь;		
		Иначе
			ВызватьИсключение НСтр("ru = 'Метод БухгалтерскиеИтоги.ВыполнитьЗапрос() вернул значение, отличное от 0 или 1.'");			
		КонецЕсли;
		
	Исключение
		
		УдалосьПолучитьИтоги = Ложь;
		
	КонецПопытки;
	
	Если НЕ УдалосьПолучитьИтоги Тогда		
		ТекстПредупреждения = НСтр(
		"ru = 'Не удалось получить данные из 1С:Предприятие 7.7.
        |Возможно в 1С:Предприятие 7.7 не рассчитаны бухгалтерские итоги на [Дата]'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "[Дата]", Формат(ДатаКонца, "ДЛФ=DD"));
		ПоказатьПредупреждение(, ТекстПредупреждения);	
		Возврат Неопределено;	
	КонецЕсли;
	
	Массив = Новый Массив;
	
	ЕстьСубконто1 = Ложь;
	БухгалтерскиеИтоги.ВыбратьСубконто(1);	
	Пока БухгалтерскиеИтоги.ПолучитьСубконто(1) = 1 Цикл
		
		ЕстьСубконто1 = Истина;
		
		ЕстьСубконто2 = Ложь;
		БухгалтерскиеИтоги.ВыбратьСубконто(2);
		Пока БухгалтерскиеИтоги.ПолучитьСубконто(2) = 1 Цикл
			
			ЕстьСубконто2 = Истина;
			
			ЕстьСубконто3 = Ложь;
			БухгалтерскиеИтоги.ВыбратьСубконто(3);			
			Пока БухгалтерскиеИтоги.ПолучитьСубконто(3) = 1 Цикл
				
				ЕстьСубконто3 = Истина;
				
				ДобавитьСтрокуВМассивСтрокОСВПоСчетуССубконто77(
					Массив, 
					БухгалтерскиеИтоги, 
					БухгалтерскиеИтоги.ПредставлениеСубконто(1),
					БухгалтерскиеИтоги.ПредставлениеСубконто(2), 
					БухгалтерскиеИтоги.ПредставлениеСубконто(3));
				
			КонецЦикла;
			
			Если НЕ ЕстьСубконто3 Тогда
				
				ДобавитьСтрокуВМассивСтрокОСВПоСчетуССубконто77(
					Массив, 
					БухгалтерскиеИтоги, 
					БухгалтерскиеИтоги.ПредставлениеСубконто(1),
					БухгалтерскиеИтоги.ПредставлениеСубконто(2), 
					"");
				
			КонецЕсли;
			
		КонецЦикла;	
		
		Если НЕ ЕстьСубконто2 Тогда
			
			ДобавитьСтрокуВМассивСтрокОСВПоСчетуССубконто77(
				Массив,
				БухгалтерскиеИтоги,
				БухгалтерскиеИтоги.ПредставлениеСубконто(1),
				"",
				"");
				
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЕстьСубконто1 Тогда
		
		ДобавитьСтрокуВМассивСтрокОСВПоСчетуССубконто77(
			Массив, 
			БухгалтерскиеИтоги, 
			"", 
			"", 
			"");
		
	КонецЕсли;
		
	АдресТаблицы = ТаблицаЗначенийИзМассиваСтруктур(Массив);
	
	Возврат АдресТаблицы;	
	
КонецФункции

&НаКлиенте
Процедура ДобавитьСтрокуВМассивСтрокОСВПоСчетуССубконто77(Массив, БухгалтерскиеИтоги, Субконто1, Субконто2, Субконто3)
	
	СтрокаТаблицы = НоваяСтрокаТаблицыОСВПоСчетуССубконто77();
	
	СтрокаТаблицы.Субконто1 = Субконто1; 
	СтрокаТаблицы.Субконто2 = Субконто2;
	СтрокаТаблицы.Субконто3 = Субконто3;
	
	СтрокаТаблицы.НачальныйОстатокДт = БухгалтерскиеИтоги.СНД();
	СтрокаТаблицы.НачальныйОстатокКт = БухгалтерскиеИтоги.СНК();
	СтрокаТаблицы.ОборотДт = БухгалтерскиеИтоги.ДО();
	СтрокаТаблицы.ОборотКт = БухгалтерскиеИтоги.КО();
	СтрокаТаблицы.КонечныйОстатокДт = БухгалтерскиеИтоги.СКД();
	СтрокаТаблицы.КонечныйОстатокКт = БухгалтерскиеИтоги.СКК();
	
	Массив.Добавить(СтрокаТаблицы);	
	
КонецПроцедуры

&НаКлиенте
Функция НоваяСтрокаТаблицыОСВПоСчетуССубконто77()
	
	Структура = Новый Структура;
	
	Структура.Вставить("Субконто1");
	Структура.Вставить("Субконто2");
	Структура.Вставить("Субконто3");
	
	Структура.Вставить("НачальныйОстатокДт");
	Структура.Вставить("НачальныйОстатокКт");
	
	Структура.Вставить("ОборотДт");
	Структура.Вставить("ОборотКт");
	
	Структура.Вставить("КонечныйОстатокДт");
	Структура.Вставить("КонечныйОстатокКт");
	
	Возврат Структура;
	
КонецФункции

&НаСервереБезКонтекста
Функция РеквизитСсылки(Ссылка, ИмяРеквизита)
	Возврат Ссылка[ИмяРеквизита];
КонецФункции

&НаСервере
Функция ОСВПоСчетуССубконто8(Знач Счет8, Знач Организация8, Знач ДатаНачала, Знач ДатаКонца)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПРЕДСТАВЛЕНИЕ(ТиповойОстаткиИОбороты.Субконто1) КАК Субконто1,
	|	ПРЕДСТАВЛЕНИЕ(ТиповойОстаткиИОбороты.Субконто2) КАК Субконто2,
	|	ПРЕДСТАВЛЕНИЕ(ТиповойОстаткиИОбороты.Субконто3) КАК Субконто3,
	|	ТиповойОстаткиИОбороты.СуммаНачальныйОстатокДт КАК НачальныйОстатокДт,
	|	ТиповойОстаткиИОбороты.СуммаНачальныйОстатокКт КАК НачальныйОстатокКт,
	|	ТиповойОстаткиИОбороты.СуммаОборотДт КАК ОборотДт,
	|	ТиповойОстаткиИОбороты.СуммаОборотКт КАК ОборотКт,
	|	ТиповойОстаткиИОбороты.СуммаКонечныйОстатокДт КАК КонечныйОстатокДт,
	|	ТиповойОстаткиИОбороты.СуммаКонечныйОстатокКт КАК КонечныйОстатокКт
	|ИЗ
	|	РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&ДатаНачала, &ДатаКонца, Период, , Счет = &Счет, , Организация = &Организация) КАК ТиповойОстаткиИОбороты";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);	
	Запрос.УстановитьПараметр("ДатаКонца", ДатаКонца);
	Запрос.УстановитьПараметр("Счет", Счет8);
	Запрос.УстановитьПараметр("Организация", Организация8);
	
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	АдресТаблицы = ПоместитьВоВременноеХранилище(ТаблицаЗначений, ЭтаФорма.УникальныйИдентификатор);
	
	Возврат АдресТаблицы;
	
КонецФункции

&НаКлиенте
Функция ОткрытьОтчетОСВССубконто77(Знач Счет8, Знач Организация8, Знач ДатаНачала, Знач ДатаКонца) Экспорт
	
	УдалосьОткрытьОтчет = Ложь;
	
	Организация77 = Организация77(Организация8);
	
	Если Организация77 = Неопределено Тогда
		
		ПоказатьСообщениеНеУдалосьНайтиОрганизацию77(Организация8);
		
		УдалосьОткрытьОтчет = Ложь;
		Возврат УдалосьОткрытьОтчет;
		
	КонецЕсли;	
	
	АдресТаблицыДляОтчета = ОСВПоСчетуССубконто77(Счет8, Организация77, ДатаНачала, ДатаКонца);
		
	Если АдресТаблицыДляОтчета <> Неопределено Тогда
							  
		ТабличныйДокумент = ТабличныйДокументОСВССубконто(АдресТаблицыДляОтчета);
				
		ПараметрыПечати = ОбщегоНазначенияБККлиент.ПустыеПараметрыПечати();
		ПараметрыПечати.ТабличныйДокумент = ТабличныйДокумент;
		ПараметрыПечати.ВладелецФормы = ЭтаФорма;
		
		ТекстЗаголовка = НСтр("ru = 'Оборотно-сальдовая ведомость по счету [Счет] - БУК 7.7'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "[Счет]", Счет8); 
		ПараметрыПечати.ЗаголовокФормы = ТекстЗаголовка;
		
		ОбщегоНазначенияБККлиент.ОткрытьФормуПечати(ПараметрыПечати);
		
		УдалосьОткрытьОтчет = Истина;
		
	Иначе
		
		УдалосьОткрытьОтчет = Ложь;
		
	КонецЕсли;
	
	Возврат УдалосьОткрытьОтчет;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьОтчетОСВССубконто8(Знач Счет8, Знач Организация8, Знач ДатаНачала, Знач ДатаКонца) Экспорт
	
	АдресТаблицыДляОтчета = ОСВПоСчетуССубконто8(Счет8, Организация8, ДатаНачала, ДатаКонца);
	
	Если АдресТаблицыДляОтчета <> Неопределено Тогда
							  
		ТабличныйДокумент = ТабличныйДокументОСВССубконто(АдресТаблицыДляОтчета);
				
		ПараметрыПечати = ОбщегоНазначенияБККлиент.ПустыеПараметрыПечати();
		ПараметрыПечати.ТабличныйДокумент = ТабличныйДокумент;
		ПараметрыПечати.ВладелецФормы = ЭтаФорма;
		
		ТекстЗаголовка = НСтр("ru = 'Оборотно-сальдовая ведомость по счету [Счет] - БК 3.0'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "[Счет]", Счет8); 
		ПараметрыПечати.ЗаголовокФормы = ТекстЗаголовка;		
		
		ОбщегоНазначенияБККлиент.ОткрытьФормуПечати(ПараметрыПечати);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ТабличныйДокументОСВССубконто(АдресТаблицыДляОтчета)
	
	ТабличныйДокумент = ТабличныйДокументИзТаблицыЗначений(АдресТаблицыДляОтчета, "ОСВССубконто");
	
	
		
	//////////////////////////////////////////////////////////////////////////////
	// Удалить строки с пустыми субконто, чтобы у счетов без субконто,
	// или с одним субконто, или с двумя субконто не выводилось пустых строк.
	
	ВсеСтрокиПустыхСубконоУдалены = Ложь;
	
	Пока НЕ ВсеСтрокиПустыхСубконоУдалены Цикл
		
		ВсеСтрокиПустыхСубконоУдалены = Истина;
		
		Для НомерСтроки = 1 По ТабличныйДокумент.ВысотаТаблицы Цикл
			
			Область = ТабличныйДокумент.Область(НомерСтроки, , НомерСтроки);
			
			СубконтоПустое = ?(Область.Текст = "", Истина, Ложь);
			
			Если СубконтоПустое Тогда
				ТабличныйДокумент.УдалитьОбласть(Область, ТипСмещенияТабличногоДокумента.ПоВертикали);
				ВсеСтрокиПустыхСубконоУдалены = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Выравнить заголовки шапки.
	
	Для Колонка = 2 По 7 Цикл
		Область = ТабличныйДокумент.Область(1, Колонка, 1, Колонка);	
		Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;	
	КонецЦикла;
	
	Для Колонка = 2 По 7 Цикл
		Область = ТабличныйДокумент.Область(2, Колонка, 2, Колонка);	
		Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;	
	КонецЦикла;
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Скрыть группиировки.
	
	ТабличныйДокумент.ОтображатьГруппировки = Ложь;
	
	
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаКлиенте
Функция ДанныеИБСовпадаютСДаннымиИз77()
	
	ДанныеСовпадают = ОСВПоГруппамСовпадают();
		
	Если НЕ ДанныеСовпадают Тогда
		
		Ошибка = ТаблицаОшибок.Добавить();
		Ошибка.Этап = Этап_Проверка();
		Ошибка.Кратко = НСтр("ru = 'Оборотно-сальдовые ведомости в 1С:Предприятии 7.7 и текущей базе не совпадают.'");
		Ошибка.Подробно = НСтр("ru = 'Оборотно-сальдовые ведомости в 1С:Предприятии 7.7 и текущей базе не совпадают.'");
		Ошибка.Рекомендация = НСтр("ru = 'Воспользуйтесь командой ""Сравнить данные"", чтобы выяснить по каким счетам имеются расхождения.'");		
		
	КонецЕсли;
	
	Возврат ДанныеСовпадают;
	
КонецФункции

&НаКлиенте
Функция ОСВПоГруппамСовпадают()
	
	Если ВариантПереноса = ВариантПереноса_Справочники() Тогда
		ДатаНачала = ПериодНачало;
		ДатаКонца = ПериодНачало;
	ИначеЕсли ВариантПереноса = ВариантПереноса_Остатки() Тогда
		ДатаНачала = ПериодНачало;
		ДатаКонца = ПериодНачало;		
	ИначеЕсли ВариантПереноса = ВариантПереноса_ОстаткиИОбороты() Тогда
		ДатаНачала = ПериодНачало;
		ДатаКонца = ПериодКонец;		
	Иначе
		ВызватьИсключение НСтр("ru = 'Не удалось найти обработчик для указанного варианта переноса данных.'");	
	КонецЕсли;
	
	СтрокаТаблицыОрганизации = ВыбраннаяОрганизация(ЭтаФорма);
	
	Организация77 = МассивОрганизаций77[СтрокаТаблицыОрганизации.ИндексМассива];	
	АдресТаблицы77 = ОСВПоСчетамБезСубконто77(Организация77, ДатаНачала, ДатаКонца, Истина);				
	
	Если АдресТаблицы77 = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Организация8 = Организация8(СтрокаТаблицыОрганизации.Код, Истина);
	АдресТаблицы8 = ОСВПоСчетамБезСубконто8(Организация8, ДатаНачала, ДатаКонца, Истина);
	
	Если АдресТаблицы8 = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	АдресТаблицыДляОтчета = АдресТаблицыДляОтчетаСравнениеОСВБезСубконто(АдресТаблицы77, АдресТаблицы8);	
	
	Совпадают = ОСВПоГруппамСовпадаютНаСервере(АдресТаблицыДляОтчета);	
	
	Возврат Совпадают;
	
КонецФункции

&НаСервере
Функция ОСВПоГруппамСовпадаютНаСервере(АдресТаблицы)
	
	Таблица = ПолучитьИзВременногоХранилища(АдресТаблицы);
	
	Совпадают = Истина;
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		Если СтрокаТаблицы.СальдоНачальноеДт77 <> СтрокаТаблицы.СальдоНачальноеДт8 Тогда
			Совпадают = Ложь;
			Прервать;
		КонецЕсли;
		
		Если СтрокаТаблицы.СальдоНачальноеКт77 <> СтрокаТаблицы.СальдоНачальноеКт8 Тогда
			Совпадают = Ложь;
			Прервать;
		КонецЕсли;

		Если СтрокаТаблицы.ОборотДт77 <> СтрокаТаблицы.ОборотДт8 Тогда
			Совпадают = Ложь;
			Прервать;
		КонецЕсли;
		
		Если СтрокаТаблицы.ОборотКт77 <> СтрокаТаблицы.ОборотКт8 Тогда
			Совпадают = Ложь;
			Прервать;
		КонецЕсли;
		
		Если СтрокаТаблицы.СальдоКонечноеДт77 <> СтрокаТаблицы.СальдоКонечноеДт8 Тогда
			Совпадают = Ложь;
			Прервать;
		КонецЕсли;

		Если СтрокаТаблицы.СальдоКонечноеКт77 <> СтрокаТаблицы.СальдоКонечноеКт8 Тогда
			Совпадают = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Совпадают;
	
КонецФункции

&НаСервере
Функция ТаблицаЗначенийИзМассиваСтруктур(Массив)
	
	Если Массив.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'В массиве должен быть хотя бы один элемент.'");	
	КонецЕсли;
	
	Структура = Массив[0];
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	// Создать колонки таблицы по первой структуре из массива.
	// Предполагается, что все структуры в массиве одинаковые.
	Для Каждого ЭлементСтруктуры Из Структура Цикл
		ТаблицаЗначений.Колонки.Добавить(ЭлементСтруктуры.Ключ);
	КонецЦикла;
	
	Для Каждого Структура Из Массив Цикл
		СтрокаТаблицы = ТаблицаЗначений.Добавить();
		Для Каждого ЭлементСтруктуры Из Структура Цикл
			СтрокаТаблицы[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
		КонецЦикла;
	КонецЦикла;
		
	АдресТаблицы = ПоместитьВоВременноеХранилище(ТаблицаЗначений, ЭтаФорма.УникальныйИдентификатор);
		
	Возврат АдресТаблицы;
	
КонецФункции

&НаКлиенте
Функция БухгалтерскиеИтогиРассчитаны()
	
	ИтогиРассчитаны = Истина;
	
	Попытка
		
		БухгалтерскиеИтоги = v7.CreateObject("БухгалтерскиеИтоги");
		
		// <ФлагСчета> - необязательный параметр. Признак развертывания сальдо по субсчетам основного счета. Число:
		// 0 - не разворачить по субсчетам. 
		// 1 - разворачивать по субсчетам. 
		// -1 (минус единица) - не выдавать итоги по счетам-группам. 
		БухгалтерскиеИтоги.ВключатьСубсчета(0);
		
		// Возвращает число: 1 - запрос выполнен, 0 - запрос не выполнен.
		РезультатЗапроса = БухгалтерскиеИтоги.ВыполнитьЗапрос(ПериодНачало, ПериодКонец);
		
		Если РезультатЗапроса = 1 Тогда	
			ИтогиРассчитаны = Истина;
		Иначе
			ИтогиРассчитаны = Ложь;		
		КонецЕсли;
		
	Исключение
		
		ИтогиРассчитаны = Ложь;	
		
	КонецПопытки;
	
	Возврат ИтогиРассчитаны;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеФайл

#Область Прочие

&НаСервере
Функция СведенияОФайлеВыгруженномИз77(АдресФайла)
	
	Сведения = Новый Структура;
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);	
	ИмяВременноФайла = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанныеФайла.Записать(ИмяВременноФайла);
	
	ЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		
		ЧтениеXML.ОткрытьФайл(ИмяВременноФайла);
		ЧтениеXML.Прочитать();
			
		ТипДата = Тип("Дата");
		
		Конфигурация = ЧтениеXML.ПолучитьАтрибут("Конфигурация");
		Сведения.Вставить("Файл_Конфигурация", Конфигурация);
		
		НомерРелиза = ЧтениеXML.ПолучитьАтрибут("НомерРелиза");
		Сведения.Вставить("Файл_НомерРелиза", НомерРелиза);
		
		ОрганизацияНаименование = ЧтениеXML.ПолучитьАтрибут("Организация");
		Сведения.Вставить("Файл_ОрганизацияНаименование", СокрЛП(ОрганизацияНаименование));
		
		ОрганизацияКод = ЧтениеXML.ПолучитьАтрибут("ОрганизацияКод");
		Сведения.Вставить("Файл_ОрганизацияКод", СокрЛП(ОрганизацияКод));
		
		НачалоПериодаВыгрузки = XMLЗначение(ТипДата, СокрП(ЧтениеXML.ПолучитьАтрибут("НачалоПериодаВыгрузки")));
		Сведения.Вставить("Файл_ПериодНачало", НачалоПериодаВыгрузки);
		
		ОкончаниеПериодаВыгрузки = XMLЗначение(ТипДата, СокрП(ЧтениеXML.ПолучитьАтрибут("ОкончаниеПериодаВыгрузки")));
		Сведения.Вставить("Файл_ПериодКонец", ОкончаниеПериодаВыгрузки);
		
		ДатаВыгрузки = XMLЗначение(ТипДата, СокрП(ЧтениеXML.ПолучитьАтрибут("ДатаВыгрузки")));
		Сведения.Вставить("Файл_ДатаВыгрузки", ДатаВыгрузки);
		
		ЧтениеXML.Закрыть();
		
	Исключение
		
		ЧтениеXML.Закрыть();
		Сведения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	УдалитьВременныйФайл(ИмяВременноФайла);
	
	Возврат Сведения;
	
КонецФункции

#КонецОбласти

#Область СтраницаФайлПрогресс

&НаКлиенте
Процедура ПеренестиДанныеИзФайла() Экспорт
	
	УстановитьНачальнуюСтраницуВсехЭтапов();
	
	Элементы.ФайлПрогресс_Шапка.ТекущаяСтраница = Элементы.ФайлПрогресс_Выполняется;
	
	// Если удалось выполнить переход на страницу Шапка_ФайлПрогресс,
	// то выбран корректный файл и сейчас начнется загрузка из файла.	
	УстановитьСтраницуЭтапа(Источник_Файл(), Этап_Загрузка(), СостояниеЭтапа_Выполняется());	
	Элементы.ФайлПрогресс_Результат.ТекущаяСтраница = Элементы.ФайлПрогресс_Прогресс;
	
	ТаблицаОшибок.Очистить();
	
	ПодключитьОбработчикОжидания("ПродолжитьПереносДанныхИзФайлаПослеПереходаНаСтраницу", 0.1, Истина); 
		
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПереносДанныхИзФайлаПослеПереходаНаСтраницу()
	
	ФайлВыгруженныйИз77 = ПолучитьИзВременногоХранилища(Файл_АдресФайла);
	
	Файл_ЗагрузкаУспешноЗавершена = ЗагрузитьДанныеИзФайлаВыгруженногоИз77(ФайлВыгруженныйИз77);	
	
	Если Файл_ЗагрузкаУспешноЗавершена Тогда
		
		УстановитьСтраницуЭтапа(Источник_Файл(), Этап_Загрузка(), СостояниеЭтапа_ВыполненУспешно());
		УстановитьСтраницуЭтапа(Источник_Файл(), Этап_Проведение(), СостояниеЭтапа_Выполняется());
		
	Иначе
		
		УстановитьСтраницуЭтапа(Источник_Файл(), Этап_Загрузка(), СостояниеЭтапа_ВозниклаОшибка());
		Элементы.ФайлПрогресс_Результат.ТекущаяСтраница = Элементы.ФайлПрогресс_Ошибка;
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ПродолжитьПереносДанныхИзФайлаПослеЗагрузкиДанных", 0.1, Истина); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПереносДанныхИзФайлаПослеЗагрузкиДанных()
	
	Если Файл_ЗагрузкаУспешноЗавершена Тогда
	
		Организация = Организация8(Файл_ОрганизацияКод, Истина);
		УстановитьУчетнуюПолитикуИСоответствиеСчетов(Организация);
		
		ВсеДокументыУспешноПроведены = ПровестиДокументы(Организация);
		ВсеДокументыЗаполнены = ПроверитьЗаполнениеПроведенныхДокументов(Организация);

		Если ВсеДокументыУспешноПроведены И ВсеДокументыЗаполнены Тогда
			
			УстановитьСтраницуЭтапа(Источник_Файл(), Этап_Проведение(), СостояниеЭтапа_ВыполненУспешно());
			Элементы.ФайлПрогресс_Результат.ТекущаяСтраница = Элементы.ФайлПрогресс_Успех;
			
		Иначе
			
			УстановитьСтраницуЭтапа(Источник_Файл(), Этап_Проведение(), СостояниеЭтапа_ВозниклаОшибка());
			Элементы.ФайлПрогресс_Результат.ТекущаяСтраница = Элементы.ФайлПрогресс_Ошибка;
			
		КонецЕсли;

	КонецЕсли;
	
	ОбновитьПовторноИспользуемыеЗначения();
	ОбновитьИнтерфейс();
	
	Элементы.ФайлПрогресс_Шапка.ТекущаяСтраница = Элементы.ФайлПрогресс_Завершено;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОтображениеЭтаповВыгрузкиЗагрузки

&НаКлиенте
Процедура УстановитьСтраницуЭтапа(Источник, Этап, СостояниеЭтапа)
	
	МассивВидов = Новый Массив;
	МассивВидов.Добавить("Картинка");
	МассивВидов.Добавить("Надпись");
	
	Для Каждого Вид Из МассивВидов Цикл
		
		// Например: ИБ_Подключение_Картинка.
		Источник_Этап_Вид = Элементы[Источник + "_" + Этап + "_" + Вид];
		
		// Например: ИБ_Подключение_Картинка_НеВыполнялся.
		Источник_Этап_Вид_СостояниеЭтапа = Элементы[Источник + "_" + Этап + "_" + Вид + "_" + СостояниеЭтапа];	
		
		// Например: ИБ_Подключение_Картинка.ТекущаяСтраница = ИБ_Подключение_Картинка_НеВыполнялся.
		Источник_Этап_Вид.ТекущаяСтраница = Источник_Этап_Вид_СостояниеЭтапа;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНачальнуюСтраницуВсехЭтапов()
	
	МассивЭтаповИБ = Новый Массив;
	МассивЭтаповИБ.Добавить(Этап_Подключение());
	МассивЭтаповИБ.Добавить(Этап_Выгрузка());
	МассивЭтаповИБ.Добавить(Этап_Загрузка());
	МассивЭтаповИБ.Добавить(Этап_Проведение());
	МассивЭтаповИБ.Добавить(Этап_Проверка());
	
	МассивЭтаповФайла = Новый Массив;
	МассивЭтаповФайла.Добавить(Этап_Загрузка());
	МассивЭтаповФайла.Добавить(Этап_Проведение());
	
	СтруктураЭтапов = Новый Структура;
	СтруктураЭтапов.Вставить(Источник_ИБ(), МассивЭтаповИБ); 
	СтруктураЭтапов.Вставить(Источник_Файл(), МассивЭтаповФайла); 
	
	Для Каждого Этапы Из СтруктураЭтапов Цикл
		
		Источник = Этапы.Ключ;
		МассивЭтапов = Этапы.Значение;
		
		Для Каждого Этап Из МассивЭтапов Цикл	
			УстановитьСтраницуЭтапа(Источник, Этап, СостояниеЭтапа_НеВыполнялся());
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция Источник_Файл()
	Возврат "Файл";	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Источник_ИБ()
	Возврат "ИБ";	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Этап_Подключение()
	Возврат "Подключение";	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Этап_Выгрузка()
	Возврат "Выгрузка";	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Этап_Загрузка()
	Возврат "Загрузка";	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Этап_Проведение()
	Возврат "Проведение";	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Этап_Проверка()
	Возврат "Проверка";	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СостояниеЭтапа_НеВыполнялся()
	Возврат "НеВыполнялся";	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СостояниеЭтапа_Выполняется()
	Возврат "Выполняется";	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СостояниеЭтапа_ВыполненУспешно()
	Возврат "ВыполненУспешно";	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СостояниеЭтапа_ВозниклаОшибка()
	Возврат "ВозниклаОшибка";	
КонецФункции

#КонецОбласти

#Область Прочие

&НаСервере
Процедура СкрытьЗакладкиСтраниц()
	
	Элементы.Шапка.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.Подвал.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;	
	Элементы.СтраницыПроверкаПодключения.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;	
	Элементы.ИБПрогресс_Шапка.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;	
	Элементы.ИБПрогресс_Результат.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;	
	Элементы.ФайлПрогресс_Шапка.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;	
	Элементы.ФайлПрогресс_Шапка.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;	
	Элементы.ФайлПрогресс_Результат.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУчетнуюПолитикуИСоответствиеСчетов(Организация)
	
	ОбновлениеИнформационнойБазыБК.ЗаполнитьРегистрыУчетнойПолитикиПоУмолчанию(Организация);
	УстановитьСоответствиеСчетов(Организация);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСоответствиеСчетов(Организация)
	
	ДатаДляДокумента = ПериодНачало - (60 * 60 * 24);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ДатаДляДокумента);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УстановкаСоответствияСчетовБУиНУ.Ссылка
	|ИЗ
	|	Документ.УстановкаСоответствияСчетовБУиНУ КАК УстановкаСоответствияСчетовБУиНУ
	|ГДЕ
	|	УстановкаСоответствияСчетовБУиНУ.Дата = &Дата";
	
	Пустой = Запрос.Выполнить().Пустой();
	
	Если Пустой Тогда 
		
		УстановкаСоответствияСчетов = Документы.УстановкаСоответствияСчетовБУиНУ.СоздатьДокумент();
		
		УстановкаСоответствияСчетов.Дата = ДатаДляДокумента;
		УстановкаСоответствияСчетов.Организация = Организация;
		Документы.УстановкаСоответствияСчетовБУиНУ.ЗаполнитьСоответствиеСчетовБУиНУПоУмолчанию(УстановкаСоответствияСчетов);
		
		УстановкаСоответствияСчетов.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция Организация8(КодОрганизации77, ВызыватьИсключение)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Код = &Код";
	
	КодОрганизации8 = "0" + КодОрганизации77;
	Запрос.УстановитьПараметр("Код", КодОрганизации8);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		
		Выборка.Следующий();
		Организация8 = Выборка.Ссылка;
		
	ИначеЕсли Выборка.Количество() = 0 Тогда
		
		Организация8 = Неопределено;
		
		Если ВызыватьИсключение Тогда
			ТекстИсключения = НСтр("ru = 'В текущей информационной базе не удалось найти организацию, загруженную из 1С:Предприятие 7.7. Поиск выполнялся по коду: [Код].'");
			ТекстИсключения = СтрЗаменить(ТекстИсключения, "[Код]", КодОрганизации77);
			ВызватьИсключение ТекстИсключения;	
		КонецЕсли;
		
	Иначе // Выборка.Количество() > 1
		
		Организация8 = Неопределено;	
		
		Если ВызыватьИсключение Тогда
			ТекстИсключения = НСтр("ru = 'В текущей информационной базе найдено более одной организации, загруженной из 1С:Предприятие 7.7. Поиск выполнялся по коду: [Код].'");
			ТекстИсключения = СтрЗаменить(ТекстИсключения, "[Код]", КодОрганизации77);
			ВызватьИсключение ТекстИсключения;	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Организация8;
	
КонецФункции

&НаКлиенте
Функция Организация77(Знач Организация8)
	
	КодОрганизации77 = КодОрганизации77(Организация8);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Код", КодОрганизации77);
	
	НайденныеСтроки = ТаблицаОрганизации.НайтиСтроки(ПараметрыОтбора);
		
	Если НайденныеСтроки.Количество() = 1 Тогда
		
		ИндексМассива77 = НайденныеСтроки[0].ИндексМассива;
		Организация77 = МассивОрганизаций77[ИндексМассива77];
		
	Иначе
		
		Организация77 = Неопределено;
		
	КонецЕсли;
	
	Возврат Организация77;
	
КонецФункции

&НаСервереБезКонтекста
Функция КодОрганизации77(Знач Организация8)
	
	КодОрганизации8 = РеквизитСсылки(Организация8, "Код");
	КодОрганизации77 = Сред(КодОрганизации8, 2);
	КодОрганизации77 = СокрЛП(КодОрганизации77);
	
	Возврат КодОрганизации77;
	
КонецФункции

&НаСервере
Функция ПровестиДокументы(Организация)
	
	Выборка = НоваяВыборкаДокументов(Организация, Ложь);
	
	ВсеДокументыУспешноПроведены = Истина;
	
	Пока Выборка.Следующий() Цикл
		
		ДокументСсылка = Выборка.Ссылка;
		
		Если ДокументСсылка.Метаданные().Реквизиты.Найти("РучнаяКорректировка") <> Неопределено Тогда 
			РучнаяКорректировка = ДокументСсылка.РучнаяКорректировка;
		Иначе
			РучнаяКорректировка = Ложь;
		КонецЕсли;
		
		Если ДокументСсылка.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			РазрешитьПроведение = Истина;	
		Иначе
			РазрешитьПроведение = Ложь;	
		КонецЕсли;
		
		Если (РазрешитьПроведение) И (НЕ РучнаяКорректировка) Тогда
			
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			
			Попытка
				
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				
			Исключение                                            
				
				ВсеДокументыУспешноПроведены = Ложь;
				
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				
				Ошибка = ТаблицаОшибок.Добавить();
				Ошибка.Этап = Этап_Проведение();
				Ошибка.Кратко = НСтр("ru = 'Не удалось провести документ: ""[Ссылка]"".'");
				Ошибка.Кратко = СтрЗаменить(Ошибка.Кратко, "[Ссылка]", ДокументСсылка);
				Ошибка.Подробно = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				Ошибка.Рекомендация = НСтр("ru = 'Попытайтесь провести данный документ самостоятельно.'");
				Ошибка.Ссылка = ДокументСсылка;
				
			КонецПопытки;				
			
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат ВсеДокументыУспешноПроведены;
	
КонецФункции

&НаСервере
Функция ПроверитьЗаполнениеПроведенныхДокументов(Организация)
	
	Выборка = НоваяВыборкаДокументов(Организация, Истина);
	
	ВсеДокументыЗаполнены = Истина;
	
	Пока Выборка.Следующий() Цикл
		
		ДокументСсылка = Выборка.Ссылка; 
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		
		// Некоторые документы проводятся в обработке УниверсальныйОбменДаннымиXML 
		// с флагом ОбменДанными.Загрузка = Истина, 
		// поэтому данная проверка носит уведомительный характер.
		Если НЕ ДокументОбъект.ПроверитьЗаполнение() Тогда
			
			ВсеДокументыЗаполнены = Ложь;
			
			Ошибка = ТаблицаОшибок.Добавить();
			Ошибка.Этап = Этап_Проведение();
			Ошибка.Кратко = НСтр("ru = 'В документе ""[Ссылка]"" заполнены не все обязательные реквизиты.'");
			Ошибка.Кратко = СтрЗаменить(Ошибка.Кратко, "[Ссылка]", ДокументСсылка);
			Ошибка.Подробно = "";
			Ошибка.Рекомендация = НСтр("ru = 'Попытайтесь провести данный документ самостоятельно.'");
			Ошибка.Ссылка = ДокументСсылка;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат ВсеДокументыЗаполнены;
		
КонецФункции

&НаСервере
Функция НоваяВыборкаДокументов(Организация, Проведен)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "";
	
	ЭтоПервыйДокумент = Истина;
	
	Для Каждого Документ ИЗ Метаданные.Документы Цикл
		
		Если Документ.Реквизиты.Найти("Организация") <> Неопределено Тогда
			
			Шаблон = 
			"[ОбъединитьВсе]
			|ВЫБРАТЬ Док.Ссылка КАК Ссылка, Док.МоментВремени КАК МоментВремени 
			|ИЗ Документ.[ИмяДокумента] КАК Док
			|ГДЕ (НЕ Док.ПометкаУдаления) И (Док.Проведен = &Проведен) И (Док.Дата >= &ДатаНачала) И (Док.Организация = &Организация)";
			
			Если ЭтоПервыйДокумент Тогда
				Шаблон = СтрЗаменить(Шаблон, "[ОбъединитьВсе]", "");
				ЭтоПервыйДокумент = Ложь;
			Иначе
				Шаблон = СтрЗаменить(Шаблон, "[ОбъединитьВсе]", "ОБЪЕДИНИТЬ ВСЕ");	
			КонецЕсли;
			
			Шаблон = СтрЗаменить(Шаблон, "[ИмяДокумента]", Документ.Имя);			
			Шаблон = СокрЛП(Шаблон); 
			
			Запрос.Текст = Запрос.Текст + Символы.ПС + Шаблон;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + Символы.ПС + "УПОРЯДОЧИТЬ ПО МоментВремени";	
	Запрос.УстановитьПараметр("Организация", Организация);	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ПериодНачало - 1));	
	Запрос.УстановитьПараметр("Проведен", Проведен);		
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

&НаСервере
Функция АдресТаблицыОшибок()
	
	ТаблицаЗначений = РеквизитФормыВЗначение("ТаблицаОшибок");
	АдресТаблицы = ПоместитьВоВременноеХранилище(ТаблицаЗначений, ЭтаФорма.УникальныйИдентификатор);
	
	Возврат АдресТаблицы;
	
КонецФункции

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ПЕРЕМЕННЫХ ФОРМЫ

#Область ИнициализацияПеременныхФормы

v7 = Неопределено;
МассивОрганизаций77 = Новый Массив;
СлужебныеФайлыИБ = Неопределено;

#КонецОбласти
