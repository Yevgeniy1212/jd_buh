
////////////////////////////////////////////////////////////////////////////////
// Описание формы
// Параметры формы:
//  АдресХранилищаТовары - Произвольный - адрес хранилища, в котором размещается табличная часть при передаче между формами исходного документа и обработки
//  ДокументВалюта - СправочникСсылка.Валюты - валюта, указанная в исходном документе
//  ДокументДата  - Дата - дата, указанная в исходном документе
//  ДокументКратность - Число, 10,0 - кратность, указанная в исходном документе
//  ДокументКурс   - Число 10,4 - курс, указанный в исходном документе
//  ДокументОрганизация  - СправочникСсылка.Организации - организация, указанная в исходном документе
//  ДокументСсылка - ДокументСсылка - ссылка на исходный документ
//  ДокументСуммаВключаетАкциз  - Булево - содержит признак исходного документа СуммаВключаетАкциз
//  ДокументСуммаВключаетНДС    - Булево - содержит признак исходного документа СуммаВключаетНДС
//  ДокументТипЦен       - Справочник.ТипыЦенНоменклатуры - тип цен, указанный в исходном документе
//  ДокументУчитыватьАкциз - Булево - содержит признак исходного документа УчитыватьАкциз
//  ДокументУчитыватьНДС   - Булево - содержит признак исходного документа УчитыватьНДС
//	Заголовок  			   - Произвольный - содержит заголовок табличной части

////////////////////////////////////////////////////////////////////////////////

// используется для определения необходимости закрытия окна обработки в случае закрытия окна без сохранения значений
&НаКлиенте
Перем ФормаЗакрыта;
// используется для хранения данных параметров документа основания с целью дальнейшего использовнаия в процедурах пересчета табличных частей 
&НаКлиенте
Перем СтруктураДляРасчета;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

 &НаКлиенте
 Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	 	
		
	Если ФормаЗакрыта Тогда
		Возврат;
	КонецЕсли;

	Если ЗавершениеРаботы Тогда
		Возврат;	
	КонецЕсли;
	
	Если НЕ ФормаЗакрыта И Модифицированность И НЕ ПеренестиВДокумент И Объект.Товары.Количество() > 0 Тогда
		
		Режим =  РежимДиалогаВопрос.ДаНетОтмена;
		ТекстВопроса = НСтр("ru = 'Перенести изменения в документ?'");
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Отказ", Отказ);
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПередЗакрытием", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;

	КонецЕсли;
	
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПередЗакрытием(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		ПеренестиВДокумент = Истина;
		ФормаЗакрыта = Истина;
		Закрыть();
	ИначеЕсли  Результат = КодВозвратаДиалога.Нет Тогда
		ФормаЗакрыта = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;	
	КонецЕсли;
	
	ПриЗакрытииФормыНаСервере();

	Если ПеренестиВДокумент Тогда
		
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("ИдентификаторВызывающейФормы", 					ВладелецФормы.УникальныйИдентификатор);
		ПараметрОповещения.Вставить("АдресОбработаннойТабличнойЧастиТоварыВХранилище", 	АдресХранилищаТовары);
		Оповестить("ОбработанаТабличнаяЧастьТовары", ПараметрОповещения, ВладелецФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ФормаЗакрыта = Ложь;
	
	СтруктураДляРасчета = Новый Структура;
	СтруктураДляРасчета.Вставить("ВалютаДокумента", 		ДокументВалюта);
	СтруктураДляРасчета.Вставить("КурсВзаиморасчетов", 		ДокументКурс);
	СтруктураДляРасчета.Вставить("КратностьВзаиморасчетов", ДокументКратность);
	СтруктураДляРасчета.Вставить("УчитыватьНДС",			ДокументУчитыватьНДС);
	СтруктураДляРасчета.Вставить("УчитыватьАкциз", 			ДокументУчитыватьАкциз);
	СтруктураДляРасчета.Вставить("СуммаВключаетНДС", 		ДокументСуммаВключаетНДС);
	СтруктураДляРасчета.Вставить("СуммаВключаетАкциз", 		ДокументСуммаВключаетАкциз);
	СтруктураДляРасчета.Вставить("Дата", 		            ДокументДата);
	
	Если Тип("ДокументСсылка.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов") = ТипЗнч(ДокументСсылка) Тогда
		//для того, чтобы сумма рассчиталась от суммы регл. При передаче данных в документ, оборот реалиации рассчитается, с учетом доп.расходов
		//и сумма НДС в документе пересчитается.
		СтруктураДляРасчета.Вставить("ЗначениеОборотПоРеализации", Ложь);
	Иначе
		
		СтруктураДляРасчета.Вставить("ЗначениеОборотПоРеализации", Тип("ДокументСсылка.РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС") = ТипЗнч(ДокументСсылка)
																	ИЛИ Тип("ДокументСсылка.СчетФактураВыданный") = ТипЗнч(ДокументСсылка));
	КонецЕсли;
																
	ПриИзмененииТекущегоДействия();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Параметры.АдресХранилищаТовары) Тогда
		ТекстСообщения = НСтр("ru='Непосредственное открытие обработки изменения таблицы товаров не предусмотрено. 
				|Для открытия обработки можно воспользоваться командой ""Изменить"" в формах документов'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	//заполним реквизиты формы из переданных параметров
	СписокСвойств = "АдресХранилищаТовары,  ДокументСсылка, ДокументДата, ДокументОрганизация,
		|ДокументВалюта, ДокументКурс, ДокументКратность, ДокументСуммаВключаетНДС, ДокументУчитыватьАкциз, ДокументУчитыватьНДС, ДокументТипЦен, ДокументСуммаВключаетАкциз";
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры, СписокСвойств);
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(Параметры.АдресХранилищаТовары);
	Объект.Товары.Загрузить(ТаблицаТоваров);
	
	//Установим пометку и заполним номер строки документа
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		СтрокаТабличнойЧасти.Пометка 					= Истина;
		СтрокаТабличнойЧасти.НомерСтрокиДокумента 		= СтрокаТабличнойЧасти.НомерСтроки;
		СтрокаТабличнойЧасти.НоменклатураДоИзменения 	= СтрокаТабличнойЧасти.Номенклатура;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Параметры.Заголовок) Тогда
		АвтоЗаголовок = Ложь;
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Обработка табличной части: %1'"), Параметры.Заголовок);
	КонецЕсли;

	ИмяТаблицы = "Товары";
	
	ПодготовитьФормуНаСервере(); 	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ТекущееДействиеПриИзменении(Элемент)

	// Установим элементы формы в зависимости от выбранного действия
	ПриИзмененииТекущегоДействия();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Товары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)

	Модифицированность = Истина;
	ОбновитьИтоги(ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.КлючСвязи = ОбщегоНазначенияБККлиентСервер.НовыйКлючСвязиСтрокиТаблицы(Объект.Товары);
	КонецЕсли;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыСтроки = Новый Структура("Номенклатура, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС,
		|НомерГТД, СтранаПроисхождения, КоличествоМест, ЕдиницаИзмерения, Коэффициент, 
		|СчетУчета, СчетДоходов, СтавкаАкциза, КоэффициентАкциза, Валюта");
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, СтрокаТабличнойЧасти);		
	
	НоменклатураПриИзмененииНаСервере(ПараметрыСтроки);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ПараметрыСтроки);
	Если ЗначениеЗаполнено(ДокументВалюта) Тогда
		СтрокаТабличнойЧасти.Валюта = ДокументВалюта;
	КонецЕсли;
	
	РассчитатьСуммыСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПоказыватьСуммуНДС, ДокументСуммаВключаетНДС, ПоказыватьСуммуАкциза, ДокументСуммаВключаетАкциз, СтруктураДляРасчета);
	
	//очистим номер строки документа при изменении номенклатуры, чтобы при переносе в документ сработали обработчики заполнения документа
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерСтрокиДокумента) И 
		СтрокаТабличнойЧасти.НоменклатураДоИзменения <> СтрокаТабличнойЧасти.Номенклатура Тогда
		СтрокаТабличнойЧасти.НомерСтрокиДокумента = 0;
	КонецЕсли;
	СтрокаТабличнойЧасти.НоменклатураДоИзменения = СтрокаТабличнойЧасти.Номенклатура;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.Коэффициент = 1;

КонецПроцедуры  

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммыСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПоказыватьСуммуНДС, ДокументСуммаВключаетНДС, ПоказыватьСуммуАкциза, ДокументСуммаВключаетАкциз, СтруктураДляРасчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммыСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПоказыватьСуммуНДС, ДокументСуммаВключаетНДС, ПоказыватьСуммуАкциза, ДокументСуммаВключаетАкциз, СтруктураДляРасчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти);
	Если ПоказыватьСуммуНДС Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, СтруктураДляРасчета);
	КонецЕсли;
	
	Если ПоказыватьСуммуАкциза Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуАкцизаТабЧасти(СтрокаТабличнойЧасти, СтруктураДляРасчета);
	КонецЕсли;

	ПересчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС, ДокументСуммаВключаетАкциз);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если ПоказыватьСуммуНДС Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, СтруктураДляРасчета);
		ПересчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС, ДокументСуммаВключаетАкциз);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ПересчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС, ДокументСуммаВключаетАкциз);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаАкцизаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ПересчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС, ДокументСуммаВключаетАкциз);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаАкцизаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если ПоказыватьСуммуАкциза Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуАкцизаТабЧасти(СтрокаТабличнойЧасти, СтруктураДляРасчета);
		ПересчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС, ДокументСуммаВключаетАкциз);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	ПеренестиВДокумент = Истина;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействие(Команда)

	Если ТекущееДействие = "ДобавитьИзДокумента" Тогда   		
		
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияДокумент) Тогда
			ТекстСообщения = НСтр("ru = 'Не указан документ, из которого добавляются строки списка'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияДокумент");
			Возврат;
		КонецЕсли;
		
		ДобавитьДанныеИзДокумента(ВариантЗначенияДокумент, СтруктураДляРасчета);
		
	ИначеЕсли ТекущееДействие = "УстановитьЦеныПоТипу" Тогда     
		
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияТипЦенНоменклатуры) Тогда
			ТекстСообщения = НСтр("ru = 'Не указан тип цен номенклатуры'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияТипЦенНоменклатуры");
			Возврат;
		КонецЕсли;
		
		УстановитьЦеныПоТипу(ВариантЗначенияТипЦенНоменклатуры, СтруктураДляРасчета);
		
	ИначеЕсли ТекущееДействие = "РаспределитьСуммуПоСуммам" Тогда    	
	
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияЧислоСумма) Тогда
			ТекстСообщения = НСтр("ru = 'Не указана сумма распределения! Распределение невозможно'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияЧислоСумма");
			Возврат;
		КонецЕсли;
		
		РаспределитьСуммуПоКолонке("Сумма", ВариантЗначенияЧислоСумма, СтруктураДляРасчета);
		
	ИначеЕсли ТекущееДействие = "РаспределитьСуммуПоКоличеству" Тогда 		
		
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияЧислоСумма) Тогда
			ТекстСообщения = НСтр("ru = 'Не указана сумма распределения! Распределение невозможно'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияЧислоСумма");
			Возврат;
		КонецЕсли;
		
		РаспределитьСуммуПоКолонке("Количество", ВариантЗначенияЧислоСумма, СтруктураДляРасчета);
		
	ИначеЕсли ТекущееДействие = "ИзменитьЦеныНаПроцент" Тогда    
		
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияЧислоПроцент) Тогда
			ТекстСообщения = НСтр("ru = 'Не указан процент'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияЧислоПроцент");
			Возврат;
		КонецЕсли;
		
		ИзменитьЦенуНаПроцент(ВариантЗначенияЧислоПроцент, СтруктураДляРасчета);
		
	ИначеЕсли ТекущееДействие = "ОкруглитьЦеныДо" Тогда
		
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияПорядокОкругления) Тогда
			ТекстСообщения = НСтр("ru = 'Не указан порядок округления'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияПорядокОкругления");
			Возврат;
		КонецЕсли;
		
		ОкруглитьЦену(ВариантЗначенияПорядокОкругления, СтруктураДляРасчета);
			
		
	ИначеЕсли ТекущееДействие = "УстановитьСтавкуНДС" Тогда
		
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияСтавкаНДС) Тогда
			ТекстСообщения = НСтр("ru = 'Не указана ставка НДС'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияСтавкаНДС");
			Возврат;
		КонецЕсли;
		
		УстановитьСтавкуНДС(ВариантЗначенияСтавкаНДС, СтруктураДляРасчета);
		
	ИначеЕсли ТекущееДействие = "УстановитьСтавкуАкциза" Тогда
		
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияСтавкаАкциза) Тогда
			ТекстСообщения = НСтр("ru = 'Не указана ставка акциза'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияСтавкаАкциза");
			Возврат;
		КонецЕсли;
		
		УстановитьСтавкуАкциза(ВариантЗначенияСтавкаАкциза, СтруктураДляРасчета);
		
	ИначеЕсли ТекущееДействие = "УстановитьНДСВидПоступления" Тогда
		
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияНДСВидПоступления) Тогда
			ТекстСообщения = НСтр("ru = 'Не указан вид поступления НДС'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияНДСВидПоступления");
			Возврат;
		КонецЕсли;
		
		УстановитьНДСВидПоступления(ВариантЗначенияНДСВидПоступления);
	
	ИначеЕсли ТекущееДействие = "УстановитьНДСВидОборота" Тогда
		
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияНДСВидОборота) Тогда
			ТекстСообщения = НСтр("ru = 'Не указан НДС вид оборота'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияНДСВидОборота");
			Возврат;
		КонецЕсли;
		
		УстановитьНДСВидОборота(ВариантЗначенияНДСВидОборота);
		
	ИначеЕсли ТекущееДействие = "УстановитьНДСВидОперацииРеализации" Тогда
		
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияНДСВидОперацииРеализации) Тогда
			ТекстСообщения = НСтр("ru = 'Не указан НДС вид операции реализации'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияНДСВидОперацииРеализации");
			Возврат;
		КонецЕсли;

		
		УстановитьНДСВидОперацииРеализации(ВариантЗначенияНДСВидОперацииРеализации);

    ИначеЕсли ТекущееДействие = "УстановитьАкцизВидОперацииРеализации" Тогда
		
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияАкцизВидОперацииРеализации) Тогда
			ТекстСообщения = НСтр("ru = 'Не указан акциз вид операции реализации'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияАкцизВидОперацииРеализации");
			Возврат;
		КонецЕсли;
		
		УстановитьАкцизВидОперацииРеализации(ВариантЗначенияАкцизВидОперацииРеализации);
		
	ИначеЕсли ТекущееДействие = "УстановитьНомерГТД" Тогда
		
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияНомерГТД) Тогда
			ТекстСообщения = НСтр("ru = 'Не указан источник происхождения'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияНомерГТД");
			Возврат;
		КонецЕсли;
		
		УстановитьНомерГТД(ВариантЗначенияНомерГТД);

	ИначеЕсли ТекущееДействие = "УстановитьСтрануПроисхождения" Тогда
		
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияСтранаПроисхождения) Тогда
			ТекстСообщения = НСтр("ru = 'Не выбрана страна происхождения'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияСтранаПроисхождения");
			Возврат;
		КонецЕсли;
		
		УстановитьСтрануПроисхождения(ВариантЗначенияСтранаПроисхождения);

	ИначеЕсли НЕ ЗначениеЗаполнено(ТекущееДействие) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указано действие'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ТекущееДействие");
		Возврат;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Действие указано не верно!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ТекущееДействие");
		Возврат;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
	УправлениеФормой(ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)

	УстановитьПометкуВСтрокахТабличнойЧасти(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)

	УстановитьПометкуВСтрокахТабличнойЧасти(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьБезПереноса(Команда)

	Модифицированность = Ложь;
	ПеренестиВДокумент = Ложь;
	Закрыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////
// Операции с формой и элементами формы

&НаКлиенте
Процедура ПриИзмененииТекущегоДействия()

	Если ТекущееДействие = "ДобавитьИзДокумента" Тогда     			
		
		Элементы.ГруппаСтраницыПоляВводаВариантаЗначения.ТекущаяСтраница = Элементы.ГруппаПолеВводаВариантаЗначенияДокумент;
		Элементы.ГруппаСтраницыПодсказки.ТекущаяСтраница = Элементы.ГруппаПодсказкаПустая;
		ВариантЗначенияДокумент = Неопределено;
		
	ИначеЕсли ТекущееДействие = "УстановитьЦеныПоТипу" Тогда       
		
		Элементы.ГруппаСтраницыПоляВводаВариантаЗначения.ТекущаяСтраница = Элементы.ГруппаПолеВводаВариантаЗначенияТипЦенНоменклатуры;
		Элементы.ГруппаСтраницыПодсказки.ТекущаяСтраница = Элементы.ГруппаПодсказкаПрименить;
		ВариантЗначенияТипЦенНоменклатуры = ДокументТипЦен;
		
	ИначеЕсли ТекущееДействие = "РаспределитьСуммуПоСуммам" Тогда      	
	
		Элементы.ГруппаСтраницыПоляВводаВариантаЗначения.ТекущаяСтраница = Элементы.ГруппаПолеВводаВариантаЗначенияЧислоСумма;
		Элементы.ГруппаСтраницыПодсказки.ТекущаяСтраница = Элементы.ГруппаПодсказкаПрименить;
		ВариантЗначенияЧислоСумма = Неопределено;
		  
	ИначеЕсли ТекущееДействие = "РаспределитьСуммуПоКоличеству" Тогда         
		
		Элементы.ГруппаСтраницыПоляВводаВариантаЗначения.ТекущаяСтраница = Элементы.ГруппаПолеВводаВариантаЗначенияЧислоСумма;
		Элементы.ГруппаСтраницыПодсказки.ТекущаяСтраница = Элементы.ГруппаПодсказкаПрименить;
		ВариантЗначенияЧислоСумма = Неопределено;
		
	ИначеЕсли ТекущееДействие = "ИзменитьЦеныНаПроцент" Тогда       
		
		Элементы.ГруппаСтраницыПоляВводаВариантаЗначения.ТекущаяСтраница = Элементы.ГруппаПолеВводаВариантаЗначенияЧислоПроцент;
		Элементы.ГруппаСтраницыПодсказки.ТекущаяСтраница = Элементы.ГруппаПодсказкаПрименить;
		ВариантЗначенияЧислоПроцент = Неопределено;
		
	ИначеЕсли ТекущееДействие = "ОкруглитьЦеныДо" Тогда
		
		Элементы.ГруппаСтраницыПоляВводаВариантаЗначения.ТекущаяСтраница = Элементы.ГруппаПолеВводаВариантаЗначенияПорядокОкругления;
		Элементы.ГруппаСтраницыПодсказки.ТекущаяСтраница = Элементы.ГруппаПодсказкаПрименить;
		ВариантЗначенияПорядокОкругления = ПорядокОругленияПоУмолчанию;
			
	ИначеЕсли ТекущееДействие = "УстановитьСтавкуНДС" Тогда
		
		Элементы.ГруппаСтраницыПоляВводаВариантаЗначения.ТекущаяСтраница = Элементы.ГруппаПолеВводаВариантаЗначенияСтавкаНДС;
		Элементы.ГруппаСтраницыПодсказки.ТекущаяСтраница = Элементы.ГруппаПодсказкаПрименить;
		ЗаполнитьСтавкуНДСНаСервере();
		
	ИначеЕсли ТекущееДействие = "УстановитьНДСВидОборота" Тогда
		
		Элементы.ГруппаСтраницыПоляВводаВариантаЗначения.ТекущаяСтраница = Элементы.ГруппаПолеВводаВариантаЗначенияВидОборота;
		Элементы.ГруппаСтраницыПодсказки.ТекущаяСтраница = Элементы.ГруппаПодсказкаПрименить;
		ЗаполнитьНДСВидОборотаНаСервере();
		
	ИначеЕсли ТекущееДействие = "УстановитьНДСВидПоступления" Тогда
		
		Элементы.ГруппаСтраницыПоляВводаВариантаЗначения.ТекущаяСтраница = Элементы.ГруппаПолеВводаВариантаЗначенияВидПоступления;
		Элементы.ГруппаСтраницыПодсказки.ТекущаяСтраница = Элементы.ГруппаПодсказкаПрименить;
		ЗаполнитьНДСВидПоступленияНаСервере();
				
	ИначеЕсли ТекущееДействие = "УстановитьАкцизВидОперацииРеализации" Тогда
		
		Элементы.ГруппаСтраницыПоляВводаВариантаЗначения.ТекущаяСтраница = Элементы.ГруппаПолеВводаВариантаЗначенияАкцизВидРеализации;
		Элементы.ГруппаСтраницыПодсказки.ТекущаяСтраница = Элементы.ГруппаПодсказкаПрименить;
		ЗаполнитьАкцизВидОперацииРеализацииНаСервере();

		
	ИначеЕсли ТекущееДействие = "УстановитьНДСВидОперацииРеализации" Тогда
		
		Элементы.ГруппаСтраницыПоляВводаВариантаЗначения.ТекущаяСтраница = Элементы.ГруппаПолеВводаВариантаЗначенияВидРеализации;
		Элементы.ГруппаСтраницыПодсказки.ТекущаяСтраница = Элементы.ГруппаПодсказкаПрименить;
		ЗаполнитьНДСВидОперацииРеализацииНаСервере();
			
	ИначеЕсли ТекущееДействие = "УстановитьСтавкуАкциза" Тогда
		
		Элементы.ГруппаСтраницыПоляВводаВариантаЗначения.ТекущаяСтраница = Элементы.ГруппаПолеВводаВариантаЗначенияСтавкаАкциза;
		Элементы.ГруппаСтраницыПодсказки.ТекущаяСтраница = Элементы.ГруппаПодсказкаПрименить;
		ВариантЗначенияНДСВидПоступления = Неопределено;
		ЗаполнитьСтавкуАкцизаНаСервере();
		
	ИначеЕсли ТекущееДействие = "УстановитьНомерГТД" Тогда
		
		Элементы.ГруппаСтраницыПоляВводаВариантаЗначения.ТекущаяСтраница = Элементы.ГруппаПолеВводаВариантаЗначенияНомерГТД;
		Элементы.ГруппаСтраницыПодсказки.ТекущаяСтраница = Элементы.ГруппаПодсказкаПрименить;
		ВариантЗначенияНомерГТД = Неопределено;
		
	ИначеЕсли ТекущееДействие = "УстановитьСтрануПроисхождения" Тогда
		
		Элементы.ГруппаСтраницыПоляВводаВариантаЗначения.ТекущаяСтраница = Элементы.ГруппаПолеВводаВариантаЗначенияСтранаПроисхождения;
		Элементы.ГруппаСтраницыПодсказки.ТекущаяСтраница = Элементы.ГруппаПодсказкаПрименить;
		ВариантЗначенияСтранаПроисхождения = Неопределено;   	

	Иначе          
		
		Элементы.ГруппаСтраницыПоляВводаВариантаЗначения.ТекущаяСтраница = Элементы.ГруппаПолеВводаВариантаЗначенияПустаяСтраница;
		Элементы.ГруппаСтраницыПодсказки.ТекущаяСтраница = Элементы.ГруппаПодсказкаПустая;
		
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьСтавкуНДСНаСервере()
	
	ВариантЗначенияСтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(, "ОсновнаяСтавкаНДС");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтавкуАкцизаНаСервере()
	
	ВариантЗначенияСтавкаАкциза = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(, "ОсновнаяСтавкаАкциза");
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьАкцизВидОперацииРеализацииНаСервере()
	
	ВариантЗначенияАкцизВидОперацииРеализации = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(, "ОсновнойВидОперацииОблагаемойАкцизом");
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьНДСВидОперацииРеализацииНаСервере()
	
	ВариантЗначенияНДСВидОперацииРеализации = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(, "ОсновнойВидОперацииРеализации");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНДСВидПоступленияНаСервере()
	
	ВариантЗначенияНДСВидПоступления = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(, "ОсновнойВидПоступления");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНДСВидОборотаНаСервере()
	
	ВариантЗначенияНДСВидОборота = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(, "ОсновнойВидОборота");
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

   	ИнициализироватьРеквизитыФормы();
	СформироватьСписокДействий(Элементы.ТекущееДействие.СписокВыбора);

	//загрузим текущее действие из сохраненных настроек
	ВидДокумента = ДокументСсылка.Метаданные().Имя;
	ТекущееДействие = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОбработкаТабличнойЧастиТекущееДействие", ВидДокумента);
	Если Элементы.ТекущееДействие.СписокВыбора.НайтиПоЗначению(ТекущееДействие) = Неопределено Тогда
		ТекущееДействие = Элементы.ТекущееДействие.СписокВыбора[0].Значение;
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ЗаполнитьОграниченияТипаПолейВводаВариантаЗначения();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	ОбновитьИтоги(Форма);
	
	Элементы = Форма.Элементы;
	Элементы.ИтогиВсегоНДС.Видимость = Форма.ДокументУчитыватьНДС;
	Элементы.ВалютаДокументаИтогиВсегоНДС.Видимость = Форма.ДокументУчитыватьНДС;

	Элементы.ИтогиВсегоАкциз.Видимость =  Форма.ДокументУчитыватьАкциз;
	Элементы.ВалютаДокументаИтогиВсегоАкциз.Видимость = Форма.ДокументУчитыватьАкциз;
	
	Если Форма.ДокументСуммаВключаетНДС Тогда
		Форма.Элементы.ИтогиВсегоНДС.Заголовок = НСтр("ru = 'НДС (в т. ч.)'");
	Иначе
		Форма.Элементы.ИтогиВсегоНДС.Заголовок = НСтр("ru = 'НДС (сверху)'");
	КонецЕсли;
	
	Если Форма.ДокументСуммаВключаетАкциз Тогда
		Форма.Элементы.ИтогиВсегоАкциз.Заголовок = НСтр("ru = 'Акциз (в т. ч.)'");
	Иначе
		Форма.Элементы.ИтогиВсегоАкциз.Заголовок = НСтр("ru = 'Акциз (сверху)'");
	КонецЕсли;
	
	Форма.Элементы.ТоварыСтранаПроисхождения.Видимость = Форма.ПоказыватьСтрануПроисхождения;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОграниченияТипаПолейВводаВариантаЗначения()

	// В случае добавления из документа должны выбираться только документы с таб. частью "Товары",
	// в которой есть реквизиты "Номенклатура", "Количество".
	
	МассивНужныхТипов = Новый Массив();
	
	Для Каждого Документ Из Метаданные.Документы Цикл
		
		Если Документ.ТабличныеЧасти.Найти(ИмяТаблицы) <> Неопределено Тогда
			Если ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("Номенклатура", Документ, ИмяТаблицы)
				И ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("Количество",  Документ, ИмяТаблицы) Тогда
				МассивНужныхТипов.Добавить(Тип("ДокументСсылка." + Документ.Имя));
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если Документ.Имя = "Доверенность" Тогда
			МассивНужныхТипов.Добавить(Тип("ДокументСсылка." + Документ.Имя));
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ВариантЗначенияДокумент.ОграничениеТипа = Новый ОписаниеТипов(МассивНужныхТипов);

КонецПроцедуры 

&НаСервере
Процедура ИнициализироватьРеквизитыФормы()
	
	ПеренестиВДокумент = Ложь;

	ДокументМетаданные = ДокументСсылка.Метаданные();
	
	ВалютаРегламентированногоУчета 	= ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ОбрабатыватьПоТипуЦен = ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ТипЦен", ДокументМетаданные);
	Если ЗначениеЗаполнено(ДокументТипЦен) Тогда
		ПорядокОругленияПоУмолчанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументТипЦен, "ПорядокОкругления");	
	Иначе
		ПорядокОругленияПоУмолчанию = Перечисления.ПорядкиОкругления.Окр0_01;
	КонецЕсли;
	
	ВедетсяУчетПоТоварамОрганизацийБУ   = НомераГТДСервер.ВедетсяУчетПоТоварамОрганизаций(ДокументДата);
	
	ПоказыватьКоличество 			= ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("Количество", 
													ДокументМетаданные, ИмяТаблицы);
	ПоказыватьЦену 					= ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("Цена", 
													ДокументМетаданные, ИмяТаблицы);
	ПоказыватьСумму 				= ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("Сумма", 
													ДокументМетаданные, ИмяТаблицы);
	ПоказыватьСтавкуНДС 			= ДокументУчитыватьНДС И ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", 
													ДокументМетаданные, ИмяТаблицы);
	ПоказыватьСуммуНДС 				= ДокументУчитыватьНДС И ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", 
													ДокументМетаданные, ИмяТаблицы);
	ПоказыватьСтавкуАкциза 			= ДокументУчитыватьАкциз И ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("СтавкаАкциза", 
													ДокументМетаданные, ИмяТаблицы);
	ПоказыватьСуммуАкциза 			= ДокументУчитыватьАкциз И ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("СуммаАкциза", 
													ДокументМетаданные, ИмяТаблицы);
	ПоказыватьВалюту 				= ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("Валюта", 
													ДокументМетаданные, ИмяТаблицы);
	ПоказыватьВидПоступления		= ДокументУчитыватьНДС И ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("НДСВидПоступления", 
													ДокументМетаданные, ИмяТаблицы);
	ПоказыватьВидОборота			= ДокументУчитыватьНДС И ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("НДСВидОборота", 
													ДокументМетаданные, ИмяТаблицы);
	ПоказыватьВидОперацииРеализации	= ДокументУчитыватьНДС И ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("НДСВидОперацииРеализации", 
													ДокументМетаданные, ИмяТаблицы);
	ПоказыватьНомерГТД              = ВедетсяУчетПоТоварамОрганизацийБУ И ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("НомерГТД", 
													ДокументМетаданные, ИмяТаблицы);
	ПоказыватьСтрануПроисхождения   = ВедетсяУчетПоТоварамОрганизацийБУ И ОбщегоНазначенияБК.ЕстьРеквизитТабЧастиДокумента("СтранаПроисхождения", 
													ДокументМетаданные, ИмяТаблицы);
													
	Если ЗначениеЗаполнено(ДокументОрганизация) Тогда
		ОтборОрганизация = ДокументОрганизация;
	Иначе
		
		ТекПользователь = Пользователи.ТекущийПользователь();

		// случай вызова из документа УстановкаЦенНоменклатуры или без выбранной организации в документе
		ОтборОрганизация = Справочники.Организации.ОрганизацияПоУмолчанию();
		Если НЕ ЗначениеЗаполнено(ОтборОрганизация) Тогда
			ОтборОрганизация = ПолучитьСписокОрганизаций();	
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// Обработчики действий обработки

&НаСервере
Процедура ДобавитьДанныеИзДокумента(ДокументИсточник, СтруктураДляРасчета)
	
	
	Если НЕ ЗначениеЗаполнено(ДокументИсточник) Тогда
		Возврат;
	КонецЕсли; 
	
	МетаданныеДокументаИсточника 	= ДокументИсточник.Метаданные();
	
	// получим валюту документа-источника
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокументаИсточника) Тогда 
		ВалютаДокументаИсточника 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументИсточник, "ВалютаДокумента");
		Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("КурсДокумента", МетаданныеДокументаИсточника) Тогда
			КурсДокументаИсточника		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументИсточник, "КурсДокумента");
			КратностьДокументаИсточника	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументИсточник, "КратностьДокумента");
		ИначеЕсли ОбщегоНазначенияБК.ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокументаИсточника) Тогда
			КурсДокументаИсточника		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументИсточник, "КурсВзаиморасчетов");
			КратностьДокументаИсточника	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументИсточник, "КратностьВзаиморасчетов");
		Иначе
			КурсДокументаИсточника		= 0;
			КратностьДокументаИсточника	= 1;
		КонецЕсли;
	Иначе
		ВалютаДокументаИсточника 	= ВалютаРегламентированногоУчета; 
		КурсДокументаИсточника		= 1;
		КратностьДокументаИсточника	= 1;
	КонецЕсли;
	
	// получим пометку СуммаВключаетНДС документа-источника
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокументаИсточника) Тогда 
		СуммаВключаетНДСИсточника	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументИсточник, "СуммаВключаетНДС");
	Иначе
		СуммаВключаетНДСИсточника 	= Ложь;	
	КонецЕсли;
	
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СуммаВключаетАкциз", МетаданныеДокументаИсточника) Тогда 
		СуммаВключаетАкцизИсточника	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументИсточник, "СуммаВключаетАкциз");
	Иначе
		СуммаВключаетАкцизИсточника 	= Ложь;	
	КонецЕсли;
	
	// получим табличную часть "Товары" документа-источника
	ТекстПолей = "";
	ИсточникДоверенность = МетаданныеДокументаИсточника.Имя = "Доверенность";
	РеквизитыТоваровИсточника = МетаданныеДокументаИсточника.ТабличныеЧасти.Товары.Реквизиты;
	СтруктураРеквизитов = ПолучитьСтруктуруОбрабатываемыхРеквизитовТабличнойЧасти(РеквизитыТоваровИсточника, ИсточникДоверенность); 
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение), СокрЛП(КлючИЗначение.Значение), СокрЛП(КлючИЗначение.Ключ));
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
			|	" + ИмяПоля + " КАК " + Псевдоним;
	КонецЦикла;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&ТекстПолей
	|ИЗ
	|	&ТабличнаяЧастьТоварыДокументаИсточника КАК ПсевдонимТовары
	|ГДЕ
	|	ПсевдонимТовары.Ссылка = &Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПолей", ТекстПолей);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТабличнаяЧастьТоварыДокументаИсточника", 
													МетаданныеДокументаИсточника.ПолноеИмя() + ".Товары");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументИсточник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаТоваровДокумента = РезультатЗапроса.Выгрузить();

	// добавим полученную таблицу в табличную часть обработки
	Для Каждого СтрокаТовара ИЗ ТаблицаТоваровДокумента Цикл
		
		// В некоторых документах-источниках, например Доверенность,
		// табличная часть может содержать не только Номенклатуру
		Если ТипЗнч(СтрокаТовара.Номенклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
			Продолжить;
		КонецЕсли;
		Если ИсточникДоверенность И СтрокаТовара.Номенклатура.Услуга Тогда
			Продолжить;
		КонецЕсли;
		
		// Ищем добавляемую позицию в существующей таблице по номенклатуре и по цене, в случае, когда цена видима.
		// Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура("Номенклатура");
		СтруктураОтбора.Номенклатура  = СтрокаТовара.Номенклатура;
		
		// пересчитаем цену строки документа-источника под параметры обработки для корректности отбора
		// высчитанное значение и будет значением цены в случае добавления новой строки обработки 
		НоваяЦенаСтроки = 0;
		Если СтруктураРеквизитов.Свойство("Цена") И ПоказыватьЦену Тогда
			
			Если ПоказыватьВалюту И СтруктураРеквизитов.Свойство("Валюта") И ЗначениеЗаполнено(СтрокаТовара.Валюта) Тогда
				ВалютаПересчета 	= СтрокаТовара.Валюта;
				КурсПересчета		= 0;
				КратностьПересчета 	= 1;
			ИначеЕсли ЗначениеЗаполнено(ДокументВалюта) Тогда
				ВалютаПересчета 	= ДокументВалюта;	
				КурсПересчета		= ДокументКурс;
				КратностьПересчета 	= ДокументКратность;
			Иначе
				ВалютаПересчета 	= ВалютаРегламентированногоУчета;
				КурсПересчета		= 1;
				КратностьПересчета 	= 1;
			КонецЕсли;
			
			Если СтруктураРеквизитов.Свойство("Валюта") И ЗначениеЗаполнено(СтрокаТовара.Валюта) Тогда
				ВалютаЦены			= СтрокаТовара.Валюта;
				КурсЦены			= 0;
				КратностьЦены 		= 1;
			ИначеЕсли ЗначениеЗаполнено(ВалютаДокументаИсточника) Тогда
				ВалютаЦены 			= ВалютаДокументаИсточника;
				КурсЦены			= КурсДокументаИсточника;
				КратностьЦены 		= КратностьДокументаИсточника;
			Иначе
				ВалютаЦены 			= ВалютаРегламентированногоУчета;
				КурсЦены			= 1;
				КратностьЦены 		= 1;
			КонецЕсли;
			
			Цена = ПолучитьЦенуПослеПересчета(СтрокаТовара.Цена, ВалютаЦены, ВалютаПересчета, ДокументДата, 
					КурсЦены, КурсПересчета, КратностьЦены, КратностьПересчета);
					
			Если СтруктураРеквизитов.Свойство("СтавкаНДС") Тогда
				НоваяЦенаСтроки = ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, Неопределено,
						СуммаВключаетНДСИсточника, ДокументУчитыватьНДС, ДокументСуммаВключаетНДС,
						УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТовара.СтавкаНДС));
			Иначе
				
				НоваяЦенаСтроки = Цена;
						
			КонецЕсли;
					
			НоваяЦенаСтроки = Окр(НоваяЦенаСтроки, 2);					

			СтруктураОтбора.Вставить("Цена", НоваяЦенаСтроки);	
			
		КонецЕсли;
		
		// производим поиск строк по структуре отбора
		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		Если НЕ СтрокаТабличнойЧасти = Неопределено Тогда
			
			// Нашли, увеличиваем количество в первой найденной строке
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			
			// Рассчитаем связанные реквизиты табличной части.
			РассчитатьСуммыСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПоказыватьСуммуНДС, ДокументСуммаВключаетНДС, ПоказыватьСуммуАкциза, ДокументСуммаВключаетАкциз, СтруктураДляРасчета);
		
		Иначе
			
			// добавляем новую строку.
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовара);
			
			// новые строки будут по умолчанию не помечены.
			НоваяСтрока.Пометка = Ложь;
			
			// пересчитаем связанные реквизиты табличной части.
			
			Если ПоказыватьКоличество Тогда
				
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.ЕдиницаИзмерения) Тогда
	            	НоваяСтрока.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "БазоваяЕдиницаИзмерения"); 
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.Коэффициент) Тогда
					НоваяСтрока.Коэффициент = 1;	
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПоказыватьСтавкуНДС Тогда
				
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, ИмяТаблицы, ДокументСсылка.Метаданные());
				
			КонецЕсли;
			
			Если ПоказыватьСтавкуАкциза Тогда
				
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуАкцизаТабЧасти(НоваяСтрока, ИмяТаблицы, ДокументСсылка.Метаданные());
				
			КонецЕсли;

			Если ПоказыватьВалюту Тогда
				
				Если СтруктураРеквизитов.Свойство("Валюта") И ЗначениеЗаполнено(СтрокаТовара.Валюта) Тогда
					НоваяСтрока.Валюта = СтрокаТовара.Валюта;
				ИначеЕсли ЗначениеЗаполнено(ВалютаДокументаИсточника) Тогда
					НоваяСтрока.Валюта = ВалютаДокументаИсточника;	
				Иначе
					НоваяСтрока.Валюта = ВалютаРегламентированногоУчета;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПоказыватьЦену Тогда
				
				НоваяСтрока.Цена = НоваяЦенаСтроки;
				
			КонецЕсли;
			
			РассчитатьСуммыСтрокиТабличнойЧасти(НоваяСтрока, ПоказыватьСуммуНДС, ДокументСуммаВключаетНДС, ПоказыватьСуммуАкциза, ДокументСуммаВключаетАкциз, СтруктураДляРасчета);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьЦеныПоТипу(УстанавливаемыйТипЦен, СтруктураДляРасчета)

	Если НЕ ЗначениеЗаполнено(УстанавливаемыйТипЦен) Тогда
		Возврат;
	КонецЕсли; 
	
	//	Получим цены нужного типа
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивНоменклатуры", 	Объект.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("Организация", 			ДокументОрганизация);
	Запрос.УстановитьПараметр("ТипЦен", 				УстанавливаемыйТипЦен);
	Запрос.УстановитьПараметр("ДатаЦен", 				ДокументДата);
	Запрос.УстановитьПараметр("ВалютаЦенПоУмолчанию", 	ВалютаРегламентированногоУчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Валюта, &ВалютаЦенПоУмолчанию) КАК Валюта,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ДатаЦен,
	|				Номенклатура В (&МассивНоменклатуры)
	|					И Организация = &Организация
	|					И ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО (ЦеныНоменклатурыСрезПоследних.Номенклатура = СправочникНоменклатура.Ссылка)
	|ГДЕ
	|	СправочникНоменклатура.Ссылка В(&МассивНоменклатуры)";

	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();

	// Найдем у данной номенклатуры значение цены выбранного типа.
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		Если СтрокаТабличнойЧасти.Пометка Тогда

			// Сбросим выборку для последующего поиска.
			ВыборкаИзЗапроса.Сбросить();
			
			// Ищем в выборке номенклатуру.
			Если ВыборкаИзЗапроса.НайтиСледующий(СтрокаТабличнойЧасти.Номенклатура, "Номенклатура")  Тогда
				
				Если ПоказыватьВалюту И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Валюта) Тогда
					ВалютаПересчета 	= СтрокаТабличнойЧасти.Валюта;
					КурсПересчета		= 0;
					КратностьПересчета 	= 1;
				ИначеЕсли ЗначениеЗаполнено(ДокументВалюта) Тогда
					ВалютаПересчета 	= ДокументВалюта;
					КурсПересчета		= ДокументКурс;
					КратностьПересчета 	= ДокументКратность;
				Иначе
					ВалютаПересчета = ВалютаРегламентированногоУчета;
					КурсПересчета		= 1;
					КратностьПересчета 	= 1;
				КонецЕсли;
				
				ЦенаБазовая = ПолучитьЦенуПослеПересчета(ВыборкаИзЗапроса.Цена, ВыборкаИзЗапроса.Валюта, 
										ВалютаПересчета, ДокументДата, , КурсПересчета, , КратностьПересчета);
				
			Иначе
				ЦенаБазовая = 0;
			КонецЕсли;

			СтрокаТабличнойЧасти.Цена = ЦенаБазовая;

			// пересчитаем связанные реквизиты
			РассчитатьСуммыСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПоказыватьСуммуНДС, ДокументСуммаВключаетНДС, ПоказыватьСуммуАкциза, ДокументСуммаВключаетАкциз, СтруктураДляРасчета);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры  

&НаСервере
Процедура ОкруглитьЦену(ПорядокОкругленияЦены, СтруктураДляРасчета)

	Если НЕ ЗначениеЗаполнено(ПорядокОкругленияЦены) Тогда
		Возврат;
	КонецЕсли; 

	Если ЗначениеЗаполнено(ДокументТипЦен) Тогда
		ОкруглятьВБольшуюСторону = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументТипЦен, "ОкруглятьВБольшуюСторону");
	Иначе
		ОкруглятьВБольшуюСторону = Истина;
	КонецЕсли;

	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		Если СтрокаТабличнойЧасти.Пометка Тогда
			
			СтрокаТабличнойЧасти.Цена = Обработки.ОбработкаТабличнойЧастиТовары.ОкруглитьЦену(СтрокаТабличнойЧасти.Цена, 
														ПорядокОкругленияЦены, ОкруглятьВБольшуюСторону); 
			
			//// пересчитаем связанные реквизиты.
			РассчитатьСуммыСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПоказыватьСуммуНДС, ДокументСуммаВключаетНДС, ПоказыватьСуммуАкциза, ДокументСуммаВключаетАкциз, СтруктураДляРасчета);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ИзменитьЦенуНаПроцент(ПроцентИзменения, СтруктураДляРасчета)

	Если НЕ ЗначениеЗаполнено(ПроцентИзменения) Тогда
		Возврат;
	КонецЕсли; 

	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		Если СтрокаТабличнойЧасти.Пометка Тогда
			
			СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * (100 + ПроцентИзменения) / 100;
			
			// пересчитаем связанные реквизиты.
			РассчитатьСуммыСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПоказыватьСуммуНДС, ДокументСуммаВключаетНДС, ПоказыватьСуммуАкциза, ДокументСуммаВключаетАкциз, СтруктураДляРасчета);
			
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры 

&НаСервере
Процедура РаспределитьСуммуПоКолонке(ИмяКолонки, СуммаРаспределения, СтруктураДляРасчета)
	
	Если НЕ ЗначениеЗаполнено(СуммаРаспределения) Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ (ИмяКолонки = "Количество" ИЛИ ИмяКолонки = "Сумма") Тогда
		Возврат;
	КонецЕсли; 
	
	// Посчитаем общую сумму помеченных позиций
	ОбщаяСумма = 0;
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда
			ОбщаяСумма = ОбщаяСумма + СтрокаТабличнойЧасти[ИмяКолонки];
		КонецЕсли; 
	КонецЦикла; 
	
	Если ОбщаяСумма = 0 Тогда
		ОбщегоНазначенияБККлиентСервер.СообщитьОбОшибке(НСтр("ru = 'Общая сумма помеченных строк нулевая! 
																	|Распределение невозможно'"));
		Возврат;
	КонецЕсли; 
		
	// Распределение
	СтрокаМаксимальнойСуммы = Неопределено;  // На эту строку будем относить остаток после распределения (ошибки округления)
	МаксимальнаяСумма       = 0; 			 // Значение максимальной суммы.
	НепогашеннаяСумма       = СуммаРаспределения;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		Если СтрокаТабличнойЧасти.Пометка Тогда

			Дельта = СуммаРаспределения * СтрокаТабличнойЧасти[ИмяКолонки] / ОбщаяСумма;
			
			// Если Дельта по модулю оказалась больше, чем осталось погасить
			Если Дельта < 0 Тогда
				Дельта = Макс(НепогашеннаяСумма, Дельта)
			Иначе
				Дельта = Мин(НепогашеннаяСумма, Дельта)
			КонецЕсли; 

			// Проверим текущую сумму на максимум.
			Если СтрокаТабличнойЧасти.Сумма > МаксимальнаяСумма  Тогда
				МаксимальнаяСумма       = СтрокаТабличнойЧасти.Сумма;
				СтрокаМаксимальнойСуммы = СтрокаТабличнойЧасти;
			КонецЕсли;

			// Увеличиваем значение и запоминаем старое.
			ТекущаяСумма             	= СтрокаТабличнойЧасти.Сумма;
			СтрокаТабличнойЧасти.Сумма 	= СтрокаТабличнойЧасти.Сумма + Дельта;
			
			// Остаток нераспределенной суммы надо уменьшать на значение реального изменения
			НепогашеннаяСумма = НепогашеннаяСумма - (СтрокаТабличнойЧасти.Сумма - ТекущаяСумма);

			// Пересчитываем связанные реквизиты.
			ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти);
			Если ПоказыватьСуммуНДС Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, СтруктураДляРасчета);
			КонецЕсли;
			
			ПересчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС,  ДокументСуммаВключаетАкциз);

		КонецЕсли; 
		
	КонецЦикла;  
		
	// Если что-то осталось, относим на строку с максимальной суммой.
	Если НепогашеннаяСумма > 0 И СтрокаМаксимальнойСуммы <> Неопределено Тогда

		СтрокаМаксимальнойСуммы.Сумма = СтрокаМаксимальнойСуммы.Сумма + НепогашеннаяСумма;
		ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(СтрокаМаксимальнойСуммы);
		Если ПоказыватьСуммуНДС Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаМаксимальнойСуммы, СтруктураДляРасчета);
		КонецЕсли;
		
		ПересчитатьВсегоСтрокиТабличнойЧасти(СтрокаМаксимальнойСуммы, ДокументСуммаВключаетНДС,  ДокументСуммаВключаетАкциз);

		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтавкуНДС(НоваяСтавкаНДС, СтруктураДляРасчета)

	Если НЕ ЗначениеЗаполнено(НоваяСтавкаНДС) Тогда
		Возврат;
	КонецЕсли; 

	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		Если СтрокаТабличнойЧасти.Пометка Тогда
			
			СтрокаТабличнойЧасти.СтавкаНДС = НоваяСтавкаНДС;
			
			// Пересчитываем связанные реквизиты.
			Если ПоказыватьСуммуНДС Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, СтруктураДляРасчета);
				ПересчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС,  ДокументСуммаВключаетАкциз);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура УстановитьСтавкуАкциза(НоваяСтавкаАкциза, СтруктураДляРасчета)

	Если НЕ ЗначениеЗаполнено(НоваяСтавкаАкциза) Тогда
		Возврат;
	КонецЕсли; 

	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		Если СтрокаТабличнойЧасти.Пометка Тогда
			
			СтрокаТабличнойЧасти.СтавкаАкциза = НоваяСтавкаАкциза;
			
			// Пересчитываем связанные реквизиты.
			Если ПоказыватьСуммуАкциза Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуАкцизаТабЧасти(СтрокаТабличнойЧасти, СтруктураДляРасчета);
				ПересчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС,  ДокументСуммаВключаетАкциз);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура УстановитьНДСВидПоступления(НовыйНДСВидПоступления)

	Если НЕ ЗначениеЗаполнено(НовыйНДСВидПоступления) Тогда
		Возврат;
	КонецЕсли; 

	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		Если СтрокаТабличнойЧасти.Пометка Тогда
			СтрокаТабличнойЧасти.НДСВидПоступления = НовыйНДСВидПоступления;
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура УстановитьНДСВидОперацииРеализации(НовыйНДСВидРеализации)

	Если НЕ ЗначениеЗаполнено(НовыйНДСВидРеализации) Тогда
		Возврат;
	КонецЕсли; 

	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		Если СтрокаТабличнойЧасти.Пометка Тогда
			СтрокаТабличнойЧасти.НДСВидОперацииРеализации = НовыйНДСВидРеализации;
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура УстановитьНДСВидОборота(НовыйВидОборота)

	Если НЕ ЗначениеЗаполнено(НовыйВидОборота) Тогда
		Возврат;
	КонецЕсли; 

	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		Если СтрокаТабличнойЧасти.Пометка Тогда
			СтрокаТабличнойЧасти.НДСВидОборота = НовыйВидОборота;
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура 	УстановитьАкцизВидОперацииРеализации(НовыйВидАкциза)

	Если НЕ ЗначениеЗаполнено(НовыйВидАкциза) Тогда
		Возврат;
	КонецЕсли; 

	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		Если СтрокаТабличнойЧасти.Пометка Тогда
			СтрокаТабличнойЧасти.АкцизВидОперацииРеализации = НовыйВидАкциза;
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура УстановитьНомерГТД(НовыйНомерГТД)

	Если НЕ ЗначениеЗаполнено(НовыйНомерГТД) Тогда
		Возврат;
	КонецЕсли; 

	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		Если СтрокаТабличнойЧасти.Пометка Тогда
			СтрокаТабличнойЧасти.НомерГТД = НовыйНомерГТД;
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура УстановитьСтрануПроисхождения(НоваяСтранаПроисхождения)

	Если НЕ ЗначениеЗаполнено(НоваяСтранаПроисхождения) Тогда
		Возврат;
	КонецЕсли; 

	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		Если СтрокаТабличнойЧасти.Пометка Тогда
			СтрокаТабличнойЧасти.СтранаПроисхождения = НоваяСтранаПроисхождения;
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// Прочие операции

&НаСервере
Процедура СформироватьСписокДействий(СписокДействий)

	// Заполним список возможных действий с табличной частью.
	СписокДействий.Очистить();

	СписокДействий.Добавить("ДобавитьИзДокумента",						НСтр("ru = 'Добавить товары из документа'"));
	
	Если ПоказыватьЦену И ОбрабатыватьПоТипуЦен И ПолучитьФункциональнуюОпцию("ИспользоватьТипыЦенНоменклатуры") Тогда
		СписокДействий.Добавить("УстановитьЦеныПоТипу", 				НСтр("ru = 'Установить цены по типу цен'"));
	КонецЕсли;
	
	Если ПоказыватьСтавкуНДС Тогда
		СписокДействий.Добавить("УстановитьСтавкуНДС", 					НСтр("ru = 'Установить ставку НДС'"));
	КонецЕсли;
	
	Если ПоказыватьВидПоступления Тогда
		СписокДействий.Добавить("УстановитьНДСВидПоступления", 			НСтр("ru = 'Установить вид поступления (НДС)'"));
	КонецЕсли;
	
	Если ПоказыватьВидОборота Тогда
		СписокДействий.Добавить("УстановитьНДСВидОборота", 				НСтр("ru = 'Установить вид оборота'"));
	КонецЕсли;
	
	Если ПоказыватьВидОперацииРеализации Тогда
		СписокДействий.Добавить("УстановитьНДСВидОперацииРеализации",   НСтр("ru = 'Установить вид реализации (НДС)'"));
	КонецЕсли;
	
	Если ПоказыватьСтавкуАкциза Тогда
		СписокДействий.Добавить("УстановитьСтавкуАкциза",               НСтр("ru = 'Установить ставку акциза'"));
		СписокДействий.Добавить("УстановитьАкцизВидОперацииРеализации", НСтр("ru = 'Установить вид реализации (акциз)'"));
	КонецЕсли;
	
	Если ПоказыватьНомерГТД Тогда
		СписокДействий.Добавить("УстановитьНомерГТД",                   НСтр("ru = 'Установить источник происхождения'"));
	КонецЕсли;
	
	Если ПоказыватьСтрануПроисхождения Тогда
		СписокДействий.Добавить("УстановитьСтрануПроисхождения",        НСтр("ru = 'Установить страну происхождения'"));
	КонецЕсли;
	
	Если ПоказыватьЦену Тогда
		СписокДействий.Добавить("ИзменитьЦеныНаПроцент",				НСтр("ru = 'Изменить цены на процент'"));
	КонецЕсли;
	
	Если ПоказыватьЦену И ОбрабатыватьПоТипуЦен Тогда
		СписокДействий.Добавить("ОкруглитьЦеныДо", 						НСтр("ru = 'Округлить цены до'"));
	КонецЕсли;
	
	Если ПоказыватьСумму Тогда
		
		СписокДействий.Добавить("РаспределитьСуммуПоКоличеству", 		НСтр("ru = 'Распределить сумму по количеству'"));
		
		Если ПоказыватьСуммуНДС Тогда
			Если ДокументСуммаВключаетНДС Тогда 
				СписокДействий.Добавить("РаспределитьСуммуПоСуммам", 	НСтр("ru = 'Распределить сумму по суммам с НДС'"));
			Иначе
				СписокДействий.Добавить("РаспределитьСуммуПоСуммам", 	НСтр("ru = 'Распределить сумму по суммам без НДС'"));
			КонецЕсли;
		Иначе
			СписокДействий.Добавить("РаспределитьСуммуПоСуммам", 		НСтр("ru = 'Распределить сумму по суммам'"));
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммыСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПоказыватьСуммуНДС, СуммаВключаетНДС, ПоказыватьСуммуАкциза, СуммаВключаетАкциз, СтруктураДляРасчета)

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);

	Если ПоказыватьСуммуНДС Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, СтруктураДляРасчета);
	КонецЕсли;
	
	Если ПоказыватьСуммуАкциза Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуАкцизаТабЧасти(СтрокаТабличнойЧасти, СтруктураДляРасчета);
	КонецЕсли;
	
	ПересчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, СуммаВключаетНДС, СуммаВключаетАкциз);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, СуммаВключаетНДС, СуммаВключаетАкциз)

	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС) + ?(СуммаВключаетАкциз, 0, СтрокаТабличнойЧасти.СуммаАкциза);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЦенуПослеПересчета(Знач Цена, Знач ВалютаНач, Знач ВалютаКон, Знач ДатаПересчета, 
	Знач КурсНач = Неопределено, Знач КурсКон = Неопределено, Знач КратностьНач = Неопределено, Знач КратностьКон = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(КурсНач) Тогда 		
		КурсКратностьНач 	= ОбщегоНазначенияБК.ПолучитьКурсВалюты(ВалютаНач, ДатаПересчета);
		КурсНач 			= КурсКратностьНач.Курс;
		КратностьНач 		= КурсКратностьНач.Кратность;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(КурсКон) Тогда
		КурсКратностьКон 	= ОбщегоНазначенияБК.ПолучитьКурсВалюты(ВалютаКон, ДатаПересчета);
		КурсКон 			= КурсКратностьКон.Курс;
		КратностьКон		= КурсКратностьКон.Кратность;
	КонецЕсли;
	
	Возврат ОбщегоНазначенияБККлиентСервер.ПересчитатьИзВалютыВВалюту(Цена, ВалютаНач, ВалютаКон,
		КурсНач, КурсКон, КратностьНач, КратностьКон);
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруОбрабатываемыхРеквизитовТабличнойЧасти(РеквизитыТабличнойЧасти, ИсточникДоверенность)

	//ключ - псевдоним в запросе, значение - имя реквизита
	СтруктураРеквизитов = Новый Структура;
	
	Если ИсточникДоверенность Тогда
		СтруктураРеквизитов.Вставить("Номенклатура", 	 "НаименованиеТовара");
		СтруктураРеквизитов.Вставить("ЕдиницаИзмерения", "ЕдиницаПоКлассификатору");
		СтруктураРеквизитов.Вставить("Количество", 		 "Количество");
	Иначе
		СтруктураРеквизитов.Вставить("Номенклатура", 	 "Номенклатура");
		СтруктураРеквизитов.Вставить("Количество", 		 "Количество");
	КонецЕсли;
	
	Если РеквизитыТабличнойЧасти.Найти("КоличествоМест") <> Неопределено Тогда
		СтруктураРеквизитов.Вставить("КоличествоМест", "КоличествоМест");
	КонецЕсли;

	Если РеквизитыТабличнойЧасти.Найти("ЕдиницаИзмерения") <> Неопределено Тогда
		СтруктураРеквизитов.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
	КонецЕсли;
	
	Если РеквизитыТабличнойЧасти.Найти("Коэффициент") <> Неопределено Тогда
		СтруктураРеквизитов.Вставить("Коэффициент", "Коэффициент");
	КонецЕсли;
	
	Если РеквизитыТабличнойЧасти.Найти("Цена") <> Неопределено Тогда
		СтруктураРеквизитов.Вставить("Цена", "Цена");
	КонецЕсли;
		
	Если РеквизитыТабличнойЧасти.Найти("Сумма")  <> Неопределено И ПоказыватьСумму Тогда
		СтруктураРеквизитов.Вставить("Сумма", "Сумма");
	КонецЕсли;	
	
	Если РеквизитыТабличнойЧасти.Найти("СтавкаНДС")  <> Неопределено И ПоказыватьСтавкуНДС Тогда
		СтруктураРеквизитов.Вставить("СтавкаНДС", "СтавкаНДС");
	КонецЕсли;
	
	Если РеквизитыТабличнойЧасти.Найти("СуммаНДС")  <> Неопределено И ПоказыватьСуммуНДС Тогда
		СтруктураРеквизитов.Вставить("СуммаНДС", "СуммаНДС");
	КонецЕсли;
	
	Если РеквизитыТабличнойЧасти.Найти("СтавкаАкциза")  <> Неопределено И ПоказыватьСтавкуАкциза Тогда
		СтруктураРеквизитов.Вставить("СтавкаАкциза", "СтавкаАкциза");
	КонецЕсли;
	
	Если РеквизитыТабличнойЧасти.Найти("СуммаАкциза")  <> Неопределено И ПоказыватьСуммуАкциза Тогда
		СтруктураРеквизитов.Вставить("СуммаАкциза", "СуммаАкциза");
	КонецЕсли;
	
	Если РеквизитыТабличнойЧасти.Найти("НДСВидПоступления")  <> Неопределено И ПоказыватьВидПоступления Тогда
		СтруктураРеквизитов.Вставить("НДСВидПоступления", "НДСВидПоступления");
	КонецЕсли;
	
	Если РеквизитыТабличнойЧасти.Найти("НДСВидОборота")  <> Неопределено И ПоказыватьВидОборота Тогда
		СтруктураРеквизитов.Вставить("НДСВидОборота", "НДСВидОборота");
	КонецЕсли;
	
	Если РеквизитыТабличнойЧасти.Найти("НДСВидОперацииРеализации")  <> Неопределено И ПоказыватьВидОперацииРеализации Тогда
		СтруктураРеквизитов.Вставить("НДСВидОперацииРеализации", "НДСВидОперацииРеализации");
	КонецЕсли;
	
	Если РеквизитыТабличнойЧасти.Найти("Валюта")  <> Неопределено И ПоказыватьВалюту Тогда
		СтруктураРеквизитов.Вставить("Валюта", "Валюта");
	КонецЕсли;
	
	Если РеквизитыТабличнойЧасти.Найти("НомерГТД")  <> Неопределено И ПоказыватьНомерГТД Тогда
		СтруктураРеквизитов.Вставить("НомерГТД", "НомерГТД");
	КонецЕсли;
	
	Если РеквизитыТабличнойЧасти.Найти("СтранаПроисхождения")  <> Неопределено И ПоказыватьСтрануПроисхождения Тогда
		СтруктураРеквизитов.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
	КонецЕсли;

	
	Возврат СтруктураРеквизитов;

КонецФункции 
 
&НаКлиенте
Процедура УстановитьПометкуВСтрокахТабличнойЧасти(НоваяПометка)

	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		СтрокаТабличнойЧасти.Пометка = НоваяПометка;
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		СтрокаТабличнойЧасти.КоэффициентАкциза = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаАкциза), СтрокаТабличнойЧасти.Номенклатура.КоэффициентРасчетаОблагаемойБазыАкциза, 0);
		ПересчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС, ДокументСуммаВключаетАкциз);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Форма.ИтогиВсего = Форма.Объект.Товары.Итог("Всего");

КонецПроцедуры

&НаСервере
Процедура НоменклатураПриИзмененииНаСервере(ПараметрыСтроки)

	МетаданныеДокумента = ДокументСсылка.Метаданные();

	Если ПоказыватьСтавкуНДС Тогда
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(ПараметрыСтроки, ИмяТаблицы, МетаданныеДокумента);
	КонецЕсли;
	
	Если ПоказыватьСтавкуАкциза Тогда
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуАкцизаТабЧасти(ПараметрыСтроки, ИмяТаблицы, МетаданныеДокумента);
		Если ЗначениеЗаполнено(ПараметрыСтроки.СтавкаАкциза) Тогда
			ПараметрыСтроки.КоэффициентАкциза = ПараметрыСтроки.Номенклатура.КоэффициентРасчетаОблагаемойБазыАкциза;	
		КонецЕсли;
	КонецЕсли;
	
	Если ПоказыватьЦену Тогда
		
		ПараметрыОбъекта = Новый Структура;
		ПараметрыОбъекта.Вставить("Ссылка",	 			ДокументСсылка);
		ПараметрыОбъекта.Вставить("Дата",	 			ДокументДата);
		ПараметрыОбъекта.Вставить("Организация", 		ДокументОрганизация);
		ПараметрыОбъекта.Вставить("ВалютаДокумента", 	ДокументВалюта);
		ПараметрыОбъекта.Вставить("ТипЦен", 			ДокументТипЦен);
		ПараметрыОбъекта.Вставить("УчитыватьНДС",		ДокументУчитыватьНДС);
		ПараметрыОбъекта.Вставить("СуммаВключаетНДС",   ДокументСуммаВключаетНДС);
		ПараметрыОбъекта.Вставить("КурсДокумента",      ДокументКурс);
		ПараметрыОбъекта.Вставить("КратностьДокумента", ДокументКратность);

		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(ПараметрыСтроки, ПараметрыОбъекта, ИмяТаблицы,
						МетаданныеДокумента);
	КонецЕсли;

	
КонецПроцедуры 

&НаСервере
Процедура ПриЗакрытииФормыНаСервере()

	ВидДокумента = ДокументСсылка.Метаданные().Имя;
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ОбработкаТабличнойЧастиТекущееДействие", ВидДокумента, ТекущееДействие);

	Если ПеренестиВДокумент Тогда
		ТаблицаТовары = СформироватьТаблицуДляПереносаВДокумент();
		ПоместитьВоВременноеХранилище(ТаблицаТовары, АдресХранилищаТовары);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция СформироватьТаблицуДляПереносаВДокумент()

	ТаблицаОбработки = Объект.Товары.Выгрузить();
	
	ТаблицаДокумента = ПолучитьИзВременногоХранилища(АдресХранилищаТовары);
		
	// Создадим структуру, которая будет содержать имена колонок присутствующих в 
	// документе, но не присутствующих в ТЧ обработки. 
	СтруктураНовыхКолонок = Новый Структура;
	
	Для Каждого КолонкаТаблицыДокумента Из ТаблицаДокумента.Колонки Цикл
		
		// Если колонка есть в таблице документа, но ее нет в таблице, выгруженной
		// из обработки и нет в структуре новых колонок, тогда добавим ее в таблицу
		// и в структуру
		Если ТаблицаОбработки.Колонки.Найти(КолонкаТаблицыДокумента.Имя) = Неопределено
			И НЕ СтруктураНовыхКолонок.Свойство(КолонкаТаблицыДокумента.Имя) Тогда
			ТаблицаОбработки.Колонки.Добавить(КолонкаТаблицыДокумента.Имя);
			СтруктураНовыхКолонок.Вставить(КолонкаТаблицыДокумента.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	// Идем по строкам табличной части и обрабатываем строки, в которых заполнен
	// реквизит НомерДокумента. Эти строки были выгружены из документа.
	Для каждого СтрокаТаблицы Из ТаблицаОбработки Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.НомерСтрокиДокумента) Тогда
			
			// Если номер строки заполнен, находим соответствующую строку в табличной 
			// части документа
			СтрокаТаблицыДокумента = ТаблицаДокумента[СтрокаТаблицы.НомерСтрокиДокумента - 1];

			// Во избежание проблем с подчиненными реквизитами, строка ТЧ обработки 
			// считается соответствующей строке ТЧ документа, только в том случае,если
			// номенклатура не изменилась. Если номенклатура в строке изменилась, 
			// считается, что это новая строка.
			Если СтрокаТаблицыДокумента.Номенклатура = СтрокаТаблицы.Номенклатура Тогда
				
				// Теперь пройдем по колонкам структуры новых колонок
				Для Каждого НоваяКолонкаТаблицы Из СтруктураНовыхКолонок Цикл
					СтрокаТаблицы[НоваяКолонкаТаблицы.Ключ] = СтрокаТаблицыДокумента[НоваяКолонкаТаблицы.Ключ];
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаОбработки;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокОрганизаций()
	
	СписокОрганизаций = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ПометкаУдаления = ЛОЖЬ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокОрганизаций.Добавить(Выборка.Организация);
	КонецЦикла;
	
	Возврат СписокОрганизаций;
	
КонецФункции

&НаСервереБезКонтекста
Функция СтруктурноеПодразделениеДляВыбораНомераГТД(ДокументСсылка)
	
	СтруктурноеПодразделениеДляВыбораНомераГТД = Неопределено;
	
	МетаданныеДокумента	= ДокументСсылка.Метаданные(); 
	Если ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СтруктурноеПодразделение", МетаданныеДокумента) Тогда
		СтруктурноеПодразделениеДляВыбораНомераГТД = ДокументСсылка.СтруктурноеПодразделение;
	ИначеЕсли ОбщегоНазначенияБК.ЕстьРеквизитДокумента("СтруктурноеПодразделениеОтправитель", МетаданныеДокумента) Тогда
		СтруктурноеПодразделениеДляВыбораНомераГТД = ДокументСсылка.СтруктурноеПодразделениеОтправитель;
	КонецЕсли;
	
	Возврат СтруктурноеПодразделениеДляВыбораНомераГТД;
	
КонецФункции

&НаКлиенте
Функция ПараметрыВыбораНомераГТД(ТекущаяСтрока)
	
	ПараметрыВыбора = НомераГТДКлиент.ПустыеПараметрыВыбораНомераГТД();
	
	ПараметрыВыбора.Ссылка = ДокументСсылка;
	ПараметрыВыбора.Дата = ДокументДата;	
	ПараметрыВыбора.Организация = ДокументОрганизация;
	ПараметрыВыбора.СтруктурноеПодразделение = СтруктурноеПодразделениеДляВыбораНомераГТД(ДокументСсылка);
	
	ПараметрыВыбора.ПоказыватьТолькоОстатки = Ложь;
	
	Возврат ПараметрыВыбора;
	
КонецФункции

&НаКлиенте
Процедура ТоварыНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Товары.ТекущаяСтрока;
	ПараметрыВыбораНомераГТД = ПараметрыВыбораНомераГТД(ТекущаяСтрока);
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
	ПараметрыВыбораНомераГТД.Товар = ТекущиеДанные.Номенклатура;
	ПараметрыВыбораНомераГТД.НомерГТД = ТекущиеДанные.НомерГТД;
	
	НомераГТДКлиент.ТоварыНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, ПараметрыВыбораНомераГТД);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗначенияНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораНомераГТД = ПараметрыВыбораНомераГТД(Элементы.Товары.ТекущаяСтрока);
	ПараметрыВыбораНомераГТД.НомерГТД = ВариантЗначенияНомерГТД;	
	
	НомераГТДКлиент.ТоварыНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, ПараметрыВыбораНомераГТД);
	
КонецПроцедуры
