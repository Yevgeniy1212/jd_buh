&НаКлиенте
Перем ОбновитьИнтерфейс;

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнтерфейсТаксиПростой = Ложь;
	
	ЗаполнитьОписаниеФункциональности();
	
	ЗаполнитьРеквизитыФункциональности();
	
	ДоступностьРазделаПроверена = Новый Структура;
	ВыполняетсяИзменениеФункциональности = Новый Структура;
	ВыполняетсяПроверкаДоступностиРаздела = Новый Структура;
	
	ДоступноИзменениеФункциональности = РольДоступна("ПолныеПрава")
		И Не ОбщегоНазначения.ЭтоАвтономноеРабочееМесто();
	
	Если НЕ ДоступноИзменениеФункциональности Тогда
		УстановитьДоступностьРазделов(ЭтотОбъект, Ложь);
		// Не выполняем проверку на доступность у не полных прав.
		Для Каждого Раздел Из РазделыФункциональности(ОписаниеФункциональности) Цикл
			ДоступностьРазделаПроверена.Вставить(Раздел, Истина);
		КонецЦикла;
		
	КонецЕсли;
	
	ТекущаяСтраница = Неопределено;
	Если Параметры.Свойство("ТекущаяСтраница", ТекущаяСтраница) Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы[ТекущаяСтраница];
		
		Если ДоступноИзменениеФункциональности Тогда
			ИмяРаздела = СтрЗаменить(ТекущаяСтраница, "Группа", "");
			Если НЕ ДоступностьРазделаПроверена.Свойство(ИмяРаздела) Тогда
				ДлительнаяОперацияПроверкиПриОткрытии = ПроверитьДоступностьРаздела(ИмяРаздела);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	НастроитьБаннерСообщения();
	
	НастроитьВнешнийВидФормы();
	
	ЭтотОбъект.ТекущийЭлемент = Элементы.ГруппаФункциональность;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ДлительнаяОперацияПроверкиПриОткрытии) Тогда
		ТекущаяСтраница = Элементы.Страницы.ТекущаяСтраница.Имя;
		ИмяРаздела = СтрЗаменить(ТекущаяСтраница, "Группа", "");
		ОжидатьПроверкуДоступностиРазделаВФоне(ДлительнаяОперацияПроверкиПриОткрытии, ИмяРаздела);
		ДлительнаяОперацияПроверкиПриОткрытии = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыполняетсяИзменениеФункциональности) Тогда
		
		Отказ = Истина;
		ТекстПредупреждения = НСтр("ru='Изменение функциональности еще не завершено.");
		Если НЕ ЗавершениеРаботы Тогда
			
			ТекстВопроса = НСтр("ru='Изменение функциональности еще не завершено.'") + Символы.ПС +
				НСтр("ru='Закрыть все равно?'");
			
			ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВопросЗакрытьФормуЗавершение", ЭтотОбъект);
			
			ЗаголовокВопроса = НСтр("ru='Закрытие окна'");
			
			ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , ЗаголовокВопроса);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбновитьИнтерфейс();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_НаборКонстант" Тогда
		//Если Источник = "ИспользоватьКадровыйУчет" Тогда
		//	ВыполнитьПроверкуДоступностиРазделаВФоне("ЗарплатаКадры");
		//КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

#Область ГиперссылкаНажатие

&НаКлиенте
Процедура ГлавноеИспользуемаяВозможностьНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиИспользуемыйФункционалНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

#КонецОбласти

#Область ЗакладкиГиперссылкаНажатие

#КонецОбласти

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаГлавное Тогда
		// Для главного не устанавливаем доступность элементов.
		Возврат;
	КонецЕсли;
	
	ИмяРаздела = СтрЗаменить(ТекущаяСтраница.Имя, "Группа", "");
	
	Если НЕ ДоступностьРазделаПроверена.Свойство(ИмяРаздела) Тогда
		
		ВыполнитьПроверкуДоступностиРазделаВФоне(ИмяРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантФункциональностиПриИзменении(Элемент)
	
	Если ВариантФункциональности = ФункциональностьПрограммыКлиентСервер.ВыборочнаяФункциональность() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыИзмененияФункциональности = ПараметрыИзмененияВариантаФункциональности(ВариантФункциональности);
	Если ПараметрыИзмененияФункциональности.ЗадатьВопросОДлительнойОперации Тогда
		ИзменитьВариантФункциональностиЗадатьВопрос(ПараметрыИзмененияФункциональности);
	Иначе
		ИзменитьВариантФункциональностиОтвет(КодВозвратаДиалога.Да, ПараметрыИзмененияФункциональности);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Перезапустить(Команда)
	
	ПараметрыПерехода = ПараметрыПереходаНаПолныйИнтерфейс();
	ПерейтиНаПолныйИнтерфейс(ПараметрыПерехода);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКПодключаемомуОборудованию(Команда)
	
	ОткрытьФорму("Справочник.ПодключаемоеОборудование.ФормаСписка");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьРеквизитыФункциональности()
	
	Для Каждого Функциональность Из ОписаниеФункциональности Цикл
		ЭтотОбъект[Функциональность.Имя] = НаборКонстант[Функциональность.Имя];
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НаименованиеФункциональности(ИмяФункциональности)
	
	НаименованиеФункциональности = Элементы[ИмяФункциональности].Заголовок;
	Если Не ЗначениеЗаполнено(НаименованиеФункциональности) Тогда
		НаименованиеФункциональности = ИмяФункциональности;
	КонецЕсли;
	Возврат НаименованиеФункциональности;
	
КонецФункции

&НаСервере
Функция ТекстКоличествоПриложений(Количество)
	
	ТекстКоличествоПриложений = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
		НСтр("ru='%1 приложениях;%1 приложении;%1 приложениях;%1 приложениях;%1 приложениях;%1 приложениях'"), Количество);
	
	Возврат ТекстКоличествоПриложений;
	
КонецФункции

&НаСервере
Процедура НастроитьБаннерВключениеФункциональностиПриПерезапуске()
	
	ТребуетсяПереключениеИнтерфейса = Ложь;
	Для Каждого Функциональность Из НедоступнаяВПростомИнтерфейсеФункциональность(ОписаниеФункциональности) Цикл
		Если ЭтотОбъект[Функциональность.Имя] = Истина Тогда
			ТребуетсяПереключениеИнтерфейса = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ГруппаПерезапускКнопка.Видимость = ИнтерфейсТаксиПростой И ТребуетсяПереключениеИнтерфейса;
	
	ТекстСообщенияОбАвтоматическомВключенииФункциональности = ТекстСообщенияОбАвтоматическомВключенииФункциональности();
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	Элементы.ДекорацияОбратитесьКАдминистратору.Видимость = НЕ ЭтоПолноправныйПользователь;
	Элементы.Перезапустить.Видимость = ЭтоПолноправныйПользователь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		
		СохраняемыеЗначения = ЗначенияНедоступнойВПростомИнтерфейсеФункциональности(ЭтотОбъект);
		
		ОбновитьИнтерфейс = Ложь;
		
		ОбновитьИнтерфейс();
		#Если ВебКлиент Тогда
		Активизировать();
		#КонецЕсли
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СохраняемыеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗначенияНедоступнойВПростомИнтерфейсеФункциональности(Форма)
	
	Если Форма.ИнтерфейсТаксиПростой Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	НедоступнаяВПростомИнтерфейсеФункциональность = Новый Массив;
	Для Каждого Функциональность Из НедоступнаяВПростомИнтерфейсеФункциональность(Форма.ОписаниеФункциональности) Цикл
		НедоступнаяВПростомИнтерфейсеФункциональность.Добавить(Функциональность.Имя);
	КонецЦикла;
	
	ЗначенияРеквизитов = Новый Структура(СтрСоединить(НедоступнаяВПростомИнтерфейсеФункциональность, ","));
	
	ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, Форма);
	
	Возврат ЗначенияРеквизитов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НедоступнаяВПростомИнтерфейсеФункциональность(ОписаниеФункциональности)
	
	Возврат ОписаниеФункциональности.НайтиСтроки(Новый Структура("ДоступнаВПростомИнтерфейсе", Ложь));
	
КонецФункции

&НаСервереБезКонтекста
Функция РазделыФункциональности(ОписаниеФункциональности)
	
	ОписаниеРазделов = ОписаниеФункциональности.Выгрузить(, "Раздел");
	ОписаниеРазделов.Свернуть("Раздел", "");
	Возврат ОписаниеРазделов.ВыгрузитьКолонку("Раздел");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РазделФункциональности(ИмяФункциональности, ОписаниеФункциональности)
	
	Отбор = Новый Структура();
	Отбор.Вставить("Имя", ИмяФункциональности);
	
	Строки = ОписаниеФункциональности.НайтиСтроки(Отбор);
	Если Строки.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Строки[0].Раздел;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СвойстваФункциональности(ИмяФункциональности, ОписаниеФункциональности)
	
	СтрокиФункциональности = ОписаниеФункциональности.НайтиСтроки(Новый Структура("Имя", ИмяФункциональности));
	Если СтрокиФункциональности.Количество() > 0 Тогда
		Возврат СтрокиФункциональности[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ФункциональностьПоРазделам(СписокФункциональности, ОписаниеФункциональности)
	
	Разделы = Новый Структура;
	Для Каждого Функциональность Из СписокФункциональности Цикл
		Раздел = РазделФункциональности(Функциональность, ОписаниеФункциональности);
		ФункциональностьРаздела = Неопределено;
		Разделы.Свойство(Раздел, ФункциональностьРаздела);
		Если ФункциональностьРаздела = Неопределено Тогда
			ФункциональностьРаздела = Новый Массив;
			Разделы.Вставить(Раздел, ФункциональностьРаздела);
		КонецЕсли;
		ФункциональностьРаздела.Добавить(Функциональность);
	КонецЦикла;
	
	Возврат Разделы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ФункциональностьРаздела(ИмяРаздела, ОписаниеФункциональности)
	
	Отбор = Новый Структура("Раздел", ИмяРаздела);
	
	Возврат ОписаниеФункциональности.НайтиСтроки(Отбор);
	
КонецФункции

&НаСервереБезКонтекста
Функция ФункциональностьРазделаДляПроверкиИспользования(ИмяРаздела, ОписаниеФункциональности)
	
	Отбор = Новый Структура("Раздел", ИмяРаздела);
	
	Возврат ФункциональностьПоОтбору(Отбор, ОписаниеФункциональности);
	
КонецФункции

&НаСервере
Функция ЗаполнитьОписаниеФункциональности()
	
	ПолноеОписаниеФункциональности = Обработки.ФункциональностьПрограммы.ОписаниеФункциональности();
	
	СписокНедоступнойФункциональности = ПолноеОписаниеФункциональности.НайтиСтроки(Новый Структура("Доступна", Ложь));
	Для Каждого НедоступнаяФункциональность Из СписокНедоступнойФункциональности Цикл
		Элементы[НедоступнаяФункциональность.Имя].Видимость = Ложь;
	КонецЦикла;
	
	СтрокиДляКопирования = ПолноеОписаниеФункциональности.НайтиСтроки(Новый Структура("Доступна", Истина));
	ОписаниеДоступнойФункциональности = ПолноеОписаниеФункциональности.Скопировать(СтрокиДляКопирования);
	Для Каждого ДоступнаяФункциональность Из ОписаниеДоступнойФункциональности Цикл
		Если НЕ Элементы[ДоступнаяФункциональность.Имя].Видимость Тогда
			Элементы[ДоступнаяФункциональность.Имя].Видимость = Истина;
		КонецЕсли;
	КонецЦикла;
		
	ОписаниеФункциональности.Загрузить(ОписаниеДоступнойФункциональности);
	
	// Скрыть настройки для базовой версии
	ЭтоБазоваяВерсияКонфигурации = СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	Элементы.ГруппаОрганизация.Видимость   = НЕ ЭтоБазоваяВерсияКонфигурации;    // раздел Организации
	Элементы.ИспользоватьОбменВС.Видимость = НЕ ЭтоБазоваяВерсияКонфигурации;    // признак использования Виртуального склада
	
КонецФункции

&НаСервере
Процедура НастроитьВнешнийВидФормы()
	
	НастроитьЭлементыФункциональности();
	
	НастроитьБаннерыЭлементовФункциональности();
	
	НастроитьБаннерВключениеФункциональностиПриПерезапуске();
	
	УстановитьВариантФункциональности();
	
КонецПроцедуры

&НаСервере
Функция НастроитьЭлементыФункциональности()
	
	Элементы.ДекорацияВключениеФункциональностиПриПерезапуске.Видимость = ИнтерфейсТаксиПростой;
	
КонецФункции

&НаСервере
Процедура УстановитьВариантФункциональности()
	
	ВсеЗначенияФункциональности = ВсеЗначенияФункциональности();
	
	ВариантФункциональности = Обработки.ФункциональностьПрограммы.ВариантФункциональностиПоЗначениям(
		ВсеЗначенияФункциональности);
	
	ЭтоОсновнаяФункциональность = ВариантФункциональности = ФункциональностьПрограммыКлиентСервер.ОсновнаяФункциональность();
	ЭтоПолнаяФункциональность = ВариантФункциональности = ФункциональностьПрограммыКлиентСервер.ПолнаяФункциональность();
	Элементы.КартинкаОсновная.Видимость = ЭтоОсновнаяФункциональность;
	Элементы.КартинкаПолная.Видимость = ЭтоПолнаяФункциональность;
	Элементы.КартинкаВыборочная.Видимость = НЕ ЭтоПолнаяФункциональность И НЕ ЭтоОсновнаяФункциональность;
	
КонецПроцедуры

&НаСервере
Функция ВсеЗначенияФункциональности()
	
	ВсеЗначенияФункциональности = Новый Структура;
	
	Для Каждого Функциональность Из ОписаниеФункциональности Цикл
		ВсеЗначенияФункциональности.Вставить(Функциональность.Имя, ЭтотОбъект[Функциональность.Имя]);
	КонецЦикла;
	
	Возврат ВсеЗначенияФункциональности;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьНажатиеОшибки(Элемент, ИмяЗаголовка)
	
	Если ИмяЗаголовка = "Главное" Тогда
		ПоказыватьСинхронизациюДляОпций = Ложь;
	ИначеЕсли ИмяЗаголовка = "Закладки" Тогда
		ПоказыватьСинхронизациюДляОпций = Истина;
	КонецЕсли;
	
	ИмяЭлемента = СтрЗаменить(Элемент.Имя, ИмяЗаголовка, "");
	
	ПустаяОрганизация = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
	Если ИмяЭлемента = "ИспользуетсяСинхронизацияДанных" Тогда
		ОткрытьФормуОбъекта("Обработка.ФункциональностьПрограммы.Форма.ФормаИспользуетсяСинхронизацияДанных");
	ИначеЕсли ИмяЭлемента = "ИспользоватьОплатуПоПлатежнымКартам" Тогда
		ЗапуститьФормированиеСпискаДокументовПрепятствующихОтключениюОпцииНаКлиенте("ИспользоватьОплатуПоПлатежнымКартам");
	ИначеЕсли ИмяЭлемента = "ИспользоватьПодключаемоеОборудование" Тогда
		ОткрытьФормуОбъекта("Справочник.ПодключаемоеОборудование.ФормаСписка");
	ИначеЕсли ИмяЭлемента = "ВедетсяПроизводственнаяДеятельность" Тогда
		ЗапуститьФормированиеСпискаДокументовПрепятствующихОтключениюОпцииНаКлиенте("ВедетсяПроизводственнаяДеятельность");
	ИначеЕсли ИмяЭлемента = "ВедетсяУчетОсновныхСредств" Тогда
		ЗапуститьФормированиеСпискаДокументовПрепятствующихОтключениюОпцииНаКлиенте("ВедетсяУчетОсновныхСредств");
	ИначеЕсли ИмяЭлемента = "ИспользоватьКомплектациюОС" Тогда
		ЗапуститьФормированиеСпискаДокументовПрепятствующихОтключениюОпцииНаКлиенте("ИспользоватьКомплектациюОС");
	ИначеЕсли ИмяЭлемента = "ИспользоватьРеструктуризациюОС" Тогда
		ЗапуститьФормированиеСпискаДокументовПрепятствующихОтключениюОпцииНаКлиенте("ИспользоватьРеструктуризациюОС");
	ИначеЕсли ИмяЭлемента = "ВедетсяУчетНМА" Тогда
		ЗапуститьФормированиеСпискаДокументовПрепятствующихОтключениюОпцииНаКлиенте("ВедетсяУчетНМА");
	ИначеЕсли ИмяЭлемента = "ВедетсяУчетТоваровПоТоварамОрганизацииБУ" Тогда
		ЗапуститьФормированиеСпискаДокументовПрепятствующихОтключениюОпцииНаКлиенте("ВедетсяУчетТоваровПоТоварамОрганизацииБУ");
	ИначеЕсли ИмяЭлемента = "ВедетсяУчетИмпортныхТоваров" Тогда
		Если ПоказыватьСинхронизациюДляОпций И ИспользуетсяСинхронизацияДанных() Тогда
			ОткрытьФормуОбъекта("Обработка.ФункциональностьПрограммы.Форма.ФормаИспользуетсяСинхронизацияДанных");
		Иначе
			ЗапуститьФормированиеСпискаДокументовПрепятствующихОтключениюОпцииНаКлиенте("ВедетсяУчетИмпортныхТоваров");
		КонецЕсли;
	ИначеЕсли ИмяЭлемента = "ИспользоватьКомплектациюНоменклатуры" Тогда
		Если ПоказыватьСинхронизациюДляОпций И ИспользуетсяСинхронизацияДанных() Тогда
			ОткрытьФормуОбъекта("Обработка.ФункциональностьПрограммы.Форма.ФормаИспользуетсяСинхронизацияДанных");
		Иначе
			ЗапуститьФормированиеСпискаДокументовПрепятствующихОтключениюОпцииНаКлиенте("ИспользоватьКомплектациюНоменклатуры");
		КонецЕсли;
	ИначеЕсли ИмяЭлемента = "ВедетсяУчетЗарплатыИКадры" Тогда
		ЗапуститьФормированиеСпискаДокументовПрепятствующихОтключениюОпцииНаКлиенте("ВедетсяУчетЗарплатыИКадры");	
	ИначеЕсли ИмяЭлемента = "ИспользоватьИсполнительныеЛисты" Тогда
		ЗапуститьФормированиеСпискаДокументовПрепятствующихОтключениюОпцииНаКлиенте("ИспользоватьИсполнительныеЛисты");		
	ИначеЕсли ИмяЭлемента = "ИспользоватьНачисленияПрочихДоходВЦеляхНалогообложения" Тогда
		ЗапуститьФормированиеСпискаДокументовПрепятствующихОтключениюОпцииНаКлиенте("ИспользоватьНачисленияПрочихДоходВЦеляхНалогообложения");	
	ИначеЕсли ИмяЭлемента = "ИспользоватьРегистрациюПрочихВыплат" Тогда
		ЗапуститьФормированиеСпискаДокументовПрепятствующихОтключениюОпцииНаКлиенте("ИспользоватьРегистрациюПрочихВыплат");
	ИначеЕсли ИмяЭлемента = "ИспользоватьДепонированиеЗаработнойПлаты" Тогда
		ЗапуститьФормированиеСпискаДокументовПрепятствующихОтключениюОпцииНаКлиенте("ИспользоватьДепонированиеЗаработнойПлаты");		
	ИначеЕсли ИмяЭлемента = "ВестиУчетПоОрганизациям" Тогда
			ЗапуститьФормированиеСпискаДокументовПрепятствующихОтключениюОпцииНаКлиенте("ВестиУчетПоОрганизациям");
	ИначеЕсли ИмяЭлемента = "ПоддержкаРаботыСоСтруктурнымиПодразделениями" Тогда
		ЗапуститьФормированиеСпискаДокументовПрепятствующихОтключениюОпцииНаКлиенте("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	ИначеЕсли ИмяЭлемента = "ВедетсяРозничнаяТорговля" Тогда
		Если ПоказыватьСинхронизациюДляОпций И ИспользуетсяСинхронизацияДанных() Тогда
			ОткрытьФормуОбъекта("Обработка.ФункциональностьПрограммы.Форма.ФормаИспользуетсяСинхронизацияДанных");
		Иначе
			ЗапуститьФормированиеСпискаДокументовПрепятствующихОтключениюОпцииНаКлиенте("ВедетсяРозничнаяТорговля");
		КонецЕсли;
	ИначеЕсли ИмяЭлемента = "ВестиУчетПоДоговорам" Тогда
		Если ПоказыватьСинхронизациюДляОпций И ИспользуетсяСинхронизацияДанных() Тогда
			ОткрытьФормуОбъекта("Обработка.ФункциональностьПрограммы.Форма.ФормаИспользуетсяСинхронизацияДанных");
		Иначе
			ЗапуститьФормированиеСпискаДокументовПрепятствующихОтключениюОпцииНаКлиенте("ВестиУчетПоДоговорам");
		КонецЕсли;
	ИначеЕсли ИмяЭлемента = "ИспользоватьУчетНДСЗаНерезидента" Тогда
		ЗапуститьФормированиеСпискаДокументовПрепятствующихОтключениюОпцииНаКлиенте("ИспользоватьУчетНДСЗаНерезидента");
	ИначеЕсли ИмяЭлемента = "ИспользоватьОбменЭСФ" Тогда
		ЗапуститьФормированиеСпискаДокументовПрепятствующихОтключениюОпцииНаКлиенте("ИспользоватьОбменЭСФ");
	ИначеЕсли ИмяЭлемента = "ИспользоватьОбменВС" Тогда
		ЗапуститьФормированиеСпискаДокументовПрепятствующихОтключениюОпцииНаКлиенте("ИспользоватьОбменВС");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовРаздела(ИмяРаздела)
	
	ФункциональностьРаздела = ФункциональностьРаздела(ИмяРаздела, ОписаниеФункциональности);
	Для Каждого Функциональность Из ФункциональностьРаздела Цикл
		
		ОпцияВключена = ЭтотОбъект[Функциональность.Имя];
		
		ЕстьОтключеннаяРодительскаяФункциональностьРаздела = ВключенаХотяБыОднаФункциональностьРаздела(
			Функциональность.Раздел, Функциональность.РодительскаяФункциональность) = Ложь;
		
		ЕстьИспользуемаяДочерняяФункциональностьРаздела = ВключенаХотяБыОднаИспользуемаяФункциональностьРаздела(
			Функциональность.Раздел, Функциональность.ДочерняяФункциональность) = Истина;
		
		ЗапрещеноСниматьОпциюВПолномИнтерфесе = НЕ ИнтерфейсТаксиПростой
			И ОпцияВключена
			И Функциональность.ДолжнаБытьОбязательноВключенаВПолномИнтерфейсе;
		
		Элементы[Функциональность.Имя].Доступность = Не ЕстьОтключеннаяРодительскаяФункциональностьРаздела
			И Не ЕстьИспользуемаяДочерняяФункциональностьРаздела
			И Не Функциональность.Используется
			И Не ЗапрещеноСниматьОпциюВПолномИнтерфесе;
		
		ИмяЭлементаЗакладки = "Закладки" + Функциональность.Имя;
		Если Элементы.Найти(ИмяЭлементаЗакладки) <> Неопределено Тогда
			Элементы[ИмяЭлементаЗакладки].Видимость = Функциональность.Используется;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ТекстСообщенияОбАвтоматическомВключенииФункциональности()
	
	СписокФункциональности = Новый Массив;
	
	Отбор = Новый Структура("ДолжнаБытьОбязательноВключенаВПолномИнтерфейсе", Истина);
	Для Каждого Функциональность Из ОписаниеФункциональности.НайтиСтроки(Отбор) Цикл
		Если Не ЭтотОбъект[Функциональность.Имя] Тогда
			СписокФункциональности.Добавить(СтрШаблон("""%1""", НаименованиеФункциональности(Функциональность.Имя)));
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(СписокФункциональности) Тогда
		Возврат "";
	КонецЕсли;
	
	ШаблонСообщения = НСтр("ru='Также будет включена функциональность %1.'");
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
		СтрСоединить(СписокФункциональности, ", "));
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПоказатьДлительнуюОперациюРаздела(Форма, ИмяРаздела, ОписаниеДлительнойОперации)
	
	ОтобразитьСостояниеДлительнойОперации(Форма, ИмяРаздела, Истина, ОписаниеДлительнойОперации);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СкрытьДлительнуюОперациюРаздела(Форма, ИмяРаздела)
	
	ОтобразитьСостояниеДлительнойОперации(Форма, ИмяРаздела, Ложь, "");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтобразитьСостояниеДлительнойОперации(Форма, ИмяРаздела, ДлительнаяОперацияЗапущена, ОписаниеДлительнойОперации)
	
	ДлительныеОперацииВыполняются = ЗначениеЗаполнено(Форма.ВыполняетсяИзменениеФункциональности)
		Или ЗначениеЗаполнено(Форма.ВыполняетсяПроверкаДоступностиРаздела);
	
	УстановитьДоступностьРазделов(Форма, Не ДлительныеОперацииВыполняются);
	
	Форма.Элементы["Группа" + ИмяРаздела + "ИспользуемыеВозможности"].Видимость = Не ДлительнаяОперацияЗапущена;
	Форма.Элементы["Группа" + ИмяРаздела + "ДлительнаяОперация"].Видимость = ДлительнаяОперацияЗапущена;
	Форма.Элементы[ИмяРаздела + "ДлительнаяОперацияОписание"].Заголовок = ОписаниеДлительнойОперации;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьДоступностьРазделов(Форма, Доступность)
	
	Для Каждого ИмяРазделаФункциональности Из РазделыФункциональности(Форма.ОписаниеФункциональности) Цикл
		Форма.Элементы["Группа" + ИмяРазделаФункциональности + "Константы"].Доступность = Доступность;
	КонецЦикла;
	Форма.Элементы.ГруппаГлавноеКонстанты.Доступность = Доступность;
	
	Если Не Форма.Элементы.ГруппаБанкКассаКонстанты.Доступность Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы, "ПерейтиКПодключаемомуОборудованию", "Видимость", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуДоступностиРазделаВФоне(ИмяРаздела)
	
	ДлительнаяОперация = ПроверитьДоступностьРаздела(ИмяРаздела);
	ОжидатьПроверкуДоступностиРазделаВФоне(ДлительнаяОперация, ИмяРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьПроверкуДоступностиРазделаВФоне(ДлительнаяОперация, ИмяРаздела)
	
	Если ЗначениеЗаполнено(ДлительнаяОперация) Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяРаздела", ИмяРаздела);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПроверкуДоступностиРазделаВФонеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуДоступностиРазделаВФонеЗавершение(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ДлительнаяОперация)
		И ДлительнаяОперация.Статус = "Выполнено" Тогда
		ОтобразитьРезультатПроверки(ДополнительныеПараметры.ИмяРаздела, ДлительнаяОперация.АдресРезультата);
	Иначе
		СкрытьДлительнуюОперациюПроверкиДоступностиРаздела(ДополнительныеПараметры.ИмяРаздела);
		ОповеститьОбОшибкеДлительнойОперации(ДлительнаяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьДоступностьРаздела(ИмяРаздела)
	
	ДоступностьРазделаПроверена.Вставить(ИмяРаздела, Истина);
	
	ПроверяемаяФункциональность = ФункциональностьРазделаДляПроверкиИспользования(ИмяРаздела, ОписаниеФункциональности);
	
	ДлительнаяОперация = ПроверитьВозможностьИзмененияФункциональностиВФоне(ИмяРаздела, ПроверяемаяФункциональность, ЭтотОбъект.УникальныйИдентификатор);
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ОтобразитьРезультатПроверки(ИмяРаздела, ДлительнаяОперация.АдресРезультата);
		Возврат Неопределено;
	Иначе
		ПоказатьДлительнуюОперациюПроверкиДоступностиРаздела(ИмяРаздела);
		Возврат ДлительнаяОперация;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПоказатьДлительнуюОперациюПроверкиДоступностиРаздела(ИмяРаздела)
	
	ОписаниеДлительнойОперации = НСтр("ru = 'Проверяется возможность отключения функциональности...'");
	
	ВыполняетсяПроверкаДоступностиРаздела.Вставить(ИмяРаздела, Истина);
	
	ПоказатьДлительнуюОперациюРаздела(ЭтотОбъект, ИмяРаздела, ОписаниеДлительнойОперации);
	
КонецПроцедуры

&НаСервере
Процедура СкрытьДлительнуюОперациюПроверкиДоступностиРаздела(ИмяРаздела)
	
	ВыполняетсяПроверкаДоступностиРаздела.Удалить(ИмяРаздела);
	
	СкрытьДлительнуюОперациюРаздела(ЭтотОбъект, ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверки(ИмяРаздела, АдресРезультата)
	
	СкрытьДлительнуюОперациюПроверкиДоступностиРаздела(ИмяРаздела);
	
	РезультатПроверки = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	ЗаполнитьИспользованиеФункциональности(РезультатПроверки);
	
	УстановитьДоступностьЭлементовРаздела(ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИспользованиеФункциональности(РезультатПроверки)
	
	Если Не ЗначениеЗаполнено(РезультатПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуемаяФункциональность = РезультатПроверки.Используется;
	Для Каждого Функциональность Из ИспользуемаяФункциональность Цикл
		СвойстваФункциональности = СвойстваФункциональности(Функциональность, ОписаниеФункциональности);
		Если СвойстваФункциональности <> Неопределено Тогда
			СвойстваФункциональности.Используется = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьВозможностьИзмененияФункциональностиВФоне(ИмяРаздела, ПроверяемаяФункциональность, УникальныйИдентификатор)
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Функциональность", ПроверяемаяФункциональность);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка возможности изменения функциональности.'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ФункциональностьПрограммы.ПроверитьВозможностьИзмененияФункциональностиВФоне",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуОбъекта(ИмяФормы, ПараметрыФормы = Неопределено)
	
	ОткрытьФорму(ИмяФормы, ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИспользуетсяСинхронизацияДанных()
	
	СинхронизацияДанных = Обработки.ФункциональностьПрограммы.НастройкиСинхронизацииДанных();
	
	Возврат СинхронизацияДанных.Прочее;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИзменитьТолькоПростойИнтерфейс(ИнтерфейсТаксиПростой, НовоеЗначение)
	
	Если Не ИнтерфейсТаксиПростой Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// В простом интерфейсе включаются только опции простого интерфейса,
	// опции полного интерфейса включаются отложенно при перезапуске.
	// Отключаются все опции сразу, независимо от принадлежности к интерфейсу.
	Если НовоеЗначение Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура НастроитьБаннерСообщения()
	
	Если ОбщегоНазначения.ЭтоАвтономноеРабочееМесто() Тогда
		Элементы.Баннер.Видимость = Истина;
		Элементы.ТекстБаннера.Заголовок = Новый ФорматированнаяСтрока(НСтр("ru = 'Изменять функциональность можно только в режиме сервиса'"));
	Иначе
		Элементы.Баннер.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#Область ПереходНаПолныйИнтерфейс

&НаКлиенте
Функция ПараметрыПереходаНаПолныйИнтерфейс()
	
	ПараметрыПерехода = Новый Структура();
	ПараметрыПерехода.Вставить("ИзменяемаяФункциональность", Новый Массив);
	
	Для Каждого Функциональность Из НедоступнаяВПростомИнтерфейсеФункциональность(ОписаниеФункциональности) Цикл
		
		Если НаборКонстант[Функциональность.Имя] <> ЭтотОбъект[Функциональность.Имя] Тогда
			ПараметрыПерехода.ИзменяемаяФункциональность.Добавить(Функциональность.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПараметрыПерехода;
	
КонецФункции

&НаСервере
Функция ПерейтиНаПолныйИнтерфейсВФоне(ИзменяемаяФункциональность)
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Функциональность", ИзменяемаяФункциональность);
	ПараметрыПроцедуры.Вставить("НовоеЗначение", Истина);
	ПараметрыПроцедуры.Вставить("ИзменитьТолькоПростойИнтерфейс", Ложь); // При переходе на полный интерфейс всегда изменяется вся функциональность.
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Включение функциональности при переходе на полный интерфейс.'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ФункциональностьПрограммы.ИзменитьСписокФункциональностиВФоне",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	Если ЗначениеЗаполнено(ДлительнаяОперация)
		И ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		ПоказатьДлительнуюОперациюПереходаНаПолныйИнтерфейс(Истина);
		
	КонецЕсли;
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ОжидатьПереходаНаПолныйИнтерфейсВФоне(ДлительнаяОперация)
	
	ДополнительныеПараметры = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОжидатьПереходаНаПолныйИнтерфейсВФонеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьПереходаНаПолныйИнтерфейсВФонеЗавершение(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ДлительнаяОперация)
		И ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		УстановитьИнтерфейсНаСервере();
		ЗавершитьРаботуСистемы(Ложь, Истина);
		
	Иначе
		ПоказатьДлительнуюОперациюПереходаНаПолныйИнтерфейс(Ложь);
		ОповеститьОбОшибкеДлительнойОперации(ДлительнаяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьДлительнуюОперациюПереходаНаПолныйИнтерфейс(ДлительнаяОперацияЗапущена)
	
	Если ДлительнаяОперацияЗапущена Тогда
		ВыполняетсяИзменениеФункциональности.Вставить("ПереходНаПолныйИнтерфейс", Истина);
	Иначе
		ВыполняетсяИзменениеФункциональности.Вставить("ПереходНаПолныйИнтерфейс", Ложь);
	КонецЕсли;
	
	Элементы.ГруппаПерезапускКнопка.Видимость = Не ДлительнаяОперацияЗапущена;
	Элементы.ГруппаПерезапускДлительнаяОперация.Видимость = ДлительнаяОперацияЗапущена;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИнтерфейсНаСервере()
	
	УстановитьРежимКомандногоИнтерфейса("ИнтерфейсТакси");
	ХранилищеОбщихНастроек.Сохранить(ВРег("ДатаСменыИнтерфейса"),,ТекущаяДатаСеанса(),,);
	
КонецПроцедуры

&НаКлиенте
Функция ПерейтиНаПолныйИнтерфейс(ПараметрыПерехода) Экспорт
	
	ДлительнаяОперация = ПерейтиНаПолныйИнтерфейсВФоне(ПараметрыПерехода.ИзменяемаяФункциональность);
	ОжидатьПереходаНаПолныйИнтерфейсВФоне(ДлительнаяОперация);
	
КонецФункции

#КонецОбласти

#Область ИзменениеРеквизитов

&НаКлиенте
Процедура ПриИзмененииФункциональностиНаКлиенте(Элемент)
	
	ИмяЭлемента = Элемент.Имя;
	ПараметрыИзмененияФункциональности = ПараметрыИзмененияФункциональности(ИмяЭлемента);
	
	Если ПараметрыИзмененияФункциональности.ЗадатьВопросОДлительнойОперации Тогда
		ЗадатьВопросПроДлительноеИзменениеФункциональности(ПараметрыИзмененияФункциональности);
	Иначе
		ИзменитьЗначениеФункциональностиНаКлиенте(ПараметрыИзмененияФункциональности);
	КонецЕсли;
	
	Если ИмяЭлемента = "ИспользоватьОбменЭСФ" Тогда
		ЭСФВызовСервера.УстановитьЗначениеКонстантЭСФПриИзмененииФункциональностиПрограммы();		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗначениеФункциональностиНаКлиенте(ПараметрыИзмененияФункциональности)
	
	Результат = ИзменитьФункциональностьНаСервере(ПараметрыИзмененияФункциональности.ИмяЭлемента,
		ПараметрыИзмененияФункциональности.НовоеЗначение);
	
	ОбработатьИзменениеФункциональностиНаКлиенте(ПараметрыИзмененияФункциональности.ИмяЭлемента, Результат);
	
КонецПроцедуры

&НаСервере
Функция ИзменитьФункциональностьНаСервере(ИмяФункциональности, НовоеЗначение)
	
	РезультатИзменения = Обработки.ФункциональностьПрограммы.Изменить(
		ИмяФункциональности, НовоеЗначение, ИзменитьТолькоПростойИнтерфейс(ИнтерфейсТаксиПростой, НовоеЗначение));
	
	Если РезультатИзменения.Отказ Тогда
		ЭтотОбъект[ИмяФункциональности] = Не НовоеЗначение;
	КонецЕсли;
	
	НастроитьФормуПослеИзмененияФункциональности(РезультатИзменения);
	
	Возврат РезультатИзменения;
	
КонецФункции

&НаСервере
Функция ИзменитьСписокФункциональностиНаСервере(СписокФункциональности, НовоеЗначение)
	
	РезультатИзменения = Обработки.ФункциональностьПрограммы.ИзменитьСписокФункциональности(
		СписокФункциональности, НовоеЗначение, ИзменитьТолькоПростойИнтерфейс(ИнтерфейсТаксиПростой, НовоеЗначение));
	
	НастроитьФормуПослеИзмененияФункциональности(РезультатИзменения);
	
	Возврат РезультатИзменения;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеФункциональностиНаКлиенте(ИмяФункциональности, РезультатИзменения)
	
	Если РезультатИзменения.Отказ Тогда
		
		Если ЗначениеЗаполнено(РезультатИзменения.ТребуетсяВключитьФункциональность) Тогда
			
			ЗадатьВопросПроДополнительноеВключениеФункциональности(ИмяФункциональности, РезультатИзменения);
			
		Иначе
			ТекстСообщения = ТекстОшибкиОтключенияФункциональности(ИмяФункциональности, РезультатИзменения);
			Если ЗначениеЗаполнено(ТекстСообщения) Тогда
				ПоказатьПредупреждение(, ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ПослеЗавершенияИзмененияФункциональностиНаКлиенте(РезультатИзменения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗначениеФункциональностиНаКлиентеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	// Для простоты запускаем включение дополнительной функциональности всегда без фонового задания.
	// Сейчас нет зависимых операций, которые выполняются долго, поэтому это допустимо.
	// Если такие операции появяться, то нужно будет добавить фоновое включение функциональности для таких операций.
	
	РезультатИзменения = ДополнительныеПараметры.РезультатИзменения;
	
	СписокФункциональности = РезультатИзменения.ТребуетсяВключитьФункциональность;
	СписокФункциональности.Добавить(ДополнительныеПараметры.ИмяФункциональности);
	
	РезультатИзменения = ИзменитьСписокФункциональностиНаСервере(
		СписокФункциональности, РезультатИзменения.НовоеЗначение);
	
	Если РезультатИзменения.Отказ
		И ЗначениеЗаполнено(РезультатИзменения.ТекстСообщения) Тогда
		ПоказатьПредупреждение(, РезультатИзменения.ТекстСообщения);
	КонецЕсли;
	
	ПослеЗавершенияИзмененияФункциональностиНаКлиенте(РезультатИзменения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗавершенияИзмененияФункциональностиНаКлиенте(РезультатИзменения)
	
	Если ЗначениеЗаполнено(РезультатИзменения.НовыеЗначенияФункциональности) Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
	// Обновлять интерфейс нужно только в том случае, если не изменились
	// значения функциональности для отложенного изменения.
	// Если они есть - то обновление интерфейса в простом интерфейсе вызовет
	// повторное открытие формы и все изменения будут потеряны.
	Если ЗначениеЗаполнено(РезультатИзменения.НовыеЗначенияФункциональности)
		И Не ЗначениеЗаполнено(РезультатИзменения.НовыеЗначенияФункциональностиДляОтложенногоИзменения) Тогда
		
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 1, Истина);
		
	КонецЕсли;
	
	ОбновитьИнтерфейс = Истина;
	
	Для Каждого НовоеЗначениеФункциональности Из РезультатИзменения.НовыеЗначенияФункциональности Цикл
		Оповестить("Запись_НаборКонстант", Новый Структура, НовоеЗначениеФункциональности.Ключ);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПослеИзмененияФункциональности(РезультатИзменения)
	
	ИзменитьФункциональностьПолногоИнтерфейсаДляОтложенногоИзменения(РезультатИзменения);
	
	ПрочитатьЗначенияФункциональностиФормы();
	
	УстановитьДоступностьЭлементовРазделов(РезультатИзменения);
	
	УстановитьВариантФункциональности();
	
	НастроитьБаннерСообщения();
	
КонецПроцедуры

&НаСервере
Функция ТекстСообщенияТребуетсяВключитьФункциональность(ТребуетсяВключитьФункциональность)
	
	Если ЗначениеЗаполнено(ТребуетсяВключитьФункциональность) Тогда
		
		ОписаниеФункциональностиПоРазделам = Новый Массив;
		
		Разделы = ФункциональностьПоРазделам(ТребуетсяВключитьФункциональность, ОписаниеФункциональности);
		Для Каждого Раздел Из Разделы Цикл
			
			ОписаниеФункциональностиРаздела = Новый Массив;
			Для Каждого ФункциональностьДляВключения Из Раздел.Значение Цикл
				ОписаниеФункциональностиРаздела.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='""%1""'"), НаименованиеФункциональности(ФункциональностьДляВключения)));
			КонецЦикла;
			
			ОписаниеФункциональностиРаздела = СтрСоединить(ОписаниеФункциональностиРаздела, ", " + Символы.ПС);
			ЗаголовокРаздела = Элементы["Группа" + Раздел.Ключ].Заголовок;
			
			ОписаниеФункциональностиПоРазделам.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1 (закладка ""%2"")'"), ОписаниеФункциональностиРаздела, ЗаголовокРаздела));
				
		КонецЦикла;
		
		ОписаниеРазделов = СтрСоединить(ОписаниеФункциональностиПоРазделам, ", " + Символы.ПС);
		
		ТекстШаблона = НСтр("ru='Для включения функциональности необходимо включить'") + Символы.ПС +
			НСтр("ru='%1.'") + Символы.ПС +
			НСтр("ru='Включить функциональность?'");
			
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстШаблона, ОписаниеРазделов);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ТекстОшибкиОтключенияФункциональности(ИмяФункциональности, РезультатИзменения)
	
	Если ЗначениеЗаполнено(РезультатИзменения.НевозможноВыключитьФункциональность) Тогда
		ОписаниеНеотключаемойФункциональности = Новый Массив;
		Для Каждого НеотключаемаяФункциональность Из РезультатИзменения.НевозможноВыключитьФункциональность Цикл
			ОписаниеНеотключаемойФункциональности.Добавить("-" + " " + НаименованиеФункциональности(НеотключаемаяФункциональность));
		КонецЦикла;
		
		ТекстШаблона = НСтр("ru='Выключить функциональность нельзя,'") +Символы.ПС +
				НСтр("ru='так как используется следующая функциональность:'") +Символы.ПС +
				НСтр("ru='%1'");
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстШаблона,
			СтрСоединить(ОписаниеНеотключаемойФункциональности, Символы.ПС));
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПараметрыИзмененияФункциональности(ИмяЭлемента)
	
	НовоеЗначение = ЭтотОбъект[ИмяЭлемента];
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("ИмяЭлемента", ИмяЭлемента);
	ПараметрыИзменения.Вставить("ЗадатьВопросОДлительнойОперации", Ложь);
	ПараметрыИзменения.Вставить("НовоеЗначение", НовоеЗначение);
	
	ИзменитьТолькоПростойИнтерфейс = ИзменитьТолькоПростойИнтерфейс(ИнтерфейсТаксиПростой, НовоеЗначение);
	
	Функциональность = СвойстваФункциональности(ИмяЭлемента, ОписаниеФункциональности);
	
	Если НаборКонстант[Функциональность.Имя] <> НовоеЗначение Тогда
		
		ИзменитьФункциональностьСразу = Не ИзменитьТолькоПростойИнтерфейс
			Или Функциональность.ДоступнаВПростомИнтерфейсе;
		
		Если ИзменитьФункциональностьСразу И Функциональность.ТребуетсяДлительнаяОперация Тогда
			ПараметрыИзменения.ЗадатьВопросОДлительнойОперации = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыИзменения;
	
КонецФункции

&НаКлиенте
Процедура ЗадатьВопросПроДлительноеИзменениеФункциональности(ПараметрыИзмененияФункциональности)
	
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(
		"ЗадатьВопросПроДлительноеИзменениеФункциональностиЗавершение", ЭтотОбъект, ПараметрыИзмененияФункциональности);
	
	// Отключаем флаг функциональности так, чтобы до завершения длительной операции
	// флаг выглядел бы, как будто он еще не установлен или не снят.
	// Значение флага изменится только после того, как будет выполнено изменение функциональности.
	ЭтотОбъект[ПараметрыИзмененияФункциональности.ИмяЭлемента] = НЕ ЭтотОбъект[ПараметрыИзмененияФункциональности.ИмяЭлемента];
	
	Если ПараметрыИзмененияФункциональности.НовоеЗначение Тогда
		ТекстВопроса = НСтр(
			"ru='Включение функциональности может занять длительное время.'") + Символы.ПС +
			НСтр("ru='%1'") + Символы.ПС +
			НСтр("ru='Продолжить?'");
	Иначе
		ТекстВопроса = НСтр(
			"ru='Отключение функциональности может занять длительное время.'") + Символы.ПС +
			НСтр("ru='Продолжить?'");
	КонецЕсли;
	
	ТекстЗаголовка = НСтр("ru='Включение функциональности'");
	
	ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , ТекстЗаголовка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросПроДлительноеИзменениеФункциональностиЗавершение(Ответ, ПараметрыИзмененияФункциональности) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ИзменитьЗначениеФункциональностиВФонеНаКлиенте(ПараметрыИзмененияФункциональности.ИмяЭлемента, ПараметрыИзмененияФункциональности.НовоеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗначениеФункциональностиВФонеНаКлиенте(ИмяФункциональности, НовоеЗначение)
	
	ДлительнаяОперация = ИзменитьФункциональностьВФонеНаСервере(ИмяФункциональности, НовоеЗначение, ЭтотОбъект.УникальныйИдентификатор);
	ОжидатьИзмененияФункциональностиВФоне(ДлительнаяОперация, ИмяФункциональности);
	
КонецПроцедуры

&НаСервере
Функция ИзменитьФункциональностьВФонеНаСервере(ИмяЭлемента, НовоеЗначение, УникальныйИдентификатор)
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ИмяФункциональности", ИмяЭлемента);
	ПараметрыПроцедуры.Вставить("НовоеЗначение", НовоеЗначение);
	ПараметрыПроцедуры.Вставить("ИзменитьТолькоПростойИнтерфейс",
		ИзменитьТолькоПростойИнтерфейс(ИнтерфейсТаксиПростой, НовоеЗначение));
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Включение функциональности.'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ФункциональностьПрограммы.ИзменитьВФоне",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	Если ЗначениеЗаполнено(ДлительнаяОперация) Тогда
		
		Если ДлительнаяОперация.Статус = "Выполняется" Тогда
			ИмяРаздела = РазделФункциональности(ИмяЭлемента, ОписаниеФункциональности);
			ПоказатьДлительнуюОперациюВключенияФункциональностиРаздела(ИмяРаздела, НовоеЗначение);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ОжидатьИзмененияФункциональностиВФоне(ДлительнаяОперация, ИмяФункциональности)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяФункциональности", ИмяФункциональности);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОжидатьИзмененияФункциональностиВФонеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьИзмененияФункциональностиВФонеЗавершение(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ДлительнаяОперация)
		И ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		Результат = ИзменитьФункциональностьВФонеНаСервереЗавершение(ДополнительныеПараметры.ИмяФункциональности,
			ДлительнаяОперация.АдресРезультата);
		
		ОбработатьИзменениеФункциональностиНаКлиенте(ДополнительныеПараметры.ИмяФункциональности, Результат);
		
	Иначе
		ИмяРаздела = РазделФункциональности(ДополнительныеПараметры.ИмяФункциональности, ОписаниеФункциональности);
		СкрытьДлительнуюОперациюВключенияФункциональностиРаздела(ИмяРаздела);
		
		ОповеститьОбОшибкеДлительнойОперации(ДлительнаяОперация);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИзменитьФункциональностьВФонеНаСервереЗавершение(ИмяФункциональности, АдресРезультата)
	
	ИмяРаздела = РазделФункциональности(ИмяФункциональности, ОписаниеФункциональности);
	СкрытьДлительнуюОперациюВключенияФункциональностиРаздела(ИмяРаздела);
	
	РезультатИзменения = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если РезультатИзменения.Отказ Тогда
		ЭтотОбъект[ИмяФункциональности] = Не РезультатИзменения.НовоеЗначение;
	КонецЕсли;
	
	ОбновитьЗначенияКонстант(РезультатИзменения.НовыеЗначенияФункциональности);
	
	НастроитьФормуПослеИзмененияФункциональности(РезультатИзменения);
	
	Возврат РезультатИзменения;
	
КонецФункции

&НаСервере
Процедура ПоказатьДлительнуюОперациюВключенияФункциональностиРаздела(ИмяРаздела, НовоеЗначение)
	
	Если НовоеЗначение Тогда
		ОписаниеОперации = НСтр("ru = 'Пожалуйста, подождите, включается функциональность...'")
	Иначе
		ОписаниеОперации = НСтр("ru = 'Пожалуйста, подождите, отключается функциональность...'")
	КонецЕсли;
	
	ВыполняетсяИзменениеФункциональности.Вставить(ИмяРаздела, Истина);
	
	ПоказатьДлительнуюОперациюРаздела(ЭтотОбъект, ИмяРаздела, ОписаниеОперации);
	
КонецПроцедуры

&НаСервере
Процедура СкрытьДлительнуюОперациюВключенияФункциональностиРаздела(ИмяРаздела)
	
	ВыполняетсяИзменениеФункциональности.Удалить(ИмяРаздела);
	
	СкрытьДлительнуюОперациюРаздела(ЭтотОбъект, ИмяРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросПроДополнительноеВключениеФункциональности(ИмяФункциональности, РезультатИзменения)
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИмяФункциональности", ИмяФункциональности);
	ДопПараметры.Вставить("РезультатИзменения", РезультатИзменения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьЗначениеФункциональностиНаКлиентеЗавершение", ЭтотОбъект, ДопПараметры);
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.ОК, НСтр("ru='Включить'"));
	Кнопки.Добавить(КодВозвратаДиалога.Отмена);
	ТекстСообщения = ТекстСообщенияТребуетсяВключитьФункциональность(РезультатИзменения.ТребуетсяВключитьФункциональность);
	ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, Кнопки, , КодВозвратаДиалога.ОК);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьФункциональностьПолногоИнтерфейсаДляОтложенногоИзменения(РезультатИзменения)
	
	Если Не ИнтерфейсТаксиПростой Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ФункциональностьИЗначение Из РезультатИзменения.НовыеЗначенияФункциональностиДляОтложенногоИзменения Цикл
		ЭтотОбъект[ФункциональностьИЗначение.Ключ] = ФункциональностьИЗначение.Значение;
	КонецЦикла;
	
	НастроитьБаннерВключениеФункциональностиПриПерезапуске();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьЗначенияФункциональностиФормы()
	
	СохраняемыеЗначения = ЗначенияНедоступнойВПростомИнтерфейсеФункциональности(ЭтотОбъект);
	
	ЭтотОбъект.Прочитать();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СохраняемыеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовРазделов(РезультатИзменения)
	
	Разделы = Новый Структура;
	Для Каждого НовоеЗначениеФункциональности Из РезультатИзменения.НовыеЗначенияФункциональности Цикл
		ЭтотОбъект[НовоеЗначениеФункциональности.Ключ] = НаборКонстант[НовоеЗначениеФункциональности.Ключ];
		Разделы.Вставить(РазделФункциональности(НовоеЗначениеФункциональности.Ключ, ОписаниеФункциональности), Истина);
	КонецЦикла;
	
	Для Каждого Раздел Из Разделы Цикл
		Если ДоступностьРазделаПроверена.Свойство(Раздел.Ключ) Тогда
			УстановитьДоступностьЭлементовРаздела(Раздел.Ключ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДлительнаяОперация

&НаКлиенте
Процедура ЗапуститьФормированиеСпискаДокументовПрепятствующихОтключениюОпцииНаКлиенте(ИмяОпции)

	// Открываем форму отчета по документам и передаем туда все необходимые данные:
	//	- имя метода, который готовит отчет
	//	- наименование фонового задания
	//	- прочие параметры, специфичные для выполняемого метода (процедуры)
	// Форма при открытии запускает формирование результата в фоновом режиме.
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ИмяОпции", ИмяОпции);
	
	Если ИмяОпции = "ВестиУчетПоДоговорам" Тогда
		ПараметрыФормы.Вставить("ИмяМетода",
			"Обработки.ФункциональностьПрограммы.СформироватьСписокОбъектовПрепятствующихОтключениюУчетПоДоговорам");
		ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru='Остатки по договорам'"));
	ИначеЕсли ИмяОпции = "ВестиУчетПоОрганизациям" Тогда
		ПараметрыФормы.Вставить("ИмяМетода",
			"Обработки.ФункциональностьПрограммы.СформироватьСписокОбъектовПрепятствующихОтключениюВестиУчетПоОрганизациям");
		ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru='Организации'"));
	ИначеЕсли ИмяОпции = "ПоддержкаРаботыСоСтруктурнымиПодразделениями" Тогда
		ПараметрыФормы.Вставить("ИмяМетода",
			"Обработки.ФункциональностьПрограммы.СформироватьСписокОбъектовПрепятствующихОтключениюУчетПоддержкаСтруктурныхПодразделений");
		ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru='Учет по структурным подразделениям'"));
	ИначеЕсли ИмяОпции = "ВедетсяУчетТоваровПоТоварамОрганизацииБУ" Тогда
		ПараметрыФормы.Вставить("ИмяМетода",
			"Обработки.ФункциональностьПрограммы.СформироватьСписокОбъектовПрепятствующихОтключениюВедетсяУчетТоваровПоТоварамОрганизацииБУ");
		ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru='Источники происхождения'"));
	ИначеЕсли ИмяОпции = "ВедетсяУчетЗарплатыИКадры" Тогда
		ПараметрыФормы.Вставить("ИмяМетода",
			"Обработки.ФункциональностьПрограммы.СформироватьСписокОбъектовПрепятствующихОтключениюВедетсяУчетЗарплатыИКадры");
		ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru='Зарплата и кадры'"));
	ИначеЕсли ИмяОпции = "ИспользоватьИсполнительныеЛисты" Тогда
		ПараметрыФормы.Вставить("ИмяМетода",
			"Обработки.ФункциональностьПрограммы.СформироватьСписокОбъектовПрепятствующихОтключениюИспользоватьИсполнительныеЛисты");
		ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru='Учет исполнительных листов'"));
	ИначеЕсли ИмяОпции = "ИспользоватьДепонированиеЗаработнойПлаты" Тогда
		ПараметрыФормы.Вставить("ИмяМетода",
			"Обработки.ФункциональностьПрограммы.СформироватьСписокОбъектовПрепятствующихОтключениюИспользоватьДепонированиеЗаработнойПлаты");
		ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru='Депонирование заработной платы'"));
	ИначеЕсли ИмяОпции = "ВедетсяУчетОсновныхСредств" Тогда
		ПараметрыФормы.Вставить("ИмяМетода",
			"Обработки.ФункциональностьПрограммы.СформироватьСписокОбъектовПрепятствующихОтключениюВедетсяУчетОсновныхСредств");
		ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru='Основные средства'"));
	ИначеЕсли ИмяОпции = "ВедетсяУчетНМА" Тогда
		ПараметрыФормы.Вставить("ИмяМетода",
			"Обработки.ФункциональностьПрограммы.СформироватьСписокОбъектовПрепятствующихОтключениюВедетсяУчетНМА");
		ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru='Нематериальные активы'")); 
	ИначеЕсли ИмяОпции = "ИспользоватьРегистрациюПрочихВыплат" Тогда
		ПараметрыФормы.Вставить("ИмяМетода",
			"Обработки.ФункциональностьПрограммы.СформироватьСписокОбъектовПрепятствующихОтключениюИспользоватьРегистрациюПрочихВыплат");
		ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru='Регистрация прочих выплат'"));
	Иначе
		ПараметрыФормы.Вставить("ИмяМетода",
			"Обработки.ФункциональностьПрограммы.СформироватьСписокДокументовПрепятствующихОтключениюОпции");
	КонецЕсли;
		
	НаименованиеФоновогоЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Формирование списка объектов, препятствующих отключению опции ""%1""'"),
		ИмяОпции);
				
	ПараметрыФормы.Вставить("НаименованиеФоновогоЗадания", НаименованиеФоновогоЗадания);
	
	ОткрытьФорму(
		"Обработка.ФункциональностьПрограммы.Форма.ФормаОтчетаПоДокументам",
		ПараметрыФормы,
		ЭтотОбъект,
		Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначенияКонстант(СписокФункциональности)
	
	Если Не ЗначениеЗаполнено(СписокФункциональности) Тогда
		Возврат;
	КонецЕсли;
	
	// Перезапись констант требуется после изменения функциональности
	// в фоне, для того, чтобы платформа обновила функциональные опции, свяазанные
	// с этими константами. Если этого не сделать, то не отрастут разделы, которые
	// относятся к этим опциям.
	СписокКонстант = Новый Массив;
	Для Каждого Функциональность Из СписокФункциональности Цикл
		СписокКонстант.Добавить(Функциональность.Ключ);
	КонецЦикла;
	СтрокаИменКонстант = СтрСоединить(СписокКонстант, ",");
	НаборКонстантОбъект = Константы.СоздатьНабор(СтрокаИменКонстант);
	НаборКонстантОбъект.Прочитать();
	НаборКонстантОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПоказатьИспользуемуюФункциональностьВРазделеГлавное(ИспользуемаяФункциональность)
	
	Элементы.ГруппаГлавноеИспользуемыеВозможности.Видимость = Истина;
	
	МассивКонстантФункциональности = ФункциональностьПоОтбору(Новый Структура, ОписаниеФункциональности);
	
	МассивПроверкаПройдена = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивКонстантФункциональности, ИспользуемаяФункциональность);
	
	// Скроем видимость у прошедших проверку констант
	Для Каждого ИмяКонстанты Из МассивПроверкаПройдена Цикл
		Элементы["Главное" + ИмяКонстанты].Видимость = Ложь;
	КонецЦикла;
	
	//Если Обработки.ФункциональностьПрограммы.ИспользуетсяСинхронизацияДанных() Тогда
	Если ИспользуетсяСинхронизацияДанных() Тогда
		// Для используемой функциональности, которая зависит от обменов,
		// не показываем персональную гиперссылку с проблемами.
		// Вместо всех этих ссылок показываем одну - "Синхронизация данных".
		Отбор = Новый Структура("ТребуетсяДляОбменов", Истина);
		ФункциональностьДляОбменов = ФункциональностьПоОтбору(Отбор, ОписаниеФункциональности);
		ПроверяемаяФункциональностьДляОбменов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
			ФункциональностьДляОбменов, МассивПроверкаПройдена);
		Для Каждого ИмяКонстанты Из ПроверяемаяФункциональностьДляОбменов Цикл
			Элементы["Главное"+ИмяКонстанты].Видимость = Ложь;
		КонецЦикла;
		Элементы.ГлавноеИспользуетсяСинхронизацияДанных.Видимость = ЗначениеЗаполнено(ПроверяемаяФункциональностьДляОбменов);
		
		ИспользуемаяФункциональностьДляОтображения = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
			ИспользуемаяФункциональность, ПроверяемаяФункциональностьДляОбменов);
	Иначе
		ИспользуемаяФункциональностьДляОтображения = ИспользуемаяФункциональность;
	КонецЕсли;
	
	// Установим видимость для констант не прошедших проверку
	Для Каждого ИмяКонстанты Из ИспользуемаяФункциональностьДляОтображения Цикл
		Элементы["Главное"+ИмяКонстанты].Видимость = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьНедоступнуюФункциональностьВРазделеГлавное(РезультатИзменения)
	

	
КонецПроцедуры

&НаСервере
Процедура УдалитьБаннерыТарифовРазделаГлавное()
	

	
КонецПроцедуры

&НаСервере
Процедура УдалитьПодчиненныеЭлементы(РодительскийЭлемент)
	
	Если ТипЗнч(РодительскийЭлемент) = Тип("ГруппаФормы") Тогда
		
		Пока РодительскийЭлемент.ПодчиненныеЭлементы.Количество() > 0 Цикл
			
			УдалитьПодчиненныеЭлементы(РодительскийЭлемент.ПодчиненныеЭлементы[0]);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЭтотОбъект.Элементы.Удалить(РодительскийЭлемент);
	
КонецПроцедуры

&НаСервере
Функция НастроитьБаннерыЭлементовФункциональности()
	
	ФункциональностьДляБаннеровРазделов = Новый ТаблицаЗначений;
	ФункциональностьДляБаннеровРазделов.Колонки.Добавить("Раздел", Новый ОписаниеТипов("Строка"));
	ФункциональностьДляБаннеровРазделов.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ФункциональностьДляБаннеровРазделов.Колонки.Добавить("ТипБаннера", Новый ОписаниеТипов("Строка"));
	ФункциональностьДляБаннеровРазделов.Колонки.Добавить("Тариф", Новый ОписаниеТипов("Строка"));
	ФункциональностьДляБаннеровРазделов.Колонки.Добавить("ДоступноЛицензий", Новый ОписаниеТипов("Число"));
	
	Для Каждого Функциональность Из ОписаниеФункциональности Цикл
		
		Если Функциональность.НетСвободнойЛицензии Тогда
			
			ДобавитьБаннерНетСвободныхЛицензийДляЭлементаФункциональности(Функциональность.Имя);
			
			БаннерРаздела = ФункциональностьДляБаннеровРазделов.Добавить();
			БаннерРаздела.ТипБаннера = "НетСвободныхЛицензий";
			ЗаполнитьЗначенияСвойств(БаннерРаздела, Функциональность);
			
		ИначеЕсли Не Функциональность.ДоступнаВПростомИнтерфейсе Тогда
			
			ДобавитьБаннерПолныйИнтерфейсДляЭлементаФункциональности(Функциональность.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВывестиБаннерыНетСвободныхЛицензийВРазделах(ФункциональностьДляБаннеровРазделов);
	
КонецФункции

&НаСервере
Процедура ДобавитьБаннерНетСвободныхЛицензийДляЭлементаФункциональности(ИмяФункциональности)
	
	ТекстБаннераЭлемента = ФункциональностьПрограммы.ТекстОграничениеТарифа();
	ЦветБаннера = ФункциональностьПрограммы.ЦветБаннераОграниченияТарифа();
	ДобавитьПодсказкуБаннерКЭлементу(ИмяФункциональности, ТекстБаннераЭлемента, ЦветБаннера);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьБаннерПолныйИнтерфейсДляЭлементаФункциональности(ИмяФункциональности)
	
	ТекстБаннераЭлемента = НСтр("ru = 'ПОЛНЫЙ ИНТЕРФЕЙС'");
	ЦветБаннера = ЦветаСтиля.СобытиеОтказ;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПодсказкуБаннерКЭлементу(ИмяЭлемента, ТекстБаннераЭлемента, ЦветБаннера)
	
	Элемент = Элементы[ИмяЭлемента];
	
	ПереместитьПодсказкуВНовуюГруппу(Элемент); // чтобы баннер не затер подсказку
	
	Элемент.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСправа;
	
	Элемент.РасширеннаяПодсказка.Заголовок               = ТекстБаннераЭлемента;
	Элемент.РасширеннаяПодсказка.ЦветТекста              = ЦветаСтиля.ЦветТекстаФормы;
	Элемент.РасширеннаяПодсказка.Шрифт                   = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , 7);
	Элемент.РасширеннаяПодсказка.ЦветФона                = ЦветБаннера;
	Элемент.РасширеннаяПодсказка.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
	
КонецПроцедуры

&НаСервере
Процедура ПереместитьПодсказкуВНовуюГруппу(Элемент)
	
	Если Не ПустаяСтрока(Элемент.РасширеннаяПодсказка.Заголовок) Тогда
		ЭтоРасширеннаяПодсказка = Истина;
	ИначеЕсли Не ПустаяСтрока(Элемент.Подсказка) Тогда
		ЭтоРасширеннаяПодсказка = Ложь;
	Иначе
		Возврат;
	КонецЕсли;
	
	Группа = Элементы.Добавить("Группа" + Элемент.Имя, Тип("ГруппаФормы"));
	Группа.Вид                                = ВидГруппыФормы.ОбычнаяГруппа;
	Группа.Отображение                        = ОтображениеОбычнойГруппы.Нет;
	Группа.ОтображатьЗаголовок                = Ложь;
	Группа.ОтображениеПодсказки               = ОтображениеПодсказки.ОтображатьСнизу;
	Если ЭтоРасширеннаяПодсказка Тогда
		Группа.РасширеннаяПодсказка.Заголовок = Элемент.РасширеннаяПодсказка.Заголовок;
	Иначе
		Группа.Подсказка                      = Элемент.Подсказка;
	КонецЕсли;
	
	Элементы.Переместить(Группа, Элемент.Родитель, Элемент);
	Элементы.Переместить(Элемент, Группа);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиБаннерыНетСвободныхЛицензийВРазделах(ФункциональностьДляБаннеровРазделов)
	
	РазделыФункциональности = ФункциональностьДляБаннеровРазделов.Скопировать(, "Раздел");
	РазделыФункциональности.Свернуть("Раздел", "");
	
	Для Каждого РазделФункциональностиНетСвободныхЛицензий Из РазделыФункциональности Цикл
		
		Отбор = Новый Структура("Раздел,ТипБаннера", РазделФункциональностиНетСвободныхЛицензий.Раздел, "НетСвободныхЛицензий");
		ФункциональностьБаннераНетСвободныхЛицензийДляРаздела = ФункциональностьДляБаннеровРазделов.НайтиСтроки(Отбор);
		
		Если Не ЗначениеЗаполнено(ФункциональностьБаннераНетСвободныхЛицензийДляРаздела) Тогда
			Продолжить;
		КонецЕсли;
		
		ВывестиБаннерФункциональностиБезСвободныхЛицензий(РазделФункциональностиНетСвободныхЛицензий.Раздел, ФункциональностьБаннераНетСвободныхЛицензийДляРаздела);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиБаннерФункциональностиБезСвободныхЛицензий(ИмяРаздела, ФункциональностьБаннераНетСвободныхЛицензийДляРаздела)
	
	РодительскийЭлемент = Элементы["Группа" + ИмяРаздела + "Тарифы"];
	
	ИмяБаннера = "ГруппаБаннерФункциональностиБезЛицензий" + ИмяРаздела;
	ЭлементБаннера = Элементы.Добавить(ИмяБаннера, Тип("ГруппаФормы"), РодительскийЭлемент);
	ЭлементБаннера.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ЭлементБаннера.ОтображатьЗаголовок = Ложь;
	ЭлементБаннера.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
	ЭлементБаннера.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветТекстаФормы;
	ЭлементБаннера.ЦветФона = ФункциональностьПрограммы.ЦветБаннераОграниченияТарифа();
	
	ЭлементОписанияБаннера = Элементы.Добавить(ИмяБаннера + "Описание", Тип("ДекорацияФормы"), ЭлементБаннера);
	ЭлементОписанияБаннера.АвтоМаксимальнаяШирина = Ложь;
	ЭлементОписанияБаннера.Ширина = 45;
	ЭлементОписанияБаннера.МаксимальнаяШирина = 45;
	
	ОписаниеФункциональностиТарифа = Новый Массив;
	
	ЗаголовокОписания = НСтр("ru='В других ваших приложениях уже включена функциональность:'");
	ОписаниеФункциональностиТарифа.Добавить(ЗаголовокОписания);
	
	Для Каждого Функциональность Из ФункциональностьБаннераНетСвободныхЛицензийДляРаздела Цикл
		НаименованиеФункциональности = НаименованиеФункциональности(Функциональность.Имя);
		ШаблонНаименования = " " + "●" + " " + НСтр("ru='%1 в %2'");
		
		ТекстБезЛицензий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонНаименования, НаименованиеФункциональности,
			ТекстКоличествоПриложений(Функциональность.ДоступноЛицензий));
		
		ОписаниеФункциональностиТарифа.Добавить(ТекстБезЛицензий);
	КонецЦикла;
	
	ОписаниеТарифа = СтрСоединить(ОписаниеФункциональностиТарифа, Символы.ПС);
	
	ОбращениеКОбслуживающейОрганизации = НСтр("ru='Перейдите на другой тариф или отключите эту функциональность в других приложениях.'");
	ОписаниеТарифа = Новый ФорматированнаяСтрока(ОписаниеТарифа, Символы.ПС, ОбращениеКОбслуживающейОрганизации);
	
	ЭлементОписанияБаннера.Заголовок = ОписаниеТарифа;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗакрытьФормуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВыполняетсяИзменениеФункциональности.Очистить();
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВключенаХотяБыОднаФункциональностьРаздела(ИмяРаздела, СписокФункциональности, ТолькоИспользуемые = Ложь)
	
	ЕстьФункциональностьРаздела = Ложь;
	Для Каждого ИмяФункциональности Из СписокФункциональности Цикл
		
		Функциональность = СвойстваФункциональности(ИмяФункциональности, ОписаниеФункциональности);
		Если Функциональность.Раздел <> ИмяРаздела Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьФункциональностьРаздела = Истина;
		
		Если Не ЭтотОбъект[ИмяФункциональности] Тогда
			Продолжить;
		КонецЕсли;
		
		Если (Не ТолькоИспользуемые Или Функциональность.Используется)Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьФункциональностьРаздела Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ВключенаХотяБыОднаИспользуемаяФункциональностьРаздела(ИмяРаздела, СписокФункциональности)
	
	Возврат ВключенаХотяБыОднаФункциональностьРаздела(ИмяРаздела, СписокФункциональности, Истина);
	
КонецФункции

&НаСервереБезКонтекста
Функция ФункциональностьПоОтбору(Отбор, ОписаниеФункциональности)
	
	Если ЗначениеЗаполнено(Отбор) Тогда
		СтрокиФункциональности = ОписаниеФункциональности.НайтиСтроки(Отбор);
	Иначе
		СтрокиФункциональности = ОписаниеФункциональности;
	КонецЕсли;
	
	ИменаКонстантРаздела = Новый Массив;
	Для Каждого Функциональность Из СтрокиФункциональности Цикл
		ИменаКонстантРаздела.Добавить(Функциональность.Имя);
	КонецЦикла;
	
	Возврат ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИменаКонстантРаздела);
	
КонецФункции

#КонецОбласти

#Область ИзменениеВариантаФункциональности

&НаКлиенте
Функция ПараметрыИзмененияВариантаФункциональности(ВариантФункциональности)
	
	ОсновнаяФункциональность = ФункциональностьПрограммыКлиентСервер.ОсновнаяФункциональность();
	НовоеЗначение = ?(ВариантФункциональности = ОсновнаяФункциональность, Ложь, Истина);
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("ВариантФункциональности", ВариантФункциональности);
	ПараметрыИзменения.Вставить("ИзменяемаяФункциональность", Новый Массив);
	ПараметрыИзменения.Вставить("ЗадатьВопросОДлительнойОперации", Ложь);
	ПараметрыИзменения.Вставить("НовоеЗначение", НовоеЗначение);
	
	ИзменитьТолькоПростойИнтерфейс = ИзменитьТолькоПростойИнтерфейс(ИнтерфейсТаксиПростой, НовоеЗначение);
	
	Для Каждого Функциональность Из ОписаниеФункциональности Цикл
		
		Если НаборКонстант[Функциональность.Имя] <> НовоеЗначение Тогда
			
			ПараметрыИзменения.ИзменяемаяФункциональность.Добавить(Функциональность.Имя);
			
			ИзменитьФункциональностьСразу = Не ИзменитьТолькоПростойИнтерфейс
				Или Функциональность.ДоступнаВПростомИнтерфейсе;
			
			Если ИзменитьФункциональностьСразу И Функциональность.ТребуетсяДлительнаяОперация Тогда
				ПараметрыИзменения.ЗадатьВопросОДлительнойОперации = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПараметрыИзменения;
	
КонецФункции

&НаСервере
Функция ИзменитьВариантФункциональностиВФоне(ПараметрыИзмененияФункциональности)
	
	ИзменяемаяФункциональность = ПараметрыИзмененияФункциональности.ИзменяемаяФункциональность;
	НовоеЗначение = ПараметрыИзмененияФункциональности.НовоеЗначение;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Функциональность", ИзменяемаяФункциональность);
	ПараметрыПроцедуры.Вставить("НовоеЗначение", НовоеЗначение);
	ПараметрыПроцедуры.Вставить("ИзменитьТолькоПростойИнтерфейс",
		ИзменитьТолькоПростойИнтерфейс(ИнтерфейсТаксиПростой, НовоеЗначение));
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Ограничение функциональности до основной.'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ФункциональностьПрограммы.ИзменитьСписокФункциональностиВФоне",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	Если ЗначениеЗаполнено(ДлительнаяОперация)
		И ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		ПоказатьДлительнуюОперациюВключенияФункциональностиРаздела("Главное", ПараметрыИзмененияФункциональности.НовоеЗначение);
		
	КонецЕсли;
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ОжидатьИзмененияВариантаФункиональностиВФоне(ДлительнаяОперация)
	
	Если ЗначениеЗаполнено(ДлительнаяОперация) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьВариантФункциональностиВФонеЗавершение", ЭтотОбъект);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВариантФункциональностиВФонеЗавершение(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ДлительнаяОперация)
		И ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		РезультатИзменения = ИзменитьВариантФункциональностиВФонеНаСервереЗавершение(
			ДлительнаяОперация.АдресРезультата);
		
		ПослеЗавершенияИзмененияФункциональностиНаКлиенте(РезультатИзменения);
		
	Иначе
		СкрытьДлительнуюОперациюВключенияФункциональностиРаздела("Главное");
		ОповеститьОбОшибкеДлительнойОперации(ДлительнаяОперация);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИзменитьВариантФункциональностиВФонеНаСервереЗавершение(АдресРезультата)
	
	СкрытьДлительнуюОперациюВключенияФункциональностиРаздела("Главное");
	
	РезультатИзменения = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	ОбновитьЗначенияКонстант(РезультатИзменения.НовыеЗначенияФункциональности);
	
	НастроитьФормуПослеИзмененияФункциональности(РезультатИзменения);
	
	СброситьПроверкуДоступностиРазделовПослеИзмененияВариантовФункциональности();
	
	ПоказатьИспользуемуюФункциональностьВРазделеГлавное(РезультатИзменения.НевозможноВыключитьФункциональность);
	
	ПоказатьНедоступнуюФункциональностьВРазделеГлавное(РезультатИзменения);
	
	Возврат РезультатИзменения;
	
КонецФункции

&НаСервере
Процедура СброситьПроверкуДоступностиРазделовПослеИзмененияВариантовФункциональности()
	
	// для управления подчиненными "Розничной торговле" нужно инициировать повторную проверку их доступности
	ДоступностьРазделаПроверена.Удалить("Торговля");
	// для управления подчиненными "Учет по договорам" нужно инициировать повторную проверку их доступности
	ДоступностьРазделаПроверена.Удалить("Расчеты");
	// для управления подчиненными "Основные средства" нужно инициировать повторную проверку их доступности
	ДоступностьРазделаПроверена.Удалить("ОСНМА");
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбОшибкеДлительнойОперации(ДлительнаяОперация)
	
	Если ЗначениеЗаполнено(ДлительнаяОперация)
		И ДлительнаяОперация.Статус = "Ошибка" Тогда
		
		ВызватьИсключение ДлительнаяОперация.КраткоеПредставлениеОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВариантФункциональностиЗадатьВопрос(ПараметрыИзмененияФункциональности)
	
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(
		"ИзменитьВариантФункциональностиОтвет", ЭтотОбъект, ПараметрыИзмененияФункциональности);
	
	Если ПараметрыИзмененияФункциональности.ВариантФункциональности = ФункциональностьПрограммыКлиентСервер.ОсновнаяФункциональность() Тогда
		ТекстВопроса = НСтр(
			"ru='Переход на основную функциональность может занять длительное время.'") + Символы.ПС +
			НСтр("ru='Продолжить?'");
	Иначе
		ТекстВопроса = НСтр(
			"ru='Переход на полную функциональность может занять длительное время.'") + Символы.ПС +
			НСтр("ru='Продолжить?'");
	КонецЕсли;
	
	ЗаголовокВопроса = НСтр("ru='Изменение функциональности'");
	
	ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , ЗаголовокВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВариантФункциональностиОтвет(Ответ, ПараметрыИзмененияФункциональности) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Элементы.ГруппаГлавноеИспользуемыеВозможности.Видимость = Ложь;
		
		Если ПараметрыИзмененияФункциональности.ВариантФункциональности = ФункциональностьПрограммыКлиентСервер.ОсновнаяФункциональность()
			ИЛИ ПараметрыИзмененияФункциональности.ВариантФункциональности = ФункциональностьПрограммыКлиентСервер.ПолнаяФункциональность() Тогда
			ДлительнаяОперация = ИзменитьВариантФункциональностиВФоне(ПараметрыИзмененияФункциональности);
			ОжидатьИзмененияВариантаФункиональностиВФоне(ДлительнаяОперация);
		КонецЕсли;
		
	Иначе
		УстановитьВариантФункциональности();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Установка набора видимых подсистем командного интерфейса.
//
// Параметры:
//  Режим - Строка - ИнтерфейсТакси / ИнтерфейсТаксиПростой / ИнтерфейсВерсии77 - соответствует константе, которая будет установлена в Истину
//
Процедура УстановитьРежимКомандногоИнтерфейса(Режим) Экспорт
	
	Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры
