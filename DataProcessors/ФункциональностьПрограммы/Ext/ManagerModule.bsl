#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеФункциональности

Функция ОписаниеФункциональности() Экспорт
	
	// При добавлении новой функциональности следует внести изменения в макет Перечисления.ВидыБизнеса.Макеты.Функциональность.
	// В макете указывается связь вида бизнеса и используемой функциональности.
	
	ОписаниеФункциональности = НовыйОписаниеФункциональности();
	
	ЗаполнитьОписаниеФункциональности(ОписаниеФункциональности);
	
	ОчиститьНедоступнуюРодительскуюФункциональность(ОписаниеФункциональности);
	
	ЗаполнитьДочернююФункциональность(ОписаниеФункциональности);
	
	Возврат ОписаниеФункциональности;
	
КонецФункции

Функция НовыйОписаниеФункциональности()
	
	ОписаниеФункциональности = Новый ТаблицаЗначений;
	
	// Имя функциональности - должно совпадать с именем константы,
	// которая связана с функциональной опцией.
	ОписаниеФункциональности.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	
	// Имя раздела, к которому относится функциональность.
	// Должен совпадать с именем одной из закладок на форме ФункциональностьПрограммы
	ОписаниеФункциональности.Колонки.Добавить("Раздел", Новый ОписаниеТипов("Строка"));
	
	// Признак, что функциональность изменяется в длительной операции.
	ОписаниеФункциональности.Колонки.Добавить("ТребуетсяДлительнаяОперация", Новый ОписаниеТипов("Булево"));
	
	// Признак, что функциональность доступна в простом интерфейсе.
	// Если не доступна - то в простом интерфейсе такую функциональность можно будет включить только
	// после перехода на полный интерфейс.
	ОписаниеФункциональности.Колонки.Добавить("ДоступнаВПростомИнтерфейсе", Новый ОписаниеТипов("Булево"));
	
	// Признак, что функциональность нужно автоматически включить при переходе на полный интерфейс.
	// Нужно установить Истина в данном параметре, если он описывает функциональность, которая обязательно
	// должна быть включена в полном интерфейсе и ее выключение в нем заблокировано.
	ОписаниеФункциональности.Колонки.Добавить("ДолжнаБытьОбязательноВключенаВПолномИнтерфейсе", Новый ОписаниеТипов("Булево"));
	
	// Родительская функциональность - список функциональности, которую необходимо включить,
	// чтобы можно было включить данную функциональность.
	// Для добавления родительской функциональности нужно использовать функцию ДобавитьРодителя()
	ОписаниеФункциональности.Колонки.Добавить("РодительскаяФункциональность", Новый ОписаниеТипов("Массив"));
	
	// Дочерняя функциональность заполняется автоматически.
	ОписаниеФункциональности.Колонки.Добавить("ДочерняяФункциональность", Новый ОписаниеТипов("Массив"));
	
	// Признак, что функциональность в данной версии приложения доступна.
	// Если Ложь - то функциональность не будет отображаться на форме.
	ОписаниеФункциональности.Колонки.Добавить("Доступна", Новый ОписаниеТипов("Булево"));
	
	// Признак, что при включении "Синхронизации данных" нужно включить функциональность.
	// Также влияет на отключение - если синхронизация данных включена, то отключить функциональность нельзя.
	ОписаниеФункциональности.Колонки.Добавить("ТребуетсяДляОбменов", Новый ОписаниеТипов("Булево"));
	
	// Тарифная опция, которые должны быть доступна к захвату, чтобы функциональность можно было включить.
	ОписаниеФункциональности.Колонки.Добавить("ИмяТарифнойОпции", Новый ОписаниеТипов("Строка"));
	
	ОписаниеФункциональности.Индексы.Добавить("Имя");
	
	Возврат ОписаниеФункциональности;
	
КонецФункции

Процедура ЗаполнитьОписаниеФункциональности(ОписаниеФункциональности)
	
	ЗаполнитьОписаниеРазделаБанкКасса(ОписаниеФункциональности);
	
	ЗаполнитьОписаниеРазделаЗапасы(ОписаниеФункциональности);
	
	ЗаполнитьОписаниеРазделаРасчеты(ОписаниеФункциональности);
	
	ЗаполнитьОписаниеРазделаТорговля(ОписаниеФункциональности);
	
	ЗаполнитьОписаниеРазделаНДС(ОписаниеФункциональности);
	
	ЗаполнитьОписаниеРазделаПроизводство(ОписаниеФункциональности);
	
	ЗаполнитьОписаниеРазделаОСНМА(ОписаниеФункциональности);
	
	ЗаполнитьОписаниеРазделаЗарплатаКадры(ОписаниеФункциональности);
	
	ЗаполнитьОписаниеРазделаОрганизация(ОписаниеФункциональности);
	
	ЗаполнитьОписаниеРазделаДополнительно(ОписаниеФункциональности);
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеРазделаБанкКасса(ОписаниеФункциональности)
	
	Раздел = "БанкКасса";
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ИспользоватьОплатуПоПлатежнымКартам");
	Функциональность.ДоступнаВПростомИнтерфейсе = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеРазделаЗапасы(ОписаниеФункциональности)
	
	Раздел = "Запасы";
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ВедетсяУчетТоваровПоТоварамОрганизацииБУ");
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ВедетсяУчетИмпортныхТоваров");
	Функциональность.ТребуетсяДляОбменов = Истина;
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ИспользоватьКомплектациюНоменклатуры");
	Функциональность.ТребуетсяДляОбменов = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеРазделаПроизводство(ОписаниеФункциональности)
	
	Раздел = "Производство";
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ВедетсяПроизводственнаяДеятельность");
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеРазделаОСНМА(ОписаниеФункциональности)
	
	Раздел = "ОСНМА";
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ВедетсяУчетОсновныхСредств");
	Функциональность.ДоступнаВПростомИнтерфейсе = Истина;
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ИспользоватьКомплектациюОС");
	Функциональность.ДоступнаВПростомИнтерфейсе = Истина;
	ДобавитьРодителя(Функциональность, "ВедетсяУчетОсновныхСредств");

	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ИспользоватьРеструктуризациюОС");
	Функциональность.ДоступнаВПростомИнтерфейсе = Истина;
	ДобавитьРодителя(Функциональность, "ВедетсяУчетОсновныхСредств");

	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ВедетсяУчетНМА");
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеРазделаЗарплатаКадры(ОписаниеФункциональности, ИмяРаздела = Неопределено)
	
	Раздел = "ЗарплатаКадры";
	
	Если ЗначениеЗаполнено(ИмяРаздела) И ИмяРаздела <> Раздел Тогда
		Возврат;
	КонецЕсли;
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ВедетсяУчетЗарплатыИКадры");
	Функциональность.ДоступнаВПростомИнтерфейсе = Истина;
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ИспользоватьИсполнительныеЛисты");
	Функциональность.ДоступнаВПростомИнтерфейсе  = Истина;
	ДобавитьРодителя(Функциональность, "ВедетсяУчетЗарплатыИКадры");
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ИспользоватьНачисленияПрочихДоходВЦеляхНалогообложения");
	Функциональность.ДоступнаВПростомИнтерфейсе  = Истина; 
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ИспользоватьРегистрациюПрочихВыплат");
	Функциональность.ДоступнаВПростомИнтерфейсе  = Истина;
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ИспользоватьДепонированиеЗаработнойПлаты");
	Функциональность.ДоступнаВПростомИнтерфейсе  = Истина;
	ДобавитьРодителя(Функциональность, "ВедетсяУчетЗарплатыИКадры");
		
КонецПроцедуры

Процедура ЗаполнитьОписаниеРазделаОрганизация(ОписаниеФункциональности)
	
	Раздел = "Организация";
	
	ЭтоБазоваяВерсияКонфигурации = СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ВестиУчетПоОрганизациям");
	Функциональность.Доступна = НЕ ЭтоБазоваяВерсияКонфигурации;
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	Функциональность.Доступна =  НЕ ЭтоБазоваяВерсияКонфигурации;
	ДобавитьРодителя(Функциональность, "ВестиУчетПоОрганизациям");
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеРазделаРасчеты(ОписаниеФункциональности)
	
	Раздел = "Расчеты";
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ВестиУчетПоДоговорам");
	Функциональность.ДоступнаВПростомИнтерфейсе = Истина;
	Функциональность.ТребуетсяДляОбменов = Истина;
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "АвтозаполнятьСчетаВзаиморасчетов");
	Функциональность.ДоступнаВПростомИнтерфейсе = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеРазделаТорговля(ОписаниеФункциональности)
	
	Раздел = "Торговля";
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ВедетсяРозничнаяТорговля");
	Функциональность.ТребуетсяДляОбменов = Истина;
	Функциональность.ДоступнаВПростомИнтерфейсе = Истина;
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ФормироватьДвижениеВДокументахЧекККМ");
	Функциональность.ДоступнаВПростомИнтерфейсе = Истина;
	ДобавитьРодителя(Функциональность, "ВедетсяРозничнаяТорговля");
	
	//Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ВестиУчетМаркируемогоТабакаИСМПТК");
	//Функциональность.ДоступнаВПростомИнтерфейсе = Истина;
	//ДобавитьРодителя(Функциональность, "ВедетсяРозничнаяТорговля");
	//
	//Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ВестиУчетМаркируемойОбувиИСМПТК");
	//Функциональность.ДоступнаВПростомИнтерфейсе = Истина;
	//ДобавитьРодителя(Функциональность, "ВедетсяРозничнаяТорговля");
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеРазделаНДС(ОписаниеФункциональности)
	
	Раздел = "НДС";
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ИспользоватьУчетНДСЗаНерезидента");
	Функциональность.ДоступнаВПростомИнтерфейсе = Истина;
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ИспользоватьОбменЭСФ");
	Функциональность.ДоступнаВПростомИнтерфейсе = Истина;
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ИспользоватьОбменВС");
	Функциональность.ДоступнаВПростомИнтерфейсе = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеРазделаДополнительно(ОписаниеФункциональности)
	
	Раздел = "Дополнительно";
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ИспользоватьНесколькоОтветственных");
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ИспользоватьПодключаемоеОборудование");
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ОтображатьСтатусыВСчетахНаОплату");
	
	Функциональность.ДоступнаВПростомИнтерфейсе = Истина;
	
КонецПроцедуры


Функция ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, ИмяФункциональности)
	
	Функциональность = ОписаниеФункциональности.Добавить();
	Функциональность.Имя = ИмяФункциональности;
	Функциональность.Раздел = Раздел;
	Функциональность.ТребуетсяДлительнаяОперация                    = Ложь;
	Функциональность.ДоступнаВПростомИнтерфейсе                     = Ложь;
	Функциональность.ДолжнаБытьОбязательноВключенаВПолномИнтерфейсе = Ложь;
	Функциональность.Доступна = Истина;
	
	Возврат Функциональность;
	
КонецФункции

Процедура ОчиститьНедоступнуюРодительскуюФункциональность(ОписаниеФункциональности)
	
	НедоступнаяФункциональность = Новый Соответствие;
	Для Каждого Функциональность Из ОписаниеФункциональности Цикл
		Если Не Функциональность.Доступна Тогда
			НедоступнаяФункциональность.Вставить(Функциональность.Имя, Истина);
		КонецЕсли;
	КонецЦикла;
	
	ОчиститьРодительскуюФункциональность(ОписаниеФункциональности, Неопределено, НедоступнаяФункциональность);
	
КонецПроцедуры

Процедура ЗаполнитьДочернююФункциональность(ОписаниеФункциональности)
	
	Для Каждого Функциональность Из ОписаниеФункциональности Цикл
		Если Не Функциональность.Доступна Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого РодительскаяФукциональность Из Функциональность.РодительскаяФункциональность Цикл
			СтрокиРодительскойФункциональности = ОписаниеФункциональности.НайтиСтроки(Новый Структура("Имя", РодительскаяФукциональность));
			Для Каждого СтрокаРодительскойФункциональности Из СтрокиРодительскойФункциональности Цикл
				СтрокаРодительскойФункциональности.ДочерняяФункциональность.Добавить(Функциональность.Имя);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьРодителя(Функциональность, ИмяРодителя)
	
	Если ЗначениеЗаполнено(ИмяРодителя) Тогда
		Функциональность.РодительскаяФункциональность.Добавить(ИмяРодителя);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьРодительскуюФункциональность(ОписаниеФункциональности, Отбор, ОчищаемаяФункциональность)
	
	Если ЗначениеЗаполнено(Отбор) Тогда
		СтрокиФункциональности = ОписаниеФункциональности.НайтиСтроки(Отбор);
	Иначе
		СтрокиФункциональности = ОписаниеФункциональности;
	КонецЕсли;
	
	Для Каждого Функциональность Из СтрокиФункциональности Цикл
		
		НомерРодительскойФункциональности = Функциональность.РодительскаяФункциональность.Количество() - 1;
		Пока НомерРодительскойФункциональности >= 0 Цикл
			ИмяРодительскойФункциональности = Функциональность.РодительскаяФункциональность[НомерРодительскойФункциональности];
			Если ОчищаемаяФункциональность.Получить(ИмяРодительскойФункциональности) <> Неопределено Тогда
				Функциональность.РодительскаяФункциональность.Удалить(НомерРодительскойФункциональности);
			КонецЕсли;
			НомерРодительскойФункциональности = НомерРодительскойФункциональности - 1;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкиНаОтключениеФлага

Процедура ИзменитьДляПроверкиТекстЗапроса(ТекстЗапроса, ТолькоПроверка = Истина)
	
	Если Не ТолькоПроверка Тогда
		Возврат;
	КонецЕсли;
	
	// Если запрос выполняется для проверки, то выбирается 1 запись
	КоличествоПолучаемыхЗаписей = 1;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	Для Каждого ПакетЗапроса Из СхемаЗапроса.ПакетЗапросов Цикл
		Для Каждого Оператор Из ПакетЗапроса.Операторы Цикл
			Оператор.КоличествоПолучаемыхЗаписей = КоличествоПолучаемыхЗаписей;
		КонецЦикла;
	КонецЦикла;	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецПроцедуры

Функция ТекстЗапросаИспользуетсяСправочник(ИмяСправочника)
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИскомыйСправочник.Ссылка
	|ИЗ
	|	Справочник.%1 КАК ИскомыйСправочник";
	
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ИмяСправочника);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаИспользуетсяДокумент(ИмяДокумента, ОтборПоВидуОперации = Ложь, ТолькоПроверка = Истина)
	
	Если ТолькоПроверка Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИскомыйДокумент.Ссылка
		|ИЗ
		|	Документ.%1 КАК ИскомыйДокумент
		|ГДЕ
		|	ИскомыйДокумент.ПометкаУдаления = Ложь";
		Если ОтборПоВидуОперации Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	
			|	И ИскомыйДокумент.ВидОперации В (&ВидыОпераций)";
		КонецЕсли;
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ИскомыйДокумент.Ссылка КАК Ссылка,
		|	ИскомыйДокумент.Дата КАК Дата,
		|	ИскомыйДокумент.Ссылка КАК Представление
		|ИЗ
		|	Документ.%1 КАК ИскомыйДокумент
		|ГДЕ
		|	ИскомыйДокумент.ПометкаУдаления = ЛОЖЬ";
		Если ОтборПоВидуОперации Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	
			|	И ИскомыйДокумент.ВидОперации В (&ВидыОпераций)";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Ссылка";
	КонецЕсли;
	
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ИмяДокумента);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ИспользуетсяСинхронизацияДанных() Экспорт
	
	Возврат Константы.ИспользоватьСинхронизациюДанных.Получить() И НЕ ОбщегоНазначения.РазделениеВключено();
	
КонецФункции 

Функция НастройкиСинхронизацииДанных() Экспорт
	
	СписокПлановОбмена = ОбменДаннымиПовтИсп.СписокПлановОбменаБСП();
	
	КоличествоУзловЗУП    = 0;
	КоличествоУзловПрочее = 0;
	
	Если ИспользуетсяСинхронизацияДанных() Тогда
		
		МассивУзлов = ОбменДаннымиСобытия.ВсеУзлыПланаОбмена("ОбменРозницаБухгалтерияПредприятия30");
		Для Каждого УзелОбмена Из МассивУзлов Цикл
			Если НЕ УзелОбмена.ПометкаУдаления Тогда
				КоличествоУзловПрочее = КоличествоУзловПрочее + 1;
			КонецЕсли;
		КонецЦикла;
		
		МассивУзлов = ОбменДаннымиСобытия.ВсеУзлыПланаОбмена("ОбменУправлениеТорговлейБухгалтерияПредприятия30");
		Для Каждого УзелОбмена Из МассивУзлов Цикл
			Если НЕ УзелОбмена.ПометкаУдаления Тогда
				КоличествоУзловПрочее = КоличествоУзловПрочее + 1;
			КонецЕсли;
		КонецЦикла;
		
		МассивУзлов = ОбменДаннымиСобытия.ВсеУзлыПланаОбмена("ОбменУправлениеТорговлей22Бухгалтерия30");
		Для Каждого УзелОбмена Из МассивУзлов Цикл
			Если НЕ УзелОбмена.ПометкаУдаления Тогда
				КоличествоУзловПрочее = КоличествоУзловПрочее + 1;
			КонецЕсли;
		КонецЦикла;
		
		МассивУзлов = ОбменДаннымиСобытия.ВсеУзлыПланаОбмена("ОбменУправлениеНебольшойФирмойБухгалтерия30");
		Для Каждого УзелОбмена Из МассивУзлов Цикл
			Если НЕ УзелОбмена.ПометкаУдаления Тогда
				КоличествоУзловПрочее = КоличествоУзловПрочее + 1;
			КонецЕсли;
		КонецЦикла;
		
		МассивУзлов = ОбменДаннымиСобытия.ВсеУзлыПланаОбмена("ОбменЗарплатаИУправлениеПерсоналомБухгалтерияПредприятия");
		Для Каждого УзелОбмена Из МассивУзлов Цикл
			Если НЕ УзелОбмена.ПометкаУдаления Тогда
				КоличествоУзловЗУП = КоличествоУзловЗУП + 1;
			КонецЕсли;
		КонецЦикла;
		
		МассивУзлов = ОбменДаннымиСобытия.ВсеУзлыПланаОбмена("СинхронизацияДанныхЧерезУниверсальныйФормат");
		Для Каждого УзелОбмена Из МассивУзлов Цикл
			Если (УзелОбмена.ВариантНастройки = "ОбменЗУП31БП" 
					ИЛИ УзелОбмена.ВариантНастройки = "ОбменЗУПБП")
				И НЕ УзелОбмена.ПометкаУдаления Тогда
				КоличествоУзловЗУП = КоличествоУзловЗУП + 1;
			КонецЕсли;
			Если УзелОбмена.ВариантНастройки = "ОбменУТБП"
				И НЕ УзелОбмена.ПометкаУдаления Тогда
				КоличествоУзловПрочее = КоличествоУзловПрочее + 1;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	СинхронизацияДанных = Новый Структура("ЗУП, Прочее", КоличествоУзловЗУП > 0, КоличествоУзловПрочее > 0);
	
	Возврат СинхронизацияДанных;
	
КонецФункции 

Функция ОтказСнятьИспользоватьПодключаемоеОборудование(ТипОборудования = Неопределено)
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПодключаемоеОборудование.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование";
	
	Если ТипОборудования <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	ПодключаемоеОборудование.ТипОборудования В (&ТипОборудования)";
		Запрос.УстановитьПараметр("ТипОборудования", ТипОборудования);
	КонецЕсли;
	
	ОтказСнять = НЕ Запрос.Выполнить().Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

#Область ИспользуетсяОплатаПоПлатежнымКартам

Функция ОтказСнятьИспользоватьОплатуПоПлатежнымКартам()
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ОплатаОтПокупателяПлатежнойКартой", , Истина);

	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОтказСнять = Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ТаблицаЗапросовИспользуетсяОплатаПоПлатежнымКартам()

	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ОплатаОтПокупателяПлатежнойКартой";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ОплатаОтПокупателяПлатежнойКартой",, Ложь);
	
	Возврат ТаблицаЗапросов;
	
КонецФункции 

Функция ДокументыПрепятствующиеОтключениюИспользуетсяОплатаПоПлатежнымКартам()

	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();

	ТаблицаЗапросов = ТаблицаЗапросовИспользуетсяОплатаПоПлатежнымКартам();

	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции

#КонецОбласти

#Область ВедетсяПроизводственнаяДеятельность

Функция ОтказСнятьВедетсяПроизводственнаяДеятельность()
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("АктОбОказанииПроизводственныхУслуг");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ОтчетПроизводстваЗаСмену");

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ИнвентаризацияНЗП");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПоступлениеИзПереработки");

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПередачаТоваров", Истина);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийПередачаТоваров.ВПереработку);
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПоступлениеТоваровУслуг", Истина);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку);

	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидыОпераций", СтрокаТЗ.ВидыОпераций);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОтказСнять = Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ТаблицаЗапросовВедетсяПроизводственнаяДеятельность()

	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "АктОбОказанииПроизводственныхУслуг";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("АктОбОказанииПроизводственныхУслуг",,Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ОтчетПроизводстваЗаСмену";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ОтчетПроизводстваЗаСмену",,Ложь);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ИнвентаризацияНЗП";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ИнвентаризацияНЗП",,Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеИзПереработки";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПоступлениеИзПереработки",,Ложь);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПередачаТоваров";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПередачаТоваров", Истина, Ложь);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийПередачаТоваров.ВПереработку);
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеТоваровУслуг";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПоступлениеТоваровУслуг", Истина, Ложь);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку);
	
	Возврат ТаблицаЗапросов;
	
КонецФункции

Функция ДокументыПрепятствующиеОтключениюВедетсяПроизводственнаяДеятельность()

	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();

	ТаблицаЗапросов = ТаблицаЗапросовВедетсяПроизводственнаяДеятельность();

	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидыОпераций", СтрокаТЗ.ВидыОпераций);
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции 

#КонецОбласти

#Область ОСНМА

Функция ОтказСнятьВедетсяУчетОсновныхСредств()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаИспользуетсяСправочник("ОсновныеСредства");
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьВедетсяУчетНМА()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаИспользуетсяСправочник("НематериальныеАктивы");
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

#Область ИспользоватьКомплектациюОС

Функция ОтказСнятьИспользоватьКомплектациюОС()
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "КомплектацияОС";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("КомплектацияОС", Ложь, Ложь);
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОтказСнять = Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ТаблицаЗапросовИспользоватьКомплектациюОС()
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "КомплектацияОС";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("КомплектацияОС", Ложь, Ложь);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	
	Возврат ТаблицаЗапросов;
	
КонецФункции

Функция ДокументыПрепятствующиеОтключениюИспользоватьКомплектациюОС()
	
	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();
	
	ТаблицаЗапросов = ТаблицаЗапросовИспользоватьКомплектациюОС();
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции 

#КонецОбласти

#Область ИспользоватьРеструктуризациюОС

Функция ОтказСнятьИспользоватьРеструктуризациюОС()
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РеструктуризацияОС";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("РеструктуризацияОС", Ложь, Ложь);
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОтказСнять = Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ТаблицаЗапросовИспользоватьРеструктуризациюОС()
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РеструктуризацияОС";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("РеструктуризацияОС", Ложь, Ложь);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	
	Возврат ТаблицаЗапросов;
	
КонецФункции

Функция ДокументыПрепятствующиеОтключениюИспользоватьРеструктуризациюОС()
	
	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();
	
	ТаблицаЗапросов = ТаблицаЗапросовИспользоватьРеструктуризациюОС();
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции 

#КонецОбласти

#КонецОбласти

#Область ПоддержкаРаботыСоСтруктурнымиПодразделениями

Функция ОтказСнятьПоддержкаРаботыСоСтруктурнымиПодразделениями()
	
	РезультатыЗапросовИспользуютсяСтруктурныеПодразделения = РезультатыЗапросовИспользуютсяСтруктурныеПодразделения();
	ОтказСнять = Не (РезультатыЗапросовИспользуютсяСтруктурныеПодразделения[0].Пустой() // филиалы (обособленные организации)
		И РезультатыЗапросовИспользуютсяСтруктурныеПодразделения[1].Пустой()); // структурные подразделения
	
	Если ОтказСнять Тогда
		Возврат ОтказСнять;
	КонецЕсли;
	
	РезультатыЗапросовИспользуютсяСтруктурныеПодразделенияВПроводках = РезультатыЗапросовИспользуютсяСтруктурныеПодразделенияВПроводках();
	ОтказСнять = Не РезультатыЗапросовИспользуютсяСтруктурныеПодразделенияВПроводках.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция РезультатыЗапросовИспользуютсяСтруктурныеПодразделения(ТолькоПроверка = Истина)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.Представление КАК Представление
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И Организации.ГоловнаяОрганизация <> Организации.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка КАК Ссылка,
	|	ПодразделенияОрганизаций.Представление КАК Представление
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.ЯвляетсяСтруктурнымПодразделением";
	
	ИзменитьДляПроверкиТекстЗапроса(Запрос.Текст, ТолькоПроверка);
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

Функция РезультатыЗапросовИспользуютсяСтруктурныеПодразделенияВПроводках(ТолькоПроверка = Истина)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Типовой.Регистратор КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(Типовой.Регистратор) КАК Представление
	|ИЗ
	|	РегистрБухгалтерии.Типовой КАК Типовой
	|ГДЕ
	|	(НЕ Типовой.СтруктурноеПодразделениеДт В (ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка), НЕОПРЕДЕЛЕНО)
	|			ИЛИ НЕ Типовой.СтруктурноеПодразделениеКт В (ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка), НЕОПРЕДЕЛЕНО))";
	
	ИзменитьДляПроверкиТекстЗапроса(Запрос.Текст, ТолькоПроверка);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

#КонецОбласти

#Область ВестиУчетПоОрганизациям

Функция ОтказСнятьВестиУчетПоОрганизациям()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.Представление КАК Представление
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.Предопределенный";
	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Выборка.Количество() > 1;
	
КонецФункции

Процедура ДействияПослеИзмененияВестиУчетПоОрганизациям(НовоеЗначение)
	
	// Сама константа записывается вне траназкции, т.к. в процедурах, которые изменяют связанные данные
	// в транзакции, используется получение значения функциональной опции.
	// Если изменять константу, связанную с функциональной опцией в транзакции,
	// то в этом случае значение функциональной опции остается старым до фиксации транзакции.
	НачатьТранзакцию();
	Константы.НеВестиУчетПоОрганизациям.Установить(НЕ НовоеЗначение);
	ЗафиксироватьТранзакцию();

КонецПроцедуры

Процедура ДействияПослеИзмененияПоддержкаРаботыСоСтруктурнымиПодразделениями(НовоеЗначение)
	
	// Сама константа записывается вне траназкции, т.к. в процедурах, которые изменяют связанные данные
	// в транзакции, используется получение значения функциональной опции.
	// Если изменять константу, связанную с функциональной опцией в транзакции,
	// то в этом случае значение функциональной опции остается старым до фиксации транзакции.
	
	НесколькоОрганизаций = (Справочники.Организации.КоличествоОрганизаций() > 1
		ИЛИ Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить());
		
	НачатьТранзакцию();
	Константы.ИспользоватьНесколькоОрганизаций.Установить(НесколькоОрганизаций);
	ЗафиксироватьТранзакцию();
		
КонецПроцедуры

#КонецОбласти

#Область Запасы

#Область ВедетсяУчетТоваровПоТоварамОрганизацииБУ

Функция ОтказСнятьВедетсяУчетТоваровПоТоварамОрганизацииБУ()
	
	Возврат ЗначениеЗаполнено(Константы.ДатаПереходаНаУчетПоТоварамОрганизацийВРазрезеНомеровГТДБУ.Получить());
	
КонецФункции

#КонецОбласти

#Область ВедетсяУчетИмпортныхТоваров

Функция ОтказСнятьВедетсяУчетИмпортныхТоваров()
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ГТДИмпорт");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов");

	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОтказСнять = Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ТаблицаЗапросовВедетсяУчетИмпортныхТоваров()
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ГТДИмпорт";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ГТДИмпорт", Ложь, Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов", Ложь, Ложь);
	
	Возврат ТаблицаЗапросов;
	
КонецФункции

Функция ДокументыПрепятствующиеОтключениюВедетсяУчетИмпортныхТоваров()
	
	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();
	
	ТаблицаЗапросов = ТаблицаЗапросовВедетсяУчетИмпортныхТоваров();
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции 

#КонецОбласти

#Область ИспользоватьКомплектациюНоменклатуры

Функция ОтказСнятьИспользоватьКомплектациюНоменклатуры()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаИспользуетсяДокумент("КомплектацияНоменклатуры");
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ТаблицаЗапросовИспользоватьКомплектациюНоменклатуры()
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "КомплектацияНоменклатуры";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("КомплектацияНоменклатуры", Ложь, Ложь);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	
	Возврат ТаблицаЗапросов;
	
КонецФункции

Функция ДокументыПрепятствующиеОтключениюИспользоватьКомплектациюНоменклатуры()
	
	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();
	
	ТаблицаЗапросов = ТаблицаЗапросовИспользоватьКомплектациюНоменклатуры();
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции 

#КонецОбласти

#КонецОбласти

#Область ВедетсяРозничнаяТорговля

Функция ОтказСнятьВедетсяРозничнаяТорговля()
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ОтчетОРозничныхПродажах");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ЧекККМ");
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидыОпераций", СтрокаТЗ.ВидыОпераций);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОтказСнять = Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ТаблицаЗапросовВедетсяРозничнаяТорговля()

	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ОтчетОРозничныхПродажах";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ОтчетОРозничныхПродажах",, Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ЧекККМ";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ЧекККМ",, Ложь);
	
	Возврат ТаблицаЗапросов;
	
КонецФункции

Функция ДокументыПрепятствующиеОтключениюВедетсяРозничнаяТорговля()

	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();

	ТаблицаЗапросов = ТаблицаЗапросовВедетсяРозничнаяТорговля();

	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидыОпераций", СтрокаТЗ.ВидыОпераций);
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции 

Процедура ДействияПослеИзмененияВестиУчетМаркируемойПродукцииИСМПТК()
	
	// Сама константа записывается вне траназкции, т.к. в процедурах, которые изменяют связанные данные
	// в транзакции, используется получение значения функциональной опции.
	// Если изменять константу, связанную с функциональной опцией в транзакции,
	// то в этом случае значение функциональной опции остается старым до фиксации транзакции.
	
	ВестиУчетМаркируемойПродукции = (Константы.ВестиУчетМаркируемогоТабакаИСМПТК.Получить()
		ИЛИ Константы.ВестиУчетМаркируемойОбувиИСМПТК.Получить());
		
	НачатьТранзакцию();
	Константы.ВестиУчетМаркируемойПродукцииИСМПТК.Установить(ВестиУчетМаркируемойПродукции);
	ЗафиксироватьТранзакцию();
		
КонецПроцедуры

#КонецОбласти

#Область Расчеты

Функция РезультатыЗапросовВестиУчетПоДоговорам(ТолькоПроверка = Истина)
	
	ЗапросВестиУчетПоДоговорам = Новый Запрос;
	ЗапросВестиУчетПоДоговорам.Текст = ТекстЗапросаВестиУчетПоДоговорам();
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
	ЗапросВестиУчетПоДоговорам.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросыВестиУчетПоДоговорам = Новый Структура;
	ЗапросыВестиУчетПоДоговорам.Вставить("УчетПоДоговорам",  ЗапросВестиУчетПоДоговорам.Выполнить());
	
	Возврат ЗапросыВестиУчетПоДоговорам;

КонецФункции

Функция ОтказСнятьВестиУчетПоДоговорам()
	
	РезультатыЗапросовВестиУчетПоДоговорам = РезультатыЗапросовВестиУчетПоДоговорам();
	ОтказСнять = (НЕ РезультатыЗапросовВестиУчетПоДоговорам.УчетПоДоговорам.Пустой());
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ТекстЗапросаВестиУчетПоДоговорам()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОсновныеДоговорыКонтрагента.Договор,
	|	ОсновныеДоговорыКонтрагента.Контрагент,
	|	ОсновныеДоговорыКонтрагента.Организация
	|ПОМЕСТИТЬ ОсновныеДоговора
	|ИЗ
	|	РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТиповойОстатки.Субконто1 КАК Контрагент,
	|	ТиповойОстатки.Субконто1 КАК СсылкаКонтрагент,
	|	ТиповойОстатки.Субконто2 КАК Договор,
	|	ВЫБОР
	|		КОГДА ТиповойОстатки.СуммаОстаток < 0
	|			ТОГДА -ТиповойОстатки.СуммаОстаток
	|		ИНАЧЕ ТиповойОстатки.СуммаОстаток
	|	КОНЕЦ КАК Остаток
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Остатки(
	|			,
	|			,
	|			&ВидыСубконто,
	|			НЕ Субконто2 В
	|					(ВЫБРАТЬ
	|						ОсновныеДоговора.Договор
	|					ИЗ
	|						ОсновныеДоговора)) КАК ТиповойОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Дополнительно


#КонецОбласти

#КонецОбласти

#Область СписокДокументовПрепятствующихОтключению

Процедура СформироватьСписокДокументовПрепятствующихОтключениюОпции(Параметры, АдресХранилища) Экспорт

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Результат", Новый ТабличныйДокумент);

	// Шапка своя для каждой опции.
	// Поэтому заполняем шапку табличного документа вне основной процедуры.
	// Далее см. ЗаполнитьТабличныйДокументПоДаннымВыборки()
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ФункциональностьПрограммы.СписокДокументов");
	ОбластьШапка = Макет.ПолучитьОбласть("ШапкаСПояснением");
	ПараметрыШапки = Новый Структура("Заголовок, ОбъектТаблицы, Пояснение");
	ПараметрыШапки.ОбъектТаблицы = "Документ";
	Пояснение = НСтр("ru = 'Для отключения функциональности ""%1"" удалите документы:'");
		
	Если Параметры.Свойство("ИспользоватьУчетНДСЗаНерезидента") Тогда 
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюИспользоватьУчетНДСЗаНерезидента();
		ПараметрыШапки.Заголовок = НСтр("ru = 'Учет НДС за нерезидента'");
		ПараметрыШапки.Пояснение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Пояснение, НСтр("ru = 'Учет НДС за нерезидента'"));
	ИначеЕсли Параметры.Свойство("ИспользоватьОбменЭСФ") Тогда 
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюИспользоватьОбменЭСФ();
		ПараметрыШапки.Заголовок = НСтр("ru = 'Электронные счета-фактуры'");
		ПараметрыШапки.Пояснение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Пояснение, НСтр("ru = 'Электронные счета-фактуры'"));
	ИначеЕсли Параметры.Свойство("ИспользоватьОбменВС") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюИспользоватьОбменВС();
		ПараметрыШапки.Заголовок = НСтр("ru = 'Виртуальный склад'");
		ПараметрыШапки.Пояснение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Пояснение, НСтр("ru = 'Виртуальный склад'"));
	ИначеЕсли Параметры.Свойство("ВедетсяУчетИмпортныхТоваров") Тогда 
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюВедетсяУчетИмпортныхТоваров();
		ПараметрыШапки.Заголовок = НСтр("ru = 'Импортные товары'");
		ПараметрыШапки.Пояснение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Пояснение, НСтр("ru = 'Импортные товары'"));
	ИначеЕсли Параметры.Свойство("ИспользоватьОплатуПоПлатежнымКартам") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюИспользуетсяОплатаПоПлатежнымКартам();
		ПараметрыШапки.Заголовок = НСтр("ru = 'Платежные карты'");
		ПараметрыШапки.Пояснение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Пояснение, НСтр("ru = 'Платежные карты'"));
	ИначеЕсли Параметры.Свойство("ВедетсяПроизводственнаяДеятельность") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюВедетсяПроизводственнаяДеятельность();
		ПараметрыШапки.Заголовок = НСтр("ru = 'Производство'");
		ПараметрыШапки.Пояснение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Пояснение, НСтр("ru = 'Производство'"));
	ИначеЕсли Параметры.Свойство("ИспользоватьКомплектациюОС") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюИспользоватьКомплектациюОС();
		ПараметрыШапки.Заголовок = НСтр("ru = 'Комплектация ОС'");
		ПараметрыШапки.Пояснение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Пояснение, НСтр("ru = 'Комплектация ОС'"));
	ИначеЕсли Параметры.Свойство("ИспользоватьРеструктуризациюОС") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюИспользоватьРеструктуризациюОС();
		ПараметрыШапки.Заголовок = НСтр("ru = 'Реструктуризация ОС'");
		ПараметрыШапки.Пояснение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Пояснение, НСтр("ru = 'Реструктуризация ОС'"));
	ИначеЕсли Параметры.Свойство("ИспользоватьНачисленияПрочихДоходВЦеляхНалогообложения") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюИспользоватьНачисленияПрочихДоходВЦеляхНалогообложения();
		ПараметрыШапки.Заголовок = НСтр("ru = 'Регистрация прочих доходов'");
		ПараметрыШапки.Пояснение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Пояснение, НСтр("ru = 'Регистрация прочих доходов'")); 
	ИначеЕсли Параметры.Свойство("ВедетсяРозничнаяТорговля") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюВедетсяРозничнаяТорговля();
		ПараметрыШапки.Заголовок = НСтр("ru = 'Учет товаров в розничной торговле'");
		ПараметрыШапки.Пояснение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Пояснение, НСтр("ru = 'Учет товаров в розничной торговле'"));
	ИначеЕсли Параметры.Свойство("ИспользоватьКомплектациюНоменклатуры") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюИспользоватьКомплектациюНоменклатуры();
		ПараметрыШапки.Заголовок = НСтр("ru = 'Комплектация номенклатуры'");
		ПараметрыШапки.Пояснение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Пояснение, НСтр("ru = 'Комплектация номенклатуры'"));
	КонецЕсли;

	ОбластьШапка.Параметры.Заголовок = ПараметрыШапки.Заголовок;
	ОбластьШапка.Параметры.Пояснение = ПараметрыШапки.Пояснение;
	
	СтруктураРезультата.Результат.Вывести(ОбластьШапка);
	
	НомерПП = 0;
	
	Для Каждого СтрокаТаблицыДокументов Из ТаблицаРезультатовЗапросов Цикл
		
		Выборка = СтрокаТаблицыДокументов.РезультатЗапроса.Выбрать();
		
		Если Выборка.Количество() > 0 Тогда
			ЗаполнитьТабличныйДокументПоДаннымВыборки(
				СтруктураРезультата.Результат,
				"Строка",
				Выборка,
				НомерПП);
		КонецЕсли;
			
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);
	
КонецПроцедуры

Процедура СформироватьСписокОбъектовПрепятствующихОтключениюВедетсяУчетЗарплатыИКадры(Параметры, АдресХранилища) Экспорт

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Результат", Новый ТабличныйДокумент);
	
	ИспользуетсяСинхронизацияДанныхЗУП = НастройкиСинхронизацииДанных().ЗУП;
	
	Если ИспользуетсяСинхронизацияДанныхЗУП Тогда
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ФункциональностьПрограммы.СписокДокументов");

		ОбластьШапкаИПояснение = Макет.ПолучитьОбласть("ШапкаТолькоЗаголовокИПояснение");
		ОбластьШапкаИПояснение.Параметры.Заголовок = НСтр("ru = 'Зарплата и Кадры. Синхронизация данных'");
		ОбластьШапкаИПояснение.Параметры.Пояснение = НСтр("ru = 'Существуют настройки обменов данными с конфигурациями ""Зарплата и управление персоналом для Казахстана""'") + Символы.ПС +
			НСтр("ru = 'Для отключения функциональности ""Ведется учет по зарплате и кадрам"" удалите все настройки.'");
		
		СтруктураРезультата.Результат.Вывести(ОбластьШапкаИПояснение);
			
	КонецЕсли;
	
	Выборка = РезультатЗапросаСотрудники(Ложь).Выбрать();	
	Если Выборка.Количество() > 0 Тогда
		
		ПарамерыШапки = Новый Структура;
		
		ПарамерыШапки.Вставить("Заголовок",
			НСтр("ru = 'Ведется учет по зарплате и кадрам'"));
		ПарамерыШапки.Вставить("Пояснение",
			НСтр("ru = 'Для отключения функциональности ""Ведется учет по зарплате и кадрам"" удалите элементы в справочнике ""Сотрудники"":'"));
		
		ЗаполнитьТабличныйДокументПоДаннымВыборки(
			СтруктураРезультата.Результат,
			"Строка",
			Выборка,
			,
			"ШапкаСотрудник",
			ПарамерыШапки);
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);
	
КонецПроцедуры

Процедура СформироватьСписокОбъектовПрепятствующихОтключениюВедетсяУчетОсновныхСредств(Параметры, АдресХранилища) Экспорт

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Результат", Новый ТабличныйДокумент);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка КАК Ссылка,
	|	ОсновныеСредства.Представление КАК Представление
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	НЕ ОсновныеСредства.Предопределенный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 Тогда
		
		ПараметрыШапки = Новый Структура;
		
		ПараметрыШапки.Вставить("Заголовок",
			НСтр("ru = 'Основные средства'"));
		ПараметрыШапки.Вставить("ОбъектТаблицы",
			НСтр("ru = 'ОсновноеСредство'"));
		ПараметрыШапки.Вставить("Пояснение",
			НСтр("ru = 'Для отключения функциональности ""Основные средства"" удалите элементы в справочнике ""Основные средства"":'"));
			
		ЗаполнитьТабличныйДокументПоДаннымВыборки(
			СтруктураРезультата.Результат,
			"Строка",
			Выборка,
			,
			"ШапкаСПояснением",
			ПараметрыШапки);
			
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);
	
КонецПроцедуры

Процедура СформироватьСписокОбъектовПрепятствующихОтключениюВедетсяУчетНМА(Параметры, АдресХранилища) Экспорт

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Результат", Новый ТабличныйДокумент);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НематериальныеАктивы.Ссылка КАК Ссылка,
	|	НематериальныеАктивы.Представление КАК Представление
	|ИЗ
	|	Справочник.НематериальныеАктивы КАК НематериальныеАктивы
	|ГДЕ
	|	НЕ НематериальныеАктивы.Предопределенный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 Тогда
		
		ПараметрыШапки = Новый Структура;
		
		ПараметрыШапки.Вставить("Заголовок",
			НСтр("ru = 'Нематериальные активы'"));
		ПараметрыШапки.Вставить("ОбъектТаблицы",
			НСтр("ru = 'Нематериальный актив'"));
		ПараметрыШапки.Вставить("Пояснение",
			НСтр("ru = 'Для отключения функциональности ""Нематериальные активы"" удалите элементы в справочнике ""Нематериальные активы"":'"));
			
		ЗаполнитьТабличныйДокументПоДаннымВыборки(
			СтруктураРезультата.Результат,
			"Строка",
			Выборка,
			,
			"ШапкаСПояснением",
			ПараметрыШапки);
			
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);
	
КонецПроцедуры

Процедура СформироватьСписокОбъектовПрепятствующихОтключениюИспользоватьИсполнительныеЛисты(Параметры, АдресХранилища) Экспорт

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Результат", Новый ТабличныйДокумент);
	
	Выборка = РезультатЗапросаИсполнительныеЛисты(Ложь).Выбрать();	
	Если Выборка.Количество() > 0 Тогда
		
		ПараметрыШапки = Новый Структура;
		
		ПараметрыШапки.Вставить("Заголовок",
			НСтр("ru = 'Исполнительные листы'"));
		ПараметрыШапки.Вставить("ОбъектТаблицы",
			НСтр("ru = 'Документ'"));
		ПараметрыШапки.Вставить("Пояснение",
			НСтр("ru = 'Для отключения функциональности ""Исполнительные листы"" удалите документы:'"));
		
		ЗаполнитьТабличныйДокументПоДаннымВыборки(
			СтруктураРезультата.Результат,
			"Строка",
			Выборка,
			,
			"ШапкаСПояснением",
			ПараметрыШапки);
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);
	
КонецПроцедуры

Процедура СформироватьСписокОбъектовПрепятствующихОтключениюИспользоватьДепонированиеЗаработнойПлаты(Параметры, АдресХранилища) Экспорт

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Результат", Новый ТабличныйДокумент);
	
	Выборка = РезультатЗапросаДепонированиеЗарплаты(Ложь).Выбрать();	
	Если Выборка.Количество() > 0 Тогда
		
		ПараметрыШапки = Новый Структура;
		
		ПараметрыШапки.Вставить("Заголовок",
			НСтр("ru = 'Депонирование заработной платы'"));
		ПараметрыШапки.Вставить("ОбъектТаблицы",
			НСтр("ru = 'Документ'"));
		ПараметрыШапки.Вставить("Пояснение",
			НСтр("ru = 'Для отключения функциональности ""Депонирование заработной платы"" удалите документы:'"));
		
		ЗаполнитьТабличныйДокументПоДаннымВыборки(
			СтруктураРезультата.Результат,
			"Строка",
			Выборка,
			,
			"ШапкаСПояснением",
			ПараметрыШапки);
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);
	
КонецПроцедуры

Процедура СформироватьСписокОбъектовПрепятствующихОтключениюУчетПоддержкаСтруктурныхПодразделений(Параметры, АдресХранилища) Экспорт

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Результат", Новый ТабличныйДокумент);
		
	РезультатыЗапросовИспользуютсяСтруктурныеПодразделения = РезультатыЗапросовИспользуютсяСтруктурныеПодразделения(Ложь);
	
	// Филиалы (организации - структурные подразделения)
	Выборка = РезультатыЗапросовИспользуютсяСтруктурныеПодразделения[0].Выбрать();
	Если Выборка.Количество() > 0 Тогда
		
		ПараметрыШапки = Новый Структура;
		
		ПараметрыШапки.Вставить("Заголовок",
			НСтр("ru = 'Организации, являющиеся структурными подразделениями'"));
		ПараметрыШапки.Вставить("Пояснение",
			НСтр("ru = 'Для отключения функциональности ""Структурные подразделения"" в справочнике ""Организации"" необходимо удалить элементы, для которых в реквизите ""Головная организация"" установлена иная организация (или изменить для них значение головной организации):'"));
			
		ЗаполнитьТабличныйДокументПоДаннымВыборки(
			СтруктураРезультата.Результат,
			"Строка",
			Выборка,
			,
			"ШапкаСтруктурноеПодразделение",
			ПараметрыШапки);
			
	КонецЕсли;
	
	// Структурные подразделения
	Выборка = РезультатыЗапросовИспользуютсяСтруктурныеПодразделения[1].Выбрать();
	Если Выборка.Количество() > 0 Тогда
		
		ПараметрыШапки = Новый Структура;
		
		ПараметрыШапки.Вставить("Заголовок",
			НСтр("ru = 'Структурные подразделения'"));
		ПараметрыШапки.Вставить("Пояснение",
			НСтр("ru = 'Для отключения функциональности ""Структурные подразделения"" у элементов справочника ""Подразделения организаций"" снимите флажок ""Является структурным подразделением"":'"));
			
		ЗаполнитьТабличныйДокументПоДаннымВыборки(
			СтруктураРезультата.Результат,
			"Строка",
			Выборка,
			,
			"ШапкаСтруктурноеПодразделение",
			ПараметрыШапки);
			
	КонецЕсли;
	
	// Документы с заполненными подразделениями
	РезультатыЗапросовИспользуютсяСтруктурныеПодразделенияВПроводках = РезультатыЗапросовИспользуютсяСтруктурныеПодразделенияВПроводках(Ложь);
	Выборка = РезультатыЗапросовИспользуютсяСтруктурныеПодразделенияВПроводках.Выбрать();
	Если Выборка.Количество() > 0 Тогда
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ФункциональностьПрограммы.СписокДокументов");

		ОбластьШапкаИПояснение = Макет.ПолучитьОбласть("ШапкаТолькоЗаголовокИПояснение");
		ОбластьШапкаИПояснение.Параметры.Заголовок = НСтр("ru = 'Документы с движениями по структурным подразделениям'");
		ОбластьШапкаИПояснение.Параметры.Пояснение = НСтр("ru = 'Существуют бухгалтерские проводки в разрезе ""Структурных подразделений"".'") + Символы.ПС +
			НСтр("ru = 'Для отключения функциональности ""Структурные подразделения"" очистите ""Структурное подразделение"" в движениях документов.'");
		
		СтруктураРезультата.Результат.Вывести(ОбластьШапкаИПояснение);
			
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);
	
КонецПроцедуры

Процедура СформироватьСписокОбъектовПрепятствующихОтключениюВедетсяУчетТоваровПоТоварамОрганизацииБУ(Параметры, АдресХранилища) Экспорт

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Результат", Новый ТабличныйДокумент);
	
	Если ЗначениеЗаполнено(Константы.ДатаПереходаНаУчетПоТоварамОрганизацийВРазрезеНомеровГТДБУ.Получить()) Тогда
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ФункциональностьПрограммы.СписокДокументов");

		ОбластьШапкаИПояснение = Макет.ПолучитьОбласть("ШапкаТолькоЗаголовокИПояснение");
		ОбластьШапкаИПояснение.Параметры.Заголовок = НСтр("ru = 'Источники происхождения'");
		ОбластьШапкаИПояснение.Параметры.Пояснение = НСтр("ru = 'Для отключения функциональности ""Источники происхождения"" очистите значение константы'") + Символы.ПС + 
			НСтр("ru = '""Дата перехода на учет по товарам организаций в разрезе источников происхождения"".'");
		
		СтруктураРезультата.Результат.Вывести(ОбластьШапкаИПояснение);
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);
	
КонецПроцедуры

Процедура СформироватьСписокОбъектовПрепятствующихОтключениюВестиУчетПоОрганизациям(Параметры, АдресХранилища) Экспорт

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Результат", Новый ТабличныйДокумент);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.Представление КАК Представление
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.Предопределенный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 Тогда
		
		ПараметрыШапки = Новый Структура;
		
		ПараметрыШапки.Вставить("Заголовок",
			НСтр("ru = 'Учет по нескольким организациям'"));
		ПараметрыШапки.Вставить("Пояснение",
			НСтр("ru = 'Для отключения функциональности ""Учет по нескольким организациям"" необходимо,чтобы в информационной базе была только одна организация:'"));
			
		ЗаполнитьТабличныйДокументПоДаннымВыборки(
			СтруктураРезультата.Результат,
			"Строка",
			Выборка,
			,
			"ШапкаОрганизация",
			ПараметрыШапки);
			
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);
	
КонецПроцедуры

Процедура СформироватьСписокОбъектовПрепятствующихОтключениюУчетПоДоговорам(Параметры, АдресХранилища) Экспорт

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Результат", Новый ТабличныйДокумент);
			
	РезультатыЗапросовВестиУчетПоДоговорам = РезультатыЗапросовВестиУчетПоДоговорам(Ложь);
	
	УчетПоДоговорам = РезультатыЗапросовВестиУчетПоДоговорам.УчетПоДоговорам.Выбрать();
	
	Если УчетПоДоговорам.Количество() > 0 Тогда
		
		ПарамерыШапки = Новый Структура;
		
		ПарамерыШапки.Вставить("Заголовок",
			НСтр("ru = 'Остатки по договорам (бух. учет)'"));
		ПарамерыШапки.Вставить("Пояснение",
			НСтр("ru = 'Для отключения функциональности ""Учет по договорам"" перенесите задолженность на один договор и установите его ""Основным"" (по кнопке ""Использовать как основной"")'"));
		
		ЗаполнитьТабличныйДокументПоДаннымВыборки(
			СтруктураРезультата.Результат,
			"СтрокаОбъекты",
			УчетПоДоговорам,
			,
			"ШапкаОбъекты",
			ПарамерыШапки);
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);
	
КонецПроцедуры

Процедура СформироватьСписокОбъектовПрепятствующихОтключениюИспользоватьРегистрациюПрочихВыплат(Параметры, АдресХранилища) Экспорт

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Результат", Новый ТабличныйДокумент);
	
	Выборка = РезультатЗапросаПрочиеВыплаты(Ложь).Выбрать();	
	Если Выборка.Количество() > 0 Тогда
		
		ПараметрыШапки = Новый Структура;
		
		ПараметрыШапки.Вставить("Заголовок",
			НСтр("ru = 'Регистрация прочих выплат'"));
		ПараметрыШапки.Вставить("ОбъектТаблицы",
			НСтр("ru = 'Документ'"));
		ПараметрыШапки.Вставить("Пояснение",
			НСтр("ru = 'Для отключения функциональности ""Регистрация прочих выплат"" удалите документы:'"));
		
		ЗаполнитьТабличныйДокументПоДаннымВыборки(
			СтруктураРезультата.Результат,
			"Строка",
			Выборка,
			,
			"ШапкаСПояснением",
			ПараметрыШапки);
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);
	
КонецПроцедуры

Процедура СформироватьСписокНастроекПрепятствующихОтключениюОпции(Параметры, АдресХранилища) Экспорт

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Результат", Новый ТабличныйДокумент);

	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ФункциональностьПрограммы.СписокДокументов");
	
	Если Параметры.Свойство("ИспользоватьДокументыРеализации")
		ИЛИ Параметры.Свойство("ИспользоватьДокументыПоступления") Тогда
		
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);
	
КонецПроцедуры

// Процедура заполняет табличный документ, состоящий из шапки и строк таблицы
//
// Параметры:
//  ТабличныйДокумент	 - ТабличныйДокумент - заполняемый табличный документ. 
//  ИмяОбластиСтроки	 - Строка - наименование области макета СписокДокументов для вывода строки таблицы.
//  Выборка				 - ВыборкаИзРезультатаЗапроса - выборка, по данным которой заполняются строки таблицы.
//  НомерСтроки			 - Число - начальное значение счетчика строк, который выводится в строках таблицы.
//  ИмяОбластиШапки		 - Строка - наименование области макета СписокДокументов для вывода шапки отчета.
//						   Если параметр не передан, то шапка отчета не выводится.
//  ПараметрыШапки		 - Структура - структура, из которой заполняются параметры области шапки.
//
Процедура ЗаполнитьТабличныйДокументПоДаннымВыборки(ТабличныйДокумент, ИмяОбластиСтроки, Выборка, НомерСтроки = 0, ИмяОбластиШапки = "", ПараметрыШапки = Неопределено) Экспорт 
		
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ФункциональностьПрограммы.СписокДокументов");
	
	// Выводим шапку
	Если ИмяОбластиШапки <> "" Тогда
		
		ОбластьШапка = Макет.ПолучитьОбласть(ИмяОбластиШапки);
		
		Если ТипЗнч(ПараметрыШапки) = Тип("Структура") Тогда
			ОбластьШапка.Параметры.Заполнить(ПараметрыШапки);
		КонецЕсли;	
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
	КонецЕсли;	
		
	ОбластьСтрока = Макет.ПолучитьОбласть(ИмяОбластиСтроки);
	
	Пока Выборка.Следующий() Цикл
	
		НомерСтроки = НомерСтроки + 1;
	
		ОбластьСтрока.Параметры.Заполнить(Выборка);
		ОбластьСтрока.Параметры.НомерПП = НомерСтроки;
		
		ТабличныйДокумент.Вывести(ОбластьСтрока);
	
	КонецЦикла;	
	
КонецПроцедуры

Функция ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции()

	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("ИмяДокумента",     ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаДокументов.Колонки.Добавить("СинонимДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаДокументов.Колонки.Добавить("РезультатЗапроса");
	
	Возврат ТаблицаДокументов;

КонецФункции

#КонецОбласти

#Область ВернутьМассивИменКонстант

// Формирует массив имен констант используемых для управления функциональностью
//
Функция СписокВсейФункциональности(ОписаниеФункциональности = Неопределено) Экспорт
	
	МассивИменКонстант = Новый Массив;
	
	Если ОписаниеФункциональности = Неопределено Тогда
		ОписаниеФункциональности = ОписаниеФункциональности();
	КонецЕсли;
	
	Отбор = Новый Структура("Доступна", Истина);
	Для Каждого Функциональность Из ОписаниеФункциональности.НайтиСтроки(Отбор) Цикл
		МассивИменКонстант.Добавить(Функциональность.Имя);
	КонецЦикла;
	
	Возврат МассивИменКонстант;
	
КонецФункции

// Возвращает имена констант из переданного массива, у которых значение Истина
Функция ВключеннаяФункциональность(СписокФункциональности)
	
	ВключеннаяФункциональность = Новый Массив;
	
	Если Не ЗначениеЗаполнено(СписокФункциональности) Тогда
		Возврат ВключеннаяФункциональность;
	КонецЕсли;
	
	ИменаФункциональности = СтрСоединить(СписокФункциональности, ",");
	
	НаборКонстант = Константы.СоздатьНабор(ИменаФункциональности);
	НаборКонстант.Прочитать();
	
	Для Каждого ИмяФункциональности Из СписокФункциональности Цикл
		Если НаборКонстант[ИмяФункциональности] = Истина Тогда
			ВключеннаяФункциональность.Добавить(ИмяФункциональности);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВключеннаяФункциональность;
	
КонецФункции

Функция ФункциональностьНедоступнаяВПростомИнтерфейсе(ОписаниеФункциональности)
	
	ФункциональностьНедоступнаяВПростомИнтерфейсе = Новый Массив;
	
	Отбор = Новый Структура("ДоступнаВПростомИнтерфейсе,Доступна", Ложь, Истина);
	Для Каждого Функциональность Из ОписаниеФункциональности.НайтиСтроки(Отбор) Цикл
		ФункциональностьНедоступнаяВПростомИнтерфейсе.Добавить(Функциональность.Имя);
	КонецЦикла;
	
	Возврат ФункциональностьНедоступнаяВПростомИнтерфейсе;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыЗапускаПроверокКонстантНаВозможностьОтключения

Процедура ПроверитьВозможностьИзмененияФункциональностиВФоне(СтруктураПараметров, АдресХранилища) Экспорт
	
	Функциональность = СтруктураПараметров.Функциональность;
	ВключеннаяФункциональность = ВключеннаяФункциональность(Функциональность);
	
	ОписаниеФункциональности = ОписаниеФункциональности();
	
	Результат = Новый Структура();
	Результат.Вставить("Используется", ИспользуемаяФункциональность(ВключеннаяФункциональность, ОписаниеФункциональности));
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Функция ОтказСнятьИспользованиеКонстанты(ИмяКонстанты, ОписаниеФункциональности, ИспользуетсяСинхронизацияДанных)
	
	Если ФункциональностьВлияетНаСинхронизациюДанных(ИмяКонстанты, ОписаниеФункциональности)
		И ИспользуетсяСинхронизацияДанных Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ОтказСнятьИспользованиеКонстантыПоДаннымБазы(ИмяКонстанты);
	
КонецФункции

Функция ОтказСнятьИспользованиеКонстантыПоДаннымБазы(ИмяКонстанты)
	
	ОтказСнять = Истина;
	
	Если ИмяКонстанты = "ВедетсяУчетНМА" Тогда
		ОтказСнять = ОтказСнятьВедетсяУчетНМА();
	ИначеЕсли ИмяКонстанты = "ВедетсяУчетОсновныхСредств" Тогда
		ОтказСнять = ОтказСнятьВедетсяУчетОсновныхСредств();
	ИначеЕсли ИмяКонстанты = "ИспользоватьКомплектациюОС" Тогда
		ОтказСнять = ОтказСнятьИспользоватьКомплектациюОС();
	ИначеЕсли ИмяКонстанты = "ИспользоватьРеструктуризациюОС" Тогда
		ОтказСнять = ОтказСнятьИспользоватьРеструктуризациюОС();
	ИначеЕсли ИмяКонстанты = "ВедетсяПроизводственнаяДеятельность" Тогда
		ОтказСнять = ОтказСнятьВедетсяПроизводственнаяДеятельность();
	ИначеЕсли ИмяКонстанты = "ИспользоватьОплатуПоПлатежнымКартам" Тогда
		ОтказСнять = ОтказСнятьИспользоватьОплатуПоПлатежнымКартам();
	ИначеЕсли ИмяКонстанты = "ИспользоватьПодключаемоеОборудование" Тогда
		ОтказСнять = ОтказСнятьИспользоватьПодключаемоеОборудование();
	ИначеЕсли ИмяКонстанты = "ВедетсяУчетТоваровПоТоварамОрганизацииБУ" Тогда
		ОтказСнять = ОтказСнятьВедетсяУчетТоваровПоТоварамОрганизацииБУ();
	ИначеЕсли ИмяКонстанты = "ВедетсяУчетИмпортныхТоваров" Тогда
		ОтказСнять = ОтказСнятьВедетсяУчетИмпортныхТоваров();
	ИначеЕсли ИмяКонстанты = "ИспользоватьКомплектациюНоменклатуры" Тогда
		ОтказСнять = ОтказСнятьИспользоватьКомплектациюНоменклатуры();
	ИначеЕсли ИмяКонстанты = "ВедетсяУчетЗарплатыИКадры" Тогда
		ОтказСнять = ОтказСнятьВедетсяУчетЗарплатыИКадры();
	ИначеЕсли ИмяКонстанты = "ИспользоватьИсполнительныеЛисты" Тогда
		ОтказСнять = ОтказСнятьИспользоватьИсполнительныеЛисты();
	ИначеЕсли ИмяКонстанты = "ИспользоватьНачисленияПрочихДоходВЦеляхНалогообложения" Тогда
		ОтказСнять = ОтказСнятьИспользоватьНачисленияПрочихДоходВЦеляхНалогообложения();
	ИначеЕсли ИмяКонстанты = "ИспользоватьРегистрациюПрочихВыплат" Тогда
		ОтказСнять = ОтказСнятьИспользоватьРегистрациюПрочихВыплат();
	ИначеЕсли ИмяКонстанты = "ИспользоватьДепонированиеЗаработнойПлаты" Тогда
		ОтказСнять = ОтказСнятьИспользоватьДепонированиеЗаработнойПлаты();
	ИначеЕсли ИмяКонстанты = "ВедетсяРозничнаяТорговля" Тогда
		ОтказСнять = ОтказСнятьВедетсяРозничнаяТорговля();
	ИначеЕсли ИмяКонстанты = "ВестиУчетПоДоговорам" Тогда
		ОтказСнять = ОтказСнятьВестиУчетПоДоговорам();
	ИначеЕсли ИмяКонстанты = "ИспользоватьУчетНДСЗаНерезидента" Тогда
		ОтказСнять = ОтказСнятьИспользоватьУчетНДСЗаНерезидента();
	ИначеЕсли ИмяКонстанты = "ПоддержкаРаботыСоСтруктурнымиПодразделениями" Тогда
		ОтказСнять = ОтказСнятьПоддержкаРаботыСоСтруктурнымиПодразделениями();
	ИначеЕсли ИмяКонстанты = "ВестиУчетПоОрганизациям" Тогда
		ОтказСнять = ОтказСнятьВестиУчетПоОрганизациям();
	ИначеЕсли ИмяКонстанты = "ИспользоватьОбменЭСФ" Тогда
		ОтказСнять = ОтказСнятьИспользоватьОбменЭСФ();
	ИначеЕсли ИмяКонстанты = "ИспользоватьОбменВС" Тогда
		ОтказСнять = ОтказСнятьИспользоватьОбменВС();
	ИначеЕсли ИмяКонстанты = "ИспользоватьНесколькоОтветственных" Тогда
		ОтказСнять = Ложь;
	ИначеЕсли ИмяКонстанты = "ФормироватьДвижениеВДокументахЧекККМ" Тогда
		ОтказСнять = Ложь;
	ИначеЕсли ИмяКонстанты = "ВестиУчетМаркируемогоТабакаИСМПТК" Тогда
		ОтказСнять = Ложь;
	ИначеЕсли ИмяКонстанты = "ВестиУчетМаркируемойОбувиИСМПТК" Тогда
		ОтказСнять = Ложь;
	ИначеЕсли ИмяКонстанты = "АвтозаполнятьСчетаВзаиморасчетов" Тогда
		ОтказСнять = Ложь;
	ИначеЕсли ИмяКонстанты = "ОтображатьСтатусыВСчетахНаОплату" Тогда
		ОтказСнять = Ложь;
	КонецЕсли;
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ФункциональностьВлияетНаСинхронизациюДанных(ИмяКонстанты, ОписаниеФункциональности)
	
	Отбор = Новый Структура();
	Отбор.Вставить("Доступна", Истина);
	Отбор.Вставить("ТребуетсяДляОбменов", Истина);
	Отбор.Вставить("Имя", ИмяКонстанты);
	
	СтрокиФункциональности = ОписаниеФункциональности.НайтиСтроки(Отбор);
	
	Возврат СтрокиФункциональности.Количество() > 0;
	
КонецФункции

Функция ИспользуемаяФункциональность(СписокФункциональности, ОписаниеФункциональности)
	
	ИспользуемаяФункциональность = Новый Массив;
	
	ИспользуетсяСинхронизацияДанных = НастройкиСинхронизацииДанных().Прочее;
	
	Для Каждого ИмяФункциональности Из ВключеннаяФункциональность(СписокФункциональности) Цикл
		
		Если ОтказСнятьИспользованиеКонстанты(ИмяФункциональности, ОписаниеФункциональности, ИспользуетсяСинхронизацияДанных) Тогда
			ИспользуемаяФункциональность.Добавить(ИмяФункциональности);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИспользуемаяФункциональность;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс

Функция Изменить(ИмяФункциональности, НовоеЗначение, ИзменитьТолькоПростойИнтерфейс = Ложь) Экспорт
	
	ОписаниеФункциональности = ОписаниеФункциональности();
	СписокФункциональности = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИмяФункциональности);
	Возврат ВыполнитьИзменениеСпискаФункциональности(СписокФункциональности, НовоеЗначение,
		ОписаниеФункциональности, ИзменитьТолькоПростойИнтерфейс);
	
КонецФункции

Процедура ИзменитьВФоне(ПараметрыЗадания, АдресХранилища) Экспорт
	
	РезультатИзменения = Изменить(ПараметрыЗадания.ИмяФункциональности,
		ПараметрыЗадания.НовоеЗначение, ПараметрыЗадания.ИзменитьТолькоПростойИнтерфейс);
	
	ПоместитьВоВременноеХранилище(РезультатИзменения, АдресХранилища);
	
КонецПроцедуры

Функция ВариантФункциональности() Экспорт
	
	ОписаниеФункциональности = Обработки.ФункциональностьПрограммы.ОписаниеФункциональности();
	
	СписокФункциональности = Новый Массив;
	Отбор = Новый Структура("Доступна", Истина);
	Для Каждого Функциональность Из ОписаниеФункциональности.НайтиСтроки(Отбор) Цикл
		СписокФункциональности.Добавить(Функциональность.Имя);
	КонецЦикла;
	
	СтрокаИменКонстант = СтрСоединить(СписокФункциональности, ",");
	
	НаборКонстантОбъект = Константы.СоздатьНабор(СтрокаИменКонстант);
	НаборКонстантОбъект.Прочитать();
	
	ВсеЗначенияФункциональности = Новый Структура;
	Для Каждого ИмяФункциональности Из СписокФункциональности Цикл
		ЗначениеКонстанты = НаборКонстантОбъект[ИмяФункциональности];
		ВсеЗначенияФункциональности.Вставить(ИмяФункциональности, ЗначениеКонстанты);
	КонецЦикла;
	
	Возврат ВариантФункциональностиПоЗначениям(ВсеЗначенияФункциональности);
	
КонецФункции

Функция ВариантФункциональностиПоЗначениям(ВсеЗначенияФункциональности) Экспорт
	
	ПредыдущееЗначениеКонстанты = Неопределено;
	Для Каждого ФункциональностьИЗначение Из ВсеЗначенияФункциональности Цикл
		ЗначениеКонстанты = ФункциональностьИЗначение.Значение;
		// Если снят или установлен хоть один флаг, то это выборочная функциональность
		Если ПредыдущееЗначениеКонстанты <> Неопределено И ПредыдущееЗначениеКонстанты <> ЗначениеКонстанты Тогда
			Возврат ФункциональностьПрограммыКлиентСервер.ВыборочнаяФункциональность();
		Иначе
			ПредыдущееЗначениеКонстанты = ЗначениеКонстанты;
		КонецЕсли;
	КонецЦикла;
	
	// Если все флаги установлены, то это полная функциональность, иначе - основная
	Если ПредыдущееЗначениеКонстанты = Истина Тогда
		Возврат ФункциональностьПрограммыКлиентСервер.ПолнаяФункциональность();
	Иначе
		Возврат ФункциональностьПрограммыКлиентСервер.ОсновнаяФункциональность();
	КонецЕсли;
	
КонецФункции

Функция ТребуетсяПолныйИнтерфейс() Экспорт
	
	ОписаниеФункциональности = ОписаниеФункциональности();
	
	ФункциональностьНедоступнаяВПростомИнтерфейсе = ФункциональностьНедоступнаяВПростомИнтерфейсе(ОписаниеФункциональности);
	Если НЕ ЗначениеЗаполнено(ФункциональностьНедоступнаяВПростомИнтерфейсе) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИменаКонстант = СтрСоединить(ФункциональностьНедоступнаяВПростомИнтерфейсе, ",");
	НаборКонстант = Константы.СоздатьНабор(ИменаКонстант);
	НаборКонстант.Прочитать();
	
	Для каждого ИмяФункциональности Из ФункциональностьНедоступнаяВПростомИнтерфейсе Цикл
		Если НаборКонстант[ИмяФункциональности] = Истина Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ДополнитьРодительскойФункциональностью(СписокФункциональности) Экспорт
	
	ОписаниеФункциональности = ОписаниеФункциональности();
	
	РодительскаяФункциональность = РодительскаяФункциональностьДляСписка(СписокФункциональности, ОписаниеФункциональности);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокФункциональности, РодительскаяФункциональность, Истина);
	
КонецПроцедуры

Функция ИзменитьСписокФункциональности(СписокФункциональности, НовоеЗначение, ИзменитьТолькоПростойИнтерфейс = Ложь) Экспорт
	
	ОписаниеФункциональности = ОписаниеФункциональности();
	
	ВключеннаяФункциональность = ВключеннаяФункциональность(СписокФункциональности);
	
	Если НовоеЗначение Тогда
		// Уже включенную функциональность повторно включать не требуется.
		ФункциональностьДляИзменения = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
			СписокФункциональности, ВключеннаяФункциональность);
		ИспользуемаяФункциональность = Новый Массив;
	Иначе
		// Выключать нужно только ту функциональность, которая включена и не используется.
		ИспользуемаяФункциональность = ИспользуемаяФункциональность(ВключеннаяФункциональность, ОписаниеФункциональности);
		ФункциональностьДляИзменения = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
			ВключеннаяФункциональность, ИспользуемаяФункциональность);
	КонецЕсли;
	
	РезультатИзменения = ВыполнитьИзменениеСпискаФункциональности(
		ФункциональностьДляИзменения, НовоеЗначение, ОписаниеФункциональности, ИзменитьТолькоПростойИнтерфейс);
	
	// При попытке отключения функциональности может оказаться, что часть
	// функциональности не может быть отключена. Например, из-за используемой дочерней функциональности.
	// Дополним этот список НевозможноВыключитьФункциональность опциями, которые сами используются - ИспользуемаяФункциональность.
	Если ЗначениеЗаполнено(ИспользуемаяФункциональность) Тогда
		РезультатИзменения.Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			РезультатИзменения.НевозможноВыключитьФункциональность, ИспользуемаяФункциональность, Истина);
	КонецЕсли;
	
	Возврат РезультатИзменения;
	
КонецФункции

Процедура ИзменитьСписокФункциональностиВФоне(СтруктураПараметров, АдресХранилища) Экспорт
	
	Функциональность = СтруктураПараметров.Функциональность;
	НовоеЗначение = СтруктураПараметров.НовоеЗначение;
	ИзменитьТолькоПростойИнтерфейс = СтруктураПараметров.ИзменитьТолькоПростойИнтерфейс;
	
	РезультатИзменения = ИзменитьСписокФункциональности(Функциональность, НовоеЗначение, ИзменитьТолькоПростойИнтерфейс);
	
	ПоместитьВоВременноеХранилище(РезультатИзменения, АдресХранилища);
	
КонецПроцедуры

Функция ПростойИнтерфейсФункциональности() Экспорт
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ИзменениеФункциональности

Процедура ЗаписатьЗначениеФункциональности(Функциональность, НовоеЗначение)
	
	Если Константы[Функциональность.Имя].Получить() = НовоеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьЗначениеФункциональности(Функциональность, НовоеЗначение);
	
КонецПроцедуры

Процедура ИзменитьЗначениеФункциональности(Функциональность, НовоеЗначение)
	
	ОперацияСЛицензией = Неопределено;
	
	Попытка
		
		Константы[Функциональность.Имя].Установить(НовоеЗначение);
		
		ПослеИзмененияЗначенияФункциональности(Функциональность, НовоеЗначение);
		
	Исключение
		
		ЗаписьЖурналаРегистрации(ФункциональностьПрограммыКлиентСервер.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Константы[Функциональность.Имя], , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		// Возникло исключение - нужно вернуть значение константы в старое значение, если же константа все же
		// изменилась и исключение было вызвано операцией после изменения.
		Константы[Функциональность.Имя].Установить(Не НовоеЗначение);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПослеИзмененияЗначенияФункциональности(Функциональность, НовоеЗначение)
	
	Если Функциональность.Имя = "ИспользоватьСтатьиДвиженияДенежныхСредств" Тогда

	ИначеЕсли Функциональность.Имя = "ВестиУчетПоПодразделениям" Тогда

	ИначеЕсли Функциональность.Имя = "ВестиУчетПоОрганизациям" Тогда
		ДействияПослеИзмененияВестиУчетПоОрганизациям(НовоеЗначение);
	ИначеЕсли Функциональность.Имя = "ИспользоватьКадровыйУчет" Тогда
		
	ИначеЕсли Функциональность.Имя = "ПоддержкаРаботыСоСтруктурнымиПодразделениями" Тогда
		ДействияПослеИзмененияПоддержкаРаботыСоСтруктурнымиПодразделениями(НовоеЗначение);
		
	ИначеЕсли Функциональность.Имя = "ВестиУчетМаркируемогоТабакаИСМПТК" Тогда
		ДействияПослеИзмененияВестиУчетМаркируемойПродукцииИСМПТК();
		
	ИначеЕсли Функциональность.Имя = "ВестиУчетМаркируемойОбувиИСМПТК" Тогда
		ДействияПослеИзмененияВестиУчетМаркируемойПродукцииИСМПТК();

	КонецЕсли;
	
КонецПроцедуры

Функция НовыйРезультатИзмененияСпискаФункциональности(НовоеЗначение)
	
	Результат = Новый Структура;
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("НовоеЗначение", НовоеЗначение);
	Результат.Вставить("ФункциональностьНеДоступнаПоТарифу", Новый Массив);
	Результат.Вставить("ФункциональностьБезСвободныхЛицензий", Новый Массив);
	Результат.Вставить("ТребуетсяВключитьФункциональность", Новый Массив);
	Результат.Вставить("НевозможноВыключитьФункциональность", Новый Массив);
	Результат.Вставить("ТребуетсяВыключитьФункциональность", Новый Массив);
	Результат.Вставить("НовыеЗначенияФункциональности", Новый Структура);
	Результат.Вставить("НовыеЗначенияФункциональностиДляОтложенногоИзменения", Новый Структура);
	Возврат Результат;
	
КонецФункции

Функция ВыполнитьИзменениеСпискаФункциональности(СписокФункциональности, НовоеЗначение, ОписаниеФункциональности, ИзменитьТолькоПростойИнтерфейс = Ложь)
	
	Результат = НовыйРезультатИзмененияСпискаФункциональности(НовоеЗначение);
	
	Если Не ЗначениеЗаполнено(СписокФункциональности) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЭтоПолныйИнтерфейс = Не ПростойИнтерфейсФункциональности();
	
	КэшЛицензий = Новый Соответствие;
	Если НовоеЗначение Тогда

	КонецЕсли;
	
	Для Каждого ИмяФункциональности Из СписокФункциональности Цикл
		ДобавитьНовоеЗначениеФункциональности(Результат, ИмяФункциональности, НовоеЗначение, КэшЛицензий, ОписаниеФункциональности);
	КонецЦикла;
	
	Если НовоеЗначение Тогда
		ПроверитьЧтоВключенаРодительскаяФункциональность(
			СписокФункциональности, ОписаниеФункциональности, КэшЛицензий, Результат);
	Иначе
		ПроверитьЧтоОтключенаДочерняяФункциональность(СписокФункциональности, ОписаниеФункциональности, КэшЛицензий, Результат);
	КонецЕсли;
	
	Если ИзменитьТолькоПростойИнтерфейс Тогда
		ЗаполнитьФункциональностьПолногоИнтерфейсаДляОтложенногоИзменения(Результат, ОписаниеФункциональности);
	КонецЕсли;
	
	Для Каждого ФункциональностьИЗначение Из Результат.НовыеЗначенияФункциональности Цикл
		Функциональность = СвойстваФункциональности(ФункциональностьИЗначение.Ключ, ОписаниеФункциональности);
		ЗаписатьЗначениеФункциональности(Функциональность, ФункциональностьИЗначение.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьЧтоВключенаРодительскаяФункциональность(СписокФункциональности, ОписаниеФункциональности, КэшЛицензий, Результат)
	
	// При включении функциональности проверяем, не нужно ли также включить 
	// родительские константы. Если нужно - предлагаем включить.
	
	РодительскаяФункциональность = РодительскаяФункциональностьДляСписка(СписокФункциональности, ОписаниеФункциональности);
	
	// В том случае, если в простом интерфейсе изменяется только функциональность полного интерфейса,
	// при этом вся родительская функциональность должна быть обязательно включена при переходе на полный интерфейс,
	// то в этом случае не нужно проверять родительскую функциональность на включение - она будет включена в обработке
	// перехода на полный интерфейс.
	
	ПроверятьРодительскуюФункциональностьНаВключение = Истина;
	Если ПростойИнтерфейсФункциональности()
		И ВсяФункциональностьТолькоДляПолногоИнтерфейса(СписокФункциональности, ОписаниеФункциональности) Тогда
		ПроверятьРодительскуюФункциональностьНаВключение = Не ВсяФункциональностьДолжнаБытьОбязательноВключенаВПолномИнтерфейсе(
			РодительскаяФункциональность, ОписаниеФункциональности);
	КонецЕсли;
	
	Если ПроверятьРодительскуюФункциональностьНаВключение Тогда
		
		Для Каждого ИмяФункциональности Из РодительскаяФункциональность Цикл
			Включено = Константы[ИмяФункциональности].Получить();
			Если Не Включено И СписокФункциональности.Найти(ИмяФункциональности) = Неопределено Тогда
				Результат.Отказ = Истина;
				Результат.ТребуетсяВключитьФункциональность.Добавить(ИмяФункциональности);
			КонецЕсли;
		КонецЦикла;
		
		// Не будем включать сейчас ту функциональность, у которой не включена родительская.
		УдалитьБлокируемуюРодительскойДочернююФункциональность(
			Результат.НовыеЗначенияФункциональности, Результат.ТребуетсяВключитьФункциональность, ОписаниеФункциональности);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЧтоОтключенаДочерняяФункциональность(СписокФункциональности, ОписаниеФункциональности, КэшЛицензий, Результат)
	
	// При выключении функциональности проверяем, можно ли выключить и дочернюю функциональность.
	// Если зависимые константы выключить нельзя, сообщаем об этом и родительскую функциональность не выключаем.
	ДочерняяФункциональность = ДочерняяФункциональностьДляСписка(СписокФункциональности, ОписаниеФункциональности);
	
	// Если дочерняя функциональность есть в списке на отключение, то проверять ее как зависимую не требуется,
	// т.к. в СписокФункциональности должна быть уже только функциональность, которую гарантированно можно снять.
	ПроверяемаяДочерняяФункциональность = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		ДочерняяФункциональность, СписокФункциональности);
		
	ИспользуетсяСинхронизацияДанных = НастройкиСинхронизацииДанных().Прочее;
	
	РезультатПроверки = ПроверитьФункциональностьНаВозможностьОтключения(ПроверяемаяДочерняяФункциональность, ОписаниеФункциональности, ИспользуетсяСинхронизацияДанных);
	
	Если РезультатПроверки.НевозможноОтключить.Количество() > 0 Тогда
		
		Результат.Отказ = Истина;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			Результат.НевозможноВыключитьФункциональность, РезультатПроверки.НевозможноОтключить, Истина);
		
		// Не будем отключать ту функциональность, у которой нет возможности отключить дочернюю.
		УдалитьБлокируемуюДочернейРодительскуюФункциональность(
			Результат.НовыеЗначенияФункциональности, РезультатПроверки.НевозможноОтключить, ОписаниеФункциональности);
		
	Иначе
		
		// Всю дочернюю функциональность можно отключить.
		// Поэтому добавим ее в список на отключение.
		
		НовоеЗначение = Ложь;
		
		Для Каждого ИмяФункциональности Из РезультатПроверки.ВозможноОтключить Цикл
			ДобавитьНовоеЗначениеФункциональности(Результат, ИмяФункциональности, НовоеЗначение, КэшЛицензий, ОписаниеФункциональности);
		КонецЦикла;
		
		Если ПростойИнтерфейсФункциональности() Тогда
			// Добавим также и отключенную дочернюю функциональность, чтобы отключить
			// в простом интерфейсе дочернюю функциональность, если она в форме включена
			// для отложенного изменения.
			Для Каждого ИмяФункциональности Из РезультатПроверки.Отключена Цикл
				ДобавитьНовоеЗначениеФункциональности(Результат, ИмяФункциональности, НовоеЗначение, КэшЛицензий, ОписаниеФункциональности);
			КонецЦикла;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			Результат.ТребуетсяВыключитьФункциональность, РезультатПроверки.ВозможноОтключить, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДочерняяФункциональностьДляСписка(СписокФункциональности, ОписаниеФункциональности)
	
	ДочерняяФункциональность = Новый Массив;
	
	Для Каждого ИмяФункциональности Из СписокФункциональности Цикл
		
		Функциональность = СвойстваФункциональности(ИмяФункциональности, ОписаниеФункциональности);
		Если Функциональность = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДополнитьФункциональностьСУчетомИерархии(
			ДочерняяФункциональность, Функциональность, "ДочерняяФункциональность", ОписаниеФункциональности);
		
	КонецЦикла;
	
	Возврат ДочерняяФункциональность;
	
КонецФункции

Функция РодительскаяФункциональностьДляСписка(СписокФункциональности, ОписаниеФункциональности)
	
	РодительскаяФункциональность = Новый Массив;
	
	Для Каждого ИмяФункциональности Из СписокФункциональности Цикл
		
		Функциональность = СвойстваФункциональности(ИмяФункциональности, ОписаниеФункциональности);
		Если Функциональность = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДополнитьФункциональностьСУчетомИерархии(
			РодительскаяФункциональность, Функциональность, "РодительскаяФункциональность", ОписаниеФункциональности);
		
	КонецЦикла;
	
	Возврат ОбщегоНазначенияКлиентСервер.СвернутьМассив(РодительскаяФункциональность);
	
КонецФункции

Процедура ДополнитьФункциональностьСУчетомИерархии(СписокФункциональности, Функциональность, ИмяСпискаДополнения, ОписаниеФункциональности)
	
	СписокФункциональностиДляДополнения = Новый Массив;
	
	Для Каждого ИмяФункциональности Из Функциональность[ИмяСпискаДополнения] Цикл
		
		ФункциональностьДляДополнения = СвойстваФункциональности(ИмяФункциональности, ОписаниеФункциональности);
		Если ФункциональностьДляДополнения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДополнитьФункциональностьСУчетомИерархии(
			СписокФункциональностиДляДополнения, ФункциональностьДляДополнения, ИмяСпискаДополнения, ОписаниеФункциональности);
		
		СписокФункциональностиДляДополнения.Добавить(ИмяФункциональности);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СписокФункциональностиДляДополнения) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			СписокФункциональности, СписокФункциональностиДляДополнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьБлокируемуюДочернейРодительскуюФункциональность(НовыеЗначенияФункциональности, ДочерняяФункциональность, ОписаниеФункциональности)
	
	РодительскаяФункциональностьКоторуюБлокируетДочерняя = РодительскаяФункциональностьДляСписка(
		ДочерняяФункциональность, ОписаниеФункциональности);
	
	Для Каждого ИмяФункциональности Из РодительскаяФункциональностьКоторуюБлокируетДочерняя Цикл
		Если НовыеЗначенияФункциональности.Свойство(ИмяФункциональности) Тогда
			НовыеЗначенияФункциональности.Удалить(ИмяФункциональности);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьБлокируемуюРодительскойДочернююФункциональность(НовыеЗначенияФункциональности, РодительскаяФункциональность, ОписаниеФункциональности)
	
	ДочерняяФункциональностьКоторуюБлокируетРодительская = ДочерняяФункциональностьДляСписка(
		РодительскаяФункциональность, ОписаниеФункциональности);
	
	Для Каждого ИмяФункциональности Из ДочерняяФункциональностьКоторуюБлокируетРодительская Цикл
		Если НовыеЗначенияФункциональности.Свойство(ИмяФункциональности) Тогда
			НовыеЗначенияФункциональности.Удалить(ИмяФункциональности);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ВсяФункциональностьТолькоДляПолногоИнтерфейса(СписокФункциональности, ОписаниеФункциональности)
	
	ВсяФункциональностьТолькоДляПолногоИнтерфейса = Истина;
	
	Для Каждого ИмяФункциональности Из СписокФункциональности Цикл
		
		Функциональность = СвойстваФункциональности(ИмяФункциональности, ОписаниеФункциональности);
		Если Функциональность = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Функциональность.ДоступнаВПростомИнтерфейсе Тогда
			ВсяФункциональностьТолькоДляПолногоИнтерфейса = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВсяФункциональностьТолькоДляПолногоИнтерфейса;
	
КонецФункции

Функция ВсяФункциональностьДолжнаБытьОбязательноВключенаВПолномИнтерфейсе(СписокФункциональности, ОписаниеФункциональности)
	
	ВсяФункциональностьДолжнаБытьОбязательноВключенаВПолномИнтерфейсе = Истина;
	
	Для Каждого ИмяФункциональности Из СписокФункциональности Цикл
		Функциональность = СвойстваФункциональности(ИмяФункциональности, ОписаниеФункциональности);
		Если Функциональность = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не Функциональность.ДолжнаБытьОбязательноВключенаВПолномИнтерфейсе Тогда
			ВсяФункциональностьДолжнаБытьОбязательноВключенаВПолномИнтерфейсе = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВсяФункциональностьДолжнаБытьОбязательноВключенаВПолномИнтерфейсе;
	
КонецФункции

Функция ПроверитьФункциональностьНаВозможностьОтключения(СписокФункциональности, ОписаниеФункциональности, ИспользуетсяСинхронизацияДанных)
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("Отключена", Новый Массив);
	РезультатПроверки.Вставить("НевозможноОтключить", Новый Массив);
	РезультатПроверки.Вставить("ВозможноОтключить", Новый Массив);
	
	Если Не ЗначениеЗаполнено(СписокФункциональности) Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	НаборКонстант = Константы.СоздатьНабор(СтрСоединить(СписокФункциональности, ","));
	НаборКонстант.Прочитать();
	
	Для каждого ИмяФункциональности Из СписокФункциональности Цикл
		
		Если Не НаборКонстант[ИмяФункциональности] Тогда
			// Дочерняя функциональность и так выключена, дополнительно проверять ее не требуется.
			РезультатПроверки.Отключена.Добавить(ИмяФункциональности);
			Продолжить;
		КонецЕсли;
		
		Если ОтказСнятьИспользованиеКонстанты(ИмяФункциональности, ОписаниеФункциональности, ИспользуетсяСинхронизацияДанных) Тогда
			РезультатПроверки.НевозможноОтключить.Добавить(ИмяФункциональности);
		Иначе
			РезультатПроверки.ВозможноОтключить.Добавить(ИмяФункциональности);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатПроверки;
	
КонецФункции

Процедура ЗаполнитьФункциональностьПолногоИнтерфейсаДляОтложенногоИзменения(Результат, ОписаниеФункциональности)
	
	// Для функциональности, которая не доступна в простом интерфейсе, не нужно устанавливать
	// соответствующую константу непосредственно. Нужно сохранить эти значения
	// и изменить только в форме для того, чтобы функциональность установилась при перезапуске.
	
	Для Каждого ФункциональностьИЗначение Из Результат.НовыеЗначенияФункциональности Цикл
		
		Функциональность = СвойстваФункциональности(ФункциональностьИЗначение.Ключ, ОписаниеФункциональности);
		Если Функциональность = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Функциональность.ДоступнаВПростомИнтерфейсе Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.НовыеЗначенияФункциональностиДляОтложенногоИзменения.Вставить(
			ФункциональностьИЗначение.Ключ, ФункциональностьИЗначение.Значение);
		
	КонецЦикла;
	
	// Очистим НовыеЗначенияФункциональности, чтобы не изменились константы, которые с ними связаны.
	Для Каждого ФункциональностьИЗначение Из Результат.НовыеЗначенияФункциональностиДляОтложенногоИзменения Цикл
		Результат.НовыеЗначенияФункциональности.Удалить(ФункциональностьИЗначение.Ключ);
	КонецЦикла;
	
КонецПроцедуры

Функция СвойстваФункциональности(ИмяФункциональности, ОписаниеФункциональности)
	
	Функциональность = ОписаниеФункциональности.Найти(ИмяФункциональности, "Имя");
	Если Функциональность <> Неопределено
		И Функциональность.Доступна Тогда
		Возврат Функциональность;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ДобавитьНовоеЗначениеФункциональности(Результат, ИмяФункциональности, НовоеЗначение, КэшЛицензий, ОписаниеФункциональности)
	
	Если ИмяФункциональности = "ИспользоватьОбменВС" И СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		Возврат;
	КонецЕсли;

	Если НовоеЗначение Тогда
		
		ЛицензияФункциональности = КэшЛицензий.Получить(ИмяФункциональности);
		Если ЛицензияФункциональности <> Неопределено
			И Не ЛицензияФункциональности.ВходитВТариф Тогда
			Результат.ФункциональностьНеДоступнаПоТарифу.Добавить(ИмяФункциональности);
			Возврат;
		КонецЕсли;
		
		Если ЛицензияФункциональности <> Неопределено
			И Не ЛицензияФункциональности.ЕстьСвободныеЛицензии Тогда
			Результат.ФункциональностьБезСвободныхЛицензий.Добавить(ИмяФункциональности);
			Возврат;
		КонецЕсли;
		
	Иначе
		
		Функциональность = СвойстваФункциональности(ИмяФункциональности, ОписаниеФункциональности);
		Если Функциональность.ДолжнаБытьОбязательноВключенаВПолномИнтерфейсе
			И Не ПростойИнтерфейсФункциональности() Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.НовыеЗначенияФункциональности.Вставить(ИмяФункциональности, НовоеЗначение);
	
КонецПроцедуры

#КонецОбласти

#Область Сотрудники

Функция РезультатЗапросаСотрудники(ТолькоПроверка = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(Сотрудники.Ссылка) КАК Представление,
	|	Сотрудники.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК Сотрудники";
	
	ИзменитьДляПроверкиТекстЗапроса(Запрос.Текст, ТолькоПроверка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция РезультатЗапросаДокументыЗарплаты()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	ПРЕДСТАВЛЕНИЕ(АвансовыйОтчетВыплатаЗаработнойПлаты.Ссылка) КАК Представление,
	|	АвансовыйОтчетВыплатаЗаработнойПлаты.Ссылка КАК Ссылка,
	|	АвансовыйОтчетВыплатаЗаработнойПлаты.Ссылка.Дата КАК Дата
	|ИЗ
	|	Документ.АвансовыйОтчет.ВыплатаЗаработнойПлаты КАК АвансовыйОтчетВыплатаЗаработнойПлаты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	ПРЕДСТАВЛЕНИЕ(АвансовыйОтчетПеречислениеСоциальныхОтчислений.Ссылка) КАК Представление,
	|	АвансовыйОтчетПеречислениеСоциальныхОтчислений.Ссылка КАК Ссылка,
	|	АвансовыйОтчетПеречислениеСоциальныхОтчислений.Ссылка.Дата КАК Дата
	|ИЗ
	|	Документ.АвансовыйОтчет.ПеречислениеСоциальныхОтчислений КАК АвансовыйОтчетПеречислениеСоциальныхОтчислений
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	ПРЕДСТАВЛЕНИЕ(АвансовыйОтчетПеречислениеПенсионныхВзносов.Ссылка) КАК Представление,
	|	АвансовыйОтчетПеречислениеПенсионныхВзносов.Ссылка КАК Ссылка,
	|	АвансовыйОтчетПеречислениеПенсионныхВзносов.Ссылка.Дата КАК Дата
	|ИЗ
	|	Документ.АвансовыйОтчет.ПеречислениеПенсионныхВзносов КАК АвансовыйОтчетПеречислениеПенсионныхВзносов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ВводНачальныхОстатковПоЗарплате.Ссылка) КАК Представление,
	|	ВводНачальныхОстатковПоЗарплате.Ссылка КАК Ссылка,
	|	ВводНачальныхОстатковПоЗарплате.Дата КАК Дата
	|ИЗ
	|	Документ.ВводНачальныхОстатковПоЗарплате КАК ВводНачальныхОстатковПоЗарплате
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ВводСведенийОПлановыхУдержанияхРаботниковОрганизаций.Ссылка) КАК Представление,
	|	ВводСведенийОПлановыхУдержанияхРаботниковОрганизаций.Ссылка КАК Ссылка,
	|	ВводСведенийОПлановыхУдержанияхРаботниковОрганизаций.Дата КАК Дата
	|ИЗ
	|	Документ.ВводСведенийОПлановыхУдержанияхРаботниковОрганизаций КАК ВводСведенийОПлановыхУдержанияхРаботниковОрганизаций
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций.Ссылка),
	|	ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций.Ссылка,
	|	ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций.Дата
	|ИЗ
	|	Документ.ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций КАК ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ВозвратЗарплатыРаботниковОрганизаций.Ссылка),
	|	ВозвратЗарплатыРаботниковОрганизаций.Ссылка,
	|	ВозвратЗарплатыРаботниковОрганизаций.Дата
	|ИЗ
	|	Документ.ВозвратЗарплатыРаботниковОрганизаций КАК ВозвратЗарплатыРаботниковОрганизаций
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ПлатежноеПоручениеИсходящее.Ссылка),
	|	ПлатежноеПоручениеИсходящее.Ссылка,
	|	ПлатежноеПоручениеИсходящее.Дата
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	|ГДЕ
	|	ПлатежноеПоручениеИсходящее.ВидОперации В(&ВидыОпераций)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка";
	
	ВидыОпераций = Новый Массив;
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПенсионныхВзносов);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратСоциальныхОтчислений);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратЗаработнойПлаты);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеЗаработнойПлаты);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику);
	
	Запрос.УстановитьПараметр("ВидыОпераций", ВидыОпераций);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция РезультатЗапросаИсполнительныеЛисты(ТолькоПроверка = Истина)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	ПРЕДСТАВЛЕНИЕ(АвансовыйОтчетОплатаПоИсполнительнымЛистам.Ссылка) КАК Представление,
	|	АвансовыйОтчетОплатаПоИсполнительнымЛистам.Ссылка КАК Ссылка,
	|	АвансовыйОтчетОплатаПоИсполнительнымЛистам.Ссылка.Дата КАК Дата
	|ИЗ
	|	Документ.АвансовыйОтчет.ОплатаПоИсполнительнымЛистам КАК АвансовыйОтчетОплатаПоИсполнительнымЛистам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ИЛПеречислениеПолучателям.Ссылка) КАК Представление,
	|	ИЛПеречислениеПолучателям.Ссылка КАК Ссылка,
	|	ИЛПеречислениеПолучателям.Дата КАК Дата
	|ИЗ
	|	Документ.ИЛПеречислениеПолучателям КАК ИЛПеречислениеПолучателям
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ИсполнительныйЛист.Ссылка) КАК Представление,
	|	ИсполнительныйЛист.Ссылка КАК Ссылка,
	|	ИсполнительныйЛист.Дата КАК Дата
	|ИЗ
	|	Документ.ИсполнительныйЛист КАК ИсполнительныйЛист
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ПлатежноеПоручениеИсходящее.Ссылка),
	|	ПлатежноеПоручениеИсходящее.Ссылка,
	|	ПлатежноеПоручениеИсходящее.Дата
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	|ГДЕ
	|	ПлатежноеПоручениеИсходящее.ВидОперации В(&ВидыОпераций)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(РасходныйКассовыйОрдер.Ссылка),
	|	РасходныйКассовыйОрдер.Ссылка,
	|	РасходныйКассовыйОрдер.Дата
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.ВидОперации В(&ВидыОпераций)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка";
	
	ВидыОпераций = Новый Массив;
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийППИсходящее.ПеречислениеПоИсполнительнымЛистам);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийРКО.ВыплатаПоИсполнительнымЛистам);
	
	Запрос.УстановитьПараметр("ВидыОпераций", ВидыОпераций);
	
	ИзменитьДляПроверкиТекстЗапроса(Запрос.Текст, ТолькоПроверка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция РезультатЗапросаДепонированиеЗарплаты(ТолькоПроверка = Истина)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПРЕДСТАВЛЕНИЕ(ВводНачальныхОстатковПоЗарплатеЗарплатаИНалоги.Ссылка) КАК Представление,
	|	ВводНачальныхОстатковПоЗарплатеЗарплатаИНалоги.Ссылка КАК Ссылка,
	|	ВводНачальныхОстатковПоЗарплатеЗарплатаИНалоги.Ссылка.Дата КАК Дата
	|ИЗ
	|	Документ.ВводНачальныхОстатковПоЗарплате.ЗарплатаИНалоги КАК ВводНачальныхОстатковПоЗарплатеЗарплатаИНалоги
	|ГДЕ
	|	ВводНачальныхОстатковПоЗарплатеЗарплатаИНалоги.ВзаиморасчетыСДепонентами <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ДепонированиеЗаработнойПлаты.Ссылка) КАК Представление,
	|	ДепонированиеЗаработнойПлаты.Ссылка КАК Ссылка,
	|	ДепонированиеЗаработнойПлаты.Дата КАК Дата
	|ИЗ
	|	Документ.ДепонированиеЗаработнойПлаты КАК ДепонированиеЗаработнойПлаты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПРЕДСТАВЛЕНИЕ(ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка) КАК Представление,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка КАК Ссылка,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Дата КАК Дата
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.ДепонированнаяСумма <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка";
	
	ИзменитьДляПроверкиТекстЗапроса(Запрос.Текст, ТолькоПроверка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция РезультатЗапросаПрочиеВыплаты(ТолькоПроверка = Истина)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	ПРЕДСТАВЛЕНИЕ(РегистрацияПрочихВыплат.Ссылка) КАК Представление,
	|	РегистрацияПрочихВыплат.Ссылка КАК Ссылка,
	|	РегистрацияПрочихВыплат.Дата КАК Дата
	|ИЗ
	|	Документ.РегистрацияПрочихВыплат КАК РегистрацияПрочихВыплат
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ПлатежноеПоручениеИсходящее.Ссылка),
	|	ПлатежноеПоручениеИсходящее.Ссылка,
	|	ПлатежноеПоручениеИсходящее.Дата
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	|ГДЕ
	|	ПлатежноеПоручениеИсходящее.ВидОперации В(&ВидыОпераций)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ПлатежноеПоручениеВходящее.Ссылка),
	|	ПлатежноеПоручениеВходящее.Ссылка,
	|	ПлатежноеПоручениеВходящее.Дата
	|ИЗ
	|	Документ.ПлатежноеПоручениеВходящее КАК ПлатежноеПоручениеВходящее
	|ГДЕ
	|	ПлатежноеПоручениеВходящее.ВидОперации В(&ВидыОпераций) 
	|
	|ОБЪЕДИНИТЬ ВСЕ 
	|
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ВедомостьНаПеречислениеПрочихВыплат.Ссылка) КАК Представление,
	|	ВедомостьНаПеречислениеПрочихВыплат.Ссылка КАК Ссылка,
	|	ВедомостьНаПеречислениеПрочихВыплат.Дата КАК Дата
	|ИЗ
	|	Документ.ВедомостьНаПеречислениеПрочихВыплат КАК ВедомостьНаПеречислениеПрочихВыплат
    |
	|ОБЪЕДИНИТЬ ВСЕ 
	|
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ВедомостьНаВозвратПрочихВыплат.Ссылка) КАК Представление,
	|	ВедомостьНаВозвратПрочихВыплат.Ссылка КАК Ссылка,
	|	ВедомостьНаВозвратПрочихВыплат.Дата КАК Дата
	|ИЗ
	|	Документ.ВедомостьНаВозвратПрочихВыплат КАК ВедомостьНаВозвратПрочихВыплат
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка";
	
	ВидыОпераций = Новый Массив;
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийППИсходящее.ПеречислениеПрочихВыплат);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПрочихВыплат);
	
	Запрос.УстановитьПараметр("ВидыОпераций", ВидыОпераций);
	
	ИзменитьДляПроверкиТекстЗапроса(Запрос.Текст, ТолькоПроверка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ОтказСнятьВедетсяУчетЗарплатыИКадры()
	
	ИспользуетсяСинхронизацияДанныхЗУП = НастройкиСинхронизацииДанных().ЗУП;
	
	Возврат НЕ РезультатЗапросаСотрудники().Пустой() ИЛИ ИспользуетсяСинхронизацияДанныхЗУП;
	
КонецФункции

Функция ОтказСнятьИспользоватьИсполнительныеЛисты()
	
	Возврат НЕ РезультатЗапросаИсполнительныеЛисты().Пустой();
	
КонецФункции

Функция ОтказСнятьИспользоватьНачисленияПрочихДоходВЦеляхНалогообложения()
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РасчетНалоговПриПоступленииАктивовУслуг";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("РасчетНалоговПриПоступленииАктивовУслуг", Ложь, Ложь);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РегистрацияПрочихДоходовВЦеляхНалогообложения";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("РегистрацияПрочихДоходовВЦеляхНалогообложения", Ложь, Ложь);
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОтказСнять = Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказСнять;
	
КонецФункции 

Функция ОтказСнятьИспользоватьРегистрациюПрочихВыплат()
	
	Возврат НЕ РезультатЗапросаПрочиеВыплаты().Пустой();
	
КонецФункции

Функция ОтказСнятьИспользоватьДепонированиеЗаработнойПлаты()
	
	Возврат НЕ РезультатЗапросаДепонированиеЗарплаты().Пустой();
	
КонецФункции

Функция ТаблицаЗапросовИспользоватьНачисленияПрочихДоходВЦеляхНалогообложения()
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РасчетНалоговПриПоступленииАктивовУслуг";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("РасчетНалоговПриПоступленииАктивовУслуг", Ложь, Ложь);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РегистрацияПрочихДоходовВЦеляхНалогообложения";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("РегистрацияПрочихДоходовВЦеляхНалогообложения", Ложь, Ложь);

	Возврат ТаблицаЗапросов;
	
КонецФункции

Функция ДокументыПрепятствующиеОтключениюИспользоватьНачисленияПрочихДоходВЦеляхНалогообложения()
	
	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();
	
	ТаблицаЗапросов = ТаблицаЗапросовИспользоватьНачисленияПрочихДоходВЦеляхНалогообложения();
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции

#КонецОбласти

#Область НДС

Функция ОтказСнятьИспользоватьУчетНДСЗаНерезидента()
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РегистрацияНДСЗаНерезидента";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("РегистрацияНДСЗаНерезидента", Ложь, Ложь);
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОтказСнять = Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ТаблицаЗапросовИспользоватьУчетНДСЗаНерезидента()
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РегистрацияНДСЗаНерезидента";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("РегистрацияНДСЗаНерезидента", Ложь, Ложь);
	
	Возврат ТаблицаЗапросов;
	
КонецФункции

Функция ДокументыПрепятствующиеОтключениюИспользоватьУчетНДСЗаНерезидента()
	
	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();
	
	ТаблицаЗапросов = ТаблицаЗапросовИспользоватьУчетНДСЗаНерезидента();
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции 

Функция ОтказСнятьИспользоватьОбменЭСФ()
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ЭСФ";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ЭСФ", Ложь, Ложь);
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОтказСнять = Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ТаблицаЗапросовИспользоватьОбменЭСФ()
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ЭСФ";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ЭСФ", Ложь, Ложь);
	
	Возврат ТаблицаЗапросов;
	
КонецФункции

Функция ДокументыПрепятствующиеОтключениюИспользоватьОбменЭСФ()
	
	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();
	
	ТаблицаЗапросов = ТаблицаЗапросовИспользоватьОбменЭСФ();
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции 

Функция ОтказСнятьИспользоватьОбменВС()
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ЭлектронныйДокументВС";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ЭлектронныйДокументВС", Ложь, Ложь);
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОтказСнять = Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ТаблицаЗапросовИспользоватьОбменВС()
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ЭлектронныйДокументВС";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ЭлектронныйДокументВС", Ложь, Ложь);
	
	Возврат ТаблицаЗапросов;
	
КонецФункции

Функция ДокументыПрепятствующиеОтключениюИспользоватьОбменВС()
	
	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();
	
	ТаблицаЗапросов = ТаблицаЗапросовИспользоватьОбменВС();
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции 

#КонецОбласти

#Область ОбработчикиОбновленияИнформационнойБазы

Процедура УстановитьПолнуюФункциональность() Экспорт
	
	СписокФункциональности = СписокВсейФункциональности();
	
	ИзменитьСписокФункциональности(СписокФункциональности, Истина);
	
КонецПроцедуры

Процедура УстановитьФункциональностьПриОбновлении() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокФункциональности = СписокВсейФункциональности();
	
	ИндексДляУдаления = СписокФункциональности.Найти("ИспользоватьОбменЭСФ");
	Если ИндексДляУдаления <> Неопределено Тогда
		СписокФункциональности.Удалить(ИндексДляУдаления);
	КонецЕсли;
	
	ИндексДляУдаления = СписокФункциональности.Найти("ИспользоватьОбменВС");
	Если ИндексДляУдаления <> Неопределено Тогда
		СписокФункциональности.Удалить(ИндексДляУдаления);
	КонецЕсли;
	
	ИндексДляУдаления = СписокФункциональности.Найти("ВестиУчетПоОрганизациям");
	Если ИндексДляУдаления <> Неопределено Тогда
		СписокФункциональности.Удалить(ИндексДляУдаления);
	КонецЕсли;
	
	ИзменитьСписокФункциональности(СписокФункциональности, Истина);
	
	// Значение константы ИспользоватьОбменВС при обновлении не изменяем.
	// Значение константы ИспользоватьОбменЭСФ зависит от значений констант
	// 	ИспользоватьОбменЭСФЧерезAPI и ИспользоватьОбменЭСФЧерезXML
	ИспользоватьОбменЭСФ = Константы.ИспользоватьОбменЭСФЧерезAPI.Получить() ИЛИ Константы.ИспользоватьОбменЭСФЧерезXML.Получить();
	Если ИспользоватьОбменЭСФ Тогда
		СписокФункциональности = Новый Массив;
		СписокФункциональности.Добавить("ИспользоватьОбменЭСФ");
		ИзменитьСписокФункциональности(СписокФункциональности, Истина);
	КонецЕсли;
	
	ПерезаполнитьКонстантуВестиУчетПоОрганизациям();
	
КонецПроцедуры

Процедура ПерезаполнитьКонстантуВестиУчетПоОрганизациям() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УчетПоОрганизациям = (НЕ СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации()
		ИЛИ Справочники.Организации.КоличествоОрганизаций() > 1
		ИЛИ Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить());
	
	ВестиУчетПоОрганизациям = Константы.ВестиУчетПоОрганизациям.СоздатьМенеджерЗначения();
	ВестиУчетПоОрганизациям.Значение = УчетПоОрганизациям;
	ВестиУчетПоОрганизациям.ОбменДанными.Загрузка = Истина;
	ВестиУчетПоОрганизациям.Записать();
	
	НеВестиУчетПоОрганизациям = Константы.НеВестиУчетПоОрганизациям.СоздатьМенеджерЗначения();
	НеВестиУчетПоОрганизациям.Значение = НЕ УчетПоОрганизациям;
	НеВестиУчетПоОрганизациям.ОбменДанными.Загрузка = Истина;
	НеВестиУчетПоОрганизациям.Записать();
	
КонецПроцедуры

Процедура УстановитьКонстантуВедетсяУчетТоваровПоТоварамОрганизацииБУ() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерКонстанты = Константы.ВедетсяУчетТоваровПоТоварамОрганизацииБУ.СоздатьМенеджерЗначения();
	
	МенеджерКонстанты.Значение = Истина;
		
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерКонстанты);
	
КонецПроцедуры

Процедура УстановитьКонстантуВедетсяУчетИмпортныхТоваров() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерКонстанты = Константы.ВедетсяУчетИмпортныхТоваров.СоздатьМенеджерЗначения();
	
	МенеджерКонстанты.Значение = Истина;
		
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерКонстанты);
	
КонецПроцедуры

Процедура УстановитьКонстантуИспользоватьКомплектациюНоменклатуры() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерКонстанты = Константы.ИспользоватьКомплектациюНоменклатуры.СоздатьМенеджерЗначения();
	
	МенеджерКонстанты.Значение = Истина;
		
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерКонстанты);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли