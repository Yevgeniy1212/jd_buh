&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоВнешняяОбработка          = Не Метаданные.Обработки.Содержит(РеквизитФормыВЗначение("Объект").Метаданные());
	ИспользоватьВнешнююОбработку = ИспользоватьВнешнююОбработку();
	
	Если ЭтоВнешняяОбработка = ИспользоватьВнешнююОбработку Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Для Каждого Настройка Из Настройки Цикл		
		Если Настройка.Ключ = "Объект.СтрокаНастроек" Тогда
			
			// "Объект.СтрокаНастроек" - устаревший вариант хранения настроек,
			// "Объект.НастройкаЗаполнения" - актуальный вариант хранения настроек
			
			Если Настройки.Получить("Объект.НастройкаЗаполнения") <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Попытка
				Объект.НастройкаЗаполнения = ЗначениеИзСтрокиВнутр(Настройка.Значение);
			Исключение
				Объект.НастройкаЗаполнения.Очистить();
				Объект.НастройкаЗаполнения.Добавить(Истина, "ПроверятьБИН_ИИН");
				Объект.НастройкаЗаполнения.Добавить(Ложь,   "ПроверятьРНН");
				Объект.НастройкаЗаполнения.Добавить(Ложь,   "ПолныеФИООтветственных");
			КонецПопытки;
			
			//Получим настройки проверки заполненности реквизитов
			ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
			ПроверятьРНН 		   = ОбработкаОбъект.ПолучитьНастройкуЗаполнения(Объект.НастройкаЗаполнения, "ПроверятьРНН");
			ПроверятьБИН_ИИН 	   = ОбработкаОбъект.ПолучитьНастройкуЗаполнения(Объект.НастройкаЗаполнения, "ПроверятьБИН_ИИН");
			ПолныеФИООтветственных = ОбработкаОбъект.ПолучитьНастройкуЗаполнения(Объект.НастройкаЗаполнения, "ПолныеФИООтветственных");
			
			Если ПроверятьРНН = Неопределено Тогда
				Объект.НастройкаЗаполнения.Добавить(Ложь, "ПроверятьРНН");
			КонецЕсли;

			Если ПроверятьБИН_ИИН = Неопределено Тогда
				Объект.НастройкаЗаполнения.Добавить(Истина, "ПроверятьБИН_ИИН");
			КонецЕсли;

			Если ПолныеФИООтветственных = Неопределено Тогда
				Объект.НастройкаЗаполнения.Добавить(Ложь, "ПолныеФИООтветственных");
			КонецЕсли;
			
		ИначеЕсли Настройка.Ключ = "Объект.Организация" И ЗначениеЗаполнено(Настройка.Значение) И Объект.Организация <> Настройка.Значение Тогда
			Если ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "УчетПоВсемОрганизациям") Тогда
				Объект.Организация = Настройка.Значение;
			КонецЕсли;
			
		ИначеЕсли Настройка.Ключ = "СтруктурноеПодразделениеОрганизация" И ЗначениеЗаполнено(Настройка.Значение) И Объект.Организация <> Настройка.Значение Тогда
			Если Не ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "УчетПоВсемОрганизациям") Тогда
				Если Не ПоддержкаРаботыСоСтруктурнымиПодразделениями  Тогда					
					СтруктурноеПодразделениеОрганизация = Объект.Организация;
				Иначе
					СтруктурноеПодразделениеОрганизация = ?(ЗначениеЗаполнено(Объект.СтруктурноеПодразделение), Объект.СтруктурноеПодразделение, Объект.Организация);				
				КонецЕсли;   
				Настройки.Удалить("СтруктурноеПодразделениеОрганизация");
			КонецЕсли; 				
		КонецЕсли;  			
		
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("Объект.Организация", Объект.Организация); 
	Настройки.Вставить("Объект.СтруктурноеПодразделениеОрганизация", СтруктурноеПодразделениеОрганизация);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеНастроекЗаполнения" Тогда
		Объект.НастройкаЗаполнения = Параметр.НастройкаЗаполнения;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ИспользоватьВнешнююОбработку И НЕ ЭтоВнешняяОбработка Тогда
		ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ПредопределенноеЗначение("Справочник.ДополнительныеОтчетыИОбработки.ОбработкаКлиентБанк"));
		ОткрытьФорму("ВнешняяОбработка." + ИмяОбработки + ".Форма.Форма");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("ПодключениеРасширенияРаботыСФайламиЗавершение", ЭтотОбъект));
			
КонецПроцедуры

&НаКлиенте
Процедура ПодключениеРасширенияРаботыСФайламиЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	ВозможностьВыбораФайлов = Подключено;
	
	Если ВозможностьВыбораФайлов Тогда
		НастройкаКлиентБанкаПриОткрытии();
	Иначе
		ПодключитьОбработчикОжидания("Подкючаемый_УстановкаРасширенияРаботыСФайлами", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);

КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
		
		СтруктурноеПодразделениеОрганизация = Неопределено;
		
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Результат);
		КонецЕсли;
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ФайлВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	
	Если Объект.ВыгружатьВXMLФормате Тогда
		ДиалогВыбора.Фильтр                  = НСтр("ru = 'XML документ'") + " (*.xml)|*.xml";
		ДиалогВыбора.Расширение              = "xml";
	Иначе
		ДиалогВыбора.Фильтр                  = НСтр("ru = 'Текстовый файл'") + " (*.txt)|*.txt";
		ДиалогВыбора.Расширение              = "txt";
	КонецЕсли;
	
	ДиалогВыбора.Заголовок               = НСтр("ru = 'Выберите папку для выгрузки данных из 1C'");
	ДиалогВыбора.ПредварительныйПросмотр = Ложь;
	ДиалогВыбора.Расширение              = ДиалогВыбора.Расширение;
	ДиалогВыбора.ИндексФильтра           = 0;
	ДиалогВыбора.ПолноеИмяФайла          = ?(ПустаяСтрока(Элемент.ТекстРедактирования),
	"1c_to_kl." + ДиалогВыбора.Расширение , Элемент.ТекстРедактирования);
	ДиалогВыбора.ПроверятьСуществованиеФайла = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборФайлаДляВыгрузкиЗавершение", ЭтотОбъект);
	ДиалогВыбора.Показать(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаДляВыгрузкиЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено
		И ВыбранныеФайлы.Количество()>0 Тогда
		
		Объект.ФайлВыгрузки = ВыбранныеФайлы.Получить(0);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФайлДляПросмотра(Элемент, Объект.Кодировка, НСтр("ru = 'Файл выгрузки'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьВXMLФорматеПриИзменении(Элемент)
	
	Если Объект.ВыгружатьВXMLФормате Тогда
		РасширениеЭкспорта = "xml";
	Иначе
		РасширениеЭкспорта = "txt";
	КонецЕсли;
	
	Строка = СокрЛП(Объект.ФайлВыгрузки);
	Если Не ПустаяСтрока(Строка) Тогда
		Сч = 0;
		Расширение = "";
		ЕстьТочка = 0;
		Пока True Цикл
			СимволСтроки = Сред(Строка, СтрДлина(Строка)-Сч, 1);
			Если СимволСтроки = "." Тогда
				ЕстьТочка = 1;
				Прервать;
			Иначе
				Расширение = СимволСтроки + Расширение;
			КонецЕсли;
			Сч = Сч + 1;
			Если Сч > СтрДлина(Строка) Тогда
				Прервать;
			КонецЕсли
		КонецЦикла;
		Если ЕстьТочка = 1 Тогда
			Если Расширение <> РасширениеЭкспорта Тогда
				Объект.ФайлВыгрузки = Лев(Строка, СтрДлина(Строка)-Сч) + РасширениеЭкспорта;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	Если Объект.ВыгружатьВXMLФормате Тогда
		ДиалогВыбора.Фильтр                  = НСтр("ru = 'XML документ'") + " (*.xml)|*.xml";
		ДиалогВыбора.Расширение              = "xml";
	Иначе
		ДиалогВыбора.Фильтр                  = НСтр("ru = 'Текстовый файл'") + " (*.txt)|*.txt";
		ДиалогВыбора.Расширение              = "txt";
	КонецЕсли;
	
	ДиалогВыбора.Заголовок               = НСтр("ru = 'Выберите папку для загрузки данных из 1C'");
	ДиалогВыбора.ПредварительныйПросмотр = Ложь;
	ДиалогВыбора.Расширение              = ДиалогВыбора.Расширение;
	ДиалогВыбора.ИндексФильтра           = 0;
	ДиалогВыбора.ПолноеИмяФайла          = ?(ПустаяСтрока(Элемент.ТекстРедактирования),
	"kl_to_1c." + ДиалогВыбора.Расширение , Элемент.ТекстРедактирования);
	ДиалогВыбора.ПроверятьСуществованиеФайла = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборФайлаДляЗагрузкиЗавершение", ЭтотОбъект);
	ДиалогВыбора.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаДляЗагрузкиЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено
		И ВыбранныеФайлы.Количество()>0 Тогда
		
		Объект.ФайлЗагрузки = ВыбранныеФайлы.Получить(0);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФайлДляПросмотра(Элемент, Объект.Кодировка, НСтр("ru = 'Файл загрузки'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьГраницуОбработкиПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиПриИзменении(Элемент)
	
	Элементы.ДокументыКИмпортуИнформацияПоСчетам.Доступность = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ДокументыНаЭкспорт

&НаКлиенте
Процедура ДокументыНаЭкспортВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле.Имя = "ДокументыНаЭкспортОписаниеОшибок" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Элемент.ТекущиеДанные.ОписаниеОшибок);
		
	ИначеЕсли Поле.Имя = "ДокументыНаЭкспортНазначениеПлатежа" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Элемент.ТекущиеДанные.НазначениеПлатежа);
		
	ИначеЕсли Поле.Имя = "ДокументыНаЭкспортКонтрагент" Тогда
		ПоказатьЗначение(,Элемент.ТекущиеДанные.ЭлементКонтрагент);
		
	Иначе
		ПоказатьЗначение(,Элемент.ТекущиеДанные.Документ);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаЭкспортПриАктивизацииСтроки(Элемент)
	
	ДанныеСтроки = Элементы.ДокументыНаЭкспорт.ТекущиеДанные;
	Если ДанныеСтроки <> Неопределено Тогда
		Если ДанныеСтроки.Готовность>0 Тогда
			Элементы.ДекорацияСтатуснаяСтрокаПриВыгрузке.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка: %1'"), СтрЗаменить(ДанныеСтроки.ОписаниеОшибок, Символы.ПС, " "));
		Иначе
			Элементы.ДекорацияСтатуснаяСтрокаПриВыгрузке.Заголовок = НСтр("ru = 'Документ готов к выгрузке!'");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаЭкспортПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ТекДанные = Элементы.ДокументыНаЭкспорт.ТекущиеДанные;
	Если Копирование И ТекДанные <> Неопределено Тогда
		НомерСтрокиТаблицыДокументов = ТекДанные.ПолучитьИдентификатор();
		НовыйДок = СоздатьИЗаписатьНовыйДокументНаСервере(НомерСтрокиТаблицыДокументов);
		
		ПоказатьЗначение(,НовыйДок);
	Иначе
		ОткрытьФорму("Документ.ПлатежноеПоручениеИсходящее.ФормаОбъекта", , ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаЭкспортПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущийЭлемент.Имя <> "ДокументыНаЭкспортВыгружать" Тогда
		Отказ = Истина;
		ПоказатьЗначение(,Элемент.ТекущиеДанные.Документ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаЭкспортПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ДокументыКИмпорту

&НаКлиенте
Процедура ДокументыКИмпортуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если Поле.Имя = "ДокументыКИмпортуЗагрузить" Тогда
		
		СтандартнаяОбработка = Ложь;
		Элемент.ТекущиеДанные.Загрузить = НЕ (Элемент.ТекущиеДанные.Загрузить);

	ИначеЕсли Поле.Имя = "ДокументыКИмпортуОписаниеОшибок" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Элемент.ТекущиеДанные.ОписаниеОшибок);
		
	ИначеЕсли Поле.Имя = "ДокументыКИмпортуНазначениеПлатежа" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Элемент.ТекущиеДанные.НазначениеПлатежа);
		
	ИначеЕсли Поле.Имя = "ДокументыКИмпортуДокумент" И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Документ) Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(,Элемент.ТекущиеДанные.Документ);
		
	ИначеЕсли Поле.Имя = "ДокументыКИмпортуДокумент" И НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Документ) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		МассивТипов = Новый Массив; 
		МассивТипов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее")); 
    	МассивТипов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")); 
    	МассивТипов.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств")); 
		МассивТипов.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств")); 
		
		ОписаниеВозможныхТипов = Новый ОписаниеТипов(МассивТипов); 
		ПолученноеЗначение = Неопределено; 
		
		Оповещение = Новый ОписаниеОповещения("ПослеВводаДокумента", ЭтотОбъект);

		ПоказатьВводЗначения(Оповещение, ПолученноеЗначение, НСтр("ru = 'Выберите документ:'"), ОписаниеВозможныхТипов);

	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуПриАктивизацииСтроки(Элемент)
	
	ДанныеСтроки = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	Если ДанныеСтроки <> Неопределено Тогда
		Если ДанныеСтроки.Готовность>0 Тогда
			Элементы.ДекорацияСтатуснаяСтрокаПриЗагрузке.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка: %1'"), СтрЗаменить(ДанныеСтроки.ОписаниеОшибок, Символы.ПС, " "));
		Иначе
			Элементы.ДекорацияСтатуснаяСтрокаПриЗагрузке.Заголовок = НСтр("ru = 'Документ готов к загрузке!'");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода", Объект.НачПериода, Объект.КонПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовУстановитьФлажки(Команда)
	
	Для каждого СтрокаСчета из Объект.ТаблицаСчетов Цикл
		СтрокаСчета.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовСнятьФлажки(Команда)
	
	Для каждого СтрокаСчета из Объект.ТаблицаСчетов Цикл
		СтрокаСчета.Пометка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовУстановитьФлажки(Команда)
	
	Для каждого СтрокаДокумента из Объект.ТаблицаДокументов Цикл
		СтрокаДокумента.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовСнятьФлажки(Команда)
	
	Для каждого СтрокаДокумента из Объект.ТаблицаДокументов Цикл
		СтрокаДокумента.Пометка = Ложь;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаЭкспортУстановитьФлажки(Команда)
	
	Для каждого СтрокаДокумента из ДокументыНаЭкспорт Цикл
		СтрокаДокумента.Выгружать = Истина;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаЭкспортСнятьФлажки(Команда)
	
	Для каждого СтрокаДокумента из ДокументыНаЭкспорт Цикл
		СтрокаДокумента.Выгружать = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаЭкспортОбновить(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "Обработка ""клиент банка"" (обновление документов к экспорту)");
	
	ДокументыНаЭкспортОбновитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуОбновить(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "Обработка ""клиент банка"" (обновление документов к импорту)");
	
	ПрочитатьДанныеИзФайла();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуУстановитьФлажки(Команда)
	
	Для каждого СтрокаДокумента из ДокументыКИмпорту Цикл
		СтрокаДокумента.Загрузить = Истина;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуСнятьФлажки(Команда)
	
	Для каждого СтрокаДокумента из ДокументыКИмпорту Цикл
		СтрокаДокумента.Загрузить = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуСортировкаПоВозр(Команда)
	
	ДокументыКИмпорту.Сортировать("НомерДок Возр");	
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуСортировкаПоУбыв(Команда)
	
	ДокументыКИмпорту.Сортировать("НомерДок Убыв");	
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуИнформацияПоСчетам(Команда)
	
	// Имя текущей формы  - "Форма"
	// Имя формы счетов   - "СписокРасчетныхСчетов"
	ИмяФормыРасчетныхСчетов = СтрЗаменить(ИмяФормы, "Форма.Форма", "Форма.СписокРасчетныхСчетов");
	
	ОткрытьФорму(ИмяФормыРасчетныхСчетов,
				Новый Структура("Импорт_РасчетныеСчета", Импорт_РасчетныеСчета) 
				, 
				ЭтаФорма,
				,
				,
				,
				,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	Если ДокументыНаЭкспорт.Количество() > 0 Тогда
		
		УИДЗамера = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "Обработка ""клиент банка"" (выгрузка документов)");
		
		АдресФайлаВоВременномХранилище = ВыгрузитьДокументы();
		
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамера);
		
		Если ВозможностьВыбораФайлов Тогда
			// Вариант для установленного расширения для работы с файлами
			
			Если НЕ ЗначениеЗаполнено(Объект.ФайлВыгрузки) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не указан файл данных для выгрузки из 1С:Бухгалтерии для Казахстана'")
				,, "Объект.ФайлВыгрузки");
				Возврат;
			КонецЕсли;
			
			ВыгрузитьФайлНаКлиенте(Объект.ФайлВыгрузки, АдресФайлаВоВременномХранилище);
			
		Иначе
			// Веб клиент без расширения для работы с файлами
			Попытка
				
				Если Объект.ВыгружатьВXMLФормате Тогда
					РасширениеЭкспорта = "xml";
				Иначе
					РасширениеЭкспорта = "txt";
				КонецЕсли;
			
				ПолучитьФайл(АдресФайлаВоВременномХранилище, "1c_to_kl." + РасширениеЭкспорта, Истина);
				
			Исключение
				ШаблонСообщения = НСтр("ru = 'При записи файла возникла ошибка
				|%1'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ОписаниеОшибки = ИнформацияОбОшибке();
				
			КонецПопытки;
			
		КонецЕсли;
		
	Иначе
		
		Если Объект.НачПериода = Объект.КонПериода Тогда
			ТекстСообщения = НСтр("ru = 'Отсутствуют платежные поручения за %1
			|по указанным банковским счетам.
			|Попробуйте изменить период или указать другой банковский счет.'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Отсутствуют платежные поручения за период с %1 по %2
			|по указанным банковским счетам.
			|Попробуйте изменить период или указать другой банковский счет.'");
		КонецЕсли;
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(Объект.НачПериода, "ДФ=dd.MM.yyyy"), Формат(Объект.КонПериода, "ДФ=dd.MM.yyyy"));
		
		ПоказатьПредупреждение(, ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	Если Объект.ВыводитьОтчет Тогда
		ПолеОтчета = Новый ТабличныйДокумент;
		ПечатьОтчетаНаСервере(ПолеОтчета, "Выгружать");
		ПолеОтчета.Показать(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отчет о выгрузке платежных документов %1'"), ТекущаяДата()));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	
	Если ДокументыКИмпорту.Количество() > 0 Тогда
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "Обработка ""клиент банка"" (загрузка документов)");
		
		ЗагрузитьДокументыКИмпортуНаКлиенте();
	Иначе
		ТекстШаблона = НСтр("ru = 'Список документов для загрузки пуст.
		|%1.'");
		
		Если ВозможностьВыбораФайлов Тогда	
			Если ПустаяСтрока(Объект.ФайлЗагрузки) Тогда
				ОбъектПривязки = "Объект.ФайлЗагрузки";
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстШаблона, НСтр("ru = 'Не указан файл данных для загрузки в 1С:Бухгалтерию для Казахстана'"));
			ИначеЕсли ДокументыКИмпорту.Количество() = 0 Тогда
				ОбъектПривязки = "ДокументыКИмпорту";
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстШаблона, НСтр("ru = 'Для отображения документов в списке используйте команду ""Обновить""'"));
			Иначе
				ОбъектПривязки = "ДокументыКИмпорту";
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстШаблона, НСтр("ru = 'Возможно в файле обмена не содержится данных'"));
			КонецЕсли;
		ИначеЕсли НЕ ВозможностьВыбораФайлов Тогда
			ОбъектПривязки = "ДокументыКИмпорту";
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстШаблона, НСтр("ru = 'Для отображения документов в списке используйте команду ""Открыть и прочитать данные из файла""'"));
		КонецЕсли;		
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, ОбъектПривязки);
		
	КонецЕсли;
	
	Если Объект.ВыводитьОтчет Тогда
		ПолеОтчета = Новый ТабличныйДокумент;
		ПечатьОтчетаНаСервере(ПолеОтчета, "Загрузить");
		ПолеОтчета.Показать(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отчет о загрузке платежных документов %1'"), ТекущаяДата()));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройки(Команда)
	
	// Имя текущей формы  - "Форма"
	// Имя формы настроек - "ФормаНастройкиЗаполнения"
	ИмяФормыНастроек = ИмяФормы + "НастройкиЗаполнения";
	
	ОткрытьФорму(ИмяФормыНастроек, 
				Новый Структура("НастройкаЗаполнения", Объект.НастройкаЗаполнения) 
				, 
				ЭтаФорма,
				,
				,
				,
				,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьФайл(Команда)
	
	ПрочитатьДанныеИзФайла();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	Объект.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();

	Если Объект.Организация.Пустая() Тогда
		ВыборкаОрганизаций = ПолучитьВыборкуОрганизаций();
		Если ВыборкаОрганизаций.Следующий() Тогда
			Объект.Организация = ВыборкаОрганизаций.Организация;
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ЗаполнитьБанковскиеСчета(Объект);
	КонецЕсли;	
	
	//заполним настройки заполнения по умолчанию, позже они могут быть заменены сохраненными настройками
	Если Объект.НастройкаЗаполнения.Количество() = 0 Тогда
		Объект.НастройкаЗаполнения.Добавить(Истина, "ПроверятьБИН_ИИН");
		Объект.НастройкаЗаполнения.Добавить(Ложь,   "ПроверятьРНН");
		Объект.НастройкаЗаполнения.Добавить(Ложь,   "ПолныеФИООтветственных");
	КонецЕсли;	
	
	Объект.НачПериода = ОбщегоНазначения.ТекущаяДатаПользователя();
	Объект.КонПериода = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ЗаполнитьВидыДокументов(ОбработкаОбъект);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	УстановитьВидимостьРеквизитовСтруктурногоПодразделения();
	
	РасширениеЭкспорта = "txt";
	Импорт_ТекстДляРазбора = "";
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьБанковскиеСчета(Объект) //+
	
	Объект.ТаблицаСчетов.Очистить();
	
	Если НЕ Объект.Организация.Пустая() Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	БанковскиеСчета.Ссылка КАК Ссылка,
		               |	БанковскиеСчета.НомерСчета КАК НомерСчета
		               |ИЗ
		               |	Справочник.БанковскиеСчета КАК БанковскиеСчета
		               |ГДЕ
		               |	БанковскиеСчета.Владелец = &Организация
		               |	И БанковскиеСчета.ОбменСБанкомВключен
		               |	И БанковскиеСчета.ИспользоватьОбменСБанком";
	
		СпрБанковскиеСчета = Запрос.Выполнить().Выбрать();
		Пока СпрБанковскиеСчета.Следующий() Цикл
			Если СокрЛП(СпрБанковскиеСчета.НомерСчета) = "" Тогда
				Продолжить;
			КонецЕсли;
			СтрокаСчета = Объект.ТаблицаСчетов.Добавить();
			СтрокаСчета.Пометка = Истина;
			СтрокаСчета.Счет = СпрБанковскиеСчета.Ссылка;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьБанковскиеСчета()

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Форма.Элементы.ДатаГраницыОбработки.Доступность = Форма.Объект.ИспользоватьГраницуОбработки;

	Форма.Элементы.ДокументыКИмпортуИнформацияПоСчетам.Доступность = (Форма.Импорт_РасчетныеСчета.Количество() > 0);
	Форма.Элементы.ДокументыКИмпортуСортировкаПоУбыв.Доступность   = (Форма.ДокументыКИмпорту.Количество() > 0);
	Форма.Элементы.ДокументыКИмпортуСортировкаПоВозр.Доступность   = (Форма.ДокументыКИмпорту.Количество() > 0);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРеквизитовСтруктурногоПодразделения()
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
		
	Если  ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Если Не ЗначениеЗаполнено(Объект.СтруктурноеПодразделение)Тогда
			СтруктурноеПодразделениеОрганизация = Объект.Организация;
		Иначе
			СтруктурноеПодразделениеОрганизация = ?(ЗначениеЗаполнено(Объект.СтруктурноеПодразделение), Объект.СтруктурноеПодразделение, Объект.Организация);
		КонецЕсли;	
		
		РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, Истина);
		РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, Истина);
	
	Иначе 
		РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Справочники.ПодразделенияОрганизаций.ПустаяСсылка(), СтруктурноеПодразделениеОрганизация, Ложь);
		РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Справочники.ПодразделенияОрганизаций.ПустаяСсылка(), Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьВидыДокументов(ОбработкаОбъект)
	
	Макет = ОбработкаОбъект.ПолучитьМакет("ВидыДокументов");
	
	ОбластьДокументов = Макет.ПолучитьОбласть("Документы");
	ОбластьДокументовВысота = ОбластьДокументов.ВысотаТаблицы;
	
	Для НСтр = 1 По ОбластьДокументовВысота Цикл
		ВидДокумента  = СокрЛП(ОбластьДокументов.Область(НСтр, 1).Текст);
		Название      = СокрЛП(ОбластьДокументов.Область(НСтр, 2).Текст);
		Корреспондент = СокрЛП(ОбластьДокументов.Область(НСтр, 3).Текст);
		Кратко        = СокрЛП(ОбластьДокументов.Область(НСтр, 4).Текст);
			
		Если ВидДокумента = "" Тогда
			Продолжить;
		КонецЕсли;
		
		Если Метаданные.Документы.Найти(ВидДокумента) = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		  
		СтрокаТаблицы = ОбработкаОбъект.ТаблицаДокументов.Добавить();
		СтрокаТаблицы.Пометка        = Истина;
		СтрокаТаблицы.Документ       = ВидДокумента;
		СтрокаТаблицы.Название       = Название;
		СтрокаТаблицы.Корреспондент  = Корреспондент;
		СтрокаТаблицы.ДокументКратко = Кратко;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьВидыДокументов()

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ПараметрыФО = Новый Структура();
	ПараметрыФО.Вставить("Организация", Объект.Организация);
	Если Объект.НачПериода <> Неопределено Тогда
		ПараметрыФО.Вставить("Период", НачалоМесяца(Объект.НачПериода));
		// Приводим к началу месяца для того, чтобы сократить пространство кэшируемых значений.
		// Параметр "Организация" используется в функциональных опциях, привязанных к регистрам сведений с периодичностью Месяц или реже.
	КонецЕсли;
	
	ЭтаФорма.УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
		
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКлиентБанкаПриОткрытии()
	
	Если НЕ ЗначениеЗаполнено(Объект.ФайлВыгрузки) Тогда
		Если Объект.ВыгружатьВXMLФормате Тогда
			РасширениеЭкспорта = "xml";
		Иначе
			РасширениеЭкспорта = "txt";
		КонецЕсли;
		
	КонецЕсли;
	
	#Если НЕ ВебКлиент Тогда
		РабочийКаталогВыгрузки = РаботаСФайламиСлужебныйКлиент.КаталогВыгрузки();
		Если РабочийКаталогВыгрузки = Неопределено Тогда
			РабочийКаталогВыгрузки = "";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ФайлВыгрузки) Тогда 
			Объект.ФайлВыгрузки = РабочийКаталогВыгрузки + "1c_to_kl." + РасширениеЭкспорта;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ФайлЗагрузки) Тогда
			Объект.ФайлЗагрузки = РабочийКаталогВыгрузки + "kl_to_1c." + РасширениеЭкспорта;
		КонецЕсли;	
	#КонецЕсли
	
	Если НЕ ЗначениеЗаполнено(Объект.Кодировка) Тогда
		Объект.Кодировка = Элементы.Кодировка.СписокВыбора[0];
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) И Объект.ТаблицаСчетов.Количество() > 0 Тогда
		Если ВозможностьВыбораФайлов И Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаИмпорт Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ПрочитатьДанныеИзФайла", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементовВыбораФайлов()
	
	Элементы.ФайлВыгрузки.Видимость             = ВозможностьВыбораФайлов;
	Элементы.ФайлЗагрузки.Видимость             = ВозможностьВыбораФайлов;
	
	Элементы.ДокументыКИмпортуОбновить.Видимость = ВозможностьВыбораФайлов;
	
	Если ВозможностьВыбораФайлов Тогда
		Элементы.ГруппаУправлениеЗагрузкой.ТекущаяСтраница = Элементы.ГруппаЗагрузкаТонкийКлиент;
	Иначе
		Элементы.ГруппаУправлениеЗагрузкой.ТекущаяСтраница = Элементы.ГруппаЗагрузкаВебКлиент;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Параметры)

	СтруктураРезультатаВыполнения = Неопределено;
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);

КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено	ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
		
	ПриИзмененииЗначенияОрганизацииНаСервере(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииНаСервере(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если Не СтруктураПараметров.ИзмененаОрганизация И Не СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьФункциональныеОпцииФормы();
		
	ЗаполнитьДокументыНаЭкспорт();
	
	Попытка
		ОбъектОрганизация = Объект.Организация.ПолучитьОбъект();
		НетОбъектаОрганизации = Ложь;
	Исключение
		НетОбъектаОрганизации = Истина;
	КонецПопытки;

	Если НетОбъектаОрганизации ИЛИ Объект.Организация.Пустая() Тогда
		ВыборкаОрганизаций = ПолучитьВыборкуОрганизаций();
		Если ВыборкаОрганизаций.Следующий() Тогда
			Объект.Организация = ВыборкаОрганизаций.Организация;
		КонецЕсли;
	КонецЕсли;

	ЗаполнитьБанковскиеСчета(Объект);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВыборкуОрганизаций() Экспорт
	
	ЗапросПоОрганизациям = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|");
	
	Возврат ЗапросПоОрганизациям.Выполнить().Выбрать();
	
КонецФункции

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Объект.НачПериода	 = РезультатВыбора.НачалоПериода;
	Объект.КонПериода    = РезультатВыбора.КонецПериода;
		
КонецПроцедуры

&НаСервере
Процедура ДокументыНаЭкспортОбновитьНаСервере()
	
	ЗаполнитьДокументыНаЭкспорт();
	
КонецПроцедуры

&НаСервере
Функция СоздатьИЗаписатьНовыйДокументНаСервере(НомерСтрокиТаблицыДокументов)
	
	ТекСтрока = ДокументыНаЭкспорт.НайтиПоИдентификатору(НомерСтрокиТаблицыДокументов);
	
	Если НЕ ЗначениеЗаполнено(ТекСтрока.Документ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйДокумент = ТекСтрока.Документ.Скопировать();
	
	НовыйДокумент.Заполнить(ТекСтрока.Документ);
	НовыйДокумент.Записать();
	
	Возврат НовыйДокумент.Ссылка;
	
КонецФункции

// Открывает для просмотра текстовой документ
//
&НаКлиенте
Процедура ОткрытьФайлДляПросмотра(Элемент, Кодировка, Заголовок) Экспорт
	
	ОбъектПроверки  = Объект[Элемент.Имя];
	ЭлементПривязки = "Объект." + Элемент.Имя;
	Если ПустаяСтрока(ОбъектПроверки) Тогда
		ТекстСоощения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1 не заполнен'"), Заголовок);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		ТекстСоощения
		,, ЭлементПривязки);
		
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ИмяФайла, Кодировка, Заголовок, ЭлементПривязки", Элемент.ТекстРедактирования, Кодировка, Заголовок, ЭлементПривязки);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлДляПросмотраСозданиеФайла", ЭтотОбъект, ДополнительныеПараметры);
	
	Файл = Новый Файл(Элемент.ТекстРедактирования);
	Файл.НачатьИнициализацию(ОписаниеОповещения, ДополнительныеПараметры.ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДляПросмотраСозданиеФайла(Файл, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("Файл", Файл);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлДляПросмотраПроверкаСуществования", ЭтотОбъект, ДополнительныеПараметры);
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДляПросмотраПроверкаСуществования(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		
		ТекстСоощения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1 не обнаружен'"), ДополнительныеПараметры.Заголовок);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		ТекстСоощения
		,, ДополнительныеПараметры.ЭлементПривязки);
		
		Возврат;
		
	КонецЕсли;
	
	Файл = ДополнительныеПараметры.Файл;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлДляПросмотраПроверкаНаКаталог", ЭтотОбъект, ДополнительныеПараметры);
	Файл.НачатьПроверкуЭтоКаталог(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДляПросмотраПроверкаНаКаталог(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если ЭтоКаталог Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1 некорректен - выбран ""каталог"".
		|Выберите %1'"), ДополнительныеПараметры.Заголовок);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		ТекстСообщения
		,, ДополнительныеПараметры.ЭлементПривязки);
		
		Возврат;
		
	КонецЕсли;
	
	ПомещаемыеФайлы = Новый Массив;
	ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ДополнительныеПараметры.ИмяФайла));
	
	ПомещениеФайловЗавершение = Новый ОписаниеОповещения("ОткрытьФайлДляПросмотраЗавешениеПомещения", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПомещениеФайлов(ПомещениеФайловЗавершение, ПомещаемыеФайлы,, Ложь, ЭтотОбъект.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДляПросмотраЗавешениеПомещения(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы <> Неопределено И ПомещенныеФайлы.Количество() > 0 Тогда
		ОписаниеФайлов = ПомещенныеФайлы.Получить(0);
		АдресФайла     = ОписаниеФайлов.Хранение;
		
		Если АдресФайла = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Текст = ТекстовыйДокументИзВременногоХранилищаФайла(АдресФайла, ДополнительныеПараметры.Кодировка);
		Текст.Показать(ДополнительныеПараметры.Заголовок, ДополнительныеПараметры.ИмяФайла);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстовыйДокументИзВременногоХранилищаФайла(АдресФайла, Кодировка) Экспорт
	
	ИмяВременногоФайла  = ПолучитьИмяВременногоФайла("txt");
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
	ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
	Текст = Новый ТекстовыйДокумент();
	Если Кодировка = "DOS" Тогда 
		Кодир = "cp866";        // КодировкаТекста.OEM;
	ИначеЕсли Кодировка = "UTF8" Тогда
		Кодир = "UTF-8";
	Иначе	
		Кодир = "windows-1251"; // КодировкаТекста.ANSI;
	КонецЕсли;
	
	Текст.Прочитать(ИмяВременногоФайла, Кодир);
	УдалитьФайлы(ИмяВременногоФайла); // Удалим временный файл, после его обработки.
	
	Возврат Текст;
	
КонецФункции

&НаКлиенте
Процедура ПослеВводаДокумента(ВыбранныйДокумент, Параметры) Экспорт
	
	Если ВыбранныйДокумент <> Неопределено Тогда
		
		ТекущиеДанные = Элементы.ДокументыКИмпорту.ТекущиеДанные;
		ТекущиеДанные.Документ = ВыбранныйДокумент;
        
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПечатьОтчетаНаСервере(ПолеОтчета, ИмяКолонкиПометки)
	
	Если ИмяКолонкиПометки = "Выгружать" Тогда
		ИсточникТЗ = ДокументыНаЭкспорт.Выгрузить();
	Иначе	
		ИсточникТЗ = ДокументыКИмпорту.Выгрузить();
	КонецЕсли;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.Печать(ПолеОтчета, ИсточникТЗ, ИмяКолонкиПометки);

КонецПроцедуры

&НаСервере
Процедура ЗаписатьОшибкуВЖурнал(ТекстСообщения, ОписаниеОшибки)
	
	ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки);
	
КонецПроцедуры

&НаСервере
Функция ИмяОбработки()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ЧастиИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяФормы, ".");
	Если ЭтоВнешняяОбработка Тогда
		Возврат ОбработкаОбъект.ИспользуемоеИмяФайла;
	Иначе
		Возврат ЧастиИмени[1];
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ИспользоватьВнешнююОбработку()
	
	Если Справочники.ДополнительныеОтчетыИОбработки.ОбработкаКлиентБанк.ВнешнийОбъектИспользовать = 1 Тогда
		Возврат Истина;	
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

////////////// ВЫГРУЗКА //////////////////////////////////////////////////

&НаСервере
Процедура ЗаполнитьДокументыНаЭкспорт() 
		
	РеквизитФормыВЗначение("Объект").ЗаполнитьДокументыНаЭкспорт(ДокументыНаЭкспорт, 
													Объект.НачПериода, 
													Объект.КонПериода, 
													Объект.Организация, 
													Объект.СтруктурноеПодразделение, 
													Объект.ТаблицаСчетов,
													Объект.НастройкаЗаполнения);
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьДокументы()
	
	ДокументыДляВыгрузки = РеквизитФормыВЗначение("ДокументыНаЭкспорт").Скопировать(Новый Структура("Выгружать", Истина));
	Возврат РеквизитФормыВЗначение("Объект").Выгрузить(ДокументыДляВыгрузки, 
									Объект.ВыгружатьВXMLФормате, 
									Объект.Кодировка, 
									Объект.КлиентБанка, 
									Объект.ТаблицаСчетов, 
									Объект.ТаблицаДокументов, 
									Объект.ФайлВыгрузки, 
									Объект.НачПериода, 
									Объект.КонПериода, 
									Объект.Организация, 
									Объект.СтруктурноеПодразделение,
									Объект.НастройкаЗаполнения,
									УникальныйИдентификатор);										
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиенте(ИмяФайла, АдресВоВременномХранилище)
	
	ДополнительныеПараметры = Новый Структура("ИмяФайла, АдресВоВременномХранилище", ИмяФайла, АдресВоВременномХранилище);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеСозданиеФайла", ЭтотОбъект, ДополнительныеПараметры);
	
	Файл = Новый Файл(ИмяФайла);
	Файл.НачатьИнициализацию(ОписаниеОповещения, ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиентеСозданиеФайла(Файл, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("Файл", Файл);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеПроверкаСуществования", ЭтотОбъект, ДополнительныеПараметры);
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиентеПроверкаСуществования(Существует, ДополнительныеПараметры) Экспорт
	
	Файл = ДополнительныеПараметры.Файл;
	ДополнительныеПараметры.Вставить("ФайлСуществует", Существует);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеПроверкаНаКаталог", ЭтотОбъект, ДополнительныеПараметры);
	Если Существует Тогда
		Файл.НачатьПроверкуЭтоКаталог(ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиентеПроверкаНаКаталог(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если Прав(СокрЛП(ДополнительныеПараметры.ИмяФайла), 1) = "\"
		ИЛИ Прав(СокрЛП(ДополнительныеПараметры.ИмяФайла), 1) = "/"
		ИЛИ ЭтоКаталог Тогда
		ТекстСообщения = НСтр("ru = 'Файл данных для выгрузки из 1С:Бухгалтерии для Казахстана не корректен - выбран ""каталог"".
		|Выберите файл выгрузки'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		ТекстСообщения
		,, "Объект.ФайлВыгрузки");
		Возврат;
	КонецЕсли;
	
	ПередаваемыеФайлы = Новый Массив;
	МассивВызовов     = Новый Массив;
	
	
	ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ДополнительныеПараметры.ИмяФайла, ДополнительныеПараметры.АдресВоВременномХранилище);
	ПередаваемыеФайлы.Добавить(ОписаниеФайла);
	
	МассивВызовов.Добавить(Новый Массив);
	
	МассивВызовов[0].Добавить("НачатьПолучениеФайлов");
	МассивВызовов[0].Добавить(ПередаваемыеФайлы);
	МассивВызовов[0].Добавить("");
	МассивВызовов[0].Добавить(Ложь);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучениеФайловЗавершение", ЭтотОбъект, ДополнительныеПараметры);		
	НачатьЗапросРазрешенияПользователя(ОписаниеОповещения, МассивВызовов);		
		
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиентеЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	ТекстЗаголовка = НСтр("ru = 'Данные успешно выгружены в файл'");
	
		#Если НЕ ВебКлиент Тогда
		ПоказатьОповещениеПользователя(
			ТекстЗаголовка, "file:///" + СтрЗаменить(СокрЛП(ДополнительныеПараметры.ИмяФайла), "\", "/"),
			ДополнительныеПараметры.ИмяФайла, Элементы.КнопкаВыгрузить.Картинка);
		#Иначе
		Если НЕ ЗначениеЗаполнено(ПолученныеФайлы) Тогда
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			ТекстЗаголовка,,
			ДополнительныеПараметры.ИмяФайла, Элементы.КнопкаВыгрузить.Картинка);
		#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ПолучениеФайловЗавершение(РазрешенияПолучены, ДополнительныеПараметры) Экспорт
	
	ПередаваемыеФайлы = Новый Массив;
	
	ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ДополнительныеПараметры.ИмяФайла, ДополнительныеПараметры.АдресВоВременномХранилище);
	ПередаваемыеФайлы.Добавить(ОписаниеФайла);
	
	Если РазрешенияПолучены Тогда			
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		НачатьПолучениеФайлов(ОписаниеОповещения, ПередаваемыеФайлы,ДополнительныеПараметры.ИмяФайла, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

////////////// ЗАГРУЗКА //////////////////////////////////////////////////

&НаКлиенте
Процедура ПрочитатьФайл()
	
	ИБФайловая = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	Результат = ЗаполнитьДокументыНаИмпорт(ИБФайловая);
		
	Если Результат.ЗаданиеВыполнено Тогда
		ОповеститьОЗагрузкеДанныхНаКлиенте(Результат.СтруктураДанныхКлиента, "Чтение");
	Иначе
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияЧтениеДокументовКИмпорту", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
		
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьДанныеИзФайла() Экспорт
	
	АдресФайла       = Неопределено;
	
	Если ВозможностьВыбораФайлов Тогда
		// Вариант для установленного расширения для работы с файлами			
		Если НЕ ЗначениеЗаполнено(Объект.ФайлЗагрузки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Нстр("ru = 'Не указан файл данных для загрузки в 1С:Бухгалтерию для Казахстана'")
			,, "Объект.ФайлЗагрузки");
			Возврат;
		КонецЕсли;
		
		ЗагрузитьФайлНаКлиенте(Объект.ФайлЗагрузки);
		
	Иначе	
		
		// Веб клиент без расширения для работы с файлами
		Попытка
			ДополнительныеПараметры  = Новый Структура();
					
			ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			ДиалогВыбора.Заголовок          = НСтр("ru = 'Выберите файл для загрузки данных из банка'");
			ДиалогВыбора.МножественныйВыбор = Ложь;
					
			ОповещениеПомещениеФайла = Новый ОписаниеОповещения("ПомещениеФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			НачатьПомещениеФайла(ОповещениеПомещениеФайла, АдресФайла, ДиалогВыбора, Истина, УникальныйИдентификатор);
		Исключение
			АдресФайла = Неопределено;
			ШаблонСообщения = НСтр("ru = 'При чтении файла данных для загрузки в 1С:Бухгалтерию для Казахстана возникла ошибка:
			|%1'");
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			ОписаниеОшибки = ТекстСообщения + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			ЗаписатьОшибкуВЖурнал(НСтр("ru = 'Клиент банка. Загрузка данных'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()), ОписаниеОшибки);
		КонецПопытки;
		
	КонецЕсли;
	
	
КонецПроцедуры // ПрочитатьДанныеИзФайла

&НаКлиенте
Процедура ЗагрузитьФайлНаКлиенте(ИмяФайла)
	
	ДополнительныеПараметры = Новый Структура("ИмяФайла", ИмяФайла);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьФайлНаКлиентеСозданиеФайла", ЭтотОбъект, ДополнительныеПараметры);
	
	Файл = Новый Файл(ИмяФайла);
	Файл.НачатьИнициализацию(ОписаниеОповещения, ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлНаКлиентеСозданиеФайла(Файл, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("Файл", Файл);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьФайлНаКлиентеПроверкаСуществования",
	ЭтотОбъект, ДополнительныеПараметры);
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлНаКлиентеПроверкаСуществования(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		Файл = ДополнительныеПараметры.Файл;
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьФайлНаКлиентеПроверкаНаКаталог", ЭтотОбъект, ДополнительныеПараметры);
		Файл.НачатьПроверкуЭтоКаталог(ОписаниеОповещения);
	Иначе
		ТекстСообщения = НСтр("ru = 'Файл данных для загрузки в 1С:Бухгалтерию для Казахстана не обнаружен'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		ТекстСообщения
		,, "Объект.ФайлЗагрузки");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлНаКлиентеПроверкаНаКаталог(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если ЭтоКаталог Тогда
		ТекстСообщения = НСтр("ru = 'Файл данных для загрузки документов из банка некорректен - выбран ""каталог"".
		|Выберите файл загрузки'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПомещаемыеФайлы = Новый Массив;
	ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ДополнительныеПараметры.ИмяФайла));
	
	МассивВызовов   = Новый Массив;
	
	МассивВызовов.Добавить(Новый Массив);
	
	МассивВызовов[0].Добавить("НачатьПомещениеФайлов");
	МассивВызовов[0].Добавить(ПомещаемыеФайлы);
	МассивВызовов[0].Добавить("");
	МассивВызовов[0].Добавить(Ложь);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПомещениеФайловЗавершение", ЭтотОбъект, ДополнительныеПараметры);		
	НачатьЗапросРазрешенияПользователя(ОписаниеОповещения, МассивВызовов);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеФайловЗавершение(РазрешенияПолучены, ДополнительныеПараметры) Экспорт
	
	ПомещаемыеФайлы = Новый Массив;
	
	ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ДополнительныеПараметры.ИмяФайла);
	ПомещаемыеФайлы.Добавить(ОписаниеФайла);
	
	Если РазрешенияПолучены Тогда			
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьФайлНаКлиентеЗавершениеПомещения", ЭтотОбъект, ДополнительныеПараметры);
		НачатьПомещениеФайлов(ОписаниеОповещения, ПомещаемыеФайлы,, Ложь, ЭтотОбъект.УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлНаКлиентеЗавершениеПомещения(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы <> Неопределено И ПомещенныеФайлы.Количество() > 0 Тогда
		
		ОписаниеФайла = ПомещенныеФайлы.Получить(0);
		АдресФайла    = ОписаниеФайла.Хранение;
		
		Если АдресФайла = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПрочитатьФайл();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДокументыНаИмпорт(ИБФайловая)
	
 	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
	
	СтекОповещений      = Новый Массив;
	СтруктураПараметров = Новый Структура(
		"ДокументыКИмпорту, 
		|Импорт_РасчетныеСчета, 
		|ФайлЗагрузки, 
		|Кодировка, 
		|Организация, 
		|СтруктурноеПодразделение,
		|ИспользоватьГраницуОбработки, 
		|ДатаГраницыОбработки, 
		|ДвоичныеДанныеФайла, 
		|НастройкаЗаполнения, 
		|СтекОповещений",
		ДокументыКИмпорту.Выгрузить(), 
		Импорт_РасчетныеСчета.Выгрузить(), 
		Объект.ФайлЗагрузки, 
		Объект.Кодировка,
		Объект.Организация, 
		Объект.СтруктурноеПодразделение, 
		Объект.ИспользоватьГраницуОбработки, 
		Объект.ДатаГраницыОбработки, 
		ДвоичныеДанныеФайла, 
		Объект.НастройкаЗаполнения,
		СтекОповещений);
		
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		ОбработкаОбъект.ФоноваяЧтениеДокументовКИмпорту(СтруктураПараметров, АдресХранилища);
		Результат = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		НаименованиеЗадания = НСтр("ru = 'Чтение данных из файла импорта банка-клиента'");
		
		ВыполняемыйМетод = "ДлительныеОперации.ВыполнитьПроцедуруМодуляОбъектаОбработки";
		СтруктураПараметров = Новый Структура("ИмяОбработки,ИмяМетода,ПараметрыВыполнения,ЭтоВнешняяОбработка,ДополнительнаяОбработкаСсылка",
			ИмяОбработки(), "ФоноваяЧтениеДокументовКИмпорту", СтруктураПараметров, ЭтоВнешняяОбработка, ПредопределенноеЗначение("Справочник.ДополнительныеОтчетыИОбработки.ОбработкаКлиентБанк"));
		
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			ВыполняемыйМетод,
			СтруктураПараметров,
			НаименованиеЗадания);
		
		АдресХранилища 			= Результат.АдресХранилища;
		ИдентификаторЗадания 	= Результат.ИдентификаторЗадания;
		
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		Результат.Вставить("СтруктураДанныхКлиента", ЗагрузитьПодготовленныеДанные());
	КонецЕсли;
	
	Возврат Результат;

КонецФункции
	
&НаСервере
Функция ЗагрузитьПодготовленныеДанные()
	
	СтруктураДанныхНаКлиенте = Новый Структура();
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат СтруктураДанныхНаКлиенте;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ДокументыКИмпорту") Тогда
		ДокументыКИмпорту.Загрузить(СтруктураДанных.ДокументыКИмпорту);
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("Импорт_Заголовок") И СтруктураДанных.Импорт_Заголовок <> Неопределено Тогда
		Импорт_Заголовок = СтруктураДанных.Импорт_Заголовок;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("Импорт_РасчетныеСчета") Тогда
		ЗначениеВРеквизитФормы(СтруктураДанных.Импорт_РасчетныеСчета, "Импорт_РасчетныеСчета");
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("СтекОповещений")
		И СтруктураДанных.СтекОповещений.Количество() > 0 Тогда
		СтруктураДанныхНаКлиенте.Вставить("СтекОповещений", СтруктураДанных.СтекОповещений);
	КонецЕсли;
		
	Возврат СтруктураДанныхНаКлиенте;
	
КонецФункции

&НаКлиенте
Процедура ОповеститьОЗагрузкеДанныхНаКлиенте(СтруктураДанныхКлиента, Операция = "Загрузка")
	
	Если СтруктураДанныхКлиента.Свойство("СтекОповещений") Тогда
		Если Операция = "Загрузка" Тогда
			Для каждого Оповещение Из СтруктураДанныхКлиента.СтекОповещений Цикл
				Если Оповещение.Свойство("Текст") Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Оповещение.Текст);
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			Для каждого Сообщение Из СтруктураДанныхКлиента.СтекОповещений Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение.Текст);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДокументыКИмпортуНаКлиенте()
	
	ИБФайловая = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	Результат  = ЗагрузитьДокументыКИмпорту(ИБФайловая);
	
	Если Результат.ЗаданиеВыполнено Тогда
		ОповеститьОЗагрузкеДанныхНаКлиенте(Результат.СтруктураДанныхКлиента);
	Иначе
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияЗагрузкаДокументовКИмпорту", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
		
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьДокументыКИмпорту(ИБФайловая)
	
	СтекОповещений = Новый Массив;
	
	СтруктураПараметров = Новый Структура(
			"ДокументыКИмпорту,
			|ТаблицаКонтрагентов,
			|РеквизитыКонтрагента,
			|Организация,
			|СтруктурноеПодразделение,
			|Импорт_РасчетныеСчета,
			|Импорт_Заголовок,
			|ИспользоватьГраницуОбработки,
			|ДатаГраницыОбработки,
			|НастройкаЗаполнения,
			|СтекОповещений",
			ДокументыКИмпорту.Выгрузить(),
			ДанныеФормыВЗначение(Объект.ТаблицаКонтрагентов, Тип("ДеревоЗначений")),
			РеквизитыКонтрагента.Выгрузить(),
			Объект.Организация,
			Объект.СтруктурноеПодразделение,
			Импорт_РасчетныеСчета.Выгрузить(),
			Импорт_Заголовок,
			Объект.ИспользоватьГраницуОбработки,
			Объект.ДатаГраницыОбработки,
			Объект.НастройкаЗаполнения,
			СтекОповещений);
			
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
			
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		
		ОбработкаОбъект.ФоноваяЗагрузкаДокументовКИмпорту(СтруктураПараметров, АдресХранилища);
				
		Результат = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		НаименованиеЗадания = НСтр("ru = 'Загрузка банковских документов из обработки ""Клиент-банк""'");
		
		ВыполняемыйМетод = "ДлительныеОперации.ВыполнитьПроцедуруМодуляОбъектаОбработки";
		СтруктураПараметров = Новый Структура("ИмяОбработки,ИмяМетода,ПараметрыВыполнения,ЭтоВнешняяОбработка,ДополнительнаяОбработкаСсылка",
			ИмяОбработки(), "ФоноваяЗагрузкаДокументовКИмпорту", СтруктураПараметров, ЭтоВнешняяОбработка, ПредопределенноеЗначение("Справочник.ДополнительныеОтчетыИОбработки.ОбработкаКлиентБанк"));
		
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			ВыполняемыйМетод,
			СтруктураПараметров, 
			НаименованиеЗадания);
		
		АдресХранилища 			= Результат.АдресХранилища;
		ИдентификаторЗадания 	= Результат.ИдентификаторЗадания;
		
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		Результат.Вставить("СтруктураДанныхКлиента", ЗагрузитьПодготовленныеДанные());
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПОДКЛЮЧАЕМЫЕ ОБРАБОТЧИКИ

&НаКлиенте
Процедура Подкючаемый_УстановкаРасширенияРаботыСФайлами()
	
	ОповещениеПриОткрытии = Новый ОписаниеОповещения("УстановкаРасширенияРаботыСФайлами", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОповещениеПриОткрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПрочитатьДанныеИзФайла()
	
	ПрочитатьДанныеИзФайла();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЗАВЕРШЕНИЕ НЕМОДАЛЬНЫХ ВЫЗОВОВ

&НаКлиенте
Процедура УстановкаРасширенияРаботыСФайлами(Результат, ДополнительныеПараметры) Экспорт
	
	ВозможностьВыбораФайлов = Ложь;
	
	НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("УстановкаРасширенияРаботыСФайламиЗавершение", ЭтотОбъект));
		
КонецПроцедуры

&НаКлиенте
Процедура УстановкаРасширенияРаботыСФайламиЗавершение(Подключено, ДополнительныеПараметры1) Экспорт
	
	ВозможностьВыбораФайлов = Подключено;
	
	УстановитьВидимостьЭлементовВыбораФайлов();
	
	НастройкаКлиентБанкаПриОткрытии();

КонецПроцедуры

&НаКлиенте
Процедура ПомещениеФайлаЗавершение(Результат, АдресФайлаПомещенный, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	АдресФайла = АдресФайлаПомещенный;
	
	Если АдресФайла = Неопределено Тогда		
		Возврат;
	КонецЕсли;
	
	// Передаем на сервер
	ПрочитатьФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияЗагрузкаДокументовКИмпорту()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			ОповеститьОЗагрузкеДанныхНаКлиенте(ЗагрузитьПодготовленныеДанные());
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗаданияЗагрузкаДокументовКИмпорту",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияЧтениеДокументовКИмпорту()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			ОповеститьОЗагрузкеДанныхНаКлиенте(ЗагрузитьПодготовленныеДанные(), "Чтение");
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗаданияЧтениеДокументовКИмпорту",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

