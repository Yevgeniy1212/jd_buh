#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ПолучитьНастройкуЗаполнения(НастройкаЗаполнения, ИмяНастройкиЗаполнения) Экспорт
	
	Если ТипЗнч(НастройкаЗаполнения) = Тип("СписокЗначений") Тогда
		Для каждого ЭлементНастроек Из НастройкаЗаполнения Цикл
			Если ЭлементНастроек.Представление = ИмяНастройкиЗаполнения Тогда
				Возврат ЭлементНастроек.Значение;
			КонецЕсли;
		КонецЦикла
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаполнитьДокументыНаЭкспорт(ДокументыНаЭкспорт, 
										НачПериода, 
										КонПериода, 
										Организация, 
										СтруктурноеПодразделение, 
										ТаблицаБанковскихСчетов,
										НастройкаЗаполнения) Экспорт
	
	ДокументыНаЭкспорт.Очистить();
	ДокументыНаЭкспортТЗ = ДокументыНаЭкспорт.Выгрузить();
	
	ПроверятьРНН     = ПолучитьНастройкуЗаполнения(НастройкаЗаполнения, "ПроверятьРНН");
	ПроверятьБИН_ИИН = ПолучитьНастройкуЗаполнения(НастройкаЗаполнения, "ПроверятьБИН_ИИН");
	
	ИмяРеквизитаБИК = Справочники.Банки.ПолучитьИмяРеквизитаБИКБанка(КонПериода);
	
	Если ЗначениеЗаполнено(СтруктурноеПодразделение) Тогда
		СтруктурноеПодразделениеЗапрос = ?(СтруктурноеПодразделение.УказыватьРеквизитыГоловнойОрганизации, "Организация", "СтруктурноеПодразделениеОтправитель");
	Иначе
		СтруктурноеПодразделениеЗапрос = "Организация";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлатежноеПоручениеИсходящее.Ссылка,
	|	ПлатежноеПоручениеИсходящее.Номер,
	|	ПлатежноеПоручениеИсходящее.Проведен,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящее.Проведен
	|			ТОГДА 0
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК СостояниеДокумента,
	|	ПлатежноеПоручениеИсходящее.ДатаВыписки 									КАК Дата,
	|	ПлатежноеПоручениеИсходящее.ДатаВыписки 									КАК ДатаДокумента,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.НазначениеПлатежа КАК СТРОКА(1000)) 	КАК НазначениеПлатежа,
	|	ПлатежноеПоручениеИсходящее.СуммаДокумента                                  КАК СуммаДокумента,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.ТекстПлательщика КАК СТРОКА(1000)) 	КАК ТекстПлательщика,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.ТекстПолучателя КАК СТРОКА(1000)) 		КАК ТекстПолучателя,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее." + СтруктурноеПодразделениеЗапрос + ".НаименованиеПолное КАК СТРОКА(1000)) КАК Организация,
	|	ПлатежноеПоручениеИсходящее." + СтруктурноеПодразделениеЗапрос + ".Наименование,
	|	ПлатежноеПоручениеИсходящее." + СтруктурноеПодразделениеЗапрос + ".РНН 		КАК ОрганизацияРНН,
	|	ПлатежноеПоручениеИсходящее.Организация.КБЕ 								КАК ОрганизацияКБЕ,
	|	ПлатежноеПоручениеИсходящее.Организация.КБЕ 								КАК ПлательщикКБЕ, 
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации 								КАК СчетОрганизации,
	|
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.НомерСчета 						КАК НомерСчетаОрганизации,
	|
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк." + ИмяРеквизитаБИК + " 	КАК ПлательщикБанкБИК,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.Наименование 				КАК ПлательщикБанкНаименование,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.РНН						КАК ПлательщикБанкРНН,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.КоррСчет 					КАК ПлательщикБанкИИК,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.СчетОрганизации.ТекстКорреспондента КАК СТРОКА(1000)) 	КАК ОрганизацияТекстКорреспондента,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.СчетОрганизации.ТекстНазначения КАК СТРОКА(1000)) 		КАК ОрганизацияТекстНазначения,
	|	ПлатежноеПоручениеИсходящее.Контрагент 														КАК ЭлементКонтрагент,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.Контрагент.НаименованиеПолное КАК СТРОКА(1000)) 		КАК Контрагент,
	|	ПлатежноеПоручениеИсходящее.Контрагент.Наименование,
	|	ПлатежноеПоручениеИсходящее.Контрагент.РНН 													КАК КонтрагентРНН,
	|	ПлатежноеПоручениеИсходящее.Контрагент.КБЕ 													КАК КонтрагентКБЕ,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента 												КАК СчетКонтрагента,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.НомерСчета                                      КАК ПолучательИИК,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.НомерСчета 										КАК НомерСчетаКонтрагента,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.Наименование 								КАК ПолучательБанкНаименование,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.РНН 										КАК ПолучательБанкРНН,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк." + ИмяРеквизитаБИК + " 					КАК ПолучательБанкБИК,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.КоррСчет 									КАК ПолучательБанкИИК,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.СчетКонтрагента.ТекстКорреспондента КАК СТРОКА(1000)) 	КАК КонтрагентТекстКорреспондента,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.СчетКонтрагента.ТекстНазначения КАК СТРОКА(1000)) 		КАК КонтрагентТекстНазначения,
	|	ПлатежноеПоручениеИсходящее.СчетБанкаПосредника.Банк.КоррСчет 								КАК БанкПосредникИИК,
	|	ПлатежноеПоручениеИсходящее.СчетБанкаПосредника.Банк." + ИмяРеквизитаБИК + " 				КАК БанкПосредникБИК,
	|	ПлатежноеПоручениеИсходящее.СчетБанкаПосредника.Банк.Наименование 							КАК БанкПосредникБанкНаименование,
	|	ПлатежноеПоручениеИсходящее.СчетБанкаПосредника.НомерСчета 									КАК БанкПосредникНомерСчета,
	|	ПлатежноеПоручениеИсходящее.БанкПосредник.Наименование 										КАК БанкПосредникНаименование,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов)
	|			ИЛИ ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений)
	|			ТОГДА ПлатежноеПоручениеИсходящее.Контрагент.РНН
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ГЦВПРНН,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов)
	|			ИЛИ ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений)
	|			ТОГДА ПлатежноеПоручениеИсходящее.Контрагент.ИдентификационныйКодЛичности
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ГЦВПБИН_ИИН,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов)
	|			ИЛИ ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений)
	|			ТОГДА ПлатежноеПоручениеИсходящее.СчетКонтрагента.НомерСчета
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ГЦВПИИК,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов)
	|			ИЛИ ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений)
	|			ТОГДА ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.Наименование
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ГЦВПБанкНаименование,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов)
	|			ИЛИ ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений)
	|			ТОГДА ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк." + ИмяРеквизитаБИК + "
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ГЦВПБанкБик,
	|	ПлатежноеПоручениеИсходящее.БанкПосредник.РНН 								КАК БанкПосредникРНН,
	|	ПлатежноеПоручениеИсходящее.ДатаПолученияТовара,
	|	ПлатежноеПоручениеИсходящее.КодНазначенияПлатежа,
	|	ПлатежноеПоручениеИсходящее.КодБК,
	|	ПлатежноеПоручениеИсходящее.ДатаВалютирования,
	|	ПлатежноеПоручениеИсходящее.ВидОперации,
	|	ПлатежноеПоручениеИсходящее.ВидОперации 									КАК Операция,
	|	ПлатежноеПоручениеИсходящее." + СтруктурноеПодразделениеЗапрос + ".РНН 		КАК РННПлательщика,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.ТекстПлательщика КАК СТРОКА(1000)) 	КАК ТекстПлательщика1,
	|	ПлатежноеПоручениеИсходящее.Контрагент.РНН									КАК РННПолучателя,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.ТекстПолучателя КАК СТРОКА(1000)) 		КАК ТекстПолучателя1,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов)
	|			ТОГДА 1
	|		ИНАЧЕ &ПустаяСтрока
	|	КОНЕЦ КАК ПенсионныеОтчисления,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений)
	|			ТОГДА 1
	|		ИНАЧЕ &ПустаяСтрока
	|	КОНЕЦ КАК СоциальныеОтчисления,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты)
	|			ТОГДА 1
	|		ИНАЧЕ &ПустаяСтрока
	|	КОНЕЦ КАК ПеречислениеНаКартСчета,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеПоИсполнительнымЛистам)
	|			ТОГДА 1
	|		ИНАЧЕ &ПустаяСтрока
	|	КОНЕЦ КАК ПеречислениеПоИЛ,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику)
	|			ТОГДА 1
	|		ИНАЧЕ &ПустаяСтрока
	|	КОНЕЦ КАК ПеречислениеПодотчетнику,
	|	ПлатежноеПоручениеИсходящее." + СтруктурноеПодразделениеЗапрос + ".ИдентификационныйНомер 	КАК ПлательщикБИН_ИИН,
	|	ПлатежноеПоручениеИсходящее.Контрагент.ИдентификационныйКодЛичности 						КАК КонтрагентБИН_ИИН,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.ИдентификационныйНомер 					КАК ПлательщикБанкБИН_ИИН,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.ИдентификационныйНомер 					КАК ПолучательБанкБИН_ИИН,
	|	ПлатежноеПоручениеИсходящее.СчетБанкаПосредника.Банк.ИдентификационныйНомер 				КАК БанкПосредникБИН_ИИН 
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	|ГДЕ
	|	ПлатежноеПоручениеИсходящее.Дата >= &ДатаНачало
	|	И ПлатежноеПоручениеИсходящее.Дата <= &ДатаОкончание
	|	И ПлатежноеПоручениеИсходящее.ПометкаУдаления = ЛОЖЬ
	|	И ПлатежноеПоручениеИсходящее.Организация = &Организация 
	|	И ПлатежноеПоручениеИсходящее.СтруктурноеПодразделениеОтправитель = &СтруктурноеПодразделение
	|	И ПлатежноеПоручениеИсходящее.СчетОрганизации В (&МассивБанковскихСчетов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПлатежноеПоручениеИсходящее.Дата
	|";
	
	МассивСчетов = Новый Массив;
	
	Для каждого СтрокаСчетов из ТаблицаБанковскихСчетов Цикл
		Если СтрокаСчетов.Пометка Тогда
			МассивСчетов.Добавить(СтрокаСчетов.Счет);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСчетов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросПоДокументам = Новый Запрос(ТекстЗапроса);
	
	ЗапросПоДокументам.УстановитьПараметр("ДатаНачало", 				НачалоДня(НачПериода));
	ЗапросПоДокументам.УстановитьПараметр("ДатаОкончание", 				КонецДня(КонПериода));
	ЗапросПоДокументам.УстановитьПараметр("ПустаяСтрока",				"");
	ЗапросПоДокументам.УстановитьПараметр("СтруктурноеПодразделение", 	СтруктурноеПодразделение);
	ЗапросПоДокументам.УстановитьПараметр("Организация", 				Организация);
	ЗапросПоДокументам.УстановитьПараметр("МассивБанковскихСчетов", 	МассивСчетов);
	
	РезультатЗапроса = ЗапросПоДокументам.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДляЭкспорта = РезультатЗапроса.Выбрать();
		
		СтруктураЗаголовковЭкспорта = СформироватьСтруктуруЗаголовковЭкспорта();
		
		Пока ВыборкаДляЭкспорта.Следующий() Цикл
			
			СтрокаЭкспорта = ДокументыНаЭкспорт.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаЭкспорта, ВыборкаДляЭкспорта);
			
			ЗаполнитьЗначениеЭкспорта(СтрокаЭкспорта, ВыборкаДляЭкспорта);
			
			ПроверитьНаКорректностьИПустоеЗначениеЭкспорта(СтрокаЭкспорта, 
															СтруктураЗаголовковЭкспорта,
															ПроверятьРНН,
															ПроверятьБИН_ИИН, 
															ВыборкаДляЭкспорта.ВидОперации);
		
			СтрокаЭкспорта.Выгружать = ПустаяСтрока(СтрокаЭкспорта.ОписаниеОшибок);
			
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

Функция Выгрузить(ДокументыНаЭкспорт, 
					ВыгружатьВXMLФормате, 
					Кодировка, 
					КлиентБанка, 
					ТаблицаСчетов, 
					ТаблицаДокументов, 
					ФайлВыгрузки, 
					НачПериода, 
					КонПериода, 
					Организация, 
					СтруктурноеПодразделение,
					НастройкаЗаполнения,
					КлючУникальности) Экспорт
	
	Если НЕ ВыгружатьВXMLФормате Тогда
		
		ПотокВыгрузки = Новый ТекстовыйДокумент();
		
		// Формируем заголовок
		ПотокВыгрузки.ДобавитьСтроку("1CClientBankExchange");
		ПотокВыгрузки.ДобавитьСтроку("ВерсияФормата=2.00");
		
		ПотокВыгрузки.ДобавитьСтроку("Кодировка="		 + Кодировка);
		ПотокВыгрузки.ДобавитьСтроку("Отправитель="		 + Метаданные.Синоним);
		ПотокВыгрузки.ДобавитьСтроку("Получатель="		 + КлиентБанка);
		ПотокВыгрузки.ДобавитьСтроку("ДатаСоздания="	 + Формат(ТекущаяДата(),"ДЛФ=Д"));
		ПотокВыгрузки.ДобавитьСтроку("ВремяСоздания="	 + Формат(ТекущаяДата(),"ДЛФ=В"));
		ПотокВыгрузки.ДобавитьСтроку("ДатаНачала="		 + Формат(НачПериода,"ДЛФ=Д"));
		ПотокВыгрузки.ДобавитьСтроку("ДатаКонца="		 + Формат(КонПериода,"ДЛФ=Д"));
		
		Для Каждого Строка Из ТаблицаСчетов Цикл
			Если Строка.Пометка = Истина Тогда
				ПотокВыгрузки.ДобавитьСтроку("РасчСчет=" + Строка.Счет.НомерСчета);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Строка Из ТаблицаДокументов Цикл
			Если Строка.Пометка = Истина Тогда
				ИмяДокумента = СокрЛП(Строка.ДокументКратко);
				ПотокВыгрузки.ДобавитьСтроку("Документ=" + ИмяДокумента);
			КонецЕсли;	
		КонецЦикла;
		
		// выводим отмеченные секции документов
		Для Каждого СтрокаСекции из ДокументыНаЭкспорт Цикл
			
			Если НЕ(СтрокаСекции.Выгружать)Тогда
				Продолжить;
			КонецЕсли;
			
			Буфер = ПолучитьСекциюДокумент(СтрокаСекции, ДокументыНаЭкспорт.Колонки, КонПериода, СтруктурноеПодразделение, Организация, НастройкаЗаполнения);
			
			Если ПустаяСтрока(Буфер) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Документ:%1 не выгружен!'"), СокрЛП(СтрокаСекции.Документ));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецЕсли;
			
			КоличествоСрокСекции = СтрЧислоСтрок(Буфер);
			Для Сч = 1 По КоличествоСрокСекции Цикл
				ПотокВыгрузки.ДобавитьСтроку(СтрПолучитьСтроку(Буфер, Сч));
			КонецЦикла;
			
		КонецЦикла;
		
		// записываем на диск
		ПотокВыгрузки.ДобавитьСтроку("КонецФайла");
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
		
		// Кодировку задаем текстом, иначе бывают проблемы на сервере в Linux и в связке англоязычная Windows + англоязычный SQL
		Если Кодировка = "DOS" Тогда 
			Кодир = "cp866";        // КодировкаТекста.OEM;
		ИначеЕсли Кодировка = "UTF8" Тогда
			Кодир = "UTF-8";
		Иначе	
			Кодир = "windows-1251"; // КодировкаТекста.ANSI;
		КонецЕсли;
		 
		
		ПотокВыгрузки.Записать(ИмяВременногоФайла, Кодир);
	
		//// Отметим те документы которые успешно загрузились
		//Для каждого СтрокаСекции Из ПлатежныеДокументы Цикл
		//	СтрокаСекции.Готовность = ?(СтрокаСекции.Готовность = -2, -1, СтрокаСекции.Готовность);
		//КонецЦикла;
		//
		
		Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла), КлючУникальности);
		
		Возврат Адрес;

	Иначе
		
		ЗаписьXML = Новый ЗаписьXML;
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");

		ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла);
		
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		
		ЗаписьXML.ЗаписатьКомментарий(НСтр("ru = 'Файл выгрузки платежных документов из 1С:Предприятия в Банк-Клиент'"));
		ЗаписьXML.ЗаписатьНачалоЭлемента("XML1CClientBankExchange");
		ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
		
		ЗаписьXML.ЗаписатьАтрибут("ВерсияФормата",	 "2.00");
		ЗаписьXML.ЗаписатьАтрибут("Отправитель",	 СокрЛП(Метаданные.Синоним));
		ЗаписьXML.ЗаписатьАтрибут("Получатель",		 СокрЛП(КлиентБанка));
		
		ТекстВремени = Формат(ТекущаяДата(),"ДЛФ=В");
		Если Найти(ТекстВремени, ":") = 2 Тогда
			ТекстВремени = "0" + ТекстВремени;
		КонецЕсли;
		ТекстЗаписи = ПреобразоватьДату(ТекущаяДата()) + "T" + ТекстВремени;
		
		ЗаписьXML.ЗаписатьАтрибут("ДатаВремяСоздания", ТекстЗаписи);
		ТекстЗаписи = ПреобразоватьДату(НачПериода);
		
		ЗаписьXML.ЗаписатьАтрибут("ДатаНачала", ТекстЗаписи);
		ТекстЗаписи = ПреобразоватьДату(КонПериода);
		
		ЗаписьXML.ЗаписатьАтрибут("ДатаКонца", ТекстЗаписи);
				
		ЗаписьXML.ЗаписатьНачалоЭлемента("РасчетныеСчета");
		Для каждого Строка Из ТаблицаСчетов Цикл
			Если Строка.Пометка = Истина Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента("Счет");
				ЗаписьXML.ЗаписатьТекст(СокрЛП(Строка.Счет.НомерСчета));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ВидыПлатежныхДокументов");
		Для каждого Строка Из ТаблицаДокументов Цикл
			Если Строка.Пометка = Истина Тогда
				ИмяДокумента = СокрЛП(Строка.ДокументКратко);
				ЗаписьXML.ЗаписатьНачалоЭлемента("ВидДокумента");
				ЗаписьXML.ЗаписатьТекст(ИмяДокумента);
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;	
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// выводим отмеченные секции документов
		Для Каждого СтрокаСекции из ДокументыНаЭкспорт Цикл
			Если НЕ(СтрокаСекции.Выгружать)Тогда
				Продолжить;
			КонецЕсли;
	 		ЗаписатьСекциюДокументВXML(ЗаписьXML, СтрокаСекции, ДокументыНаЭкспорт.Колонки, КонПериода, СтруктурноеПодразделение, Организация, НастройкаЗаполнения);
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.Закрыть();
		
		Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла), КлючУникальности);
		
		Возврат Адрес;
		
	КонецЕсли;
	
КонецФункции

Процедура Загрузить(ДокументыКИмпорту,
				  ТаблицаКонтрагентов,
				  РеквизитыКонтрагента,
				  Организация,
				  СтруктурноеПодразделение,
				  Импорт_РасчетныеСчета,
				  Импорт_Заголовок,
				  ИспользоватьГраницуОбработки,
				  ДатаГраницыОбработки,
				  СтруктураНастроек,
				  СтекОповещений) Экспорт
				  
	НачалоИнтервалаЗагрузки = Дата(1,1,1);
	КонецИнтервалаЗагрузки  = Дата(1,1,1);
	
	Результат = ПолучитьДатуИзСтроки(НачалоИнтервалаЗагрузки, Импорт_Заголовок.ДатаНачала);
	
	Если Не ПустаяСтрока(Результат) Тогда
		ТекстСообщения = НСтр("ru = 'В заголовке файла импорта неверно указана дата начала интервала! Файл не может быть загружен!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Результат = ПолучитьДатуИзСтроки(КонецИнтервалаЗагрузки, Импорт_Заголовок.ДатаКонца);
	
	Если НЕ ПустаяСтрока(Результат) Тогда
		ТекстСообщения = Нстр("ru = 'В заголовке файла импорта неверно указана дата окончания интервала!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	//проверка даты документов к импорту - дата должна быть позднее даты границы
	//если дата не соответствует условие, то для документа снимается признак "Загрузить" 
	ПроверитьТаблицуДляЗагрузки(ДокументыКИмпорту, ИспользоватьГраницуОбработки, ДатаГраницыОбработки, СтекОповещений);
	
	ШаблонСообщения = НСтр("ru = 'Платежный документ ""%1"" №%2 от %3 не может быть загружен:'");
	
	// загружаем отмеченные секции документов
	Для Каждого СтрокаСекции из ДокументыКИмпорту Цикл
		
		Если СтрокаСекции.Загрузить Тогда
			
			РезультатПроверки = ПроверитьДокументДляЗагрузки(СтрокаСекции);  
			
			Если ПустаяСтрока(РезультатПроверки) Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаСекции.Документ) Тогда
					// В ИБ не найден документ, необходимо создать новый
					ВидДокумента = ПолучитьВидДокумента(СтрокаСекции.Операция, СтрокаСекции.Списано, СтрокаСекции.Поступило);
					ОбъектДокумента = СоздатьНовыйПлатежныйДокумент(ВидДокумента, СтрокаСекции.НомерДок, СтрокаСекции.ДатаДок);
					
				Иначе
					// В ИБ найден документ, необходимо получить его объект
					ОбъектДокумента = СтрокаСекции.Документ.ПолучитьОбъект();
					Если ОбъектДокумента.РасшифровкаПлатежа.Количество() > 1 Тогда
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаСекции.Операция, СокрЛП(СтрокаСекции.НомерДок), СтрокаСекции.ДатаДок) + Символы.ПС +
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Существующий %1 содержит больше одной строки в расшифровке платежа!'"), ПолучитьПредставлениеОбъекта(ОбъектДокумента));
						СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				
				// При заполнении Организации заполняется СтруктурноеПодразделение
				ЗаполнитьРеквизитПлатежногоДокумента(ОбъектДокумента, СтрокаСекции, "Организация", СтруктураНастроек, Организация, СтруктурноеПодразделение, СтекОповещений);
				ЗаполнитьРеквизитПлатежногоДокумента(ОбъектДокумента, СтрокаСекции, "Контрагент", СтруктураНастроек, Организация, СтруктурноеПодразделение, СтекОповещений);
				
				Для каждого РеквизитДокумента Из ОбъектДокумента.Метаданные().Реквизиты Цикл
					
					Если (РеквизитДокумента.Имя <> "Организация") И (РеквизитДокумента.Имя <> "Контрагент") Тогда
						ЗаполнитьРеквизитПлатежногоДокумента(ОбъектДокумента, СтрокаСекции, РеквизитДокумента.Имя, СтруктураНастроек, Организация, СтруктурноеПодразделение, СтекОповещений);
					КонецЕсли;
					
				КонецЦикла;
				
				Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда   
					СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
			    ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
					СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
			    КонецЕсли;
                            				
				Если НЕ ЗначениеЗаполнено(ОбъектДокумента.Контрагент) 
					ИЛИ НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента) 
					ИЛИ НЕ ЗначениеЗаполнено(СтрокаСекции.СчетКонтрагента) 
				Тогда
					
					СписокНенайденных(РеквизитыКонтрагента, СоздатьСтруктуруЗначенийДокумента(СтрокаСекции, ДокументыКИмпорту.Колонки), ОбъектДокумента,, СтрокаСекции, Организация, СтекОповещений);
					
					ЗаполнитьРеквизитПлатежногоДокумента(ОбъектДокумента, СтрокаСекции, "Контрагент", СтруктураНастроек, Организация, СтруктурноеПодразделение, СтекОповещений);
					ЗаполнитьРеквизитПлатежногоДокумента(ОбъектДокумента, СтрокаСекции, "СчетКонтрагента", СтруктураНастроек, Организация, СтруктурноеПодразделение, СтекОповещений);
				КонецЕсли;
				
				Если ОбъектДокумента.ПометкаУдаления Тогда
					ЗадатьПометкуНаУдаление(ОбъектДокумента, Ложь, СтекОповещений);
				КонецЕсли;
				
				Если ОбъектДокумента.Модифицированность() Тогда   
					ЗаписатьОбъект(ОбъектДокумента, СтрокаСекции, Организация, СтруктураНастроек, СтекОповещений);
				КонецЕсли;
				
				Если НЕ ОбъектДокумента.ЭтоНовый() Тогда
					Если НЕ ЗначениеЗаполнено(СтрокаСекции.Документ) Тогда
						СтрокаСекции.Документ = ОбъектДокумента.Ссылка;
					КонецЕсли;
					    СтрокаСекции.ОписаниеОшибок = "";
 						СтрокаСекции.Готовность = 0;
				КонецЕсли;
				
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаСекции.Операция, СокрЛП(СтрокаСекции.НомерДок), СтрокаСекции.ДатаДок) + Символы.ПС + РезультатПроверки;
				СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	// Платежные поручения исходящие, отсутствующие в списке загруженным помечаем на удаление
	//Составляем список счетов
	
	СписокСчетов = Новый СписокЗначений;
	
	Для каждого СтрокаСчета Из Импорт_РасчетныеСчета Цикл
		СписокСчетов.Добавить(СокрЛП(СтрокаСчета.РасчСчет));
	КонецЦикла;
	
	ДокументыНаУдаление = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                                   |	ПлатежноеПоручениеИсходящее.Ссылка,
	                                   |	ПлатежноеПоручениеИсходящее.ДатаВыписки,
	                                   |	ПлатежноеПоручениеИсходящее.ДатаВходящегоДокумента,
	                                   |	ПлатежноеПоручениеИсходящее.СчетОрганизации.НомерСчета
	                                   |ИЗ
	                                   |	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	                                   |ГДЕ
	                                   |	ВЫБОР
	                                   |		КОГДА ПлатежноеПоручениеИсходящее.ДатаВходящегоДокумента <> &ПустаяДата
	                                   |				ТОГДА ПлатежноеПоручениеИсходящее.ДатаВходящегоДокумента МЕЖДУ &ДатаНач И &ДатаКон
	                                   |			ИНАЧЕ ПлатежноеПоручениеИсходящее.ДатаВыписки МЕЖДУ &ДатаНач И &ДатаКон
	                                   |		КОНЕЦ
									   //|	ПлатежноеПоручениеИсходящее.ДатаВыписки >= &ДатаНач
									   //|	И ПлатежноеПоручениеИсходящее.ДатаВыписки <= &ДатаКон
	                                   |	И ПлатежноеПоручениеИсходящее.СчетОрганизации.НомерСчета В(&НомераСчетов)
									   |    И ПлатежноеПоручениеИсходящее.СтруктурноеПодразделениеОтправитель = &СтруктурноеПодразделение");
	
	ДокументыНаУдаление.УстановитьПараметр("ДатаНач",				   НачалоИнтервалаЗагрузки);
	ДокументыНаУдаление.УстановитьПараметр("ДатаКон",				   КонецИнтервалаЗагрузки);
	ДокументыНаУдаление.УстановитьПараметр("НомераСчетов", 			   СписокСчетов);
	ДокументыНаУдаление.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	ДокументыНаУдаление.УстановитьПараметр("ПустаяДата",               Дата(1, 1, 1));

	ВыборкаДокументов = ДокументыНаУдаление.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		СтрокаВТаблицеИмпорта = ДокументыКИмпорту.Найти(ВыборкаДокументов.Ссылка, "Документ");
		
		Если СтрокаВТаблицеИмпорта = Неопределено Тогда
			ОбъектДокументаКУдаление = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			
			Если ИспользоватьГраницуОбработки Тогда
				Если ЗначениеЗаполнено(ДатаГраницыОбработки) Тогда
					Если НачалоДня(ОбъектДокументаКУдаление.Дата) <= НачалоДня(ДатаГраницыОбработки) Тогда
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаСекции.Операция, СокрЛП(СтрокаСекции.НомерДок), СтрокаСекции.ДатаДок) + Символы.ПС + РезультатПроверки;
						СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ЗадатьПометкуНаУдаление(ОбъектДокументаКУдаление, Истина, СтекОповещений);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Платежные поручения входящие, отсутствующие в списке загруженным помечаем на удаление
	ДокументыНаУдаление = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                                   |	ПлатежноеПоручениеВходящее.Ссылка,
	                                   |	ПлатежноеПоручениеВходящее.ДатаВходящегоДокумента,
	                                   |	ПлатежноеПоручениеВходящее.СчетОрганизации.НомерСчета
	                                   |ИЗ
	                                   |	Документ.ПлатежноеПоручениеВходящее КАК ПлатежноеПоручениеВходящее
	                                   |ГДЕ
	                                   |	ПлатежноеПоручениеВходящее.ДатаВходящегоДокумента >= &ДатаНач
	                                   |	И ПлатежноеПоручениеВходящее.ДатаВходящегоДокумента <= &ДатаКон
	                                   |	И ПлатежноеПоручениеВходящее.СчетОрганизации.НомерСчета В(&НомераСчетов)
									   |    И ПлатежноеПоручениеВходящее.СтруктурноеПодразделениеПолучатель = &СтруктурноеПодразделение");
	
	ДокументыНаУдаление.УстановитьПараметр("ДатаНач",				   НачалоИнтервалаЗагрузки);
	ДокументыНаУдаление.УстановитьПараметр("ДатаКон",				   КонецИнтервалаЗагрузки);
	ДокументыНаУдаление.УстановитьПараметр("НомераСчетов",			   СписокСчетов);
	ДокументыНаУдаление.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);

	ВыборкаДокументов = ДокументыНаУдаление.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		СтрокаВТаблицеИмпорта = ДокументыКИмпорту.Найти(ВыборкаДокументов.Ссылка, "Документ");
		
		Если СтрокаВТаблицеИмпорта = Неопределено Тогда
			ОбъектДокументаКУдаление = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			Если ИспользоватьГраницуОбработки Тогда
				Если ЗначениеЗаполнено(ДатаГраницыОбработки) Тогда
					Если НачалоДня(ОбъектДокументаКУдаление.Дата) <= НачалоДня(ДатаГраницыОбработки) Тогда
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Платежный документ ""%1"" не помечен на удаление, так как имеет дату равной или меньшей границы обработки!'"),
							ОбъектДокументаКУдаление);
						СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ЗадатьПометкуНаУдаление(ОбъектДокументаКУдаление, Истина, СтекОповещений);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//Печать отчета
//
Процедура Печать(ПолеОтчета, Источник, ИмяКолонкиПометки) Экспорт
	
	МакетОтчета = Обработки.КлиентБанк.ПолучитьМакет("Отчет");
	
	Шапка    = МакетОтчета.ПолучитьОбласть("Шапка");
	Строка   = МакетОтчета.ПолучитьОбласть("Строка");
	Подвал   = МакетОтчета.ПолучитьОбласть("Подвал");
	
	ПолеОтчета.Вывести(Шапка);
	
	Индекс=0;
	
	Для Каждого СтрокаИсточника Из Источник Цикл
		Если СтрокаИсточника[ИмяКолонкиПометки] Тогда
			
			Док = СтрокаИсточника.Документ;
			
			Если НЕ ЗначениеЗаполнено(Док) Тогда
				Продолжить;
			КонецЕсли;
			
			Попытка
				ВидДокумента = Док.Метаданные().Имя;
			Исключение
				Продолжить;
			КонецПопытки;
			
			Индекс = Индекс+1;
			
			Строка.Параметры.Плательщик     = СтрокаИсточника.ПлательщикНаименование;
			Строка.Параметры.ПлательщикСчет = СтрокаИсточника.ПлательщикИИК;
			Строка.Параметры.Получатель     = СтрокаИсточника.ПолучательНаименование;
			Строка.Параметры.ПолучательСчет = СтрокаИсточника.ПолучательИИК;
			
			Строка.Параметры.Сумма          = СтрокаИсточника.Сумма;
			Строка.Параметры.Документ       = Док;
			Строка.Параметры.Индекс         = Индекс;
			
			ПолеОтчета.Вывести(Строка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПолеОтчета.Вывести(Подвал);
	
	ПолеОтчета.ОтображатьГруппировки = Ложь;
	ПолеОтчета.ОтображатьЗаголовки = Ложь;
	ПолеОтчета.ОтображатьСетку = Ложь;
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ФОНОВОЕ ВЫПОЛНЕНИЕ

Процедура ФоноваяЧтениеДокументовКИмпорту(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеДляЗаполнения  = Новый Структура;
	
	Импорт_РасчетныеСчета = СтруктураПараметров.Импорт_РасчетныеСчета;
	Импорт_РасчетныеСчета.Очистить();
	
	ДокументыКИмпорту = СтруктураПараметров.ДокументыКИмпорту;
	ДокументыКИмпорту.Очистить();
	
	Сч = 0;
	Строка = СокрЛП(СтруктураПараметров.ФайлЗагрузки);
	Расширение = "";
	Если Не ПустаяСтрока(Строка) Тогда
		Пока True Цикл
			СимволСтроки = Сред(Строка, СтрДлина(Строка)-Сч, 1);
			Если СимволСтроки = "." Тогда
				Прервать;
			Иначе
				Расширение = СимволСтроки + Расширение;
			КонецЕсли;
			Сч = Сч + 1;
			Если Сч > СтрДлина(Строка) Тогда
				Прервать;
			КонецЕсли
		КонецЦикла;
	КонецЕсли;

	ПроверятьРНН	 = ПолучитьНастройкуЗаполнения(СтруктураПараметров.НастройкаЗаполнения, "ПроверятьРНН");
	ПроверятьБИН_ИИН = ПолучитьНастройкуЗаполнения(СтруктураПараметров.НастройкаЗаполнения, "ПроверятьБИН_ИИН");
	
	Импорт_НеПустые  = СформироватьСтруктуруИмпорт_НеПустые(ПроверятьРНН, ПроверятьБИН_ИИН);
	Импорт_Заголовок = Импорт_ЗаголовокСтруктура();
	
	Если Расширение = "xml" Тогда
		ИмяВременногоФайла  = ПолучитьИмяВременногоФайла("xml");
		ДвоичныеДанныеФайла = СтруктураПараметров.ДвоичныеДанныеФайла;
		ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);

		НайденКонецФайла = РазобратьФайлИмпортаXML(ДокументыКИмпорту,
										Импорт_РасчетныеСчета,
										Импорт_НеПустые,
										Импорт_Заголовок,
										ИмяВременногоФайла,
										СтруктураПараметров.Организация,
										СтруктураПараметров.СтруктурноеПодразделение,
										СтруктураПараметров.ИспользоватьГраницуОбработки,
										СтруктураПараметров.ДатаГраницыОбработки,
										СтруктураПараметров.СтекОповещений);
		
	Иначе
		
		ИмяВременногоФайла  = ПолучитьИмяВременногоФайла("txt");
		ДвоичныеДанныеФайла = СтруктураПараметров.ДвоичныеДанныеФайла;
		ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);

		НайденКонецФайла = РазобратьФайлИмпортаTXT(ДокументыКИмпорту,
										Импорт_РасчетныеСчета,
										Импорт_НеПустые,
										Импорт_Заголовок,
										ИмяВременногоФайла,
										СтруктураПараметров.Кодировка,
										СтруктураПараметров.Организация,
										СтруктураПараметров.СтруктурноеПодразделение,
										СтруктураПараметров.ИспользоватьГраницуОбработки,
										СтруктураПараметров.ДатаГраницыОбработки,
										СтруктураПараметров.СтекОповещений);
	КонецЕсли;

	ЕстьОшибкиИмпорта = СтруктураПараметров.ДокументыКИмпорту.НайтиСтроки(Новый Структура("Готовность", 0)).Количество()
						<> СтруктураПараметров.ДокументыКИмпорту.Количество();
	
	ДанныеДляЗаполнения.Вставить("ДокументыКИмпорту",   СтруктураПараметров.ДокументыКИмпорту);
	ДанныеДляЗаполнения.Вставить("Импорт_Заголовок",      Импорт_Заголовок);   
	ДанныеДляЗаполнения.Вставить("Импорт_РасчетныеСчета", СтруктураПараметров.Импорт_РасчетныеСчета);
	ДанныеДляЗаполнения.Вставить("СтекОповещений",        СтруктураПараметров.СтекОповещений);
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения,    АдресХранилища);
	
КонецПроцедуры

Процедура ФоноваяЗагрузкаДокументовКИмпорту(СтруктураПараметров, АдресХранилища) Экспорт
	
	СтруктураНастроек 	= СформироватьСтруктуруНастроекЗаполнения(СтруктураПараметров.НастройкаЗаполнения);
	
	ДанныеДляЗаполнения = Новый Структура;
	
	Загрузить(СтруктураПараметров.ДокументыКИмпорту,
			  СтруктураПараметров.ТаблицаКонтрагентов,
			  СтруктураПараметров.РеквизитыКонтрагента,
			  СтруктураПараметров.Организация,
			  СтруктураПараметров.СтруктурноеПодразделение,
			  СтруктураПараметров.Импорт_РасчетныеСчета,
			  СтруктураПараметров.Импорт_Заголовок,
			  СтруктураПараметров.ИспользоватьГраницуОбработки,
			  СтруктураПараметров.ДатаГраницыОбработки,
			  СтруктураНастроек,
			  СтруктураПараметров.СтекОповещений);
	
	ДанныеДляЗаполнения.Вставить("ДокументыКИмпорту",  СтруктураПараметров.ДокументыКИмпорту);
	ДанныеДляЗаполнения.Вставить("СтекОповещений",     СтруктураПараметров.СтекОповещений);
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция СчетПринадлежитОрганизации(НомерСчета, Организация)
	
	ЗапросПоСчету = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                              |	БанковскиеСчета.Владелец,
	                              |	БанковскиеСчета.НомерСчета,
	                              |	БанковскиеСчета.Ссылка
	                              |ИЗ
	                              |	Справочник.БанковскиеСчета КАК БанковскиеСчета
	                              |ГДЕ
	                              |	БанковскиеСчета.Владелец = &Организация
	                              |	И БанковскиеСчета.НомерСчета = &НомерСчета");
	
	ЗапросПоСчету.УстановитьПараметр("НомерСчета", НомерСчета);
	ЗапросПоСчету.УстановитьПараметр("Организация", Организация);
	
	ВыборкаЗапроса = ЗапросПоСчету.Выполнить().Выбрать();
	
	Возврат ВыборкаЗапроса.Следующий();
	
КонецФункции

// Функция возвращает прочитанный файл обмена
//
Функция ПрочитатьФайл(Файл, Кодировка, СтекОповещений)
	
	ФайлЗагр = Новый Файл(Файл);
	Если НЕ ФайлЗагр.Существует() Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Файла %1 не существует!'"), Файл);
		СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	// Кодировку задаем текстом, иначе бывают проблемы на сервере в Linux и в связке англоязычная Windows + англоязычный SQL
	Если Кодировка = "DOS" Тогда 
		Кодир = "cp866";        // КодировкаТекста.OEM;
	ИначеЕсли Кодировка = "UTF8" Тогда
		Кодир = "UTF-8";
	Иначе	
		Кодир = "windows-1251"; // КодировкаТекста.ANSI;
	КонецЕсли;
	
	Импорт_МассивСтрок = Новый Массив;
	
	Попытка
		
		ПотокЧтения = Новый ЧтениеТекста(Файл, Кодир,,, Ложь);
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Файл не прочитан.'", ОбщегоНазначения.КодОсновногоЯзыка());
		СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	ТекущаяСтрока = ПотокЧтения.ПрочитатьСтроку();
	Пока ТекущаяСтрока <> Неопределено Цикл
		Импорт_МассивСтрок.Добавить(СокрЛП(ТекущаяСтрока));
		ТекущаяСтрока = ПотокЧтения.ПрочитатьСтроку();
	КонецЦикла;
	
	Если Импорт_МассивСтрок.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Файл загрузки не содержит данных!'");
		СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если Импорт_МассивСтрок[0] <> "1CClientBankExchange" Тогда
				
		Импорт_МассивСтрок.Очистить();
		ТекстСообщения = НСтр("ru = 'Указанный файл не является файлом обмена, или неверно указана кодировка!'");
		СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат Импорт_МассивСтрок;
	
КонецФункции // ПрочитатьФайл

Функция СформироватьСтруктуруНастроекЗаполнения(НастройкиЗаполнения)
	
	СтруктураНастроек = Новый Структура();
	
	СтруктураНастроек.Вставить("ППИсх_СчетУчетаРасчетовСКонтрагентом", 	ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ППИсх_СчетУчетаРасчетовСКонтрагентом"));
	СтруктураНастроек.Вставить("ППИсх_СчетУчетаРасчетовПоАвансам",		ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ППИсх_СчетУчетаРасчетовПоАвансам"));
	СтруктураНастроек.Вставить("ППИсх_ЗаполнятьДанныеАвтоматически",	ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ППИсх_ЗаполнятьДанныеАвтоматически"));
	СтруктураНастроек.Вставить("ППИсх_СтатьяДвиженияДенежныхСредств",	ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ППИсх_СтатьяДвиженияДенежныхСредств"));
	СтруктураНастроек.Вставить("ППИсх_УчитыватьКПН",					ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ППИсх_УчитыватьКПН"));
	СтруктураНастроек.Вставить("ППИсх_ПроводитьНовыеДокументы",			ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ППИсх_ПроводитьНовыеДокументы"));
	СтруктураНастроек.Вставить("ППИсх_ВидУчетаНУ",						ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ППИсх_ВидУчетаНУ"));

	СтруктураНастроек.Вставить("ППВх_СчетУчетаРасчетовСКонтрагентом",	ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ППВх_СчетУчетаРасчетовСКонтрагентом"));
	СтруктураНастроек.Вставить("ППВх_СчетУчетаРасчетовПоАвансам",		ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ППВх_СчетУчетаРасчетовПоАвансам"));
	СтруктураНастроек.Вставить("ППВх_ЗаполнятьДанныеАвтоматически",		ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ППВх_ЗаполнятьДанныеАвтоматически"));
	СтруктураНастроек.Вставить("ППВх_СтатьяДвиженияДенежныхСредств",	ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ППВх_СтатьяДвиженияДенежныхСредств"));
	СтруктураНастроек.Вставить("ППВх_УчитыватьКПН",						ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ППВх_УчитыватьКПН"));
	СтруктураНастроек.Вставить("ППВх_ПроводитьНовыеДокументы",			ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ППВх_ПроводитьНовыеДокументы"));
	СтруктураНастроек.Вставить("ППВх_ВидУчетаНУ",						ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ППВх_ВидУчетаНУ"));

	СтруктураНастроек.Вставить("ПОСпис_СчетУчетаРасчетовСКонтрагентом",	ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ПОСпис_СчетУчетаРасчетовСКонтрагентом"));
	СтруктураНастроек.Вставить("ПОСпис_СчетУчетаРасчетовПоАвансам",		ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ПОСпис_СчетУчетаРасчетовПоАвансам"));
	СтруктураНастроек.Вставить("ПОСпис_ЗаполнятьДанныеАвтоматически",	ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ПОСпис_ЗаполнятьДанныеАвтоматически"));
	СтруктураНастроек.Вставить("ПОСпис_СтатьяДвиженияДенежныхСредств",	ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ПОСпис_СтатьяДвиженияДенежныхСредств"));
	СтруктураНастроек.Вставить("ПОСпис_УчитыватьКПН",					ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ПОСпис_УчитыватьКПН"));
	СтруктураНастроек.Вставить("ПОСпис_ПроводитьНовыеДокументы",		ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ПОСпис_ПроводитьНовыеДокументы"));
	СтруктураНастроек.Вставить("ПОСпис_ВидУчетаНУ",						ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ПОСпис_ВидУчетаНУ"));

	СтруктураНастроек.Вставить("ПОПост_СчетУчетаРасчетовСКонтрагентом",	ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ПОПост_СчетУчетаРасчетовСКонтрагентом"));
	СтруктураНастроек.Вставить("ПОПост_СчетУчетаРасчетовПоАвансам",		ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ПОПост_СчетУчетаРасчетовПоАвансам"));
	СтруктураНастроек.Вставить("ПОПост_ЗаполнятьДанныеАвтоматически",	ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ПОПост_ЗаполнятьДанныеАвтоматически"));
	СтруктураНастроек.Вставить("ПОПост_СтатьяДвиженияДенежныхСредств",	ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ПОПост_СтатьяДвиженияДенежныхСредств"));
	СтруктураНастроек.Вставить("ПОПост_УчитыватьКПН",					ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ПОПост_УчитыватьКПН"));
	СтруктураНастроек.Вставить("ПОПост_ПроводитьНовыеДокументы",		ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ПОПост_ПроводитьНовыеДокументы"));
	СтруктураНастроек.Вставить("ПОПост_ВидУчетаНУ",						ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ПОПост_ВидУчетаНУ"));

	Возврат СтруктураНастроек;
	
КонецФункции

////////////// ОБЩИЕ ///////////////////////////////////////////////////////////

Функция ПолучитьТегСекции(СсылкаНаДокумент)
	
	Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
		Возврат "ПлатежноеПоручение";
		
	Иначе
		Возврат "Прочее";
		
	КонецЕсли;
	
КонецФункции

// Функция формирует значение на основании типа переданного значения
//
Функция ПривестиЗначение(Значение) 
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Возврат СокрЛП(Значение);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		Возврат Формат(Значение, "ЧРД=.; ЧРГ=' '; ЧГ=0");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		Возврат Формат(Значение, "ДФ=dd.MM.yyyy");
		
	Иначе
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

Функция ПривестиЗначениеXML(СтруктураДокумента, ИмяРеквизита, НеПреобразовыватьВСтроку)
	
	Значение = СтруктураДокумента[ИмяРеквизита];
	
	НеПреобразовыватьВСтроку = Истина;
	
	Если (ИмяРеквизита = "ДатаДокумента") ИЛИ 
		 (ИмяРеквизита = "ДатаВалютирования") Тогда
		Возврат Значение;
	ИначеЕсли ИмяРеквизита = "Сумма" Тогда
		Возврат СтруктураДокумента["СуммаДокумента"];
	ИначеЕсли ИмяРеквизита = "ПенсионныеОтчисления" Тогда
		Если СокрЛП(Значение) = "1" Тогда
			Возврат Истина;
		Иначе
			Возврат "";
		КонецЕсли;
	ИначеЕсли ИмяРеквизита = "СоциальныеОтчисления" Тогда
		Если СокрЛП(Значение) = "1" Тогда
			Возврат Истина;
		Иначе
			Возврат "";
		КонецЕсли;
	ИначеЕсли ИмяРеквизита = "ПеречислениеНаКартСчета" Тогда
		Если СокрЛП(Значение) = "1" Тогда
			Возврат Истина;
		Иначе
			Возврат "";
		КонецЕсли;
	ИначеЕсли ИмяРеквизита = "ПеречислениеПоИЛ" Тогда
		Если СокрЛП(Значение) = "1" Тогда
			Возврат Истина;
		Иначе
			Возврат "";
		КонецЕсли;
	ИначеЕсли ИмяРеквизита = "ПеречислениеПодотчетнику" Тогда
		Если СокрЛП(Значение) = "1" Тогда
			Возврат Истина;
		Иначе
			Возврат "";
		КонецЕсли;
	Иначе
		НеПреобразовыватьВСтроку = Ложь;
		Возврат ПривестиЗначение(Значение);
	КонецЕсли;
КонецФункции

Процедура ДобавитьВСтроку(Буфер, НоваяСтрока)
	
	Если ПустаяСтрока(Буфер) Тогда
		Буфер = НоваяСтрока;
		
	Иначе
		Буфер = Буфер + Символы.ПС + НоваяСтрока;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЗамечание(СтруктураДокумента, НоваяГотовность, ТекстЗамечания)
	
	УстановитьГотовность(СтруктураДокумента.Готовность, НоваяГотовность);
	ДобавитьВСтроку(СтруктураДокумента.ОписаниеОшибок, ТекстЗамечания);
	
КонецПроцедуры

Процедура УстановитьГотовность(ТекущаяГотовность, НоваяГотовность)
	
	Если ТекущаяГотовность < НоваяГотовность Тогда
		ТекущаяГотовность = НоваяГотовность;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДатуИзСтроки(Приемник, Источник)
	
	Буфер = Источник;
	
	ПозицияТочки = Найти(Буфер, ".");
	
	Если ПозицияТочки = 0 Тогда
		Возврат НСтр("ru = 'Неверный формат строки с датой'");
	КонецЕсли;
	
	ЧислоДаты = Лев(Буфер, ПозицияТочки - 1);
	Буфер = Сред(Буфер, ПозицияТочки + 1);
	
	ПозицияТочки = Найти(Буфер, ".");
	
	Если ПозицияТочки = 0 Тогда
		Возврат НСтр("ru = 'Неверный формат строки с датой'");
	КонецЕсли;
	
	МесяцДаты = Лев(Буфер, ПозицияТочки - 1);
	ГодДаты = Сред(Буфер, ПозицияТочки + 1);
	
	Попытка
		Приемник = Дата(Число(ГодДаты), Число(МесяцДаты), Число(ЧислоДаты));
		
	Исключение
		Возврат НСтр("ru = 'Не удалось преобразовать строку в дату'");
		
	КонецПопытки;
	
	Возврат "";
	
КонецФункции

Функция СоздатьСоответствиеИзСтроки(Знач СтрокаЧерезЗапятую)
	
	НовоеСоответствие = Новый Соответствие;

	ПозицияРазделителя = Найти(СтрокаЧерезЗапятую, ",");
	
	Пока ПозицияРазделителя > 0 Цикл
		ИмяИтема = Лев(СтрокаЧерезЗапятую, ПозицияРазделителя - 1);
		НовоеСоответствие.Вставить(ИмяИтема, Истина);
		СтрокаЧерезЗапятую = Сред(СтрокаЧерезЗапятую, ПозицияРазделителя + 1);
		ПозицияРазделителя = Найти(СтрокаЧерезЗапятую, ",");
		
	КонецЦикла;
	
	Если СтрДлина(СтрокаЧерезЗапятую) > 0 Тогда
		НовоеСоответствие.Вставить(СтрокаЧерезЗапятую, Истина);
		
	КонецЕсли;
		
	Возврат НовоеСоответствие;
	
КонецФункции

Функция ПолучитьСписокОтветственныхЛицОрганизации(Организация, СтруктурноеПодразделение)

	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование КАК Наименование,
	               |	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо.Ссылка КАК ОТВ
	               |ИЗ
	               |	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
	               |			,
	               |			ОтветственноеЛицо.Ссылка = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтерДляПодписиБанковскихДокументов)
	               |				ИЛИ ОтветственноеЛицо.Ссылка = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)) КАК ОтветственныеЛицаОрганизацийСрезПоследних
	               |ГДЕ
	               |	ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница = &СтруктурнаяЕдиница";
				   
	Если ЗначениеЗаполнено(СтруктурноеПодразделение) Тогда
		СтруктурнаяЕдиница = ?(СтруктурноеПодразделение.УказыватьРеквизитыГоловнойОрганизации, Организация, СтруктурноеПодразделение);
	Иначе 
		СтруктурнаяЕдиница = Организация;
	КонецЕсли;
					
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	Запрос.Текст = ТекстЗапроса;

	Результат = Запрос.Выполнить();
	//Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Результат.Выгрузить();

КонецФункции // ()
 
////////////// ПОДОТОВКА ВЫГРУЗКИ //////////////////////////////////////////////////

Функция СформироватьСтруктуруЗаголовковЭкспорта()
	
	СтруктураЗаголовков = Новый Структура;
	
	СтруктураЗаголовков.Вставить("Выгружать"                 , "_");
	СтруктураЗаголовков.Вставить("Готовность"                , НСтр("ru = 'Готовность'"));
	
	СтруктураЗаголовков.Вставить("НомерДокумента"            , НСтр("ru = '№ Документа'"));
	СтруктураЗаголовков.Вставить("ДатаДокумента"             , НСтр("ru = 'Дата'"));
	СтруктураЗаголовков.Вставить("Операция"                  , НСтр("ru = 'Операция'"));
	СтруктураЗаголовков.Вставить("СчетОрганизации"           , НСтр("ru = 'Эл. Р/с организации'"));
	СтруктураЗаголовков.Вставить("НомерСчетаОрганизации"     , НСтр("ru = 'Р/с организации'"));
	СтруктураЗаголовков.Вставить("Сумма"                     , НСтр("ru = 'Сумма'"));
	СтруктураЗаголовков.Вставить("СуммаДокумента"            , НСтр("ru = 'Сумма'"));
	
	СтруктураЗаголовков.Вставить("ПенсионныеОтчисления"      , НСтр("ru = 'Пенсионные отчисления'"));
	СтруктураЗаголовков.Вставить("СоциальныеОтчисления"      , НСтр("ru = 'Социальные отчисления'"));
	СтруктураЗаголовков.Вставить("ПеречислениеНаКартСчета"   , НСтр("ru = 'Заработная плата'"));
	СтруктураЗаголовков.Вставить("ПеречислениеПоИЛ"          , НСтр("ru = 'Перечисление по исполнительным листам'"));
	СтруктураЗаголовков.Вставить("ПеречислениеПодотчетнику"  , НСтр("ru = 'Перечисление подотчетнику'"));
	
	СтруктураЗаголовков.Вставить("Контрагент"                , НСтр("ru = 'Контрагент'"));
	СтруктураЗаголовков.Вставить("ЭлементКонтрагент"         , НСтр("ru = 'Контрагент'"));
	СтруктураЗаголовков.Вставить("СчетКонтрагента"           , НСтр("ru = 'Р/с контрагента'"));
	СтруктураЗаголовков.Вставить("НомерСчетаКонтрагента"     , НСтр("ru = 'Р/с контрагента'"));
	
	СтруктураЗаголовков.Вставить("ПлательщикНаименование"    , НСтр("ru = 'Отправитель'"));
	СтруктураЗаголовков.Вставить("ПлательщикРНН"             , НСтр("ru = 'РНН отправителя'"));
	СтруктураЗаголовков.Вставить("ПлательщикБИН_ИИН"         , НСтр("ru = 'БИН / ИИН отправителя'"));
	СтруктураЗаголовков.Вставить("ПлательщикКБЕ"             , НСтр("ru = 'Кбе отправителя'"));
	СтруктураЗаголовков.Вставить("ПлательщикИИК"             , НСтр("ru = 'Расчетный счет отправителя'"));
	
	СтруктураЗаголовков.Вставить("ПлательщикБанкНаименование", НСтр("ru = 'Наименование банка-отправителя'"));
	СтруктураЗаголовков.Вставить("ПлательщикБанкРНН"         , НСтр("ru = 'РНН банка-отправителя'"));
	СтруктураЗаголовков.Вставить("ПлательщикБанкБИН_ИИН"     , НСтр("ru = 'БИН / ИИН банка-отправителя'"));
	СтруктураЗаголовков.Вставить("ПлательщикБанкБИК"         , НСтр("ru = 'БИК банка-отправителя'"));
	СтруктураЗаголовков.Вставить("ПлательщикБанкИИК"         , НСтр("ru = 'ИИК банка-отправителя'"));
	
	СтруктураЗаголовков.Вставить("ПолучательНаименование"    , НСтр("ru = 'Бенефициар'"));
	СтруктураЗаголовков.Вставить("ПолучательРНН"             , НСтр("ru = 'РНН бенефициара'"));
	СтруктураЗаголовков.Вставить("ПолучательБИН_ИИН"         , НСтр("ru = 'БИН / ИИН бенефициара'"));
	СтруктураЗаголовков.Вставить("ПолучательКБЕ"             , НСтр("ru = 'Кбе бенефициара'"));
	СтруктураЗаголовков.Вставить("ПолучательИИК"             , НСтр("ru = 'ИИК бенефициара'"));
	
	СтруктураЗаголовков.Вставить("ПолучательБанкНаименование", НСтр("ru = 'Наименование банка-получателя'"));
	СтруктураЗаголовков.Вставить("ПолучательБанкРНН"         , НСтр("ru = 'РНН банка-получателя'"));
	СтруктураЗаголовков.Вставить("ПолучательБанкБИН_ИИН"     , НСтр("ru = 'БИН / ИИН банка-получателя'"));
	СтруктураЗаголовков.Вставить("ПолучательБанкБИК"         , НСтр("ru = 'БИК банка-получателя'"));
	СтруктураЗаголовков.Вставить("ПолучательБанкИИК"         , НСтр("ru = 'ИИК банка-получателя'"));
	
	СтруктураЗаголовков.Вставить("БанкПосредникНаименование" , НСтр("ru = 'Наименование банка-посредника'"));
	СтруктураЗаголовков.Вставить("БанкПосредникРНН"          , НСтр("ru = 'РНН банка-посредника'"));
	СтруктураЗаголовков.Вставить("БанкПосредникБИН_ИИН"      , НСтр("ru = 'БИН / ИИН банка-посредника'"));
	СтруктураЗаголовков.Вставить("БанкПосредникБИК"          , НСтр("ru = 'БИК банка-посредника'"));
	СтруктураЗаголовков.Вставить("БанкПосредникИИК"          , НСтр("ru = 'ИИК банка-посредника'"));
	
	СтруктураЗаголовков.Вставить("ГЦВПРНН"                   , НСтр("ru = 'РНН ГЦВП'"));
	СтруктураЗаголовков.Вставить("ГЦВПБИН_ИИН"               , НСтр("ru = 'БИН / ИИН ГЦВП'"));
	
	СтруктураЗаголовков.Вставить("ГЦВПИИК"                   , НСтр("ru = 'Р/с ГЦВП'"));
	СтруктураЗаголовков.Вставить("ГЦВПБанкНаименование"      , НСтр("ru = 'Наименование банка ГЦВП'"));
	СтруктураЗаголовков.Вставить("ГЦВПБанкБИК"               , НСтр("ru = 'БИК банка ГЦВП'"));
	
	СтруктураЗаголовков.Вставить("ДатаПолученияТовара"       , НСтр("ru = 'Дата получения товара'"));
	СтруктураЗаголовков.Вставить("НазначениеПлатежа"         , НСтр("ru = 'Назначение платежа'"));
	
	СтруктураЗаголовков.Вставить("КодНазначенияПлатежа"      , НСтр("ru = 'Код назначения платежа'"));
	СтруктураЗаголовков.Вставить("КодБюджетнойКлассификации" , НСтр("ru = 'Код бюджетной классификации'"));
	СтруктураЗаголовков.Вставить("ДатаВалютирования"         , НСтр("ru = 'Дата валютирования'"));
	
	СтруктураЗаголовков.Вставить("Документ"                  , НСтр("ru = 'Источник'"));
	СтруктураЗаголовков.Вставить("СекцияДокумент"            , НСтр("ru = 'Выгрузка'"));
	
	СтруктураЗаголовков.Вставить("ОписаниеОшибок"            , НСтр("ru = 'Замечания'"));
	СтруктураЗаголовков.Вставить("ТипДокумента"              , НСтр("ru = 'Тип пл. документа'"));
	СтруктураЗаголовков.Вставить("Проведен"                  , "");
	
	СтруктураЗаголовков.Вставить("СостояниеДокумента"        , НСтр("ru = 'Состояние документа'"));
	
	Возврат СтруктураЗаголовков
	
КонецФункции

Процедура ЗаполнитьЗначениеЭкспорта(СтрокаЭкспорта, ВыборкаДляЭкспорта) //+
	
	СтрокаЭкспорта.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаДляЭкспорта.Номер, ВыборкаДляЭкспорта.Ссылка);
	
	СтрокаЭкспорта.Сумма = Формат(ВыборкаДляЭкспорта.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧГ=0");
	
	ТекстПлательщика = СокрЛП(ВыборкаДляЭкспорта["ТекстПлательщика"]);
	Если ПустаяСтрока(ТекстПлательщика) Тогда
		СтрокаЭкспорта.ПлательщикНаименование = СокрЛП(ВыборкаДляЭкспорта["Организация"]);
	Иначе
		СтрокаЭкспорта.ПлательщикНаименование = ТекстПлательщика;
	КонецЕсли;
	
	РННПлательщика = СокрЛП(ВыборкаДляЭкспорта["РННПлательщика"]);
	Если ПустаяСтрока(РННПлательщика) Тогда
		СтрокаЭкспорта.ПлательщикРНН = ВыборкаДляЭкспорта["ОрганизацияРНН"];
	Иначе
		СтрокаЭкспорта.ПлательщикРНН = РННПлательщика;
	КонецЕсли;
		
	СтрокаЭкспорта.ПлательщикИИК = ВыборкаДляЭкспорта["НомерСчетаОрганизации"];
	
	//ПолучательБИН_ИИН
	Если ВыборкаДляЭкспорта.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		Значение = ВыборкаДляЭкспорта.ПлательщикБИН_ИИН;
	Иначе
		Значение = ВыборкаДляЭкспорта["КонтрагентБИН_ИИН"];
	КонецЕсли;
	СтрокаЭкспорта.ПолучательБИН_ИИН = Значение;
	
	//ПолучательНаименование
	ТекстПолучателя = "";
	Если ВыборкаДляЭкспорта.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		ТекстПолучателя = ВыборкаДляЭкспорта.Организация;
	КонецЕсли;
				
	Если ПустаяСтрока(ТекстПолучателя) Тогда
		ТекстПолучателя = СокрЛП(ВыборкаДляЭкспорта["ТекстПолучателя"]);
		Если ПустаяСтрока(ТекстПолучателя) Тогда
			ТекстПолучателя = СокрЛП(ВыборкаДляЭкспорта["Контрагент"]);
		КонецЕсли;
	КонецЕсли;
	СтрокаЭкспорта.ПолучательНаименование  = ТекстПолучателя;
	
	//ПолучательРНН
	Если ВыборкаДляЭкспорта.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		Значение = ВыборкаДляЭкспорта.ОрганизацияРНН;
	Иначе
		Значение = СокрЛП(ВыборкаДляЭкспорта["РННПолучателя"]);
		Если ПустаяСтрока(Значение) Тогда
			Значение = ВыборкаДляЭкспорта["КонтрагентРНН"];
		КонецЕсли;
	КонецЕсли;
	СтрокаЭкспорта.ПолучательРНН = Значение;
	
	//ПолучательКБЕ
	Если ВыборкаДляЭкспорта.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		Значение = ВыборкаДляЭкспорта.ПлательщикКБЕ;
	Иначе
		Значение = ВыборкаДляЭкспорта["КонтрагентКБЕ"];
	КонецЕсли;
	СтрокаЭкспорта.ПолучательКБЕ = Значение;
	
	//КБК
	Если ВыборкаДляЭкспорта.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
		 СтрокаЭкспорта.КодБюджетнойКлассификации = ВыборкаДляЭкспорта.КодБК;
	КонецЕсли;
	
	СтрокаЭкспорта.НазначениеПлатежа = СтрЗаменить(СтрЗаменить(СтрЗаменить(ВыборкаДляЭкспорта.НазначениеПлатежа, Символы.ПС, " "), Символы.ВК, ""), Символы.ПФ, " ");
	
	СтрокаЭкспорта.Документ = ВыборкаДляЭкспорта.Ссылка;
	
	//ТипДокумента
	Если ТипЗнч(ВыборкаДляЭкспорта.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
			
		ПеречислениеНалога = (ВыборкаДляЭкспорта.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога);
		ТипДокумента = ?(ПеречислениеНалога, 1, 0) * 4 + 2 + 1 + 1;
		
	Иначе
		ТипДокумента = 0;
		
	КонецЕсли;
		
	СтрокаЭкспорта.ТипДокумента = ТипДокумента;
	
КонецПроцедуры

Процедура ПроверитьНаКорректностьИПустоеЗначениеЭкспорта(СтрокаЭкспорта, СтруктураЗаголовков, ПроверятьРНН, ПроверятьБИН_ИИН, ВидОперации)
	
	// РеквизитыПлДокЭкс_Основные
	Экспорт_НеПустые = Новый Структура("НомерДокумента, ДатаДокумента, Сумма");
	
	// РеквизитыПлДок_Плательщик
	Экспорт_НеПустые.Вставить("ПлательщикНаименование");
	Экспорт_НеПустые.Вставить("ПлательщикКБЕ");
	Экспорт_НеПустые.Вставить("ПлательщикИИК");
	Если ПроверятьРНН Тогда
		Экспорт_НеПустые.Вставить("ПлательщикРНН");
	КонецЕсли;
	Если ПроверятьБИН_ИИН Тогда
		Экспорт_НеПустые.Вставить("ПлательщикБИН_ИИН");
	КонецЕсли;	
	
	//РеквизитыПлДок_ПлательщикНПР
	Экспорт_НеПустые.Вставить("ПлательщикБанкНаименование");
	Экспорт_НеПустые.Вставить("ПлательщикБанкБИК");
	Если ПроверятьРНН Тогда
		Экспорт_НеПустые.Вставить("ПлательщикБанкРНН");
	КонецЕсли;
	Если ПроверятьБИН_ИИН Тогда
		Экспорт_НеПустые.Вставить("ПлательщикБанкБИН_ИИН");
	КонецЕсли;
	
	// РеквизитыПлДок_Получатель
	Экспорт_НеПустые.Вставить("ПолучательНаименование");
	Экспорт_НеПустые.Вставить("ПолучательКБЕ");
	Экспорт_НеПустые.Вставить("ПолучательИИК");
	Если ПроверятьРНН Тогда
		Экспорт_НеПустые.Вставить("ПолучательРНН");
	КонецЕсли;
	Если ПроверятьБИН_ИИН Тогда
		Экспорт_НеПустые.Вставить("ПолучательБИН_ИИН");
	КонецЕсли;	
	
	//РеквизитыПлДок_ПолучательНПР
	Экспорт_НеПустые.Вставить("ПолучательБанкНаименование");
	Экспорт_НеПустые.Вставить("ПолучательБанкБИК");
	
	//РеквизитыПлДок_Назначение
	Экспорт_НеПустые.Вставить("НазначениеПлатежа");
	
	//РеквизитыПлДок_БюджетПлатеж
	Экспорт_НеПустые.Вставить("КодНазначенияПлатежа");
	 
	Для каждого Свойство Из Экспорт_НеПустые Цикл
		ПроверитьНаПустоеЗначениеЭкспорта(СтрокаЭкспорта, Свойство.Ключ, СтруктураЗаголовков[Свойство.Ключ]);
	КонецЦикла;
		
КонецПроцедуры

Процедура ПроверитьНаПустоеЗначениеЭкспорта(СтрокаЭкспорта, ИмяСвойства, ПредставлениеСвойства)
	
	Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта[ИмяСвойства]) Тогда
		Если ИмяСвойства = "ПолучательБанкРНН" Тогда
			Возврат;
		КонецЕсли;
		ДобавитьЗамечание(СтрокаЭкспорта, 4, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнено ""%1"".'"), ПредставлениеСвойства));
		//УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
	КонецЕсли;
	
КонецПроцедуры

////////////// ВЫГРУЗКА //////////////////////////////////////////////////

Функция ВыделитьСлово(ИсходнаяСтрока, СчетчикВызова) //+
	
	Буфер = СокрЛ(ИсходнаяСтрока);
	ПозицияПослПробела = Найти(Буфер, " ");

	Если (ПозицияПослПробела = 0)
		 Или (СчетчикВызова >= 3) Тогда
		ИсходнаяСтрока = "";
		Возврат Буфер;
	КонецЕсли;
	
	ВыделенноеСлово = СокрЛП(Лев(Буфер, ПозицияПослПробела));
	ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
	
	Возврат ВыделенноеСлово;
	
КонецФункции

Функция ПреобразоватьДату(ПреобразовываемаяДата)
	
	Год = СокрЛП(Формат(Год(ПреобразовываемаяДата), "ЧРД=.; ЧРГ=''; ЧГ=0"));
	Месяц = СокрЛП(Формат(Месяц(ПреобразовываемаяДата), "ЧРД=.; ЧРГ=''; ЧГ=0"));
	День = СокрЛП(Формат(День(ПреобразовываемаяДата), "ЧРД=.; ЧРГ=''; ЧГ=0"));
	
	Если СтрДлина(Месяц) = 1 Тогда
		Месяц = "0" + Месяц;
	КонецЕсли;
	
	Если СтрДлина(День) = 1 Тогда
		День = "0" + День;
	КонецЕсли;
	
	Если СтрДлина(Год) < 4 Тогда
		ДлинаГода = СтрДлина(Год);
		Для Сч = 1 По 4 - ДлинаГода Цикл
			Год = "0" + Год;
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗаписи = Год + "-" + Месяц + "-" + День;
	
	Возврат ТекстЗаписи;
	
КонецФункции

Функция СформироватьСтруктуруЭкспорта_ВыгружаемыеПриПенсИСоцОтчислениях()
	// РеквизитыПлДокЭкс_Основные
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях = Новый Структура("НомерДокумента, ДатаДокумента, Сумма");
	
	// РеквизитыПлДок_СоцПенс
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПенсионныеОтчисления");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("СоциальныеОтчисления");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПеречислениеНаКартСчета");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПеречислениеПоИЛ");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПеречислениеПодотчетнику");
	
	// РеквизитыПлДок_Плательщик
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПлательщикНаименование");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПлательщикКБЕ");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПлательщикИИК");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПлательщикРНН");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПлательщикБИН_ИИН");
		
	//РеквизитыПлДок_ПлательщикНПР
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПлательщикБанкНаименование");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПлательщикБанкБИК");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПлательщикБанкРНН");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПлательщикБанкБИН_ИИН");
		
	// РеквизитыПлДок_Получатель
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПолучательНаименование");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПолучательКБЕ");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПолучательИИК");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПолучательРНН");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПолучательБИН_ИИН");
		
	//РеквизитыПлДок_ПолучательНПР
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПолучательБанкНаименование");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПолучательБанкБИК");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПолучательБанкРНН");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПолучательБанкБИН_ИИН");
	
	//РеквизитыПлДок_Назначение
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("НазначениеПлатежа");
	
	//РеквизитыПлДок_БюджетПлатеж
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("КодНазначенияПлатежа");
	
	//РеквизитыПлДок_НеОбязательные
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПлательщикБанкИИК");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПолучательБанкИИК");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ДатаПолученияТовара");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("КодБюджетнойКлассификации");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ДатаВалютирования");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ВидДокумента");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ДатаОперации");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("СуммаПриход");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("СуммаРасход");

	Возврат Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях;
	
КонецФункции

Функция СформироватьСтруктуруЭкспорта_ВыгружаемыеГЦВП()
	
	//РеквизитыПлДок_ГЦВП
	Экспорт_ВыгружаемыеГЦВП = новый Структура("ГЦВПБанкНаименование, ГЦВПИИК, ГЦВПРНН, ГЦВПБанкБИК");
	
	Возврат Экспорт_ВыгружаемыеГЦВП;
	
КонецФункции	

Функция СформироватьСтруктуруЭкспорта_Выгружаемые()
	
	Экспорт_Выгружаемые = СформироватьСтруктуруЭкспорта_ВыгружаемыеПриПенсИСоцОтчислениях();
	
	//РеквизитыПлДок_БанкПосредник
	Экспорт_Выгружаемые.Вставить("БанкПосредникНаименование");
	Экспорт_Выгружаемые.Вставить("БанкПосредникИИК");
	Экспорт_Выгружаемые.Вставить("БанкПосредникРНН");
	Экспорт_Выгружаемые.Вставить("БанкПосредникБИН_ИИН");
	Экспорт_Выгружаемые.Вставить("БанкПосредникБИК");
	
	Возврат Экспорт_Выгружаемые;
	
КонецФункции	

Функция СформироватьТекстЗапросаПоОПВ()
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ППИОПВ.Документ КАК Документ
	               |ПОМЕСТИТЬ СписокОПВПеречислениеВФонды
	               |ИЗ
	               |	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПенсионныхВзносов КАК ППИОПВ
	               |ГДЕ
	               |	ППИОПВ.Ссылка = &Документ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВЫБОР
	               |		КОГДА ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо ССЫЛКА Справочник.Контрагенты
	               |			ТОГДА ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо.ФизЛицо.Наименование
	               |		ИНАЧЕ ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо.Наименование
	               |	КОНЕЦ КАК Сотрудник,
	               |	ФИОФизЛиц.Фамилия КАК РегистрацияФамилия,
	               |	ФИОФизЛиц.Имя КАК РегистрацияИмя,
	               |	ФИОФизЛиц.Отчество КАК РегистрацияОтчество,
	               |	ДанныеФизЛиц.РНН КАК СотрудникРНН,
	               |	"""" КАК СотрудникСИК,
	               |	ДанныеФизЛиц.ДатаРождения КАК СотрудникДатаРождения,
	               |	ОПВПеречислениеВФондыПенсионныеВзносы.Сумма КАК Сумма,
	               |	ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо.ИдентификационныйКодЛичности КАК СотрудникБИН_ИИН,
	               |	ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка.ПериодРегистрации КАК Период
	               |ИЗ
	               |	Документ.ОПВПеречислениеВФонды.ПенсионныеВзносы КАК ОПВПеречислениеВФондыПенсионныеВзносы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ДанныеФизЛиц
	               |		ПО (ВЫБОР
	               |				КОГДА ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо ССЫЛКА Справочник.Контрагенты
	               |					ТОГДА ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо.ФизЛицо
	               |				ИНАЧЕ ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо
	               |			КОНЕЦ = ДанныеФизЛиц.Ссылка)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ) КАК ФИОФизЛиц
	               |		ПО (ВЫБОР
	               |				КОГДА ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо ССЫЛКА Справочник.Контрагенты
	               |					ТОГДА ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо.ФизЛицо
	               |				ИНАЧЕ ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо
	               |			КОНЕЦ = ФИОФизЛиц.ФизЛицо)
	               |ГДЕ
	               |	ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка В
	               |			(ВЫБРАТЬ
	               |				СписокОПВПеречислениеВФонды.Документ
	               |			ИЗ
	               |				СписокОПВПеречислениеВФонды)";

	Возврат ТекстЗапроса;
	
КонецФункции

Функция СформироватьТекстЗапросаПоСО()
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ППИСО.Документ КАК Документ
	               |ПОМЕСТИТЬ СписокСОПеречислениеВФонды
	               |ИЗ
	               |	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеСоциальныхОтчислений КАК ППИСО
	               |ГДЕ
	               |	ППИСО.Ссылка = &Документ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	ВЫБОР
	               |		КОГДА СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо ССЫЛКА Справочник.Контрагенты
	               |			ТОГДА СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо.ФизЛицо.Наименование
	               |		ИНАЧЕ СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо.Наименование
	               |	КОНЕЦ КАК Сотрудник,	               
				   |	ФИОФизЛицПриПрисвоенииСИК.Фамилия КАК РегистрацияФамилия,
	               |	ФИОФизЛицПриПрисвоенииСИК.Имя КАК РегистрацияИмя,
	               |	ФИОФизЛицПриПрисвоенииСИК.Отчество КАК РегистрацияОтчество,
				   |	ВЫБОР
	               |		КОГДА СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо ССЫЛКА Справочник.Контрагенты
	               |			ТОГДА СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо.ФизЛицо.РНН
	               |		ИНАЧЕ СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо.РНН
	               |	КОНЕЦ КАК СотрудникРНН,
				   |	ВЫБОР
	               |		КОГДА СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо ССЫЛКА Справочник.Контрагенты
	               |			ТОГДА СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо.ФизЛицо.СИК
	               |		ИНАЧЕ СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо.СИК
	               |	КОНЕЦ КАК СотрудникСИК,
	               |	ВЫБОР
	               |		КОГДА СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо ССЫЛКА Справочник.Контрагенты
	               |			ТОГДА СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо.ФизЛицо.ДатаРождения
	               |		ИНАЧЕ СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо.ДатаРождения
	               |	КОНЕЦ КАК СотрудникДатаРождения,
	               |	СОПеречислениеВФондыСоциальныеОтчисления.Сумма КАК Сумма,
				   |	ВЫБОР
	               |		КОГДА СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо ССЫЛКА Справочник.Контрагенты
	               |			ТОГДА СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо.ФизЛицо.ИдентификационныйКодЛичности
	               |		ИНАЧЕ СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо.ИдентификационныйКодЛичности
	               |	КОНЕЦ КАК СотрудникБИН_ИИН,
				   |	ВЫБОР
	               |		КОГДА СОПеречислениеВФондыСоциальныеОтчисления.Ссылка.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС))
	               |			ТОГДА ВЫБОР
	               |					КОГДА СОПеречислениеВФондыСоциальныеОтчисления.МесяцПериода = ДАТАВРЕМЯ(1, 1, 1)
	               |						ТОГДА НАЧАЛОПЕРИОДА(СОПеречислениеВФондыСоциальныеОтчисления.Ссылка.ПериодРегистрации, МЕСЯЦ)
	               |					ИНАЧЕ НАЧАЛОПЕРИОДА(СОПеречислениеВФондыСоциальныеОтчисления.МесяцПериода, МЕСЯЦ)
	               |				КОНЕЦ
	               |		ИНАЧЕ НАЧАЛОПЕРИОДА(СОПеречислениеВФондыСоциальныеОтчисления.Ссылка.ПериодРегистрации, МЕСЯЦ)
	               |	КОНЕЦ КАК Период
	               |ИЗ
	               |	Документ.СОПеречислениеВФонды.СоциальныеОтчисления КАК СОПеречислениеВФондыСоциальныеОтчисления
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛицПриПрисвоенииСИК КАК ФИОФизЛицПриПрисвоенииСИК
	               |		ПО (ВЫБОР
	               |				КОГДА СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо ССЫЛКА Справочник.Контрагенты
	               |					ТОГДА СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо.ФизЛицо = ФИОФизЛицПриПрисвоенииСИК.ФизЛицо
	               |				ИНАЧЕ СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо = ФИОФизЛицПриПрисвоенииСИК.ФизЛицо
	               |			КОНЕЦ)
	               |ГДЕ
	               |	СОПеречислениеВФондыСоциальныеОтчисления.Ссылка В
	               |			(ВЫБРАТЬ
	               |				СписокСОПеречислениеВФонды.Документ
	               |			ИЗ
	               |				СписокСОПеречислениеВФонды)";

	Возврат ТекстЗапроса;
	
КонецФункции

Функция СформироватьТекстЗапросаПоЗП()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость КАК Ведомость
	|ПОМЕСТИТЬ ВТ_СписокЗарплатаКВыплатеОрганизаций
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты
	|ГДЕ
	|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка = &Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо КАК ФизЛицо,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.НомерКартСчета КАК НомерКартСчета,
	|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.СуммаКВыплате) КАК Сумма
	|ПОМЕСТИТЬ ВТ_ЗарплатаКВыплатеОрганизаций
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка В
	|			(ВЫБРАТЬ
	|				СписокЗарплатаКВыплатеОрганизаций.Ведомость
	|			ИЗ
	|				ВТ_СписокЗарплатаКВыплатеОрганизаций КАК СписокЗарплатаКВыплатеОрганизаций)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.НомерКартСчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(КартСчета.НомерСчета, """") КАК СотрудникКартСчет,
	|	ЗарплатаКВыплатеОрганизаций.Сумма КАК Сумма,
	|	ЕСТЬNULL(ФИОФактическихПолучателей.Фамилия, ФИОФизЛиц.Фамилия) КАК Фамилия,
	|	ЕСТЬNULL(ФИОФактическихПолучателей.Имя, ФИОФизЛиц.Имя) КАК Имя,
	|	ЕСТЬNULL(ФИОФактическихПолучателей.Отчество, ФИОФизЛиц.Отчество) КАК Отчество,
	|	ЕСТЬNULL(ФизическиеЛица.Наименование, """") КАК Сотрудник,
	|	ЕСТЬNULL(ФактическиеПолучатели.РНН, ЕСТЬNULL(ФизическиеЛица.РНН, """")) КАК СотрудникРНН,
	|	ЕСТЬNULL(ФактическиеПолучатели.ИдентификационныйКодЛичности, ЕСТЬNULL(ФизическиеЛица.ИдентификационныйКодЛичности, """")) КАК СотрудникБИН_ИИН
	|ИЗ
	|	ВТ_ЗарплатаКВыплатеОрганизаций КАК ЗарплатаКВыплатеОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КартСчета КАК КартСчета
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФактическиеПолучатели
	|			ПО (КартСчета.НеЯвляетсяВладельцемСчета)
	|				И (ФактическиеПолучатели.Ссылка = КартСчета.ФизЛицоВладелецСчета)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ) КАК ФИОФактическихПолучателей
	|			ПО (КартСчета.НеЯвляетсяВладельцемСчета)
	|				И (ФИОФактическихПолучателей.ФизЛицо = КартСчета.ФизЛицоВладелецСчета)
	|		ПО (КартСчета.Ссылка = ЗарплатаКВыплатеОрганизаций.НомерКартСчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО (ФизическиеЛица.Ссылка = ЗарплатаКВыплатеОрганизаций.ФизЛицо)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ) КАК ФИОФизЛиц
	|		ПО ЗарплатаКВыплатеОрганизаций.ФизЛицо = ФИОФизЛиц.ФизЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	Фамилия,
	|	Имя,
	|	Отчество";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СформироватьТекстЗапросаПоИЛ(ИмяРеквизитаБИК)

	ТекстЗапроса = "
	|///////////////////////////////////СписокПеречислениеПоИсполнительнымЛистам//////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ППИИЛ.Документ КАК Документ
	|ПОМЕСТИТЬ СписокПеречислениеПоИсполнительнымЛистам
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПоИсполнительнымЛистам КАК ППИИЛ
	|ГДЕ
	|	ППИИЛ.Ссылка = &Документ
	|;
	|///////////////////////////////////Основная таблица//////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(ИЛПеречислениеПолучателямИсполнительныеЛисты.Получатель.НаименованиеПолное КАК СТРОКА(1000)) 	КАК ПолучательПоИЛФИО,
	|	ИЛПеречислениеПолучателямИсполнительныеЛисты.Получатель.РНН 											КАК ПолучательПоИЛРНН,
	|	ИЛПеречислениеПолучателямИсполнительныеЛисты.СуммаСборов												КАК СуммаСборов,
	|	ИЛПеречислениеПолучателямИсполнительныеЛисты.СуммаВзаиморасчетов										КАК СуммаВзаиморасчетов,
	|	ИЛПеречислениеПолучателямИсполнительныеЛисты.Ссылка.СпособПеречисления 									КАК ПеречислятьЧерез,
	|	ИЛПеречислениеПолучателямИсполнительныеЛисты.Получатель.ОсновнойБанковскийСчет.Банк.Наименование 		КАК БанкНаименвание,
	|	ИЛПеречислениеПолучателямИсполнительныеЛисты.Получатель.ОсновнойБанковскийСчет.Банк." + ИмяРеквизитаБИК + " КАК БанкБИК,
	|	ИЛПеречислениеПолучателямИсполнительныеЛисты.Получатель.ОсновнойБанковскийСчет.НомерСчета 				КАК ПолучательПоИЛИИК,
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(1000)) 											КАК ПолучательПоИЛАдрес,
	|	ИЛПеречислениеПолучателямИсполнительныеЛисты.Получатель.ИдентификационныйКодЛичности 					КАК ПолучательПоИЛБИН_ИИН
	|
	|ИЗ
	|	Документ.ИЛПеречислениеПолучателям.ИсполнительныеЛисты КАК ИЛПеречислениеПолучателямИсполнительныеЛисты	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО ИЛПеречислениеПолучателямИсполнительныеЛисты.Получатель = КонтактнаяИнформация.Объект
	|			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента))
	|
	|ГДЕ 
	|	ИЛПеречислениеПолучателямИсполнительныеЛисты.Ссылка В (ВЫБРАТЬ Документ ИЗ СписокПеречислениеПоИсполнительнымЛистам)";
		
	Возврат ТекстЗапроса;

КонецФункции // ()

Функция СформироватьТекстЗапросаПоПеречислениеПодотчетникам()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ФизическиеЛица.Наименование, """") КАК НаименованиеФизЛица,
	|	ЕСТЬNULL(КартСчета.НомерСчета, """") КАК НомерКартСчета,
	|	ЕСТЬNULL(Банки.Наименование, """") КАК БанкКонтрагента,
	|	ЕСТЬNULL(ФИОФактическихПолучателей.Фамилия, ФИОФизЛиц.Фамилия) КАК Фамилия,
	|	ЕСТЬNULL(ФИОФактическихПолучателей.Имя, ФИОФизЛиц.Имя) КАК Имя,
	|	ЕСТЬNULL(ФИОФактическихПолучателей.Отчество, ФИОФизЛиц.Отчество) КАК Отчество,
	|	ЕСТЬNULL(ФактическиеПолучатели.РНН, ЕСТЬNULL(ФизическиеЛица.РНН, """")) КАК РНН,
	|	ЕСТЬNULL(ФактическиеПолучатели.ИдентификационныйКодЛичности, ЕСТЬNULL(ФизическиеЛица.ИдентификационныйКодЛичности, """")) КАК ПодотчетникБИН_ИИН,
	|	СУММА(ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.СуммаПлатежа) КАК СуммаКПеречислению
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеВПодотчет КАК ПлатежноеПоручениеИсходящееПеречислениеВПодотчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
	|				ПО (Банки.Ссылка = БанковскиеСчета.Банк)
	|			ПО (БанковскиеСчета.Ссылка = ПлатежноеПоручениеИсходящее.СчетКонтрагента)
	|		ПО (ПлатежноеПоручениеИсходящее.Ссылка = ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО (ФизическиеЛица.Ссылка = ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.ФизЛицо)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ) КАК ФИОФизЛиц
	|		ПО (ФИОФизЛиц.ФизЛицо = ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.ФизЛицо)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КартСчета КАК КартСчета
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФактическиеПолучатели
	|			ПО (КартСчета.НеЯвляетсяВладельцемСчета)
	|				И (ФактическиеПолучатели.Ссылка = КартСчета.ФизЛицоВладелецСчета)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ) КАК ФИОФактическихПолучателей
	|			ПО (КартСчета.НеЯвляетсяВладельцемСчета)
	|				И (ФИОФактическихПолучателей.ФизЛицо = КартСчета.ФизЛицоВладелецСчета)
	|		ПО (КартСчета.Ссылка = ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.НомерКартСчета)
	|ГДЕ
	|	ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.Ссылка = &Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ФизическиеЛица.Наименование, """"),
	|	ЕСТЬNULL(КартСчета.НомерСчета, """"),
	|	ЕСТЬNULL(Банки.Наименование, """"),
	|	ЕСТЬNULL(ФИОФактическихПолучателей.Фамилия, ФИОФизЛиц.Фамилия),
	|	ЕСТЬNULL(ФИОФактическихПолучателей.Имя, ФИОФизЛиц.Имя),
	|	ЕСТЬNULL(ФИОФактическихПолучателей.Отчество, ФИОФизЛиц.Отчество),
	|	ЕСТЬNULL(ФактическиеПолучатели.РНН, ЕСТЬNULL(ФизическиеЛица.РНН, """")),
	|	ЕСТЬNULL(ФактическиеПолучатели.ИдентификационныйКодЛичности, ЕСТЬNULL(ФизическиеЛица.ИдентификационныйКодЛичности, """"))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Фамилия,
	|	Имя,
	|	Отчество";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ДобавитьДанныеПоСотрудникам(Буфер, 
									СтруктураДокумента,
									КоллекцияСвойств,
									Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях, 
									Экспорт_ВыгружаемыеГЦВП,
									ПроверятьРНН,
									ПроверятьБИН_ИИН,
									ВидДанных)
	
		Для каждого ВыгружаемыйРеквизит из КоллекцияСвойств Цикл
      		Если Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Свойство(ВыгружаемыйРеквизит.Имя) Тогда
				Значение = ПривестиЗначение(СтруктураДокумента[ВыгружаемыйРеквизит.Имя]);
				Если НЕ ПустаяСтрока(Значение) Тогда
					ДобавитьВСтроку(Буфер, ВыгружаемыйРеквизит.Имя + "=" + Значение);
				КонецЕсли;
			КонецЕсли;			
		КонецЦикла;
		
		ДобавитьВСтроку(Буфер, "СПИСОКСОТРУДНИКОВ");
		
		Если ВидДанных <> "ЗП" Тогда
			Для каждого ВыгружаемыйРеквизит из КоллекцияСвойств Цикл
				Если Экспорт_ВыгружаемыеГЦВП.Свойство(ВыгружаемыйРеквизит.Имя) = Истина Тогда
					
					Значение = ПривестиЗначение(СтруктураДокумента[ВыгружаемыйРеквизит.Имя]);
					
					Если НЕ ПустаяСтрока(Значение) Тогда
						ДобавитьВСтроку(Буфер, ВыгружаемыйРеквизит.Имя + "=" + Значение);
					КонецЕсли;
					
				КонецЕсли;			
			КонецЦикла;	
			
		КонецЕсли;	
		
		Запрос = Новый Запрос;
		
		Если ВидДанных = "ОПВ" Тогда
			ТекстЗапроса = СформироватьТекстЗапросаПоОПВ();
		ИначеЕсли ВидДанных = "СО" Тогда
			ТекстЗапроса = СформироватьТекстЗапросаПоСО();
		Иначе
			ТекстЗапроса = СформироватьТекстЗапросаПоЗП();
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;	
		Запрос.УстановитьПараметр("Документ",СтруктураДокумента.Документ); 
		
		Если ВидДанных = "ЗП" ИЛИ ВидДанных = "ОПВ" Тогда
			Запрос.УстановитьПараметр("Дата", СтруктураДокумента.Документ.Дата);
			
		КонецЕсли;
		
		ОбщаяСумма = 0;
		
		ВыборкаСотрудников = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаСотрудников.Следующий() Цикл
			Если НЕ ПустаяСтрока(ВыборкаСотрудников.Сотрудник) Тогда
				
				Если ВидДанных = "ЗП" Тогда
					Если ПустаяСтрока(ВыборкаСотрудников.СотрудникКартСчет) Тогда
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не указан номер карт-счета сотрудника: %1 %2 %3'"), СокрЛП(ВыборкаСотрудников.Фамилия), СокрЛП(ВыборкаСотрудников.Имя), СокрЛП(ВыборкаСотрудников.Отчество));
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
					КонецЕсли;
				КонецЕсли;

				Если ВидДанных = "ЗП" Тогда
					ДобавитьВСтроку(Буфер, "СОТРУДНИК="+СокрЛП(ВыборкаСотрудников.Фамилия) + " " + СокрЛП(ВыборкаСотрудников.Имя) + " " + СокрЛП(ВыборкаСотрудников.Отчество));
				Иначе	
					ДобавитьВСтроку(Буфер, "СОТРУДНИК="+ВыборкаСотрудников.Сотрудник);
				КонецЕсли;
				
				Если Не ВидДанных = "ЗП" Тогда
					Если НЕ ПустаяСтрока(ВыборкаСотрудников.РегистрацияФамилия) Тогда 
						ДобавитьВСтроку(Буфер, "Регистрация="+СокрЛП(ВыборкаСотрудников.РегистрацияФамилия)+" "+СокрЛП(ВыборкаСотрудников.РегистрацияИмя)+" "+СокрЛП(ВыборкаСотрудников.РегистрацияОтчество));
					Иначе
						ДобавитьВСтроку(Буфер, "Регистрация="+ВыборкаСотрудников.Сотрудник);
					КонецЕсли;
				КонецЕсли;	
				
				Если НЕ ПустаяСтрока(ВыборкаСотрудников.СотрудникРНН) Тогда
					ДобавитьВСтроку(Буфер, "СотрудникРНН="+ВыборкаСотрудников.СотрудникРНН);
				ИначеЕсли ПроверятьРНН Тогда // Проверим стоит ли настройка проверки заполненности РНН
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнен РНН сотрудника: %1'"), ВыборкаСотрудников.Сотрудник);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				
				///////////////////
				Если НЕ ПустаяСтрока(ВыборкаСотрудников.СотрудникБИН_ИИН) Тогда
					ДобавитьВСтроку(Буфер, "СотрудникБИН_ИИН="+ВыборкаСотрудников.СотрудникБИН_ИИН);
				ИначеЕсли ПроверятьБИН_ИИН Тогда // Проверим стоит ли настройка проверки заполненности БИН/ИИН
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнен ИИН сотрудника: %1'"), ВыборкаСотрудников.Сотрудник);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
					
				КонецЕсли;
				////////////////////
				
				Если ВидДанных = "ЗП" Тогда
					ДобавитьВСтроку(Буфер, "СотрудникНомерКартСчета="+ВыборкаСотрудников.СотрудникКартСчет);
					
				Иначе
					Если НЕ ПустаяСтрока(ВыборкаСотрудников.СотрудникСИК) Тогда
						ДобавитьВСтроку(Буфер, "СотрудникСИК="+ВыборкаСотрудников.СотрудникСИК);
					ИначеЕсли ПроверятьРНН Тогда // Проверим стоит ли настройка проверки заполненности РНН
						
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнен СИК сотрудника: %1'"), ВыборкаСотрудников.Сотрудник);
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
						
					КонецЕсли;
					
					Если НЕ ВыборкаСотрудников.СотрудникДатаРождения = Дата(1,1,1) Тогда
						ДобавитьВСтроку(Буфер, "СотрудникДатаРождения=" + Формат(ВыборкаСотрудников.СотрудникДатаРождения, "ДФ=dd.MM.yyyy"));
					Иначе 
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнена дата рождения сотрудника %1'"), ВыборкаСотрудников.Сотрудник);
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
					КонецЕсли;
					
					Если НЕ ВыборкаСотрудников.Период = Дата(1,1,1) Тогда
						ДобавитьВСтроку(Буфер, "Период=" + НРег(Формат(ВыборкаСотрудников.Период, "ДФ='ММгггг'")));
					КонецЕсли;
				КонецЕсли;	
					
				Если НЕ ПустаяСтрока(ВыборкаСотрудников.Сумма) Тогда
					ДобавитьВСтроку(Буфер, "Сумма="+Формат(ВыборкаСотрудников.Сумма, "ЧРД=.; ЧРГ=' '; ЧГ=0; ЧЦ=15; ЧДЦ=2"));
					ОбщаяСумма = ОбщаяСумма + ВыборкаСотрудников.Сумма;
				Иначе
					Если ВидДанных = "ЗП" Тогда
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнена сумма заработной платы сотрудника: %1'"), ВыборкаСотрудников.Сотрудник);
					ИначеЕсли ВидДанных = "ОПВ" Тогда
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнена сумма пенсионных перечислений сотрудника: %1 за %2 г.'"),
							ВыборкаСотрудников.Сотрудник,
							НРег(Формат(ВыборкаСотрудников.Период, "ДФ='ММММ гггг'")));
					Иначе
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнена сумма социальных отчислений сотрудника: %1 за %2 г.'"),
							ВыборкаСотрудников.Сотрудник,
							НРег(Формат(ВыборкаСотрудников.Период, "ДФ='ММММ гггг'")));
					КонецЕсли;
					
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

				КонецЕсли;
				
				ДобавитьВСтроку(Буфер, "КОНЕЦСОТРУДНИК");

			КонецЕсли;
		КонецЦикла;
		
		ДобавитьВСтроку(Буфер, "КОНЕЦСПИСКАСОТРУДНИКОВ");

		Если ВидДанных = "ЗП" Тогда
			Если ОбщаяСумма <> СтруктураДокумента.Документ.СуммаДокумента Тогда
				СуммаКомиссии = СтруктураДокумента.Документ.СуммаДокумента - ОбщаяСумма;
				
				ДобавитьВСтроку(Буфер, "СуммаКомиссииБанка=" + Формат(СуммаКомиссии, "ЧРД=.; ЧРГ=' '; ЧГ=0; ЧЦ=15; ЧДЦ=2"));
				
				Отбор = Новый Структура;
				Отбор.Вставить("Организация", СтруктураДокумента.Документ.Организация);
				Отбор.Вставить("Банк", СтруктураДокумента.Документ.СчетКонтрагента.Банк);
				
				ЗначенияРегистра = РегистрыСведений.КодыОрганизацийВБанковскойСистеме.Получить(Отбор);
				
				Если ЗначенияРегистра <> Неопределено Тогда
					Если Не ПустаяСтрока(ЗначенияРегистра.КодОрганизации) Тогда
						ДобавитьВСтроку(Буфер, "КодОрганизацииВБанковскойСистеме=" + СокрЛП(ЗначенияРегистра.КодОрганизации));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;	
	
КонецПроцедуры	

Процедура ДобавитьДанныеПеречислениеПоИЛ(Буфер, 
									СтруктураДокумента,
									КоллекцияСвойств,
									Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях, 
									КонПериода,
									ПроверятьРНН,
									ПроверятьБИН_ИИН)

	
	Для каждого ВыгружаемыйРеквизит из КоллекцияСвойств Цикл
		Если Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Свойство(ВыгружаемыйРеквизит.Имя) Тогда
			Значение = ПривестиЗначение(СтруктураДокумента[ВыгружаемыйРеквизит.Имя]);
			Если НЕ ПустаяСтрока(Значение) Тогда
				ДобавитьВСтроку(Буфер, ВыгружаемыйРеквизит.Имя + "=" + Значение);
			КонецЕсли;
		КонецЕсли;			
	КонецЦикла;
	
	ДобавитьВСтроку(Буфер, "СПИСОКПОЛУЧАТЕЛЕЙПОИЛ");
	
	ИмяРеквизитаБИК = Справочники.Банки.ПолучитьИмяРеквизитаБИКБанка(КонПериода);
	
	Запрос = Новый Запрос;
	Запрос.Текст = СформироватьТекстЗапросаПоИЛ(ИмяРеквизитаБИК);
	
	Запрос.УстановитьПараметр("Документ",СтруктураДокумента.Документ); 
	Запрос.УстановитьПараметр("Дата",	 СтруктураДокумента.Документ.Дата);
		
	ВыборкаПолучателей = Запрос.Выполнить().Выбрать();
	
	ОбщаяСумма = 0;
	Пока ВыборкаПолучателей.Следующий() Цикл
		Если НЕ ПустаяСтрока(ВыборкаПолучателей.ПолучательПоИЛФИО) Тогда
			
			ДобавитьВСтроку(Буфер, "ПОЛУЧАТЕЛЬПОИЛ="+СокрЛП(ВыборкаПолучателей.ПолучательПоИЛФИО));
			
			Если НЕ ПустаяСтрока(ВыборкаПолучателей.ПолучательПоИЛРНН) Тогда
				ДобавитьВСтроку(Буфер, "ПолучательПоИЛРНН="+ВыборкаПолучателей.ПолучательПоИЛРНН);
			ИначеЕсли ПроверятьРНН Тогда // Проверим стоит ли настройка проверки заполненности РНН
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнен РНН получателя по исполнительным листам: %1'"), СокрЛП(ВыборкаПолучателей.ПолучательПоИЛФИО));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			////////////////////
			Если НЕ ПустаяСтрока(ВыборкаПолучателей.ПолучательПоИЛБИН_ИИН) Тогда
				ДобавитьВСтроку(Буфер, "ПолучательПоИЛБИН_ИИН="+ВыборкаПолучателей.ПолучательПоИЛБИН_ИИН);
			ИначеЕсли ПроверятьБИН_ИИН Тогда // Проверим стоит ли настройка проверки заполненности БИН/ИИН
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнен ИИН получателя по исполнительным листам: %1'"), СокрЛП(ВыборкаПолучателей.ПолучательПоИЛФИО));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			///////////////////
			
			Если ВыборкаПолучателей.ПеречислятьЧерез = Перечисления.СпособыПеречисленияПоИсполнительномуЛисту.ЧерезБанк Тогда
				ДобавитьВСтроку(Буфер, "ПолучательПоИЛБанкНаименование="+ВыборкаПолучателей.БанкНаименвание);
				ДобавитьВСтроку(Буфер, "ПолучательПоИЛБанкБИК="+ВыборкаПолучателей.БанкБИК);
				ДобавитьВСтроку(Буфер, "ПолучательПоИЛИИК="+ВыборкаПолучателей.ПолучательПоИЛИИК);
			Иначе
				ДобавитьВСтроку(Буфер, "ПолучательПоИЛАдрес="+?(ВыборкаПолучателей.ПолучательПоИЛАдрес = NULL, "", СокрЛП(ВыборкаПолучателей.ПолучательПоИЛАдрес)));
				Если ВыборкаПолучателей.ПолучательПоИЛАдрес = NULL Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнен фактический адрес контрагента для пролучателя по ИЛ: %1'"), СокрЛП(ВыборкаПолучателей.ПолучательПоИЛФИО));
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ВыборкаПолучателей.СуммаВзаиморасчетов) Тогда
				ДобавитьВСтроку(Буфер, "Сумма="+Формат(ВыборкаПолучателей.СуммаВзаиморасчетов, "ЧРД=.; ЧРГ=' '; ЧГ=0; ЧЦ=15; ЧДЦ=2"));
				ОбщаяСумма = ОбщаяСумма + ВыборкаПолучателей.СуммаВзаиморасчетов;
			Иначе 
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнена сумма к перечислению по исполнительным листам для получателя: %1'"), СокрЛП(ВыборкаПолучателей.ПолучательПоИЛФИО));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			ДобавитьВСтроку(Буфер, "КОНЕЦПОЛУЧАТЕЛЬПОИЛ");
			
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьВСтроку(Буфер, "КОНЕЦСПИСКАПОЛУЧАТЕЛЕЙПОИЛ");
	
	Если ОбщаяСумма <> СтруктураДокумента.Документ.СуммаДокумента Тогда
		
		СуммаКомиссии = СтруктураДокумента.Документ.СуммаДокумента - ОбщаяСумма;
		
		ДобавитьВСтроку(Буфер, "СуммаКомиссии=" + Формат(СуммаКомиссии, "ЧРД=.; ЧРГ=' '; ЧГ=0; ЧЦ=15; ЧДЦ=2"));
		
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", СтруктураДокумента.Документ.Организация);
		Отбор.Вставить("Банк", СтруктураДокумента.Документ.СчетКонтрагента.Банк);
		
		ЗначенияРегистра = РегистрыСведений.КодыОрганизацийВБанковскойСистеме.Получить(Отбор);
		
		Если ЗначенияРегистра <> Неопределено Тогда
			Если Не ПустаяСтрока(ЗначенияРегистра.КодОрганизации) Тогда
				ДобавитьВСтроку(Буфер, "КодОрганизацииВБанковскойСистеме=" + СокрЛП(ЗначенияРегистра.КодОрганизации));
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьДанныеПеречислениеПодотчетнику(Буфер, 
									СтруктураДокумента,
									КоллекцияСвойств,
									Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях, 
									ПроверятьРНН,
									ПроверятьБИН_ИИН)

	
	Для каждого ВыгружаемыйРеквизит из КоллекцияСвойств Цикл
		Если Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Свойство(ВыгружаемыйРеквизит.Имя) Тогда
			
			Значение = ПривестиЗначение(СтруктураДокумента[ВыгружаемыйРеквизит.Имя]);
			
			Если НЕ ПустаяСтрока(Значение) И НЕ ВыгружаемыйРеквизит.Имя = "ПеречислениеПодотчетнику" Тогда
				ДобавитьВСтроку(Буфер, ВыгружаемыйРеквизит.Имя + "=" + Значение);
			ИначеЕсли НЕ ПустаяСтрока(Значение) И ВыгружаемыйРеквизит.Имя = "ПеречислениеПодотчетнику" Тогда 
				ДобавитьВСтроку(Буфер, "ПеречислениеНаКартСчета" + "=" + Значение);
			КонецЕсли;
		КонецЕсли;			
	КонецЦикла;
	
	ДобавитьВСтроку(Буфер, "СПИСОКСОТРУДНИКОВ");
	
	Запрос = Новый Запрос;
	Запрос.Текст = СформироватьТекстЗапросаПоПеречислениеПодотчетникам();	
	
	Запрос.УстановитьПараметр("Документ", СтруктураДокумента.Документ); 
	Запрос.УстановитьПараметр("Дата", 	  СтруктураДокумента.Документ.Дата);
	
	ВыборкаПодотчетников = Запрос.Выполнить().Выбрать();
	
	ОбщаяСумма = 0;
	
	Пока ВыборкаПодотчетников.Следующий() Цикл
		Если НЕ ПустаяСтрока(ВыборкаПодотчетников.НаименованиеФизЛица) Тогда
			
			ДобавитьВСтроку(Буфер, "СОТРУДНИК="+СокрЛП(ВыборкаПодотчетников.Фамилия) + " " + СокрЛП(ВыборкаПодотчетников.Имя) + " " + СокрЛП(ВыборкаПодотчетников.Отчество));
			
			Если НЕ ПустаяСтрока(ВыборкаПодотчетников.РНН) Тогда
				
				ДобавитьВСтроку(Буфер, "СотрудникРНН="+ВыборкаПодотчетников.РНН);
				
			ИначеЕсли ПроверятьРНН Тогда // Проверим стоит ли настройка проверки заполненности РНН
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнен РНН подотчетника:%1'"), ВыборкаПодотчетников.НаименованиеФизЛица);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

			КонецЕсли;
			
			////////////////////
			Если НЕ ПустаяСтрока(ВыборкаПодотчетников.ПодотчетникБИН_ИИН) Тогда
				ДобавитьВСтроку(Буфер, "СотрудникБИН_ИИН="+ВыборкаПодотчетников.ПодотчетникБИН_ИИН);
			ИначеЕсли ПроверятьБИН_ИИН Тогда // Проверим стоит ли настройка проверки заполненности БИН/ИИН
								
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнен ИИН подотчетника:%1'"), ВыборкаПодотчетников.НаименованиеФизЛица);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			////////////////////				
			
			Если ПустаяСтрока(ВыборкаПодотчетников.НомерКартСчета) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не указан номер карт-счета подотчетника:%1'"), СокрЛП(ВыборкаПодотчетников.НаименованиеФизЛица));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			ДобавитьВСтроку(Буфер, "СотрудникНомерКартСчета="+ВыборкаПодотчетников.НомерКартСчета);
			
			Если НЕ ПустаяСтрока(ВыборкаПодотчетников.СуммаКПеречислению) Тогда
				ДобавитьВСтроку(Буфер, "Сумма="+Формат(ВыборкаПодотчетников.СуммаКПеречислению, "ЧРД=.; ЧРГ=' '; ЧГ=0; ЧЦ=15; ЧДЦ=2"));
				ОбщаяСумма = ОбщаяСумма + ВыборкаПодотчетников.СуммаКПеречислению;
			Иначе 
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнена сумма выдачи в подотчет для подотчетника:%1'"), СокрЛП(ВыборкаПодотчетников.НаименованиеФизЛица));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			ДобавитьВСтроку(Буфер, "КОНЕЦСОТРУДНИК");
			
		КонецЕсли;
	КонецЦикла;
		
	ДобавитьВСтроку(Буфер, "КОНЕЦСПИСКАСОТРУДНИКОВ");
	
	Если ОбщаяСумма <> СтруктураДокумента.Документ.СуммаДокумента Тогда
		СуммаКомиссии = СтруктураДокумента.Документ.СуммаДокумента - ОбщаяСумма;
		
		ДобавитьВСтроку(Буфер, "СуммаКомиссии=" + Формат(СуммаКомиссии, "ЧРД=.; ЧРГ=' '; ЧГ=0; ЧЦ=15; ЧДЦ=2"));
		
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", СтруктураДокумента.Документ.Организация);
		Отбор.Вставить("Банк", СтруктураДокумента.Документ.СчетКонтрагента.Банк);
		
		ЗначенияРегистра = РегистрыСведений.КодыОрганизацийВБанковскойСистеме.Получить(Отбор);
		
		Если ЗначенияРегистра <> Неопределено Тогда
			Если Не ПустаяСтрока(ЗначенияРегистра.КодОрганизации) Тогда
				ДобавитьВСтроку(Буфер, "КодОрганизацииВБанковскойСистеме=" + СокрЛП(ЗначенияРегистра.КодОрганизации));
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
		
	
КонецПроцедуры

Функция ПолучитьСекциюДокумент(СтруктураДокумента, КоллекцияСвойств, КонПериода, СтруктурноеПодразделение, Организация, НастройкаЗапонения)
	
	Буфер = "";      
	
	ПроверятьРНН	 = ПолучитьНастройкуЗаполнения(НастройкаЗапонения, "ПроверятьРНН");
	ПроверятьБИН_ИИН = ПолучитьНастройкуЗаполнения(НастройкаЗапонения, "ПроверятьБИН_ИИН");
	
	ПолныеФИООтветственных = ПолучитьНастройкуЗаполнения(НастройкаЗапонения, "ПолныеФИООтветственных");
	ПолныеФИООтветственных = ?(ПолныеФИООтветственных = Неопределено, Ложь, ПолныеФИООтветственных);
	
	ДобавитьВСтроку(Буфер, "СекцияДокумент=" + ПолучитьТегСекции(СтруктураДокумента.Документ));     
	
	ПенсионныеОтчисления_Есть 	 	= ПривестиЗначение(СтруктураДокумента["ПенсионныеОтчисления"]);
	СоциальныеОтчисления_Есть	 	= ПривестиЗначение(СтруктураДокумента["СоциальныеОтчисления"]);
	ПеречислениеНаКартСчета_Есть 	= ПривестиЗначение(СтруктураДокумента["ПеречислениеНаКартСчета"]);
	ПеречислениеПоИЛ_Есть 		 	= ПривестиЗначение(СтруктураДокумента["ПеречислениеПоИЛ"]);
	ПеречислениеПодотчетнику_Есть	= ПривестиЗначение(СтруктураДокумента["ПеречислениеПодотчетнику"]);
	
	Экспорт_ВыгружаемыеГЦВП 					= СформироватьСтруктуруЭкспорта_ВыгружаемыеГЦВП();
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях	= СформироватьСтруктуруЭкспорта_ВыгружаемыеПриПенсИСоцОтчислениях();
	Экспорт_Выгружаемые							= СформироватьСтруктуруЭкспорта_Выгружаемые();
	
	Если ПенсионныеОтчисления_Есть = "1" Тогда 	
		
		ДобавитьДанныеПоСотрудникам(Буфер, СтруктураДокумента, КоллекцияСвойств, Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях, Экспорт_ВыгружаемыеГЦВП, ПроверятьРНН, ПроверятьБИН_ИИН, "ОПВ");
		
	ИначеЕсли СоциальныеОтчисления_Есть = "1" Тогда 	
		
		ДобавитьДанныеПоСотрудникам(Буфер, СтруктураДокумента, КоллекцияСвойств, Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях, Экспорт_ВыгружаемыеГЦВП, ПроверятьРНН, ПроверятьБИН_ИИН, "СО");
		
	ИначеЕсли ПеречислениеНаКартСчета_Есть = "1" Тогда 	
		
		ДобавитьДанныеПоСотрудникам(Буфер, СтруктураДокумента, КоллекцияСвойств, Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях, Экспорт_ВыгружаемыеГЦВП, ПроверятьРНН, ПроверятьБИН_ИИН, "ЗП");
		
	ИначеЕсли ПеречислениеПоИЛ_Есть = "1" Тогда 	
		
		ДобавитьДанныеПеречислениеПоИЛ(Буфер, СтруктураДокумента, КоллекцияСвойств, Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях, КонПериода, ПроверятьРНН, ПроверятьБИН_ИИН);
		
	ИначеЕсли ПеречислениеПодотчетнику_Есть = "1" Тогда 	
		
		ДобавитьДанныеПеречислениеПодотчетнику(Буфер, СтруктураДокумента, КоллекцияСвойств, Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях, ПроверятьРНН, ПроверятьБИН_ИИН);
		
	Иначе
		Для каждого ВыгружаемыйРеквизит из КоллекцияСвойств Цикл
			
			Если Экспорт_Выгружаемые.Свойство(ВыгружаемыйРеквизит.Имя) = Истина Тогда
				
				Значение = ПривестиЗначение(СтруктураДокумента[ВыгружаемыйРеквизит.Имя]);
				
				Если НЕ ПустаяСтрока(Значение) Тогда
					ДобавитьВСтроку(Буфер, ВыгружаемыйРеквизит.Имя + "=" + Значение);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
			
	КонецЕсли;
	
	ДобавитьВСтроку(Буфер, "Валюта="+СокрЛП(СтруктураДокумента.СчетОрганизации.ВалютаДенежныхСредств.Наименование));
	
	СписокОтветственных = ПолучитьСписокОтветственныхЛицОрганизации(Организация, СтруктурноеПодразделение);
	
	Для Каждого СтрокаОтв Из СписокОтветственных Цикл
		Если СтрокаОтв.Отв = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтерДляПодписиБанковскихДокументов Тогда 
			
			ФИО 	 = СтрокаОтв.Наименование;
			Фамилия  = ВыделитьСлово(ФИО, 1);
            Имя      = ВыделитьСлово(ФИО, 2);
			Отчество = ВыделитьСлово(ФИО, 3);
			
			Если ПолныеФИООтветственных Тогда
	 			ДобавитьВСтроку(Буфер, "ГлавныйБухгалтер="+(СокрЛП(Фамилия) + " " + СокрЛП(Имя) + " " + СокрЛП(Отчество)));
			Иначе
	 			ДобавитьВСтроку(Буфер, "ГлавныйБухгалтер="+(СокрЛП(Фамилия) + " " + Лев(Имя,1) + ". " + Лев(Отчество,1)+ "."));
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаОтв.Отв = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда 
			
			ФИО 	 = СтрокаОтв.Наименование;
			Фамилия  = ВыделитьСлово(ФИО, 1);
            Имя      = ВыделитьСлово(ФИО, 2);
			Отчество = ВыделитьСлово(ФИО, 3);
			
			Если ПолныеФИООтветственных Тогда
	 			ДобавитьВСтроку(Буфер, "Руководитель="+(СокрЛП(Фамилия) + " " + СокрЛП(Имя) + " " + СокрЛП(Отчество)));
			Иначе
	 			ДобавитьВСтроку(Буфер, "Руководитель="+(СокрЛП(Фамилия) + " " + Лев(Имя,1) + ". " + Лев(Отчество,1)+ "."));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	ДобавитьВСтроку(Буфер, "КонецДокумента");
	
	Возврат Буфер;
	
КонецФункции

Процедура ЗаписатьСтруктуруВXML(ЗаписьXML, СтруктураДляЗаписи, ИмяУзла)
	
	ЗаписатьXMLОбъект(ЗаписьXML,ИмяУзла,,1,);
	
	Для Каждого ЭлементСтруктуры Из СтруктураДляЗаписи Цикл
		
		ИмяЭлемента = ЭлементСтруктуры.Ключ;
		Если Найти(ИмяЭлемента, "БанкИИК") > 0 Тогда
			ИмяЭлемента = "КоррСчет";
		КонецЕсли;
		Если Найти(ИмяЭлемента, "ПлательщикБанк") > 0 Тогда
			ИмяЭлемента = СтрЗаменить(ИмяЭлемента,"ПлательщикБанк","");
		КонецЕсли;
		Если Найти(ИмяЭлемента, "Плательщик") > 0 Тогда
			ИмяЭлемента = СтрЗаменить(ИмяЭлемента,"Плательщик","");
		КонецЕсли;
		Если Найти(ИмяЭлемента, "ПолучательБанк") > 0 Тогда
			ИмяЭлемента = СтрЗаменить(ИмяЭлемента,"ПолучательБанк","");
		КонецЕсли;
		Если Найти(ИмяЭлемента, "Получатель") > 0 Тогда
			ИмяЭлемента = СтрЗаменить(ИмяЭлемента,"Получатель","");
		КонецЕсли;
		ЗаписатьXMLОбъект(ЗаписьXML,ИмяЭлемента,ЭлементСтруктуры.Значение,,,);
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ЗаписатьXMLОбъект(ЗаписьXML, ИмяОбъекта, ТекстОбъекта="", НеЗакрывать=0, СписокАтрибутов=Неопределено, НеПриводитьВСтроку=Ложь)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента(СокрЛП(ИмяОбъекта));
	
	Если Не (СписокАтрибутов = Неопределено) Тогда
		Для Каждого Атрибут Из СписокАтрибутов Цикл
			ЗаписьXML.ЗаписатьАтрибут(СокрЛП(Атрибут.Ключ), СокрЛП(Атрибут.Значение));
		КонецЦикла;
	КонецЕсли;
	
	Если НеЗакрывать = 0 Тогда
		
		Если Не НеПриводитьВСтроку Тогда
			ЗаписьXML.ЗаписатьТекст(СокрЛП(ТекстОбъекта));
		Иначе
			Если ТипЗнч(ТекстОбъекта) = Тип("Дата") Тогда
				ТекстЗаписи = ПреобразоватьДату(ТекстОбъекта)
			ИначеЕсли ТипЗнч(ТекстОбъекта) = Тип("Число") Тогда
				ТекстЗаписи = СокрЛП(Формат(ТекстОбъекта, "ЧРД=.; ЧРГ=''; ЧГ=0"));
			ИначеЕсли ТипЗнч(ТекстОбъекта) = Тип("Булево") Тогда
				ТекстЗаписи = ?(ТекстОбъекта=Истина, "true", "false");
			Иначе
				ТекстЗаписи = СокрЛП(ТекстОбъекта);
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьТекст(ТекстЗаписи);
			
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьОбщиеРеквизитыВXML(ЗаписьXML, 
									СтруктураДокумента, 
									КоллекцияСвойств,
									Экспорт_Выгружаемые,
									Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях,
									ПлатежныйДокументБезСписка)
									
	Перем НеПреобразовыватьВСтроку;
	
	СтруктураРеквизитовПлательщика 		= Новый Структура;
	РеквизитПлательщика					= Ложь;
	ЗаписатьРеквизитыПлательщика 		= Ложь;
	
	СтруктураРеквизитовПолучателя 		= Новый Структура;
	РеквизитПолучателя 					= Ложь;
	ЗаписатьРеквизитыПолучателя 		= Ложь;
	
	СтруктураРеквизитовБанкаПлательщика = Новый Структура;
	РеквизитБанкаПлательщика 			= Ложь;
	ЗаписатьРеквизитыБанкаПлательщика 	= Ложь;
	
	СтруктураРеквизитовБанкаПолучателя 	= Новый Структура;
	РеквизитБанкаПолучателя 			= Ложь;
	ЗаписатьРеквизитыБанкаПолучателя 	= Ложь;
	
	РеквизитыПлДок_Плательщик 			= "ПлательщикНаименование,ПлательщикРНН,ПлательщикБИН_ИИН,ПлательщикКБЕ,ПлательщикИИК";
	РеквизитыПлДок_Получатель 			= "ПолучательНаименование,ПолучательРНН,ПолучательБИН_ИИН,ПолучательКБЕ,ПолучательИИК";
	
	//Для каждого ВыгружаемыйРеквизит из СтруктураРеквизитов Цикл
	Для каждого ВыгружаемыйРеквизит из КоллекцияСвойств Цикл	
		ВыгружатьРеквизит = ?(ПлатежныйДокументБезСписка, Экспорт_Выгружаемые.Свойство(ВыгружаемыйРеквизит.Имя), Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Свойство(ВыгружаемыйРеквизит.Имя));
		
		Если ВыгружатьРеквизит = Истина Тогда
			Значение = ПривестиЗначениеXML(СтруктураДокумента, ВыгружаемыйРеквизит.Имя, НеПреобразовыватьВСтроку);
			
			Если НЕ ПустаяСтрока(Значение) Тогда
				// плательщик
				Если Найти(РеквизитыПлДок_Плательщик, ВыгружаемыйРеквизит.Имя) > 0
					////////////////////
					Или (Найти("ПлательщикБИН_ИИН", ВыгружаемыйРеквизит.Имя) > 0) Тогда
					///////////////////
					РеквизитПлательщика = Истина;
					СтруктураРеквизитовПлательщика.Вставить(ВыгружаемыйРеквизит.Имя, Значение);
				Иначе
					Если РеквизитПлательщика Тогда
						ЗаписатьРеквизитыПлательщика = Истина;
						РеквизитПлательщика = Ложь;
					КонецЕсли;
				КонецЕсли;
				Если ЗаписатьРеквизитыПлательщика Тогда
					ЗаписатьРеквизитыПлательщика = Ложь;
					ЗаписатьСтруктуруВXML(ЗаписьXML, СтруктураРеквизитовПлательщика, "Плательщик");
				КонецЕсли;
				
				// банк плательщика
				Если Найти("ПлательщикБанкНаименование,ПлательщикБанкРНН,ПлательщикБанкБИК,ПлательщикБанкБИН_ИИН,ПлательщикБанкИИК", ВыгружаемыйРеквизит.Имя) > 0 Тогда
					РеквизитБанкаПлательщика = Истина;
					СтруктураРеквизитовБанкаПлательщика.Вставить(ВыгружаемыйРеквизит.Имя, Значение);
				Иначе
					Если РеквизитБанкаПлательщика Тогда
						ЗаписатьРеквизитыБанкаПлательщика = Истина;
						РеквизитБанкаПлательщика = Ложь;
					КонецЕсли;
				КонецЕсли;
				Если ЗаписатьРеквизитыБанкаПлательщика Тогда
					ЗаписатьРеквизитыБанкаПлательщика = Ложь;
					ЗаписатьСтруктуруВXML(ЗаписьXML, СтруктураРеквизитовБанкаПлательщика, "БанкПлательщика");
				КонецЕсли;
				
				// получатель
				Если Найти(РеквизитыПлДок_Получатель, ВыгружаемыйРеквизит.Имя) > 0
					////////////////////
					Или (Найти("ПолучательБИН_ИИН", ВыгружаемыйРеквизит.Имя) > 0) Тогда
					///////////////////
					РеквизитПолучателя = Истина;
					СтруктураРеквизитовПолучателя.Вставить(ВыгружаемыйРеквизит.Имя, Значение);
				Иначе
					Если РеквизитПолучателя Тогда
						ЗаписатьРеквизитыПолучателя = Истина;
						РеквизитПолучателя = Ложь;
					КонецЕсли;
				КонецЕсли;
				Если ЗаписатьРеквизитыПолучателя Тогда
					ЗаписатьРеквизитыПолучателя = Ложь;
					ЗаписатьСтруктуруВXML(ЗаписьXML, СтруктураРеквизитовПолучателя, "Получатель");
				КонецЕсли;
				
				// банк получателя
				Если Найти("ПолучательБанкНаименование,ПолучательБанкРНН,ПолучательБанкБИК,ПолучательБанкБИН_ИИН,ПолучательБанкИИК", ВыгружаемыйРеквизит.Имя) > 0 Тогда
					РеквизитБанкаПолучателя = Истина;
					СтруктураРеквизитовБанкаПолучателя.Вставить(ВыгружаемыйРеквизит.Имя, Значение);
				Иначе
					Если РеквизитБанкаПолучателя Тогда
						ЗаписатьРеквизитыБанкаПолучателя = Истина;
						РеквизитБанкаПолучателя = Ложь;
					КонецЕсли;
				КонецЕсли;
				Если ЗаписатьРеквизитыБанкаПолучателя Тогда
					ЗаписатьРеквизитыБанкаПолучателя = Ложь;
					ЗаписатьСтруктуруВXML(ЗаписьXML, СтруктураРеквизитовБанкаПолучателя, "БанкПолучателя");
				КонецЕсли;
				Если (Не РеквизитПлательщика) И (Не РеквизитПолучателя) И (НЕ РеквизитБанкаПлательщика) И (Не РеквизитБанкаПолучателя) Тогда
					
					ИмяРеквизита = "";
					
					Если ВыгружаемыйРеквизит.Имя = "ПеречислениеПодотчетнику" Тогда
						ИмяРеквизита = "ПеречислениеНаКартСчета";
					Иначе
						ИмяРеквизита = ВыгружаемыйРеквизит.Имя; 
					КонецЕсли;

					ЗаписатьXMLОбъект(ЗаписьXML,ИмяРеквизита,Значение,,, НеПреобразовыватьВСтроку);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;			
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьДанныеПоСотрудникам(ЗаписьXML, 
									СтруктураДокумента,
									КоллекцияСвойств,
									Экспорт_Выгружаемые,
									Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях, 
									Экспорт_ВыгружаемыеГЦВП,
									ПроверятьРНН,
									ПроверятьБИН_ИИН,
									НеПреобразовыватьВСтроку,
									ВидДанных)
									
									
	ЗаписатьОбщиеРеквизитыВXML(ЗаписьXML, СтруктураДокумента, КоллекцияСвойств, Экспорт_Выгружаемые, Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях, Ложь);
		
	ЗаписатьXMLОбъект(ЗаписьXML,"СписокСотрудников",,1);
	
	Если ВидДанных <> "ЗП" Тогда
		Для каждого ВыгружаемыйРеквизит из КоллекцияСвойств Цикл
	        Если Экспорт_ВыгружаемыеГЦВП.Свойство(ВыгружаемыйРеквизит.Имя) = Истина Тогда
				
				Значение = ПривестиЗначениеXML(СтруктураДокумента, ВыгружаемыйРеквизит.Имя, НеПреобразовыватьВСтроку);
				
				Если НЕ ПустаяСтрока(Значение) Тогда
					ЗаписатьXMLОбъект(ЗаписьXML, ВыгружаемыйРеквизит.Имя, Значение, , , НеПреобразовыватьВСтроку);
				КонецЕсли;
				
			КонецЕсли;			
		КонецЦикла;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	
	Если ВидДанных = "ОПВ" Тогда
		ТекстЗапроса = СформироватьТекстЗапросаПоОПВ();
	ИначеЕсли ВидДанных = "СО" Тогда
		ТекстЗапроса = СформироватьТекстЗапросаПоСО();
	Иначе
		ТекстЗапроса = СформироватьТекстЗапросаПоЗП();
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Документ",СтруктураДокумента.Документ); 
	Если ВидДанных = "ЗП" ИЛИ ВидДанных = "ОПВ" Тогда
		Запрос.УстановитьПараметр("Дата",СтруктураДокумента.Документ.Дата); 
	КонецЕсли;	
	
	ВыборкаСотрудников = Запрос.Выполнить().Выбрать();
	
	ОбщаяСумма = 0;
	Пока ВыборкаСотрудников.Следующий() Цикл
		Если НЕ ПустаяСтрока(ВыборкаСотрудников.Сотрудник) Тогда
			
			Если ВидДанных = "ЗП" Тогда
				Если ПустаяСтрока(ВыборкаСотрудников.СотрудникКартСчет) Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не указан номер карт-счета сотрудника:%1 %2 %3'"), СокрЛП(ВыборкаСотрудников.Фамилия), СокрЛП(ВыборкаСотрудников.Имя), СокрЛП(ВыборкаСотрудников.Отчество));
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
			
			Если ВидДанных = "ЗП" Тогда
				ЗаписатьXMLОбъект(ЗаписьXML,"Сотрудник",,1, Новый Структура("ФИО", СокрЛП(ВыборкаСотрудников.Фамилия) + " " + СокрЛП(ВыборкаСотрудников.Имя) + " " + СокрЛП(ВыборкаСотрудников.Отчество)));
			Иначе	
				ЗаписатьXMLОбъект(ЗаписьXML,"Сотрудник",,1, Новый Структура("ФИО", ВыборкаСотрудников.Сотрудник));
			КонецЕсли;	
			
			Если ВидДанных <> "ЗП" Тогда
				Если НЕ ПустаяСтрока(ВыборкаСотрудников.РегистрацияФамилия) Тогда 
					ЗаписатьXMLОбъект(ЗаписьXML,"Регистрация",СокрЛП(ВыборкаСотрудников.РегистрацияФамилия)+" "+СокрЛП(ВыборкаСотрудников.РегистрацияИмя)+" "+СокрЛП(ВыборкаСотрудников.РегистрацияОтчество));
				Иначе
					ЗаписатьXMLОбъект(ЗаписьXML,"Регистрация",ВыборкаСотрудников.Сотрудник);
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ВыборкаСотрудников.СотрудникРНН) Тогда
				ЗаписатьXMLОбъект(ЗаписьXML,"СотрудникРНН",ВыборкаСотрудников.СотрудникРНН);
			ИначеЕсли ПроверятьРНН Тогда // Проверим стоит ли настройка проверки заполненности РНН
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнен РНН сотрудника:%1'"), ВыборкаСотрудников.Сотрудник);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
			//////////////////////////
			Если НЕ ПустаяСтрока(ВыборкаСотрудников.СотрудникБИН_ИИН) Тогда
				ЗаписатьXMLОбъект(ЗаписьXML,"СотрудникБИН_ИИН",ВыборкаСотрудников.СотрудникБИН_ИИН);
			ИначеЕсли ПроверятьБИН_ИИН Тогда // Проверим стоит ли настройка проверки заполненности БИН/ИИН
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнен ИИН сотрудника:%1'"), ВыборкаСотрудников.Сотрудник);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			/////////////////////////
			
			Если ВидДанных = "ЗП" Тогда
				ЗаписатьXMLОбъект(ЗаписьXML,"СотрудникНомерКартСчета",ВыборкаСотрудников.СотрудникКартСчет);
			Иначе 
				Если НЕ ПустаяСтрока(ВыборкаСотрудников.СотрудникСИК) Тогда
					ЗаписатьXMLОбъект(ЗаписьXML,"СотрудникСИК",ВыборкаСотрудников.СотрудникСИК);
				ИначеЕсли ПроверятьРНН Тогда // Проверим стоит ли настройка проверки заполненности РНН
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнен СИК сотрудника:%1'"), ВыборкаСотрудников.Сотрудник);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				
				Если НЕ ВыборкаСотрудников.СотрудникДатаРождения = Дата(1,1,1) Тогда
					ЗаписатьXMLОбъект(ЗаписьXML,"СотрудникДатаРождения",ВыборкаСотрудников.СотрудникДатаРождения,,,Истина);
				Иначе 
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнена дата рождения сотрудника:%1'"), ВыборкаСотрудников.Сотрудник);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				
				Если НЕ ВыборкаСотрудников.Период = Дата(1,1,1) Тогда
					ЗаписатьXMLОбъект(ЗаписьXML,"Период",НРег(Формат(ВыборкаСотрудников.Период, "ДФ='ММгггг'")));
				КонецЕсли;
			КонецЕсли;	
				
			Если НЕ ПустаяСтрока(ВыборкаСотрудников.Сумма) Тогда
				ЗаписатьXMLОбъект(ЗаписьXML,"Сумма",ВыборкаСотрудников.Сумма,,,Истина);
				ОбщаяСумма = ОбщаяСумма + ВыборкаСотрудников.Сумма;
			Иначе
				Если ВидДанных = "ЗП" Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнена сумма заработной платы сотрудника:%1'"), ВыборкаСотрудников.Сотрудник);
				ИначеЕсли ВидДанных = "ОПВ" Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнена сумма пенсионных перечислений сотрудника: %1 за %2 г.'"), ВыборкаСотрудников.Сотрудник, НРег(Формат(ВыборкаСотрудников.Период, "ДФ='ММММ гггг'")));
				Иначе
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнена сумма социальных отчислений сотрудника: %1 за %2 г.'"), ВыборкаСотрудников.Сотрудник, НРег(Формат(ВыборкаСотрудников.Период, "ДФ='ММММ гггг'")));
				КонецЕсли;
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьКонецЭлемента(); // закроем элемент "СОТРУДНИК"
		КонецЕсли;
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента(); // закроем элемент "СПИСОКСОТРУДНИКОВ"
	
	Если ВидДанных = "ЗП" Тогда
		Если ОбщаяСумма <> СтруктураДокумента.Документ.СуммаДокумента Тогда
			
			СуммаКомиссии = СтруктураДокумента.Документ.СуммаДокумента - ОбщаяСумма;
			
			ЗаписатьXMLОбъект(ЗаписьXML,"СуммаКомиссииБанка",СуммаКомиссии,,,Истина);
			
			Отбор = Новый Структура;
			Отбор.Вставить("Организация", СтруктураДокумента.Документ.Организация);
			Отбор.Вставить("Банк", СтруктураДокумента.Документ.СчетКонтрагента.Банк);
			
			ЗначенияРегистра = РегистрыСведений.КодыОрганизацийВБанковскойСистеме.Получить(Отбор);
			ЗаписатьXMLОбъект(ЗаписьXML,"КодОрганизацииВБанковскойСистеме", ЗначенияРегистра.КодОрганизации);
			
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры	

Процедура ЗаписатьДанныеПеречислениеПоИЛ(ЗаписьXML,
									СтруктураДокумента,
									КоллекцияСвойств,
									Экспорт_Выгружаемые,
									Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях, 
									ПроверятьРНН,
									ПроверятьБИН_ИИН,
									КонПериода)
									
	ЗаписатьОбщиеРеквизитыВXML(ЗаписьXML, 
								СтруктураДокумента, 
								КоллекцияСвойств, 
								Экспорт_Выгружаемые,
								Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях,
								Ложь);

	ИмяРеквизитаБИК = Справочники.Банки.ПолучитьИмяРеквизитаБИКБанка(КонПериода);
	
	ЗаписатьXMLОбъект(ЗаписьXML, "СписокПолучателейПоИЛ", , 1);
	
	Запрос = Новый Запрос;
	Запрос.Текст = СформироватьТекстЗапросаПоИЛ(ИмяРеквизитаБИК);
	
	Запрос.УстановитьПараметр("Документ",СтруктураДокумента.Документ); 
	Запрос.УстановитьПараметр("Дата", СтруктураДокумента.Документ.Дата);
		
	ВыборкаПолучателей = Запрос.Выполнить().Выбрать();
	
	ОбщаяСумма = 0;
	Пока ВыборкаПолучателей.Следующий() Цикл
		
		Если НЕ ПустаяСтрока(ВыборкаПолучателей.ПолучательПоИЛФИО) Тогда
			
			ЗаписатьXMLОбъект(ЗаписьXML, "ПолучательПоИЛ" , , 1, Новый Структура("ФИО", СокрЛП(ВыборкаПолучателей.ПолучательПоИЛФИО)));
			
			Если НЕ ПустаяСтрока(ВыборкаПолучателей.ПолучательПоИЛРНН) Тогда
				ЗаписатьXMLОбъект(ЗаписьXML,"ПолучательПоИЛРНН",ВыборкаПолучателей.ПолучательПоИЛРНН);
			ИначеЕсли ПроверятьРНН Тогда // Проверим стоит ли настройка проверки заполненности РНН
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнен РНН получателя по исполнительным листам:%1'"), СокрЛП(ВыборкаПолучателей.ПолучательПоИЛФИО));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			/////////////////////////
			Если НЕ ПустаяСтрока(ВыборкаПолучателей.ПолучательПоИЛБИН_ИИН) Тогда
				ЗаписатьXMLОбъект(ЗаписьXML,"ПолучательПоИЛБИН_ИИН",ВыборкаПолучателей.ПолучательПоИЛБИН_ИИН);
			ИначеЕсли ПроверятьБИН_ИИН Тогда // Проверим стоит ли настройка проверки заполненности БИН/ИИН
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнен БИН/ИИН получателя по исполнительным листам:%1'"), СокрЛП(ВыборкаПолучателей.ПолучательПоИЛФИО));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			/////////////////////////
			
			Если ВыборкаПолучателей.ПеречислятьЧерез = Перечисления.СпособыПеречисленияПоИсполнительномуЛисту.ЧерезБанк Тогда
				ЗаписатьXMLОбъект(ЗаписьXML,"ПолучательПоИЛБанкНаименование",ВыборкаПолучателей.БанкНаименвание);
				ЗаписатьXMLОбъект(ЗаписьXML,"ПолучательПоИЛБанкБИК",ВыборкаПолучателей.БанкБИК);
				ЗаписатьXMLОбъект(ЗаписьXML,"ПолучательПоИЛИИК",ВыборкаПолучателей.ПолучательПоИЛИИК);
			Иначе
				ЗаписатьXMLОбъект(ЗаписьXML,"ПолучательПоИЛАдрес", СокрЛП(ВыборкаПолучателей.ПолучательПоИЛАдрес));
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ВыборкаПолучателей.СуммаВзаиморасчетов) Тогда
				ЗаписатьXMLОбъект(ЗаписьXML,"Сумма",ВыборкаПолучателей.СуммаВзаиморасчетов,,,Истина);
				ОбщаяСумма = ОбщаяСумма + ВыборкаПолучателей.СуммаВзаиморасчетов;
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнена сумма к перечислению по исполнительным листам для получателя:%1'"), СокрЛП(ВыборкаПолучателей.ПолучательПоИЛФИО));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьКонецЭлемента(); // закроем элемент "ПОЛУЧАТЕЛЬПОИЛ"
			
		КонецЕсли;
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // закроем элемент "СПИСОКПОЛУЧАТЕЛЕЙПОИЛ"
	
	Если ОбщаяСумма <> СтруктураДокумента.Документ.СуммаДокумента Тогда
		
		СуммаКомиссии = СтруктураДокумента.Документ.СуммаДокумента - ОбщаяСумма;
		ЗаписатьXMLОбъект(ЗаписьXML,"СуммаКомиссииБанка",СуммаКомиссии,,,Истина);
		
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", СтруктураДокумента.Документ.Организация);
		Отбор.Вставить("Банк", СтруктураДокумента.Документ.СчетКонтрагента.Банк);
		
		ЗначенияРегистра = РегистрыСведений.КодыОрганизацийВБанковскойСистеме.Получить(Отбор);
		
		Если ЗначенияРегистра <> Неопределено Тогда
			Если Не ПустаяСтрока(ЗначенияРегистра.КодОрганизации) Тогда
				ЗаписатьXMLОбъект(ЗаписьXML,"КодОрганизацииВБанковскойСистеме", ЗначенияРегистра.КодОрганизации);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры	

Процедура ЗаписатьДанныеПеречислениеПодотчетнику(ЗаписьXML, 
									СтруктураДокумента,
									КоллекцияСвойств,
									Экспорт_Выгружаемые,
									Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях, 
									ПроверятьРНН,
									ПроверятьБИН_ИИН)
									
									
	ЗаписатьОбщиеРеквизитыВXML(ЗаписьXML, СтруктураДокумента, КоллекцияСвойств, Экспорт_Выгружаемые, Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях, Ложь);
	
	ЗаписатьXMLОбъект(ЗаписьXML, "СПИСОКСОТРУДНИКОВ" , , 1);
	
	Запрос = Новый Запрос;
	Запрос.Текст = СформироватьТекстЗапросаПоПеречислениеПодотчетникам();
	
	Запрос.УстановитьПараметр("Документ",	СтруктураДокумента.Документ); 
	Запрос.УстановитьПараметр("Дата", 		СтруктураДокумента.Документ.Дата);
	
	ВыборкаПодотчетников = Запрос.Выполнить().Выбрать();
	
	ОбщаяСумма = 0;
	Пока ВыборкаПодотчетников.Следующий() Цикл
		
		Если НЕ ПустаяСтрока(ВыборкаПодотчетников.НаименованиеФизЛица) Тогда
			
			Если ПустаяСтрока(ВыборкаПодотчетников.НомерКартСчета) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не указан номер карт-счета подотчетника:%1'"), ВыборкаПодотчетников.НаименованиеФизЛица);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			ЗаписатьXMLОбъект(ЗаписьXML,"СОТРУДНИК",,1, Новый Структура("ФИО", СокрЛП(ВыборкаПодотчетников.Фамилия) + " " + СокрЛП(ВыборкаПодотчетников.Имя) + " " + СокрЛП(ВыборкаПодотчетников.Отчество)));
			
			Если НЕ ПустаяСтрока(ВыборкаПодотчетников.РНН) Тогда
				ЗаписатьXMLОбъект(ЗаписьXML,"СотрудникРНН",ВыборкаПодотчетников.РНН);
			ИначеЕсли ПроверятьРНН Тогда // Проверим стоит ли настройка проверки заполненности РНН
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнен РНН подотчетника:%1'"), ВыборкаПодотчетников.НаименованиеФизЛица);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			          			
			////////////////////
			Если НЕ ПустаяСтрока(ВыборкаПодотчетников.ПодотчетникБИН_ИИН) Тогда
				ЗаписатьXMLОбъект(ЗаписьXML,"СотрудникБИН_ИИН", ВыборкаПодотчетников.ПодотчетникБИН_ИИН);
			ИначеЕсли ПроверятьБИН_ИИН Тогда // Проверим стоит ли настройка проверки заполненности БИН/ИИН
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнен БИН/ИИН подотчетника:%1'"), ВыборкаПодотчетников.НаименованиеФизЛица);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			///////////////////			  
			                              
			
			ЗаписатьXMLОбъект(ЗаписьXML,"СотрудникНомерКартСчета",ВыборкаПодотчетников.НомерКартСчета);
			Если НЕ ПустаяСтрока(ВыборкаПодотчетников.СуммаКПеречислению) Тогда
				ЗаписатьXMLОбъект(ЗаписьXML,"Сумма",ВыборкаПодотчетников.СуммаКПеречислению,,,Истина);
				ОбщаяСумма = ОбщаяСумма + ВыборкаПодотчетников.СуммаКПеречислению;
			Иначе 
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнена сумма выдачи в подотчет для подотчетника:%1'"), ВыборкаПодотчетников.НаименованиеФизЛица);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьКонецЭлемента(); // закроем элемент "Подотчетник"
		КонецЕсли;
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // закроем элемент "СписокПодотчеттников"
	
	Если ОбщаяСумма <> СтруктураДокумента.Документ.СуммаДокумента Тогда
		СуммаКомиссии = СтруктураДокумента.Документ.СуммаДокумента - ОбщаяСумма;
		ЗаписатьXMLОбъект(ЗаписьXML,"СуммаКомиссииБанка",СуммаКомиссии,,,Истина);
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", СтруктураДокумента.Документ.Организация);
		Отбор.Вставить("Банк", СтруктураДокумента.Документ.СчетКонтрагента.Банк);
		ЗначеияРегистра = РегистрыСведений.КодыОрганизацийВБанковскойСистеме.Получить(Отбор);
		Если ЗначеияРегистра <> Неопределено Тогда
			Если Не ПустаяСтрока(ЗначеияРегистра.КодОрганизации) Тогда
				ЗаписатьXMLОбъект(ЗаписьXML,"КодОрганизацииВБанковскойСистеме", ЗначеияРегистра.КодОрганизации);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	        
КонецПроцедуры	

Процедура ЗаписатьСекциюДокументВXML(ЗаписьXML, СтруктураДокумента, КоллекцияСвойств, КонПериода, СтруктурноеПодразделение, Организация, НастройкаЗаполнения)
	
	Перем НеПреобразовыватьВСтроку;
	
	ПроверятьРНН	 = ПолучитьНастройкуЗаполнения(НастройкаЗаполнения, "ПроверятьРНН");
	ПроверятьБИН_ИИН = ПолучитьНастройкуЗаполнения(НастройкаЗаполнения, "ПроверятьБИН_ИИН");
	
	ПолныеФИООтветственных = ПолучитьНастройкуЗаполнения(НастройкаЗаполнения, "ПолныеФИООтветственных");
	ПолныеФИООтветственных = ?(ПолныеФИООтветственных = Неопределено, Ложь, ПолныеФИООтветственных);
	
	ИмяРеквизитаБИК = Справочники.Банки.ПолучитьИмяРеквизитаБИКБанка(КонПериода);

	ЗаписатьXMLОбъект(ЗаписьXML, "ПлатежныйДокумент", , 1, Новый Структура("ВидДокумента", ПолучитьТегСекции(СтруктураДокумента.Документ)));
	
	ПенсионныеОтчисления_Есть 	 	= ПривестиЗначение(СтруктураДокумента["ПенсионныеОтчисления"]);
	СоциальныеОтчисления_Есть	 	= ПривестиЗначение(СтруктураДокумента["СоциальныеОтчисления"]);
	ПеречислениеНаКартСчета_Есть 	= ПривестиЗначение(СтруктураДокумента["ПеречислениеНаКартСчета"]);
	ПеречислениеПоИЛ_Есть 		 	= ПривестиЗначение(СтруктураДокумента["ПеречислениеПоИЛ"]);
	ПеречислениеПодотчетнику_Есть	= ПривестиЗначение(СтруктураДокумента["ПеречислениеПодотчетнику"]);
	
	Экспорт_ВыгружаемыеГЦВП 					= СформироватьСтруктуруЭкспорта_ВыгружаемыеГЦВП();
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях	= СформироватьСтруктуруЭкспорта_ВыгружаемыеПриПенсИСоцОтчислениях();
	Экспорт_Выгружаемые							= СформироватьСтруктуруЭкспорта_Выгружаемые();

	Если ПенсионныеОтчисления_Есть = "1" Тогда 	
		
		ЗаписатьДанныеПоСотрудникам(ЗаписьXML, 
									СтруктураДокумента,
									КоллекцияСвойств,
									Экспорт_Выгружаемые,
									Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях, 
									Экспорт_ВыгружаемыеГЦВП,
									ПроверятьРНН,
									ПроверятьБИН_ИИН,
									НеПреобразовыватьВСтроку,
									"ОПВ");
		
	ИначеЕсли СоциальныеОтчисления_Есть = "1" Тогда 	
		
		ЗаписатьДанныеПоСотрудникам(ЗаписьXML, 
									СтруктураДокумента,
									КоллекцияСвойств,
									Экспорт_Выгружаемые,
									Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях, 
									Экспорт_ВыгружаемыеГЦВП,
									ПроверятьРНН,
									ПроверятьБИН_ИИН,
									НеПреобразовыватьВСтроку,
									"СО");
									
	ИначеЕсли ПеречислениеНаКартСчета_Есть = "1" Тогда 	
		
		ЗаписатьДанныеПоСотрудникам(ЗаписьXML, 
									СтруктураДокумента,
									КоллекцияСвойств,
									Экспорт_Выгружаемые,
									Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях, 
									Экспорт_ВыгружаемыеГЦВП,
									ПроверятьРНН,
									ПроверятьБИН_ИИН,
									НеПреобразовыватьВСтроку,
									"ЗП");
									
	ИначеЕсли ПеречислениеПоИЛ_Есть = "1" Тогда 	
		
		ЗаписатьДанныеПеречислениеПоИЛ(ЗаписьXML,
									СтруктураДокумента,
									КоллекцияСвойств,
									Экспорт_Выгружаемые,
									Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях, 
									ПроверятьРНН,
									ПроверятьБИН_ИИН,
									КонПериода);
									
	ИначеЕсли ПеречислениеПодотчетнику_Есть = "1" Тогда 	
		
		ЗаписатьДанныеПеречислениеПодотчетнику(ЗаписьXML, 
									СтруктураДокумента,
									КоллекцияСвойств,
									Экспорт_Выгружаемые,
									Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях, 
									ПроверятьРНН,
									ПроверятьБИН_ИИН);

	Иначе
		
		ЗаписатьОбщиеРеквизитыВXML(ЗаписьXML, 
									СтруктураДокумента, 
									КоллекцияСвойств, 
									Экспорт_Выгружаемые,
									Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях,
									Истина)

		
	КонецЕсли;
	
	ЗаписатьXMLОбъект(ЗаписьXML, "Валюта", СокрЛП(СтруктураДокумента.СчетОрганизации.ВалютаДенежныхСредств.Наименование));
	
	СписокОтветственных = ПолучитьСписокОтветственныхЛицОрганизации(Организация, СтруктурноеПодразделение);

	Для Каждого СтрокаОтв Из СписокОтветственных Цикл
		
		Если СтрокаОтв.Отв = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтерДляПодписиБанковскихДокументов Тогда 
			
			ФИО		 = СтрокаОтв.Наименование;
			Фамилия  = ВыделитьСлово(ФИО, 1);
            Имя      = ВыделитьСлово(ФИО, 2);
			Отчество = ВыделитьСлово(ФИО, 3);
			
			Если ПолныеФИООтветственных Тогда
				ЗаписатьXMLОбъект(ЗаписьXML, "ГлавныйБухгалтер", (СокрЛП(Фамилия) + " " + СокрЛП(Имя) + " " + СокрЛП(Отчество)));
			Иначе
				ЗаписатьXMLОбъект(ЗаписьXML, "ГлавныйБухгалтер", (СокрЛП(Фамилия) + " " + Лев(Имя,1) + ". " + Лев(Отчество,1)+ "."));
			КонецЕсли;
			
		КонецЕсли;
		
	    Если СтрокаОтв.Отв = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда 
			
			ФИО		 = СтрокаОтв.Наименование;
			Фамилия  = ВыделитьСлово(ФИО, 1);
            Имя      = ВыделитьСлово(ФИО, 2);
			Отчество = ВыделитьСлово(ФИО, 3);
			
			Если ПолныеФИООтветственных Тогда
				ЗаписатьXMLОбъект(ЗаписьXML, "Руководитель", (СокрЛП(Фамилия) + " " + СокрЛП(Имя) + " " + СокрЛП(Отчество)));
			Иначе
				ЗаписатьXMLОбъект(ЗаписьXML, "Руководитель", (СокрЛП(Фамилия) + " " + Лев(Имя,1) + ". " + Лев(Отчество,1)+ "."));
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента(); // закроем элемент "СекцияДокумент"
	
КонецПроцедуры

////////////// ПОДОТОВКА ЗАГРУЗКИ //////////////////////////////////////////////////

Функция СформироватьСтруктуруЗаголовковИмпорта()
	
	СтруктураЗаголовков = Новый Структура;
	
	СтруктураЗаголовков.Вставить("Проведен"                  , НСтр("ru = 'Проведен'"));
	СтруктураЗаголовков.Вставить("Загрузить"                 , "_");
	СтруктураЗаголовков.Вставить("Готовность"                , НСтр("ru = 'Готовность'"));
	
	СтруктураЗаголовков.Вставить("НомерДок"                  , НСтр("ru = '№ Документа'"));
	СтруктураЗаголовков.Вставить("НомерДокумента"            , НСтр("ru = 'Номер'"));
	СтруктураЗаголовков.Вставить("ДатаДок"                   , НСтр("ru = 'Дата документа'"));
	СтруктураЗаголовков.Вставить("ДатаДокумента"             , НСтр("ru = 'Дата (из файла)'"));
	СтруктураЗаголовков.Вставить("Операция"                  , НСтр("ru = 'Операция'"));
	СтруктураЗаголовков.Вставить("СчетОрганизации"           , НСтр("ru = 'Р/с организации'"));
	СтруктураЗаголовков.Вставить("СуммаДокумента"            , НСтр("ru = 'Сумма'"));
	СтруктураЗаголовков.Вставить("Сумма"                     , НСтр("ru = 'Сумма (из файла)'"));
	
	СтруктураЗаголовков.Вставить("Контрагент"                , НСтр("ru = 'Контрагент'"));
	СтруктураЗаголовков.Вставить("СчетКонтрагента"           , НСтр("ru = 'Р/с контрагента'"));
	
	СтруктураЗаголовков.Вставить("ДатаОперации"              , НСтр("ru = 'Дата операции'"));
	СтруктураЗаголовков.Вставить("СуммаПриход"               , НСтр("ru = 'Сумма приход'"));
	СтруктураЗаголовков.Вставить("СуммаРасход"               , НСтр("ru = 'Сумма расход'"));
	СтруктураЗаголовков.Вставить("Списано"                   , НСтр("ru = 'Дата списания'"));
	СтруктураЗаголовков.Вставить("ДатаСписано"               , НСтр("ru = 'Списано'"));
	СтруктураЗаголовков.Вставить("Поступило"                 , НСтр("ru = 'Дата поступления'"));
	СтруктураЗаголовков.Вставить("ДатаПоступило"             , НСтр("ru = 'Поступило'"));
	
	СтруктураЗаголовков.Вставить("ПлательщикНаименование"    , НСтр("ru = 'Отправитель'"));
	СтруктураЗаголовков.Вставить("ПлательщикРНН"             , НСтр("ru = 'РНН отправителя'"));
	СтруктураЗаголовков.Вставить("ПлательщикКБЕ"             , НСтр("ru = 'Кбе отправителя'"));
	СтруктураЗаголовков.Вставить("ПлательщикИИК"             , НСтр("ru = 'Расчетный счет отправителя'"));
	СтруктураЗаголовков.Вставить("ПлательщикБИН_ИИН"         , НСтр("ru = 'БИН / ИИН отправителя'"));
	
	СтруктураЗаголовков.Вставить("ПлательщикБанкНаименование", НСтр("ru = 'Наименование банка отправителя'"));
	СтруктураЗаголовков.Вставить("ПлательщикБанкРНН"         , НСтр("ru = 'РНН банка-отправителя'"));
	СтруктураЗаголовков.Вставить("ПлательщикБанкБИН_ИИН"     , НСтр("ru = 'БИН / ИИН банка отправителя'"));
	СтруктураЗаголовков.Вставить("ПлательщикБанкБИК"         , НСтр("ru = 'БИК банка-отправителя'"));
	СтруктураЗаголовков.Вставить("ПлательщикБанкИИК"         , НСтр("ru = 'ИИК банка-отправителя'"));
	
	СтруктураЗаголовков.Вставить("ПолучательНаименование"    , НСтр("ru = 'Бенефициар'"));
	СтруктураЗаголовков.Вставить("ПолучательРНН"             , НСтр("ru = 'Кбе бенефициара'"));
	СтруктураЗаголовков.Вставить("ПолучательКБЕ"             , НСтр("ru = 'ИИК бенефициара'"));
	СтруктураЗаголовков.Вставить("ПолучательИИК"             , НСтр("ru = 'РНН бенефициара'"));
	СтруктураЗаголовков.Вставить("ПолучательБИН_ИИН"         , НСтр("ru = 'БИН / ИИН бенефициара'"));
	
	СтруктураЗаголовков.Вставить("ПолучательБанкНаименование", НСтр("ru = 'Наименование банка получателя'"));
	СтруктураЗаголовков.Вставить("ПолучательБанкРНН"         , НСтр("ru = 'РНН банка-получателя'"));
	СтруктураЗаголовков.Вставить("ПолучательБанкБИН_ИИН"     , НСтр("ru = 'БИН / ИИН банка получателя'"));
	СтруктураЗаголовков.Вставить("ПолучательБанкБИК"         , НСтр("ru = 'БИК банка-получателя'"));
	СтруктураЗаголовков.Вставить("ПолучательБанкИИК"         , НСтр("ru = 'ИИК банка-получателя'"));
	
	СтруктураЗаголовков.Вставить("БанкПосредникНаименование" , НСтр("ru = 'Наименование банка посредника'"));
	СтруктураЗаголовков.Вставить("БанкПосредникРНН"          , НСтр("ru = 'РНН банка-посредника'"));
	
	СтруктураЗаголовков.Вставить("БанкПосредникБИН_ИИН"      , НСтр("ru = 'БИН / ИИН банка посредника'"));
	
	СтруктураЗаголовков.Вставить("БанкПосредникБИК"          , НСтр("ru = 'БИК банка-посредника'"));
	СтруктураЗаголовков.Вставить("БанкПосредникИИК"          , НСтр("ru = 'ИИК банка-посредника'"));
	
	СтруктураЗаголовков.Вставить("ДатаПолученияТовара"       , НСтр("ru = 'Дата получения товара'"));
	СтруктураЗаголовков.Вставить("НазначениеПлатежа"         , НСтр("ru = 'Назначение платежа'"));
	СтруктураЗаголовков.Вставить("КодНазначенияПлатежа"      , НСтр("ru = 'Код назначения платежа'"));
	СтруктураЗаголовков.Вставить("КодБюджетнойКлассификации" , НСтр("ru = 'Код бюджетной классификации'"));
	СтруктураЗаголовков.Вставить("ДатаВалютирования"         , НСтр("ru = 'Дата валютирования'"));
	
	СтруктураЗаголовков.Вставить("Документ"                  , НСтр("ru = 'Источник'"));
	СтруктураЗаголовков.Вставить("СекцияДокумент"            , НСтр("ru = 'Выгрузка'"));
	
	СтруктураЗаголовков.Вставить("ОписаниеОшибок"            , НСтр("ru = 'Замечания'"));
	СтруктураЗаголовков.Вставить("ТипДокумента"              , НСтр("ru = 'Тип пл. документа'"));
	
	СтруктураЗаголовков.Вставить("СостояниеДокумента"        , НСтр("ru = 'Состояние документа'"));
	
	Возврат СтруктураЗаголовков
	
КонецФункции

Функция СформироватьСтруктуруИмпорт_Загружаемые()
	
	// РеквизитыПлДокЭкс_Основные
	Импорт_Загружаемые = Новый Структура("НомерДокумента, ДатаДокумента, Сумма");
	
	// РеквизитыПлДок_Плательщик
	Импорт_Загружаемые.Вставить("ПлательщикНаименование");
	Импорт_Загружаемые.Вставить("ПлательщикКБЕ");
	Импорт_Загружаемые.Вставить("ПлательщикИИК");
	Импорт_Загружаемые.Вставить("ПлательщикРНН");
	Импорт_Загружаемые.Вставить("ПлательщикБИН_ИИН");
		
	//РеквизитыПлДок_ПлательщикНПР
	Импорт_Загружаемые.Вставить("ПлательщикБанкНаименование");
	Импорт_Загружаемые.Вставить("ПлательщикБанкБИК");
	Импорт_Загружаемые.Вставить("ПлательщикБанкРНН");
	Импорт_Загружаемые.Вставить("ПлательщикБанкБИН_ИИН");
		
	// РеквизитыПлДок_Получатель
	Импорт_Загружаемые.Вставить("ПолучательНаименование");
	Импорт_Загружаемые.Вставить("ПолучательКБЕ");
	Импорт_Загружаемые.Вставить("ПолучательИИК");
	Импорт_Загружаемые.Вставить("ПолучательРНН");
	Импорт_Загружаемые.Вставить("ПолучательБИН_ИИН");
		
	//РеквизитыПлДок_ПолучательНПР
	Импорт_Загружаемые.Вставить("ПолучательБанкНаименование");
	Импорт_Загружаемые.Вставить("ПолучательБанкБИК");
	Импорт_Загружаемые.Вставить("ПолучательБанкРНН");
	Импорт_Загружаемые.Вставить("ПолучательБанкБИН_ИИН");
	
	//РеквизитыПлДок_НеОбязательные
	Импорт_Загружаемые.Вставить("ПлательщикБанкИИК");
	Импорт_Загружаемые.Вставить("ПолучательБанкИИК");
	Импорт_Загружаемые.Вставить("ДатаПолученияТовара");
	Импорт_Загружаемые.Вставить("КодБюджетнойКлассификации");
	Импорт_Загружаемые.Вставить("ДатаВалютирования");
	Импорт_Загружаемые.Вставить("ВидДокумента");
	Импорт_Загружаемые.Вставить("ДатаОперации");
	Импорт_Загружаемые.Вставить("СуммаПриход");
	Импорт_Загружаемые.Вставить("СуммаРасход");

	//РеквизитыПлДок_БанкПосредник
	Импорт_Загружаемые.Вставить("БанкПосредникНаименование");
	Импорт_Загружаемые.Вставить("БанкПосредникИИК");
	Импорт_Загружаемые.Вставить("БанкПосредникРНН");
	Импорт_Загружаемые.Вставить("БанкПосредникБИН_ИИН");
	Импорт_Загружаемые.Вставить("БанкПосредникБИК");
		
	//РеквизитыПлДок_БюджетПлатеж
	Импорт_Загружаемые.Вставить("КодНазначенияПлатежа");

	//РеквизитыПлДок_Назначение
	Импорт_Загружаемые.Вставить("НазначениеПлатежа");

	Возврат Импорт_Загружаемые;
	 
КонецФункции

Функция СформироватьСтруктуруИмпорт_НеПустые(ПроверятьРНН, ПроверятьБИН_ИИН = Ложь)
	
	Импорт_НеПустые = Новый Структура("НомерДок,ДатаДок,Сумма,ПлательщикИИК,ПолучательИИК");
	
	Если ПроверятьРНН Тогда 
		Импорт_НеПустые.Вставить("ПлательщикРНН");
		Импорт_НеПустые.Вставить("ПолучательРНН");
	КонецЕсли;

	Если ПроверятьБИН_ИИН Тогда 
		Импорт_НеПустые.Вставить("ПлательщикБИН_ИИН");
		Импорт_НеПустые.Вставить("ПолучательБИН_ИИН");
	КонецЕсли;	
		
	Возврат Импорт_НеПустые;
	
КонецФункции

Процедура ПроверитьНаПустоеЗначениеИмпорта(СтрокаИмпорта, Импорт_НеПустые, ИмяСвойства, ПредставлениеСвойства) Экспорт
	
	Если Импорт_НеПустые.Свойство(ИмяСвойства) Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаИмпорта[ИмяСвойства]) Тогда
			ДобавитьЗамечание(СтрокаИмпорта, 3, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнено ""%1""!'"), ПредставлениеСвойства));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_МассивСтрок)
	
	Буфер = "";
	
	Пока ПустаяСтрока(Буфер) ИЛИ Лев(Буфер, 2) = "//" Цикл
		
		Если Импорт_ТекущаяСтрока > Импорт_КоличествоСтрок Тогда
			Возврат "";
		КонецЕсли;
		
		Буфер = Импорт_МассивСтрок[Импорт_ТекущаяСтрока - 1];
		Импорт_ТекущаяСтрока = Импорт_ТекущаяСтрока + 1;
		
	КонецЦикла;
	
	Возврат Буфер;
	
КонецФункции

Функция РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение)
	
	ПозицияПрисваивания = Найти(СтрокаРазбора, "=");
	Если ПозицияПрисваивания = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Тег = ВРЕГ(СокрЛП(Лев(СтрокаРазбора, ПозицияПрисваивания - 1)));
	Значение = СокрЛП(Сред(СтрокаРазбора, ПозицияПрисваивания + 1));
	
	Возврат НЕ ПустаяСтрока(Тег);
	
КонецФункции

// Загружает секцию документа
//
Функция ЗагрузитьСекциюДокумента(СтрокаДокумента, Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_МассивСтрок, СтекОповещений)
	
	СтрокаРазбора = ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_МассивСтрок);
	
	Приход = 0;
	Расход = 0;
	
	Импорт_Загружаемые = СформироватьСтруктуруИмпорт_Загружаемые();
	
	Пока Лев(Врег(СокрЛП(СтрокаРазбора)), 14) <> "КОНЕЦДОКУМЕНТА" Цикл
		
		Значение = "";
		Тег = "";
		
		Если РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение) Тогда
			
			Попытка
				Если Импорт_Загружаемые.Свойство(Тег) = Истина Тогда
					Если  Тег = "ВИДДОКУМЕНТА" Тогда 
						СтрокаДокумента.Операция = Значение;
					Иначе
					СтрокаДокумента[Тег] = Значение;                 
					КонецЕсли;
				КонецЕсли;
			Исключение
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Некорректная структура файла импорта, строка %1 :
				|%2'"), Импорт_ТекущаяСтрока - 1, СтрокаРазбора);
				СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
			КонецПопытки;
			
			Если Тег = "СУММАПРИХОД" Тогда 
				Приход = 1;
				СтрокаДокумента.Сумма=Значение;
			КонецЕсли;
			
			Если Тег = "СУММАРАСХОД" Тогда 
				Расход = 1;
				СтрокаДокумента.Сумма=Значение;    
			КонецЕсли;		
			
		КонецЕсли;
		
		СтрокаРазбора = ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_МассивСтрок);
		
	КонецЦикла;
	
	Если Приход = 1 Тогда 
		СтрокаДокумента.ДатаПоступило = СтрокаДокумента.ДатаОперации;
	КонецЕсли;
	
	Если Расход = 1 Тогда 
		СтрокаДокумента.ДатаСписано = СтрокаДокумента.ДатаОперации;
	КонецЕсли;
	
	СтрокаДокумента.СостояниеДокумента = 4;
	
	Возврат Истина;
	
КонецФункции

// Загрузка секции расчетного счета
//
Функция ЗагрузитьСекциюРасчСчета(СтрокаРССчета, Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_МассивСтрок, СтекОповещений) //+
	
	СтрокаРазбора = ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_МассивСтрок);
	
	Значение = "";
	Тег = "";
	
	ТегиРасчетногоСчета = ТегиРасчетногоСчетаСоответствие();
	Пока РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение) Цикл   
		
		Если ТегиРасчетногоСчета[Тег] = Истина Тогда
			СтрокаРССчета[Тег] = Значение;       
			
		Иначе
			Если Тег = "РАСЧЕТНЫЙСЧЕТ" Тогда 
				СтрокаРССчета["РасчСчет"] = Значение;
			ИначеЕсли Тег = "НАЧАЛЬНЫЙ ОСТАТОК" Тогда
				СтрокаРССчета["НачальныйОстаток"] = Значение;
			Иначе
				
				// неправиьный реквизит заголовка
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неверный реквизит в секции описания расчетного счета, строка %1 : %2'"), Импорт_ТекущаяСтрока - 1, СтрокаРазбора);
				СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
				
				Возврат Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаРазбора = ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_МассивСтрок);
		
		Значение = "";
		Тег = "";
		
	КонецЦикла;
	
	Если ВРЕГ(Лев(СокрЛП(СтрокаРазбора), 13)) = "КОНЕЦРАСЧСЧЕТ" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Загрузка заголовка файла обмена
//
Функция ЗагрузитьСтрокуЗаголовка(ТекстСтрокиЗаголовка, ТегиЗаголовка, Импорт_Заголовок, Импорт_ТекущаяСтрока, СтекОповещений)
	
	Значение = "";
	Тег = "";
	РазобратьТеговуюСтроку(ТекстСтрокиЗаголовка, Тег, Значение);
	
	Если ТегиЗаголовка[Тег] = Истина Тогда
		Импорт_Заголовок[Тег] = Значение;
		
	Иначе
		// неправильный реквизит заголовка
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неверный реквизит заголовка, строка %1 : %2'"), Импорт_ТекущаяСтрока - 1, ТекстСтрокиЗаголовка);
		СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		
	КонецЕсли;
		
	
КонецФункции

Функция ПолучитьПериодичность(ВидДокумента)
	
	Док = Метаданные.Документы[ВидДокумента];
	Период = Док.ПериодичностьНомера;
	
	Возврат Период;
	
КонецФункции
        
////////////// ЗАГРУЗКА ////////////////////////////////////////////////////////////////

Функция ТегиЗаголовкаСоответствие()
	
	СтрокаТегов = ВРЕГ("ВерсияФормата,Кодировка,Отправитель,Получатель,ДатаСоздания,ВремяСоздания,ДатаНачала,ДатаКонца");
	ТегиЗаголовка = СоздатьСоответствиеИзСтроки(СтрокаТегов);
	
	Возврат ТегиЗаголовка;
	
КонецФункции

Функция Импорт_ЗаголовокСтруктура()
	
	СтрокаТегов = ВРЕГ("ВерсияФормата,Кодировка,Отправитель,Получатель,ДатаСоздания,ВремяСоздания,ДатаНачала,ДатаКонца");
	Импорт_Заголовок = Новый Структура(СтрокаТегов);
	
	Возврат Импорт_Заголовок;
КонецФункции

Функция ТегиРасчетногоСчетаСоответствие()
	
	СтрокаТегов = ВРЕГ("ДатаНачала,ДатаКонца,РасчСчет,НачальныйОстаток,ВсегоПоступило,ВсегоСписано,КонечныйОстаток,КонецРасчСчет");
	ТегиРасчетногоСчета = СоздатьСоответствиеИзСтроки(СтрокаТегов);
	
	Возврат ТегиРасчетногоСчета;
	
КонецФункции

Процедура РаспознатьДанныеВСтроке_Документ(СтрокаДокумента, Организация, СтруктурноеПодразделение, ИспользоватьГраницуОбработки, ДатаГраницыОбработки)
	
	// Распознаем дату документа
	ДатаДок = Дата(1,1,1);
	
	Результат = ПолучитьДатуИзСтроки(ДатаДок, СтрокаДокумента.ДатаДокумента);
	
	СтрокаДокумента.ДатаДок = ДатаДок;
	
	Если НЕ ПустаяСтрока(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка     
		НомерДок = Строка(СтрокаДокумента.НомерДокумента);
		СтрокаДокумента.НомерДок = СокрЛП(НомерДок);
	Исключение
		Возврат;
	КонецПопытки;
	
	// Документ распознается по виду, дате и номеру
	ВидДокумента = ПолучитьВидДокумента(СтрокаДокумента.Операция, СтрокаДокумента.Списано, СтрокаДокумента.Поступило);
	
	РеквизитНомера    = "НомерВходящегоДокумента";
	РеквизитДаты      = "ДатаВходящегоДокумента";
	
	РеквизитНомераДоп = "НомерВходящегоДокумента";
	РеквизитДатыДоп   = "ДатаВходящегоДокумента";
	
	Если ВидДокумента = "ПлатежноеПоручениеВходящее" Тогда
		РеквизитСП        = "СтруктурноеПодразделениеПолучатель";
		
	ИначеЕсли ВидДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств" Тогда         
		РеквизитСП        = "СтруктурноеПодразделениеПолучатель";

	ИначеЕсли ВидДокумента = "ПлатежноеПоручениеИсходящее" Тогда
		РеквизитНомераДоп = "Номер";
		РеквизитДатыДоп   = "ДатаВыписки";
		РеквизитСП        = "СтруктурноеПодразделениеОтправитель";
		
	Иначе
		РеквизитНомераДоп = "Номер";
		РеквизитДатыДоп   = "ДатаВыписки";
		РеквизитСП        = "СтруктурноеПодразделениеОтправитель";
		
	КонецЕсли;
	                                                  
	Если ВидДокумента = "ПлатежноеПоручениеВходящее" ИЛИ ВидДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств" Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ               
		                |	ПлатежноеПоручение.Ссылка,
		                |	ПлатежноеПоручение." + РеквизитНомера + ",
		                |	ПлатежноеПоручение." + РеквизитДаты + ",
		                |	ПлатежноеПоручение.Организация,
						|	ПлатежноеПоручение.Контрагент,
						|	ПлатежноеПоручение.СуммаДокумента,
		                |	ПлатежноеПоручение.СчетОрганизации
		                |ИЗ
		                |	Документ." + ВидДокумента + " КАК ПлатежноеПоручение
		                |ГДЕ
		                |	ПлатежноеПоручение." + РеквизитДаты + " >= &НачалоДня
		                |	И ПлатежноеПоручение." + РеквизитДаты + " <= &КонецДня
		                |	И ПлатежноеПоручение.Организация = &Организация
						|	И ПлатежноеПоручение." + РеквизитСП + " = &СтруктурноеПодразделение
						|	И ПлатежноеПоручение.СчетОрганизации = &СчетОрганизации
						|	И ПлатежноеПоручение.Контрагент = &Контрагент";
		
	Иначе
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ               
		                |	ПлатежноеПоручение.Ссылка,
		                |	ПлатежноеПоручение." + РеквизитНомера + ",
		                |	ПлатежноеПоручение." + РеквизитДаты + ",
		                |	ПлатежноеПоручение." + РеквизитНомераДоп + ",
		                |	ПлатежноеПоручение." + РеквизитДатыДоп + ",
		                |	ПлатежноеПоручение.Организация,
						|	ПлатежноеПоручение.Контрагент,
						|	ПлатежноеПоручение.СуммаДокумента,
		                |	ПлатежноеПоручение.СчетОрганизации
		                |ИЗ
		                |	Документ." + ВидДокумента + " КАК ПлатежноеПоручение
		                |ГДЕ
		                |	ВЫБОР
		                |		КОГДА ПлатежноеПоручение." + РеквизитДаты + " <> &ПустаяДата
		                |				ТОГДА ПлатежноеПоручение." + РеквизитДаты + " МЕЖДУ &НачалоДня И &КонецДня
		                |			ИНАЧЕ ПлатежноеПоручение." + РеквизитДатыДоп + " МЕЖДУ &НачалоДня И &КонецДня
		                |		КОНЕЦ
		                |	И ПлатежноеПоручение.Организация = &Организация
						|	И ПлатежноеПоручение." + РеквизитСП + " = &СтруктурноеПодразделение
						|	И ПлатежноеПоручение.СчетОрганизации = &СчетОрганизации";
		
	КонецЕсли;
	
	ЗапросПоискаДокумента = Новый Запрос(ТекстЗапроса);
	
	ЗапросПоискаДокумента.УстановитьПараметр("НачалоДня"  				, НачалоДня(ДатаДок));
	ЗапросПоискаДокумента.УстановитьПараметр("КонецДня"   				, КонецДня(ДатаДок));
	ЗапросПоискаДокумента.УстановитьПараметр("Организация"				, Организация);
	ЗапросПоискаДокумента.УстановитьПараметр("Контрагент" 				, СтрокаДокумента.Контрагент);
	ЗапросПоискаДокумента.УстановитьПараметр("СтруктурноеПодразделение"	, СтруктурноеПодразделение);
	ЗапросПоискаДокумента.УстановитьПараметр("СчетОрганизации"          , СтрокаДокумента.СчетОрганизации);
	ЗапросПоискаДокумента.УстановитьПараметр("ПустаяДата"               , Дата(1, 1, 1));
	
	ВыборкаПоиска = ЗапросПоискаДокумента.Выполнить().Выбрать();
	
	Пока ВыборкаПоиска.Следующий() Цикл
		
		Попытка
			Если ВидДокумента = "ПлатежноеПоручениеВходящее" ИЛИ ВидДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств" Тогда
				Если СокрЛП(ВыборкаПоиска[РеквизитНомера]) = НомерДок Тогда
					
					СтрокаДокумента.Документ = ВыборкаПоиска.Ссылка;
					СтрокаДокумента.НомерДок = ВыборкаПоиска[РеквизитНомера];
					СтрокаДокумента.ДатаДок  = ВыборкаПоиска[РеквизитДаты];
					
					Если ВыборкаПоиска.СчетОрганизации <> "" И ВыборкаПоиска.СчетОрганизации <> СтрокаДокумента.СчетОрганизации Тогда
						ТекстЗамечания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Банковский счет в документе, загружаемом из файла, %1 не соответствует банковскому счету в документе информационной базы %2. Для документа %3 будет установлен счет %1!'"),
							СтрокаДокумента.СчетОрганизации,
							ВыборкаПоиска.СчетОрганизации,
							ВыборкаПоиска.Ссылка);
						ДобавитьЗамечание(СтрокаДокумента, 1, ТекстЗамечания);
					КонецЕсли;
					
					Если ВыборкаПоиска.Контрагент <> "" И ВыборкаПоиска.Контрагент <> СтрокаДокумента.Контрагент Тогда
						ТекстЗамечания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Контрагент в документе, загружаемом из файла, %1 не соответствует контрагенту в документе информационной базы %2. Для документа %3 будет установлен контрагент %1!'"),
							СтрокаДокумента.Контрагент,
							ВыборкаПоиска.Контрагент,
							ВыборкаПоиска.Ссылка);
						ДобавитьЗамечание(СтрокаДокумента, 1, ТекстЗамечания);
					КонецЕсли;
					
					Если ВыборкаПоиска.СуммаДокумента <> "" И ВыборкаПоиска.СуммаДокумента <> СтрокаДокумента.СуммаДокумента Тогда
						ТекстЗамечания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Сумма документа в документе, загружаемом из файла, %1 не соответствует сумме документа в документе информационной базы %2. Для документа %3 будет установлена сумма документа %1!'"),
							СтрокаДокумента.СуммаДокумента,
							ВыборкаПоиска.СуммаДокумента,
							ВыборкаПоиска.Ссылка);
						ДобавитьЗамечание(СтрокаДокумента, 1, ТекстЗамечания);
					КонецЕсли;
					
					Прервать;
					
				КонецЕсли;
			Иначе
				
				СокрНомерДокумента = "";
				Если СокрЛП(ВыборкаПоиска[РеквизитНомера]) = "" Тогда
					// получим номер документа из выборки, обрезав начальные буквы и лидирующие нули
					СокрНомерДокумента = СокрЛП(ВыборкаПоиска[РеквизитНомераДоп]);
					НомерПервойЦифры = 0;
					Для а = 1 По СтрДлина(СокрНомерДокумента) Цикл
						НомерПервойЦифры = НомерПервойЦифры + 1;
						КодСимвола = КодСимвола(Сред(СокрНомерДокумента, а, 1));
						Если (КодСимвола > 48 И КодСимвола <= 57) Тогда
							СокрНомерДокумента = Сред(СокрНомерДокумента, НомерПервойЦифры);
							Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СокрНомерДокумента) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;    				
				КонецЕсли;
			
				Если СокрЛП(ВыборкаПоиска[РеквизитНомера]) = НомерДок
					ИЛИ (СокрЛП(ВыборкаПоиска[РеквизитНомера]) = ""
						И (СокрЛП(ВыборкаПоиска[РеквизитНомераДоп]) = НомерДок ИЛИ СокрНомерДокумента = НомерДок)) Тогда
					
					СтрокаДокумента.Документ = ВыборкаПоиска.Ссылка;
					
					Если СокрЛП(ВыборкаПоиска[РеквизитНомера]) = "" Тогда
						СтрокаДокумента.НомерДок = ВыборкаПоиска[РеквизитНомераДоп];
					Иначе
						СтрокаДокумента.НомерДок = ВыборкаПоиска[РеквизитНомера];
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ВыборкаПоиска[РеквизитДаты]) Тогда
						СтрокаДокумента.ДатаДок  = ВыборкаПоиска[РеквизитДаты];
					Иначе
						СтрокаДокумента.ДатаДок  = ВыборкаПоиска[РеквизитДатыДоп];
					КонецЕсли;
					
					Если ВыборкаПоиска.СчетОрганизации <> "" И ВыборкаПоиска.СчетОрганизации <> СтрокаДокумента.СчетОрганизации Тогда
						ТекстЗамечания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Банковский счет в документе, загружаемом из файла, %1 не соответствует банковскому счету в документе информационной базы %2. Для документа %3 будет установлен счет %1!'"),
							СтрокаДокумента.СчетОрганизации,
							ВыборкаПоиска.СчетОрганизации,
							ВыборкаПоиска.Ссылка);
						ДобавитьЗамечание(СтрокаДокумента, 1, ТекстЗамечания);
					КонецЕсли;
					
					Если ВыборкаПоиска.Контрагент <> "" И ВыборкаПоиска.Контрагент <> СтрокаДокумента.Контрагент Тогда 
						ТекстЗамечания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Контрагент в документе, загружаемом из файла, %1 не соответствует контрагенту в документе информационной базы %2. Для документа %3 будет установлен контрагент %1!'"),
							СтрокаДокумента.Контрагент,
							ВыборкаПоиска.Контрагент,
							ВыборкаПоиска.Ссылка);
						ДобавитьЗамечание(СтрокаДокумента, 1, ТекстЗамечания);
					КонецЕсли;
					
					Если ВыборкаПоиска.СуммаДокумента <> "" И ВыборкаПоиска.СуммаДокумента <> СтрокаДокумента.СуммаДокумента Тогда 
						ТекстЗамечания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Сумма документа в документе, загружаемом из файла, %1 не соответствует сумме документа в документе информационной базы %2. Для документа %3 будет установлена сумма документа %1!'"),
							СтрокаДокумента.СуммаДокумента,
							ВыборкаПоиска.СуммаДокумента,
							ВыборкаПоиска.Ссылка);
						ДобавитьЗамечание(СтрокаДокумента, 1, ТекстЗамечания);
					КонецЕсли;
					
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
		Исключение
			
		КонецПопытки	
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтрокаДокумента.Документ) Тогда
		Если СтрокаДокумента.Проведен Тогда
			СтрокаДокумента.СостояниеДокумента = 0;
		Иначе 
			СтрокаДокумента.СостояниеДокумента = 2;
		КонецЕсли;
	Иначе
		СтрокаДокумента.СостояниеДокумента     = 4;
	КонецЕсли;
	
	//Если документ с датой и номером из файла не найден, то проводится дополнительный поиск
	//по номеру, организации, расчетному счету за определенный период,
	//который берется из Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента документа,
	//в который входит дата документа из файла
	// В поиске участвуют ППисх и ПОспис, так как поиск ППвх и ПОпоступ проводится только по входящему номеру
	
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Документ) И (ВидДокумента = "ПлатежноеПоручениеИсходящее" ИЛИ ВидДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств") Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ               
	                |	ПлатежноеПоручение.Ссылка,
	                |	ПлатежноеПоручение." + РеквизитНомера + ",
	                |	ПлатежноеПоручение." + РеквизитДаты + ",
	                |	ПлатежноеПоручение." + РеквизитНомераДоп + ",
	                |	ПлатежноеПоручение." + РеквизитДатыДоп + ",
	                |	ПлатежноеПоручение.Организация,
					|	ПлатежноеПоручение.Контрагент,
					|	ПлатежноеПоручение.СуммаДокумента,
	                |	ПлатежноеПоручение.СчетОрганизации
	                |ИЗ
	                |	Документ." + ВидДокумента + " КАК ПлатежноеПоручение
	                |ГДЕ
			   		|	ВЫБОР
			   		|			КОГДА ПлатежноеПоручение." + РеквизитНомера + " <> """"
			   		|				ТОГДА ПлатежноеПоручение." + РеквизитНомера + " = &ПарамНомер
			   		|			ИНАЧЕ ПлатежноеПоручение." + РеквизитНомераДоп + " = &ПарамНомер
			   		|		КОНЕЦ
	                |	И ПлатежноеПоручение.Организация = &Организация
					|	И ПлатежноеПоручение.СтруктурноеПодразделениеОтправитель = &СтруктурноеПодразделение
					|	И ПлатежноеПоручение.СчетОрганизации = &СчетОрганизации";
					
		Периодичность = ПолучитьПериодичность(ВидДокумента);
		
		Если Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Непериодический Тогда
			
			ЗапросПоискаДокумента = Новый Запрос(ТекстЗапроса);
			
		Иначе
			
			ТекстЗапроса = ТекстЗапроса + Символы.ПС + " И ВЫБОР
										               |		КОГДА ПлатежноеПоручение." + РеквизитДаты + " <> &ПустаяДата
										               |				ТОГДА ПлатежноеПоручение." + РеквизитДаты + " МЕЖДУ &НачалоПериода И &КонецПериода
										               |			ИНАЧЕ ПлатежноеПоручение." + РеквизитДатыДоп + " МЕЖДУ &НачалоПериода И &КонецПериода
										               |		КОНЕЦ";
													
			ЗапросПоискаДокумента = Новый Запрос(ТекстЗапроса);
			
			Если Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
				ЗапросПоискаДокумента.УстановитьПараметр("НачалоПериода", НачалоГода(ДатаДок));
				ЗапросПоискаДокумента.УстановитьПараметр("КонецПериода" , КонецГода(ДатаДок));
			ИначеЕсли Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда 
				ЗапросПоискаДокумента.УстановитьПараметр("НачалоПериода", НачалоДня(ДатаДок));
				ЗапросПоискаДокумента.УстановитьПараметр("КонецПериода" , КонецДня(ДатаДок));
			ИначеЕсли Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда 
				ЗапросПоискаДокумента.УстановитьПараметр("НачалоПериода", НачалоКвартала(ДатаДок));
				ЗапросПоискаДокумента.УстановитьПараметр("КонецПериода" , КонецКвартала(ДатаДок));
			ИначеЕсли Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда 
				ЗапросПоискаДокумента.УстановитьПараметр("НачалоПериода", НачалоМесяца(ДатаДок));
				ЗапросПоискаДокумента.УстановитьПараметр("КонецПериода" , КонецМесяца(ДатаДок));		
			КонецЕсли;
			
		КонецЕсли;
					
		ЗапросПоискаДокумента.УстановитьПараметр("Организация"              , Организация);
		ЗапросПоискаДокумента.УстановитьПараметр("ПарамНомер"               , НомерДок);
		ЗапросПоискаДокумента.УстановитьПараметр("СтруктурноеПодразделение" , СтруктурноеПодразделение);
		ЗапросПоискаДокумента.УстановитьПараметр("СчетОрганизации"          , СтрокаДокумента.СчетОрганизации);
		ЗапросПоискаДокумента.УстановитьПараметр("ПустаяДата"               , Дата(1, 1, 1));
		
		ВыборкаПоиска = ЗапросПоискаДокумента.Выполнить().Выбрать();
		
		Если ВыборкаПоиска.Следующий()Тогда 
			Попытка
				СтрокаДокумента.Документ = ВыборкаПоиска.Ссылка;
				
				Если СокрЛП(ВыборкаПоиска[РеквизитНомера]) = "" Тогда
					СтрокаДокумента.НомерДок = ВыборкаПоиска[РеквизитНомераДоп];
				Иначе
					СтрокаДокумента.НомерДок = ВыборкаПоиска[РеквизитНомера];
				КонецЕсли;
				
				//Дату найденного документа не запоминаем, потому что мы ее заменим на дату из файла
				Если ВыборкаПоиска[РеквизитДаты] <> "" Тогда
					Если ВыборкаПоиска[РеквизитДаты] <> СтрокаДокумента.ДатаДок Тогда
						ТекстЗамечания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Дата входящего документа, загружаемого из файла, %1 не соответствует дате найденного документа информационной базы %2. Для документа %3 будет установлена дата входящего документа %1!'"),
							СтрокаДокумента.ДатаДок,
							ВыборкаПоиска[РеквизитДаты],
							ВыборкаПоиска.Ссылка);
						ДобавитьЗамечание(СтрокаДокумента, 1, ТекстЗамечания);
					КонецЕсли;
				ИначеЕсли ВыборкаПоиска[РеквизитДатыДоп] <> "" Тогда
					Если ВыборкаПоиска[РеквизитДатыДоп] <> СтрокаДокумента.ДатаДок Тогда
						ТекстЗамечания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Дата документа, загружаемого из файла, %1 не соответствует дате найденного документа информационной базы %2. Для документа %3 будет установлена дата %1!'"),
							СтрокаДокумента.ДатаДок,
							ВыборкаПоиска[РеквизитДатыДоп],
							ВыборкаПоиска.Ссылка);
						ДобавитьЗамечание(СтрокаДокумента, 1, ТекстЗамечания);
					КонецЕсли;
				КонецЕсли;
				
				Если ВыборкаПоиска.СчетОрганизации <> "" И ВыборкаПоиска.СчетОрганизации <> СтрокаДокумента.СчетОрганизации Тогда
					ТекстЗамечания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Банковский счет в документе, загружаемом из файла, %1 не соответствует банковскому счету в документе информационной базы %2. Для документа %3 будет установлен счет %1!'"),
						СтрокаДокумента.СчетОрганизации,
						ВыборкаПоиска.СчетОрганизации,
						ВыборкаПоиска.Ссылка);
					ДобавитьЗамечание(СтрокаДокумента, 1, ТекстЗамечания);
				КонецЕсли;
				
				Если ВыборкаПоиска.Контрагент <> "" И ВыборкаПоиска.Контрагент <> СтрокаДокумента.Контрагент Тогда
					ТекстЗамечания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Контрагент в документе, загружаемом из файла, %1 не соответствует контрагенту в документе информационной базы %2. Для документа %3 будет установлен контрагент %1!'"),
						СтрокаДокумента.Контрагент,
						ВыборкаПоиска.Контрагент,
						ВыборкаПоиска.Ссылка);
					ДобавитьЗамечание(СтрокаДокумента, 1, ТекстЗамечания);
				КонецЕсли;
				
				Если ВыборкаПоиска.СуммаДокумента <> "" И ВыборкаПоиска.СуммаДокумента <> СтрокаДокумента.СуммаДокумента Тогда
					ТекстЗамечания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Сумма документа в документе, загружаемом из файла, %1 не соответствует сумме документа в документе информационной базы %2. Для документа %3 будет установлена сумма документа %1!'"),
						СтрокаДокумента.СуммаДокумента,
						ВыборкаПоиска.СуммаДокумента,
						ВыборкаПоиска.Ссылка);
					ДобавитьЗамечание(СтрокаДокумента, 1, ТекстЗамечания);
				КонецЕсли;
				
			Исключение
				
			КонецПопытки
		КонецЕсли;
		
	КонецЕсли;
	
	//Если документ не был найден в ИБ
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Документ) Тогда
		Если ВидДокумента = "ПлатежноеПоручениеИсходящее" ИЛИ ВидДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств" Тогда
			ТекстЗамечания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документ не найден в информационной базе! Будет создан документ с номером по банку:%1 и датой по банку:%2'"),
				СтрокаДокумента.НомерДок,
				СтрокаДокумента.ДатаДок);
			ДобавитьЗамечание(СтрокаДокумента, 1, ТекстЗамечания);
		КонецЕсли;
	КонецЕсли;
			
	Если ИспользоватьГраницуОбработки Тогда
		Если ЗначениеЗаполнено(ДатаГраницыОбработки) Тогда
			Если НачалоДня(ДатаДок) <= НачалоДня(ДатаГраницыОбработки) Тогда
				ДобавитьЗамечание(СтрокаДокумента, 3, НСтр("ru = 'Документ имеет дату равной или меньшей границы обработки!'"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

Процедура РаспознатьДанныеВСтроке_ТипДокумента(СтрокаДокумента, ДокументыДляИмпорта, ИспользоватьГраницуОбработки, ДатаГраницыОбработки, Принудительно)   Экспорт
	
	// Преобразуем в дату из строки, если не пустая
	Если НЕ ПустаяСТрока(СтрокаДокумента.ДатаСписано) Тогда  
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.Списано, СтрокаДокумента.ДатаСписано);
		Если Не ПустаяСтрока(Результат) Тогда        
			СтрокаДокумента.Списано = Дата(1,1,1);
		КонецЕсли;
		
	Иначе
		СтрокаДокумента.Списано = Дата(1,1,1);
		
	КонецЕсли;
	
	// Преобразуем в дату из строки, если не пустая
	Если НЕ ПустаяСТрока(СтрокаДокумента.ДатаПоступило) Тогда
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.Поступило, СтрокаДокумента.ДатаПоступило);
		Если Не ПустаяСтрока(Результат) Тогда            
			СтрокаДокумента.Поступило = Дата(1,1,1);
		КонецЕсли;
		
	Иначе
		СтрокаДокумента.Поступило = Дата(1,1,1);
		
	КонецЕсли;
	
	Если Не Принудительно Тогда 
		//!!!Здесь нужно проверить на макс-мин и присвоить СтрокаДокумента.Операция для мин ПОспис, для макс ППисх.
		НовыйВидДокумента = ПроверитьДокументНаПовторяемостьВФайле(СтрокаДокумента, ДокументыДляИмпорта);
	
	КонецЕсли;
	
	ВидДокумента = ПолучитьВидДокумента(СтрокаДокумента.Операция, СтрокаДокумента.Списано, СтрокаДокумента.Поступило);
	
	Если ВидДокумента = "ПлатежноеПоручениеИсходящее" Тогда
		// платежное поручение исходящее
		СтрокаДокумента.ТипДокумента = 1;
		
		Если ИспользоватьГраницуОбработки Тогда
			Если ЗначениеЗаполнено(ДатаГраницыОбработки) Тогда
				Если ЗначениеЗаполнено(СтрокаДокумента.Списано) Тогда
					Если НачалоДня(СтрокаДокумента.Списано) <= НачалоДня(ДатаГраницыОбработки) Тогда
						ДобавитьЗамечание(СтрокаДокумента, 3, НСтр("ru = 'Документ имеет дату списания равной или меньшей границы обработки !'"));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств" Тогда
		СтрокаДокумента.ТипДокумента = 2;

	ИначеЕсли ВидДокумента = "ПлатежноеПоручениеВходящее" Тогда
		СтрокаДокумента.ТипДокумента = 11;
		
		Если ИспользоватьГраницуОбработки Тогда
			Если ЗначениеЗаполнено(ДатаГраницыОбработки) Тогда
				Если ЗначениеЗаполнено(СтрокаДокумента.Поступило) Тогда
					Если НачалоДня(СтрокаДокумента.Поступило) <= НачалоДня(ДатаГраницыОбработки) Тогда
						ДобавитьЗамечание(СтрокаДокумента, 3, НСтр("ru = 'Документ имеет дату поступления равной или меньшей границы обработки !'"));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств" Тогда
		СтрокаДокумента.ТипДокумента = 12;
		
	Иначе
		// платежное поручение входящее
		СтрокаДокумента.ТипДокумента = 0;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РаспознатьДанныеВСтроке_СуммаДокумента(СтрокаДокумента)
	
	Буфер = СокрЛП(СтрЗаменить(СтрокаДокумента.Сумма, " ", ""));
	
	Попытка
		Сумма = Число(Буфер);
		
		Если Сумма < 0 Тогда
			Сумма = - Сумма;
		КонецЕсли;
		
		СтрокаДокумента.СуммаДокумента =Сумма ;
		
	Исключение
		ДобавитьЗамечание(СтрокаДокумента, 4, НСтр("ru = 'Указана неверная сумма документа!'"));
		
	КонецПопытки;
	
	
КонецПроцедуры

Процедура РаспознатьДанныеВСтроке_СчетКонтрагента(СтрокаДокумента, Организация, Импорт_РасчетныеСчета) Экспорт

	// Ищем по номеру счета среди счетов контрагента
	// Если контранета распознать не удалось ищем счет везде и подставляем в контрагента его владельца
		
	ЗапросПоискаСчета = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                                  |	БанковскиеСчета.Ссылка,
	                                  |	БанковскиеСчета.НомерСчета,
	                                  |	БанковскиеСчета.Владелец
	                                  |ИЗ
	                                  |	Справочник.БанковскиеСчета КАК БанковскиеСчета
	                                  |ГДЕ
	                                  |	БанковскиеСчета.НомерСчета = &НомерСчета");
	
	Если СтрокаДокумента.ТипДокумента < 10 Тогда
		ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СтрокаДокумента.ПолучательИИК);
		СчетОрганизации = СтрокаДокумента.ПлательщикИИК;
		
	Иначе
		ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СтрокаДокумента.ПлательщикИИК);
		СчетОрганизации = СтрокаДокумента.ПолучательИИК;
		
	КонецЕсли;
	
	ВыборкаПоиска = ЗапросПоискаСчета.Выполнить().Выбрать();
	
	Кандидат = Неопределено;
	СтепеньКандидата = 0;
	
	Пока ВыборкаПоиска.Следующий() Цикл
		
		Если СтепеньКандидата = 0 Тогда
			Кандидат = ВыборкаПоиска.Ссылка;
			
			Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
				Прервать;
				
			КонецЕсли;
			
			Если ВыборкаПоиска.Владелец = СтрокаДокумента.Контрагент Тогда
				Прервать;
				
			Иначе
				СтепеньКандидата = 1;
				
			КонецЕсли;
			
		Иначе
			Если ВыборкаПоиска.Владелец = СтрокаДокумента.Контрагент Тогда
				Прервать;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаДокумента.СчетКонтрагента = Кандидат;
	
	// Еще определяем счет организации
	ЗапросПоискаСчета = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                                  |	БанковскиеСчета.Ссылка,
	                                  |	БанковскиеСчета.НомерСчета,
	                                  |	БанковскиеСчета.Владелец
	                                  |ИЗ
	                                  |	Справочник.БанковскиеСчета КАК БанковскиеСчета
	                                  |ГДЕ
									  |	БанковскиеСчета.Владелец = &Организация
									  |	И БанковскиеСчета.НомерСчета = &НомерСчета");
	
	ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СчетОрганизации);
	ЗапросПоискаСчета.УстановитьПараметр("Организация", Организация);
	
	ВыборкаПоиска = ЗапросПоискаСчета.Выполнить().Выбрать();
	
	Если ВыборкаПоиска.Следующий() Тогда
		
		СтрокаРССчетов = Импорт_РасчетныеСчета.Найти(СчетОрганизации, "РасчСчет");
		
		Если СтрокаРССчетов = Неопределено Тогда
			ТекстЗамечания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В документе указан счет, не определенный в заголовке:%1!'"), СчетОрганизации);
			ДобавитьЗамечание(СтрокаДокумента, 2, ТекстЗамечания);
		КонецЕсли;
		
		СтрокаДокумента.СчетОрганизации = ВыборкаПоиска.Ссылка;
		
	Иначе
		ДобавитьЗамечание(СтрокаДокумента, 2, НСтр("ru = 'В документе указан счет, не принадлежащий организации!'"));
		
	КонецЕсли;

КонецПроцедуры

Процедура РаспознатьДанныеВСтроке_Контрагент(СтрокаДокумента, Организация, СтруктурноеПодразделение, СтекОповещений) Экспорт

	// Поиск контрагента осуществляется по РНН
	// Нужно будет добавить поиск по ИИН / БИН
	
	Если ЗначениеЗаполнено(СтруктурноеПодразделение) Тогда
		СтруктурнаяЕдиница = ?(СтруктурноеПодразделение.УказыватьРеквизитыГоловнойОрганизации, Организация, СтруктурноеПодразделение);
	Иначе 
		СтруктурнаяЕдиница = Организация;
	КонецЕсли;
			
	////////////////////////
	ЗапросПоискаКонтрагента = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                                       |	Контрагенты.Ссылка,
	                                       |	Контрагенты.Наименование,
	                                       |	Контрагенты.ИдентификационныйКодЛичности
	                                       |ИЗ
	                                       |	Справочник.Контрагенты КАК Контрагенты
	                                       |ГДЕ
	                                       |	Контрагенты.ИдентификационныйКодЛичности = &КонтрагентБИН_ИИН");
	
	Если СтрокаДокумента.ТипДокумента < 10 Тогда
		ЗапросПоискаКонтрагента.УстановитьПараметр("КонтрагентБИН_ИИН", СтрокаДокумента.ПолучательБИН_ИИН);
		БИН_ИИНОрганизации = СтрокаДокумента.ПлательщикБИН_ИИН;
		БИН_ИИНКонтр = СтрокаДокумента.ПолучательБИН_ИИН;
		
	Иначе
		ЗапросПоискаКонтрагента.УстановитьПараметр("КонтрагентБИН_ИИН", СтрокаДокумента.ПлательщикБИН_ИИН);
		БИН_ИИНОрганизации = СтрокаДокумента.ПолучательБИН_ИИН;
		БИН_ИИНКонтр = СтрокаДокумента.ПлательщикБИН_ИИН;
		
	КонецЕсли;
	
	Если СокрЛП(СтруктурнаяЕдиница.ИдентификационныйНомер) <> СокрЛП(БИН_ИИНОрганизации) Тогда
		ТекстЗамечания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В документе указан неверный БИН/ИИН организации: %1 !'"), БИН_ИИНОрганизации);
		ДобавитьЗамечание(СтрокаДокумента, 2, ТекстЗамечания);
	КонецЕсли;
	
	ВыборкаПоиска = ЗапросПоискаКонтрагента.Выполнить().Выбрать();
	
	//Если контрагент найден по БИН/ИИН то он прописывается с строке таблицы импорта,
	//а если не был найден, то производится поиск по наименованию.
	Если ВыборкаПоиска.Следующий() Тогда 
		СтрокаДокумента.Контрагент = ВыборкаПоиска.Ссылка;
	Иначе
		ЗапросПоискаКонтрагента.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Ссылка,
		|	Контрагенты.ИдентификационныйКодЛичности,
		|	Контрагенты.Наименование
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Наименование = &КонтрагентНаименование";
		
		Если СтрокаДокумента.ТипДокумента < 10 Тогда
			ЗапросПоискаКонтрагента.УстановитьПараметр("КонтрагентНаименование", СтрокаДокумента.ПолучательНаименование);
		Иначе
			ЗапросПоискаКонтрагента.УстановитьПараметр("КонтрагентНаименование", СтрокаДокумента.ПлательщикНаименование);
		КонецЕсли;
		
		ВыборкаПоиска = ЗапросПоискаКонтрагента.Выполнить().Выбрать();
		ВыборкаПоиска.Следующий();
		
		СтрокаДокумента.Контрагент = ВыборкаПоиска.Ссылка;
		Если ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда 
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Контрагент ""%1"" найден по наименованию. БИН/ИИН контрагента %2 не совпадает с БИН/ИИН контрагента из файла %3'"),
				СтрокаДокумента.Контрагент,
				ВыборкаПоиска.ИдентификационныйКодЛичности,
				БИН_ИИНКонтр);
			
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьВидДокумента(ПлатежнаяОперация, Списано, Поступило)
	
	ПлатежноеПоручение = (СокрЛП(ВРЕГ(СтрЗаменить(ПлатежнаяОперация, " ", "")) = "ПЛАТЕЖНОЕПОРУЧЕНИЕ"));
	Списали = ЗначениеЗаполнено(Списано);
	Зачислили = ЗначениеЗаполнено(Поступило);
	
	Если Списали И Зачислили Тогда
		// Это исходящее платежное поручение с операцией "перевод на другой счет"
		ВидДокумента = "ПлатежноеПоручениеИсходящее";
		
		
	ИначеЕсли Списали Тогда
		Если ПлатежноеПоручение Тогда
			// Списали средства платежным поручением
			ВидДокумента = "ПлатежноеПоручениеИсходящее";
			
		Иначе
			// Списали средства прочим документом
			ВидДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств";
			
		КонецЕсли;
		
	ИначеЕсли Зачислили Тогда
		Если ПлатежноеПоручение Тогда
			// Зачислили средства платежным поручением
			ВидДокумента = "ПлатежноеПоручениеВходящее";
			
		Иначе
			// Зачислили средства прочим документом
			ВидДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств";
			
		КонецЕсли;
		
	Иначе
		// Движение средств не произошло
		Если ПлатежноеПоручение Тогда
			// Платежное поручение исходящее - выгруженное, но не исполненное
			ВидДокумента = "ПлатежноеПоручениеИсходящее";
			
		Иначе
			ВидДокумента = "ПлатежноеПоручениеИсходящее";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВидДокумента;
	
КонецФункции

Функция ПроверитьДокументНаПовторяемостьВФайле(СтрокаСекции, ДокументыКИмпорту)

	Значение = "";
	
	СовпадающиеДокументы = ДокументыКИмпорту.Скопировать();
	СовпадающиеДокументы.Очистить();
	
	ВидТекущегоДокумента = ПолучитьВидДокумента(СтрокаСекции.Операция, СтрокаСекции.Списано, СтрокаСекции.Поступило);
	
	ЭтоМин = Ложь;
	
	Для Каждого Стр Из ДокументыКИмпорту Цикл
		
		ВидДокумента = ПолучитьВидДокумента(Стр.Операция, Стр.Списано, Стр.Поступило);
		
		ДатаДок = Дата(1,1,1);
		Результат = ПолучитьДатуИзСтроки(ДатаДок,СтрокаСекции.ДатаДокумента);
		СтрокаСекции.ДатаДок = ДатаДок;
		
		ДатаДок = Дата(1,1,1);
		Результат = ПолучитьДатуИзСтроки(ДатаДок,Стр.ДатаДокумента);
		Стр.ДатаДок = ДатаДок;
		
		Если ПустаяСтрока(Результат) Тогда
			Если (СтрокаСекции.НомерДокумента = Стр.НомерДокумента) 
				И Год(СтрокаСекции.ДатаДок) = Год(Стр.ДатаДок) 
				И ЗначениеЗаполнено(СтрокаСекции.СуммаРасход) 
				И ЗначениеЗаполнено(Стр.СуммаРасход) И ВидТекущегоДокумента = ВидДокумента 
			Тогда 
				
				Новая = СовпадающиеДокументы.Добавить();
				ЗаполнитьЗначенияСвойств(Новая,Стр);
				РаспознатьДанныеВСтроке_СуммаДокумента(Новая);								
												
			КонецЕсли;
		КонецЕсли;
				
	КонецЦикла;
	
	Если СовпадающиеДокументы.Количество()= 2 Тогда 
		
		Мин = 0;
		НомерСтроки = 0;
		Для Каждого Док Из СовпадающиеДокументы Цикл 
			СуммаДок = Док.СуммаДокумента;
			Если СуммаДок < Мин Тогда 
				Мин = СуммаДок;
			Иначе
				Мин = СуммаДок;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаСекции.СуммаДокумента = Мин Тогда 
			СтрокаСекции.Операция = "ПлатежныйОрдер";
		Иначе
			СтрокаСекции.Операция = "ПлатежноеПоручение";
		КонецЕсли;
			
	КонецЕсли;
	
	Значение = ПолучитьВидДокумента(СтрокаСекции.Операция, СтрокаСекции.Списано, СтрокаСекции.Поступило);
	
	Возврат Значение;
	
КонецФункции // ПроверитьДокументНаПовторяемостьВФайле()

Функция РазобратьФайлИмпортаXML(ДокументыДляИмпорта,
								Импорт_РасчетныеСчета,
								Импорт_НеПустые,
								Импорт_Заголовок,
								ИмяВременногоФайла,
								Организация,
								СтруктурноеПодразделение,
								ИспользоватьГраницуОбработки,
								ДатаГраницыОбработки,
								СтекОповещений)
										

	СтруктураРеквизитов = СформироватьСтруктуруЗаголовковИмпорта();
	
	ТегиРасчетногоСчета = ТегиРасчетногоСчетаСоответствие();
	ТегиЗаголовка		= ТегиЗаголовкаСоответствие(); 
	
	Импорт_ФайлДляРазбора = Новый ЧтениеXML;
	Импорт_ФайлДляРазбора.ОткрытьФайл(ИмяВременногоФайла);
	
	КорневойЭлемент = 1;
	ОшибкаЗагрузки = "";
	
	Пока Импорт_ФайлДляРазбора.Прочитать() Цикл
		
		Если КорневойЭлемент = 1 Тогда
			Если Импорт_ФайлДляРазбора.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если Импорт_ФайлДляРазбора.Имя = "XML1CClientBankExchange" Тогда
					КорневойЭлемент = 0;
				Иначе
					ОшибкаЗагрузки = НСтр("ru = 'В файле импорта отсутствует признак обмена ""XML1CClientBankExchange""!'");
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Импорт_ФайлДляРазбора.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Если Импорт_ФайлДляРазбора.Имя = "XML1CClientBankExchange" Тогда
				Пока Импорт_ФайлДляРазбора.ПрочитатьАтрибут() Цикл
					Тег = СокрЛП(Импорт_ФайлДляРазбора.Имя);
					Тег = ВРег(Тег);
					Значение = СокрЛП(Импорт_ФайлДляРазбора.Значение);
					
					Если Тег = "РАСЧСЧЕТ" Тогда
						Если СчетПринадлежитОрганизации(Значение, Организация) Тогда
							СтрокаРССчетов = Импорт_РасчетныеСчета.Найти(Значение, "РасчСчет");
							Если СтрокаРССчетов = Неопределено Тогда
								СтрокаРССчетов = Импорт_РасчетныеСчета.Добавить();
								СтрокаРССчетов.РасчСчет = Значение;
							КонецЕсли;
						Иначе
							ОшибкаЗагрузки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В заголовке файла импорта указан счет, не принадлежащий организации: %1 !'"), Значение);
							Прервать;
						КонецЕсли;
						Продолжить;
					КонецЕсли;
					
					Если ТегиЗаголовка[Тег] = Истина Тогда
						Импорт_Заголовок[Тег] = Значение;
					Иначе
						ОшибкаЗагрузки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неверный реквизит заголовка %1'"), Тег);
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			Если Импорт_ФайлДляРазбора.Имя = "СЕКЦИЯРАСЧСЧЕТ" Тогда
				
				СтрокаРССчетов = Импорт_РасчетныеСчета.Добавить();
				Если Импорт_ФайлДляРазбора.ПрочитатьАтрибут() Тогда
					СтрокаРССчетов["РасчСчет"] = Импорт_ФайлДляРазбора.Значение;
				КонецЕсли;
				
				Пока Импорт_ФайлДляРазбора.Прочитать() Цикл
					
					Если Импорт_ФайлДляРазбора.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
						Если Импорт_ФайлДляРазбора.Имя = "СЕКЦИЯРАСЧСЧЕТ" Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
					
					Если Импорт_ФайлДляРазбора.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						Тег = Импорт_ФайлДляРазбора.Имя;
						Тег = ВРег(Тег);
						
						Импорт_ФайлДляРазбора.Прочитать();
						
						Значение = Импорт_ФайлДляРазбора.Значение;
						
						Импорт_ФайлДляРазбора.Прочитать();
						
						Если ТегиРасчетногоСчета[Тег] = Истина Тогда
							СтрокаРССчетов[Тег] = Значение;       
						Иначе
							ОшибкаЗагрузки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неверный реквизит в секции описания расчетного счета %1'"), Тег);
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если Импорт_ФайлДляРазбора.Имя = "СЕКЦИЯДОКУМЕНТ" Тогда
				
				СтрокаДокумента = ДокументыДляИмпорта.Добавить();
				
				Приход = 0;
				Расход = 0;
				
				Пока Импорт_ФайлДляРазбора.Прочитать() Цикл
					
					Если Импорт_ФайлДляРазбора.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
						Если Импорт_ФайлДляРазбора.Имя = "СЕКЦИЯДОКУМЕНТ" Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
					
					Если Импорт_ФайлДляРазбора.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						Тег = Импорт_ФайлДляРазбора.Имя;
						Тег = ВРег(Тег);
						
						Импорт_ФайлДляРазбора.Прочитать();
						
						Значение = Импорт_ФайлДляРазбора.Значение;
						
						Импорт_ФайлДляРазбора.Прочитать();
						
						Если СформироватьСтруктуруИмпорт_Загружаемые().Свойство(Тег) = Истина Тогда
							Если  Тег = "ВИДДОКУМЕНТА" Тогда 
								СтрокаДокумента.Операция = Значение;
							Иначе
								СтрокаДокумента[Тег] = Значение;                 
							КонецЕсли;
						Иначе
							ОшибкаЗагрузки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неверный реквизит платежного документа %1'"), Тег);
							Прервать;
						КонецЕсли;
						
						Если Тег = "СУММАПРИХОД" Тогда 
							Приход = 1;
							СтрокаДокумента.Сумма=Значение;
						КонецЕсли;
						
						Если Тег = "СУММАРАСХОД" Тогда 
							Расход = 1;
							СтрокаДокумента.Сумма=Значение;    
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если Приход = 1 Тогда 
					СтрокаДокумента.ДатаПоступило = СтрокаДокумента.ДатаОперации;
				КонецЕсли;
				
				Если Расход = 1 Тогда 
					СтрокаДокумента.ДатаСписано = СтрокаДокумента.ДатаОперации;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Импорт_ФайлДляРазбора.Закрыть();
	
	Если НЕ ПустаяСтрока(ОшибкаЗагрузки) Тогда
		
		ДокументыДляИмпорта.Очистить();
		
		СтекОповещений.Добавить(Новый Структура("Текст", ОшибкаЗагрузки));
		
		ТекстСообщения = НСтр("ru = 'Импорт не выполнен.'");
		СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Для Каждого СтрокаДокумента Из ДокументыДляИмпорта Цикл
		// Последовательно обрабатываем каждую загруженную строку
				
		//Распознаем реквизиты - порядок распознания важен
		РаспознатьДанныеВСтроке_СуммаДокумента(СтрокаДокумента);
		
		РаспознатьДанныеВСтроке_ТипДокумента(СтрокаДокумента, ДокументыДляИмпорта, ИспользоватьГраницуОбработки, ДатаГраницыОбработки, Ложь);
		
		РаспознатьДанныеВСтроке_Контрагент(СтрокаДокумента, Организация, СтруктурноеПодразделение, СтекОповещений);
		
		РаспознатьДанныеВСтроке_СчетКонтрагента(СтрокаДокумента, Организация, Импорт_РасчетныеСчета);
		
		///Производим поиск документа в ИБ
		РаспознатьДанныеВСтроке_Документ(СтрокаДокумента, Организация, СтруктурноеПодразделение, ИспользоватьГраницуОбработки, ДатаГраницыОбработки);
		
		// Для каждого реквизита (= колонка) надо проверить на пустое значение
		Для Каждого КолонкаИмпорта Из ДокументыДляИмпорта.Колонки Цикл
			ПроверитьНаПустоеЗначениеИмпорта(СтрокаДокумента, Импорт_НеПустые, КолонкаИмпорта.Имя, СтруктураРеквизитов[КолонкаИмпорта.Имя]);
		КонецЦикла;
				
		Если СтрокаДокумента.Готовность < 3 Тогда
			СтрокаДокумента.Загрузить = Истина;
		КонецЕсли;
				
	КонецЦикла;
			
	ТекстСообщения = НСтр("ru = 'Обработка файла импорта завершена успешно.'");
	СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
	
	Возврат Истина;
	
КонецФункции

Функция РазобратьФайлИмпортаTXT(ДокументыДляИмпорта,
										Импорт_РасчетныеСчета,
										Импорт_НеПустые,
										Импорт_Заголовок,
										ИмяВременногоФайла,
										Кодировка,
										Организация,
										СтруктурноеПодразделение,
										ИспользоватьГраницуОбработки,
										ДатаГраницыОбработки,
										СтекОповещений)
										
	// Подготавливаем структуры обработки данных
	Импорт_ПризнакОбмена = Ложь;
	
	СтруктураРеквизитов = СформироватьСтруктуруЗаголовковИмпорта();
	
	// Получаем исходные данные
	Импорт_МассивСтрок  = ПрочитатьФайл(ИмяВременногоФайла, Кодировка, СтекОповещений);
	Если Импорт_МассивСтрок = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	ТегиЗаголовка		= ТегиЗаголовкаСоответствие(); 
	
	Импорт_КоличествоСтрок = Импорт_МассивСтрок.Количество();
	Если Импорт_КоличествоСтрок = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Файл загрузки не содержит данных!'");
		СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// Заполняем первичные структуры данных
	Импорт_ТекущаяСтрока   = 1;
	
	Наличие = 0;
	Пока Импорт_ТекущаяСтрока <= Импорт_КоличествоСтрок Цикл
		
		Стр = ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_МассивСтрок);
		
		Если Лев(Врег(СокрЛП(Стр)), 14)="СЕКЦИЯДОКУМЕНТ" Тогда
			
			Значение = "";
			Тег 	 = "";
			РазобратьТеговуюСтроку(Стр, Тег, Значение);  
			
			Если Тег = "СЕКЦИЯДОКУМЕНТ" Тогда //?
				НоваяСтрокаДокументов = ДокументыДляИмпорта.Добавить();
				
				Если НЕ ЗагрузитьСекциюДокумента(НоваяСтрокаДокументов, Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_МассивСтрок, СтекОповещений) Тогда
					Возврат Ложь;
				КонецЕсли;
				
				Если (Импорт_ТекущаяСтрока-1) = Импорт_КоличествоСтрок Тогда 
					Наличие = 1;
					Если НЕ Импорт_ПризнакОбмена Тогда
						
						ТекстСообщения = НСтр("ru = 'В файле импорта отсутствует признак обмена ""1CClientBankExchange""!'");
						СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));

						
						Возврат Ложь;
					КонецЕсли;
			        // Формируем объектные структуры данных
					Для каждого СтрокаДокумента Из ДокументыДляИмпорта Цикл
						// Последовательно обрабатываем каждую загруженную строку
				
						//Распознаем реквизиты - порядок распознания важен
						РаспознатьДанныеВСтроке_СуммаДокумента(СтрокаДокумента);
				
						РаспознатьДанныеВСтроке_ТипДокумента(СтрокаДокумента,ДокументыДляИмпорта, ИспользоватьГраницуОбработки, ДатаГраницыОбработки, Ложь);
				
						РаспознатьДанныеВСтроке_Контрагент(СтрокаДокумента, Организация, СтруктурноеПодразделение, СтекОповещений);
				
						РаспознатьДанныеВСтроке_СчетКонтрагента(СтрокаДокумента, Организация, Импорт_РасчетныеСчета);
						
						//Производим поиск документа в ИБ
						РаспознатьДанныеВСтроке_Документ(СтрокаДокумента, Организация, СтруктурноеПодразделение, ИспользоватьГраницуОбработки, ДатаГраницыОбработки);
				
						// Для каждого реквизита (= колонка) надо проверить на пустое значение
						Для каждого КолонкаИмпорта из ДокументыДляИмпорта.Колонки Цикл
							ПроверитьНаПустоеЗначениеИмпорта(СтрокаДокумента, Импорт_НеПустые, КолонкаИмпорта.Имя, СтруктураРеквизитов[КолонкаИмпорта.Имя]);
						КонецЦикла;
				
						Если СтрокаДокумента.Готовность < 3 Тогда
							СтрокаДокумента.Загрузить = Истина;
						КонецЕсли;
				
					КонецЦикла;
			        	ТекстСообщения = НСтр("ru = 'Обработка файла импорта завершена успешно.'");
						СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
			        	Возврат Ложь;
				КонецЕсли;
								
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Нарушена структура файла импорта, строка %1 : %2'"), Импорт_ТекущаяСтрока - 1, Стр);
				СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
				Возврат Ложь;
				
			КонецЕсли;
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 14)="СЕКЦИЯРАСЧСЧЕТ" Тогда
			СтрокаРССчетов = Импорт_РасчетныеСчета.Добавить();
			Если НЕ ЗагрузитьСекциюРасчСчета(СтрокаРССчетов, Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_МассивСтрок, СтекОповещений) Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Нарушена структура файла импорта в секции описания расчетного счета! Строка: %1'"), Импорт_ТекущаяСтрока - 1);
				СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
				
				Возврат Ложь;
			КонецЕсли;
				
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 8)="РАСЧСЧЕТ" Тогда
			Значение = "";
			Тег = "";
			РазобратьТеговуюСтроку(Стр, Тег, Значение);
			
			Если Тег = "РАСЧСЧЕТ" Тогда
				Если СчетПринадлежитОрганизации(Значение, Организация) Тогда
					СтрокаРССчетов = Импорт_РасчетныеСчета.Найти(Значение, "РасчСчет");
					Если СтрокаРССчетов = Неопределено Тогда
						СтрокаРССчетов = Импорт_РасчетныеСчета.Добавить();
						СтрокаРССчетов.РасчСчет = Значение;
					КонецЕсли;
				Иначе
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В заголовке файла импорта указан счет, не принадлежащий организации: %1!'"), Значение);
					СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
					
					Возврат Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 8)="ДОКУМЕНТ" Тогда
			//Импорт_ВидыДокументов.Добавить(Значение);

		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 10)="КОНЕЦФАЙЛА" И Наличие = 0 Тогда
			Если НЕ Импорт_ПризнакОбмена Тогда
				
				ТекстСообщения = НСтр("ru = 'В файле импорта отсутствует признак обмена ""1CClientBankExchange""!'");
				СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
					
				Возврат Ложь;
			КонецЕсли;
			
			// Формируем объектные структуры данных
			Для Каждого СтрокаДокумента Из ДокументыДляИмпорта Цикл
				// Последовательно обрабатываем каждую загруженную строку
				
				//Распознаем реквизиты - порядок распознания важен
				РаспознатьДанныеВСтроке_СуммаДокумента(СтрокаДокумента);

				РаспознатьДанныеВСтроке_ТипДокумента(СтрокаДокумента, ДокументыДляИмпорта, ИспользоватьГраницуОбработки, ДатаГраницыОбработки, Ложь);
				
				РаспознатьДанныеВСтроке_Контрагент(СтрокаДокумента, Организация, СтруктурноеПодразделение, СтекОповещений);
				
				РаспознатьДанныеВСтроке_СчетКонтрагента(СтрокаДокумента, Организация, Импорт_РасчетныеСчета);
				
				//Производим поиск документа в ИБ
				РаспознатьДанныеВСтроке_Документ(СтрокаДокумента, Организация, СтруктурноеПодразделение, ИспользоватьГраницуОбработки, ДатаГраницыОбработки);
				
				// Для каждого реквизита (= колонка) надо проверить на пустое значение
				Для каждого КолонкаИмпорта из ДокументыДляИмпорта.Колонки Цикл
					Если Найти(КолонкаИмпорта.Имя, "РНН") = 0 Тогда
						// РНН не проверяем
						ПроверитьНаПустоеЗначениеИмпорта(СтрокаДокумента, Импорт_НеПустые, КолонкаИмпорта.Имя, СтруктураРеквизитов[КолонкаИмпорта.Имя]);
					КонецЕсли;
				КонецЦикла;
				
				Если СтрокаДокумента.Готовность < 3 Тогда
					СтрокаДокумента.Загрузить = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
			ТекстСообщения = НСтр("ru = 'Обработка файла импорта завершена успешно.'");
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
			
			Возврат Истина;
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 20)="1CCLIENTBANKEXCHANGE" Тогда
			Импорт_ПризнакОбмена = Истина;
			
		Иначе
			ЗагрузитьСтрокуЗаголовка(Стр, ТегиЗаголовка, Импорт_Заголовок, Импорт_ТекущаяСтрока, СтекОповещений);
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьВыборкуОрганизаций() Экспорт
	
	ЗапросПоОрганизациям = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|");
	
	Возврат ЗапросПоОрганизациям.Выполнить().Выбрать();
	
КонецФункции

Процедура УстановитьСвойство(Объект, ИмяСвойства, ЗначениеСвойства)
	
	Если Объект[ИмяСвойства] <> ЗначениеСвойства Тогда
		Объект[ИмяСвойства] = ЗначениеСвойства;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПредставлениеОбъекта(Объект)
	
	Номер = ?(ПустаяСтрока(Объект.Номер), "%Номер%", СокрЛП(Объект.Номер));
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежноеПоручениеВходящее") Тогда
		НазваниеОбъекта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'документ ""Входящее платежное поручение"" № %1 от %2'") , Номер, Объект.Дата);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежноеПоручениеИсходящее") Тогда
		НазваниеОбъекта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'документ ""Исходящее платежное поручение"" № %1 от %2'"), Номер, Объект.Дата);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежныйОрдерСписаниеДенежныхСредств") Тогда
		НазваниеОбъекта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'документ ""Платежный ордер (списание)"" № %1 от %2'")   , Номер, Объект.Дата);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежныйОрдерПоступлениеДенежныхСредств") Тогда
		НазваниеОбъекта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'документ ""Платежный ордер (поступление)"" № %1 от %2'"), Номер, Объект.Дата);
		
	Иначе
		НазваниеОбъекта = НСтр("ru = 'объект'");
		
	КонецЕсли;
	
	Возврат НазваниеОбъекта;
	
КонецФункции

Функция ПроверитьДокументДляЗагрузки(СтуктураДокумента)
	
	Результат = "";
	
	Если СтуктураДокумента.Готовность > 3 Тогда
		Результат = СтуктураДокумента.ОписаниеОшибок;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьТаблицуДляЗагрузки(ДокументыКИмпорту, ИспользоватьГраницуОбработки, ДатаГраницыОбработки, СтекОповещений)
	
	Для каждого СтрокаСекции из ДокументыКИмпорту Цикл
		
		Если СтрокаСекции.Загрузить Тогда
			
			Если ИспользоватьГраницуОбработки Тогда
				
				Если ЗначениеЗаполнено(ДатаГраницыОбработки) Тогда
					
					Если НачалоДня(СтрокаСекции.ДатаДок) <= НачалоДня(ДатаГраницыОбработки) Тогда
						
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Платежный документ ""%1"" № %2 от %3 имеет дату равной или меньшей границы обработки! Документ не будет загружен!'"), 
																									СтрокаСекции.Операция, 
																									СтрокаСекции.НомерДок,
																									СтрокаСекции.ДатаДок);
						СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
						СтрокаСекции.Загрузить = Ложь;
						
					ИначеЕсли ЗначениеЗаполнено(СтрокаСекции.Поступило) Тогда
						Если НачалоДня(СтрокаСекции.ДатаДок) <= НачалоДня(ДатаГраницыОбработки) Тогда
							
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Платежный документ ""%1"" №%2 от %3 имеет дату поступления средств равной или меньшей границы обработки! Документ не будет загружен!'"),
																									СтрокаСекции.Операция,
																									СтрокаСекции.НомерДок,
																									СтрокаСекции.ДатаДок);
							
							СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
							СтрокаСекции.Загрузить = Ложь;
						КонецЕсли;
						
						
					ИначеЕсли ЗначениеЗаполнено(СтрокаСекции.Списано) Тогда
						Если НачалоДня(СтрокаСекции.ДатаДок) <= НачалоДня(ДатаГраницыОбработки) Тогда
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Платежный документ ""%1"" №%2 от %3 имеет дату списания средств равной или меньшей границы обработки! Документ не будет загружен!'"),
																									СтрокаСекции.Операция,
																									СтрокаСекции.НомерДок,
																									СтрокаСекции.ДатаДок);
							
							СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
							СтрокаСекции.Загрузить = Ложь;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
			
КонецПроцедуры	
	
Функция ПривестиНомер(НомерДокумента, Номер)
	
	НовыйНомер = "";
	ДлинаНомера = СтрДлина(Номер);
	ДлинаНомераДокумента = СтрДлина(НомерДокумента);
	
	Возврат Лев(НомерДокумента, ДлинаНомераДокумента - ДлинаНомера) + Номер;
	
КонецФункции

Функция СоздатьНовыйПлатежныйДокумент(ВидДокумента, Номер, Дата)
	
	НовыйДокумент = Документы[ВидДокумента].СоздатьДокумент();
	
	//Если ВидДокумента = "ПлатежноеПоручениеИсходящее" Тогда
	//	НовыйДокумент.Номер = ПривестиНомер(НовыйДокумент.Номер, Номер);
	//	НовыйДокумент.ДатаВыписки = Дата;
	//	
	//ИначеЕсли ВидДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств" Тогда
	//	НовыйДокумент.Номер = ПривестиНомер(НовыйДокумент.Номер, Номер);
	//	НовыйДокумент.Дата = Дата;
	//	
	//ИначеЕсли ВидДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств" Тогда
	//	НовыйДокумент.НомерВходящегоДокумента = Номер;              
	//	НовыйДокумент.ДатаВходящегоДокумента = Дата;

	//ИначеЕсли ВидДокумента = "ПлатежноеПоручениеВходящее" Тогда
		НовыйДокумент.НомерВходящегоДокумента = Номер;              
		НовыйДокумент.ДатаВходящегоДокумента = Дата;
	//	
	//КонецЕсли;

	Возврат НовыйДокумент;
	
КонецФункции

//поиск и создание договоров
Функция СоздатьНужныйДоговор(Владелец, ТекОрганизация, Плательщик, ВалютаДоговора) Экспорт
		
	Запрос=Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	ДоговорыКонтрагентов.Организация = &Организация
	               |	И ДоговорыКонтрагентов.Владелец = &Владелец
	               |	И ДоговорыКонтрагентов.ВидДоговора В(&ВидДоговора)
	               |	И ДоговорыКонтрагентов.Ссылка = &ОсновнойДоговорКонтрагента
	               |	И &УсловиеВалютаВзаиморасчетов
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ДоговорыКонтрагентов.Ссылка
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	ДоговорыКонтрагентов.Организация = &Организация
	               |	И ДоговорыКонтрагентов.Владелец = &Владелец
	               |	И ДоговорыКонтрагентов.ВидДоговора В(&ВидДоговора)
	               |	И &УсловиеВалютаВзаиморасчетов";
				 
	Запрос.УстановитьПараметр("Организация", ТекОрганизация);
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("ОсновнойДоговорКонтрагента", Владелец.ОсновнойДоговорКонтрагента);
	Если ЗначениеЗаполнено(ВалютаДоговора) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеВалютаВзаиморасчетов", "ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов");
		Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаДоговора);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеВалютаВзаиморасчетов", "ИСТИНА");
	КонецЕсли;
	
	СписокДоговоров = Новый СписокЗначений();
	
	Если Плательщик Тогда
		СписокДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		СписокДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
		Запрос.УстановитьПараметр("ВидДоговора",СписокДоговоров);
	Иначе
		СписокДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		СписокДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
		Запрос.УстановитьПараметр("ВидДоговора",СписокДоговоров);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Ссылка;
		
	Иначе
		
		НайденныйДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		
		НайденныйДоговорОбъект.Наименование          = НСтр("ru = 'Без договора'", ОбщегоНазначения.КодОсновногоЯзыка());
		НайденныйДоговорОбъект.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
		
		Если ЗначениеЗаполнено(ВалютаДоговора) Тогда
			НайденныйДоговорОбъект.ВалютаВзаиморасчетов = ВалютаДоговора;
		Иначе
			НайденныйДоговорОбъект.ВалютаВзаиморасчетов = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(, "ОсновнаяВалютаВзаиморасчетов");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НайденныйДоговорОбъект.ВалютаВзаиморасчетов) Тогда
			НайденныйДоговорОбъект.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
		КонецЕсли;
		
		НайденныйДоговорОбъект.Организация = ТекОрганизация;
		
		Если НЕ ЗначениеЗаполнено(НайденныйДоговорОбъект.Организация) Тогда
			Выборка = ПолучитьВыборкуОрганизаций();
			Если Выборка.Следующий() Тогда
				НайденныйДоговорОбъект.Организация = Выборка.Организация;
			КонецЕсли;
		КонецЕсли;
		
		НайденныйДоговорОбъект.Владелец = Владелец;
				
		Если Плательщик Тогда
			НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
		Иначе
			НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
		КонецЕсли; 
		
		Попытка
			НайденныйДоговорОбъект.Записать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось записать основной договор контрагента: %1'"), Символы.ПС + ОписаниеОшибки());
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 
				
		КонецПопытки;

		Ссылка = НайденныйДоговорОбъект.Ссылка;
		
		Возврат Ссылка;
	
	КонецЕсли;
			
КонецФункции //СоздатьНужныйДоговор(Имя, Владелец)

//поиск и создание банковских счетов
Функция СоздатьНужныйСчет(Владелец, ИИК, ВалютаСчета)
	
	Запрос=Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	БанковскиеСчета.Ссылка
	               |ИЗ
	               |	Справочник.БанковскиеСчета КАК БанковскиеСчета
	               |ГДЕ
	               |	БанковскиеСчета.Владелец = &Владелец
	               |	И БанковскиеСчета.НомерСчета = &ИИК";
				 
	Запрос.УстановитьПараметр("ИИК"		, ИИК);
	Запрос.УстановитьПараметр("Владелец", Владелец);	
	
	Выборка = Запрос.Выполнить().Выбрать();  
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Ссылка;
		
	Иначе	
				
			НовыйСчетОбъект = Справочники.БанковскиеСчета.СоздатьЭлемент();
			
			Если ЗначениеЗаполнено(Владелец.ОсновнойБанковскийСчет) Тогда
				НовыйСчетОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 расчетный счет'",КодЯзыка), ИИК);
			Иначе
				НовыйСчетОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 Основной расчетный счет'", КодЯзыка), ИИК);
			КонецЕсли;
			
			НовыйСчетОбъект.НомерСчета      = ИИК;
			НовыйСчетОбъект.Владелец        = Владелец;
			НовыйСчетОбъект.ВидСчета        = "Расчетный";
			НовыйСчетОбъект.ВалютаДенежныхСредств = ВалютаСчета;
			
			// необходимо установить в Истина, иначе счет не будет записан
			// т.к. реквизит Банк не заполнен, в импортируемом файле
			// такого реквизита нет
			НовыйСчетОбъект.ОбменДанными.Загрузка = Истина;
		
			Попытка
				НовыйСчетОбъект.Записать();
			Исключение
				ТекстСообщения =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось записать банковский счет контрагента: %1'"), Символы.ПС + ОписаниеОшибки());
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 
				
			КонецПопытки;		
		
			Ссылка = НовыйСчетОбъект.Ссылка;
				
		Возврат Ссылка;	
	КонецЕсли;
	
КонецФункции
         
Процедура ЗаполнитьРеквизитПлатежногоДокумента(ОбъектДокумента, СтрокаСекции, Имя, СтруктураНастроек = Неопределено, Организация, СтруктурноеПодразделение, СтекОповещений)
	
	ТипДокумента = ОбъектДокумента.Метаданные().Имя;
	
	Если ТипДокумента = "ПлатежноеПоручениеИсходящее" Тогда
		ЗаполнитьРеквизитПлатежногоПорученияИсходящее(ОбъектДокумента, СтрокаСекции, Имя, СтруктураНастроек, Организация, СтруктурноеПодразделение, СтекОповещений);
		
	ИначеЕсли ТипДокумента = "ПлатежноеПоручениеВходящее" Тогда
		ЗаполнитьРеквизитПлатежногоПорученияВходящее(ОбъектДокумента, СтрокаСекции, Имя, СтруктураНастроек, Организация, СтруктурноеПодразделение, СтекОповещений);
		
	ИначеЕсли ТипДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств" Тогда
		ЗаполнитьРеквизитПлатежногоОрдераСписание(ОбъектДокумента, СтрокаСекции, Имя, СтруктураНастроек, Организация, СтруктурноеПодразделение, СтекОповещений);
		
	ИначеЕсли ТипДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств" Тогда
		ЗаполнитьРеквизитПлатежногоОрдераПоступление(ОбъектДокумента, СтрокаСекции, Имя, СтруктураНастроек, Организация, СтруктурноеПодразделение, СтекОповещений);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитПлатежногоПорученияИсходящее(ОбъектДокумента, ИсходныеДанные, ИмяРеквизита, СтруктураНастроек, Организация, СтруктурноеПодразделение, СтекОповещений)
	
	Если ИмяРеквизита = "Организация" Тогда
		// зяполняются разом и номер и дата документа и организация
		
		УстановитьСвойство(ОбъектДокумента, "Организация", 			    			Организация);
		УстановитьСвойство(ОбъектДокумента, "СтруктурноеПодразделениеОтправитель", 	СтруктурноеПодразделение);
		УстановитьСвойство(ОбъектДокумента, "СтруктурноеПодразделениеПолучатель", 	СтруктурноеПодразделение);
		
		//Если ОбъектДокумента.ДатаВыписки <> Дата(1,1,1) И ОбъектДокумента.ДатаВыписки <> ИсходныеДанные.ДатаДок Тогда 
		//	ТекстСообщения = НСтр("ru = ' В документе:"
		//						+ ОбъектДокумента.Ссылка 
		//						+ " значение реквизита ""ДатаВыписки"":"""
		//						+ ОбъектДокумента.ДатаВыписки
		//						+ """ заменено на:"""
		//						+ ИсходныеДанные.ДатаДок
		//						+ """!'");
		//	СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		//КонецЕсли;
		Если ОбъектДокумента.ДатаВходящегоДокумента <> Дата(1,1,1) И ОбъектДокумента.ДатаВходящегоДокумента <> ИсходныеДанные.ДатаДок Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе:%1 значение реквизита ""ДатаВходящегоДокумента"":""%2"" заменено на:""%3""!'"),
				ОбъектДокумента.Ссылка,
				ОбъектДокумента.ДатаВходящегоДокумента,
				ИсходныеДанные.ДатаДок);
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		КонецЕсли;
		
		УстановитьСвойство(ОбъектДокумента, "ДатаВыписки"	, ИсходныеДанные.ДатаДок);
		УстановитьСвойство(ОбъектДокумента, "Дата"			, ИсходныеДанные.ДатаДок);
		УстановитьСвойство(ОбъектДокумента, "Оплачено"		, Истина);
		
		УстановитьСвойство(ОбъектДокумента, "НомерВходящегоДокумента", ИсходныеДанные.НомерДок);
		УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента" , ИсходныеДанные.ДатаДок);  
		
	ИначеЕсли ИмяРеквизита = "Контрагент" Тогда
		
		Если ЗначениеЗаполнено(ОбъектДокумента.Контрагент) И ОбъектДокумента.Контрагент <> ИсходныеДанные.Контрагент Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе:%1 значение реквизита ""Контрагент"":""%2"" заменено на:""%3""!'"),
				ОбъектДокумента.Ссылка,
				ОбъектДокумента.Контрагент,
				ИсходныеДанные.Контрагент);
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		КонецЕсли;
		
		УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент);
			
		//информация о ДоговореВзаиморасчетов в файле не передается, но
		//она нужна для корректной записи документов
		//поэтому устанавливаем договор по умолчанию "Основной договор"
		
		Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
			
		ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента) Тогда
			Если ЗначениеЗаполнено(ОбъектДокумента.Контрагент) Тогда
				СтрокаРасшифровки.ДоговорКонтрагента = СоздатьНужныйДоговор(ОбъектДокумента.Контрагент, Организация, Ложь, ИсходныеДанные.СчетОрганизации.ВалютаДенежныхСредств);
			КонецЕсли;
		КонецЕсли;
		
		СчетУчета  = СтруктураНастроек.ППИсх_СчетУчетаРасчетовСКонтрагентом;
		СчетАванса = СтруктураНастроек.ППИсх_СчетУчетаРасчетовПоАвансам;
		
		ЗаполнятьАвтоматически = СтруктураНастроек.ППИсх_ЗаполнятьДанныеАвтоматически;
		
		Если (ЗаполнятьАвтоматически <> Истина) Тогда
			//Если счетУчета не проставлен в форме Настройка, то он берется для организации из РегистраСведений,
			Если НЕ (НЕ ЗначениеЗаполнено(ОбъектДокумента.Контрагент) ИЛИ НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента)) Тогда
				СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация, ОбъектДокумента.Контрагент, СтрокаРасшифровки.ДоговорКонтрагента);
				СчетУчетаРегистр = СчетаУчета.СчетРасчетовПокупателя;
			КонецЕсли;
		
			Если НЕ ЗначениеЗаполнено(СчетУчетаРегистр) Тогда
			//а иначе СчетУчета (счетРасчетов) проставляется вручную.
			
				Если НЕ ЗначениеЗаполнено(ИсходныеДанные.Поступило) Тогда 
					СчетУчета = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоставщикамИПодрядчикам;
				КонецЕсли;
								
			КонецЕсли;
		
		Иначе
			УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовПоАвансам", 	СчетАванса);
			УстановитьСвойство(СтрокаРасшифровки, "СтатьяДвиженияДенежныхСредств",  СтруктураНастроек.ППИсх_СтатьяДвиженияДенежныхСредств);
			
		КонецЕсли;
		
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовСКонтрагентомБУ", СчетУчета);
		УстановитьСвойство(ОбъектДокумента, "СчетУчетаРасчетовСКонтрагентомБУ", СчетУчета);
	
	
	ИначеЕсли ИмяРеквизита = "ДоговорКонтрагента" Тогда //заполняется при заполнении Контрагент
	
	ИначеЕсли ИмяРеквизита = "СчетОрганизации" Тогда //заполняется при заполнении Контрагент
		
		Если ЗначениеЗаполнено(ОбъектДокумента.СчетОрганизации) И ОбъектДокумента.СчетОрганизации <> ИсходныеДанные.СчетОрганизации Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе:%1 значение реквизита ""СчетОрганизации"":""%2"" заменено на:""%3""!'"),
				ОбъектДокумента.Ссылка,
				ОбъектДокумента.СчетОрганизации,
				ИсходныеДанные.СчетОрганизации);
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
			
		КонецЕсли;
		УстановитьСвойство(ОбъектДокумента, "СчетОрганизации", ИсходныеДанные.СчетОрганизации);
		
		//валюта документа
		УстановитьСвойство(ОбъектДокумента, "ВалютаДокумента", ОбъектДокумента.СчетОрганизации.ВалютаДенежныхСредств);
		
		Если НЕ ЗначениеЗаполнено(ОбъектДокумента.СчетБанк) Тогда
			// счет банк
			УстановитьСвойство(ОбъектДокумента, "СчетБанк", ПланыСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетах);
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "ВалютаДокумента" Тогда //заполняется при заполнении СчетОрганизации
		
	ИначеЕсли ИмяРеквизита = "СчетБанк" Тогда //заполняется при заполнении СчетОрганизации
	
	ИначеЕсли ИмяРеквизита = "ВидОперации" Тогда 
		
		Если ОбъектДокумента.ЭтоНовый() Тогда            
			ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
			УстановитьСвойство(ОбъектДокумента, "ВидОперации", ВидОперации);
		КонецЕсли;
				
	ИначеЕсли ИмяРеквизита = "СуммаДокумента" Тогда

			Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
				СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
			ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
				СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС) Тогда 
				СтрокаРасшифровки.СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(, "ОсновнаяСтавкаНДС");
				УстановитьСвойство(СтрокаРасшифровки, "СтавкаНДС", СтрокаРасшифровки.СтавкаНДС);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОбъектДокумента.СуммаДокумента) И ОбъектДокумента.СуммаДокумента <> ИсходныеДанные.СуммаДокумента Тогда 
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В документе:%1 значение реквизита ""СуммаДокумента"":""%2"" заменено на:""%3""!'"),
					ОбъектДокумента.Ссылка,
					ОбъектДокумента.СуммаДокумента,
					ИсходныеДанные.СуммаДокумента);
				СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));

			КонецЕсли;

			УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента);
			Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
				СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
			ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
				СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
			КонецЕсли;
			
			СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
			
			Если Не СтрокаРасшифровки.ДоговорКонтрагента.Пустая() Тогда
				Если ОбъектДокумента.ВалютаДокумента = СтрокаРасшифровки.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
					СтрокаРасшифровки.КурсВзаиморасчетов = 1;
					СтрокаРасшифровки.КратностьВзаиморасчетов = 1;
					СтрокаРасшифровки.СуммаВзаиморасчетов = ОбъектДокумента.СуммаДокумента;
				Иначе
					КурсДокумента = 1;
					КратностьДокумента = 1;
					КурсДоговора = 1;
					КратностьДоговора = 1;
					
					тзКурсКратностьДокумента = РегистрыСведений.КурсыВалют.СрезПоследних(ОбъектДокумента.Дата, Новый Структура("Валюта", ОбъектДокумента.ВалютаДокумента));
					Если тзКурсКратностьДокумента.Количество() > 0 Тогда
						КурсДокумента = ?(тзКурсКратностьДокумента[0].Курс > 0, тзКурсКратностьДокумента[0].Курс, 1);
					КонецЕсли;
					
					тзКурсКратностьДоговора = РегистрыСведений.КурсыВалют.СрезПоследних(ОбъектДокумента.Дата, Новый Структура("Валюта", СтрокаРасшифровки.ДоговорКонтрагента.ВалютаВзаиморасчетов));
					Если тзКурсКратностьДоговора.Количество() > 0 Тогда
						КурсДоговора = ?(тзКурсКратностьДоговора[0].Курс > 0, тзКурсКратностьДоговора[0].Курс, 1);
					КонецЕсли;
					
					КурсПересчета = (КурсДокумента / КурсДоговора) * (КратностьДоговора / КратностьДокумента);
					СтрокаРасшифровки.КурсВзаиморасчетов = КурсДокумента / КурсДоговора;
					СтрокаРасшифровки.КратностьВзаиморасчетов = КратностьДоговора / КратностьДокумента;
					СтрокаРасшифровки.СуммаВзаиморасчетов = ОбъектДокумента.СуммаДокумента * КурсПересчета;
				КонецЕсли;
			Иначе
				СтрокаРасшифровки.КурсВзаиморасчетов = 1;
				СтрокаРасшифровки.КратностьВзаиморасчетов = 1;
				СтрокаРасшифровки.СуммаВзаиморасчетов = ОбъектДокумента.СуммаДокумента;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС) Тогда
				ЗначениеСтавкиНДС     		= УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС);
				СтрокаРасшифровки.СуммаНДС	= СтрокаРасшифровки.СуммаПлатежа * ЗначениеСтавкиНДС / (100+ЗначениеСтавкиНДС);
				
				УстановитьСвойство(СтрокаРасшифровки, "СуммаНДС", СтрокаРасшифровки.СуммаНДС);
			КонецЕсли;

			Если ЗначениеЗаполнено(ИсходныеДанные.Списано) Тогда
				УстановитьСвойство(ОбъектДокумента, "Оплачено"	, Истина);
				УстановитьСвойство(ОбъектДокумента, "Дата"		, НачалоДня(ИсходныеДанные.Списано));
			КонецЕсли;
			
		
	ИначеЕсли ИмяРеквизита = "Оплачено" Тогда
	
	ИначеЕсли ИмяРеквизита = "РННПлательщика" Тогда
		УстановитьСвойство(ОбъектДокумента, "РННПлательщика", ИсходныеДанные.ПлательщикРНН);
	
	ИначеЕсли ИмяРеквизита = "РННПолучателя" Тогда
		УстановитьСвойство(ОбъектДокумента, "РННПолучателя", ИсходныеДанные.ПолучательРНН);
	
	ИначеЕсли ИмяРеквизита = "Ответственный" Тогда
		//Устанавливаем ответственного как: глТекущийПользователь
		УстановитьСвойство(ОбъектДокумента, "Ответственный", ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(, "ОсновнойОтветственный"));
		
	Иначе
		
		Попытка
			ЗначениеРеквизита = ИсходныеДанные[ИмяРеквизита];
		Исключение
			ЗначениеРеквизита = Неопределено;
		КонецПопытки;
			
		Если ЗначениеРеквизита <> Неопределено Тогда
			УстановитьСвойство(ОбъектДокумента, ИмяРеквизита, ЗначениеРеквизита);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитПлатежногоПорученияВходящее(ОбъектДокумента, ИсходныеДанные, ИмяРеквизита, СтруктураНастроек, Организация, СтруктурноеПодразделение, СтекОповещений)
	
	Если ИмяРеквизита = "Организация" Тогда
		// зяполняются разом и номер и дата документа и организация
		
		УстановитьСвойство(ОбъектДокумента, "Организация", 							Организация);
		УстановитьСвойство(ОбъектДокумента, "СтруктурноеПодразделениеПолучатель", 	СтруктурноеПодразделение);
		УстановитьСвойство(ОбъектДокумента, "СтруктурноеПодразделениеОтправитель", 	СтруктурноеПодразделение);

		Если ОбъектДокумента.ДатаВходящегоДокумента <> Дата(1,1,1) И ОбъектДокумента.ДатаВходящегоДокумента <> ИсходныеДанные.ДатаДок Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе:%1 значение реквизита ""ДатаВходящегоДокумента"":""%2"" заменено на:""%3""!'"),
				ОбъектДокумента.Ссылка,
				ОбъектДокумента.ДатаВходящегоДокумента,
				ИсходныеДанные.ДатаДок);
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		КонецЕсли;

		УстановитьСвойство(ОбъектДокумента, "НомерВходящегоДокумента", ИсходныеДанные.НомерДок);
		УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента", ИсходныеДанные.ДатаДок);  
		
		Если ЗначениеЗаполнено(ИсходныеДанные.Поступило) Тогда
			УстановитьСвойство(ОбъектДокумента, "Оплачено", Истина);
			УстановитьСвойство(ОбъектДокумента, "Дата", НачалоДня(ИсходныеДанные.Поступило));
			УстановитьСвойство(ОбъектДокумента, "ДатаВыписки", НачалоДня(ИсходныеДанные.Поступило));
			
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ОбъектДокумента.Дата) Тогда
			УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.ДатаДок);
			УстановитьСвойство(ОбъектДокумента, "ДатаВыписки", ИсходныеДанные.ДатаДок);
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "Контрагент" Тогда
		
		Если ЗначениеЗаполнено(ОбъектДокумента.Контрагент)   И ОбъектДокумента.Контрагент <> ИсходныеДанные.Контрагент Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе:%1 значение реквизита ""Контрагент"":""%2"" заменено на:""%3""!'"),
				ОбъектДокумента.Ссылка,
				ОбъектДокумента.Контрагент,
				ИсходныеДанные.Контрагент);
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
			
		КонецЕсли;

		УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент);
			
		//информация о ДоговореВзаиморасчетов в файле не передается, но
		//она нужна для корректной записи документов
		//поэтому устанавливаем договор по умолчанию "Основной договор"
		
		Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
			
		ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента) Тогда
			Если ЗначениеЗаполнено(ОбъектДокумента.Контрагент) Тогда
				СтрокаРасшифровки.ДоговорКонтрагента = СоздатьНужныйДоговор(ОбъектДокумента.Контрагент, ОбъектДокумента.Организация, Истина, ИсходныеДанные.СчетОрганизации.ВалютаДенежныхСредств);
			КонецЕсли;
		КонецЕсли;
		
		СчетУчета  = СтруктураНастроек.ППВх_СчетУчетаРасчетовСКонтрагентом;
		СчетАванса = СтруктураНастроек.ППВх_СчетУчетаРасчетовПоАвансам;
		
		ЗаполнятьАвтоматически = СтруктураНастроек.ППВх_ЗаполнятьДанныеАвтоматически;
		
		Если (ЗаполнятьАвтоматически <> Истина) Тогда
			
			Если НЕ (НЕ ЗначениеЗаполнено(ОбъектДокумента.Контрагент) ИЛИ НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента)) Тогда
				СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация, ОбъектДокумента.Контрагент, СтрокаРасшифровки.ДоговорКонтрагента);
				СчетУчетаРегистр=СчетаУчета.СчетРасчетов;
				
			Иначе
				СчетУчетаРегистр = Неопределено;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СчетУчетаРегистр) Тогда
				
				Если НЕ ЗначениеЗаполнено(ИсходныеДанные.Списано) Тогда // платят нам в тенге или в валюте - ДЛЯ ВХОДЯЩЕГО
					СчетУчета = ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовПоАвансам", СчетАванса);
			УстановитьСвойство(СтрокаРасшифровки, "СтатьяДвиженияДенежныхСредств", СтруктураНастроек.ППВх_СтатьяДвиженияДенежныхСредств);
			
		КонецЕсли;
		
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовСКонтрагентомБУ", СчетУчета);
		УстановитьСвойство(ОбъектДокумента, "СчетУчетаРасчетовСКонтрагентомБУ", СчетУчета);

	
	ИначеЕсли ИмяРеквизита = "ДоговорКонтрагента" Тогда //заполняет при заполнении Контаргент

	ИначеЕсли ИмяРеквизита = "СчетОрганизации" Тогда //заполняет при заполнении Контаргент
		
		Если ЗначениеЗаполнено(ОбъектДокумента.СчетОрганизации) И ОбъектДокумента.СчетОрганизации <> ИсходныеДанные.СчетОрганизации Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе:%1 значение реквизита ""СчетОрганизации"":""%2"" заменено на:""%3""!'"),
				ОбъектДокумента.Ссылка,
				ОбъектДокумента.СчетОрганизации,
				ИсходныеДанные.СчетОрганизации);
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));

		КонецЕсли;
		
		УстановитьСвойство(ОбъектДокумента, "СчетОрганизации", ИсходныеДанные.СчетОрганизации);
		
		//валюта документа
		УстановитьСвойство(ОбъектДокумента, "ВалютаДокумента", ОбъектДокумента.СчетОрганизации.ВалютаДенежныхСредств);
		
		// счет банк
		УстановитьСвойство(ОбъектДокумента, "СчетБанк", ПланыСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетах);
		
	ИначеЕсли ИмяРеквизита = "ВалютаДокумента" Тогда //заполняет при заполнении СчетОрганизации
		
	ИначеЕсли ИмяРеквизита = "СчетБанк" Тогда //заполняет при заполнении СчетОрганизации
	
	ИначеЕсли ИмяРеквизита = "СуммаДокумента" Тогда
		Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
		ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС) Тогда 
			СтрокаРасшифровки.СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(, "ОсновнаяСтавкаНДС");
			УстановитьСвойство(СтрокаРасшифровки, "СтавкаНДС", СтрокаРасшифровки.СтавкаНДС);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОбъектДокумента.СуммаДокумента) И ОбъектДокумента.СуммаДокумента <> ИсходныеДанные.СуммаДокумента Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе:%1 значение реквизита ""СуммаДокумента"":""%2"" заменено на:""%3""!'"),
				ОбъектДокумента.Ссылка,
				ОбъектДокумента.СуммаДокумента,
				ИсходныеДанные.СуммаДокумента);
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		КонецЕсли;
		
		УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента);
		
		Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
		ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
		КонецЕсли;
		
		СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
		
		Если Не СтрокаРасшифровки.ДоговорКонтрагента.Пустая() Тогда
			Если ОбъектДокумента.ВалютаДокумента = СтрокаРасшифровки.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
				СтрокаРасшифровки.КурсВзаиморасчетов 		= 1;
				СтрокаРасшифровки.КратностьВзаиморасчетов	= 1;
				СтрокаРасшифровки.СуммаВзаиморасчетов 		= ОбъектДокумента.СуммаДокумента;
			Иначе
				КурсДокумента		 = 1;
				КратностьДокумента	 = 1;
				КурсДоговора		 = 1;
				КратностьДоговора	 = 1;
				
				тзКурсКратностьДокумента = РегистрыСведений.КурсыВалют.СрезПоследних(ОбъектДокумента.Дата, Новый Структура("Валюта", ОбъектДокумента.ВалютаДокумента));
				Если тзКурсКратностьДокумента.Количество() > 0 Тогда
					КурсДокумента = ?(тзКурсКратностьДокумента[0].Курс > 0, тзКурсКратностьДокумента[0].Курс, 1);
				КонецЕсли;
				
				тзКурсКратностьДоговора = РегистрыСведений.КурсыВалют.СрезПоследних(ОбъектДокумента.Дата, Новый Структура("Валюта", СтрокаРасшифровки.ДоговорКонтрагента.ВалютаВзаиморасчетов));
				Если тзКурсКратностьДоговора.Количество() > 0 Тогда
					КурсДоговора = ?(тзКурсКратностьДоговора[0].Курс > 0, тзКурсКратностьДоговора[0].Курс, 1);
				КонецЕсли;
				
				КурсПересчета = (КурсДокумента / КурсДоговора) * (КратностьДоговора / КратностьДокумента);
				
				СтрокаРасшифровки.КурсВзаиморасчетов 	  = КурсДокумента / КурсДоговора;
				СтрокаРасшифровки.КратностьВзаиморасчетов = КратностьДоговора / КратностьДокумента;
				СтрокаРасшифровки.СуммаВзаиморасчетов     = ОбъектДокумента.СуммаДокумента * КурсПересчета;
			КонецЕсли;
		Иначе
			СтрокаРасшифровки.КурсВзаиморасчетов 		= 1;
			СтрокаРасшифровки.КратностьВзаиморасчетов 	= 1;
			СтрокаРасшифровки.СуммаВзаиморасчетов 		= ОбъектДокумента.СуммаДокумента;
		КонецЕсли;

		Если ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС) Тогда
			ЗначениеСтавкиНДС     		= УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС);
			СтрокаРасшифровки.СуммаНДС  = СтрокаРасшифровки.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);
			
			УстановитьСвойство(СтрокаРасшифровки, "СуммаНДС", СтрокаРасшифровки.СуммаНДС);
		КонецЕсли;
			
	ИначеЕсли ИмяРеквизита = "Оплачено" Тогда
		
		//проставляем признаки того, что платеж прошел:
		Если ЗначениеЗаполнено(ИсходныеДанные.Поступило) Тогда
			УстановитьСвойство(ОбъектДокумента, "Оплачено"	, Истина);
			УстановитьСвойство(ОбъектДокумента, "Дата"		, НачалоДня(ИсходныеДанные.Поступило));
		КонецЕсли;
	
	ИначеЕсли ИмяРеквизита = "ВидОперации" Тогда 
		
		Если ОбъектДокумента.ЭтоНовый() Тогда            
			ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;
			УстановитьСвойство(ОбъектДокумента, "ВидОперации", ВидОперации);
		КонецЕсли;
	
	ИначеЕсли ИмяРеквизита = "Ответственный" Тогда
		УстановитьСвойство(ОбъектДокумента, "Ответственный", ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(, "ОсновнойОтветственный"));
		
	Иначе
		
		Попытка
			ЗначениеРеквизита = ИсходныеДанные[ИмяРеквизита];
		Исключение
			ЗначениеРеквизита = Неопределено;
		КонецПопытки;
			
		Если ЗначениеРеквизита <> Неопределено Тогда
			УстановитьСвойство(ОбъектДокумента, ИмяРеквизита, ЗначениеРеквизита);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитПлатежногоОрдераСписание(ОбъектДокумента, ИсходныеДанные, ИмяРеквизита, СтруктураНастроек, Организация, СтруктурноеПодразделение, СтекОповещений)
	
	Если ИмяРеквизита = "Организация" Тогда
		// зяполняются разом и номер и дата документа и организация
		
		УстановитьСвойство(ОбъектДокумента, "Организация", 			   				Организация);
		УстановитьСвойство(ОбъектДокумента, "СтруктурноеПодразделениеОтправитель", 	СтруктурноеПодразделение);
		УстановитьСвойство(ОбъектДокумента, "СтруктурноеПодразделениеПолучатель", 	СтруктурноеПодразделение);
		УстановитьСвойство(ОбъектДокумента, "Дата", 								ИсходныеДанные.Списано);
		
		Если НЕ ЗначениеЗаполнено(ОбъектДокумента.Дата) Тогда
			УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.ДатаДок);
		КонецЕсли;
		
		УстановитьСвойство(ОбъектДокумента, "ДатаВыписки", ИсходныеДанные.ДатаДок);
		
		Если ОбъектДокумента.ДатаВходящегоДокумента <> Дата(1,1,1) И ОбъектДокумента.ДатаВходящегоДокумента <> ИсходныеДанные.ДатаДок Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе:%1 значение реквизита ""ДатаВходящегоДокумента"":""%2"" заменено на:""%3""!'"),
				ОбъектДокумента.Ссылка,
				ОбъектДокумента.ДатаВходящегоДокумента,
				ИсходныеДанные.ДатаДок);
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		КонецЕсли;
		
		УстановитьСвойство(ОбъектДокумента, "НомерВходящегоДокумента", ИсходныеДанные.НомерДок);
		УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента" , ИсходныеДанные.ДатаДок);  
			
	ИначеЕсли ИмяРеквизита = "Контрагент" Тогда
		
		Если ЗначениеЗаполнено(ОбъектДокумента.Контрагент)   И ОбъектДокумента.Контрагент <> ИсходныеДанные.Контрагент Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе:%1 значение реквизита ""Контрагент"":""%2"" заменено на:""%3""!'"),
				ОбъектДокумента.Ссылка,
				ОбъектДокумента.Контрагент,
				ИсходныеДанные.Контрагент);
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		КонецЕсли;

		УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент);
			
		//информация о ДоговореВзаиморасчетов в файле не передается, но
		//она нужна для корректной записи документов
		//поэтому устанавливаем договор по умолчанию "Основной договор"
		
		Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
			
		ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента) Тогда
			Если ЗначениеЗаполнено(ОбъектДокумента.Контрагент) Тогда
				СтрокаРасшифровки.ДоговорКонтрагента = СоздатьНужныйДоговор(ОбъектДокумента.Контрагент, Организация, Ложь, ИсходныеДанные.СчетОрганизации.ВалютаДенежныхСредств);
			КонецЕсли;
		КонецЕсли;
		
		СчетУчета  = СтруктураНастроек.ПОСпис_СчетУчетаРасчетовСКонтрагентом;
		СчетАванса = СтруктураНастроек.ПОСпис_СчетУчетаРасчетовПоАвансам;
		
		ЗаполнятьАвтоматически = СтруктураНастроек.ПОСпис_ЗаполнятьДанныеАвтоматически;
				
		Если (ЗаполнятьАвтоматически <> Истина) Тогда
			
			Если НЕ (НЕ ЗначениеЗаполнено(ОбъектДокумента.Контрагент) ИЛИ НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента)) Тогда
				СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация, ОбъектДокумента.Контрагент, СтрокаРасшифровки.ДоговорКонтрагента);
				СчетУчетаРегистр = СчетаУчета.СчетРасчетовПокупателя;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СчетУчетаРегистр) Тогда
				    			
				Если НЕ ЗначениеЗаполнено(ИсходныеДанные.Поступило) Тогда
					СчетУчета = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоставщикамИПодрядчикам;
				КонецЕсли;
										
			КонецЕсли;
			
		Иначе
			УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовПоАвансам", СчетАванса);
			УстановитьСвойство(СтрокаРасшифровки, "СтатьяДвиженияДенежныхСредств", СтруктураНастроек.ПОСпис_СтатьяДвиженияДенежныхСредств);
			
		КонецЕсли;
		
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовСКонтрагентомБУ", СчетУчета);
		УстановитьСвойство(ОбъектДокумента, "СчетУчетаРасчетовСКонтрагентомБУ", СчетУчета);
	
	ИначеЕсли ИмяРеквизита = "ДоговорКонтрагента" Тогда //заполняет при заполнении Контаргент
	
	ИначеЕсли ИмяРеквизита = "СчетОрганизации" Тогда //заполняет при заполнении Контаргент
		
		Если ЗначениеЗаполнено(ОбъектДокумента.СчетОрганизации) И ОбъектДокумента.СчетОрганизации <> ИсходныеДанные.СчетОрганизации Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе:%1 значение реквизита ""СчетОрганизации"":""%2"" заменено на:""%3""!'"),
				ОбъектДокумента.Ссылка,
				ОбъектДокумента.СчетОрганизации,
				ИсходныеДанные.СчетОрганизации);
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
			
		КонецЕсли;

		УстановитьСвойство(ОбъектДокумента, "СчетОрганизации", ИсходныеДанные.СчетОрганизации);
		
		//валюта документа
		УстановитьСвойство(ОбъектДокумента, "ВалютаДокумента", ОбъектДокумента.СчетОрганизации.ВалютаДенежныхСредств);
		
		// счет банк
		УстановитьСвойство(ОбъектДокумента, "СчетБанк", ПланыСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетах);
		
	ИначеЕсли ИмяРеквизита = "ВалютаДокумента" Тогда //заполняет при заполнении СчетОрганизации
		
	ИначеЕсли ИмяРеквизита = "СчетБанк" Тогда //заполняет при заполнении СчетОрганизации
	
	ИначеЕсли ИмяРеквизита = "ВидОперации" Тогда 
		
		Если ОбъектДокумента.ЭтоНовый() Тогда            
			ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику;
			УстановитьСвойство(ОбъектДокумента, "ВидОперации", ВидОперации);
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "СуммаДокумента" Тогда

			Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
				СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
				
			ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
				СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС) Тогда 
				СтрокаРасшифровки.СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(, "ОсновнаяСтавкаНДС");
				УстановитьСвойство(СтрокаРасшифровки, "СтавкаНДС", СтрокаРасшифровки.СтавкаНДС);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОбъектДокумента.СуммаДокумента) И ОбъектДокумента.СуммаДокумента <> ИсходныеДанные.СуммаДокумента Тогда 
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В документе:%1 значение реквизита ""СуммаДокумента"":""%2"" заменено на:""%3""!'"),
					ОбъектДокумента.Ссылка,
					ОбъектДокумента.СуммаДокумента,
					ИсходныеДанные.СуммаДокумента);
				СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
			
			КонецЕсли;

			УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента);
			Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
				СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
			ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
				СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС) Тогда
				ЗначениеСтавкиНДС     = УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС);
				СтрокаРасшифровки.СуммаНДС = СтрокаРасшифровки.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);
				УстановитьСвойство(СтрокаРасшифровки, "СуммаНДС", СтрокаРасшифровки.СуммаНДС);
			КонецЕсли;
			
			СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
			Если Не СтрокаРасшифровки.ДоговорКонтрагента.Пустая() Тогда
				Если ОбъектДокумента.ВалютаДокумента = СтрокаРасшифровки.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
					
					СтрокаРасшифровки.КурсВзаиморасчетов 	  = 1;
					СтрокаРасшифровки.КратностьВзаиморасчетов = 1;
					СтрокаРасшифровки.СуммаВзаиморасчетов	  = ОбъектДокумента.СуммаДокумента;
					
				Иначе
					КурсДокумента	   = 1;
					КратностьДокумента = 1;
					КурсДоговора	   = 1;
					КратностьДоговора  = 1;
					
					тзКурсКратностьДокумента = РегистрыСведений.КурсыВалют.СрезПоследних(ОбъектДокумента.Дата, Новый Структура("Валюта", ОбъектДокумента.ВалютаДокумента));
					Если тзКурсКратностьДокумента.Количество() > 0 Тогда
						КурсДокумента = ?(тзКурсКратностьДокумента[0].Курс > 0, тзКурсКратностьДокумента[0].Курс, 1);
					КонецЕсли;
					
					тзКурсКратностьДоговора = РегистрыСведений.КурсыВалют.СрезПоследних(ОбъектДокумента.Дата, Новый Структура("Валюта", СтрокаРасшифровки.ДоговорКонтрагента.ВалютаВзаиморасчетов));
					Если тзКурсКратностьДоговора.Количество() > 0 Тогда
						КурсДоговора = ?(тзКурсКратностьДоговора[0].Курс > 0, тзКурсКратностьДоговора[0].Курс, 1);
					КонецЕсли;
					
					КурсПересчета = (КурсДокумента / КурсДоговора) * (КратностьДоговора / КратностьДокумента);
					
					СтрокаРасшифровки.КурсВзаиморасчетов		= КурсДокумента / КурсДоговора;
					СтрокаРасшифровки.КратностьВзаиморасчетов	= КратностьДоговора / КратностьДокумента;
					СтрокаРасшифровки.СуммаВзаиморасчетов		= ОбъектДокумента.СуммаДокумента * КурсПересчета;
				КонецЕсли;
			Иначе
				СтрокаРасшифровки.КурсВзаиморасчетов	  = 1;
				СтрокаРасшифровки.КратностьВзаиморасчетов = 1;
				СтрокаРасшифровки.СуммаВзаиморасчетов	  = ОбъектДокумента.СуммаДокумента;
			КонецЕсли;
			
			//проставляем признаки того, что платеж прошел:
			Если ЗначениеЗаполнено(ИсходныеДанные.Списано) Тогда
				УстановитьСвойство(ОбъектДокумента, "Оплачено", Истина);
			КонецЕсли;
			
	ИначеЕсли ИмяРеквизита = "Оплачено" Тогда     
		
	ИначеЕсли ИмяРеквизита = "Ответственный" Тогда
		УстановитьСвойство(ОбъектДокумента, "Ответственный", ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(, "ОсновнойОтветственный"));
		
	Иначе
		
		Попытка
			ЗначениеРеквизита = ИсходныеДанные[ИмяРеквизита];
		Исключение
			ЗначениеРеквизита = Неопределено;
		КонецПопытки;
			
		Если ЗначениеРеквизита <> Неопределено Тогда
			УстановитьСвойство(ОбъектДокумента, ИмяРеквизита, ЗначениеРеквизита);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитПлатежногоОрдераПоступление(ОбъектДокумента, ИсходныеДанные, ИмяРеквизита, СтруктураНастроек, Организация, СтруктурноеПодразделение, СтекОповещений)
	
	Если ИмяРеквизита = "Организация" Тогда
		// зяполняются разом и номер и дата документа и организация
		
		УстановитьСвойство(ОбъектДокумента, "Организация", 							Организация);
		УстановитьСвойство(ОбъектДокумента, "СтруктурноеПодразделениеОтправитель", 	СтруктурноеПодразделение);
		УстановитьСвойство(ОбъектДокумента, "СтруктурноеПодразделениеПолучатель", 	СтруктурноеПодразделение);

		Если ОбъектДокумента.ДатаВходящегоДокумента <> Дата(1,1,1) И ОбъектДокумента.ДатаВходящегоДокумента <> ИсходныеДанные.ДатаДок Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе:%1 значение реквизита ""ДатаВходящегоДокумента"":""%2"" заменено на:""%3""!'"),
				ОбъектДокумента.Ссылка,
				ОбъектДокумента.ДатаВходящегоДокумента,
				ИсходныеДанные.ДатаДок);
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
				
		КонецЕсли;
		
		УстановитьСвойство(ОбъектДокумента, "НомерВходящегоДокумента", 	ИсходныеДанные.НомерДок);
		УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента", 	ИсходныеДанные.ДатаДок);
		УстановитьСвойство(ОбъектДокумента, "Дата", 					ИсходныеДанные.Поступило);
		
		Если НЕ ЗначениеЗаполнено(ОбъектДокумента.Дата) Тогда
			УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.ДатаДок);
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "Контрагент" Тогда
		
		Если ЗначениеЗаполнено(ОбъектДокумента.Контрагент)   И ОбъектДокумента.Контрагент <> ИсходныеДанные.Контрагент Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе:%1 значение реквизита ""Контрагент"":""%2"" заменено на:""%3""!'"),
				ОбъектДокумента.Ссылка,
				ОбъектДокумента.Контрагент,
				ИсходныеДанные.Контрагент);
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		КонецЕсли;
		
		УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент);
			
		//информация о ДоговореВзаиморасчетов в файле не передается, но
		//она нужна для корректной записи документов
		//поэтому устанавливаем договор по умолчанию "Основной договор"
		
		Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
			
		ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента) Тогда
			Если ЗначениеЗаполнено(ОбъектДокумента.Контрагент) Тогда
				СтрокаРасшифровки.ДоговорКонтрагента = СоздатьНужныйДоговор(ОбъектДокумента.Контрагент, Организация, Истина, ИсходныеДанные.СчетОрганизации.ВалютаДенежныхСредств);		
			КонецЕсли;
		КонецЕсли;
		
		СчетУчета  = СтруктураНастроек.ПОПост_СчетУчетаРасчетовСКонтрагентом;
		СчетАванса = СтруктураНастроек.ПОПост_СчетУчетаРасчетовПоАвансам;
		
		ЗаполнятьАвтоматически = СтруктураНастроек.ПОПост_ЗаполнятьДанныеАвтоматически;
		
		Если (ЗаполнятьАвтоматически <> Истина) Тогда
			
			Если НЕ (НЕ ЗначениеЗаполнено(ОбъектДокумента.Контрагент) ИЛИ НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента)) Тогда
				СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация, ОбъектДокумента.Контрагент, СтрокаРасшифровки.ДоговорКонтрагента);
				СчетУчетаРегистр = СчетаУчета.СчетРасчетов;
				
			КонецЕсли;
		
			Если НЕ ЗначениеЗаполнено(СчетУчетаРегистр) Тогда
				
				Если НЕ ЗначениеЗаполнено(ИсходныеДанные.Списано) Тогда // платят нам в тенге или в валюте - ДЛЯ ВХОДЯЩЕГО
					СчетУчета = ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков;
				КонецЕсли;
		
			КонецЕсли;			
		Иначе
			УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовПоАвансам", 	СчетАванса);
			УстановитьСвойство(СтрокаРасшифровки, "СтатьяДвиженияДенежныхСредств",  СтруктураНастроек.ПОПост_СтатьяДвиженияДенежныхСредств);
			
		КонецЕсли;
		
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовСКонтрагентомБУ", СчетУчета);
		УстановитьСвойство(ОбъектДокумента, "СчетУчетаРасчетовСКонтрагентомБУ",   СчетУчета);
	
	ИначеЕсли ИмяРеквизита = "ДоговорКонтрагента" Тогда //заполняет при заполнении Контаргент
	
	ИначеЕсли ИмяРеквизита = "СчетОрганизации" Тогда //заполняет при заполнении Контаргент
		
		Если ЗначениеЗаполнено(ОбъектДокумента.СчетОрганизации) И ОбъектДокумента.СчетОрганизации <> ИсходныеДанные.СчетОрганизации Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе:%1 значение реквизита ""СчетОрганизации"":""%2"" заменено на:""%3""!'"),
				ОбъектДокумента.Ссылка,
				ОбъектДокумента.СчетОрганизации,
				ИсходныеДанные.СчетОрганизации);
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));

		КонецЕсли;

		УстановитьСвойство(ОбъектДокумента, "СчетОрганизации", ИсходныеДанные.СчетОрганизации);
		
		//валюта документа
		УстановитьСвойство(ОбъектДокумента, "ВалютаДокумента", ОбъектДокумента.СчетОрганизации.ВалютаДенежныхСредств);
		
		// счет банк
		УстановитьСвойство(ОбъектДокумента, "СчетБанк", ПланыСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетах);
		
	ИначеЕсли ИмяРеквизита = "ВалютаДокумента" Тогда //заполняет при заполнении СчетОрганизации
		
	ИначеЕсли ИмяРеквизита = "СчетБанк" Тогда //заполняет при заполнении СчетОрганизации
	
	ИначеЕсли ИмяРеквизита = "Оплачено" Тогда
		
	ИначеЕсли ИмяРеквизита = "ВидОперации" Тогда 
		
		Если ОбъектДокумента.ЭтоНовый() Тогда            
			ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;
			УстановитьСвойство(ОбъектДокумента, "ВидОперации", ВидОперации);
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "СуммаДокумента" Тогда

		Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
		ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
		КонецЕсли;
	
		Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС) Тогда 
			СтрокаРасшифровки.СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(, "ОсновнаяСтавкаНДС");
			УстановитьСвойство(СтрокаРасшифровки, "СтавкаНДС", СтрокаРасшифровки.СтавкаНДС);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОбъектДокумента.СуммаДокумента) И ОбъектДокумента.СуммаДокумента <> ИсходныеДанные.СуммаДокумента Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе:%1 значение реквизита ""СуммаДокумента"":""%2"" заменено на:""%3""!'"),
				ОбъектДокумента.Ссылка,
				ОбъектДокумента.СуммаДокумента,
				ИсходныеДанные.СуммаДокумента);
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
			
		КонецЕсли;
		
		УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента);
		Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
		ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
		КонецЕсли;
		
		СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
		Если Не СтрокаРасшифровки.ДоговорКонтрагента.Пустая() Тогда
			Если ОбъектДокумента.ВалютаДокумента = СтрокаРасшифровки.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
				
				СтрокаРасшифровки.КурсВзаиморасчетов 		= 1;
				СтрокаРасшифровки.КратностьВзаиморасчетов 	= 1;
				СтрокаРасшифровки.СуммаВзаиморасчетов 		= ОбъектДокумента.СуммаДокумента;
				
			Иначе
				КурсДокумента		 = 1;
				КратностьДокумента	 = 1;
				КурсДоговора		 = 1;
				КратностьДоговора	 = 1;
				
				тзКурсКратностьДокумента = РегистрыСведений.КурсыВалют.СрезПоследних(ОбъектДокумента.Дата, Новый Структура("Валюта", ОбъектДокумента.ВалютаДокумента));
				Если тзКурсКратностьДокумента.Количество() > 0 Тогда
					КурсДокумента = ?(тзКурсКратностьДокумента[0].Курс > 0, тзКурсКратностьДокумента[0].Курс, 1);
				КонецЕсли;
				
				тзКурсКратностьДоговора = РегистрыСведений.КурсыВалют.СрезПоследних(ОбъектДокумента.Дата, Новый Структура("Валюта", СтрокаРасшифровки.ДоговорКонтрагента.ВалютаВзаиморасчетов));
				Если тзКурсКратностьДоговора.Количество() > 0 Тогда
					КурсДоговора = ?(тзКурсКратностьДоговора[0].Курс > 0, тзКурсКратностьДоговора[0].Курс, 1);
				КонецЕсли;
				
				КурсПересчета = (КурсДокумента / КурсДоговора) * (КратностьДоговора / КратностьДокумента);
				
				СтрокаРасшифровки.КурсВзаиморасчетов 		= КурсДокумента / КурсДоговора;
				СтрокаРасшифровки.КратностьВзаиморасчетов 	= КратностьДоговора / КратностьДокумента;
				СтрокаРасшифровки.СуммаВзаиморасчетов 		= ОбъектДокумента.СуммаДокумента * КурсПересчета;
			КонецЕсли;
		Иначе
			СтрокаРасшифровки.КурсВзаиморасчетов	  = 1;
			СтрокаРасшифровки.КратностьВзаиморасчетов = 1;
			СтрокаРасшифровки.СуммаВзаиморасчетов	  = ОбъектДокумента.СуммаДокумента;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС) Тогда
			ЗначениеСтавкиНДС = УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС);
			
			СтрокаРасшифровки.СуммаНДС = СтрокаРасшифровки.СуммаПлатежа * ЗначениеСтавкиНДС / (100+ЗначениеСтавкиНДС);
			УстановитьСвойство(СтрокаРасшифровки, "СуммаНДС", СтрокаРасшифровки.СуммаНДС);
		КонецЕсли;

		//проставляем признаки того, что платеж прошел:
		Если ЗначениеЗаполнено(ИсходныеДанные.Поступило) Тогда
			
			УстановитьСвойство(ОбъектДокумента, "Оплачено",		Истина);
			УстановитьСвойство(ОбъектДокумента, "ДатаВыписки", 	НачалоДня(ИсходныеДанные.Поступило));
			
		КонецЕсли;
		//В данном случае ДатуВыписки не закомментируем, потому что поиск в ПОпост проводится по входящей
		//дате, в отличие от ПОспис, где поиск проводится по ДатеВыписки.
		
	ИначеЕсли ИмяРеквизита = "Ответственный" Тогда
		//Устанавливаем ответственного как: глТекущийПользователь
		УстановитьСвойство(ОбъектДокумента, "Ответственный", ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(, "ОсновнойОтветственный"));
		
	Иначе
		
		Попытка
			ЗначениеРеквизита = ИсходныеДанные[ИмяРеквизита];
		Исключение
			ЗначениеРеквизита = Неопределено;
		КонецПопытки;
			
		Если ЗначениеРеквизита <> Неопределено Тогда
			УстановитьСвойство(ОбъектДокумента, ИмяРеквизита, ЗначениеРеквизита);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗадатьПометкуНаУдаление(ОбъектДляПометки, Пометка, СтекОповещений)
	
	НазваниеОбъекта = ПолучитьПредставлениеОбъекта(ОбъектДляПометки);
	НазваниеДействия = ?(Пометка, "", "");
	Попытка
		
		ОбъектДляПометки.Записать(РежимЗаписиДокумента.Запись);
		ОбъектДляПометки.УстановитьПометкуУдаления(Пометка);
		
		Если Пометка Тогда
			ТекстСообщения = НСтр("ru = '%1: помечен на удаление.'");
		Иначе
			ТекстСообщения = НСтр("ru = '%1: отменена пометка на удаление.'");
		КонецЕсли;
		СтекОповещений.Добавить(Новый Структура("Текст", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2))));
		
	Исключение
		
		Если Пометка Тогда
			ТекстСообщения = НСтр("ru = '%1: не помечен на удаление! Произошли ошибки при записи!'");
		Иначе
			ТекстСообщения = НСтр("ru = '%1: не отменена пометка на удаление! Произошли ошибки при записи!'");
		КонецЕсли;
		СтекОповещений.Добавить(Новый Структура("Текст", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2)) + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		
	КонецПопытки
	
КонецПроцедуры

Функция СоздатьСтруктуруЗначенийДокумента(ИсходныеДанные, КоллецияКолонок)
	
	НоваяСтруктура = Новый Структура;
	
	Для каждого КолонкаТаблицы из КоллецияКолонок  Цикл
		НоваяСтруктура.Вставить(КолонкаТаблицы.Имя, ИсходныеДанные[КолонкаТаблицы.Имя]);
	КонецЦикла;
	
	Возврат НоваяСтруктура;
	
КонецФункции

// Ищет контрагента по РНН
//
Функция НайтиКонтрагентаПоБИН_ИНН_РНН(Вид, БИН_ИИНКраткий, РННКраткий, ИмяКраткое, СтекОповещений)
	
	///////////////////	
	Ссылка = Справочники[Вид].ПустаяСсылка();
	Если ЗначениеЗаполнено(БИН_ИИНКраткий) Тогда
		// ищем по БИН
		Если Вид = "Контрагенты" Или Вид = "ФизическиеЛица" Тогда
			Ссылка = Справочники[Вид].НайтиПоРеквизиту("ИдентификационныйКодЛичности", БИН_ИИНКраткий);
		Иначе
			Ссылка = Справочники[Вид].НайтиПоРеквизиту("ИдентификационныйНомер", БИН_ИИНКраткий);
		КонецЕсли;		
	КонецЕсли;
	
	Если Ссылка.Пустая() И ЗначениеЗаполнено(РННКраткий) Тогда
		Ссылка = Справочники[Вид].НайтиПоРеквизиту("РНН",РННКраткий);
	КонецЕсли;
	
	///////////////////
	
	Если Ссылка.Пустая() Тогда
		Если Вид="Контрагенты" Тогда
			Ссылка = Справочники[Вид].НайтиПоНаименованию(ИмяКраткое);
			Если Ссылка.Пустая() Тогда 
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = 'Не найден контрагент %1. Проверьте БИН/ИИН или РНН %2'"), ИмяКраткое, РННКраткий); 
			Иначе 
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = 'Контрагент %1 найден по наименованию. БИН/ИИН или РНН контрагента %2 не совпадает с БИН/ИИН или РНН контрагента из файла %3'"), 
										ИмяКраткое, Ссылка.РНН, РННКраткий); 
			КонецЕсли;
			
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
			
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = 'Не найдена организация. Проверьте БИН/ИИН или РНН %1'", РННКраткий));
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));	
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

//Создает контрагента
//
Функция СоздатьКонтрагента(СтрокаКонтрагент = Неопределено, ТаблицаКонтрагентов = Неопределено, ТекОрганизация, СтекОповещений, ТекВалюта = Неопределено) Экспорт //или СтрокаКонтрагент - строка, или ТаблицаКонтрагентов - ТЗ

	ВыбраныйКонтрагент = СтрокаКонтрагент;
	ИскомыйКонтрагент  = Неопределено;
	НовыйКонтрагент    = Неопределено;

	
	//СОЗДАТЬ КОНТРАГЕНТА ИЗ ТАБЛИЦЫ ЗНАЧЕНИЙ
	СтрНовыйКонтрагент = Новый Структура();
	
	Для Каждого Элемент Из ТаблицаКонтрагентов Цикл
		ТипКонтрагента = Элемент["ТипКонтрагента"];
		СтрНовыйКонтрагент.Вставить(Элемент["Реквизит"], Элемент["Значение"]);
	КонецЦикла;

	НовыйКонтрагент    = Новый СписокЗначений();
	НовыйКонтрагент.Добавить(СтрНовыйКонтрагент);
	НовыйКонтрагент    = НовыйКонтрагент.НайтиПоЗначению(СтрНовыйКонтрагент);
		
	ДанныеКонтрагента = НовыйКонтрагент.Значение;
	
	Если ДанныеКонтрагента.Свойство(ТипКонтрагента + "РНН") Тогда
		РННКраткий = ДанныеКонтрагента[ТипКонтрагента + "РНН"];
	Иначе
		РННКраткий = "";
	КонецЕсли;
	
	Если ДанныеКонтрагента.Свойство(ТипКонтрагента + "БИН_ИИН") Тогда
		БИН_ИИНКраткий = ДанныеКонтрагента[ТипКонтрагента + "БИН_ИИН"];
	Иначе
		БИН_ИИНКраткий = "";
	КонецЕсли;
	
	Если ДанныеКонтрагента.Свойство(ТипКонтрагента + "Наименование") Тогда
		ИмяКраткое = ДанныеКонтрагента[ТипКонтрагента + "Наименование"];
	Иначе
		ИмяКраткое = "";
	КонецЕсли;
	
	Контрагент = НайтиКонтрагентаПоБИН_ИНН_РНН("Контрагенты", БИН_ИИНКраткий, РННКраткий, ИмяКраткое, СтекОповещений);
	
	СтруктураДанныхКонтрагента = Новый Структура;

	Если Контрагент.Пустая() Тогда

		//эти элементы есть у всех справочников
		НовыйЭлемент = Справочники.Контрагенты.СоздатьЭлемент();
		
		Если ДанныеКонтрагента.Свойство(ТипКонтрагента+"Наименование") Тогда	
			НовыйЭлемент.НаименованиеПолное = ДанныеКонтрагента[ТипКонтрагента + "Наименование"];
			НовыйЭлемент.Наименование		= НовыйЭлемент.НаименованиеПолное;
		КонецЕсли;
		
		Если ДанныеКонтрагента.Свойство(ТипКонтрагента + "РНН") Тогда	
			НовыйЭлемент.РНН = ДанныеКонтрагента[ТипКонтрагента + "РНН"];
		КонецЕсли;
		
		Если ДанныеКонтрагента.Свойство(ТипКонтрагента + "БИН_ИИН") Тогда	
			НовыйЭлемент.ИдентификационныйКодЛичности = ДанныеКонтрагента[ТипКонтрагента + "БИН_ИИН"];
		КонецЕсли;
		
		НовыйЭлемент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		
		//поставим что обменДанными.Загрузка, так как при записи нового контрагента
		//могут проверяться поля, которых при импорту неоткуда брать
		НовыйЭлемент.ОбменДанными.Загрузка = Истина;
		НовыйЭлемент.Записать();
		НовыйЭлемент.УстановитьНовыйКод();
		
		НомерСчета = ДанныеКонтрагента[ТипКонтрагента+"ИИК"];
		
		//Определяем валюту создаваемого счета
		Если ТекВалюта = Неопределено Тогда
			КодВалюты   = ТекОрганизация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств.Код;
			ВалютаСчета = Справочники.Валюты.НайтиПоКоду(КодВалюты);
		Иначе
			ВалютаСчета = ТекВалюта;
		КонецЕсли;
	
		Если НЕ ВалютаСчета = Справочники.Валюты.ПустаяСсылка() Тогда // Знаем валюту счета и можем создать элемент.
		
			НовыйСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
			НовыйСчет.Наименование    		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 Основной расчетный счет'", ОбщегоНазначения.КодОсновногоЯзыка()), НомерСчета);
			НовыйСчет.НомерСчета      		= НомерСчета;
			НовыйСчет.Владелец       		= НовыйЭлемент.Ссылка;
			НовыйСчет.ВидСчета       		= "Расчетный";
			НовыйСчет.ВалютаДенежныхСредств	= ВалютаСчета;
			
			//поставим что обменДанными.Загрузка, так как при записи нового контрагента
			//создается банковский счет, в котором обязательно поле "Банк", а его при импорте
			//неоткуда брать			
			НовыйСчет.ОбменДанными.Загрузка = Истина;
			
			НовыйСчет.Записать();
			НовыйЭлемент.ОсновнойБанковскийСчет = НовыйСчет.Ссылка;
		Иначе
		    СтекОповещений.Добавить(Новый Структура("Текст", НСтр("ru = 'Не определен основной банковский счет организации!!!'")));
			НовыйСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
		КонецЕсли;
				
		//Договор контрагента
		
		Если НовыйЭлемент.Метаданные().Реквизиты.Найти("ОсновнойДоговорКонтрагента") <> Неопределено Тогда    
			Если ТипКонтрагента = "ПЛАТЕЛЬЩИК" Тогда 
            	НовыйЭлемент.ОсновнойДоговорКонтрагента = СоздатьНужныйДоговор(НовыйЭлемент.Ссылка, ТекОрганизация, Истина, ВалютаСчета);
			Иначе 
				НовыйЭлемент.ОсновнойДоговорКонтрагента = СоздатьНужныйДоговор(НовыйЭлемент.Ссылка, ТекОрганизация, Ложь, ВалютаСчета);
			КонецЕсли;
		КонецЕсли;
		
		НовыйЭлемент.ГоловнойКонтрагент = НовыйЭлемент.Ссылка;
		
		НовыйЭлемент.Записать();		
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Контрагент ""%1"" создан.'"), НовыйЭлемент.Наименование);
		СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		
		Контрагент = НовыйЭлемент.Ссылка;
		
		СтруктураДанныхКонтрагента.Вставить("Контрагент",Контрагент); 
		СтруктураДанныхКонтрагента.Вставить("СчетКонтрагента",НовыйСчет.Ссылка);

	Иначе
		//Проверка на наличие счета контрагента (если нет счета, то создаем новый, а если нет, то выходим)
		НовыйЭлементСНовымСчетом = Контрагент;
		
		НомерСчета = ДанныеКонтрагента[ТипКонтрагента+"ИИК"];
		//Определяем валюту создаваемого счета
		Если ТекВалюта = Неопределено Тогда
			КодВалюты   = ТекОрганизация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств.Код;
			ВалютаСчета = Справочники.Валюты.НайтиПоКоду(КодВалюты);
		Иначе
			ВалютаСчета = ТекВалюта;
		КонецЕсли;

		Если НЕ ВалютаСчета=Справочники.Валюты.ПустаяСсылка() Тогда         		
			
			НовыйСчет = СоздатьНужныйСчет(НовыйЭлементСНовымСчетом.Ссылка,НомерСчета,ВалютаСчета);
		
			Объект = НовыйЭлементСНовымСчетом.ПолучитьОбъект();
			Если Не ЗначениеЗаполнено(Объект.ОсновнойБанковскийСчет) Тогда
				Объект.ОсновнойБанковскийСчет = НовыйСчет;
			КонецЕсли;			
			
	   		Попытка
        		Объект.Записать();
    		Исключение
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось записать объект ""%1""
										|%2'"), Объект, ОписаниеОшибки());
				СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
			КонецПопытки;
			
		Иначе
			
			НовыйСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
	
		КонецЕсли;
	  
		Контрагент = НовыйЭлементСНовымСчетом.Ссылка;
		
		СтруктураДанныхКонтрагента.Вставить("Контрагент",Контрагент); 
		СтруктураДанныхКонтрагента.Вставить("СчетКонтрагента",НовыйСчет);
	КонецЕсли;
		
	
	Возврат СтруктураДанныхКонтрагента;

КонецФункции //СоздатьКонтрагента(Контрагент)

//создаем список ненайденных контрагентов
Процедура СписокНеНайденных(РеквизитыКонтрагента, Реквизиты = Неопределено, Документ = Неопределено, НовыйКонтрагент=Истина, ИсходныеДанные, Организация, СтекОповещений) Экспорт
	
	ТипКонтрагента =Неопределено;
	
	КопияСписокКонтрагентов =Новый СписокЗначений();
	
	Если Реквизиты.Количество() = 0 Тогда
		СтекОповещений.Добавить(Новый Структура("Текст", НСтр("ru = 'Документ создан вручную.'")));
		Возврат;
	КонецЕсли;
	
	КопияСписокКонтрагентов.Добавить(Реквизиты);
		
	ТаблицаКонтрагентов = Новый ДеревоЗначений;
	
	ТаблицаКонтрагентов.Колонки.Добавить("Представление");
	ТаблицаКонтрагентов.Колонки.Добавить("Значение");
	ТаблицаКонтрагентов.Колонки.Добавить("Реквизит");
	ТаблицаКонтрагентов.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево"));
	
	КонтрагентРНН ="";
	
	Для Каждого Список Из КопияСписокКонтрагентов Цикл
		
		Индекс =КопияСписокКонтрагентов.Индекс(Список);
		
		Если НЕ Список.Значение.Свойство("ТИПКОНТРАГЕНТА", ТипКонтрагента) Тогда
			
			Если ЗначениеЗаполнено(Список.Значение["ДАТАПОСТУПИЛО"]) Тогда
				ТипКонтрагента = "ПЛАТЕЛЬЩИК";
			Иначе
				ТипКонтрагента = "ПОЛУЧАТЕЛЬ";
			КонецЕсли;
			
		КонецЕсли;
		
		Список.Значение.Свойство(ТипКонтрагента + "РНН", КонтрагентРНН);
		Если ТаблицаКонтрагентов.Строки.Найти(КонтрагентРНН, "Значение", Истина) <> Неопределено тогда
			Продолжить;
		КонецЕсли;
				
		ТаблицаКонтрагентов.Строки.Добавить().Установить(0, Список.Значение[ТипКонтрагента+"Наименование"]);
		
		ТаблицаКонтрагентов.Строки[Индекс].Строки.Добавить();
		ТаблицаКонтрагентов.Строки[Индекс].Строки[0].Установить(0, НСтр("ru = 'Наименование контрагента'"));
		ТаблицаКонтрагентов.Строки[Индекс].Строки[0].Установить(1, Список.Значение[ТипКонтрагента+"Наименование"]);
		ТаблицаКонтрагентов.Строки[Индекс].Строки[0].Установить(2, ТипКонтрагента+"Наименование");
			
		ТаблицаКонтрагентов.Строки[Индекс].Строки.Добавить();
		ТаблицаКонтрагентов.Строки[Индекс].Строки[1].Установить(0, НСтр("ru = 'РНН контрагента'"));
		ТаблицаКонтрагентов.Строки[Индекс].Строки[1].Установить(1, Список.Значение[ТипКонтрагента+"РНН"]);
		ТаблицаКонтрагентов.Строки[Индекс].Строки[1].Установить(2, ТипКонтрагента+"РНН");
		
		ТаблицаКонтрагентов.Строки[Индекс].Строки.Добавить();
		ТаблицаКонтрагентов.Строки[Индекс].Строки[2].Установить(0, НСтр("ru = 'БИН/ИИН контрагента'"));
		ТаблицаКонтрагентов.Строки[Индекс].Строки[2].Установить(1, Список.Значение[ТипКонтрагента+"БИН_ИИН"]);
		ТаблицаКонтрагентов.Строки[Индекс].Строки[2].Установить(2, ТипКонтрагента+"БИН_ИИН");
			
		ТаблицаКонтрагентов.Строки[Индекс].Строки.Добавить();
		ТаблицаКонтрагентов.Строки[Индекс].Строки[3].Установить(0, НСтр("ru = 'Р/счет контрагента'"));
		ТаблицаКонтрагентов.Строки[Индекс].Строки[3].Установить(1, Список.Значение[ТипКонтрагента+"ИИК"]);
		ТаблицаКонтрагентов.Строки[Индекс].Строки[3].Установить(2, ТипКонтрагента+"ИИК");
			
	КонецЦикла;
	
	//заполняем РеквизитыКонтрагента 
	Если Документ <> Неопределено Тогда
		РеквизитыКонтрагента.Очистить();
		
		Для Счет = 0  По ТаблицаКонтрагентов.Строки[0].Строки.Количество()-1 Цикл
			РеквизитыКонтрагента.Добавить().ТипКонтрагента =ТипКонтрагента;
		КонецЦикла;
		
		РеквизитыКонтрагента.ЗагрузитьКолонку(ТаблицаКонтрагентов.Строки[0].Строки.ВыгрузитьКолонку("Представление"), "Представление");
		РеквизитыКонтрагента.ЗагрузитьКолонку(ТаблицаКонтрагентов.Строки[0].Строки.ВыгрузитьКолонку("Значение")		, "Значение");
		РеквизитыКонтрагента.ЗагрузитьКолонку(ТаблицаКонтрагентов.Строки[0].Строки.ВыгрузитьКолонку("Реквизит")		, "Реквизит");
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсходныеДанные.СчетОрганизации) Тогда
		ВалютаЗагрузки = ИсходныеДанные.СчетОрганизации.ВалютаДенежныхСредств;
	Иначе
		ВалютаЗагрузки = Неопределено;
	КонецЕсли;
	
	СтруктураДанныхКонтрагента  =  СоздатьКонтрагента(, РеквизитыКонтрагента, Организация, СтекОповещений, ВалютаЗагрузки);
	НовыйКонтрагент = СтруктураДанныхКонтрагента.Контрагент;
					
	Если НЕ НовыйКонтрагент.Пустая() Тогда
		Если ТипКонтрагента = "ПЛАТЕЛЬЩИК" Тогда 
			НовыйДоговор = СоздатьНужныйДоговор(НовыйКонтрагент, Организация, Истина, СтруктураДанныхКонтрагента.СчетКонтрагента.ВалютаДенежныхСредств);
		Иначе
		    НовыйДоговор = СоздатьНужныйДоговор(НовыйКонтрагент, Организация, Ложь, СтруктураДанныхКонтрагента.СчетКонтрагента.ВалютаДенежныхСредств);
		КонецЕсли;
	КонецЕсли;
			
 	ИсходныеДанные["Контрагент"] = НовыйКонтрагент;    
	ИсходныеДанные["СчетКонтрагента"] = СтруктураДанныхКонтрагента.СчетКонтрагента;

КонецПроцедуры //СписокНенайденных()

Процедура ЗаписатьОбъект(ОбъектДляЗаписи, СтрокаСекции, Организация, СтруктураНастроек, СтекОповещений)
	
	НазваниеОбъекта = ПолучитьПредставлениеОбъекта(ОбъектДляЗаписи);
	
	Если НЕ ЗначениеЗаполнено(ОбъектДляЗаписи.Дата) Тогда
		ОбъектДляЗаписи.Дата = ОбъектДляЗаписи.ДатаВыписки;
	КонецЕсли;
	
	ТипДокумента = ОбъектДляЗаписи.Метаданные().Имя;
	
	Если ТипДокумента = "ПлатежноеПоручениеИсходящее" Тогда
		НастройкаЗаполнять  = "ППИсх_ЗаполнятьДанныеАвтоматически";
		НастройкаОтражатьНУ = "ППИсх_УчитыватьКПН";
		НастройкаПроводить  = "ППИсх_ПроводитьНовыеДокументы";
		НастройкаВидУчетаНУ = "ППИсх_ВидУчетаНУ";
		
	ИначеЕсли ТипДокумента = "ПлатежноеПоручениеВходящее" Тогда
		НастройкаЗаполнять 	= "ППВх_ЗаполнятьДанныеАвтоматически";
		НастройкаОтражатьНУ = "ППВх_УчитыватьКПН";
		НастройкаПроводить 	= "ППВх_ПроводитьНовыеДокументы";
		НастройкаВидУчетаНУ = "ППВх_ВидУчетаНУ";
		
	ИначеЕсли ТипДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств" Тогда
		НастройкаЗаполнять	= "ПОСпис_ЗаполнятьДанныеАвтоматически";
		НастройкаОтражатьНУ = "ПОСпис_УчитыватьКПН";
		НастройкаПроводить 	= "ПОСпис_ПроводитьНовыеДокументы";
		НастройкаВидУчетаНУ = "ПОСпис_ВидУчетаНУ";
		
	ИначеЕсли ТипДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств" Тогда
		НастройкаЗаполнять 	= "ПОПост_ЗаполнятьДанныеАвтоматически";
		НастройкаОтражатьНУ = "ПОПост_УчитыватьКПН";
		НастройкаПроводить 	= "ПОПост_ПроводитьНовыеДокументы";
		НастройкаВидУчетаНУ = "ПОПост_ВидУчетаНУ";
		
	КонецЕсли;

	ЗаполнятьАвтоматически = СтруктураНастроек[НастройкаЗаполнять];
	Проводить = Ложь;
	
	Если (ЗаполнятьАвтоматически = Истина) Тогда
		ПризнакНалоговогоУчета = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация,ОбъектДляЗаписи.Дата);
		Если СтруктураНастроек[НастройкаОтражатьНУ] = Истина Тогда 
			УстановитьСвойство(ОбъектДляЗаписи, "УчитыватьКПН",ПризнакНалоговогоУчета);
		Иначе 
			УстановитьСвойство(ОбъектДляЗаписи, "УчитыватьКПН",(СтруктураНастроек[НастройкаОтражатьНУ] = Истина));
		КонецЕсли;
		УстановитьСвойство(ОбъектДляЗаписи, "ВидУчетаНУ", СтруктураНастроек[НастройкаВидУчетаНУ]);
		Проводить = (СтруктураНастроек[НастройкаПроводить] = Истина);
	КонецЕсли;
			
	Попытка
		ЭтоНовый = ОбъектДляЗаписи.ЭтоНовый();
		ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Запись);
		НазваниеОбъекта = Стрзаменить(НазваниеОбъекта, "%Номер%", СокрЛП(ОбъектДляЗаписи.Номер));
		
		Если ЭтоНовый Тогда
			ТекстСообщения = НСтр("ru = 'Создан %1.'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Записан %1.'");
		КонецЕсли;
		СтекОповещений.Добавить(Новый Структура("Текст", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НазваниеОбъекта)));
		
		СтрокаСекции.СостояниеДокумента = 2;
		
	Исключение
		
		НазваниеОбъекта = Стрзаменить(НазваниеОбъекта, "%Номер%", СокрЛП(ОбъектДляЗаписи.Номер));
		Если ОбъектДляЗаписи.ЭтоНовый() Тогда
			ТекстСообщения = НСтр("ru = '%1 не создан! Произошли ошибки при записи!'");
		Иначе
			ТекстСообщения = НСтр("ru = '%1 не записан! Произошли ошибки при записи!'");
		КонецЕсли;
		СтекОповещений.Добавить(Новый Структура("Текст", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2)) + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		
		Возврат;
		
	КонецПопытки;
	
	Попытка
		
		Если Проводить Тогда
			ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Проведение);
			
			ТекстСообщения = НСтр("ru = 'Проведен %1.'");
			СтекОповещений.Добавить(Новый Структура("Текст", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НазваниеОбъекта)));
			
			СтрокаСекции.Проведен = ОбъектДляЗаписи.Проведен;
			СтрокаСекции.СостояниеДокумента = 0;

		КонецЕсли;
		
	Исключение
		ТекстСообщения = НСтр("ru = '%1 не проведен! Произошли ошибки при проведении!'");
		СтекОповещений.Добавить(Новый Структура("Текст", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2))));
		
	КонецПопытки

КонецПроцедуры

#КонецЕсли