&НаКлиенте
Перем ИдентификаторСтрокиПроводки;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ Параметры.Свойство("ДокументСсылка") Тогда
		Сообщить(НСтр("ru = 'Данная обработка вызывается из других объектов конфигурации! 
		|Вручную вызывать запрещено!'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДокументСсылка = Параметры.ДокументСсылка;
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Движения документа: %1'"), Строка(ДокументСсылка));
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	ЗаполнитьСтруктуруШапкиДокумента(МетаданныеДокумента);
	
	СтруктураШапки.Проведен = ПроцедурыБухгалтерскогоУчета.ДокументПроведен(ДокументСсылка);
	
	Если Не СтруктураШапки.Проведен 
		И (Не СтруктураШапки.Свойство("РучнаяКорректировка") Или Не СтруктураШапки.РучнаяКорректировка) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапки.Свойство("РучнаяКорректировка") Тогда
		Объект.РучнаяКорректировка = СтруктураШапки.РучнаяКорректировка;
	Иначе
		Элементы.РучнаяКорректировка.Видимость    = Ложь;
		Элементы.КнопкаЗаписатьИЗакрыть.Видимость = Ложь;
	КонецЕсли;
	
	Если Не (РольДоступна("РедактированиеДвиженийДокумента") Или РольДоступна("ПолныеПрава")) Тогда
		Элементы.РучнаяКорректировка.Видимость    = Ложь;
		Элементы.КнопкаЗаписатьИЗакрыть.Видимость = Ложь;
	КонецЕсли;
	
	Если Не (РольДоступна("ДобавлениеИзменениеДанныхБухгалтерии") Или РольДоступна("ПолныеПрава")) Или Не ПравоДоступа("Изменение", Метаданные.Документы.ОперацияБух) Тогда
		Элементы.ФормаВвестиНовуюКорректировку.Видимость = Ложь;
	КонецЕсли;
	
	ОбновитьДанныеОВведенныхКорректировках();
	
	Если Не ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ЗаполнитьТаблицуРегистров(МетаданныеДокумента);
	СоздатьРеквизитыФормы();
	ПрочитатьЗаписиРегистров();
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	СоздатьЭлементыФормы();
	
	УстановитьВозможностьРедактированияЗаписей();
	ПредставлениеДокумента = Строка(ДокументСсылка);
	
	УстановитьФункциональныеОпцииФормы();
	
	ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ЗаблокироватьКорректировкуДвижений(ЭтотОбъект, СтруктураШапки.Проведен, ДокументСсылка);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ СтруктураШапки.Проведен 
		И (НЕ СтруктураШапки.Свойство("РучнаяКорректировка") ИЛИ НЕ СтруктураШапки.РучнаяКорректировка) Тогда 
	
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОперацияБух")
			ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.Сторнирование") Тогда
			ТекстПредупреждения = НСтр("ru='Документ помечен на удаление.
			|Для получения информации о движениях, необходимо снять пометку на удаление'");
		Иначе
			ТекстПредупреждения = НСтр("ru='Документ не проведен.
			|Для получения информации о результатах проведения документ необходимо провести.'");
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ПоказатьПредупреждениеПриЗавершении",ЭтаФорма);
		ПоказатьПредупреждение(Оповещение, ТекстПредупреждения);

		Отказ = Истина;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждениеПриЗавершении(Результат)  Экспорт 
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	ПовторноеОткрытиеСервер();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Сохранить изменения движений?'");
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Отказ",Отказ);
		
		Оповещение = Новый ОписаниеОповещения("ПоказатьВопросПриЗавершении",ЭтаФорма, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, ,КодВозвратаДиалога.Да);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросПриЗавершении(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьДвижения(Параметры.Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Операция" ИЛИ ИмяСобытия = "Запись_Сторнирование" Тогда
		ОбновитьДанныеОВведенныхКорректировках();
	КонецЕсли; 	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура РучнаяКорректировкаПриИзменении(Элемент)
	
	ВыполнитьДействияПриИзмененииРучнойКорректировки();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Типовой

&НаКлиенте
Процедура ТаблицаРегистраПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные   = Элемент.ТекущиеДанные;
	ТаблицаРегистра = Элемент.Имя;
	
	Если ТаблицаРегистра = "Типовой" ИЛИ ТаблицаРегистра = "Налоговый" Тогда
		
		ИдСтроки = Элемент.ТекущаяСтрока;
		
		Если ИдСтроки <> ИдентификаторСтрокиПроводки Тогда
		
			ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
				ТаблицаРегистра + "СубконтоДт1", ТаблицаРегистра + "СубконтоДт2", ТаблицаРегистра + "СубконтоДт3");
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(ТекущиеДанные.СчетДт, ЭтотОбъект, ПоляФормы, Неопределено, Истина);
		
			ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
				ТаблицаРегистра + "СубконтоКт1", ТаблицаРегистра + "СубконтоКт2", ТаблицаРегистра + "СубконтоКт3");
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриВыбореСчета(ТекущиеДанные.СчетКт, ЭтотОбъект, ПоляФормы, Неопределено, Истина);
			
			ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "", ТаблицаРегистра, Ложь);
			
			ИдентификаторСтрокиПроводки = ИдСтроки;
		
		КонецЕсли;
		
	КонецЕсли;

	Если НоваяСтрока И НЕ Копирование Тогда
		Если ТекущиеДанные.Свойство("Организация")
			И СтруктураШапки.Свойство("Организация") Тогда
			ТекущиеДанные.Организация = СтруктураШапки.Организация;
		КонецЕсли;
		Если ТекущиеДанные.Свойство("Период")
			И СтруктураШапки.Свойство("Дата") Тогда
			ТекущиеДанные.Период = СтруктураШапки.Дата;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРегистраВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Не Объект.РучнаяКорректировка Тогда
		
		ИмяТаблицы = Элемент.Имя; 
		ИмяПоля = СтрЗаменить(Поле.Имя,ИмяТаблицы,""); 
		
		Попытка 
			Значение = Элемент.ТекущиеДанные[ИмяПоля];
			
			Если ЗначениеЗаполнено(Значение) 
				И ТипЗнч(Значение) <> Тип("Число") 
				И ТипЗнч(Значение) <> Тип("Дата")
				И ТипЗнч(Значение) <> Тип("Булево")
				И ТипЗнч(Значение) <> Тип("ХранилищеЗначения")Тогда
				ПоказатьЗначение(, Значение);
				СтандартнаяОбработка = Ложь;
			КонецЕсли;   
		Исключение
			
		КонецПопытки		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТиповойСчетДтПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Типовой.ТекущиеДанные;

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3, Организация",
								 "СубконтоДт1", "СубконтоДт2", "СубконтоДт3", СтрокаТаблицы.Организация);

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетДт, СтрокаТаблицы, ПоляОбъекта, Истина, Ложь);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт", "Типовой");

КонецПроцедуры

&НаКлиенте
Процедура ТиповойСчетКтПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Типовой.ТекущиеДанные;

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3, Организация",
								 "СубконтоКт1", "СубконтоКт2", "СубконтоКт3", СтрокаТаблицы.Организация);

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетКт, СтрокаТаблицы, ПоляОбъекта, Истина, Ложь);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Кт", "Типовой");

КонецПроцедуры

&НаКлиенте
Процедура ТиповойСубконтоДт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Типовой.ТекущиеДанные;
	ОбработатьНачалоВыбораСубконто("Дт", 1, Элемент, ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТиповойСубконтоДт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Типовой.ТекущиеДанные;
	ОбработатьНачалоВыбораСубконто("Дт", 2, Элемент, ТекущиеДанные, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ТиповойСубконтоДт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Типовой.ТекущиеДанные;
	ОбработатьНачалоВыбораСубконто("Дт", 3, Элемент, ТекущиеДанные, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ТиповойСубконтоКт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Типовой.ТекущиеДанные;
	ОбработатьНачалоВыбораСубконто("Кт", 1, Элемент, ТекущиеДанные, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ТиповойСубконтоКт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Типовой.ТекущиеДанные;
	ОбработатьНачалоВыбораСубконто("Кт", 2, Элемент, ТекущиеДанные, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ТиповойСубконтоКт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Типовой.ТекущиеДанные;
	ОбработатьНачалоВыбораСубконто("Кт", 3, Элемент, ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТиповойСубконтоДт1ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт", "Типовой");
	
КонецПроцедуры

&НаКлиенте
Процедура ТиповойСубконтоДт2ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт", "Типовой");
	
КонецПроцедуры

&НаКлиенте
Процедура ТиповойСубконтоДт3ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт", "Типовой");
	
КонецПроцедуры

&НаКлиенте
Процедура ТиповойСубконтоКт1ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Кт", "Типовой");
	
КонецПроцедуры

&НаКлиенте
Процедура ТиповойСубконтоКт2ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Кт", "Типовой");
	
КонецПроцедуры

&НаКлиенте
Процедура ТиповойСубконтоКт3ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Кт", "Типовой");
	
КонецПроцедуры

&НаКлиенте
Процедура ТиповойВалютаДтПриИзменении(Элемент)
	
	РасчетСуммы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТиповойВалютнаяСуммаДтПриИзменении(Элемент)
	
	РасчетСуммы(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ТиповойВалютаКтПриИзменении(Элемент)
	
	РасчетСуммы(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ТиповойВалютнаяСуммаКтПриИзменении(Элемент)
	
	РасчетСуммы(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ТиповойВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Не Объект.РучнаяКорректировка Тогда 
		ИмяПоля = СтрЗаменить(Поле.Имя,"Типовой",""); 
		Значение = Элемент.ТекущиеДанные[ИмяПоля];
		Если ЗначениеЗаполнено(Значение) 
			И ТипЗнч(Значение) <> Тип("Число") 
			И ТипЗнч(Значение) <> Тип("Дата")
			И ТипЗнч(Значение) <> Тип("Булево") Тогда
			ПоказатьЗначение(, Значение);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Налоговый

&НаКлиенте
Процедура НалоговыйСчетДтПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Налоговый.ТекущиеДанные;

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3, Организация",
								 "СубконтоДт1", "СубконтоДт2", "СубконтоДт3", СтрокаТаблицы.Организация);

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетДт, СтрокаТаблицы, ПоляОбъекта, Истина, Ложь);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт", "Налоговый");

КонецПроцедуры

&НаКлиенте
Процедура НалоговыйСчетКтПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Налоговый.ТекущиеДанные;

	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3, Организация",
								 "СубконтоКт1", "СубконтоКт2", "СубконтоКт3", СтрокаТаблицы.Организация);

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетКт, СтрокаТаблицы, ПоляОбъекта, Истина, Ложь);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Кт", "Налоговый");

КонецПроцедуры

&НаКлиенте
Процедура НалоговыйСубконтоДт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Налоговый.ТекущиеДанные;
	ОбработатьНачалоВыбораСубконто("Дт", 1, Элемент, ТекущиеДанные, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура НалоговыйСубконтоДт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Налоговый.ТекущиеДанные;
	ОбработатьНачалоВыбораСубконто("Дт", 2, Элемент, ТекущиеДанные, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура НалоговыйСубконтоДт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Налоговый.ТекущиеДанные;
	ОбработатьНачалоВыбораСубконто("Дт", 3, Элемент, ТекущиеДанные, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура НалоговыйСубконтоКт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Налоговый.ТекущиеДанные;
	ОбработатьНачалоВыбораСубконто("Кт", 1, Элемент, ТекущиеДанные, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура НалоговыйСубконтоКт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Налоговый.ТекущиеДанные;
	ОбработатьНачалоВыбораСубконто("Кт", 2, Элемент, ТекущиеДанные, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура НалоговыйСубконтоКт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Налоговый.ТекущиеДанные;
	ОбработатьНачалоВыбораСубконто("Кт", 3, Элемент, ТекущиеДанные, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура НалоговыйСубконтоДт1ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт", "Налоговый");
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйСубконтоДт2ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт", "Налоговый");
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйСубконтоДт3ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт", "Налоговый");
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйСубконтоКт1ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Кт", "Налоговый");
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйСубконтоКт2ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Кт", "Налоговый");
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйСубконтоКт3ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Кт", "Налоговый");
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Не Объект.РучнаяКорректировка Тогда
		
		ИмяПоля = СтрЗаменить(Поле.Имя,"Налоговый",""); 
		Значение = Элемент.ТекущиеДанные[ИмяПоля];

		Если ЗначениеЗаполнено(Значение) 
			И ТипЗнч(Значение) <> Тип("Число") 
			И ТипЗнч(Значение) <> Тип("Дата")
			И ТипЗнч(Значение) <> Тип("Булево") Тогда
			ПоказатьЗначение(, Значение);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

 &НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если СтруктураШапки.Свойство("РучнаяКорректировка")
			И СтруктураШапки.РучнаяКорректировка
			И НЕ Объект.РучнаяКорректировка Тогда

		ТекстВопроса = НСтр("ru='Ручная корректировка движений документа отменена.
			|Восстановить движения, сформированные автоматически?'");
			
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Объект",Объект);
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	Иначе
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "Обработка ""корректировка движений"" (запись движений)");
		
		ЗаписьДвижений();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаписьДвижений()
	
	Отказ = Ложь;
	
	ЗаписатьДвижения(Отказ);
	
	ИзмененаРучнаяКорректировка = СтруктураШапки.Свойство("РучнаяКорректировка")
		И (СтруктураШапки.РучнаяКорректировка <> Объект.РучнаяКорректировка);


	Если НЕ Отказ Тогда

		Если ИзмененаРучнаяКорректировка Тогда
			ОповеститьОбИзменении(ДокументСсылка);
		КонецЕсли;

		ЭтаФорма.Модифицированность = Ложь;
		
		Оповестить("ВыполненаЗаписьДокумента",Новый Структура("ДокументСсылка",ДокументСсылка));

		Закрыть();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Параметры.Объект.РучнаяКорректировка = Истина;
		УстановитьВозможностьРедактированияЗаписей();
		Возврат;
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "Обработка ""корректировка движений"" (запись движений)");
	
	ЗаписьДвижений();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТиповой(Команда)
	
	ОбновитьРегистрБухгалтерииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНалоговый(Команда)
	
	ОбновитьРегистрБухгалтерииНаСервере("Налоговый");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройку(Команда)
	
	СписокДвижений  = Новый СписокЗначений;
	СписокРегистров = Новый СписокЗначений;
	
	Для каждого СтрокаРегистра Из Объект.Регистры Цикл
		СписокДвижений.Добавить(СтрокаРегистра.Имя, , СтрокаРегистра.ЕстьДвижения);
		СписокРегистров.Добавить(СтрокаРегистра.Имя, СтрокаРегистра.Синоним, СтрокаРегистра.Отображение);
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СписокДвижений", СписокДвижений);
	СтруктураПараметров.Вставить("СписокРегистров", СписокРегистров);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьНастройкуКорректировкиДвиженийЗавершение", ЭтаФорма);

	ОткрытьФорму("Обработка.КорректировкаДвижений.Форма.ФормаНастройки",СтруктураПараметров,ЭтаФорма,,,,Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура  ОткрытьНастройкуКорректировкиДвиженийЗавершение (Результат, Параметры) Экспорт

	Если ТипЗнч(Результат) = Тип("СписокЗначений") Тогда

		БылиИзменения = Ложь;
		Для каждого СтрокаРегистра Из Объект.Регистры Цикл
			СтрокаСписка = Результат.НайтиПоЗначению(СтрокаРегистра.Имя);
			Если СтрокаРегистра.Отображение <> СтрокаСписка.Пометка Тогда
				БылиИзменения = Истина;
				СтрокаРегистра.Отображение = СтрокаСписка.Пометка;
			КонецЕсли;
		КонецЦикла;

		Если БылиИзменения Тогда

			ВыполнитьДействияПриИзмененииСоставаРегистров();

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ТекстКорректировкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если СписокКорректировок.Количество() = 1 Тогда
		ПоказатьЗначение(, СписокКорректировок.Получить(0).Значение);
	Иначе
		ЗаголовокФормы = НСтр("ru = 'Выберите документ корректировки'");
		ПараметрыФормы = Новый Структура("СписокДокументов, Заголовок", СписокКорректировок, ЗаголовокФормы);
		
		ОткрытьФорму("ОбщаяФорма.ПросмотрСпискаДокументов", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,
		,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ПредставлениеДокументаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(Неопределено, ДокументСсылка);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметров(Форма, ТекущиеДанные, ШаблонИмяПоляОбъекта)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ТекущиеДанные[ИмяПоля]);
		ИначеЕсли ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ТекущиеДанные[ИмяПоля]);
		ИначеЕсли ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ТекущиеДанные[ИмяПоля]);
		ИначеЕсли ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ТекущиеДанные[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("ОстаткиОбороты", "Кт");
	СписокПараметров.Вставить("Организация"   , ТекущиеДанные["Организация"]);

	Возврат СписокПараметров;

КонецФункции

&НаКлиенте
//Процедура ОбработатьНачалоВыбораСубконто(ДтКт, НомерСубконто, Элемент, ДанныеВыбора, СтандартнаяОбработка)
Процедура ОбработатьНачалоВыбораСубконто(ДтКт, НомерСубконто, Элемент, ТекущиеДанные, СтандартнаяОбработка)

	//ТекущиеДанные     = Элементы.Типовой.ТекущиеДанные;
	ПараметрыДокумента = ПолучитьСписокПараметров(ЭтаФорма, ТекущиеДанные, "Субконто" + ДтКт + "%Индекс%");

	// Выбор партии или документа расчетов

	ПараметрыДокумента.Вставить("СчетУчета", ТекущиеДанные["Счет" + ДтКт]);

	//ОбщегоНазначенияБККлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, ПараметрыДокумента);
	ПроцедурыБухгалтерскогоУчетаКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, НомерСубконто, СтандартнаяОбработка, ПараметрыДокумента);	

	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;

	// Выбор других типов, связанных с организацией / контрагентом
	ЗначениеСубконто = ТекущиеДанные["Субконто" + ДтКт + НомерСубконто];
	ТипСубконто      = ТипЗнч(ЗначениеСубконто);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруШапкиДокумента(МетаданныеДокумента = Неопределено)

	Если МетаданныеДокумента = Неопределено Тогда
		МетаданныеДокумента = ДокументСсылка.Метаданные();
	КонецЕсли;

	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номер,
	|	Дата,
	|	Проведен,
	|	ПометкаУдаления";
	Для каждого РеквизитДокумента Из МетаданныеДокумента.Реквизиты Цикл
		ТекстЗапроса = ТекстЗапроса + ",
		|" + РеквизитДокумента.Имя;
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|	Документ." + МетаданныеДокумента.Имя + " КАК Док
	|ГДЕ
	|	Ссылка = &ДокументСсылка";
	Запрос.Текст = ТекстЗапроса;

	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	ТаблицаШапки = Запрос.Выполнить().Выгрузить();
	СтруктураШапки = Новый Структура;
	Для каждого Колонка Из ТаблицаШапки.Колонки Цикл
		СтруктураШапки.Вставить(Колонка.Имя, ТаблицаШапки[0][Колонка.Имя]);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьНаличиеДвижений(МетаданныеДокумента = Неопределено)

	Если МетаданныеДокумента = Неопределено Тогда
		МетаданныеДокумента = ДокументСсылка.Метаданные();
	КонецЕсли;

	Если МетаданныеДокумента.Движения.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;

	ТекстЗапроса = "";

	Для Каждого Движение ИЗ МетаданныеДокумента.Движения Цикл
		// в запросе получаем имена регистров, по которым есть хотя бы одно движение
		// например,
		// ВЫБРАТЬ Первые 1 «РегистрНакопления.ТоварыНаСкладах»
		// ИЗ РегистрНакопления.ТоварыНаСкладах
		// ГДЕ Регистратор = &Регистратор

		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 """ + Движение.ПолноеИмя() +  """ КАК Имя ИЗ "
		+ Движение.ПолноеИмя() + " ГДЕ Регистратор = &Регистратор";

	КонецЦикла;

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();

	Возврат ТаблицаЗапроса;

КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуРегистров(МетаданныеДокумента = Неопределено)

	Если МетаданныеДокумента = Неопределено Тогда
		МетаданныеДокумента = ДокументСсылка.Метаданные();
	КонецЕсли;

	ТаблицаДвижений = ОпределитьНаличиеДвижений(МетаданныеДокумента);
	ТаблицаДвижений.Индексы.Добавить("Имя");

	Объект.Регистры.Очистить();

	Для каждого МетаданныеРегистра Из МетаданныеДокумента.Движения Цикл

		Строка = Объект.Регистры.Добавить();
		Строка.Имя = МетаданныеРегистра.Имя;

		ПолноеИмя = МетаданныеРегистра.ПолноеИмя();

		ПозицияТочки = Найти(ПолноеИмя, ".");
		ТипРегистра = Лев(ПолноеИмя, ПозицияТочки - 1);
		Строка.ТипРегистра = ТипРегистра;
		Строка.Синоним = МетаданныеРегистра.Синоним;

		Строка.ЕстьДвижения = ТаблицаДвижений.Найти(ПолноеИмя, "Имя") <> Неопределено;
		Строка.Отображение = Строка.ЕстьДвижения;

	КонецЦикла;

	// Первым показывается регистр бухгалтерии, затем регистры накопления, затем - сведений
	Объект.Регистры.Сортировать("ТипРегистра, Синоним");

КонецПроцедуры

&НаСервере
Процедура СоздатьРеквизитыФормы()

	НовыеРеквизиты        = Новый Массив;
	УдаляемыеРеквизиты    = Новый Массив;
	СуществующиеРеквизиты = ПолучитьРеквизиты();

	Для каждого СтрокаРегистра Из Объект.Регистры Цикл
		
		Если СтрокаРегистра.Имя = "Типовой"
			ИЛИ СтрокаРегистра.Имя = "Налоговый"  Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого Реквизит Из СуществующиеРеквизиты Цикл
			Если Реквизит.Имя = СтрокаРегистра.Имя Тогда
				УдаляемыеРеквизиты.Добавить(СтрокаРегистра.Имя);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ТипРеквизита = Новый ОписаниеТипов(СтрокаРегистра.ТипРегистра + "НаборЗаписей." + СтрокаРегистра.Имя);
		
		НовыеРеквизиты.Добавить(Новый РеквизитФормы(СтрокаРегистра.Имя, ТипРеквизита, , , Истина));
		
	КонецЦикла;
	
	ИзменитьРеквизиты(НовыеРеквизиты, УдаляемыеРеквизиты);

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконто()

	Для Каждого Проводка Из Типовой Цикл
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДт1", "СубконтоДт2", "СубконтоДт3");
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(Проводка.СчетДт, Проводка, ПоляОбъекта, Ложь);
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоКт1", "СубконтоКт2", "СубконтоКт3");
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(Проводка.СчетКт, Проводка, ПоляОбъекта, Ложь);
	КонецЦикла;
	
	Для Каждого Проводка Из Налоговый Цикл
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДт1", "СубконтоДт2", "СубконтоДт3");
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(Проводка.СчетДт, Проводка, ПоляОбъекта, Ложь);
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоКт1", "СубконтоКт2", "СубконтоКт3");
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(Проводка.СчетКт, Проводка, ПоляОбъекта, Ложь);
	КонецЦикла;


КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыФормы()
	
	ПоказатьТиповой = Ложь;
	ПоказатьНалоговый = Ложь;

	Для каждого СтрокаРегистра Из Объект.Регистры Цикл

		Если СтрокаРегистра.Имя = "Типовой" Тогда
			ПоказатьТиповой = СтрокаРегистра.Отображение;
			Продолжить;
		КонецЕсли;

		Если СтрокаРегистра.Имя = "Налоговый" Тогда
			ПоказатьНалоговый = СтрокаРегистра.Отображение;
			Продолжить;
		КонецЕсли;
		
		
		// Создаем страницу для регистра в "правильном" месте между "предопределенными" закладками
		ИмяГруппы = "Группа" + СтрокаРегистра.Имя;
		ТекГруппа = Элементы.Найти(ИмяГруппы);
		Если ТекГруппа = Неопределено Тогда
			Если СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
				ТекГруппа = Элементы.Вставить(
					ИмяГруппы,
					Тип("ГруппаФормы"),
					Элементы.ГруппаДвиженияРегистров);
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
				ТекГруппа = Элементы.Вставить(
					ИмяГруппы,
					Тип("ГруппаФормы"),
					Элементы.ГруппаДвиженияРегистров);
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
				ТекГруппа = Элементы.Вставить(
					ИмяГруппы,
					Тип("ГруппаФормы"),
					Элементы.ГруппаДвиженияРегистров);
			Иначе
				Продолжить;
			КонецЕсли;
			ТекГруппа.Заголовок = СтрокаРегистра.Синоним;
		КонецЕсли;

		// Делаем страницу регистра невидимой, если она не нужна
		ТекГруппа.Видимость = СтрокаРегистра.Отображение;
		Если НЕ СтрокаРегистра.Отображение Тогда
			Продолжить;
		КонецЕсли;

		// На странице регистра создаем таблицу
		ИмяТаблицы = СтрокаРегистра.Имя;
		ТекТаблица = Элементы.Найти(ИмяТаблицы);
		Если ТекТаблица <> Неопределено Тогда
			Элементы.Удалить(ТекТаблица);
		КонецЕсли;
		ТекТаблица = Элементы.Добавить(ИмяТаблицы, Тип("ТаблицаФормы"), ТекГруппа);
		ТекТаблица.ПутьКДанным = СтрокаРегистра.Имя;
		
		// В командной панели страницы создаем кнопку "Найти в списке"
		ТекКоманда = Команды.Найти(ИмяТаблицы + "НайтиВСписке");
		Если ТекКоманда = Неопределено Тогда
			ТекКоманда = Команды.Добавить(ИмяТаблицы + "НайтиВСписке");
			ТекКоманда.Действие 		= "РегистрНайтиВСписке";
			ТекКоманда.Заголовок 		= НСтр("ru='Найти в списке'");
			ТекКоманда.Картинка 		= БиблиотекаКартинок.НайтиВСписке;
			ТекКоманда.Отображение		= ОтображениеКнопки.Картинка;
		КонецЕсли;
		ТекГруппаКнопок = Элементы.Добавить("Группа" + ИмяТаблицы + "НайтиВСписке", Тип("ГруппаФормы"), ТекТаблица.КоманднаяПанель);
		ТекГруппаКнопок.Вид 		= ВидГруппыФормы.ГруппаКнопок;
		ТекГруппаКнопок.Заголовок 	= НСтр("ru='Найти в списке'");
		ТекКнопка = Элементы.Добавить(ИмяТаблицы + "НайтиВСписке", Тип("КнопкаФормы"), ТекГруппаКнопок);
		ТекКнопка.ИмяКоманды 		= ТекКоманда.Имя;  
		ТекКнопка.Заголовок			= НСтр("ru='Найти в списке'");
			
		// Назначаем общий обработчик
		ТекТаблица.УстановитьДействие("ПриНачалеРедактирования", "ТаблицаРегистраПриНачалеРедактирования"); 
		ТекТаблица.УстановитьДействие("Выбор", "ТаблицаРегистраВыбор");

		
		// Определяем набор колонок для таблицы, соответствующих метаданным регистра
		Если СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
			НаборЗаписей = РегистрыНакопления[СтрокаРегистра.Имя].СоздатьНаборЗаписей();
		ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
			НаборЗаписей = РегистрыСведений[СтрокаРегистра.Имя].СоздатьНаборЗаписей();
		ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
			НаборЗаписей = РегистрыБухгалтерии[СтрокаРегистра.Имя].СоздатьНаборЗаписей();
		КонецЕсли;
		РеквизитыНабораЗаписей = НаборЗаписей.ВыгрузитьКолонки();

		// Некоторые колонки не надо показывать
		РеквизитыНабораЗаписей.Колонки.Удалить("Регистратор");
	//	РеквизитыНабораЗаписей.Колонки.Удалить("Активность");
		Если РеквизитыНабораЗаписей.Колонки.Найти("МоментВремени") <> Неопределено Тогда
			РеквизитыНабораЗаписей.Колонки.Удалить("МоментВремени");
		КонецЕсли;
	
		// Создаем колонки таблицы
		Для каждого КолонкаРеквизита Из РеквизитыНабораЗаписей.Колонки Цикл
			ИмяКолонки = СтрокаРегистра.Имя + КолонкаРеквизита.Имя;
			ТекКолонка = Элементы.Найти(ИмяКолонки);
			Если ТекКолонка = Неопределено Тогда
				ТекКолонка = Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"), ТекТаблица);
			КонецЕсли;
			ТекКолонка.ПутьКДанным = СтрокаРегистра.Имя + "." + КолонкаРеквизита.Имя;
			
			Если  Найти(ИмяКолонки,"Активность") <> 0 Тогда
				ТекКолонка.Вид = ВидПоляФормы.ПолеФлажка;
			Иначе
				ТекКолонка.Вид = ВидПоляФормы.ПолеВвода;
			КонецЕсли;
			
		КонецЦикла;

	КонецЦикла;

	Элементы.ГруппаТиповой.Видимость = ПоказатьТиповой;
	Элементы.ГруппаНалоговый.Видимость = ПоказатьНалоговый;

КонецПроцедуры

&НаСервере
Процедура ПрочитатьЗаписиРегистров()

	Для Каждого СтрокаРегистра Из Объект.Регистры Цикл

		Если СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
			НаборЗаписей = РегистрыНакопления[СтрокаРегистра.Имя].СоздатьНаборЗаписей();
		ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
			НаборЗаписей = РегистрыСведений[СтрокаРегистра.Имя].СоздатьНаборЗаписей();
		ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
			НаборЗаписей = РегистрыБухгалтерии[СтрокаРегистра.Имя].СоздатьНаборЗаписей();
		КонецЕсли;

		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);

		Если СтрокаРегистра.ЕстьДвижения Тогда
			НаборЗаписей.Прочитать();
		КонецЕсли;

		ЗначениеВРеквизитФормы(НаборЗаписей, СтрокаРегистра.Имя);
		
	КонецЦикла;
	
	УстановитьДоступностьСубконто();

КонецПроцедуры

&НаСервере
Процедура УстановитьВозможностьРедактированияЗаписей()

	Для каждого ЭлементФормы Из Элементы.ГруппаДвиженияРегистров.ПодчиненныеЭлементы Цикл
		ЭлементФормы.ТолькоПросмотр = НЕ Объект.РучнаяКорректировка;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПовторноеОткрытиеСервер()

	МетаданныеДокумента = ДокументСсылка.Метаданные();

	ЗаполнитьСтруктуруШапкиДокумента(МетаданныеДокумента);

	Если СтруктураШапки.Свойство("РучнаяКорректировка") Тогда
		Объект.РучнаяКорректировка = СтруктураШапки.РучнаяКорректировка;
	Иначе
		Элементы.РучнаяКорректировка.Видимость    = Ложь;
		Элементы.КнопкаЗаписатьИЗакрыть.Видимость = Ложь;
	КонецЕсли;

	Если Не ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ЗаполнитьТаблицуРегистров(МетаданныеДокумента);
	СоздатьРеквизитыФормы();
	ПрочитатьЗаписиРегистров();
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;

	
	СоздатьЭлементыФормы();

	УстановитьВозможностьРедактированияЗаписей();

КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействияПриИзмененииРучнойКорректировки()

	УстановитьВозможностьРедактированияЗаписей();

	Если СтруктураШапки.РучнаяКорректировка = Объект.РучнаяКорректировка Тогда
		ПрочитатьЗаписиРегистров();
		ЭтаФорма.Модифицированность = Ложь;
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура ЗаписатьДвижения(Отказ)
	
	Если Объект.РучнаяКорректировка Тогда

		Попытка
			НачатьТранзакцию();
				Если НЕ СтруктураШапки.РучнаяКорректировка Тогда
					ДокОбъект = ДокументСсылка.ПолучитьОбъект();
					ДокОбъект.РучнаяКорректировка = Истина;
					ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;

				СтрокиСДвижениями = Объект.Регистры.НайтиСтроки(Новый Структура("ЕстьДвижения", Истина));
				
				Для каждого СтрокаРегистра Из Объект.Регистры Цикл
					ЗаписыватьНабор = СтрокаРегистра.ЕстьДвижения ИЛИ (ЭтаФорма[СтрокаРегистра.Имя].Количество() > 0);
					Если ЗаписыватьНабор Тогда
						НаборЗаписей = РеквизитФормыВЗначение(СтрокаРегистра.Имя);
						НаборЗаписей.УстановитьАктивность(НЕ СтруктураШапки.ПометкаУдаления);
						Если НЕ (СтрокаРегистра.ТипРегистра = "РегистрСведений" 
							И Метаданные.РегистрыСведений[СтрокаРегистра.Имя].ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический) Тогда
							Для каждого Запись Из НаборЗаписей Цикл
								Если Запись.Период = '00010101' Тогда
									Запись.Период = СтруктураШапки.Дата;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						НаборЗаписей.Записать(Истина);
					КонецЕсли;
				КонецЦикла;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстОшибки = НСтр("ru='Не удалось записать движения документа %1: %2'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка(ДокументСсылка), ОписаниеОшибки());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументСсылка);
			ИмяСобытия = НСтр("ru = 'Ошибка записи движений документа'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,, ДокументСсылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
		
	Иначе
		
		Попытка
			ДокОбъект = ДокументСсылка.ПолучитьОбъект();
			Если СтруктураШапки.РучнаяКорректировка Тогда
				ДокОбъект.РучнаяКорректировка = Ложь;
			КонецЕсли;
			
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстОшибки = НСтр("ru='Не удалось перепровести документ %1: %2'") + Символы.ПС + НСтр("ru='Проведение документа отменено.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка(ДокументСсылка),  ОписаниеОшибки());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументСсылка);
			
			ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ИмяСобытия = НСтр("ru = 'Ошибка перепроведения документа'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,, ДокументСсылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
		
	УстановитьДоступностьСубконто();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРегистрБухгалтерииНаСервере(ИмяРегистра = "Типовой")
	
	МассивРегистров = Объект.Регистры.НайтиСтроки(Новый Структура("Имя", ИмяРегистра));
	Если МассивРегистров.Количество() = 1 Тогда
		СтрокаРегистра = МассивРегистров[0];
	Иначе
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапки.Свойство("РучнаяКорректировка") ИЛИ НЕ СтруктураШапки.РучнаяКорректировка Тогда
		НаборЗаписей = РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);

		Если СтрокаРегистра.ЕстьДвижения Тогда
			НаборЗаписей.Прочитать();
		КонецЕсли;

		ЗначениеВРеквизитФормы(НаборЗаписей, ИмяРегистра);
		ЭтаФорма.Модифицированность = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьСубконто();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействияПриИзмененииСоставаРегистров()

	СоздатьЭлементыФормы();

	УстановитьВозможностьРедактированияЗаписей();

КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммыПоСтрокеНаСервере(Проводка, Знач Дата, Знач ПересчетСуммыПоКурсуДт = Неопределено)
	
	Если ПересчетСуммыПоКурсуДт = Истина Тогда
		Проводка.Сумма = ПересчетСуммыПоКурсу(Проводка.ВалютнаяСуммаДт, Проводка.ВалютаДт, Дата);
	ИначеЕсли ПересчетСуммыПоКурсуДт = Ложь Тогда
		Проводка.Сумма = ПересчетСуммыПоКурсу(Проводка.ВалютнаяСуммаКт, Проводка.ВалютаКт, Дата);
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПересчетСуммыПоКурсу(Знач ВалютнаяСумма, Знач Валюта, Знач Дата)

	СтруктураКурса = ОбщегоНазначенияБК.ПолучитьКурсВалюты(Валюта, Дата);

	Сумма = ?(СтруктураКурса.Кратность = 0, 0, Окр(ВалютнаяСумма * СтруктураКурса.Курс / СтруктураКурса.Кратность, 2));
	Возврат Сумма;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПараметрыКлючаЗаписи(ПараметрыЗаписи)
	
	ПараметрыКлючаЗаписи = Новый Структура("КлючЗаписи, ТипРегистра");
	
	ИмяРегистра = ПараметрыЗаписи.ИмяРегистра;
	
	Если НЕ Метаданные.РегистрыБухгалтерии.Найти(ИмяРегистра) = Неопределено Тогда
		
		ПараметрыКлючаЗаписи.ТипРегистра = "РегистрБухгалтерии";

		Если ПараметрыЗаписи.Свойство("Регистратор") И ПараметрыЗаписи.Свойство("НомерСтроки") Тогда
			ЗначениеКлючаЗаписи = Новый Структура;
			ЗначениеКлючаЗаписи.Вставить("Регистратор", ПараметрыЗаписи.Регистратор);
			ЗначениеКлючаЗаписи.Вставить("НомерСтроки", ПараметрыЗаписи.НомерСтроки);
			ПараметрыКлючаЗаписи.КлючЗаписи = РегистрыБухгалтерии[ИмяРегистра].СоздатьКлючЗаписи(ЗначениеКлючаЗаписи);	
		КонецЕсли;
		
	ИначеЕсли НЕ Метаданные.РегистрыНакопления.Найти(ИмяРегистра) = Неопределено Тогда
		
		ПараметрыКлючаЗаписи.ТипРегистра = "РегистрНакопления";
		
		Если ПараметрыЗаписи.Свойство("Регистратор") И ПараметрыЗаписи.Свойство("НомерСтроки") Тогда
			ЗначениеКлючаЗаписи = Новый Структура;
			ЗначениеКлючаЗаписи.Вставить("Регистратор", ПараметрыЗаписи.Регистратор);
			ЗначениеКлючаЗаписи.Вставить("НомерСтроки", ПараметрыЗаписи.НомерСтроки);
			ПараметрыКлючаЗаписи.КлючЗаписи = РегистрыНакопления[ИмяРегистра].СоздатьКлючЗаписи(ЗначениеКлючаЗаписи);	
		КонецЕсли;
		
	ИначеЕсли НЕ Метаданные.РегистрыСведений.Найти(ИмяРегистра) = Неопределено Тогда
		
		ПараметрыКлючаЗаписи.ТипРегистра = "РегистрСведений";
		
		ЗначениеКлючаЗаписи = Новый Структура;
		Если НЕ Метаданные.РегистрыСведений[ИмяРегистра].ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический 
			И ПараметрыЗаписи.Свойство("Период") Тогда
			ЗначениеКлючаЗаписи.Вставить("Период", 		ПараметрыЗаписи.Период); 	
		КонецЕсли;
		Если Метаданные.РегистрыСведений[ИмяРегистра].РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору
			И ПараметрыЗаписи.Свойство("Регистратор") Тогда
			ЗначениеКлючаЗаписи.Вставить("Регистратор", ПараметрыЗаписи.Регистратор); 	
		КонецЕсли;
		Для Каждого ИзмерениеРегистра ИЗ Метаданные.РегистрыСведений[ИмяРегистра].Измерения Цикл
			Если ПараметрыЗаписи.Свойство(ИзмерениеРегистра.Имя) Тогда
				ЗначениеКлючаЗаписи.Вставить(ИзмерениеРегистра.Имя, ПараметрыЗаписи[ИзмерениеРегистра.Имя]); 		
			КонецЕсли;
		КонецЦикла;
		ПараметрыКлючаЗаписи.КлючЗаписи = РегистрыСведений[ИмяРегистра].СоздатьКлючЗаписи(ЗначениеКлючаЗаписи);
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПараметрыКлючаЗаписи;

КонецФункции

&НаКлиенте
Процедура РегистрНайтиВСписке(Команда)
	
	ИмяРегистра = СтрЗаменить(Команда.Имя, "НайтиВСписке", "");
	
	// Проверим, что таблица регистра добавлена на форму
	Если Элементы.Найти(ИмяРегистра) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы[ИмяРегистра].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	// установим отбор по организации документа (в противном случае, в некоторых формах установится отбор по основной организации)
	Если СтруктураШапки.Свойство("Организация") Тогда
		ПараметрыОтбора = Новый Структура("Организация", СтруктураШапки.Организация);
		ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора); 
	КонецЕсли;
	
	// Подготовим ключ записи для позиционирования в форме списка
	ПараметрыТекущейЗаписи = Новый Структура;
	ПараметрыТекущейЗаписи.Вставить("ИмяРегистра", 			ИмяРегистра);
	ПараметрыТекущейЗаписи.Вставить("Регистратор",    		ДокументСсылка);
	Если СтруктураШапки.Свойство("Организация") Тогда
		ПараметрыТекущейЗаписи.Вставить("Организация",		СтруктураШапки.Организация);
	КонецЕсли;
	Для Каждого ЭлементФормыТабПоля ИЗ Элементы[ИмяРегистра].ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ЭлементФормыТабПоля) = Тип("ПолеФормы") Тогда
			ИмяСвойства = СтрЗаменить(ЭлементФормыТабПоля.Имя, ИмяРегистра, "");
			Если ИмяСвойства = "Регистратор" ИЛИ ИмяСвойства = "Организация" Тогда
				Продолжить;
			КонецЕсли;
			ПараметрыТекущейЗаписи.Вставить(ИмяСвойства, 	ТекущиеДанные[ИмяСвойства]);			
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыКлючаЗаписи = ПолучитьПараметрыКлючаЗаписи(ПараметрыТекущейЗаписи);
	Если ПараметрыКлючаЗаписи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипРегистра = ПараметрыКлючаЗаписи.ТипРегистра;
	ПараметрыФормы.Вставить("ТекущаяСтрока", 	ПараметрыКлючаЗаписи.КлючЗаписи);

	ОткрытьФорму(ТипРегистра + "." + ИмяРегистра + ".ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция ПреобразоватьДанныеЭлементаФормыВСтруктуру(ТекущиеДанные)

	СтруктураПроводки = Новый Структура("НомерСтроки,СчетДт,ПодразделениеДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,
		|КоличествоДт,ВалютаДт,ВалютнаяСуммаДт,
		|СчетКт,ПодразделениеКт,СубконтоКт1,СубконтоКт2,СубконтоКт3,
		|КоличествоКт,ВалютаКт,ВалютнаяСуммаКт,
		|Сумма,Содержание");
	ЗаполнитьЗначенияСвойств(СтруктураПроводки, ТекущиеДанные);

	Возврат СтруктураПроводки;

КонецФункции

&НаКлиенте
Процедура РасчетСуммы(ПересчетСуммыПоКурсуДт = Неопределено)
	
	ТекущиеДанные     = Элементы.Типовой.ТекущиеДанные;
	СтруктураПроводки = ПреобразоватьДанныеЭлементаФормыВСтруктуру(ТекущиеДанные);
	
	ПересчитатьСуммыПоСтрокеНаСервере(СтруктураПроводки, ТекущиеДанные.Период, ПересчетСуммыПоКурсуДт);
	
	ЗаполнитьЗначенияСвойств(Элементы.Типовой.ТекущиеДанные, СтруктураПроводки);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	РедактированиеДвиженийДокумента = РольДоступна("РедактированиеДвиженийДокумента") ИЛИ  РольДоступна("ПолныеПрава");
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьДвижений(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "Обработка ""корректировка движений"" (печать движений)");
	
	ОткрытьФорму("Отчет.ДвиженияДокумента.Форма", 
		Новый Структура("Документ, СформироватьПриОткрытии", ДокументСсылка, Истина), ЭтотОбъект, ДокументСсылка);
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ДокументСсылка)
	
	 //УниверсальныеМеханизмыСервер.НапечататьДвиженияДокумента(ДокументСсылка);
	
КонецФункции

&НаКлиенте
Процедура ВвестиНовуюКорректировку(Команда)
	
	ПараметрыОперации = Новый Структура("Основание", ДокументСсылка);
	ОткрытьФорму("Документ.ОперацияБух.ФормаОбъекта", ПараметрыОперации);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьСписокКорректировок(Документ)
	
	МассивКорректировок = Новый Массив;
	
	Если ЗначениеЗаполнено(Документ) Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ОперацияБух.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ОперацияБух КАК ОперацияБух
		|ГДЕ
		|	ОперацияБух.СторнируемыйДокумент = &Документ
		|	И НЕ ОперацияБух.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Сторнирование.Ссылка
		|ИЗ
		|	Документ.Сторнирование КАК Сторнирование
		|ГДЕ
		|	Сторнирование.ДокументОснование = &Документ
		|	И НЕ Сторнирование.ПометкаУдаления";
		
		Если Не ПравоДоступа("Чтение", Метаданные.Документы.ОперацияБух) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОперацияБух.Ссылка", "ПРЕДСТАВЛЕНИЕ(ОперацияБух.Ссылка)");
		КонецЕсли;
		
		Если Не ПравоДоступа("Чтение", Метаданные.Документы.Сторнирование) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Сторнирование.Ссылка", "ПРЕДСТАВЛЕНИЕ(Сторнирование.Ссылка)");
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Документ", Документ);
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		
		МассивКорректировок = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	КонецЕсли;
	
	Возврат МассивКорректировок
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеОВведенныхКорректировках()
	
	СписокКорректировок.ЗагрузитьЗначения(ВернутьСписокКорректировок(ДокументСсылка));
	
	Элементы.ГруппаКорректировкиДокументамиРеглУчета.Видимость = СписокКорректировок.Количество();
	
	Если СписокКорректировок.Количество() = 1 Тогда
		ТекстКорректировки = СписокКорректировок.Получить(0).Значение;
	Иначе
		ТекстКорректировки = НСтр("ru = 'Открыть список введенных корректировок (%Количество%)'");
		ТекстКорректировки = СтрЗаменить(ТекстКорректировки, "%Количество%", СписокКорректировок.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, ДтКт = "", ТаблицаРегистраБух, ОчищатьСвязанныеСубконто = Истина)
	
	ИдСтроки = Форма.Элементы[ТаблицаРегистраБух].ТекущаяСтрока;
	Если ИдСтроки <> Неопределено Тогда
		СтрокаТаблицы = Форма[ТаблицаРегистраБух].НайтиПоИдентификатору(ИдСтроки);
		Если ДтКт <> "Кт" Тогда
			
			ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаТаблицы, "СубконтоДт%Индекс%");
			ПараметрыДокумента.Вставить("СчетУчета", СтрокаТаблицы["СчетДт"]);
			
			Если ОчищатьСвязанныеСубконто Тогда
				ЗначенияСубконтоСтрокиТаблицы = СтрокаТаблицы;
			Иначе
				ЗначенияСубконтоСтрокиТаблицы = Новый Структура("СубконтоДт1,СубконтоДт2,СубконтоДт3");
				ЗаполнитьЗначенияСвойств(ЗначенияСубконтоСтрокиТаблицы, СтрокаТаблицы);
			КонецЕсли;
			
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
				Форма, ЗначенияСубконтоСтрокиТаблицы, "СубконтоДт%Индекс%", ТаблицаРегистраБух + "СубконтоДт%Индекс%", ПараметрыДокумента);
				
		КонецЕсли;
		Если ДтКт <> "Дт" Тогда
			
			ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаТаблицы, "СубконтоКт%Индекс%");
			ПараметрыДокумента.Вставить("СчетУчета", СтрокаТаблицы["СчетКт"]);
			
			Если ОчищатьСвязанныеСубконто Тогда
				ЗначенияСубконтоСтрокиТаблицы = СтрокаТаблицы;
			Иначе
				ЗначенияСубконтоСтрокиТаблицы = Новый Структура("СубконтоКт1,СубконтоКт2,СубконтоКт3");
				ЗаполнитьЗначенияСвойств(ЗначенияСубконтоСтрокиТаблицы, СтрокаТаблицы);
			КонецЕсли;
			
			ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
				Форма, ЗначенияСубконтоСтрокиТаблицы, "СубконтоКт%Индекс%", ТаблицаРегистраБух + "СубконтоКт%Индекс%", ПараметрыДокумента);
				
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

