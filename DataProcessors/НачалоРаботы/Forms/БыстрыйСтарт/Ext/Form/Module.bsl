&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ПараметрыОбработчикаОжиданияНачальноеЗаполнение; 

&НаКлиенте
Перем ФормаВыбораВидаОрганизации;

&НаКлиенте
Перем ФормаВыбораСистемыНалогообложения;

&НаКлиенте
Перем УИДЗамера;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//Если НЕ ПолучитьФункциональнуюОпцию("НачалоРаботы") Тогда
	//	Возврат;
	//КонецЕсли;
	
	ОрганизацияСуществует = ОрганизацияСуществует();
	
	ИнициализироватьСвойстваОрганизации(ЭтотОбъект);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		ПодключенаИнтернетПоддержка = Истина;
		//ПодключенСервис1СКонтрагент = Истина;
		
		Если ОрганизацияСуществует Тогда
			ПерейтиНаСтраницу(ЭтотОбъект, "СтраницаВидБизнеса");
		Иначе
			ПерейтиНаСтраницу(ЭтотОбъект, "СтраницаИИН");
		КонецЕсли;
	Иначе
		ПерейтиНаСтраницу(ЭтотОбъект, "СтраницаПодключениеИнтернетПоддержки");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ЛогинПарольИПП = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	УстановитьПривилегированныйРежим(Ложь);
	Если ЛогинПарольИПП <> Неопределено Тогда
		
		ЛогинИнтернетПоддержки  = ЛогинПарольИПП.Логин;
		ПарольИнтернетПоддержки = ЛогинПарольИПП.Пароль;
		
	КонецЕсли;
	
	СистемыНалогообложенияДопускающиеТрудНаемныхРаботников.ЗагрузитьЗначения(Обработки.НачалоРаботы.СистемыНалогообложенияДопускающиеТрудНаемныхРаботников());
	
	НачалоРаботыВСервисе = ОбщегоНазначения.РазделениеВключено();
	
	ПоказатьНачалоРаботыВСервисе = ОбщегоНазначения.РазделениеВключено()
		И РольДоступна("ПолныеПрава")
		И ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НачалоРаботыПредпринимательВСервисе", "Показывать", Истина);
	
	ЗаполнитьДоступныеВидыБизнеса();
	
	НачальноеЗаполнениеПоУмолчанию = Истина;
	ВыбранныеНастройкиЗаполнения.Очистить();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
		
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "БыстрыйСтартЗакрытиеПоОповещению");
		УстановитьИнтерфейс();
		ОбновитьИнтерфейс();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИИНИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьКомментарийНекорректныйИИН");
	
	Элемент.ОтметкаНезаполненного = Ложь;
	
	ТекстИИН = СокрЛП(Текст);
	
	ДлинаИИН = СтрДлина(ТекстИИН);
	
	Если ДлинаИИН <> 12 Тогда
		Реквизиты = Неопределено;
		ИИНКомментарий = "";
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = "";
	
	РезультатПроверки = РегламентированныеДанныеКлиентСервер.ИИНБИНСоответствуетТребованиям(ТекстИИН, ТекстСообщения);
	
	Если НЕ РезультатПроверки Тогда
		
		Если ДлинаИИН = 12 Тогда
			УстановитьКомментарийНекорректныйИИН();
		Иначе
			ПодключитьОбработчикОжидания("Подключаемый_УстановитьКомментарийНекорректныйИИН", 2, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОрганизацииРасширеннаяПодсказкаНажатие(Элемент)
	
	Если ФормаВыбораВидаОрганизации <> Неопределено И ФормаВыбораВидаОрганизации.Открыта() Тогда
		ФормаВыбораВидаОрганизации.Закрыть();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимПовторногоВыбораВидаОрганизации", Истина);
	ПараметрыФормы.Вставить("ВидОрганизации",                       ВидОрганизации);

	ФормаВыбораВидаОрганизации = ПолучитьФорму("Справочник.Организации.Форма.ФормаВыбораСистемыНалогообложения", 
		ПараметрыФормы,
		ЭтотОбъект,
		"ФормаВыбораСистемыНалогообложения_ВыборВидаОрганизации_БыстрыйСтарт");
		
	ФормаВыбораВидаОрганизации.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаВыбораВидаОрганизации.ОписаниеОповещенияОЗакрытии = 
		Новый ОписаниеОповещения("ОбновитьВидОрганизации", ЭтотОбъект);
			
	ФормаВыбораВидаОрганизации.Открыть();
			
КонецПроцедуры

&НаКлиенте
Процедура ГруппаОсновнаяСистемаНалогообложенияРасширеннаяПодсказкаНажатие(Элемент)
	
	Если ФормаВыбораСистемыНалогообложения <> Неопределено И ФормаВыбораСистемыНалогообложения.Открыта() Тогда
		ФормаВыбораСистемыНалогообложения.Закрыть();
	КонецЕсли;
	
	Если СистемаНалогообложения = "Патент" Тогда
		ВидСистемыНалогообложения = ПредопределенноеЗначение("Перечисление.РежимНалогообложения.Патент");
	ИначеЕсли СистемаНалогообложения = "УпрощеннаяДекларация" Тогда
		ВидСистемыНалогообложения = ПредопределенноеЗначение("Перечисление.РежимНалогообложения.УпрощеннаяДекларация");
	ИначеЕсли СистемаНалогообложения = "ФиксированныйВычет" Тогда
		ВидСистемыНалогообложения = ПредопределенноеЗначение("Перечисление.РежимНалогообложения.ФиксированныйВычет");
	ИначеЕсли СистемаНалогообложения = "РозничныйНалог" Тогда
		ВидСистемыНалогообложения = ПредопределенноеЗначение("Перечисление.РежимНалогообложения.РозничныйНалог");
	Иначе
		ВидСистемыНалогообложения = ПредопределенноеЗначение("Перечисление.РежимНалогообложения.Общеустановленный");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимПовторногоВыбораСистемыНалогообложения", Истина);
	ПараметрыФормы.Вставить("ВидОрганизации",                              ВидОрганизации);
	ПараметрыФормы.Вставить("СистемаНалогообложения",                      ВидСистемыНалогообложения);
	
	ФормаВыбораСистемыНалогообложения = ПолучитьФорму("Справочник.Организации.Форма.ФормаВыбораСистемыНалогообложения", 
		ПараметрыФормы,
		ЭтотОбъект,
		"ФормаВыбораСистемыНалогообложения_ВыборСистемыНалогообложения_БыстрыйСтарт");
		
	ФормаВыбораСистемыНалогообложения.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаВыбораСистемыНалогообложения.ОписаниеОповещенияОЗакрытии = 
		Новый ОписаниеОповещения("ОбновитьСистемуНалогообложения", ЭтотОбъект);
	
	ФормаВыбораСистемыНалогообложения.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СистемаНалогообложенияПриИзменении(Элемент)
	
	ИнициализироватьСистемыНалогообложения();
	
	УправлениеФормой(ЭтотОбъект);
	
	ЗаполнитьДоступныеВидыБизнеса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиЗаполненияНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВыбранныеНастройкиЗаполнения", ВыбранныеНастройкиЗаполнения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеНастройкиЗаполнения", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.НачалоРаботы.Форма.НастройкиЗаполнения", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура НачальноеЗаполнениеПоУмолчаниюПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПродолжитьСИИН(Команда)
	
	Элементы.ИИН.ОбновитьТекстРедактирования();
	
	Если НЕ ПроверитьЗаполнениеИИН() Тогда
		Возврат;
	КонецЕсли;
	
	ВидОрганизации = ВидОрганизацииПоБИН(ИИН);
	
	ПерейтиНаСтраницу(ЭтотОбъект, "СтраницаВидОрганизации");
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьБезИИН(Команда)
	
	ПерейтиНаСтраницуВидОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьВидОрганизации(Команда)
	
	ЗаполнитьСписокВыбораСистемНалогообложения();
	
	ПерейтиНаСтраницу(ЭтотОбъект, "СтраницаСистемаНалогообложения");
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСистемаНалогообложения(Команда)
	
	ПропускатьВыборВидаБизнеса =
		ИспользуетсяПолнаяФункциональность() ИЛИ (ОрганизацияСуществует И НЕ ИспользуетсяОсновнаяФункциональность());
	
	Если ПропускатьВыборВидаБизнеса Тогда
		ПерейтиНаСтраницу(ЭтотОбъект, "СтраницаНачальноеЗаполнение");
	Иначе
		ПерейтиНаСтраницу(ЭтотОбъект, "СтраницаВидБизнеса");
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	ИнициализироватьСвойстваОрганизации(ЭтотОбъект);
	
	Если Не ПодключенаИнтернетПоддержка Тогда
		
		ПерейтиНаСтраницу(ЭтотОбъект, "СтраницаПодключениеИнтернетПоддержки");
		
	ИначеЕсли ПодключенаИнтернетПоддержка И ЗначениеЗаполнено(ИИН) Тогда
		
		ПерейтиНаСтраницуВидОрганизации();
		
	Иначе
		
		ПерейтиНаСтраницу(ЭтотОбъект, "СтраницаИИН");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаИИН Тогда
		ПерейтиНаСтраницу(ЭтотОбъект, "СтраницаПодключениеИнтернетПоддержки");
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВидОрганизации Тогда
		ПерейтиНаСтраницу(ЭтотОбъект, "СтраницаИИН");
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСистемаНалогообложения Тогда
		ПерейтиНаСтраницу(ЭтотОбъект, "СтраницаВидОрганизации");
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВидБизнеса Тогда
		ПерейтиНаСтраницу(ЭтотОбъект, "СтраницаСистемаНалогообложения");
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаНачальноеЗаполнение Тогда
		ПропускатьВыборВидаБизнеса =
			ИспользуетсяПолнаяФункциональность() ИЛИ (ОрганизацияСуществует И НЕ ИспользуетсяОсновнаяФункциональность());
		Если ПропускатьВыборВидаБизнеса Тогда
			ПерейтиНаСтраницу(ЭтотОбъект, "СтраницаСистемаНалогообложения");
		Иначе
			ПерейтиНаСтраницу(ЭтотОбъект, "СтраницаВидБизнеса");
			УправлениеФормой(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключиться(Команда)
	
	Если Не ЗначениеЗаполнено(ЛогинИнтернетПоддержки) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Введите логин'"),, "ЛогинИнтернетПоддержки");
		
		Возврат;
		
	ИначеЕсли Не ЗначениеЗаполнено(ПарольИнтернетПоддержки) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Введите пароль'"),, "ПарольИнтернетПоддержки");
		
		Возврат;
		
	КонецЕсли;
	
	ПодключитьИнтернетПоддержку();
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПодключитьсяПозжеНажатие(Элемент)
	
	ПерейтиНаСтраницу(ЭтотОбъект, "СтраницаИИН");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаВосстановлениеПароляНажатие(Элемент)
	
	ИнтернетПоддержкаПользователейКлиент.ОткрытьВебСтраницу(
		ИнтернетПоддержкаПользователейКлиентСервер.URLСтраницыСервисаLogin("/remind_request"),
		НСтр("ru = 'Восстановление пароля'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаРегистрацияНажатие(Элемент)
	
	ИнтернетПоддержкаПользователейКлиент.ОткрытьВебСтраницу(
		ИнтернетПоддержкаПользователейКлиентСервер.URLСтраницыСервисаLogin("/registration"),
		НСтр("ru = 'Регистрация'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВидБизнеса(Команда)
	
	ВидБизнеса = ВыбранныйВидБизнеса(ТекущийЭлемент.Имя, СистемаНалогообложения);
	
	ПерейтиНаСтраницу(ЭтотОбъект, "СтраницаНачальноеЗаполнение");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИспользуетсяПолнаяФункциональность()
	
	Возврат Обработки.НачалоРаботы.ИспользуетсяПолнаяФункциональность();
	
КонецФункции

&НаСервереБезКонтекста
Функция ИспользуетсяОсновнаяФункциональность()
	
	Возврат Обработки.НачалоРаботы.ИспользуетсяОсновнаяФункциональность();
	
КонецФункции

&НаКлиенте
Процедура ПропуститьВыборВидаБизнеса(Команда)
	
	ВидБизнеса = ПредопределенноеЗначение("Перечисление.ВидыБизнеса.Другое");
	
	ПерейтиНаСтраницу(ЭтотОбъект, "СтраницаНачальноеЗаполнение");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНачальноеЗаполнение(Команда)
	
	ОрганизацияИНачальноеЗаполнение();

КонецПроцедуры

&НаКлиенте
Процедура ПропуститьНачальноеЗаполнение(Команда)
	
	ОрганизацияИНачальноеЗаполнение(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	ЭтоИндивидуальныйПредприниматель = (Форма.ВидОрганизации <> "ЮридическоеЛицо");
	
	Элементы.ИспользуетсяТрудНаемныхРаботников.Видимость = 
		Форма.СистемыНалогообложенияДопускающиеТрудНаемныхРаботников.НайтиПоЗначению(Форма.СистемаНалогообложения) <> Неопределено;
	
	Элементы.ОписаниеСистемаНалогообложения.Видимость = ПустаяСтрока(Форма.ИИН);
	Элементы.ОписаниеВидОрганизации.Видимость = ПустаяСтрока(Форма.ИИН);
	
	Элементы.ВидОрганизации.ОтображениеПодсказки = ?(ПустаяСтрока(Форма.ИИН),
		ОтображениеПодсказки.ОтображатьСнизу,
		ОтображениеПодсказки.Нет);
	Элементы.ГруппаОсновнаяСистемаНалогообложения.ОтображениеПодсказки = ?(ПустаяСтрока(Форма.ИИН),
		ОтображениеПодсказки.ОтображатьСнизу,
		ОтображениеПодсказки.Нет);
		
	Элементы.ОткрытьНастройкиЗаполнения.Доступность = НЕ Форма.НачальноеЗаполнениеПоУмолчанию;		
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПерейтиНаСтраницу(Форма, АктивнаяСтраница)
	
	Форма.АктивнаяСтраница = АктивнаяСтраница;
	
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы[Форма.АктивнаяСтраница];
	
	Если Форма.АктивнаяСтраница = "СтраницаПодключениеИнтернетПоддержки" Тогда
		
		Элементы.Подключиться.КнопкаПоУмолчанию = Истина;
		Элементы.ГруппаОжиданиеПодключения.Видимость = Ложь;
		Форма.ТекущийЭлемент = Элементы.ЛогинИнтернетПоддержки;
		
	ИначеЕсли Форма.АктивнаяСтраница = "СтраницаИИН" Тогда
		
		Элементы.ПродолжитьСИИН.КнопкаПоУмолчанию = Истина;
		Форма.ТекущийЭлемент = Элементы.ИИН;
		
	ИначеЕсли Форма.АктивнаяСтраница = "СтраницаВидОрганизации" Тогда
		
		Элементы.ПродолжитьВидОрганизации.КнопкаПоУмолчанию = Истина;
		Форма.ТекущийЭлемент = Элементы.ВидОрганизации;
		
	ИначеЕсли Форма.АктивнаяСтраница = "СтраницаСистемаНалогообложения" Тогда
		
		Элементы.ПродолжитьСистемаНалогообложения.КнопкаПоУмолчанию = Истина;
		Форма.ТекущийЭлемент = Элементы.СистемаНалогообложения;
		
	КонецЕсли;
	
	Элементы.ГруппаОжидание.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораСистемНалогообложения()
	
	ЭтоИндивидуальныйПредприниматель = (ВидОрганизации <> "ЮридическоеЛицо");
	
	Элементы.СистемаНалогообложения.СписокВыбора.Очистить();
	Если ЭтоИндивидуальныйПредприниматель Тогда
		Если ОбщегоНазначенияБК.ЭтоПростаяВерсияКонфигурации() Тогда
			Элементы.СистемаНалогообложения.СписокВыбора.Добавить("Патент", НСтр("ru='Патент'"));
		КонецЕсли;
	КонецЕсли;
	Элементы.СистемаНалогообложения.СписокВыбора.Добавить("УпрощеннаяДекларация", НСтр("ru='Упрощенная декларация'"));
	
	Если ОбщегоНазначенияБК.ЭтоПростаяВерсияКонфигурации() Тогда
		Элементы.СистемаНалогообложения.СписокВыбора.Добавить("ФиксированныйВычет",   НСтр("ru='Фиксированный вычет'"));
	КонецЕсли;
	
	Элементы.СистемаНалогообложения.СписокВыбора.Добавить("Общеустановленный",    НСтр("ru='Общеустановленный режим'"));
	
	Элементы.СистемаНалогообложения.СписокВыбора.Добавить("РозничныйНалог",    НСтр("ru='Розничный налог'"));
	
	Если Элементы.СистемаНалогообложения.СписокВыбора.НайтиПоЗначению(СистемаНалогообложения) = Неопределено
		И ЗначениеЗаполнено(Элементы.СистемаНалогообложения.СписокВыбора) Тогда
		СистемаНалогообложения = Элементы.СистемаНалогообложения.СписокВыбора[0].Значение;
	КонецЕсли;
	
	ЗаполнитьДоступныеВидыБизнеса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидОрганизации(ВыбранныйВидОрганизации, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ВыбранныйВидОрганизации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ВидОрганизации.СписокВыбора.НайтиПоЗначению(ВыбранныйВидОрганизации) <> Неопределено Тогда
		ВидОрганизации = ВыбранныйВидОрганизации;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСистемуНалогообложения(ПараметрыУчетнойПолитики, ДополнительныеПараметры = Неопределено) Экспорт
	
	ФормаВыбораСистемыНалогообложения = Неопределено;
	
	Если ПараметрыУчетнойПолитики = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыУчетнойПолитики.УчетнаяПолитикаНалоговыйУчет.РежимНалогообложения = ПредопределенноеЗначение("Перечисление.РежимНалогообложения.Патент") Тогда
		СистемаНалогообложения = "Патент"
	ИначеЕсли ПараметрыУчетнойПолитики.УчетнаяПолитикаНалоговыйУчет.РежимНалогообложения = ПредопределенноеЗначение("Перечисление.РежимНалогообложения.УпрощеннаяДекларация") Тогда
		СистемаНалогообложения = "УпрощеннаяДекларация"
	ИначеЕсли ПараметрыУчетнойПолитики.УчетнаяПолитикаНалоговыйУчет.РежимНалогообложения = ПредопределенноеЗначение("Перечисление.РежимНалогообложения.ФиксированныйВычет") Тогда
		СистемаНалогообложения = "ФиксированныйВычет"
	ИначеЕсли ПараметрыУчетнойПолитики.УчетнаяПолитикаНалоговыйУчет.РежимНалогообложения = ПредопределенноеЗначение("Перечисление.РежимНалогообложения.РозничныйНалог") Тогда
		СистемаНалогообложения = "РозничныйНалог"
	Иначе
		СистемаНалогообложения = "Общеустановленный"
	КонецЕсли;
	
	ИнициализироватьСистемыНалогообложения();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКомментарийНекорректныйИИН()
	
	ИИНКомментарий = Новый ФорматированнаяСтрока(НСтр("ru='БИН/ИИН некорректный. Опечатка?'"),, Новый Цвет(255,0,0));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьКомментарийНекорректныйИИН()
	
	УстановитьКомментарийНекорректныйИИН();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			//ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамера);
			ПроверитьВозможностьЗавершенияРаботыПомощника();
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторПроверяемогоЗадания)

	Если НЕ ЗначениеЗаполнено(ИдентификаторПроверяемогоЗадания) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторПроверяемогоЗадания);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ИзменитьТекстСообщенияОжидания()
	
	Элементы.ТекстОжидания.Заголовок = НСтр("ru='Еще чуть-чуть...'");
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеИИН()
	
	Отказ = Ложь;
	
	ОчиститьСообщения();
	
	Если ПустаяСтрока(ИИН) Тогда
		
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru='БИН/ИИН'"));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,, "ИИН", Отказ);
		
	Иначе
			
		Если СтрДлина(ИИН) <> 12 Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Корректность", НСтр("ru='БИН/ИИН'"),,, 
				НСтр("ru='БИН/ИИН должен состоять из 12 цифр.'"));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,, "ИИН", Отказ);
			
		Иначе
			
			ТекстСообщения = "";
			
			РезультатПроверки = РегламентированныеДанныеКлиентСервер.ИИНБИНСоответствуетТребованиям(ИИН, ТекстСообщения);
			
			Если НЕ РезультатПроверки Тогда
			
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Корректность", НСтр("ru='БИН/ИИН'"),,, 
					ТекстСообщения);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,, "ИИН", Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ИИН.ОтметкаНезаполненного = Отказ;
	
	Возврат НЕ Отказ;
	
КонецФункции

&НаСервере
Функция СоздатьОрганизациюНаСервере()
	
	Если ОрганизацияСуществует И НЕ ЗначениеЗаполнено(НаименованиеОрганизации) Тогда
		Возврат Новый Структура("ЗаданиеВыполнено, АдресХранилища", Истина, "");
	КонецЕсли;

	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;

	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ВидОрганизации",                    ВидОрганизации);
	ПараметрыЗадания.Вставить("СистемаНалогообложения",            СистемаНалогообложения);
	ПараметрыЗадания.Вставить("Реквизиты",                         Реквизиты);
	ПараметрыЗадания.Вставить("ИИН",                               ИИН);
	ПараметрыЗадания.Вставить("НаименованиеОрганизации",           НаименованиеОрганизации);
	ПараметрыЗадания.Вставить("ИспользуетсяТрудНаемныхРаботников", ИспользуетсяТрудНаемныхРаботников);
	ПараметрыЗадания.Вставить("ВидБизнеса",                        ВидБизнеса);
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.НачалоРаботы.СоздатьОрганизацию",
		ПараметрыЗадания,
		НСтр("ru='Создание организации'"));
		
	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	АдресВременногоХранилища = РезультатВыполнения.АдресХранилища;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьЭлементовОжиданияПодключения(Ожидание)
	
	Элементы.ГруппаПодключиться.Доступность         = НЕ Ожидание;
	Элементы.Подключиться.Видимость                 = НЕ Ожидание;
	Элементы.ГиперссылкаПодключитьсяПозже.Видимость = НЕ Ожидание;
	Элементы.ГруппаОжиданиеПодключения.Видимость    = Ожидание;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовОжиданияСозданияОрганизации(Ожидание)
	
	Элементы.СтраницаСистемаНалогообложения.Доступность = НЕ Ожидание;
	Элементы.ОтменаСистемаНалогообложения.Видимость = НЕ Ожидание;
	Элементы.ГруппаВидыБизнеса.Доступность = НЕ Ожидание;
	Элементы.ПропуститьВыборВидаБизнеса.Видимость = НЕ Ожидание;
	Элементы.ГруппаОжидание.Видимость = Ожидание;
	
КонецПроцедуры

&НаКлиенте
Функция ПодключитьИнтернетПоддержку()
	
	УстановитьДоступностьЭлементовОжиданияПодключения(Истина);
	
	Элементы.ГруппаОшибкаПодключения.Видимость = Ложь;
	
	ДлительнаяОперация = ПодключитсяКИнтернетПоддержкеНаСервере();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецФункции

&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда 
		УстановитьДоступностьЭлементовОжиданияПодключения(Ложь);
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		УстановитьДоступностьЭлементовОжиданияПодключения(Ложь);
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	РезультатПодключения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	Если РезультатПодключения = "ПодключениеУспешно" Тогда 
		
		ПодключенаИнтернетПоддержка = Истина;
		Элементы.НазадИИН.Видимость = Ложь;
		// Переходим к вводу ИИН
		ПерейтиНаСтраницу(ЭтотОбъект, "СтраницаИИН");
		
	Иначе
		// Произошла ошибка
		УстановитьДоступностьЭлементовОжиданияПодключения(Ложь);
		
		Если РезультатПодключения = "ОшибкаАвторизации" Тогда
			
			ТекстОшибкиПодключения = Новый ФорматированнаяСтрока(
				НСтр("ru = 'Неверный логин или пароль. Укажите правильные данные для авторизации.'"));
			
		Иначе
			
			ТекстОшибкиПодключения = СтроковыеФункцииКлиент.ФорматированнаяСтрока(НСтр("ru = 'При подключении к сервису возникла ошибка. Возможно, указаны неверные настройки <a href=""e1cib/app/ОбщаяФорма.ПараметрыПроксиСервера"">прокси-сервера</a>. Подробности в <a href=""e1cib/app/Обработка.ЖурналРегистрации"">журнале регистрации</a>.'"));
			
		КонецЕсли;
		
		Элементы.ГруппаОшибкаПодключения.Видимость = Истина;
		Элементы.ТекстОшибкиПодключения.Заголовок = ТекстОшибкиПодключения;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодключитсяКИнтернетПоддержкеНаСервере()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение регистрационных данных из веб-сервиса'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	ПараметрыЗадания = Новый Структура("ЛогинИПП, ПарольИПП", ЛогинИнтернетПоддержки, ПарольИнтернетПоддержки);
	
	Результат = ДлительныеОперации.ВыполнитьВФоне("Обработки.НачалоРаботы.ПодключитьИнтернетПоддержку",
		ПараметрыЗадания, ПараметрыВыполнения);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СнятьПризнакНачалаРаботы()
	
	Константы.НачалоРаботы.Установить(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКонстанты()
	
	СнятьПризнакНачалаРаботы();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтерфейс()
	
	УстановленныйВариантИнтерфейса = УстановитьИнтерфейсТаксиПоСистемеНалогообложения();
	
	Если УстановленныйВариантИнтерфейса = "ИнтерфейсТаксиПростой" Тогда

	Иначе
		//Если ПоказатьНачалоРаботыВСервисе Тогда
		//	ОткрытьФорму("Обработка.НачалоРаботы.Форма.НачалоРаботыВСервисе");
		//КонецЕсли;
		Если ЭтоАдресВременногоХранилища(АдресВременногоХранилища) Тогда
			РезультатСозданияОрганизации = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
		Иначе
			РезультатСозданияОрганизации = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		КонецЕсли;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", РезультатСозданияОрганизации);
		ПараметрыФормы.Вставить("НепоказанныеСообщения", НепоказанныеСообщения);
		ОткрытьФорму("Обработка.НачалоРаботы.Форма.ДополнительныеПараметры", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРаботуПомощника()
	
	ОповеститьОЗавершенииПомощникаНачалаРаботы();
	УстановитьИнтерфейс();
	//Установить складской и суммовой учет по умолчанию
	УстановитьСкладскойИСуммовойУчеты(ВидБизнеса);
	УстановитьКонстанты();
	ОбновитьИнтерфейс();
	// Форма может открываться как форма на рабочем столе, так и обычная форма.
	// В том случае, если форма открывается как форма на рабочем столе, то после установки стандратного интефейса и вызова ОбновитьИнтерфейс()
	// форма автоматически закрывается платформой и дополнительно закрывать ее не нужно.
	Если ЭтотОбъект.Открыта() Тогда
		ЭтотОбъект.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОЗавершенииПомощникаНачалаРаботы()
	Оповестить("ЗавершенаРаботаПомощникаНачалаРаботы", ЭтотОбъект.ИмяФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИнициализироватьСвойстваОрганизации(Форма)
	
	Форма.ИИН = "";
	Форма.ИИНКомментарий = "";
	
	Форма.ВидОрганизации = "ИндивидуальныйПредприниматель";
	Форма.СистемаНалогообложения = "Патент";
	
	Форма.ВидБизнеса = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьСистемыНалогообложения()
	
	Если СистемыНалогообложенияДопускающиеТрудНаемныхРаботников.НайтиПоЗначению(СистемаНалогообложения) = Неопределено Тогда
		ИспользуетсяТрудНаемныхРаботников = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОрганизацию()
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		// Возможно, что фоновое задание было запущено раньше.
		Если НЕ ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	РезультатВыполнения = СоздатьОрганизациюНаСервере();
	АдресВременногоХранилища = РезультатВыполнения.АдресХранилища;
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ПроверитьВозможностьЗавершенияРаботыПомощника();
	Иначе
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыбранныйВидБизнеса(ИмяКнопкиВыбораВидаБизнеса, СистемаНалогообложения)
	
	Строка = Число(Сред(ИмяКнопкиВыбораВидаБизнеса, СтрДлина(ИмяКнопкиВыбораВидаБизнеса) - 1, 1));
	Колонка = Число(Прав(ИмяКнопкиВыбораВидаБизнеса, 1));
	Индекс = Строка * КоличествоКолонокВидовБизнеса() + Колонка;
	
	ДоступныеВидыБизнеса = ВидыБизнесаДляСистемыНалогообложения(СистемаНалогообложения);
	Если Индекс < Перечисления.ВидыБизнеса.КоличествоДляВыбора(СистемаНалогообложения) Тогда
		ВидБизнеса = ДоступныеВидыБизнеса[Индекс];
	КонецЕсли;
	
	Возврат ВидБизнеса;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДоступныеВидыБизнеса()
	
	ОписанияВидовБизнеса = Перечисления.ВидыБизнеса.ОписанияВидовБизнеса();
	
	КоличествоВидовБизнеса = Перечисления.ВидыБизнеса.КоличествоДляВыбора(СистемаНалогообложения);
	Для Строка = 0 По КоличествоСтрокВидовБизнеса() - 1 Цикл
		Для Колонка = 0 По КоличествоКолонокВидовБизнеса() - 1 Цикл
			НастроитьКнопкуВыбораВидаБизнеса(Строка, Колонка, ОписанияВидовБизнеса);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьКнопкуВыбораВидаБизнеса(Строка, Колонка, ОписанияВидовБизнеса)
	
	Индекс = Строка * КоличествоКолонокВидовБизнеса() + Колонка;
	КнопкаВыбораВидаБизнеса = Элементы[ИмяКнопкиВыбораВидаБизнеса(Строка, Колонка)];
	
	Если Индекс >= Перечисления.ВидыБизнеса.КоличествоДляВыбора(СистемаНалогообложения) Тогда
		КнопкаВыбораВидаБизнеса.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	КнопкаВыбораВидаБизнеса.Видимость = Истина;
	
	ДоступныеВидыБизнеса = ВидыБизнесаДляСистемыНалогообложения(СистемаНалогообложения);
	ВидБизнеса = ДоступныеВидыБизнеса.Получить(Индекс);
	
	КнопкаВыбораВидаБизнеса.Заголовок = Строка(ВидБизнеса);
	КнопкаВыбораВидаБизнеса.Картинка = Перечисления.ВидыБизнеса.Картинка(ВидБизнеса);
	Если КнопкаВыбораВидаБизнеса.Картинка.Вид <> ВидКартинки.Пустая Тогда
		КнопкаВыбораВидаБизнеса.Отображение = ОтображениеКнопки.КартинкаИТекст;
	Иначе
		КнопкаВыбораВидаБизнеса.Отображение = ОтображениеКнопки.Текст;
	КонецЕсли;
	
	КнопкаВыбораВидаБизнеса.РасширеннаяПодсказка.Заголовок = ОписанияВидовБизнеса[ВидБизнеса];
	КнопкаВыбораВидаБизнеса.ОтображениеПодсказки = ОтображениеПодсказки.Всплывающая;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяКнопкиВыбораВидаБизнеса(Строка, Колонка)
	
	Возврат СтрШаблон("ВидБизнеса%1%2", Строка, Колонка);
	
КонецФункции

&НаСервереБезКонтекста
Функция КоличествоСтрокВидовБизнеса()
	
	Возврат 4;
	
КонецФункции

&НаСервереБезКонтекста
Функция КоличествоКолонокВидовБизнеса()
	
	Возврат 3;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВидыБизнесаДляСистемыНалогообложения(СистемаНалогообложения)
	
	Результат = Новый Массив;
	Если СистемаНалогообложения = "Патент" Тогда
		Для каждого ЗначениеПеречисления Из Перечисления.ВидыБизнеса Цикл
			Результат.Добавить(ЗначениеПеречисления);
		КонецЦикла;
	Иначе
		Результат.Добавить(Перечисления.ВидыБизнеса.РозничныйМагазин);
		Результат.Добавить(Перечисления.ВидыБизнеса.ОптоваяТорговля);
		Результат.Добавить(Перечисления.ВидыБизнеса.Производство);
		Для каждого ЗначениеПеречисления Из Перечисления.ВидыБизнеса Цикл
			Если Результат.Найти(ЗначениеПеречисления) = Неопределено Тогда
				Результат.Добавить(ЗначениеПеречисления);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОрганизацияСуществует()
	
	Возврат Справочники.Организации.КоличествоОрганизаций() <> 0
		И Справочники.Организации.ОрганизацияПоУмолчанию().Наименование <> НСтр("ru = 'Укажите наименование Вашей организации'");
	
КонецФункции

&НаСервере
Функция УстановитьИнтерфейсТаксиПоСистемеНалогообложения()
	
	// Если организация на момент открытия помощника существовала,
	// то систему налогообложения нужно определять по данным информационной базы.
	// Поэтому систему налогообложения для определения интерфейса оставляем пустой.
	СистемаНалогообложенияДляИнтерфейса = ?(ОрганизацияСуществует, "", СистемаНалогообложения);
	
	ВариантИнтерфейса = Неопределено;
	//ВариантИнтерфейса = Обработки.НачалоРаботы.УстановитьПодходящийИнтерфейс(
	//	ВидОрганизации,
	//	СистемаНалогообложения,
	//	ИспользуетсяТрудНаемныхРаботников
	//);
	
	// Привилегированный режим устанавливается, так как нужно изменить настройки интерфейса
	// для всех пользователей, а не только текущего пользователя.
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначенияБКВызовСервера.УстановитьСтандартныйИнтерфейсДляВсехпользователей();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ВариантИнтерфейса;
	
КонецФункции

&НаКлиенте
Процедура ПерейтиНаСтраницуВидОрганизации()

	ИИН = "";
	
	ПерейтиНаСтраницу(ЭтотОбъект, "СтраницаВидОрганизации");
	
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВидОрганизацииПоБИН(БИН)
	
	Возврат ?(Число(Сред(СокрЛП(БИН),5,1)) = 6, "ИндивидуальныйПредприниматель", "ЮридическоеЛицо");
	
КонецФункции

#Область СкладскойСуммовойУчет

&НаСервереБезКонтекста
Процедура УстановитьСкладскойИСуммовойУчеты(ВидБизнеса)
	
	Если ВидБизнеса = Перечисления.ВидыБизнеса.Обучение 
		ИЛИ ВидБизнеса = Перечисления.ВидыБизнеса.ПрочиеУслуги 
		ИЛИ ВидБизнеса = Перечисления.ВидыБизнеса.КонсалтинговыеУслуги Тогда
		// для услуг не требуется
		Возврат;
	КонецЕсли;
	
	ВестиСкладскойУчетБУ = Истина;
	ВестиСкладскойУчетНУ = Истина;
	ВестиСуммовойУчетПоСкладамБУ = Истина;
	ВестиСуммовойУчетПоСкладамНУ = Истина;
	
	Пользователь = Пользователи.ТекущийПользователь();
	УПользователяЕстьОграничениеПоОрганизацииНаУровнеЗаписи = УправлениеДоступомБК.ЕстьОграничениеПоОрганизацииНаУровнеЗаписи(Пользователь);
	
	// Аналитический учет ТМЗ
	Если УПользователяЕстьОграничениеПоОрганизацииНаУровнеЗаписи Тогда
		Отказ = Истина
	Иначе	
		Счета = Новый СписокЗначений();
		Счета.Добавить("ГотоваяПродукция");
		Счета.Добавить("СырьеИМатериалы");
		Счета.Добавить("Товары");
		Счета.Добавить("МонтажОборудования");
		Счета.Добавить("МатериалыПринятыеВПереработку");
		
		Для каждого Счет Из Счета Цикл
			ПрименитьПараметрыСубконтоСклады(Счет.Значение, "Типовой", Истина, ВестиСкладскойУчетБУ, ВестиСуммовойУчетПоСкладамБУ, Истина);
		КонецЦикла;
	КонецЕсли;	
	
	// Аналитический учет ТМЗ (НУ)
	Если УПользователяЕстьОграничениеПоОрганизацииНаУровнеЗаписи Тогда
		Отказ = Истина
	Иначе	
		Счета = Новый СписокЗначений();
		Счета.Добавить("Товары");
		Счета.Добавить("ГотоваяПродукция");
		Счета.Добавить("СырьеИМатериалы");
		
		Для каждого Счет Из Счета Цикл
			ПрименитьПараметрыСубконтоСклады(Счет.Значение, "Налоговый", Истина, ВестиСкладскойУчетНУ, ВестиСуммовойУчетПоСкладамНУ, Истина);
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПрименитьПараметрыСубконтоСклады(ИмяСчета, ИмяПланаСчетов, ЕстьКоличество, Склады, Суммы, ОбработкаПодчиненных = Истина)

	ВидСубконто = "ВидыСубконтоТиповые";
	ШаблонСообщения = НСтр("ru = 'План счетов ""%1"", счет ""%2"": %3'");
	ВыводитьСообщения = Ложь;
	
	Попытка
		
		Счет  = ПланыСчетов[ИмяПланаСчетов][ИмяСчета];
		Счета = Новый СписокЗначений();
		Счета.Добавить(Счет);
		
		Если ОбработкаПодчиненных Тогда
			
			ВыборкаСчетов = ПланыСчетов[ИмяПланаСчетов].ВыбратьИерархически(Счет);
			Пока ВыборкаСчетов.Следующий() Цикл
				
				Счета.Добавить(ВыборкаСчетов.Ссылка);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Для каждого Счет Из Счета Цикл
			
			Объект   = Счет.Значение.ПолучитьОбъект();
			КодСчета = Объект.Код;
			
			Сообщение = "";
			
			Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].Склады, "ВидСубконто");
			
			Если Склады = Истина Тогда // Добавляем 
				
				Если Субконто = Неопределено Тогда
					
					НовыйВид = Объект.ВидыСубконто.Добавить();
					
					НовыйВид.ВидСубконто = ПланыВидовХарактеристик[ВидСубконто].Склады;
					
					Если ЕстьКоличество Тогда
						НовыйВид.Количественный = Истина;
					КонецЕсли;
					
					Сообщение = Сообщение + НСтр("ru = 'установлено субконто ""Склады"",'");
					
				КонецЕсли;
				
			ИначеЕсли Склады = Ложь Тогда // Удаляем
				
				Если Субконто <> Неопределено Тогда
					Объект.ВидыСубконто.Удалить(Субконто);
					Сообщение = Сообщение + НСтр("ru = 'удалено субконто ""Склады"",'");
				КонецЕсли;
				
			КонецЕсли;
			
			Если Склады Тогда
				
				Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].Склады, "ВидСубконто");
				Если Субконто.Суммовой <> Суммы Тогда
					Субконто.Суммовой = Суммы;
					Сообщение = Сообщение + НСтр("ru = 'у субконто ""Склады"" изменен признак суммового учета,'");
				КонецЕсли;
				
			КонецЕсли;
			
			Если Сообщение <> "" И ВыводитьСообщения Тогда
				Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, ИмяПланаСчетов, Строка(Объект), Сообщение);
				
				Если Прав(Сообщение, 1) = "," Тогда
					Сообщение = Лев(Сообщение, СтрДлина(Сообщение)-1);
				КонецЕсли;
				
				ОбщегоНазначения.СообщитьПользователю(Сообщение);
			КонецЕсли; 
			
			Объект.Записать();
			
		КонецЦикла;
		
	Исключение
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, ИмяПланаСчетов, Строка(КодСчета), ОписаниеОшибки());
		
		ОбщегоНазначения.СообщитьПользователю(Сообщение);
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область НачальноеЗаполнение

&НаКлиенте
Процедура ОрганизацияИНачальноеЗаполнение(Заполнять = Истина)
	
	СоздатьОрганизацию();
	
	Если Заполнять Тогда
		НачальноеЗаполнение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьЗавершенияРаботыПомощника()
	
	Завершить = Ложь;
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Если НЕ ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
					
			УстановитьДоступностьЭлементовОжиданияСозданияОрганизации(Истина);
			ПодключитьОбработчикОжидания("Подключаемый_ИзменитьТекстСообщенияОжидания", 10, Истина);
					
		Иначе
		//	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамера);
			Завершить = Истина;
		КонецЕсли;
	Иначе
		Завершить = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияНачальногоЗаполнения) Тогда
		Если НЕ ЗаданиеВыполнено(ИдентификаторЗаданияНачальногоЗаполнения) Тогда
			ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеНачальногоЗаполнения");
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияНачальноеЗаполнение);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеНачальногоЗаполнения", 1, Истина);
			
			УстановитьДоступностьЭлементовОжиданияСозданияОрганизации(Истина);
			ПодключитьОбработчикОжидания("Подключаемый_ИзменитьТекстСообщенияОжидания", 10, Истина);
			Завершить = Ложь;
		Иначе
		//	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамера);
			Завершить = Завершить И Истина;
		КонецЕсли;
	Иначе
		Завершить = Завершить И Истина;
	КонецЕсли;
	
	Если Завершить Тогда
		ИдентификаторыЗаданий = Новый Массив;
		ИдентификаторыЗаданий.Добавить(ИдентификаторЗадания);
		ИдентификаторыЗаданий.Добавить(ИдентификаторЗаданияНачальногоЗаполнения);
		ПолучитьИзДлительныхОперацийСообщенияПользователю(ИдентификаторыЗаданий);
		ЗавершитьРаботуПомощника();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачальноеЗаполнение()
	
	Если НачальноеЗаполнениеПоУмолчанию Тогда
		СформироватьСписокОбъектовДляЗаполненияПоУмолчанию();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияНачальногоЗаполнения) Тогда
		Если НЕ ЗаданиеВыполнено(ИдентификаторЗаданияНачальногоЗаполнения) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеНачальногоЗаполнения");
	
	РезультатВыполнения = ВыполнитьНачальноеЗаполнениеНаСервере();
	Если НЕ РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияНачальноеЗаполнение);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеНачальногоЗаполнения", 1, Истина);
	Иначе
	//	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамера);
		ПроверитьВозможностьЗавершенияРаботыПомощника();
	КонецЕсли;
	
	Если ВыбранныеНастройкиЗаполнения.НайтиПоЗначению("АдресныйКлассификатор") <> Неопределено Тогда
		ОткрытьФорму("РегистрСведений.АдресныйКлассификатор.Форма.ЗагрузкаАдресногоКлассификатора",,,,,,, РежимОткрытияОкнаФормы.Независимый);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачальноеЗаполнение()
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияНачальногоЗаполнения) Тогда
		Если НЕ ЗаданиеВыполнено(ИдентификаторЗаданияНачальногоЗаполнения) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеНачальногоЗаполнения");
	
	// Если организация уже существует в информационной базе,
	// то окно открывается только для выбора вида деятельности.
	// Поэтому реквизиты в данном случае не важны.
	РезультатВыполнения = ВыполнитьНачальноеЗаполнениеНаСервере();
	Если НЕ РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияНачальноеЗаполнение);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеНачальногоЗаполнения", 1, Истина);
	Иначе
	//	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамера);
		ПроверитьВозможностьЗавершенияРаботыПомощника();
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеНачальногоЗаполнения()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗаданияНачальногоЗаполнения) Тогда 
			//ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамера);
			ПроверитьВозможностьЗавершенияРаботыПомощника();
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияНачальноеЗаполнение);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеНачальногоЗаполнения", 
				ПараметрыОбработчикаОжиданияНачальноеЗаполнение.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьНачальноеЗаполнениеНаСервере()

	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗаданияНачальногоЗаполнения);
	
	ИдентификаторЗаданияНачальногоЗаполнения = Неопределено;

	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ВыбранныеНастройкиЗаполнения", ВыбранныеНастройкиЗаполнения);
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.НачалоРаботы.ВыполнитьНачальноеЗаполнение",
		ПараметрыЗаполнения,
		НСтр("ru='Начальное заполнение ИБ'"));
		
	ИдентификаторЗаданияНачальногоЗаполнения = РезультатВыполнения.ИдентификаторЗадания;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Процедура ЗавершениеНастройкиЗаполнения(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("СписокЗначений") Тогда
		ВыбранныеНастройкиЗаполнения.ЗагрузитьЗначения(РезультатЗакрытия.ВыгрузитьЗначения());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСписокОбъектовДляЗаполненияПоУмолчанию()
	
	Если НЕ НачалоРаботыВСервисе Тогда
		ВыбранныеНастройкиЗаполнения.Добавить("АдресныйКлассификатор");
	КонецЕсли;
	ВыбранныеНастройкиЗаполнения.Добавить("ДополнительнаяКолонкаПечатныхФормДокументов"); 
	ВыбранныеНастройкиЗаполнения.Добавить("ПредставлениеНомераДокументов");
	ВыбранныеНастройкиЗаполнения.Добавить("СрокОплатыПокупателей");
	ВыбранныеНастройкиЗаполнения.Добавить("СрокОплатыПоставщикам");
	ВыбранныеНастройкиЗаполнения.Добавить("ТипЦенПлановойСебестоимостиНоменклатуры"); 
	ВыбранныеНастройкиЗаполнения.Добавить("Банки");
	ВыбранныеНастройкиЗаполнения.Добавить("БанковскиеСчета");
	ВыбранныеНастройкиЗаполнения.Добавить("Валюты");
	ВыбранныеНастройкиЗаполнения.Добавить("ВидыНоменклатуры");
	ВыбранныеНастройкиЗаполнения.Добавить("ВидыПервичныхДокументов");
	ВыбранныеНастройкиЗаполнения.Добавить("ГодовыеГрафикиАмортизацииОС");
	ВыбранныеНастройкиЗаполнения.Добавить("ДокументыУдостоверяющиеЛичность");
	ВыбранныеНастройкиЗаполнения.Добавить("ДолжностиОрганизаций");
	ВыбранныеНастройкиЗаполнения.Добавить("КлассификаторЕдиницИзмерения");
	ВыбранныеНастройкиЗаполнения.Добавить("КлассификаторСтранМира");
	ВыбранныеНастройкиЗаполнения.Добавить("НалогиСборыОтчисления");
	ВыбранныеНастройкиЗаполнения.Добавить("Номенклатура");
	ВыбранныеНастройкиЗаполнения.Добавить("ОснованияУвольненияИзОрганизации");
	ВыбранныеНастройкиЗаполнения.Добавить("ПараметрыВыработкиОС");
	ВыбранныеНастройкиЗаполнения.Добавить("ПричиныСписанияОС");
	ВыбранныеНастройкиЗаполнения.Добавить("Резервы");
	ВыбранныеНастройкиЗаполнения.Добавить("РолиКонтактныхЛиц");
	ВыбранныеНастройкиЗаполнения.Добавить("СобытияОС");
	ВыбранныеНастройкиЗаполнения.Добавить("ТипыЦенНоменклатуры");
	ВыбранныеНастройкиЗаполнения.Добавить("ФизическиеЛица");
	ВыбранныеНастройкиЗаполнения.Добавить("ФондыВыплатОрганизаций");
	ВыбранныеНастройкиЗаполнения.Добавить("СчетаУчетаДенежныхСредств");
	ВыбранныеНастройкиЗаполнения.Добавить("СчетаУчетаНоменклатуры"); 
	ВыбранныеНастройкиЗаполнения.Добавить("СтавкиНДС");
	ВыбранныеНастройкиЗаполнения.Добавить("Склады");
	ВыбранныеНастройкиЗаполнения.Добавить("ОсновныеНачисленияОрганизаций");
	ВыбранныеНастройкиЗаполнения.Добавить("СтатьиДвиженияДенежныхСредств");
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПолучитьИзДлительныхОперацийСообщенияПользователю(ИдентификаторыЗаданий)
	НепоказанныеСообщения.Очистить();
	Для Каждого Идентификатор Из  ИдентификаторыЗаданий Цикл
		ПолучитьИзДлительнойОперацииСообщенияПользователю(Идентификатор, НепоказанныеСообщения);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьИзДлительнойОперацииСообщенияПользователю(ИдентификаторТекущегоЗадания, СписокСообщений)
	
	Если Не ЗначениеЗаполнено(ИдентификаторТекущегоЗадания) Тогда
		Возврат;
	КонецЕсли;
	
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторТекущегоЗадания);
	Если ФоновоеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Сообщения = ФоновоеЗадание.ПолучитьСообщенияПользователю(Истина);
	
	Если Сообщения = Неопределено Тогда
		// Вместо пустого массива возвращается Неопределено
		Возврат;
	КонецЕсли;
	
	УникальныеТекстыСообщений = Новый Массив;
	Для Каждого Сообщение Из Сообщения Цикл
		
		Если Найти(Сообщение.Текст, "e1cib") <> 0 Тогда
			// Это служебное сообщение.
			// Такие не показываем пользователю
			Продолжить;
		КонецЕсли;
		
		Если УникальныеТекстыСообщений.Найти(Сообщение.Текст) = Неопределено Тогда
			УникальныеТекстыСообщений.Добавить(Сообщение.Текст);
			СписокСообщений.Добавить(Сообщение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
