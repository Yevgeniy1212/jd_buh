#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция СистемаНалогообложенияПоУмолчанию() Экспорт
	
	Возврат "Патент";
	
КонецФункции

Функция СистемыНалогообложенияДопускающиеТрудНаемныхРаботников() Экспорт
	
	СистемыНалогообложенияДопускающиеТрудНаемныхРаботников = Новый Массив;
	
	СистемыНалогообложенияДопускающиеТрудНаемныхРаботников.Добавить("УпрощеннаяДекларация");
	СистемыНалогообложенияДопускающиеТрудНаемныхРаботников.Добавить("ФиксированныйВычет");
	СистемыНалогообложенияДопускающиеТрудНаемныхРаботников.Добавить("Общеустановленный");
	СистемыНалогообложенияДопускающиеТрудНаемныхРаботников.Добавить("РозничныйНалог");
	
	Возврат СистемыНалогообложенияДопускающиеТрудНаемныхРаботников;
	
КонецФункции

Процедура ПодключитьИнтернетПоддержку(ПараметрыЗадания, АдресХранилища) Экспорт
	
	ДанныеАутентификации = Новый Структура("Логин, Пароль", ПараметрыЗадания.ЛогинИПП, ПараметрыЗадания.ПарольИПП);
	УстановитьПривилегированныйРежим(Истина);
	ИнтернетПоддержкаПользователей.СохранитьДанныеАутентификации(ДанныеАутентификации);
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат = "ПодключениеУспешно";
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатПолученияТикета = ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки("https://api.orgregister.1c.ru/orgregister/");
		УстановитьПривилегированныйРежим(Ложь);
		Если ЗначениеЗаполнено(РезультатПолученияТикета.КодОшибки) Тогда
			
			Если ВРЕГ(РезультатПолученияТикета.КодОшибки) = ВРЕГ("НеверныйЛогинИлиПароль") Тогда
				Результат = "ОшибкаАвторизации";
			ИначеЕсли ВРЕГ(РезультатПолученияТикета.КодОшибки) = ВРЕГ("ОшибкаПодключения") Тогда
				Результат = "ОшибкаПодключения";
			ИначеЕсли ВРЕГ(РезультатПолученияТикета.КодОшибки) = ВРЕГ("ОшибкаСервиса") Тогда
				Результат = "ОшибкаСервиса";
			Иначе
				Результат = "Неопределено";
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		Результат = "Неопределено";
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
	КонецПопытки;
	
	Если Результат <> "ПодключениеУспешно" Тогда
		// Отключаем интернет-поддержку
		УстановитьПривилегированныйРежим(Истина);
		ИнтернетПоддержкаПользователей.СохранитьДанныеАутентификации(Неопределено);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Функция СобытиеЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Интернет-поддержка пользователей'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции


#Область СозданиеОрганизации

Функция ИспользуетсяПолнаяФункциональность() Экспорт
	
	ВариантФункциональности = Обработки.ФункциональностьПрограммы.ВариантФункциональности();
	Возврат (ВариантФункциональности = ФункциональностьПрограммыКлиентСервер.ПолнаяФункциональность());
	
КонецФункции

Функция ИспользуетсяОсновнаяФункциональность() Экспорт
	
	ВариантФункциональности = Обработки.ФункциональностьПрограммы.ВариантФункциональности();
	Возврат (ВариантФункциональности = ФункциональностьПрограммыКлиентСервер.ОсновнаяФункциональность());
	
КонецФункции

Функция УстановитьПодходящийИнтерфейс(ВидОрганизации, СистемаНалогообложения, ИспользуетсяТрудНаемныхРаботников, РазрешенУчетРегулярнойДеятельности = Истина) Экспорт
	
	//НастройкиИнтерфейса = ПодходящиеНастройкиИнтерфейса(СистемаНалогообложения);
	//
	//ВариантИнтерфейса = ?(РазрешенУчетРегулярнойДеятельности,
	//	НастройкиИнтерфейса.ВариантИнтерфейса,
	//	"ИнтерфейсТаксиПростой");
	//ОбщегоНазначенияБП.УстановитьРежимКомандногоИнтерфейса(ВариантИнтерфейса);
	//
	//БезЗакрывающихДокументов = ?(ВидОрганизации = "ИндивидуальныйПредприниматель" И НЕ ИспользуетсяТрудНаемныхРаботников,
	//	НастройкиИнтерфейса.БезЗакрывающихДокументов,
	//	Ложь);
	//
	//Если НастройкиИнтерфейса.ВариантИнтерфейса = "ИнтерфейсТаксиПростой"
	//	И НЕ БезЗакрывающихДокументов Тогда
	//	Константы.ИспользоватьДокументыПоступления.Установить(Истина);
	//	Константы.ИспользоватьДокументыРеализации.Установить(Истина);
	//КонецЕсли;
	//
	//Возврат ВариантИнтерфейса;
	
КонецФункции

Процедура СоздатьОрганизацию(ПараметрыСозданияОрганизации, АдресВременногоХранилища) Экспорт
	
	ВременныйАдресВременногоХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
	
	УстановитьПривилегированныйРежим(Истина);
	
	Справочники.Организации.СоздатьОрганизацию(ПараметрыСозданияОрганизации, ВременныйАдресВременногоХранилища);
	
	РезультатСозданияОрганизации = ПолучитьИзВременногоХранилища(ВременныйАдресВременногоХранилища);
	
	Если ЗначениеЗаполнено(РезультатСозданияОрганизации) Тогда
		
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Кассы.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Кассы КАК Кассы
			|ГДЕ
			|	Кассы.Владелец = &Владелец
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПодразделенияОрганизаций.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
			|ГДЕ
			|	ПодразделенияОрганизаций.Владелец = &Владелец
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Склады.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Склады КАК Склады
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	УстановкаСоответствияСчетовБУиНУ.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.УстановкаСоответствияСчетовБУиНУ КАК УстановкаСоответствияСчетовБУиНУ
			|ГДЕ
			|	УстановкаСоответствияСчетовБУиНУ.Дата = &Дата
			|	И УстановкаСоответствияСчетовБУиНУ.Проведен";
		
		Запрос.УстановитьПараметр("Владелец", РезультатСозданияОрганизации);
		Запрос.УстановитьПараметр("Дата", '19800101');
		
		Результаты = Запрос.ВыполнитьПакет();
		
		КодЯзыка =  ОбщегоНазначения.КодОсновногоЯзыка();
		
		// Заполнение справочника "Кассы"
		Если Результаты[0].Пустой() Тогда
			Касса = Справочники.Кассы.СоздатьЭлемент();
			Касса.Владелец 				= РезультатСозданияОрганизации.Ссылка;
			Касса.Наименование          = НСтр("ru = 'Основная касса'", КодЯзыка);
			Касса.ВалютаДенежныхСредств = ВалютаРегламентированногоУчета;
			Попытка
				Касса.Записать();
			Исключение
				ТекстСообщения = НСтр("ru = 'Операция не выполнена. Создание основной кассы организации'", КодЯзыка);
				ЗаписьЖурналаРегистрации(ТекстСообщения,
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники.Кассы,
					,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), 
					Метаданные.ОсновнойЯзык.КодЯзыка);
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = ТекстСообщения + Символы.ПС + НСтр("ru = 'См. Журнал регистрации'");
				Сообщение.Сообщить();
			КонецПопытки;
		КонецЕсли;
		
		// Заполнение справочника "ПодразделенияОрганизаций"
		Если Результаты[1].Пустой() Тогда
			Подразделение               = Справочники.ПодразделенияОрганизаций.СоздатьЭлемент();
			Подразделение.Владелец      = РезультатСозданияОрганизации.Ссылка;
			Подразделение.Наименование  = НСтр("ru = 'Основное подразделение'", КодЯзыка);
			Попытка
				Подразделение.Записать();
			Исключение
				ТекстСообщения = НСтр("ru = 'Операция не выполнена. Создание основного подразделения организации'", КодЯзыка);
				ЗаписьЖурналаРегистрации(ТекстСообщения,
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники.ПодразделенияОрганизаций,
					,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), 
					Метаданные.ОсновнойЯзык.КодЯзыка);
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = ТекстСообщения + Символы.ПС + НСтр("ru = 'См. Журнал регистрации'");
				Сообщение.Сообщить();
			КонецПопытки;
		КонецЕсли;

		// Заполнение справочника "Склады"
		Если Результаты[2].Пустой() Тогда
			Склад = Справочники.Склады.СоздатьЭлемент();
			Склад.Наименование  = НСтр("ru = 'Основной склад'", КодЯзыка);
			Склад.Комментарий   = НСтр("ru = 'Основной склад организации'", КодЯзыка);
			Склад.Записать();
			Попытка
				Склад.Записать();
			Исключение
				ТекстСообщения = НСтр("ru = 'Операция не выполнена. Создание основного склада'", КодЯзыка);
				ЗаписьЖурналаРегистрации(ТекстСообщения,
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники.Склады,
					,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), 
					Метаданные.ОсновнойЯзык.КодЯзыка);
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = ТекстСообщения + Символы.ПС + НСтр("ru = 'См. Журнал регистрации'");
				Сообщение.Сообщить();
			КонецПопытки;
		КонецЕсли;

		Если Результаты[3].Пустой() Тогда
			ЗаполнитьСоответствиеСчетовБУиНУ('19800101', РезультатСозданияОрганизации);
		КонецЕсли;
	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЭтоАдресВременногоХранилища(АдресВременногоХранилища) Тогда 
		ПоместитьВоВременноеХранилище(РезультатСозданияОрганизации, АдресВременногоХранилища);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСоответствиеСчетовБУиНУ(ТекущаяДата, ОрганизацияПервоначальногоЗаполнения) Экспорт
	
	ДокументУстановкаСоответствияСчетовБУиНУ = Документы.УстановкаСоответствияСчетовБУиНУ.СоздатьДокумент();
	ДокументУстановкаСоответствияСчетовБУиНУ.Дата 		 = ТекущаяДата;
	ДокументУстановкаСоответствияСчетовБУиНУ.Организация = ОрганизацияПервоначальногоЗаполнения;
	ДокументУстановкаСоответствияСчетовБУиНУ.УстановитьНовыйНомер();
	Документы.УстановкаСоответствияСчетовБУиНУ.ЗаполнитьСоответствиеСчетовБУиНУПоУмолчанию(ДокументУстановкаСоответствияСчетовБУиНУ); 
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	Попытка
		ДокументУстановкаСоответствияСчетовБУиНУ.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена. Создание документа ""Установка соответствия счетов БУ и НУ""'", КодЯзыка);
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.УстановкаСоответствияСчетовБУиНУ,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = ТекстСообщения + Символы.ПС + НСтр("ru = 'См. Журнал регистрации'");
		Сообщение.Сообщить();
		Возврат;
	КонецПопытки;
	Попытка
		ДокументУстановкаСоответствияСчетовБУиНУ.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена. Проведение документа ""Установка соответствия счетов БУ и НУ""'",КодЯзыка);
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.УстановкаСоответствияСчетовБУиНУ,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = ТекстСообщения + Символы.ПС + НСтр("ru = 'См. Журнал регистрации'");
		Сообщение.Сообщить();
	КонецПопытки;
	
КонецПроцедуры // ЗаполнитьСоответствиеСчетовБУиНУ()

#КонецОбласти


#Область НачальноеЗаполнение

Процедура ВыполнитьНачальноеЗаполнение(Параметры, АдресХранилища) Экспорт
	
	Для Каждого ЭлементЗаполнения Из Параметры.ВыбранныеНастройкиЗаполнения Цикл
		
		ОбъектЗаполнения = ЭлементЗаполнения.Значение;
		
		Если ОбъектЗаполнения = "ДополнительнаяКолонкаПечатныхФормДокументов" Тогда 
			
			УстановитьДополнительнаяКолонкаПечатныхФормДокументов();
		
		ИначеЕсли ОбъектЗаполнения = "ПредставлениеНомераДокументов" Тогда 
			
			УстановитьПредставлениеНомераДокументов();
			
		ИначеЕсли ОбъектЗаполнения = "СрокОплатыПокупателей" Тогда 
			
			УстановитьСрокОплатыПокупателей();
			
		ИначеЕсли ОбъектЗаполнения = "СрокОплатыПоставщикам" Тогда 
			
			УстановитьСрокОплатыПоставщикам();
			
		ИначеЕсли ОбъектЗаполнения = "ТипЦенПлановойСебестоимостиНоменклатуры" Тогда 
			
			УстановитьТипЦенПлановойСебестоимостиНоменклатуры();
			
		ИначеЕсли ОбъектЗаполнения = "Банки" Тогда 
			
			УстановитьБанки();
			
		ИначеЕсли ОбъектЗаполнения = "БанковскиеСчета" Тогда 
			
			УстановитьБанковскиеСчета();
			
		ИначеЕсли ОбъектЗаполнения = "Валюты" Тогда 
			
			УстановитьВалюты();
			
		ИначеЕсли ОбъектЗаполнения = "ВидыНоменклатуры" Тогда 
			
			УстановитьВидыНоменклатуры();
			
		ИначеЕсли ОбъектЗаполнения = "ВидыПервичныхДокументов" Тогда 
			
			УстановитьВидыПервичныхДокументов();
			
		ИначеЕсли ОбъектЗаполнения = "ГодовыеГрафикиАмортизацииОС" Тогда 
			
			УстановитьГодовыеГрафикиАмортизацииОС();
			
		ИначеЕсли ОбъектЗаполнения = "ДокументыУдостоверяющиеЛичность" Тогда 
			
			УстановитьДокументыУдостоверяющиеЛичность();
			
		ИначеЕсли ОбъектЗаполнения = "ДолжностиОрганизаций" Тогда 
					
			УстановитьДолжностиОрганизаций();
			
		//ИначеЕсли ОбъектЗаполнения = "Кассы" Тогда 
		//			
		//	УстановитьКассы();
			
		ИначеЕсли ОбъектЗаполнения = "КлассификаторЕдиницИзмерения" Тогда 
					
			УстановитьКлассификаторЕдиницИзмерения();
					
		ИначеЕсли ОбъектЗаполнения = "КлассификаторСтранМира" Тогда 
			
			УстановитьКлассификаторСтранМира();
			
		ИначеЕсли ОбъектЗаполнения = "НалогиСборыОтчисления" Тогда 
			
			УстановитьНалогиСборыОтчисления();
			
		ИначеЕсли ОбъектЗаполнения = "Номенклатура" Тогда 
			
			УстановитьНоменклатура();
			
		ИначеЕсли ОбъектЗаполнения = "ПараметрыВыработкиОС" Тогда 
			
			УстановитьПараметрыВыработкиОС();
			
		//ИначеЕсли ОбъектЗаполнения = "ПодразделенияОрганизаций" Тогда 
		//	
		//	УстановитьПодразделенияОрганизаций();
			
		ИначеЕсли ОбъектЗаполнения = "ПричиныСписанияОС" Тогда 
			
			УстановитьПричиныСписанияОС();
			
		ИначеЕсли ОбъектЗаполнения = "Резервы" Тогда 
			
			УстановитьРезервы();
			
		ИначеЕсли ОбъектЗаполнения = "РолиКонтактныхЛиц" Тогда 
			
			УстановитьРолиКонтактныхЛиц();
			
		ИначеЕсли ОбъектЗаполнения = "СобытияОС" Тогда 
			
			УстановитьСобытияОС();
			
		ИначеЕсли ОбъектЗаполнения = "ТипыЦенНоменклатуры" Тогда 
			
			УстановитьТипыЦенНоменклатуры();
			
		ИначеЕсли ОбъектЗаполнения = "ФизическиеЛица" Тогда 
			
			УстановитьФизическиеЛица();
			
		ИначеЕсли ОбъектЗаполнения = "ФондыВыплатОрганизаций" Тогда 
			
			УстановитьФондыВыплатОрганизаций();
			
		ИначеЕсли ОбъектЗаполнения = "СчетаУчетаДенежныхСредств" Тогда 
			
			УстановитьСчетаУчетаДенежныхСредств();
			
		//ИначеЕсли ОбъектЗаполнения = "СчетаУчетаНоменклатуры" Тогда 
		//	
		//	УстановитьСчетаУчетаНоменклатуры();
						
		//ИначеЕсли ОбъектЗаполнения = "УчетнаяПолитикаБухгалтерскийУчет" Тогда 
		//	
		//	УстановитьУчетнаяПолитикаБухгалтерскийУчет();
			
		ИначеЕсли ОбъектЗаполнения = "СтавкиНДС" Тогда 
			
			УстановитьСтавкиНДС();
			
		ИначеЕсли ОбъектЗаполнения = "Склады" Тогда 
			
			УстановитьСклады();
			
		//ИначеЕсли ОбъектЗаполнения = "СчетаУчетаРасчетовСКонтрагентами" Тогда 
		//	
		//	УстановитьСчетаУчетаРасчетовСКонтрагентами();  
			
		//ИначеЕсли ОбъектЗаполнения = "УчетнаяПолитикаНалоговыйУчет" Тогда 
		//	
		//	УстановитьУчетнаяПолитикаНалоговыйУчет();
			
		ИначеЕсли ОбъектЗаполнения = "СтатьиДвиженияДенежныхСредств" Тогда 
			
			УстановитьСтатьиДвиженияДенежныхСредств();
		
		КонецЕсли;
				
	КонецЦикла;
	
	    	
	
КонецПроцедуры

Процедура УстановитьДополнительнаяКолонкаПечатныхФормДокументов()
	
	Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Установить(Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код);
	
КонецПроцедуры

Процедура УстановитьПредставлениеНомераДокументов()
	
	Константы.ПредставлениеНомераДокументов.Установить(Перечисления.ВидыПредставленийНомеровДокументов.БезПрефиксаБезНулей);
	
КонецПроцедуры

Процедура УстановитьСрокОплатыПокупателей()
	
	Константы.СрокОплатыПокупателей.Установить(10);
	
КонецПроцедуры

Процедура УстановитьСрокОплатыПоставщикам()
	
	Константы.СрокОплатыПоставщикам.Установить(10);
	
КонецПроцедуры

Процедура УстановитьТипЦенПлановойСебестоимостиНоменклатуры()
	
	КодЯзыка =  ОбщегоНазначения.КодОсновногоЯзыка();
	
	// Установка типов цен плановой себестоимости номенклатуры 
	СсылкаСправочника = Справочники.ТипыЦенНоменклатуры.НайтиПоНаименованию(НСтр("ru = 'Плановая'", КодЯзыка));
	ПустаяСсылка	  = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
	Если СсылкаСправочника = ПустаяСсылка Тогда 
		ТипЦены = Справочники.ТипыЦенНоменклатуры.СоздатьЭлемент();
		ТипЦены.Наименование 			 = НСтр("ru = 'Плановая'", КодЯзыка);
		ТипЦены.ВалютаЦены 				 = Константы.ВалютаРегламентированногоУчета.Получить();
		ТипЦены.ЦенаВключаетАкциз 		 = Ложь;
		ТипЦены.ЦенаВключаетНДС 		 = Ложь;
		ТипЦены.ОкруглятьВБольшуюСторону = Ложь;
		ТипЦены.ПорядокОкругления 		 = Перечисления.ПорядкиОкругления.Окр0_01;
		ТипЦены.Записать();
	    Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Установить(ТипЦены.Ссылка);
	Иначе 
		Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Установить(СсылкаСправочника.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьБанки()
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	// заполнение справочника банки
	СписокБанков = Новый СписокЗначений();
	СписокБанков.Добавить(НСтр("ru = 'АО ""Delta Bank"" гр.'", КодЯзыка));
	СписокБанков.Добавить(НСтр("ru = 'АО ""KASPI BANK"" гр.'", КодЯзыка));
	СписокБанков.Добавить(НСтр("ru = 'АО ""Альянс Банк"" гр.'", КодЯзыка));
	СписокБанков.Добавить(НСтр("ru = 'АО ""АТФБанк"" гр.'", КодЯзыка));
	СписокБанков.Добавить(НСтр("ru = 'АО ""Банк ЦентрКредит"" гр.'", КодЯзыка));
	СписокБанков.Добавить(НСтр("ru = 'АО ""БТА Банк"" гр.'", КодЯзыка));
	СписокБанков.Добавить(НСтр("ru = 'АО ""Евразийский банк"" гр.'", КодЯзыка));
	СписокБанков.Добавить(НСтр("ru = 'АО ""Жилстройсбербанк Казахстана"" гр.'", КодЯзыка));
	СписокБанков.Добавить(НСтр("ru = 'АО ""КАЗКОММЕРЦБАНК"" гр.'", КодЯзыка));
	СписокБанков.Добавить(НСтр("ru = 'АО ""Народный Банк Казахстана"" гр.'", КодЯзыка));
	СписокБанков.Добавить(НСтр("ru = 'АО ""Нурбанк"" гр.'", КодЯзыка));
	СписокБанков.Добавить(НСтр("ru = 'ДО АО ""БТА  БАНК"" - АО ""ТЕМIРБАНК"" гр.'", КодЯзыка));
	СписокБанков.Добавить(НСтр("ru = 'АО ""Цеснабанк"" гр.'", КодЯзыка));
	СписокБанков.Добавить(НСтр("ru = 'ГУ Национальный Банк РК гр.'", КодЯзыка));
	СписокБанков.Добавить(НСтр("ru = 'ДБ АО ""Сбербанк России"" гр.'", КодЯзыка));
	СписокБанков.Добавить(НСтр("ru = 'НАО ""Государственная корпорация ""Правительство для граждан"" гр.'", КодЯзыка));
	
	СписокГруппССсылками = Новый Массив;
	
	Для Каждого СтрокаСписка Из СписокБанков Цикл 
		
		СсылкаДляПроверки = Справочники.Банки.НайтиПоНаименованию(СтрокаСписка);
		ПустаяСсылка = Справочники.Банки.ПустаяСсылка();
		
		Если СсылкаДляПроверки = ПустаяСсылка Тогда 
			СправочникБанки = Справочники.Банки.СоздатьГруппу();
			СправочникБанки.Наименование = СтрокаСписка;
			СправочникБанки.Записать();
			СписокГруппССсылками.Добавить(СправочникБанки.Ссылка);
		Иначе 
			Если СсылкаДляПроверки.ЭтоГруппа Тогда 
				СписокГруппССсылками.Добавить(СсылкаДляПроверки);
			Иначе 
				
				ТекстСообщения = НСтр("ru='Банк с наименованием %1 уже создан. Группа для банка будет называться  %2 гр.'");
				Сообщение	   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаСписка, СтрокаСписка);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);

				СправочникБанки = Справочники.Банки.СоздатьГруппу();
				СправочникБанки.Наименование = СтрокаСписка.Значение+ (НСтр("ru = ' гр'", КодЯзыка));
				СправочникБанки.Записать();
				СписокГруппССсылками.Добавить(СправочникБанки.Ссылка);
        	КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
		
	Макет 	= УправлениеПечатью.МакетПечатнойФормы("Справочник.Банки.ПФ_MXL_КлассификаторБанков");
	Макет.КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
    Область = Макет.ПолучитьОбласть("ОбластьРасшифровки");

	Для Ном = 1 По Область.ВысотаТаблицы Цикл 
		Если Найти( Область.Область(Ном, 3).Текст, "Delta Bank") > 0 Тогда 
			
			СсылкаДляПроверки = Справочники.Банки.НайтиПоНаименованию(Лев(Область.Область(Ном, 3).Текст,100), Истина);
			ПустаяСсылка = Справочники.Банки.ПустаяСсылка();
		
			Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		    	ГруппаСправочника = СписокГруппССсылками.Получить(0);
				СправочникБанки   = Справочники.Банки.СоздатьЭлемент();
				СправочникБанки.Родитель 	 = ГруппаСправочника;
				СправочникБанки.Наименование = СокрЛП(Область.Область(Ном, 3).Текст);
				СправочникБанки.БИК 		 = СокрЛП(Область.Область(Ном, 1).Текст); 
				СправочникБанки.Адрес 		 = СокрЛП(Область.Область(Ном, 4).Текст); 
				СправочникБанки.Записать();
			КонецЕсли;
						
		ИначеЕсли Найти( Область.Область(Ном, 3).Текст, НСтр("ru = 'KASPI BANK'", КодЯзыка)) > 0 Или Найти( Область.Область(Ном, 3).Текст, НСтр("ru = 'Каспийский'", КодЯзыка)) > 0 Тогда 
			
			СсылкаДляПроверки = Справочники.Банки.НайтиПоНаименованию(Лев(Область.Область(Ном, 3).Текст,100), Истина);
            ПустаяСсылка	  = Справочники.Банки.ПустаяСсылка();
		
			Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		    	ГруппаСправочника = СписокГруппССсылками.Получить(1);
				СправочникБанки   = Справочники.Банки.СоздатьЭлемент();
				СправочникБанки.Родитель	 = ГруппаСправочника;
				СправочникБанки.Наименование = СокрЛП(Область.Область(Ном, 3).Текст);
				СправочникБанки.БИК			 = СокрЛП(Область.Область(Ном, 1).Текст); 
				СправочникБанки.Адрес		 = СокрЛП(Область.Область(Ном, 4).Текст); 
				СправочникБанки.Записать();
			КонецЕсли;
						
		ИначеЕсли Найти( Область.Область(Ном, 3).Текст, НСтр("ru = 'Альянс Банк'", КодЯзыка)) > 0 Тогда 
			
			СсылкаДляПроверки = Справочники.Банки.НайтиПоНаименованию(Лев(Область.Область(Ном, 3).Текст,100), Истина);
			ПустаяСсылка	  = Справочники.Банки.ПустаяСсылка();
		
			Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		    	ГруппаСправочника = СписокГруппССсылками.Получить(2);
				СправочникБанки   = Справочники.Банки.СоздатьЭлемент();
				СправочникБанки.Родитель	 = ГруппаСправочника;
				СправочникБанки.Наименование = СокрЛП(Область.Область(Ном, 3).Текст);
				СправочникБанки.БИК			 = СокрЛП(Область.Область(Ном, 1).Текст); 
				СправочникБанки.Адрес		 = СокрЛП(Область.Область(Ном, 4).Текст); 
				СправочникБанки.Записать();
			КонецЕсли;
						
		ИначеЕсли Найти( Область.Область(Ном, 3).Текст, НСтр("ru = 'АТФБанк'", КодЯзыка)) > 0 Тогда  
			
			СсылкаДляПроверки = Справочники.Банки.НайтиПоНаименованию(Лев(Область.Область(Ном, 3).Текст,100), Истина);
            ПустаяСсылка 	  = Справочники.Банки.ПустаяСсылка();
			
			Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		    	ГруппаСправочника = СписокГруппССсылками.Получить(3);
				СправочникБанки   = Справочники.Банки.СоздатьЭлемент();
				СправочникБанки.Родитель	 = ГруппаСправочника;
				СправочникБанки.Наименование = СокрЛП(Область.Область(Ном, 3).Текст);
				СправочникБанки.БИК			 = СокрЛП(Область.Область(Ном, 1).Текст); 
				СправочникБанки.Адрес		 = СокрЛП(Область.Область(Ном, 4).Текст); 
				СправочникБанки.Записать();
			КонецЕсли;
			
		ИначеЕсли Найти( Область.Область(Ном, 3).Текст, НСтр("ru = 'Банк ЦентрКредит'", КодЯзыка)) > 0 Тогда  
			
			СсылкаДляПроверки = Справочники.Банки.НайтиПоНаименованию(Лев(Область.Область(Ном, 3).Текст,100), Истина);
            ПустаяСсылка 	  = Справочники.Банки.ПустаяСсылка();
			
			Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		    	ГруппаСправочника = СписокГруппССсылками.Получить(4);
				СправочникБанки   = Справочники.Банки.СоздатьЭлемент();
				СправочникБанки.Родитель 	 = ГруппаСправочника;
				СправочникБанки.Наименование = СокрЛП(Область.Область(Ном, 3).Текст);
				СправочникБанки.БИК 		 = СокрЛП(Область.Область(Ном, 1).Текст); 
				СправочникБанки.Адрес 		 = СокрЛП(Область.Область(Ном, 4).Текст); 
				СправочникБанки.Записать();
			КонецЕсли;
			
		ИначеЕсли Найти( Область.Область(Ном, 3).Текст, НСтр("ru = 'БТА Банк'", КодЯзыка)) > 0 И НЕ Найти( Область.Область(Ном, 3).Текст, НСтр("ru = 'Темірбанк'", КодЯзыка)) > 0 Тогда  
			
			СсылкаДляПроверки = Справочники.Банки.НайтиПоНаименованию(Лев(Область.Область(Ном, 3).Текст,100), Истина);
            ПустаяСсылка 	  = Справочники.Банки.ПустаяСсылка();
		
			Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		    	ГруппаСправочника = СписокГруппССсылками.Получить(5);
				СправочникБанки   = Справочники.Банки.СоздатьЭлемент();
				СправочникБанки.Родитель 	 = ГруппаСправочника;
				СправочникБанки.Наименование = СокрЛП(Область.Область(Ном, 3).Текст);
				СправочникБанки.БИК			 = СокрЛП(Область.Область(Ном, 1).Текст); 
				СправочникБанки.Адрес		 = СокрЛП(Область.Область(Ном, 4).Текст); 
				СправочникБанки.Записать();
			КонецЕсли;
			
		ИначеЕсли Найти( Область.Область(Ном, 3).Текст, НСтр("ru = 'Евразийский банк'", КодЯзыка)) > 0 Тогда  
			
			СсылкаДляПроверки = Справочники.Банки.НайтиПоНаименованию(Область.Область(Ном, 3).Текст, Истина);
			ПустаяСсылка 	  = Справочники.Банки.ПустаяСсылка();
		
			Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		    	ГруппаСправочника = СписокГруппССсылками.Получить(6);
				СправочникБанки	  = Справочники.Банки.СоздатьЭлемент();
				СправочникБанки.Родитель 	 = ГруппаСправочника;
				СправочникБанки.Наименование = СокрЛП(Область.Область(Ном, 3).Текст);
				СправочникБанки.БИК			 = СокрЛП(Область.Область(Ном, 1).Текст); 
				СправочникБанки.Адрес		 = СокрЛП(Область.Область(Ном, 4).Текст); 
				СправочникБанки.Записать();
			КонецЕсли;
						
		ИначеЕсли Найти( Область.Область(Ном, 3).Текст, НСтр("ru = 'Жилстройсбербанк Казахстана'", КодЯзыка)) > 0 Тогда  
			
			СсылкаДляПроверки = Справочники.Банки.НайтиПоНаименованию(Область.Область(Ном, 3).Текст, Истина);
			ПустаяСсылка 	  = Справочники.Банки.ПустаяСсылка();
		
			Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		    	ГруппаСправочника = СписокГруппССсылками.Получить(7);
				СправочникБанки   = Справочники.Банки.СоздатьЭлемент();
				СправочникБанки.Родитель 	 = ГруппаСправочника;
				СправочникБанки.Наименование = СокрЛП(Область.Область(Ном, 3).Текст);
				СправочникБанки.БИК 		 = СокрЛП(Область.Область(Ном, 1).Текст); 
				СправочникБанки.Адрес 		 = СокрЛП(Область.Область(Ном, 4).Текст); 
				СправочникБанки.Записать();
			КонецЕсли;
					
		ИначеЕсли Найти( Область.Область(Ном, 3).Текст, НСтр("ru = 'КАЗКОММЕРЦБАНК'", КодЯзыка)) > 0 Тогда 	
			
			СсылкаДляПроверки = Справочники.Банки.НайтиПоНаименованию(Область.Область(Ном, 3).Текст, Истина);
			ПустаяСсылка	  = Справочники.Банки.ПустаяСсылка();
			
			Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		    	ГруппаСправочника = СписокГруппССсылками.Получить(8);
				СправочникБанки   = Справочники.Банки.СоздатьЭлемент();
				СправочникБанки.Родитель 	 = ГруппаСправочника;
				СправочникБанки.Наименование = СокрЛП(Область.Область(Ном, 3).Текст);
				СправочникБанки.БИК 		 = СокрЛП(Область.Область(Ном, 1).Текст); 
				СправочникБанки.Адрес 		 = СокрЛП(Область.Область(Ном, 4).Текст); 
				СправочникБанки.Записать();
			КонецЕсли;
			
		ИначеЕсли Найти( Область.Область(Ном, 3).Текст, НСтр("ru = 'Народный Банк Казахстана'", КодЯзыка)) > 0 Тогда 	
			
			СсылкаДляПроверки = Справочники.Банки.НайтиПоНаименованию(Область.Область(Ном, 3).Текст, Истина);
			ПустаяСсылка	  = Справочники.Банки.ПустаяСсылка();
		
			Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		    	ГруппаСправочника = СписокГруппССсылками.Получить(9);
				СправочникБанки   = Справочники.Банки.СоздатьЭлемент();
				СправочникБанки.Родитель 	 = ГруппаСправочника;
				СправочникБанки.Наименование = СокрЛП(Область.Область(Ном, 3).Текст);
				СправочникБанки.БИК 		 = СокрЛП(Область.Область(Ном, 1).Текст); 
				СправочникБанки.Адрес 		 = СокрЛП(Область.Область(Ном, 4).Текст); 
				СправочникБанки.Записать();
			КонецЕсли;
			
		ИначеЕсли Найти( Область.Область(Ном, 3).Текст, НСтр("ru = 'Нурбанк'", КодЯзыка)) > 0 Тогда 	
			
			СсылкаДляПроверки = Справочники.Банки.НайтиПоНаименованию(Область.Область(Ном, 3).Текст, Истина);
			ПустаяСсылка 	  = Справочники.Банки.ПустаяСсылка();
		
			Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		    	ГруппаСправочника = СписокГруппССсылками.Получить(10);
				СправочникБанки   = Справочники.Банки.СоздатьЭлемент();
				СправочникБанки.Родитель	 = ГруппаСправочника;
				СправочникБанки.Наименование = СокрЛП(Область.Область(Ном, 3).Текст);
				СправочникБанки.БИК			 = СокрЛП(Область.Область(Ном, 1).Текст); 
				СправочникБанки.Адрес		 = СокрЛП(Область.Область(Ном, 4).Текст); 
				СправочникБанки.Записать();
			КонецЕсли;
			
		ИначеЕсли Найти( Область.Область(Ном, 3).Текст, НСтр("ru = 'ТЕМIРБАНК'", КодЯзыка)) > 0 Тогда 	
			
			СсылкаДляПроверки = Справочники.Банки.НайтиПоНаименованию(Область.Область(Ном, 3).Текст, Истина);
			ПустаяСсылка	  = Справочники.Банки.ПустаяСсылка();
		
			Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		    	ГруппаСправочника = СписокГруппССсылками.Получить(11);
				СправочникБанки   = Справочники.Банки.СоздатьЭлемент();
				СправочникБанки.Родитель 	 = ГруппаСправочника;
				СправочникБанки.Наименование = СокрЛП(Область.Область(Ном, 3).Текст);
				СправочникБанки.БИК			 = СокрЛП(Область.Область(Ном, 1).Текст); 
				СправочникБанки.Адрес		 = СокрЛП(Область.Область(Ном, 4).Текст); 
				СправочникБанки.Записать();
			КонецЕсли;
			
		ИначеЕсли Найти( Область.Область(Ном, 3).Текст, НСтр("ru = 'Цеснабанк'",КодЯзыка)) > 0 Тогда 	
			
			СсылкаДляПроверки = Справочники.Банки.НайтиПоНаименованию(Область.Область(Ном, 3).Текст, Истина);
			ПустаяСсылка	  = Справочники.Банки.ПустаяСсылка();
		
			Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		    	ГруппаСправочника = СписокГруппССсылками.Получить(12);
				СправочникБанки	  = Справочники.Банки.СоздатьЭлемент();
				СправочникБанки.Родитель 	 = ГруппаСправочника;
				СправочникБанки.Наименование = СокрЛП(Область.Область(Ном, 3).Текст);
				СправочникБанки.БИК			 = СокрЛП(Область.Область(Ном, 1).Текст); 
				СправочникБанки.Адрес		 = СокрЛП(Область.Область(Ном, 4).Текст); 
				СправочникБанки.Записать();
			КонецЕсли;
						
		ИначеЕсли Найти( Область.Область(Ном, 3).Текст, НСтр("ru = 'Национальный Банк РК'", КодЯзыка)) > 0 Тогда 	
			
			СсылкаДляПроверки = Справочники.Банки.НайтиПоНаименованию(Область.Область(Ном, 3).Текст, Истина);
			ПустаяСсылка	  = Справочники.Банки.ПустаяСсылка();
		
			Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		    	ГруппаСправочника = СписокГруппССсылками.Получить(13);
				СправочникБанки   = Справочники.Банки.СоздатьЭлемент();
				СправочникБанки.Родитель 	 = ГруппаСправочника;
				СправочникБанки.Наименование = СокрЛП(Область.Область(Ном, 3).Текст);
				СправочникБанки.БИК			 = СокрЛП(Область.Область(Ном, 1).Текст); 
				СправочникБанки.Адрес		 = СокрЛП(Область.Область(Ном, 4).Текст); 
				СправочникБанки.Записать();
			КонецЕсли;
						
		ИначеЕсли Найти( Область.Область(Ном, 3).Текст, НСтр("ru = 'Сбербанк России'", КодЯзыка)) > 0 Тогда
			
			СсылкаДляПроверки = Справочники.Банки.НайтиПоНаименованию(Область.Область(Ном, 3).Текст, Истина);
			ПустаяСсылка	  = Справочники.Банки.ПустаяСсылка();
			
			Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		    	ГруппаСправочника = СписокГруппССсылками.Получить(14);
				СправочникБанки   = Справочники.Банки.СоздатьЭлемент();
				СправочникБанки.Родитель	 = ГруппаСправочника;
				СправочникБанки.Наименование = СокрЛП(Область.Область(Ном, 3).Текст);
				СправочникБанки.БИК			 = СокрЛП(Область.Область(Ном, 1).Текст); 
				СправочникБанки.Адрес		 = СокрЛП(Область.Область(Ном, 4).Текст); 
				СправочникБанки.Записать();
			КонецЕсли;
			
		ИначеЕсли Найти( Область.Область(Ном, 3).Текст, НСтр("ru = 'НАО ""Государственная корпорация ""Правительство для граждан""'", КодЯзыка)) > 0 Тогда
			
			СсылкаДляПроверки = Справочники.Банки.НайтиПоНаименованию(Область.Область(Ном, 3).Текст, Истина);
			ПустаяСсылка	  = Справочники.Банки.ПустаяСсылка();
			
			Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		    	ГруппаСправочника = СписокГруппССсылками.Получить(15);
				СправочникБанки   = Справочники.Банки.СоздатьЭлемент();
				СправочникБанки.Родитель 	 = ГруппаСправочника;
				СправочникБанки.Наименование = СокрЛП(Область.Область(Ном, 3).Текст);
				СправочникБанки.БИК 		 = СокрЛП(Область.Область(Ном, 1).Текст); 
				СправочникБанки.Адрес		 = СокрЛП(Область.Область(Ном, 4).Текст); 
				СправочникБанки.Записать();
			КонецЕсли;
	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьБанковскиеСчета()
	
	// Заполнение банковских счетов
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	СписокГрупп = Новый СписокЗначений();
	СписокГрупп.Добавить(НСтр("ru = 'Физические лица'",  КодЯзыка));
	СписокГрупп.Добавить(НСтр("ru = 'Юридические лица'", КодЯзыка));
	СписокГруппССсылками = Новый Массив;
	
	Для Каждого Группа Из СписокГрупп Цикл
		
		СсылкаДляПроверки = Справочники.Контрагенты.НайтиПоНаименованию(Группа);
		ПустаяСсылка	  = Справочники.Контрагенты.ПустаяСсылка();
		
		Если СсылкаДляПроверки = ПустаяСсылка Тогда 
			СправочникГруппа = Справочники.Контрагенты.СоздатьГруппу();
			СправочникГруппа.Наименование = Группа;
			СправочникГруппа.Записать();
			СписокГруппССсылками.Добавить(СправочникГруппа.Ссылка);
		Иначе 
			СписокГруппССсылками.Добавить(СсылкаДляПроверки);
		КонецЕсли;
				
	КонецЦикла;
	
	СсылкаДляПроверки = Справочники.Контрагенты.НайтиПоНаименованию(НСтр("ru = 'ГК ПДГ'", КодЯзыка));
	ПустаяСсылка 	  = Справочники.Контрагенты.ПустаяСсылка();
	
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.Контрагенты.СоздатьЭлемент();
		СправочникЭлемент.Наименование 				   = НСтр("ru = 'ГК ПДГ'", КодЯзыка);
		СправочникЭлемент.ЮрФизЛицо 				   = Перечисления.ЮрФизЛицо.ЮрЛицо;
		СправочникЭлемент.Родитель 					   = СписокГруппССсылками[1];
		СправочникЭлемент.НаименованиеПолное 		   = НСтр("ru = 'НАО ""Государственная корпорация ""Правительство для граждан""'",КодЯзыка);
		СправочникЭлемент.КБЕ 						   = "11";
		СправочникЭлемент.ИдентификационныйКодЛичности = "160440007161";
		СправочникЭлемент.СтранаРезидентства		   = Справочники.КлассификаторСтранМира.Казахстан;
		СправочникЭлемент.Записать();
		СправочникЭлемент.ГоловнойКонтрагент = СправочникЭлемент.Ссылка;
		СправочникЭлемент.Записать();
		СсылкаГЦВП = СправочникЭлемент.Ссылка;
	Иначе 
		СсылкаГЦВП = СсылкаДляПроверки;
	КонецЕсли;
	
	
	СсылкаДляПроверки = Справочники.БанковскиеСчета.НайтиПоНаименованию(НСтр("ru = 'Для ОПВ'", КодЯзыка));
	ПустаяСсылка	  = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.БанковскиеСчета.СоздатьЭлемент();
		СправочникЭлемент.Наименование			= НСтр("ru = 'Для ОПВ'",КодЯзыка);
		СправочникЭлемент.Владелец				= СсылкаГЦВП;
		СправочникЭлемент.Банк 					= Справочники.Банки.НайтиПоНаименованию(НСтр("ru = 'НАО ""Государственная корпорация ""Правительство для граждан""'",КодЯзыка));
		СправочникЭлемент.НомерСчета			= "КZ12009NPS0413609816";
		СправочникЭлемент.ВидСчета				= "Расчетный";
		СправочникЭлемент.ВалютаДенежныхСредств = Константы.ВалютаРегламентированногоУчета.Получить();
		СправочникЭлемент.МесяцПрописью			= Истина;
		СправочникЭлемент.ТекстКорреспондента 	= НСтр("ru = 'НАО ""Государственная корпорация ""Правительство для граждан""'", КодЯзыка);
		СправочникЭлемент.Записать();
	КонецЕсли;
	
	
	СсылкаДляПроверки = Справочники.БанковскиеСчета.НайтиПоНаименованию(НСтр("ru = 'Для СО'", КодЯзыка));
	ПустаяСсылка 	  = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.БанковскиеСчета.СоздатьЭлемент();
		СправочникЭлемент.Наименование			= НСтр("ru = 'Для СО'", КодЯзыка);
		СправочникЭлемент.Владелец				= СсылкаГЦВП;
		СправочникЭлемент.Банк 					= Справочники.Банки.НайтиПоНаименованию(НСтр("ru = 'НАО ""Государственная корпорация ""Правительство для граждан""'", КодЯзыка));
		СправочникЭлемент.НомерСчета			= "КZ67009SS00368609110";
		СправочникЭлемент.ВидСчета				= "Расчетный";
		СправочникЭлемент.ВалютаДенежныхСредств = Константы.ВалютаРегламентированногоУчета.Получить();
		СправочникЭлемент.МесяцПрописью			= Истина;
		СправочникЭлемент.ТекстКорреспондента 	= НСтр("ru = 'НАО ""Государственная корпорация ""Правительство для граждан""'", КодЯзыка);
		СправочникЭлемент.Записать();
		
		//СправочникЭлемент = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		//СправочникЭлемент.Владелец 				= СсылкаГЦВП;
		//СправочникЭлемент.Организация 			= Объект.Организация.Ссылка;
		//СправочникЭлемент.Наименование			= НСтр("ru = 'Без договора'");
		//СправочникЭлемент.ВидДоговора			= Перечисления.ВидыДоговоровКонтрагентов.Прочее;
		//СправочникЭлемент.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
		//СправочникЭлемент.ВалютаВзаиморасчетов 	= Константы.ВалютаРегламентированногоУчета.Получить();
		//СправочникЭлемент.Записать();

	КонецЕсли;
	
	
	СсылкаДляПроверки = Справочники.БанковскиеСчета.НайтиПоНаименованию(НСтр("ru = 'Для ОСМС и ВОСМС'", КодЯзыка));
	ПустаяСсылка 	  = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.БанковскиеСчета.СоздатьЭлемент();
		СправочникЭлемент.Наименование			= НСтр("ru = 'Для ОСМС и ВОСМС'", КодЯзыка);
		СправочникЭлемент.Владелец				= СсылкаГЦВП;
		СправочникЭлемент.Банк 					= Справочники.Банки.НайтиПоНаименованию(НСтр("ru = 'НАО ""Государственная корпорация ""Правительство для граждан""'", КодЯзыка));
		СправочникЭлемент.НомерСчета			= "KZ92009MEDS368609103";
		СправочникЭлемент.ВидСчета				= "Расчетный";
		СправочникЭлемент.ВалютаДенежныхСредств = Константы.ВалютаРегламентированногоУчета.Получить();
		СправочникЭлемент.МесяцПрописью			= Истина;
		СправочникЭлемент.ТекстКорреспондента 	= НСтр("ru = 'НАО ""Государственная корпорация ""Правительство для граждан""'", КодЯзыка);
		СправочникЭлемент.Записать();
	КонецЕсли;
			
КонецПроцедуры

Процедура УстановитьВалюты()
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	// Справочник валюты
	Попытка
		СправочникЭлемент = Справочники.Валюты.СоздатьЭлемент();
		СправочникЭлемент.БуквенныйКод				= "USD";
		СправочникЭлемент.Код						= "840";
		СправочникЭлемент.Наименование				= "USD";
		СправочникЭлемент.НаименованиеПолное 		= НСтр("ru = 'Доллар США'",КодЯзыка);
		СправочникЭлемент.ПараметрыПрописиНаРусском = НСтр("ru = 'доллар'", КодЯзыка) + ", "
		+ НСтр("ru = 'доллара'",  КодЯзыка) + ", "
		+ НСтр("ru = 'долларов'", КодЯзыка) + ", "
		+ НСтр("ru = 'м'",        КодЯзыка) + ", "
		+ НСтр("ru = 'цент'",     КодЯзыка) + ", "
		+ НСтр("ru = 'цента'",    КодЯзыка) + ", "
		+ НСтр("ru = 'центов'",   КодЯзыка) + ", "
		+ НСтр("ru = 'м'",        КодЯзыка) + ", "
		+ "2";
		СправочникЭлемент.Записать();
		ОбщегоНазначенияБК.ПроверитьКорректностьКурсаНа01_01_1980(СправочникЭлемент.Ссылка);
	Исключение
	КонецПопытки;
	
	Попытка
		СправочникЭлемент = Справочники.Валюты.СоздатьЭлемент();
		СправочникЭлемент.БуквенныйКод				= "RUB";
		СправочникЭлемент.Код						= "643";
		СправочникЭлемент.Наименование				= "RUB";
		СправочникЭлемент.НаименованиеПолное		= НСтр("ru = 'Российский рубль'", КодЯзыка);
		СправочникЭлемент.ПараметрыПрописиНаРусском = НСтр("ru = 'рубль'", КодЯзыка) + ", "
		+ НСтр("ru = 'рубля'", КодЯзыка) + ", "
		+ НСтр("ru = 'рублей'", КодЯзыка) + ", "
		+ НСтр("ru = 'м'", КодЯзыка) + ", "
		+ НСтр("ru = 'копейка'", КодЯзыка) + ", "
		+ НСтр("ru = 'копейки'", КодЯзыка) + ", "
		+ НСтр("ru = 'копеек'", КодЯзыка) + ", "
		+ НСтр("ru = 'ж'", КодЯзыка) + ", "
		+ "2";
		СправочникЭлемент.Записать();
		ОбщегоНазначенияБК.ПроверитьКорректностьКурсаНа01_01_1980(СправочникЭлемент.Ссылка);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановитьВидыНоменклатуры()
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	// Справочник ВидыНоменклатуры 	
	Список = Новый СписокЗначений();
	Список.Добавить(НСтр("ru = 'Сырье и материалы'", КодЯзыка));
	Список.Добавить(НСтр("ru = 'Покупные полуфабрикаты и комплектующие изделия, конструкции и детали'", КодЯзыка));
	Список.Добавить(НСтр("ru = 'Топливо'", КодЯзыка)); 
	Список.Добавить(НСтр("ru = 'Тара и тарные материалы'", КодЯзыка));
	Список.Добавить(НСтр("ru = 'Запасные части'", КодЯзыка));
	Список.Добавить(НСтр("ru = 'Строительные материалы'", КодЯзыка));
	Список.Добавить(НСтр("ru = 'Прочие материалы'", КодЯзыка));
	Список.Добавить(НСтр("ru = 'Готовая продукция'", КодЯзыка));
	Список.Добавить(НСтр("ru = 'Товары приобретенные'", КодЯзыка));
	Список.Добавить(НСтр("ru = 'Прочие товары'", КодЯзыка));
	Список.Добавить(НСтр("ru = 'Прочее'", КодЯзыка));

	Попытка
		Для Каждого ТМЗ Из Список Цикл 
			ТМЗДляПроверки 	  = Лев(ТМЗ,50);
			СсылкаДляПроверки = Справочники.ВидыНоменклатуры.НайтиПоНаименованию(ТМЗДляПроверки);
			ПустаяСсылка 	  = Справочники.ВидыНоменклатуры.ПустаяСсылка();
			Если СсылкаДляПроверки = ПустаяСсылка Тогда 
				СправочникЭлемент = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
				СправочникЭлемент.Наименование = ТМЗ;
				СправочникЭлемент.ГруппаТМЗ    = ТМЗ;
				СправочникЭлемент.Записать();
			КонецЕсли;
		КонецЦикла;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановитьВидыПервичныхДокументов()
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	// справочник ВидыПервичныхДокументов
	Список = Новый СписокЗначений();
	Список.Добавить(НСтр("ru = 'Акт закупа'", КодЯзыка));
	Список.Добавить(НСтр("ru = 'Акт выполненных работ'", КодЯзыка));
	Список.Добавить(НСтр("ru = 'Квитанция'", КодЯзыка));

	Для Каждого Строка Из Список Цикл
		СсылкаДляПроверки = Справочники.ВидыПервичныхДокументов.НайтиПоНаименованию(Строка);
		ПустаяСсылка	  = Справочники.ВидыПервичныхДокументов.ПустаяСсылка();
		Если СсылкаДляПроверки = ПустаяСсылка Тогда
			СправочникЭлемент = Справочники.ВидыПервичныхДокументов.СоздатьЭлемент();
			СправочникЭлемент.Наименование = Строка;
		    СправочникЭлемент.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьГодовыеГрафикиАмортизацииОС()
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	// справочник ГодовыеГрафикиАмортизацииОС
	СсылкаДляПроверки = Справочники.ГодовыеГрафикиАмортизацииОС.НайтиПоНаименованию(НСтр("ru = 'Линейный'", КодЯзыка));
	ПустаяСсылка = Справочники.ГодовыеГрафикиАмортизацииОС.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда
		СправочникЭлемент = Справочники.ГодовыеГрафикиАмортизацииОС.СоздатьЭлемент();
		СправочникЭлемент.Наименование  = НСтр("ru = 'Линейный'", КодЯзыка);
		СправочникЭлемент.Комментарий   = НСтр("ru = 'равномерно в течение года'", КодЯзыка);
		СправочникЭлемент.Коэффициент1  = 1;
		СправочникЭлемент.Коэффициент2  = 1;
		СправочникЭлемент.Коэффициент3  = 1;
		СправочникЭлемент.Коэффициент4  = 1;
		СправочникЭлемент.Коэффициент5  = 1;
		СправочникЭлемент.Коэффициент6  = 1;
		СправочникЭлемент.Коэффициент7  = 1;
		СправочникЭлемент.Коэффициент8  = 1;
		СправочникЭлемент.Коэффициент9  = 1;
		СправочникЭлемент.Коэффициент10 = 1;
		СправочникЭлемент.Коэффициент11 = 1;
		СправочникЭлемент.Коэффициент12 = 1;
	    СправочникЭлемент.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДокументыУдостоверяющиеЛичность()
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	// Справочник ДокументыУдостоверяющиеЛичность
	Список = Новый СписокЗначений();
	Список.Добавить("000004",НСтр("ru = 'Вид на жительство'", КодЯзыка));
	Список.Добавить("000002",НСтр("ru = 'Удостоверение личности'", КодЯзыка));
	
	Для Каждого Строка Из Список Цикл 
		СсылкаДляПроверки = Справочники.ДокументыУдостоверяющиеЛичность.НайтиПоНаименованию(Строка.Представление);
		ПустаяСсылка 	  = Справочники.ДокументыУдостоверяющиеЛичность.ПустаяСсылка();
		Если СсылкаДляПроверки = ПустаяСсылка Тогда 
			СправочникЭлемент = Справочники.ДокументыУдостоверяющиеЛичность.СоздатьЭлемент();
			СправочникЭлемент.Наименование = Строка.Представление;
			СправочникЭлемент.Код		   = Строка.Значение;
			СправочникЭлемент.Записать();
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура УстановитьДолжностиОрганизаций()
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	// Справочник ДолжностиОрганизаций
	Список = Новый СписокЗначений();
	Список.Добавить(НСтр("ru = 'Бухгалтер'", КодЯзыка));
	Список.Добавить(НСтр("ru = 'Кассир'",    КодЯзыка));
	Список.Добавить(НСтр("ru = 'Кладовщик'", КодЯзыка));
	
	Для Каждого Строка Из Список Цикл 
		СсылкаДляПроверки = Справочники.ДолжностиОрганизаций.НайтиПоНаименованию(Строка);
		ПустаяСсылка	  = Справочники.ДолжностиОрганизаций.ПустаяСсылка();
		Если СсылкаДляПроверки = ПустаяСсылка Тогда 
			СправочникЭлемент = Справочники.ДолжностиОрганизаций.СоздатьЭлемент();
			СправочникЭлемент.Наименование = Строка;
			СправочникЭлемент.Записать();
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура УстановитьКлассификаторЕдиницИзмерения()
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	// Справочник КлассификаторЕдиницИзмерения
	Список = Новый СписокЗначений();
	Список.Добавить("166", НСтр("ru = 'кг_Килограмм'", КодЯзыка));
	Список.Добавить("008", НСтр("ru = 'км_Километр'" , КодЯзыка));
	Список.Добавить("112", НСтр("ru = 'л_Литр'",       КодЯзыка));
	Список.Добавить("006", НСтр("ru = 'м_Метр'",       КодЯзыка));
	Список.Добавить("055", НСтр("ru = 'м2_Квадратный метр'", КодЯзыка));
	Список.Добавить("113", НСтр("ru = 'м3_Кубический метр'", КодЯзыка));
	Список.Добавить("168", НСтр("ru = 'т_Тонна'", КодЯзыка));
	Список.Добавить("356", НСтр("ru = 'ч_Час'",КодЯзыка));
	Список.Добавить("796", НСтр("ru = 'шт_Штука'", КодЯзыка));
	
	Для Каждого Строка Из Список Цикл 
		СсылкаДляПроверки = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(Сред(Строка.Представление, 1, Найти(Строка.Представление, "_") - 1));
		ПустаяСсылка	  = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
		Если СсылкаДляПроверки = ПустаяСсылка Тогда
			СправочникЭлемент = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
			СправочникЭлемент.Код 				 = Строка.Значение;
			СправочникЭлемент.Наименование 		 = Сред(Строка.Представление, 1, Найти(Строка.Представление, "_") - 1);
			СправочникЭлемент.НаименованиеПолное = Сред(Строка.Представление, Найти(Строка.Представление, "_") + 1,СтрДлина(Строка.Представление)); 
			СправочникЭлемент.Записать();
		КонецЕсли;
	КонецЦикла;
	
	ЭСФСерверПереопределяемый.ЗаполнитьКодыЭСФЕдиницИзмерения();
		
КонецПроцедуры

Процедура УстановитьКлассификаторСтранМира()
	
	// Справочник КлассификаторСтранМира
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.КлассификаторСтранМира.ПФ_MXL_КлассификаторСтранМира");
	Макет.КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
    Область = Макет.ПолучитьОбласть("ОбластьРасшифровки");
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	//Все классификаторы заполняем только на 1-ом языке
	Макет.КодЯзыка = КодЯзыка;	

	Для Ном = 1 По Область.ВысотаТаблицы Цикл 
		Код = СокрЛП(Область.Область(Ном, 1).Текст);
		Если Код = "112" Или Код = "417" Или Код = "156" Или Код = "498" Или Код = "643" Или Код = "762" Или Код = "795" Или Код = "860" Или Код = "804" Тогда 
			СсылкаДляПроверки = Справочники.КлассификаторСтранМира.НайтиПоКоду(СокрЛП(Область.Область(Ном, 1).Текст));
			ПустаяСсылка = Справочники.КлассификаторСтранМира.ПустаяСсылка();
			Если СсылкаДляПроверки = ПустаяСсылка Тогда 
            	СправочникЭлемент = Справочники.КлассификаторСтранМира.СоздатьЭлемент();
				СправочникЭлемент.Наименование		 = СокрЛП(Область.Область(Ном, 2).Текст);
				СправочникЭлемент.Код				 = СокрЛП(Область.Область(Ном, 1).Текст); 
				СправочникЭлемент.КодАльфа2			 = СокрЛП(Область.Область(Ном, 3).Текст); 
				СправочникЭлемент.КодАльфа3			 = СокрЛП(Область.Область(Ном, 4).Текст); 
				СправочникЭлемент.НаименованиеПолное = СокрЛП(Область.Область(Ном, 5).Текст);  
				СправочникЭлемент.Записать();
			КонецЕсли;
		КонецЕсли;                   
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьНалогиСборыОтчисления()
	
	//  Справочник НалогиСборыОтчисления                                                                      
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	СсылкаДляПроверки = Справочники.НалогиСборыОтчисления.НайтиПоНаименованию(НСтр("ru = 'Земельный налог'", КодЯзыка));
	ПустаяСсылка = Справочники.НалогиСборыОтчисления.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.НалогиСборыОтчисления.СоздатьЭлемент();
		СправочникЭлемент.Наименование					   = НСтр("ru = 'Земельный налог'", КодЯзыка);
		СправочникЭлемент.СчетУчетаРасчетовСКонтрагентомБУ = ПланыСчетов.Типовой.ЗемельныйНалог;
		СправочникЭлемент.СчетУчетаРасчетовСКонтрагентомНУ = ПланыСчетов.Налоговый.ПрочиеНалоги;
		СправочникЭлемент.КодБК							   = "104308";
		СправочникЭлемент.КодНазначенияПлатежа			   = "911";
		СправочникЭлемент.НазначениеПлатежа	  			   = НСтр("ru = 'Земельный налог за'", КодЯзыка);
		СправочникЭлемент.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНоменклатура()
	
	// Справочник номенклатура 
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	Список = Новый СписокЗначений();
	Список.Добавить(НСтр("ru = 'Товары'", КодЯзыка));
	Список.Добавить(НСтр("ru = 'Материалы'", КодЯзыка));
	Список.Добавить(НСтр("ru = 'Готовая продукция'", КодЯзыка));
	Список.Добавить(НСтр("ru = 'Услуги'", КодЯзыка));
	
	Для Каждого Строка Из Список Цикл 
		СсылкаДляПроверки = Справочники.Номенклатура.НайтиПоНаименованию(Строка);
		ПустаяСсылка = Справочники.Номенклатура.ПустаяСсылка();
		Если СсылкаДляПроверки = ПустаяСсылка Тогда 
			СправочникГруппа = Справочники.Номенклатура.СоздатьГруппу();
			СправочникГруппа.Наименование = Строка;
			СправочникГруппа.Записать();
		КонецЕсли;
	КонецЦикла;
	
	Список = Новый СписокЗначений();
	Список.Добавить(НСтр("ru = 'Собственные услуги'", КодЯзыка));
	Список.Добавить(НСтр("ru = 'Услуги сторонних организаций'", КодЯзыка));
	
	Для Каждого Строка Из Список Цикл 
		СсылкаДляПроверки = Справочники.Номенклатура.НайтиПоНаименованию(НСтр("ru = 'Услуги'", КодЯзыка));
		ПустаяСсылка	  = Справочники.Номенклатура.ПустаяСсылка();
		Если СсылкаДляПроверки <> ПустаяСсылка Тогда 
			СсылкаДляПроверкиГруппы = Справочники.Номенклатура.НайтиПоНаименованию(Строка);
			Если СсылкаДляПроверкиГруппы = ПустаяСсылка Тогда
				СправочникГруппа = Справочники.Номенклатура.СоздатьГруппу();
			    СправочникГруппа.Наименование = Строка;
				СправочникГруппа.Родитель 	  = СсылкаДляПроверки;
				СправочникГруппа.Записать();
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПараметрыВыработкиОС()
	
	// Справочник ПараметрыВыработкиОС
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	Список = Новый СписокЗначений();
	Список.Добавить(НСтр("ru = 'километраж'", КодЯзыка) ,НСтр("ru = 'км'", КодЯзыка));
    Список.Добавить(НСтр("ru = 'число копий'", КодЯзыка),НСтр("ru = 'шт'", КодЯзыка));
	
	Для Каждого Строка Из Список Цикл 
		СсылкаДляПроверки = Справочники.ПараметрыВыработкиОС.НайтиПоНаименованию(Строка.Значение);
		ПустаяСсылка	  = Справочники.ПараметрыВыработкиОС.ПустаяСсылка();
		Если СсылкаДляПроверки = ПустаяСсылка Тогда 
			СправочникЭлемент = Справочники.ПараметрыВыработкиОС.СоздатьЭлемент();
			СправочникЭлемент.Наименование	   = Строка.Значение;
			СправочникЭлемент.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(Строка.Представление);
			СправочникЭлемент.Записать();
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура УстановитьПричиныСписанияОС()
	
	// Справочник ПричиныСписанияОС 
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	Список = Новый СписокЗначений();
	Список.Добавить(НСтр("ru = 'физический износ'", КодЯзыка));
    Список.Добавить(НСтр("ru = 'моральное устаревание'", КодЯзыка));
	
	Для Каждого Строка Из Список Цикл 
		СсылкаДляПроверки = Справочники.ПричиныСписанияОС.НайтиПоНаименованию(Строка);
		ПустаяСсылка 	  = Справочники.ПричиныСписанияОС.ПустаяСсылка();
		Если СсылкаДляПроверки = ПустаяСсылка Тогда 
			СправочникЭлемент = Справочники.ПричиныСписанияОС.СоздатьЭлемент();
			СправочникЭлемент.Наименование = Строка;
			СправочникЭлемент.Записать();
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура УстановитьРезервы()
	
	// Справочник Резервы
	БазовыеРасчеты = Новый Массив();
	БазовыеРасчеты.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладОтОбратного);
	БазовыеРасчеты.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладОтОбратногоПоДням);
	БазовыеРасчеты.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладОтОбратногоПоЧасам);
	БазовыеРасчеты.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладПоДням);
	БазовыеРасчеты.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладПоЧасам);
	БазовыеРасчеты.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ТарифЧасовой);
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Наименование 	  = НСтр("ru = 'Резерв отпусков'", КодЯзыка);
	СсылкаДляПроверки = Справочники.Резервы.НайтиПоНаименованию(Наименование);
	ПустаяСсылка	  = Справочники.Резервы.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.Резервы.СоздатьЭлемент();
		СправочникЭлемент.Наименование = Наименование;
		СправочникЭлемент.ВидРезерва   = Перечисления.ВидыРезервов.ПоВознаграждениямРаботникам; 
		Для Каждого Строка Из БазовыеРасчеты Цикл 
			
			СтрокаТЧ = СправочникЭлемент.БазовыеВидыРасчета.Добавить();
			СтрокаТЧ.ВидРасчета = Строка;
			
		КонецЦикла;
		СправочникЭлемент.Записать();
	КонецЕсли;
		
КонецПроцедуры

Процедура УстановитьРолиКонтактныхЛиц()
	
	// Справочник РолиКонтактныхЛиц   
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	Список = Новый СписокЗначений();
	Список.Добавить(НСтр("ru = 'Бухгалтер'", КодЯзыка));
    Список.Добавить(НСтр("ru = 'Директор'",  КодЯзыка));
	Список.Добавить(НСтр("ru = 'Менеджер'",  КодЯзыка));
	
	Для Каждого Строка Из Список Цикл 
		СсылкаДляПроверки = Справочники.РолиКонтактныхЛиц.НайтиПоНаименованию(Строка);
		ПустаяСсылка	  = Справочники.РолиКонтактныхЛиц.ПустаяСсылка();
		Если СсылкаДляПроверки = ПустаяСсылка Тогда 
			СправочникЭлемент = Справочники.РолиКонтактныхЛиц.СоздатьЭлемент();
			СправочникЭлемент.Наименование = Строка;
			СправочникЭлемент.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСобытияОС() 
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка(); 
	
	// Справочник СобытияОС
	Список = Новый СписокЗначений();
	Список.Добавить(НСтр("ru = 'Поступление'", КодЯзыка));
    Список.Добавить(НСтр("ru = 'Принятие к учету'",КодЯзыка));
	Список.Добавить(НСтр("ru = 'Начисление амортизации'", КодЯзыка));
	Список.Добавить(НСтр("ru = 'Внутреннее перемещение'", КодЯзыка));
    Список.Добавить(НСтр("ru = 'Текущий ремонт'",КодЯзыка));
	Список.Добавить(НСтр("ru = 'Средний ремонт'", КодЯзыка));
	Список.Добавить(НСтр("ru = 'Капитальный ремонт'", КодЯзыка));
    Список.Добавить(НСтр("ru = 'Переоценка'",КодЯзыка));
	Список.Добавить(НСтр("ru = 'Реконструкция'", КодЯзыка));
	Список.Добавить(НСтр("ru = 'Достройка'", КодЯзыка));
	Список.Добавить(НСтр("ru = 'Дооборудование'", КодЯзыка));
    Список.Добавить(НСтр("ru = 'Частичная ликвидация'",КодЯзыка));
	Список.Добавить(НСтр("ru = 'Модернизация'", КодЯзыка));
   	Список.Добавить(НСтр("ru = 'Передача'",КодЯзыка));
	Список.Добавить(НСтр("ru = 'Списание'", КодЯзыка));
	Список.Добавить(НСтр("ru = 'Прочее'", КодЯзыка));
	
	Для Каждого Строка Из Список Цикл 
		СсылкаДляПроверки = Справочники.СобытияОС.НайтиПоНаименованию(Строка);
		ПустаяСсылка 	  = Справочники.СобытияОС.ПустаяСсылка();
		Если СсылкаДляПроверки = ПустаяСсылка Тогда 
			СправочникЭлемент = Справочники.СобытияОС.СоздатьЭлемент();
			СправочникЭлемент.Наименование = Строка;
			СправочникЭлемент.ВидСобытияОС = Строка;
			СправочникЭлемент.Записать();
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура УстановитьТипыЦенНоменклатуры()
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	// справочники Установка типов цен
	СсылкаСправочника = Справочники.ТипыЦенНоменклатуры.НайтиПоНаименованию(НСтр("ru = 'Приходная'", КодЯзыка));
	ПустаяСсылка 	  = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
	Если СсылкаСправочника = ПустаяСсылка Тогда 
		ТипЦены = Справочники.ТипыЦенНоменклатуры.СоздатьЭлемент();
		ТипЦены.Наименование 			 = НСтр("ru = 'Приходная'", КодЯзыка);
		ТипЦены.ВалютаЦены				 = Константы.ВалютаРегламентированногоУчета.Получить();
		ТипЦены.ЦенаВключаетАкциз 		 = Ложь;
		ТипЦены.ЦенаВключаетНДС			 = Ложь;
		ТипЦены.ОкруглятьВБольшуюСторону = Истина;
		ТипЦены.ПорядокОкругления 		 = Перечисления.ПорядкиОкругления.Окр0_01;
		ТипЦены.Записать();
	КонецЕсли;

	СсылкаСправочника = Справочники.ТипыЦенНоменклатуры.НайтиПоНаименованию(НСтр("ru = 'Оптовая'", КодЯзыка));
	ПустаяСсылка	  = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
	Если СсылкаСправочника = ПустаяСсылка Тогда 
		ТипЦены = Справочники.ТипыЦенНоменклатуры.СоздатьЭлемент();
		ТипЦены.Наименование 			 = НСтр("ru = 'Оптовая'",КодЯзыка);
		ТипЦены.ВалютаЦены 				 = Константы.ВалютаРегламентированногоУчета.Получить();
		ТипЦены.ЦенаВключаетАкциз		 = Ложь;
		ТипЦены.ЦенаВключаетНДС 		 = Ложь;
		ТипЦены.ОкруглятьВБольшуюСторону = Истина;
		ТипЦены.ПорядокОкругления		 = Перечисления.ПорядкиОкругления.Окр1;
		ТипЦены.Записать();
	КонецЕсли;

    СсылкаСправочника = Справочники.ТипыЦенНоменклатуры.НайтиПоНаименованию(НСтр("ru = 'Розничная'", КодЯзыка));
	ПустаяСсылка	  = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
	Если СсылкаСправочника = ПустаяСсылка Тогда 
		ТипЦены = Справочники.ТипыЦенНоменклатуры.СоздатьЭлемент();
		ТипЦены.Наименование 			 = НСтр("ru = 'Розничная'", КодЯзыка);
		ТипЦены.ВалютаЦены				 = Константы.ВалютаРегламентированногоУчета.Получить();
		ТипЦены.ЦенаВключаетАкциз		 = Ложь;
		ТипЦены.ЦенаВключаетНДС			 = Ложь;
		ТипЦены.ОкруглятьВБольшуюСторону = Истина;
		ТипЦены.ПорядокОкругления		 = Перечисления.ПорядкиОкругления.Окр1;
		ТипЦены.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьФизическиеЛица()
	
	// Справочники ФизическиеЛица    
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	Список = Новый СписокЗначений();
	Список.Добавить(НСтр("ru = 'Сотрудники'", КодЯзыка));
    Список.Добавить(НСтр("ru = 'Сторонние физ. лица'",КодЯзыка));
	Список.Добавить(НСтр("ru = 'Уволенные сотрудники'", КодЯзыка));
	
	Для Каждого Строка Из Список Цикл 
		СсылкаДляПроверки = Справочники.ФизическиеЛица.НайтиПоНаименованию(Строка);
		ПустаяСсылка 	  = Справочники.ФизическиеЛица.ПустаяСсылка();
		Если СсылкаДляПроверки = ПустаяСсылка Тогда
			СправочникГруппа = Справочники.ФизическиеЛица.СоздатьГруппу();
			СправочникГруппа.Наименование = Строка;
			СправочникГруппа.Записать();
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура УстановитьФондыВыплатОрганизаций()
	
	// Справочники  ФондыВыплатОрганизаций
	Наименование	  = НСтр("ru = 'Фонд заработной платы'", ОбщегоНазначения.КодОсновногоЯзыка());
	СсылкаДляПроверки = Справочники.ФондыВыплатОрганизаций.НайтиПоНаименованию(Наименование);
	ПустаяСсылка	  = Справочники.ФондыВыплатОрганизаций.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда
		СправочникГруппа = Справочники.ФондыВыплатОрганизаций.СоздатьЭлемент();
		СправочникГруппа.Наименование		 = Наименование;
		СправочникГруппа.ФондЗаработнойПлаты = Истина;
		СправочникГруппа.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСчетаУчетаДенежныхСредств()
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	Попытка
		СчетКассы = РегистрыСведений.СчетаУчетаДенежныхСредств.СоздатьМенеджерЗаписи();
		СчетКассы.Период = ТекущаяДата();
		СчетКассы.ОбъектУчета = Справочники.Кассы.НайтиПоНаименованию(НСтр("ru = 'Основная касса'", КодЯзыка));
		СчетКассы.СчетУчетаБУ = ПланыСчетов.Типовой.ДенежныеСредстваВКассе;
		СчетКассы.Записать();
	Исключение
		ТекстСообщения = НСтр("ru='Не создан счет учета денежных средств.'", КодЯзыка);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
		
КонецПроцедуры

Процедура УстановитьСтавкиНДС()
	
	// Справочник ставки ндс
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	СсылкаДляПроверки = Справочники.СтавкиНДС.НайтиПоНаименованию("0%");
	ПустаяСсылка	  = Справочники.СтавкиНДС.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда
    	НовыйЭлемент = Справочники.СтавкиНДС.СоздатьЭлемент();
		НовыйЭлемент.ДляОсвобожденногоОборота = Ложь;
		НовыйЭлемент.МестоРеализацииНеРК      = Ложь;
		НовыйЭлемент.Ставка					  = 0;
		НовыйЭлемент.Наименование			  = "0%";
		НовыйЭлемент.Записать();
	КонецЕсли;
	
	СсылкаДляПроверки = Справочники.СтавкиНДС.НайтиПоНаименованию("12%");
	ПустаяСсылка 	  = Справочники.СтавкиНДС.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда
    	НовыйЭлемент = Справочники.СтавкиНДС.СоздатьЭлемент();
		НовыйЭлемент.ДляОсвобожденногоОборота = Ложь;
		НовыйЭлемент.МестоРеализацииНеРК      = Ложь;
		НовыйЭлемент.Ставка					  = 12;
		НовыйЭлемент.Наименование			  = "12%";
		НовыйЭлемент.Записать();
	КонецЕсли;
	
	СсылкаДляПроверки = Справочники.СтавкиНДС.НайтиПоНаименованию(НСтр("ru = 'без НДС'", КодЯзыка));
	ПустаяСсылка	  = Справочники.СтавкиНДС.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда
    	НовыйЭлемент = Справочники.СтавкиНДС.СоздатьЭлемент();
		НовыйЭлемент.ДляОсвобожденногоОборота = Истина;
		НовыйЭлемент.МестоРеализацииНеРК      = Ложь;
		НовыйЭлемент.Ставка					  = 0;
		НовыйЭлемент.Наименование 			  = НСтр("ru = 'без НДС'", КодЯзыка);
		НовыйЭлемент.Записать();
	КонецЕсли;
	
	СсылкаДляПроверки = Справочники.СтавкиНДС.НайтиПоНаименованию(НСтр("ru = 'без НДС - не РК'", КодЯзыка));
	ПустаяСсылка	  = Справочники.СтавкиНДС.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда
    	НовыйЭлемент = Справочники.СтавкиНДС.СоздатьЭлемент();
		НовыйЭлемент.ДляОсвобожденногоОборота = Ложь;
		НовыйЭлемент.МестоРеализацииНеРК      = Истина;
		НовыйЭлемент.Ставка					  = 0;
		НовыйЭлемент.Наименование 			  = НСтр("ru = 'без НДС - не РК'", КодЯзыка);
		НовыйЭлемент.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСклады()
	
	// Справочник склады 
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	СсылкаДляПроверки = Справочники.Склады.НайтиПоНаименованию(НСтр("ru = 'Основной склад'", КодЯзыка));
	ПустаяСсылка	  = Справочники.Склады.ПустаяСсылка();   	
	Если СсылкаДляПроверки = ПустаяСсылка Тогда
    	НовыйЭлемент = Справочники.Склады.СоздатьЭлемент();
		НовыйЭлемент.Наименование = НСтр("ru = 'Основной склад'", КодЯзыка);
		НовыйЭлемент.Комментарий  = НСтр("ru = 'Основной склад организации'", КодЯзыка);
		НовыйЭлемент.Записать();
	КонецЕсли;
			
КонецПроцедуры

Процедура УстановитьОсновныеНачисленияОрганизаций()
	
	Попытка
		ЗаписьРегистра = РегистрыСведений.КодыСтрокДекларацииПоСН.СоздатьМенеджерЗаписи();
		СсылкаНаРасчет = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоКоду("000001");
		ЗаписьРегистра.Период	  = ТекущаяДата();
		ЗаписьРегистра.ВидРасчета = СсылкаНаРасчет;
		ЗаписьРегистра.КодСтроки  = "200.02.001";
		ЗаписьРегистра.Записать();
	Исключение
	КонецПопытки;
	
	Попытка
		ЗаписьРегистра = РегистрыСведений.КодыСтрокДекларацииПоСН.СоздатьМенеджерЗаписи();
		СсылкаНаРасчет = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоКоду("000002");
		ЗаписьРегистра.Период     = ТекущаяДата();
		ЗаписьРегистра.ВидРасчета = СсылкаНаРасчет;
		ЗаписьРегистра.КодСтроки  = "200.02.015";
		ЗаписьРегистра.Записать();
	Исключение
	КонецПопытки;
	
	Попытка
		ЗаписьРегистра = РегистрыСведений.КодыСтрокДекларацииПоСН.СоздатьМенеджерЗаписи();
		СсылкаНаРасчет = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоКоду("000003");
		ЗаписьРегистра.Период 	  = ТекущаяДата();
		ЗаписьРегистра.ВидРасчета = СсылкаНаРасчет;
		ЗаписьРегистра.КодСтроки  = "200.02.015";
		ЗаписьРегистра.Записать();
	Исключение
	КонецПопытки;
	
	Попытка
		ЗаписьРегистра = РегистрыСведений.КодыСтрокДекларацииПоСН.СоздатьМенеджерЗаписи();
		СсылкаНаРасчет = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоКоду("000004");
		ЗаписьРегистра.Период 	  = ТекущаяДата();
		ЗаписьРегистра.ВидРасчета = СсылкаНаРасчет;
		ЗаписьРегистра.КодСтроки  = "200.02.035";
		ЗаписьРегистра.Записать();
	Исключение
	КонецПопытки;
	
	Попытка
		ЗаписьРегистра = РегистрыСведений.КодыСтрокДекларацииПоСН.СоздатьМенеджерЗаписи();
		СсылкаНаРасчет = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоКоду("000005");
		ЗаписьРегистра.Период 	  = ТекущаяДата();
		ЗаписьРегистра.ВидРасчета = СсылкаНаРасчет;
		ЗаписьРегистра.КодСтроки  = "200.02.001";
		ЗаписьРегистра.Записать();
	Исключение
	КонецПопытки;
	
	Попытка
		ЗаписьРегистра = РегистрыСведений.КодыСтрокДекларацииПоСН.СоздатьМенеджерЗаписи();
		СсылкаНаРасчет = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоКоду("000006");
		ЗаписьРегистра.Период	  = ТекущаяДата();
		ЗаписьРегистра.ВидРасчета = СсылкаНаРасчет;
		ЗаписьРегистра.КодСтроки  = "200.02.013";
		ЗаписьРегистра.Записать();
	Исключение
	КонецПопытки;
	
	Попытка
		ЗаписьРегистра = РегистрыСведений.КодыСтрокДекларацииПоСН.СоздатьМенеджерЗаписи();
		СсылкаНаРасчет = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоКоду("000007");
		ЗаписьРегистра.Период	  = ТекущаяДата();
		ЗаписьРегистра.ВидРасчета = СсылкаНаРасчет;
		ЗаписьРегистра.КодСтроки  = "200.02.008";
		ЗаписьРегистра.Записать();
	Исключение
	КонецПопытки;
	
	Попытка
		ЗаписьРегистра = РегистрыСведений.КодыСтрокДекларацииПоСН.СоздатьМенеджерЗаписи();
		СсылкаНаРасчет = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоКоду("000008");
		ЗаписьРегистра.Период	  = ТекущаяДата();
		ЗаписьРегистра.ВидРасчета = СсылкаНаРасчет;
		ЗаписьРегистра.КодСтроки  = "200.02.001";
		ЗаписьРегистра.Записать();
	Исключение
	КонецПопытки;
	
	Попытка
		ЗаписьРегистра = РегистрыСведений.КодыСтрокДекларацииПоСН.СоздатьМенеджерЗаписи();
		СсылкаНаРасчет = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоКоду("000009");
		ЗаписьРегистра.Период	  = ТекущаяДата();
		ЗаписьРегистра.ВидРасчета = СсылкаНаРасчет;
		ЗаписьРегистра.КодСтроки  = "200.02.001";
		ЗаписьРегистра.Записать();
	Исключение
	КонецПопытки;
	
	Попытка
		ЗаписьРегистра = РегистрыСведений.КодыСтрокДекларацииПоСН.СоздатьМенеджерЗаписи();
		СсылкаНаРасчет = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоКоду("000010");
		ЗаписьРегистра.Период	  = ТекущаяДата();
		ЗаписьРегистра.ВидРасчета = СсылкаНаРасчет;
		ЗаписьРегистра.КодСтроки  = "200.02.001";
		ЗаписьРегистра.Записать();
	Исключение
	КонецПопытки;
	
	Попытка
		ЗаписьРегистра = РегистрыСведений.КодыСтрокДекларацииПоСН.СоздатьМенеджерЗаписи();
		СсылкаНаРасчет = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоКоду("000011");
		ЗаписьРегистра.Период 	  = ТекущаяДата();
		ЗаписьРегистра.ВидРасчета = СсылкаНаРасчет;
		ЗаписьРегистра.КодСтроки  = "200.02.001";
		ЗаписьРегистра.Записать();
	Исключение
	КонецПопытки;
	
	Попытка
		ЗаписьРегистра = РегистрыСведений.КодыСтрокДекларацииПоСН.СоздатьМенеджерЗаписи();
		СсылкаНаРасчет = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоКоду("000012");
		ЗаписьРегистра.Период	  = ТекущаяДата();
		ЗаписьРегистра.ВидРасчета = СсылкаНаРасчет;
		ЗаписьРегистра.КодСтроки  = "200.02.008";
		ЗаписьРегистра.Записать();
	Исключение
	КонецПопытки;
	
	Попытка
		ЗаписьРегистра = РегистрыСведений.КодыСтрокДекларацииПоСН.СоздатьМенеджерЗаписи();
		СсылкаНаРасчет = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоКоду("000013");
		ЗаписьРегистра.Период	  = ТекущаяДата();
		ЗаписьРегистра.ВидРасчета = СсылкаНаРасчет;
		ЗаписьРегистра.КодСтроки  = "200.02.008";
		ЗаписьРегистра.Записать();
	Исключение
	КонецПопытки;
		
КонецПроцедуры

Процедура УстановитьСтатьиДвиженияДенежныхСредств()
	
	СписокГрупп = Новый СписокЗначений();    
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	СписокГрупп.Добавить(НСтр("ru = 'Инвестиционная деятельность'", КодЯзыка));
	СписокГрупп.Добавить(НСтр("ru = 'Операционная деятельность'", КодЯзыка));
	СписокГрупп.Добавить(НСтр("ru = 'Финансовая деятельность'", КодЯзыка));
	СписокГруппССсылками = Новый Массив;
	
	Для Каждого Группа Из СписокГрупп Цикл
		
		СсылкаДляПроверки = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(Группа);
		ПустаяСсылка	  = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
		Если СсылкаДляПроверки = ПустаяСсылка Тогда 
			СправочникГруппа = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьГруппу();
			СправочникГруппа.Наименование = Группа;
			СправочникГруппа.Записать();
			СписокГруппССсылками.Добавить(СправочникГруппа.Ссылка);
		Иначе 
			СписокГруппССсылками.Добавить(СсылкаДляПроверки);
		КонецЕсли;
				
	КонецЦикла;

	СсылкаДляПроверки = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Выплаты по опционам и свопам'", КодЯзыка));
	ПустаяСсылка	  = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		СправочникЭлемент.Наименование			  = НСтр("ru = 'Выплаты по опционам и свопам'", КодЯзыка);
		СправочникЭлемент.Родитель				  = СписокГруппССсылками.Получить(0);
		СправочникЭлемент.РазрезДеятельности	  = Перечисления.РазрезыДеятельности.Инвестиционная;
		СправочникЭлемент.ВидДвижения			  = Перечисления.ВидыДвиженийДенежныхСредств.Выбытие;
		СправочникЭлемент.ДвижениеДенежныхСредств = Справочники.ДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Фьючерсные и форвардные контракты, опционы и свопы'", КодЯзыка));
		СправочникЭлемент.Записать();
	КонецЕсли;
	
	СсылкаДляПроверки = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Погашение предоставленных займов'", КодЯзыка));
	ПустаяСсылка	  = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		СправочникЭлемент.Наименование			  = НСтр("ru = 'Погашение предоставленных займов'", КодЯзыка);
		СправочникЭлемент.Родитель				  = СписокГруппССсылками.Получить(0);
		СправочникЭлемент.РазрезДеятельности	  = Перечисления.РазрезыДеятельности.Инвестиционная;
		СправочникЭлемент.ВидДвижения			  = Перечисления.ВидыДвиженийДенежныхСредств.Поступление;
		СправочникЭлемент.ДвижениеДенежныхСредств = Справочники.ДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Погашение займов, предоставленных другим организациям'", КодЯзыка));
		СправочникЭлемент.Записать();
	КонецЕсли;
	
	СсылкаДляПроверки = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Поступление по фьючерсным  контрактам'", КодЯзыка));
	ПустаяСсылка	  = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		СправочникЭлемент.Наименование			  = НСтр("ru = 'Поступление по фьючерсным  контрактам'", КодЯзыка);
		СправочникЭлемент.Родитель				  = СписокГруппССсылками.Получить(0);
		СправочникЭлемент.РазрезДеятельности	  = Перечисления.РазрезыДеятельности.Инвестиционная;
		СправочникЭлемент.ВидДвижения			  = Перечисления.ВидыДвиженийДенежныхСредств.Поступление;
		СправочникЭлемент.ДвижениеДенежныхСредств = Справочники.ДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Фьючерсные и форвардные контракты, опционы и свопы'", КодЯзыка));
		СправочникЭлемент.Записать();
	КонецЕсли;
	
	СсылкаДляПроверки = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Предоставление займов'", КодЯзыка));
	ПустаяСсылка	  = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		СправочникЭлемент.Наименование			  = НСтр("ru = 'Предоставление займов'",КодЯзыка);
		СправочникЭлемент.Родитель				  = СписокГруппССсылками.Получить(0);
		СправочникЭлемент.РазрезДеятельности	  = Перечисления.РазрезыДеятельности.Инвестиционная;
		СправочникЭлемент.ВидДвижения			  = Перечисления.ВидыДвиженийДенежныхСредств.Выбытие;
		СправочникЭлемент.ДвижениеДенежныхСредств = Справочники.ДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Предоставление займов другим организациям'", КодЯзыка));
		СправочникЭлемент.Записать();
	КонецЕсли;
	
	СсылкаДляПроверки = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Приобретение других долгосрочных активов'", КодЯзыка));
	ПустаяСсылка	  = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		СправочникЭлемент.Наименование			  = НСтр("ru = 'Приобретение других долгосрочных активов'", КодЯзыка);
		СправочникЭлемент.Родитель				  = СписокГруппССсылками.Получить(0);
		СправочникЭлемент.РазрезДеятельности	  = Перечисления.РазрезыДеятельности.Инвестиционная;
		СправочникЭлемент.ВидДвижения			  = Перечисления.ВидыДвиженийДенежныхСредств.Выбытие;
		СправочникЭлемент.ДвижениеДенежныхСредств = Справочники.ДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Приобретение других долгосрочных активов'", КодЯзыка));
		СправочникЭлемент.Записать();
	КонецЕсли;
	
	СсылкаДляПроверки = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Приобретение нематериальных активов'", КодЯзыка));
	ПустаяСсылка 	  = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		СправочникЭлемент.Наименование			  = НСтр("ru = 'Приобретение нематериальных активов'", КодЯзыка);
		СправочникЭлемент.Родитель				  = СписокГруппССсылками.Получить(0);
		СправочникЭлемент.РазрезДеятельности	  = Перечисления.РазрезыДеятельности.Инвестиционная;
		СправочникЭлемент.ВидДвижения			  = Перечисления.ВидыДвиженийДенежныхСредств.Выбытие;
		СправочникЭлемент.ДвижениеДенежныхСредств = Справочники.ДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Приобретение нематериальных активов'", КодЯзыка));
		СправочникЭлемент.Записать();
	КонецЕсли;
	
	СсылкаДляПроверки = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Приобретение основных средств'", КодЯзыка));
	ПустаяСсылка 	  = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		СправочникЭлемент.Наименование			  = НСтр("ru = 'Приобретение основных средств'",КодЯзыка);
		СправочникЭлемент.Родитель				  = СписокГруппССсылками.Получить(0);
		СправочникЭлемент.РазрезДеятельности 	  = Перечисления.РазрезыДеятельности.Инвестиционная;
		СправочникЭлемент.ВидДвижения			  = Перечисления.ВидыДвиженийДенежныхСредств.Выбытие;
		СправочникЭлемент.ДвижениеДенежныхСредств = Справочники.ДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Приобретение основных средств'",КодЯзыка));
		СправочникЭлемент.Записать();
	КонецЕсли;
	
	СсылкаДляПроверки = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Приобретение финансовых активов'", КодЯзыка));
	ПустаяСсылка	  = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		СправочникЭлемент.Наименование			  = НСтр("ru = 'Приобретение финансовых активов'", КодЯзыка);
		СправочникЭлемент.Родитель 				  = СписокГруппССсылками.Получить(0);
		СправочникЭлемент.РазрезДеятельности 	  = Перечисления.РазрезыДеятельности.Инвестиционная;
		СправочникЭлемент.ВидДвижения			  = Перечисления.ВидыДвиженийДенежныхСредств.Выбытие;
		СправочникЭлемент.ДвижениеДенежныхСредств = Справочники.ДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Приобретение финансовых активов'", КодЯзыка));
		СправочникЭлемент.Записать();
	КонецЕсли;

	СсылкаДляПроверки = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Прочие выплаты по инвестиционной деятельности'", КодЯзыка));
	ПустаяСсылка 	  = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		СправочникЭлемент.Наименование			  = НСтр("ru = 'Прочие выплаты по инвестиционной деятельности'", КодЯзыка);
		СправочникЭлемент.Родитель				  = СписокГруппССсылками.Получить(0);
		СправочникЭлемент.РазрезДеятельности	  = Перечисления.РазрезыДеятельности.Инвестиционная;
		СправочникЭлемент.ВидДвижения 			  = Перечисления.ВидыДвиженийДенежныхСредств.Выбытие;
		СправочникЭлемент.ДвижениеДенежныхСредств = Справочники.ДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Прочие выплаты от инвестиционной деятельности'", КодЯзыка));
		СправочникЭлемент.Записать();
	КонецЕсли;

	СсылкаДляПроверки = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Прочие поступления от инвестиционной деятельности'", КодЯзыка));
	ПустаяСсылка	  = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		СправочникЭлемент.Наименование 			  = НСтр("ru = 'Прочие поступления от инвестиционной деятельности'", КодЯзыка);
		СправочникЭлемент.Родитель				  = СписокГруппССсылками.Получить(0);
		СправочникЭлемент.РазрезДеятельности	  = Перечисления.РазрезыДеятельности.Инвестиционная;
		СправочникЭлемент.ВидДвижения			  = Перечисления.ВидыДвиженийДенежныхСредств.Поступление;
		СправочникЭлемент.ДвижениеДенежныхСредств = Справочники.ДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Прочие поступления от инвестиционной деятельности'", КодЯзыка));
		СправочникЭлемент.Записать();
	КонецЕсли;

	СсылкаДляПроверки = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Реализация нематериальных актвивов'", КодЯзыка));
	ПустаяСсылка 	  = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		СправочникЭлемент.Наименование			  = НСтр("ru = 'Реализация нематериальных актвивов'", КодЯзыка);
		СправочникЭлемент.Родитель				  = СписокГруппССсылками.Получить(0);
		СправочникЭлемент.РазрезДеятельности	  = Перечисления.РазрезыДеятельности.Инвестиционная;
		СправочникЭлемент.ВидДвижения 			  = Перечисления.ВидыДвиженийДенежныхСредств.Поступление;
		СправочникЭлемент.ДвижениеДенежныхСредств = Справочники.ДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Реализация нематериальных активов'", КодЯзыка));
		СправочникЭлемент.Записать();
	КонецЕсли;

	СсылкаДляПроверки = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Реализация основных средств'", КодЯзыка));
	ПустаяСсылка	  = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		СправочникЭлемент.Наименование			  = НСтр("ru = 'Реализация основных средств'", КодЯзыка);
		СправочникЭлемент.Родитель 				  = СписокГруппССсылками.Получить(0);
		СправочникЭлемент.РазрезДеятельности	  = Перечисления.РазрезыДеятельности.Инвестиционная;
		СправочникЭлемент.ВидДвижения			  = Перечисления.ВидыДвиженийДенежныхСредств.Поступление;
		СправочникЭлемент.ДвижениеДенежныхСредств = Справочники.ДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Реализация основных средств'", КодЯзыка));
		СправочникЭлемент.Записать();
	КонецЕсли;

    СсылкаДляПроверки = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Реализация прочих долгосрочных активов'", КодЯзыка));
	ПустаяСсылка	  = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		СправочникЭлемент.Наименование			  = НСтр("ru = 'Реализация прочих долгосрочных активов'", КодЯзыка);
		СправочникЭлемент.Родитель 				  = СписокГруппССсылками.Получить(0);
		СправочникЭлемент.РазрезДеятельности 	  = Перечисления.РазрезыДеятельности.Инвестиционная;
		СправочникЭлемент.ВидДвижения			  = Перечисления.ВидыДвиженийДенежныхСредств.Поступление;
		СправочникЭлемент.ДвижениеДенежныхСредств = Справочники.ДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Реализация других долгосрочных активов'", КодЯзыка));
		СправочникЭлемент.Записать();
	КонецЕсли;

    СсылкаДляПроверки = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Реализация финансовых активов'", КодЯзыка));
	ПустаяСсылка 	  = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		СправочникЭлемент.Наименование			  = НСтр("ru = 'Реализация финансовых активов'", КодЯзыка);
		СправочникЭлемент.Родитель				  = СписокГруппССсылками.Получить(0);
		СправочникЭлемент.РазрезДеятельности	  = Перечисления.РазрезыДеятельности.Инвестиционная;
		СправочникЭлемент.ВидДвижения			  = Перечисления.ВидыДвиженийДенежныхСредств.Поступление;
		СправочникЭлемент.ДвижениеДенежныхСредств = Справочники.ДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Реализация финансовых активов'", КодЯзыка));
		СправочникЭлемент.Записать();
	КонецЕсли;
	
	СсылкаДляПроверки = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Авансы выданные под поставку активов и услуг'", КодЯзыка));
	ПустаяСсылка	  = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		СправочникЭлемент.Наименование 			  = НСтр("ru = 'Авансы выданные под поставку активов и услуг'",КодЯзыка);
		СправочникЭлемент.Родитель				  = СписокГруппССсылками.Получить(1);
		СправочникЭлемент.РазрезДеятельности	  = Перечисления.РазрезыДеятельности.Операционная;
		СправочникЭлемент.ВидДвижения			  = Перечисления.ВидыДвиженийДенежныхСредств.Выбытие;
		СправочникЭлемент.ДвижениеДенежныхСредств = Справочники.ДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Авансы выданные'", КодЯзыка));
		СправочникЭлемент.Записать();
	КонецЕсли;
	
	СсылкаДляПроверки = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Авансы полученные под поставку активов и услуг'", КодЯзыка));
	ПустаяСсылка	  = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		СправочникЭлемент.Наименование			  = НСтр("ru = 'Авансы полученные под поставку активов и услуг'", КодЯзыка);
		СправочникЭлемент.Родитель				  = СписокГруппССсылками.Получить(1);
		СправочникЭлемент.РазрезДеятельности	  = Перечисления.РазрезыДеятельности.Операционная;
		СправочникЭлемент.ВидДвижения			  = Перечисления.ВидыДвиженийДенежныхСредств.Поступление;
		СправочникЭлемент.ДвижениеДенежныхСредств = Справочники.ДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Авансы полученные'", КодЯзыка));
		СправочникЭлемент.Записать();
	КонецЕсли;
	
	СсылкаДляПроверки = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Выплата вознаграждения по займам'", КодЯзыка));
	ПустаяСсылка	  = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		СправочникЭлемент.Наименование 			  = НСтр("ru = 'Выплата вознаграждения по займам'", КодЯзыка);
		СправочникЭлемент.Родитель 				  = СписокГруппССсылками.Получить(1);
		СправочникЭлемент.РазрезДеятельности	  = Перечисления.РазрезыДеятельности.Операционная;
		СправочникЭлемент.ВидДвижения			  = Перечисления.ВидыДвиженийДенежныхСредств.Выбытие;
		СправочникЭлемент.ДвижениеДенежныхСредств = Справочники.ДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Выплата вознаграждения по займам'", КодЯзыка));
		СправочникЭлемент.Записать();
	КонецЕсли;
	
	СсылкаДляПроверки = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Выплата заработной платы'", КодЯзыка));
	ПустаяСсылка	  = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		СправочникЭлемент.Наименование 			  = НСтр("ru = 'Выплата заработной платы'", КодЯзыка);
		СправочникЭлемент.Родитель 				  = СписокГруппССсылками.Получить(1);
		СправочникЭлемент.РазрезДеятельности 	  = Перечисления.РазрезыДеятельности.Операционная;
		СправочникЭлемент.ВидДвижения			  = Перечисления.ВидыДвиженийДенежныхСредств.Выбытие;
		СправочникЭлемент.ДвижениеДенежныхСредств = Справочники.ДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Выплаты по заработной плате'", КодЯзыка));
		СправочникЭлемент.Записать();
	КонецЕсли;

	СсылкаДляПроверки = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Зачисление кассовой выручки на расчетный счет'", КодЯзыка));
	ПустаяСсылка 	  = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		СправочникЭлемент.Наименование			  = НСтр("ru = 'Зачисление кассовой выручки на расчетный счет'", КодЯзыка);
		СправочникЭлемент.Родитель				  = СписокГруппССсылками.Получить(1);
		СправочникЭлемент.РазрезДеятельности	  = Перечисления.РазрезыДеятельности.Операционная;
		СправочникЭлемент.ВидДвижения			  = Перечисления.ВидыДвиженийДенежныхСредств.Выбытие;
		СправочникЭлемент.ДвижениеДенежныхСредств = Справочники.ДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Прочие выплаты от операционной деятельности'", КодЯзыка));
		СправочникЭлемент.Записать();
	КонецЕсли;
	
	СсылкаДляПроверки = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Поступление денежных средств с расчетного счета'", КодЯзыка));
	ПустаяСсылка	  = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		СправочникЭлемент.Наименование 			  = НСтр("ru = 'Поступление денежных средств с расчетного счета'", КодЯзыка);
		СправочникЭлемент.Родитель				  = СписокГруппССсылками.Получить(1);
		СправочникЭлемент.РазрезДеятельности	  = Перечисления.РазрезыДеятельности.Операционная;
		СправочникЭлемент.ВидДвижения			  = Перечисления.ВидыДвиженийДенежныхСредств.Поступление;
		СправочникЭлемент.ДвижениеДенежныхСредств = Справочники.ДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Прочие поступления от операционной деятельности'", КодЯзыка));
		СправочникЭлемент.Записать();
	КонецЕсли;

	СсылкаДляПроверки = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Поступление дивидендов'", КодЯзыка));
	ПустаяСсылка	  = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		СправочникЭлемент.Наименование			  = НСтр("ru = 'Поступление дивидендов'", КодЯзыка);
		СправочникЭлемент.Родитель 				  = СписокГруппССсылками.Получить(1);
		СправочникЭлемент.РазрезДеятельности	  = Перечисления.РазрезыДеятельности.Операционная;
		СправочникЭлемент.ВидДвижения			  = Перечисления.ВидыДвиженийДенежныхСредств.Поступление;
		СправочникЭлемент.ДвижениеДенежныхСредств = Справочники.ДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Дивиденды'", КодЯзыка));
		СправочникЭлемент.Записать();
	КонецЕсли;

	СсылкаДляПроверки = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Прочие выплаты по операционной деятельности'", КодЯзыка));
	ПустаяСсылка	  = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		СправочникЭлемент.Наименование			  = НСтр("ru = 'Прочие выплаты по операционной деятельности'", КодЯзыка);
		СправочникЭлемент.Родитель				  = СписокГруппССсылками.Получить(1);
		СправочникЭлемент.РазрезДеятельности	  = Перечисления.РазрезыДеятельности.Операционная;
		СправочникЭлемент.ВидДвижения			  = Перечисления.ВидыДвиженийДенежныхСредств.Выбытие;
		СправочникЭлемент.ДвижениеДенежныхСредств = Справочники.ДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Прочие выплаты от операционной деятельности'", КодЯзыка));
		СправочникЭлемент.Записать();
	КонецЕсли;

	СсылкаДляПроверки = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Прочие поступления от операционной деятельности'", КодЯзыка));
	ПустаяСсылка	  = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		СправочникЭлемент.Наименование			  = НСтр("ru = 'Прочие поступления от операционной деятельности'", КодЯзыка);
		СправочникЭлемент.Родитель				  = СписокГруппССсылками.Получить(1);
		СправочникЭлемент.РазрезДеятельности	  = Перечисления.РазрезыДеятельности.Операционная;
		СправочникЭлемент.ВидДвижения			  = Перечисления.ВидыДвиженийДенежныхСредств.Поступление;
		СправочникЭлемент.ДвижениеДенежныхСредств = Справочники.ДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Прочие поступления от операционной деятельности'", КодЯзыка));
		СправочникЭлемент.Записать();
	КонецЕсли;

	СсылкаДляПроверки = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Расчеты с бюджетом по корпоративному подоходному налогу'", КодЯзыка));
	ПустаяСсылка	  = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		СправочникЭлемент.Наименование			  = НСтр("ru = 'Расчеты с бюджетом по корпоративному подоходному налогу'", КодЯзыка);
		СправочникЭлемент.Родитель				  = СписокГруппССсылками.Получить(1);
		СправочникЭлемент.РазрезДеятельности	  = Перечисления.РазрезыДеятельности.Операционная;
		СправочникЭлемент.ВидДвижения 			  = Перечисления.ВидыДвиженийДенежныхСредств.Выбытие;
		СправочникЭлемент.ДвижениеДенежныхСредств = Справочники.ДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Корпоративный подоходный налог'", КодЯзыка));
		СправочникЭлемент.Записать();
	КонецЕсли;

	СсылкаДляПроверки = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Расчеты с бюджетом по налогам'", КодЯзыка));
	ПустаяСсылка	  = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		СправочникЭлемент.Наименование			  = НСтр("ru = 'Расчеты с бюджетом по налогам'", КодЯзыка);
		СправочникЭлемент.Родитель				  = СписокГруппССсылками.Получить(1);
		СправочникЭлемент.РазрезДеятельности	  = Перечисления.РазрезыДеятельности.Операционная;
		СправочникЭлемент.ВидДвижения			  = Перечисления.ВидыДвиженийДенежныхСредств.Выбытие;
		СправочникЭлемент.ДвижениеДенежныхСредств = Справочники.ДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Другие платежи в бюджет'", КодЯзыка));
		СправочникЭлемент.Записать();
	КонецЕсли;

	СсылкаДляПроверки = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Расчеты с поставщиками и подрядчиками'",КодЯзыка));
	ПустаяСсылка	  = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		СправочникЭлемент.Наименование			  = НСтр("ru = 'Расчеты с поставщиками и подрядчиками'", КодЯзыка);
		СправочникЭлемент.Родитель				  = СписокГруппССсылками.Получить(1);
		СправочникЭлемент.РазрезДеятельности	  = Перечисления.РазрезыДеятельности.Операционная;
		СправочникЭлемент.ВидДвижения			  = Перечисления.ВидыДвиженийДенежныхСредств.Выбытие;
		СправочникЭлемент.ДвижениеДенежныхСредств = Справочники.ДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Платежи поставщикам за товары и услуги'", КодЯзыка));
		СправочникЭлемент.Записать();
	КонецЕсли;

	СсылкаДляПроверки = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Реализация готовой продукции и товаров'", КодЯзыка));
	ПустаяСсылка	  = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		СправочникЭлемент.Наименование			  = НСтр("ru = 'Реализация готовой продукции и товаров'", КодЯзыка);
		СправочникЭлемент.Родитель				  = СписокГруппССсылками.Получить(1);
		СправочникЭлемент.РазрезДеятельности	  = Перечисления.РазрезыДеятельности.Операционная;
		СправочникЭлемент.ВидДвижения			  = Перечисления.ВидыДвиженийДенежныхСредств.Поступление;
		СправочникЭлемент.ДвижениеДенежныхСредств = Справочники.ДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Реализация товаров'", КодЯзыка));
		СправочникЭлемент.Записать();
	КонецЕсли;

    СсылкаДляПроверки = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Реализация работ и услуг'", КодЯзыка));
	ПустаяСсылка	  = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		СправочникЭлемент.Наименование			  = НСтр("ru = 'Реализация работ и услуг'", КодЯзыка);
		СправочникЭлемент.Родитель				  = СписокГруппССсылками.Получить(1);
		СправочникЭлемент.РазрезДеятельности	  = Перечисления.РазрезыДеятельности.Операционная;
		СправочникЭлемент.ВидДвижения			  = Перечисления.ВидыДвиженийДенежныхСредств.Поступление;
		СправочникЭлемент.ДвижениеДенежныхСредств = Справочники.ДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Предоставление услуг'", КодЯзыка));
		СправочникЭлемент.Записать();
	КонецЕсли;

	
	СсылкаДляПроверки = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Выплата дивидендов'", КодЯзыка));
	ПустаяСсылка 	  = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		СправочникЭлемент.Наименование 			  = НСтр("ru = 'Выплата дивидендов'", КодЯзыка);
		СправочникЭлемент.Родитель				  = СписокГруппССсылками.Получить(2);
		СправочникЭлемент.РазрезДеятельности	  = Перечисления.РазрезыДеятельности.Финансовая;
		СправочникЭлемент.ВидДвижения			  = Перечисления.ВидыДвиженийДенежныхСредств.Выбытие;
		СправочникЭлемент.ДвижениеДенежныхСредств = Справочники.ДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Выплата дивидендов'", КодЯзыка));
		СправочникЭлемент.Записать();
	КонецЕсли;

   	СсылкаДляПроверки = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Погашение займов'", КодЯзыка));
	ПустаяСсылка	  = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		СправочникЭлемент.Наименование			  = НСтр("ru = 'Погашение займов'", КодЯзыка);
		СправочникЭлемент.Родитель				  = СписокГруппССсылками.Получить(2);
		СправочникЭлемент.РазрезДеятельности	  = Перечисления.РазрезыДеятельности.Финансовая;
		СправочникЭлемент.ВидДвижения 			  = Перечисления.ВидыДвиженийДенежныхСредств.Выбытие;
		СправочникЭлемент.ДвижениеДенежныхСредств = Справочники.ДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Погашение займов'", КодЯзыка));
		СправочникЭлемент.Записать();
	КонецЕсли;

	СсылкаДляПроверки = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Получение вознаграждения по финансируемой аренде'", КодЯзыка));
	ПустаяСсылка	  = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		СправочникЭлемент.Наименование			  = НСтр("ru = 'Получение вознаграждения по финансируемой аренде'", КодЯзыка);
		СправочникЭлемент.Родитель 				  = СписокГруппССсылками.Получить(2);
		СправочникЭлемент.РазрезДеятельности 	  = Перечисления.РазрезыДеятельности.Финансовая;
		СправочникЭлемент.ВидДвижения			  = Перечисления.ВидыДвиженийДенежныхСредств.Поступление;
		СправочникЭлемент.ДвижениеДенежныхСредств = Справочники.ДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Получение вознаграждения по финансируемой аренде'", КодЯзыка));
		СправочникЭлемент.Записать();
	КонецЕсли;

	СсылкаДляПроверки = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Получение займов'", КодЯзыка));
	ПустаяСсылка	  = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		СправочникЭлемент.Наименование 			  = НСтр("ru = 'Получение займов'", КодЯзыка);
		СправочникЭлемент.Родитель 				  = СписокГруппССсылками.Получить(2);
		СправочникЭлемент.РазрезДеятельности 	  = Перечисления.РазрезыДеятельности.Финансовая;
		СправочникЭлемент.ВидДвижения			  = Перечисления.ВидыДвиженийДенежныхСредств.Поступление;
		СправочникЭлемент.ДвижениеДенежныхСредств = Справочники.ДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Получение займов'", КодЯзыка));
		СправочникЭлемент.Записать();
	КонецЕсли;

	СсылкаДляПроверки = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Приобретение собственных акций'", КодЯзыка));
	ПустаяСсылка 	  = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		СправочникЭлемент.Наименование			  = НСтр("ru = 'Приобретение собственных акций'", КодЯзыка);
		СправочникЭлемент.Родитель				  = СписокГруппССсылками.Получить(2);
		СправочникЭлемент.РазрезДеятельности	  = Перечисления.РазрезыДеятельности.Финансовая;
		СправочникЭлемент.ВидДвижения			  = Перечисления.ВидыДвиженийДенежныхСредств.Выбытие;
		СправочникЭлемент.ДвижениеДенежныхСредств = Справочники.ДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Приобретение собственных акций'", КодЯзыка));
		СправочникЭлемент.Записать();
	КонецЕсли;

    СсылкаДляПроверки = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Процент по кредитам'", КодЯзыка));
	ПустаяСсылка	  = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		СправочникЭлемент.Наименование			  = НСтр("ru = 'Процент по кредитам'", КодЯзыка);
		СправочникЭлемент.Родитель				  = СписокГруппССсылками.Получить(2);
		СправочникЭлемент.РазрезДеятельности	  = Перечисления.РазрезыДеятельности.Финансовая;
		СправочникЭлемент.ВидДвижения			  = Перечисления.ВидыДвиженийДенежныхСредств.Выбытие;
		СправочникЭлемент.ДвижениеДенежныхСредств = Справочники.ДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Погашение займов'", КодЯзыка));
		СправочникЭлемент.Записать();
	КонецЕсли;

	СсылкаДляПроверки = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Прочие выплаты по финансовой деятельности'", КодЯзыка));
	ПустаяСсылка	  = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		СправочникЭлемент.Наименование			  = НСтр("ru = 'Прочие выплаты по финансовой деятельности'", КодЯзыка);
		СправочникЭлемент.Родитель				  = СписокГруппССсылками.Получить(2);
		СправочникЭлемент.РазрезДеятельности	  = Перечисления.РазрезыДеятельности.Финансовая;
		СправочникЭлемент.ВидДвижения			  = Перечисления.ВидыДвиженийДенежныхСредств.Выбытие;
		СправочникЭлемент.ДвижениеДенежныхСредств = Справочники.ДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Прочие выплаты от финансовой деятельности'", КодЯзыка));
		СправочникЭлемент.Записать();
	КонецЕсли;

	СсылкаДляПроверки = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Прочие поступления от финансовой деятельности'", КодЯзыка));
	ПустаяСсылка	  = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		СправочникЭлемент.Наименование			  = НСтр("ru = 'Прочие поступления от финансовой деятельности'", КодЯзыка);
		СправочникЭлемент.Родитель				  = СписокГруппССсылками.Получить(2);
		СправочникЭлемент.РазрезДеятельности 	  = Перечисления.РазрезыДеятельности.Финансовая;
		СправочникЭлемент.ВидДвижения			  = Перечисления.ВидыДвиженийДенежныхСредств.Поступление;
		СправочникЭлемент.ДвижениеДенежныхСредств = Справочники.ДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Прочие поступления от финансовой деятельности'", КодЯзыка));
		СправочникЭлемент.Записать();
	КонецЕсли;

	СсылкаДляПроверки = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Эмиссия акций и др. ценных бумаг'", КодЯзыка));
	ПустаяСсылка	  = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	Если СсылкаДляПроверки = ПустаяСсылка Тогда 
		СправочникЭлемент = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		СправочникЭлемент.Наименование 			  = НСтр("ru = 'Эмиссия акций и др. ценных бумаг'", КодЯзыка);
		СправочникЭлемент.Родитель				  = СписокГруппССсылками.Получить(2);
		СправочникЭлемент.РазрезДеятельности 	  = Перечисления.РазрезыДеятельности.Финансовая;
		СправочникЭлемент.ВидДвижения 			  = Перечисления.ВидыДвиженийДенежныхСредств.Поступление;
		СправочникЭлемент.ДвижениеДенежныхСредств = Справочники.ДвиженияДенежныхСредств.НайтиПоНаименованию(НСтр("ru = 'Эмиссия акций и  других ценных бумаг'", КодЯзыка));
		СправочникЭлемент.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли