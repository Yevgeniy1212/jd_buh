#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Настройки

Функция ПолучитьНастройкуЗаполнения(НастройкаЗаполнения, ИмяНастройкиЗаполнения) Экспорт
	
	Если ТипЗнч(НастройкаЗаполнения) = Тип("СписокЗначений") Тогда
		Для каждого ЭлементНастроек Из НастройкаЗаполнения Цикл
			Если ЭлементНастроек.Представление = ИмяНастройкиЗаполнения Тогда
				Возврат ЭлементНастроек.Значение;
			КонецЕсли;
		КонецЦикла
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция НастройкиПрограммыКлиентаБанка(Организация, БанковскийСчет) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		// Определим организацию.
		Если ЗначениеЗаполнено(БанковскийСчет) Тогда
			// Из банковского счета.
			Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "Владелец");
		Иначе
			// По умолчанию.
			Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(БанковскийСчет) И ЗначениеЗаполнено(Организация)
		И НЕ Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Организация) Тогда
		// Определим банковский счет, если он один.
		УправлениеДенежнымиСредствамиСервер.УстановитьБанковскийСчет(БанковскийСчет, Организация,
			ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	КонецЕсли;
	
	Настройки = Новый Структура;
	Настройки.Вставить("НастройкиЗагружены",                         Ложь);
	Настройки.Вставить("СоглашениеПрямогоОбменаСБанками",            Справочники.НастройкиОбменСБанками.ПустаяСсылка());
	Настройки.Вставить("БанкДляПрямогоОбмена",                       Справочники.Банки.ПустаяСсылка());
	Настройки.Вставить("Кодировка",                                  "Windows");
	Настройки.Вставить("Программа",                                  "");
	Настройки.Вставить("ФайлВыгрузки",                               "");
	Настройки.Вставить("ФайлЗагрузки",                               "");
	Настройки.Вставить("ПередЗагрузкойПоказыватьФормуОбменаСБанком", Ложь);
	Настройки.Вставить("БанковскийСчет",                             БанковскийСчет);
	Настройки.Вставить("Организация",                                Организация);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиОбменаСКлиентомБанка.Программа,
	|	НастройкиОбменаСКлиентомБанка.Кодировка,
	|	НастройкиОбменаСКлиентомБанка.ФайлЗагрузки,
	|	НастройкиОбменаСКлиентомБанка.ФайлВыгрузки
	|ИЗ
	|	Справочник.БанковскиеСчета КАК НастройкиОбменаСКлиентомБанка
	|ГДЕ
	|	НастройкиОбменаСКлиентомБанка.Ссылка = &Счет
	|	И НастройкиОбменаСКлиентомБанка.Владелец = &Организация";
	
	Запрос.УстановитьПараметр("Счет",        БанковскийСчет);
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Настройки.Вставить("НастройкиЗагружены",                         Истина);
		Настройки.Вставить("Кодировка",                                  Выборка.Кодировка);
		Настройки.Вставить("Программа",                                  Выборка.Программа);
		Настройки.Вставить("ФайлВыгрузки",                               Выборка.ФайлВыгрузки);
		Настройки.Вставить("ФайлЗагрузки",                               Выборка.ФайлЗагрузки);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбменСБанками") = Истина Тогда
		
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("БанковскийСчет", БанковскийСчет);
		Запрос.Параметры.Вставить("Организация", Организация);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиОбменСБанками.Ссылка КАК СоглашениеПрямогоОбменаСБанками,
		|	НастройкиОбменСБанками.Банк
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанками
		|		ПО БанковскиеСчета.Банк = НастройкиОбменСБанками.Банк
		|ГДЕ
		|	БанковскиеСчета.Ссылка = &БанковскийСчет
		|	И НастройкиОбменСБанками.Организация = &Организация
		|	И НЕ НастройкиОбменСБанками.ПометкаУдаления
		|	И НЕ НастройкиОбменСБанками.Недействительна";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Настройки.Вставить("СоглашениеПрямогоОбменаСБанками", Выборка.СоглашениеПрямогоОбменаСБанками);
			Настройки.Вставить("БанкДляПрямогоОбмена",            Выборка.Банк);
			Настройки.Вставить("Платежное_Требование",            Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

Функция НастройкиПрограммыКлиентаБанкаПоУмолчанию() Экспорт
	
	Настройки = Новый Структура;
	Настройки.Вставить("НастройкиЗагружены",                         Ложь);
	Настройки.Вставить("СоглашениеПрямогоОбменаСБанками",            Справочники.НастройкиОбменСБанками.ПустаяСсылка());
	Настройки.Вставить("БанкДляПрямогоОбмена",                       Справочники.Банки.ПустаяСсылка());
	Настройки.Вставить("Кодировка",                                  "Windows");
	Настройки.Вставить("Программа",                                  "");
	Настройки.Вставить("ФайлВыгрузки",                               "");
	Настройки.Вставить("ФайлЗагрузки",                               "");
	Настройки.Вставить("ПередЗагрузкойПоказыватьФормуОбменаСБанком", Ложь);
	
	Возврат Настройки;
	
КонецФункции

Функция НастройкиЗагрузки() Экспорт
	
	Настройки = НовыйНастройкиОбменСБанком();
	
	СохраненныеНастройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОбменСБанком", "НастройкиЗагрузки", Неопределено);
	Если СохраненныеНастройки = Неопределено Тогда
		СконвертироватьНастройкиЗагрузки(Настройки);
	Иначе
		ЗаполнитьНастройкиОбменСБанком(Настройки, СохраненныеНастройки);
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

Процедура ЗаписатьНастройкиЗагрузки(Настройки) Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ОбменСБанком", "НастройкиЗагрузки", Настройки);
	
КонецПроцедуры

// Читает настройки, сохраненные предыдущими версиями программы, и сохраняет их в новом формате.
// Раньше настройки хранились в текущих данных формы и если их не сконвертировать,
// то они будут утрачены при закрытии этой формы.
Процедура СконвертироватьНастройкиЗагрузки(Настройки) Экспорт
	
	СохраненныеНастройки = ХранилищеСистемныхНастроек.Загрузить("Обработка.КлиентБанкСПоддержкойЭД.Форма.Форма/ТекущиеДанные");
	Если ТипЗнч(СохраненныеНастройки) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьДанные = Ложь;
	
	// 1. Родитель в новых элементах справочника
	ГруппаДляНовыхКонтрагентов = СохраненныеНастройки["ГруппаДляНовыхКонтрагентов"];
	Если ЗначениеЗаполнено(ГруппаДляНовыхКонтрагентов) Тогда
		
		НастройкиЗаполненияНовогоКонтрагента = Новый Структура;
		НастройкиЗаполненияНовогоКонтрагента.Вставить("Родитель", ГруппаДляНовыхКонтрагентов);
		Настройки.ЗаполнениеНовыхЭлементов.Вставить(Тип("СправочникСсылка.Контрагенты"), НастройкиЗаполненияНовогоКонтрагента);
		
		ЕстьДанные = Истина;
		
	КонецЕсли;
	
	// 2. Настройки для разных видов операций
	НастройкаЗаполнения = СохраненныеНастройки["НастройкаЗаполнения"];
	Если ТипЗнч(НастройкаЗаполнения) = Тип("ТаблицаЗначений") Тогда
		
		ОписаниеОпераций = Новый Структура;
		ОписаниеОпераций.Вставить("Поступило", Новый Структура);
		ОписаниеОпераций.Вставить("Списано",   Новый Структура);
		
		ОписаниеОпераций.Поступило.Вставить("Тип",       Тип("ДокументСсылка.ПлатежноеПоручениеВходящее"));
		ОписаниеОпераций.Поступило.Вставить("Псевдоним", "Платежное поручение (входящее)");
		
		ОписаниеОпераций.Поступило.Вставить("Тип",       Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств"));
		ОписаниеОпераций.Поступило.Вставить("Псевдоним", "Платежный ордер (поступление)");
		
		ОписаниеОпераций.Списано.Вставить("Тип",         Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее"));
		ОписаниеОпераций.Списано.Вставить("Псевдоним",   "Платежное поручение (исходящее)");
		
		ОписаниеОпераций.Списано.Вставить("Тип",         Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств"));
		ОписаниеОпераций.Списано.Вставить("Псевдоним",   "Платежный ордер (списание)");
		
		Для Каждого ОписаниеОперации Из ОписаниеОпераций Цикл
			
			НастройкаОперации = НастройкаЗаполнения.Найти(ОписаниеОперации.Значение.Псевдоним, "Документ");
			Если НастройкаОперации <> Неопределено Тогда
				Настройки.СозданиеДокументов[ОписаниеОперации.Значение.Тип].ПроводитьДокумент = НастройкаОперации.Проводить;
				Настройки.СтатьиДвиженияДенежныхСредств[ОписаниеОперации.Ключ]                = НастройкаОперации.СтатьяДДС;
				ЕстьДанные = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЕстьДанные Тогда
		ЗаписатьНастройкиЗагрузки(Настройки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаВБанк

Процедура Выгрузить(ПараметрыВыгрузки, АдресХранилища) Экспорт
	
	Если ПараметрыВыгрузки.ВыгружатьВXMLФормате Тогда
		ВыгрузитьВXMLДокумент(ПараметрыВыгрузки, АдресХранилища);
	Иначе
		ВыгрузитьВТекстовыйДокумент(ПараметрыВыгрузки, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьВТекстовыйДокумент(ПараметрыВыгрузки, АдресХранилища)
	
	ТаблицаДокументов = ПараметрыВыгрузки.ТаблицаДокументов;
	
	КоличествоДокументов = ТаблицаДокументов.Количество();
	
	Если Не КоличествоДокументов Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДокументов.Сортировать("ДатаДокумента");
	НачПериода = ТаблицаДокументов[0].ДатаДокумента;
	КонПериода = ТаблицаДокументов[КоличествоДокументов-1].ДатаДокумента;
	
	БанковскиеСчетаВыгрузки = ПараметрыВыгрузки.БанковскийСчет;
	
	ПотокВыгрузки = Новый ТекстовыйДокумент();
	
	// Формируем заголовок.
	ПотокВыгрузки.ДобавитьСтроку("1CClientBankExchange");
	ПотокВыгрузки.ДобавитьСтроку("ВерсияФормата=2.00");
	
	ПотокВыгрузки.ДобавитьСтроку("Кодировка="     + ПараметрыВыгрузки.Кодировка);
	ПотокВыгрузки.ДобавитьСтроку("Отправитель="   + Метаданные.Синоним);
	ПотокВыгрузки.ДобавитьСтроку("Получатель="    + "");
	ПотокВыгрузки.ДобавитьСтроку("ДатаСоздания="  + Формат(ТекущаяДата(),"ДЛФ=Д"));
	ПотокВыгрузки.ДобавитьСтроку("ВремяСоздания=" + Формат(ТекущаяДата(),"ДЛФ=В"));
	ПотокВыгрузки.ДобавитьСтроку("ДатаНачала="    + Формат(НачПериода,"ДЛФ=Д"));
	ПотокВыгрузки.ДобавитьСтроку("ДатаКонца="     + Формат(КонПериода,"ДЛФ=Д"));
	
	Если ТипЗнч(БанковскиеСчетаВыгрузки) = Тип("ТаблицаЗначений") Тогда
		Для Каждого ОчереднойБанковскийСчет Из БанковскиеСчетаВыгрузки Цикл 
			ПотокВыгрузки.ДобавитьСтроку("РасчСчет=" + ОчереднойБанковскийСчет.НомерСчета);
		КонецЦикла;
	Иначе
		ПотокВыгрузки.ДобавитьСтроку("РасчСчет=" + БанковскиеСчетаВыгрузки.НомерСчета);
	КонецЕсли;
	
	ПотокВыгрузки.ДобавитьСтроку("Документ=" + "ПлатежноеПоручение");
	
	// Выводим отмеченные секции документов.
	Для Каждого СтрокаСекции Из ТаблицаДокументов Цикл
		
		Если НЕ(СтрокаСекции.Выгружать)Тогда
			Продолжить;
		КонецЕсли;
		
		Буфер = ПолучитьСекциюДокумент(СтрокаСекции, ТаблицаДокументов.Колонки, КонПериода, ПараметрыВыгрузки.СтруктурноеПодразделение, ПараметрыВыгрузки.Организация, ПараметрыВыгрузки.НастройкаЗаполнения);
		
		КоличествоСрокСекции = СтрЧислоСтрок(Буфер);
		Для Сч = 1 По КоличествоСрокСекции Цикл
			ПотокВыгрузки.ДобавитьСтроку(СтрПолучитьСтроку(Буфер, Сч));
		КонецЦикла;
		
	КонецЦикла;
	
	ПотокВыгрузки.ДобавитьСтроку("КонецФайла");
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	
	// Кодировку задаем текстом, иначе бывают проблемы на сервере в Linux и в связке англоязычная Windows + англоязычный SQL.
	Если ВРег(ПараметрыВыгрузки.Кодировка) = "DOS" Тогда 
		Кодир = "cp866";        // КодировкаТекста.OEM;
	ИначеЕсли ВРег(ПараметрыВыгрузки.Кодировка) = "UTF8" Тогда
		Кодир = "UTF-8";
	Иначе
		Кодир = "windows-1251"; // КодировкаТекста.ANSI;
	КонецЕсли;
	
	ПотокВыгрузки.Записать(ИмяВременногоФайла, Кодир);
	
	ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла), АдресХранилища);
	
КонецПроцедуры

Процедура ВыгрузитьВXMLДокумент(ПараметрыВыгрузки, АдресХранилища)
	
	ТаблицаДокументов = ПараметрыВыгрузки.ТаблицаДокументов;
	
	КоличествоДокументов = ТаблицаДокументов.Количество();
	
	Если Не КоличествоДокументов Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДокументов.Сортировать("ДатаДокумента");
	НачПериода = ТаблицаДокументов[0].ДатаДокумента;
	КонПериода = ТаблицаДокументов[КоличествоДокументов-1].ДатаДокумента;
	
	БанковскиеСчетаВыгрузки = ПараметрыВыгрузки.БанковскийСчет;
	
	ЗаписьXML = Новый ЗаписьXML;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла);
	
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьКомментарий(НСтр("ru = 'Файл выгрузки платежных документов из 1С:Предприятия в Банк-Клиент'"));
	ЗаписьXML.ЗаписатьНачалоЭлемента("XML1CClientBankExchange");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	
	ЗаписьXML.ЗаписатьАтрибут("ВерсияФормата", "2.00");
	ЗаписьXML.ЗаписатьАтрибут("Отправитель",   СокрЛП(Метаданные.Синоним));
	ЗаписьXML.ЗаписатьАтрибут("Получатель",    "");
	
	ТекстВремени = Формат(ТекущаяДата(),"ДЛФ=В");
	Если Найти(ТекстВремени, ":") = 2 Тогда
		ТекстВремени = "0" + ТекстВремени;
	КонецЕсли;
	ТекстЗаписи = ПреобразоватьДату(ТекущаяДата()) + "T" + ТекстВремени;
	
	ЗаписьXML.ЗаписатьАтрибут("ДатаВремяСоздания", ТекстЗаписи);
	ТекстЗаписи = ПреобразоватьДату(НачПериода);
	
	ЗаписьXML.ЗаписатьАтрибут("ДатаНачала", ТекстЗаписи);
	ТекстЗаписи = ПреобразоватьДату(КонПериода);
	
	ЗаписьXML.ЗаписатьАтрибут("ДатаКонца", ТекстЗаписи);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("РасчетныеСчета");
	Если ТипЗнч(БанковскиеСчетаВыгрузки) = Тип("ТаблицаЗначений") Тогда
		Для Каждого ОчереднойБанковскийСчет Из БанковскиеСчетаВыгрузки Цикл 
			ЗаписьXML.ЗаписатьНачалоЭлемента("Счет");
			ЗаписьXML.ЗаписатьТекст(СокрЛП(ОчереднойБанковскийСчет.НомерСчета));
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
	Иначе
		ЗаписьXML.ЗаписатьНачалоЭлемента("Счет");
		ЗаписьXML.ЗаписатьТекст(СокрЛП(БанковскиеСчетаВыгрузки.НомерСчета));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ВидыПлатежныхДокументов");
	ЗаписьXML.ЗаписатьНачалоЭлемента("ВидДокумента");
	ЗаписьXML.ЗаписатьТекст("ПлатежноеПоручение");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Выводим отмеченные секции документов.
	Для Каждого СтрокаСекции из ТаблицаДокументов Цикл
		Если НЕ(СтрокаСекции.Выгружать)Тогда
			Продолжить;
		КонецЕсли;
		ЗаписатьСекциюДокументВXML(ЗаписьXML, СтрокаСекции, ТаблицаДокументов.Колонки, КонПериода, ПараметрыВыгрузки.СтруктурноеПодразделение, ПараметрыВыгрузки.Организация, ПараметрыВыгрузки.НастройкаЗаполнения);
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	
	ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла), АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаИзБанка

Процедура ФоноваяРаспознатьДанныеИзБанка(СтруктураПараметров, АдресХранилища) Экспорт
	
	Если СтруктураПараметров.Свойство("ДвоичныеДанные") Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла();
		СтруктураПараметров.ДвоичныеДанные.Записать(ИмяФайла);
	Иначе
		ИмяФайла = СтруктураПараметров.ИмяФайла;
	КонецЕсли;
	
	ДанныеДляЗаполнения  = Новый Структура;
	
	Импорт_РасчетныеСчета = СтруктураПараметров.Импорт_РасчетныеСчета;
	Импорт_РасчетныеСчета.Очистить();
	
	ДокументыКИмпорту = СтруктураПараметров.ДокументыКИмпорту;
	ДокументыКИмпорту.Очистить();
	
	Расширение = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(СтруктураПараметров.ФайлЗагрузки);
	
	ПроверятьРНН     = ПолучитьНастройкуЗаполнения(СтруктураПараметров.НастройкаЗаполнения, "ПроверятьРНН");
	ПроверятьБИН_ИИН = ПолучитьНастройкуЗаполнения(СтруктураПараметров.НастройкаЗаполнения, "ПроверятьБИН_ИИН");
	
	Импорт_НеПустые  = СформироватьСтруктуруИмпорт_НеПустые(ПроверятьРНН, ПроверятьБИН_ИИН);
	Импорт_Заголовок = Импорт_ЗаголовокСтруктура();
	
	Если НРег(Расширение) = "xml" Тогда
		ИмяВременногоФайла  = ПолучитьИмяВременногоФайла("xml");
		ДвоичныеДанныеФайла = СтруктураПараметров.ДвоичныеДанные;
		ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
		
		НайденКонецФайла = РазобратьФайлИмпортаXML(ДокументыКИмпорту,
			Импорт_РасчетныеСчета,
			Импорт_НеПустые,
			Импорт_Заголовок,
			ИмяВременногоФайла,
			СтруктураПараметров.Организация,
			СтруктураПараметров.СтруктурноеПодразделение,
			СтруктураПараметров.ИспользоватьГраницуОбработки,
			СтруктураПараметров.ДатаГраницыОбработки,
			СтруктураПараметров.ТаблицаКонтрагентов,
			СтруктураПараметров.СтекОповещений);
		
	Иначе
		
		ИмяВременногоФайла  = ПолучитьИмяВременногоФайла("txt");
		ДвоичныеДанныеФайла = СтруктураПараметров.ДвоичныеДанные;
		ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
		
		НайденКонецФайла = РазобратьФайлИмпортаTXT(ДокументыКИмпорту,
			Импорт_РасчетныеСчета,
			Импорт_НеПустые,
			Импорт_Заголовок,
			ИмяВременногоФайла,
			СтруктураПараметров.Кодировка,
			СтруктураПараметров.Организация,
			СтруктураПараметров.СтруктурноеПодразделение,
			СтруктураПараметров.ИспользоватьГраницуОбработки,
			СтруктураПараметров.ДатаГраницыОбработки,
			СтруктураПараметров.ТаблицаКонтрагентов,
			СтруктураПараметров.СтекОповещений);
		
	КонецЕсли;
	
	ЕстьОшибкиИмпорта = СтруктураПараметров.ДокументыКИмпорту.НайтиСтроки(Новый Структура("Готовность", 0)).Количество()
						<> СтруктураПараметров.ДокументыКИмпорту.Количество();
	
	ДанныеДляЗаполнения.Вставить("ДокументыКИмпорту",     ДокументыКИмпорту);
	ДанныеДляЗаполнения.Вставить("Импорт_Заголовок",      Импорт_Заголовок);
	ДанныеДляЗаполнения.Вставить("Импорт_РасчетныеСчета", Импорт_РасчетныеСчета);
	ДанныеДляЗаполнения.Вставить("СтекОповещений",        СтруктураПараметров.СтекОповещений);
	ДанныеДляЗаполнения.Вставить("ТаблицаКонтрагентов",   СтруктураПараметров.ТаблицаКонтрагентов);
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

Процедура ФоноваяЗагрузкаДокументовКИмпортуИзКлиентБанка(ПараметрыЗагрузкиДокументов, АдресХранилища) Экспорт
	
	СтруктураНастроек   = СформироватьСтруктуруНастроекЗаполнения(ПараметрыЗагрузкиДокументов.НастройкаЗаполнения);
	
	ДанныеДляЗаполнения = Новый Структура;
	
	Загрузить(ПараметрыЗагрузкиДокументов.ДокументыКИмпорту,
			  ПараметрыЗагрузкиДокументов.ТаблицаКонтрагентов,
			  ПараметрыЗагрузкиДокументов.Организация,
			  ПараметрыЗагрузкиДокументов.СтруктурноеПодразделение,
			  ПараметрыЗагрузкиДокументов.Импорт_РасчетныеСчета,
			  ПараметрыЗагрузкиДокументов.Импорт_Заголовок,
			  ПараметрыЗагрузкиДокументов.ИспользоватьГраницуОбработки,
			  ПараметрыЗагрузкиДокументов.ДатаГраницыОбработки,
			  СтруктураНастроек,
			  ПараметрыЗагрузкиДокументов.СтекОповещений);
	
	ДанныеДляЗаполнения.Вставить("ДокументыКИмпорту",   ПараметрыЗагрузкиДокументов.ДокументыКИмпорту);
	ДанныеДляЗаполнения.Вставить("СтекОповещений",      ПараметрыЗагрузкиДокументов.СтекОповещений);
	ДанныеДляЗаполнения.Вставить("ТаблицаКонтрагентов", ПараметрыЗагрузкиДокументов.ТаблицаКонтрагентов);
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

Процедура ФоноваяСозданиеНовыхОбъектов(ПараметрыСоздания, АдресХранилища) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура;
	
	СтруктураНастроек   = СформироватьСтруктуруНастроекЗаполнения(ПараметрыСоздания.НастройкиСоздания);
	
	СтекОповещений = Новый Массив;
	Результат = СоздатьКонтрагентов(ПараметрыСоздания.ТаблицаКонтрагентов, ПараметрыСоздания.Организация,
						СтруктураНастроек.ГруппаДляНовыхКонтрагентов, СтекОповещений);
	
	ДанныеДляЗаполнения.Вставить("КонтрагентыСозданы",       Результат.Количество() <> 0);
	ДанныеДляЗаполнения.Вставить("СсылкиНаСозданныеОбъекты", Результат);
	ДанныеДляЗаполнения.Вставить("МассивСообщений",          СтекОповещений);
	
	ПоместитьВоВременноеХранилище(ПараметрыСоздания.ТаблицаКонтрагентов, ПараметрыСоздания.АдресХранилищаКонтрагентов);
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

// Процедура печатает отчет о загруженных платежных документах.
//
Процедура ПечатьОтчетаОЗагруженныхПлатежныхДокументах(ПолеОтчета, Источник) Экспорт
	
	Если Источник.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МакетОтчета = Обработки.КлиентБанкСПоддержкойЭД.ПолучитьМакет("ОтчетОЗагрузке");
	
	Шапка    = МакетОтчета.ПолучитьОбласть("Шапка");
	Строка   = МакетОтчета.ПолучитьОбласть("Строка");
	Подвал   = МакетОтчета.ПолучитьОбласть("Подвал");
	
	ПолеОтчета.Вывести(Шапка);
	
	Индекс = 0;
	
	Для Каждого СтрокаИсточника Из Источник Цикл
		
		Если СтрокаИсточника.Загрузить Тогда
			
			Док = СтрокаИсточника.Документ;
			
			Если НЕ ЗначениеЗаполнено(Док) Тогда
				Продолжить;
			КонецЕсли;
			
			Попытка
				ВидДокумента = Док.Метаданные().Имя;
			Исключение
				Продолжить;
			КонецПопытки;
			
			Индекс = Индекс + 1;
			
			Строка.Параметры.Плательщик     = СтрокаИсточника.ПлательщикНаименование;
			Строка.Параметры.ПлательщикСчет = СтрокаИсточника.ПлательщикИИК;
			Строка.Параметры.Получатель     = СтрокаИсточника.ПолучательНаименование;
			Строка.Параметры.ПолучательСчет = СтрокаИсточника.ПолучательИИК;
			
			Строка.Параметры.Сумма          = СтрокаИсточника.Сумма;
			Строка.Параметры.Документ       = Док;
			Строка.Параметры.Индекс         = Индекс;
			
			ПолеОтчета.Вывести(Строка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПолеОтчета.Вывести(Подвал);
	
	ПолеОтчета.ОтображатьГруппировки = Ложь;
	ПолеОтчета.ОтображатьЗаголовки = Ложь;
	ПолеОтчета.ОтображатьСетку = Ложь;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Выгрузка

Функция ПолучитьТегСекции(СсылкаНаДокумент)
	
	Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
		Возврат "ПлатежноеПоручение";
		
	Иначе
		Возврат "Прочее";
	КонецЕсли;
	
КонецФункции

// Функция формирует значение на основании типа переданного значения.
//
Функция ПривестиЗначение(Значение)
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Возврат СокрЛП(Значение);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		Возврат Формат(Значение, "ЧРД=.; ЧРГ=' '; ЧГ=0");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		Возврат Формат(Значение, "ДФ=dd.MM.yyyy");
		
	Иначе
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

Функция ПривестиЗначениеXML(СтруктураДокумента, ИмяРеквизита, НеПреобразовыватьВСтроку)
	
	Значение = СтруктураДокумента[ИмяРеквизита];
	
	НеПреобразовыватьВСтроку = Истина;
	
	Если (ИмяРеквизита = "ДатаДокумента") ИЛИ
		 (ИмяРеквизита = "ДатаВалютирования") Тогда
		Возврат Значение;
	ИначеЕсли ИмяРеквизита = "Сумма" Тогда
		Возврат СтруктураДокумента["СуммаДокумента"];
	ИначеЕсли ИмяРеквизита = "ПенсионныеОтчисления" Тогда
		Если СокрЛП(Значение) = "1" Тогда
			Возврат Истина;
		Иначе
			Возврат "";
		КонецЕсли;
	ИначеЕсли ИмяРеквизита = "СоциальныеОтчисления" Тогда
		Если СокрЛП(Значение) = "1" Тогда
			Возврат Истина;
		Иначе
			Возврат "";
		КонецЕсли;
	ИначеЕсли ИмяРеквизита = "ПеречислениеНаКартСчета" Тогда
		Если СокрЛП(Значение) = "1" Тогда
			Возврат Истина;
		Иначе
			Возврат "";
		КонецЕсли;
	ИначеЕсли ИмяРеквизита = "ПеречислениеПоИЛ" Тогда
		Если СокрЛП(Значение) = "1" Тогда
			Возврат Истина;
		Иначе
			Возврат "";
		КонецЕсли;
	ИначеЕсли ИмяРеквизита = "ПеречислениеПодотчетнику" Тогда
		Если СокрЛП(Значение) = "1" Тогда
			Возврат Истина;
		Иначе
			Возврат "";
		КонецЕсли;
	Иначе
		НеПреобразовыватьВСтроку = Ложь;
		Возврат ПривестиЗначение(Значение);
	КонецЕсли;
КонецФункции

Процедура ДобавитьВСтроку(Буфер, НоваяСтрока)
	
	Если ПустаяСтрока(Буфер) Тогда
		Буфер = НоваяСтрока;
		
	Иначе
		Буфер = Буфер + Символы.ПС + НоваяСтрока;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЗамечание(СтруктураДокумента, НоваяГотовность, ТекстЗамечания)
	
	УстановитьГотовность(СтруктураДокумента.Готовность, НоваяГотовность);
	ДобавитьВСтроку(СтруктураДокумента.ОписаниеОшибок, ТекстЗамечания);
	СтруктураДокумента.ЕстьОшибка = Истина;
	
КонецПроцедуры

Процедура УстановитьГотовность(ТекущаяГотовность, НоваяГотовность)
	
	Если ТекущаяГотовность < НоваяГотовность Тогда
		ТекущаяГотовность = НоваяГотовность;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСписокОтветственныхЛицОрганизации(Организация, СтруктурноеПодразделение)
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование КАК Наименование,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо.Ссылка КАК ОТВ
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
	|			,
	|			ОтветственноеЛицо.Ссылка = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)
	|				ИЛИ ОтветственноеЛицо.Ссылка = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)) КАК ОтветственныеЛицаОрганизацийСрезПоследних
	|ГДЕ
	|	ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница = &СтруктурнаяЕдиница";
	
	Если ЗначениеЗаполнено(СтруктурноеПодразделение) Тогда
		СтруктурнаяЕдиница = ?(СтруктурноеПодразделение.УказыватьРеквизитыГоловнойОрганизации, Организация, СтруктурноеПодразделение);
	Иначе
		СтруктурнаяЕдиница = Организация;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();
	
КонецФункции

Функция ВыделитьСлово(ИсходнаяСтрока, СчетчикВызова)
	
	Буфер = СокрЛ(ИсходнаяСтрока);
	ПозицияПослПробела = Найти(Буфер, " ");
	
	Если (ПозицияПослПробела = 0)
		 Или (СчетчикВызова >= 3) Тогда
		ИсходнаяСтрока = "";
		Возврат Буфер;
	КонецЕсли;
	
	ВыделенноеСлово = СокрЛП(Лев(Буфер, ПозицияПослПробела));
	ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
	
	Возврат ВыделенноеСлово;
	
КонецФункции

Функция ПреобразоватьДату(ПреобразовываемаяДата)
	
	Год   = СокрЛП(Формат(Год(ПреобразовываемаяДата), "ЧРД=.; ЧРГ=''; ЧГ=0"));
	Месяц = СокрЛП(Формат(Месяц(ПреобразовываемаяДата), "ЧРД=.; ЧРГ=''; ЧГ=0"));
	День  = СокрЛП(Формат(День(ПреобразовываемаяДата), "ЧРД=.; ЧРГ=''; ЧГ=0"));
	
	Если СтрДлина(Месяц) = 1 Тогда
		Месяц = "0" + Месяц;
	КонецЕсли;
	
	Если СтрДлина(День) = 1 Тогда
		День = "0" + День;
	КонецЕсли;
	
	Если СтрДлина(Год) < 4 Тогда
		ДлинаГода = СтрДлина(Год);
		Для Сч = 1 По 4 - ДлинаГода Цикл
			Год = "0" + Год;
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗаписи = Год + "-" + Месяц + "-" + День;
	
	Возврат ТекстЗаписи;
	
КонецФункции

Функция СформироватьСтруктуруЭкспорта_ВыгружаемыеПриПенсИСоцОтчислениях()
	
	// РеквизитыПлДокЭкс_Основные
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях = Новый Структура("НомерДокумента, ДатаДокумента, Сумма");
	
	// РеквизитыПлДок_Плательщик
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПлательщикНаименование");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПлательщикКБЕ");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПлательщикИИК");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПлательщикРНН");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПлательщикБИН_ИИН");
	
	//РеквизитыПлДок_ПлательщикНПР
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПлательщикБанкНаименование");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПлательщикБанкБИК");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПлательщикБанкРНН");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПлательщикБанкБИН_ИИН");
	
	// РеквизитыПлДок_Получатель
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПолучательНаименование");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПолучательКБЕ");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПолучательИИК");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПолучательРНН");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПолучательБИН_ИИН");
	
	//РеквизитыПлДок_ПолучательНПР
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПолучательБанкНаименование");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПолучательБанкБИК");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПолучательБанкРНН");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПолучательБанкБИН_ИИН");
	
	//РеквизитыПлДок_Назначение
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("НазначениеПлатежа");
	
	//РеквизитыПлДок_БюджетПлатеж
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("КодНазначенияПлатежа");
	
	//РеквизитыПлДок_НеОбязательные
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПлательщикБанкИИК");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ПолучательБанкИИК");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ДатаПолученияТовара");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("КодБюджетнойКлассификации");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ДатаВалютирования");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ВидДокумента");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("ДатаОперации");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("СуммаПриход");
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Вставить("СуммаРасход");
	
	Возврат Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях;
	
КонецФункции

Функция СформироватьСтруктуруЭкспорта_ВыгружаемыеГЦВП()
	
	//РеквизитыПлДок_ГЦВП
	Экспорт_ВыгружаемыеГЦВП = новый Структура("ГЦВПБанкНаименование, ГЦВПИИК, ГЦВПБИН_ИИН, ГЦВПРНН, ГЦВПБанкБИК");
	
	Возврат Экспорт_ВыгружаемыеГЦВП;
	
КонецФункции

Функция СформироватьСтруктуруЭкспорта_Выгружаемые()
	
	Экспорт_Выгружаемые = СформироватьСтруктуруЭкспорта_ВыгружаемыеПриПенсИСоцОтчислениях();
	
	//РеквизитыПлДок_БанкПосредник
	Экспорт_Выгружаемые.Вставить("БанкПосредникНаименование");
	Экспорт_Выгружаемые.Вставить("БанкПосредникИИК");
	Экспорт_Выгружаемые.Вставить("БанкПосредникРНН");
	Экспорт_Выгружаемые.Вставить("БанкПосредникБИН_ИИН");
	Экспорт_Выгружаемые.Вставить("БанкПосредникБИК");
	
	Возврат Экспорт_Выгружаемые;
	
КонецФункции

Функция СформироватьТекстЗапросаПоОПВ()
	
	ТекстЗапроса = "
	|///////////////////////////////////СписокОПВПеречислениеВФонды///////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ППИОПВ.Документ КАК Документ
	|ПОМЕСТИТЬ СписокОПВПеречислениеВФонды
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПенсионныхВзносов КАК ППИОПВ
	|ГДЕ
	|	ППИОПВ.Ссылка = &Документ 
	|;
	|///////////////////////////////////Основная таблица//////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо.Наименование          КАК Сотрудник,
	|	ФИОФизЛицПриПрисвоенииСИК.Фамилия                                   КАК РегистрацияФамилия,
	|	ФИОФизЛицПриПрисвоенииСИК.Имя                                       КАК РегистрацияИмя,
	|	ФИОФизЛицПриПрисвоенииСИК.Отчество                                  КАК РегистрацияОтчество,
	|	ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо.РНН                   КАК СотрудникРНН,
	|	ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо.СИК                   КАК СотрудникСИК,
	|	ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо.ДатаРождения          КАК СотрудникДатаРождения,
	|	ОПВПеречислениеВФондыПенсионныеВзносы.Сумма                         КАК Сумма,
	|	ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо.ИдентификационныйКодЛичности КАК СотрудникБИН_ИИН,
	|	ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка.ПериодРегистрации      КАК Период
	|	ИЗ
	|		Документ.ОПВПеречислениеВФонды.ПенсионныеВзносы КАК ОПВПеречислениеВФондыПенсионныеВзносы
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛицПриПрисвоенииСИК КАК ФИОФизЛицПриПрисвоенииСИК
	|			ПО ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо = ФИОФизЛицПриПрисвоенииСИК.ФизЛицо
	|
	|ГДЕ ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка В (ВЫБРАТЬ Документ ИЗ СписокОПВПеречислениеВФонды)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СформироватьТекстЗапросаПоСО()
	
	ТекстЗапроса = "
	|///////////////////////////////////СписокСОПеречислениеВФонды///////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ППИСО.Документ КАК Документ
	|
	|ПОМЕСТИТЬ СписокСОПеречислениеВФонды
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеСоциальныхОтчислений КАК ППИСО
	|ГДЕ
	|	ППИСО.Ссылка = &Документ 
	|;
	|///////////////////////////////////Основная таблица//////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо.Наименование     КАК Сотрудник,
	|	ФИОФизЛицПриПрисвоенииСИК.Фамилия                                 КАК РегистрацияФамилия,
	|	ФИОФизЛицПриПрисвоенииСИК.Имя                                     КАК РегистрацияИмя,
	|	ФИОФизЛицПриПрисвоенииСИК.Отчество                                КАК РегистрацияОтчество,
	|	СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо.РНН              КАК СотрудникРНН,
	|	СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо.СИК              КАК СотрудникСИК,
	|	СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо.ДатаРождения     КАК СотрудникДатаРождения,
	|	СОПеречислениеВФондыСоциальныеОтчисления.Сумма                    КАК Сумма,
	|	СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо.ИдентификационныйКодЛичности КАК СотрудникБИН_ИИН,
	|   ВЫБОР
	|		КОГДА СОПеречислениеВФондыСоциальныеОтчисления.Ссылка.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС))
	|			ТОГДА ВЫБОР
	|					КОГДА СОПеречислениеВФондыСоциальныеОтчисления.МесяцПериода = ДАТАВРЕМЯ(1, 1, 1)
	|						ТОГДА НАЧАЛОПЕРИОДА(СОПеречислениеВФондыСоциальныеОтчисления.Ссылка.ПериодРегистрации, МЕСЯЦ)
	|					ИНАЧЕ НАЧАЛОПЕРИОДА(СОПеречислениеВФондыСоциальныеОтчисления.МесяцПериода, МЕСЯЦ)
	|				КОНЕЦ
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(СОПеречислениеВФондыСоциальныеОтчисления.Ссылка.ПериодРегистрации, МЕСЯЦ)
	|	КОНЕЦ КАК Период	
	|ИЗ
	|	Документ.СОПеречислениеВФонды.СоциальныеОтчисления КАК СОПеречислениеВФондыСоциальныеОтчисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛицПриПрисвоенииСИК КАК ФИОФизЛицПриПрисвоенииСИК
	|		ПО СОПеречислениеВФондыСоциальныеОтчисления.ФизЛицо = ФИОФизЛицПриПрисвоенииСИК.ФизЛицо
	|ГДЕ
	|	СОПеречислениеВФондыСоциальныеОтчисления.Ссылка В (ВЫБРАТЬ Документ ИЗ СписокСОПеречислениеВФонды)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СформироватьТекстЗапросаПоЗП()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость КАК Ведомость
	|ПОМЕСТИТЬ ВТ_СписокЗарплатаКВыплатеОрганизаций
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты
	|ГДЕ
	|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка = &Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо КАК ФизЛицо,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.НомерКартСчета КАК НомерКартСчета,
	|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.СуммаКВыплате) КАК Сумма
	|ПОМЕСТИТЬ ВТ_ЗарплатаКВыплатеОрганизаций
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка В
	|			(ВЫБРАТЬ
	|				СписокЗарплатаКВыплатеОрганизаций.Ведомость
	|			ИЗ
	|				ВТ_СписокЗарплатаКВыплатеОрганизаций КАК СписокЗарплатаКВыплатеОрганизаций)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.НомерКартСчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(КартСчета.НомерСчета, """") КАК СотрудникКартСчет,
	|	ЗарплатаКВыплатеОрганизаций.Сумма КАК Сумма,
	|	ЕСТЬNULL(ФИОФактическихПолучателей.Фамилия, ФИОФизЛиц.Фамилия) КАК Фамилия,
	|	ЕСТЬNULL(ФИОФактическихПолучателей.Имя, ФИОФизЛиц.Имя) КАК Имя,
	|	ЕСТЬNULL(ФИОФактическихПолучателей.Отчество, ФИОФизЛиц.Отчество) КАК Отчество,
	|	ЕСТЬNULL(ФизическиеЛица.Наименование, """") КАК Сотрудник,
	|	ЕСТЬNULL(ФактическиеПолучатели.РНН, ЕСТЬNULL(ФизическиеЛица.РНН, """")) КАК СотрудникРНН,
	|	ЕСТЬNULL(ФактическиеПолучатели.ИдентификационныйКодЛичности, ЕСТЬNULL(ФизическиеЛица.ИдентификационныйКодЛичности, """")) КАК СотрудникБИН_ИИН
	|ИЗ
	|	ВТ_ЗарплатаКВыплатеОрганизаций КАК ЗарплатаКВыплатеОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КартСчета КАК КартСчета
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФактическиеПолучатели
	|			ПО (КартСчета.НеЯвляетсяВладельцемСчета)
	|				И (ФактическиеПолучатели.Ссылка = КартСчета.ФизЛицоВладелецСчета)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ) КАК ФИОФактическихПолучателей
	|			ПО (КартСчета.НеЯвляетсяВладельцемСчета)
	|				И (ФИОФактическихПолучателей.ФизЛицо = КартСчета.ФизЛицоВладелецСчета)
	|		ПО (КартСчета.Ссылка = ЗарплатаКВыплатеОрганизаций.НомерКартСчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО (ФизическиеЛица.Ссылка = ЗарплатаКВыплатеОрганизаций.ФизЛицо)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ) КАК ФИОФизЛиц
	|		ПО ЗарплатаКВыплатеОрганизаций.ФизЛицо = ФИОФизЛиц.ФизЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	Фамилия,
	|	Имя,
	|	Отчество";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СформироватьТекстЗапросаПоИЛ(ИмяРеквизитаБИК)
	
	ТекстЗапроса = "
	|///////////////////////////////////СписокПеречислениеПоИсполнительнымЛистам//////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ППИИЛ.Документ КАК Документ
	|ПОМЕСТИТЬ СписокПеречислениеПоИсполнительнымЛистам
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПоИсполнительнымЛистам КАК ППИИЛ
	|ГДЕ
	|	ППИИЛ.Ссылка = &Документ
	|;
	|///////////////////////////////////Основная таблица//////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(ИЛПеречислениеПолучателямИсполнительныеЛисты.Получатель.НаименованиеПолное КАК СТРОКА(1000))   КАК ПолучательПоИЛФИО,
	|	ИЛПеречислениеПолучателямИсполнительныеЛисты.Получатель.РНН                                             КАК ПолучательПоИЛРНН,
	|	ИЛПеречислениеПолучателямИсполнительныеЛисты.СуммаСборов                                                КАК СуммаСборов,
	|	ИЛПеречислениеПолучателямИсполнительныеЛисты.СуммаВзаиморасчетов                                        КАК СуммаВзаиморасчетов,
	|	ИЛПеречислениеПолучателямИсполнительныеЛисты.Ссылка.СпособПеречисления                                  КАК ПеречислятьЧерез,
	|	ИЛПеречислениеПолучателямИсполнительныеЛисты.Получатель.ОсновнойБанковскийСчет.Банк.Наименование        КАК БанкНаименвание,
	|	ИЛПеречислениеПолучателямИсполнительныеЛисты.Получатель.ОсновнойБанковскийСчет.Банк." + ИмяРеквизитаБИК + " КАК БанкБИК,
	|	ИЛПеречислениеПолучателямИсполнительныеЛисты.Получатель.ОсновнойБанковскийСчет.НомерСчета               КАК ПолучательПоИЛИИК,
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(1000))                                           КАК ПолучательПоИЛАдрес,
	|	ИЛПеречислениеПолучателямИсполнительныеЛисты.Получатель.ИдентификационныйКодЛичности                    КАК ПолучательПоИЛБИН_ИИН
	|ИЗ
	|	Документ.ИЛПеречислениеПолучателям.ИсполнительныеЛисты КАК ИЛПеречислениеПолучателямИсполнительныеЛисты	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО ИЛПеречислениеПолучателямИсполнительныеЛисты.Получатель = КонтактнаяИнформация.Объект
	|			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента))
	|
	|ГДЕ
	|	ИЛПеречислениеПолучателямИсполнительныеЛисты.Ссылка В (ВЫБРАТЬ Документ ИЗ СписокПеречислениеПоИсполнительнымЛистам)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СформироватьТекстЗапросаПоПеречислениеПодотчетникам()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ФизическиеЛица.Наименование, """") КАК НаименованиеФизЛица,
	|	ЕСТЬNULL(КартСчета.НомерСчета, """") КАК НомерКартСчета,
	|	ЕСТЬNULL(Банки.Наименование, """") КАК БанкКонтрагента,
	|	ЕСТЬNULL(ФИОФактическихПолучателей.Фамилия, ФИОФизЛиц.Фамилия) КАК Фамилия,
	|	ЕСТЬNULL(ФИОФактическихПолучателей.Имя, ФИОФизЛиц.Имя) КАК Имя,
	|	ЕСТЬNULL(ФИОФактическихПолучателей.Отчество, ФИОФизЛиц.Отчество) КАК Отчество,
	|	ЕСТЬNULL(ФактическиеПолучатели.РНН, ЕСТЬNULL(ФизическиеЛица.РНН, """")) КАК РНН,
	|	ЕСТЬNULL(ФактическиеПолучатели.ИдентификационныйКодЛичности, ЕСТЬNULL(ФизическиеЛица.ИдентификационныйКодЛичности, """")) КАК ПодотчетникБИН_ИИН,
	|	СУММА(ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.СуммаПлатежа) КАК СуммаКПеречислению
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеВПодотчет КАК ПлатежноеПоручениеИсходящееПеречислениеВПодотчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
	|				ПО (Банки.Ссылка = БанковскиеСчета.Банк)
	|			ПО (БанковскиеСчета.Ссылка = ПлатежноеПоручениеИсходящее.СчетКонтрагента)
	|		ПО (ПлатежноеПоручениеИсходящее.Ссылка = ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО (ФизическиеЛица.Ссылка = ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.ФизЛицо)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ) КАК ФИОФизЛиц
	|		ПО (ФИОФизЛиц.ФизЛицо = ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.ФизЛицо)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КартСчета КАК КартСчета
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФактическиеПолучатели
	|			ПО (КартСчета.НеЯвляетсяВладельцемСчета)
	|				И (ФактическиеПолучатели.Ссылка = КартСчета.ФизЛицоВладелецСчета)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ) КАК ФИОФактическихПолучателей
	|			ПО (КартСчета.НеЯвляетсяВладельцемСчета)
	|				И (ФИОФактическихПолучателей.ФизЛицо = КартСчета.ФизЛицоВладелецСчета)
	|		ПО (КартСчета.Ссылка = ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.НомерКартСчета)
	|ГДЕ
	|	ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.Ссылка = &Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ФизическиеЛица.Наименование, """"),
	|	ЕСТЬNULL(КартСчета.НомерСчета, """"),
	|	ЕСТЬNULL(Банки.Наименование, """"),
	|	ЕСТЬNULL(ФИОФактическихПолучателей.Фамилия, ФИОФизЛиц.Фамилия),
	|	ЕСТЬNULL(ФИОФактическихПолучателей.Имя, ФИОФизЛиц.Имя),
	|	ЕСТЬNULL(ФИОФактическихПолучателей.Отчество, ФИОФизЛиц.Отчество),
	|	ЕСТЬNULL(ФактическиеПолучатели.РНН, ЕСТЬNULL(ФизическиеЛица.РНН, """")),
	|	ЕСТЬNULL(ФактическиеПолучатели.ИдентификационныйКодЛичности, ЕСТЬNULL(ФизическиеЛица.ИдентификационныйКодЛичности, """"))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Фамилия,
	|	Имя,
	|	Отчество";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ДобавитьДанныеПоСотрудникам(Буфер,
	СтруктураДокумента,
	КоллекцияСвойств,
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях,
	Экспорт_ВыгружаемыеГЦВП,
	ПроверятьРНН,
	ПроверятьБИН_ИИН,
	ВидДанных)
	
	Для Каждого ВыгружаемыйРеквизит из КоллекцияСвойств Цикл
		Если Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Свойство(ВыгружаемыйРеквизит.Имя) Тогда
			Значение = ПривестиЗначение(СтруктураДокумента[ВыгружаемыйРеквизит.Имя]);
			Если НЕ ПустаяСтрока(Значение) Тогда
				ДобавитьВСтроку(Буфер, ВыгружаемыйРеквизит.Имя + "=" + Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьВСтроку(Буфер, "СПИСОКСОТРУДНИКОВ");
	
	Если ВидДанных <> "ЗП" Тогда
		Для каждого ВыгружаемыйРеквизит из КоллекцияСвойств Цикл
			Если Экспорт_ВыгружаемыеГЦВП.Свойство(ВыгружаемыйРеквизит.Имя) = Истина Тогда
				
				Значение = ПривестиЗначение(СтруктураДокумента[ВыгружаемыйРеквизит.Имя]);
				
				Если НЕ ПустаяСтрока(Значение) Тогда
					ДобавитьВСтроку(Буфер, ВыгружаемыйРеквизит.Имя + "=" + Значение);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если ВидДанных = "ОПВ" Тогда
		ТекстЗапроса = СформироватьТекстЗапросаПоОПВ();
	ИначеЕсли ВидДанных = "СО" Тогда
		ТекстЗапроса = СформироватьТекстЗапросаПоСО();
	Иначе
		ТекстЗапроса = СформироватьТекстЗапросаПоЗП();
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Документ",СтруктураДокумента.Документ); 
	
	Если ВидДанных = "ЗП" Тогда
		Запрос.УстановитьПараметр("Дата", СтруктураДокумента.Документ.Дата);
	КонецЕсли;
	
	ОбщаяСумма = 0;
	
	ВыборкаСотрудников = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаСотрудников.Следующий() Цикл
		
		Если НЕ ПустаяСтрока(ВыборкаСотрудников.Сотрудник) Тогда
			
			Если ВидДанных = "ЗП" Тогда
				Если ПустаяСтрока(ВыборкаСотрудников.СотрудникКартСчет) Тогда
					
					ТекстСообщения = НСтр("ru = 'Не указан номер карт-счета сотрудника: %1 %2 %3'");
					ОбщегоНазначения.СообщитьПользователю(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ТекстСообщения,
							СокрЛП(ВыборкаСотрудников.Фамилия),
							СокрЛП(ВыборкаСотрудников.Имя),
							СокрЛП(ВыборкаСотрудников.Отчество)));
					
				КонецЕсли;
			КонецЕсли;
			
			Если ВидДанных = "ЗП" Тогда
				ДобавитьВСтроку(Буфер, "СОТРУДНИК="+СокрЛП(ВыборкаСотрудников.Фамилия) + " " + СокрЛП(ВыборкаСотрудников.Имя) + " " + СокрЛП(ВыборкаСотрудников.Отчество));
			Иначе
				ДобавитьВСтроку(Буфер, "СОТРУДНИК="+ВыборкаСотрудников.Сотрудник);
			КонецЕсли;
			
			Если Не ВидДанных = "ЗП" Тогда
				Если НЕ ПустаяСтрока(ВыборкаСотрудников.РегистрацияФамилия) Тогда
					ДобавитьВСтроку(Буфер, "Регистрация="+СокрЛП(ВыборкаСотрудников.РегистрацияФамилия)+" "+СокрЛП(ВыборкаСотрудников.РегистрацияИмя)+" "+СокрЛП(ВыборкаСотрудников.РегистрацияОтчество));
				Иначе
					ДобавитьВСтроку(Буфер, "Регистрация="+ВыборкаСотрудников.Сотрудник);
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ВыборкаСотрудников.СотрудникРНН) Тогда
				ДобавитьВСтроку(Буфер, "СотрудникРНН="+ВыборкаСотрудников.СотрудникРНН);
			ИначеЕсли ПроверятьРНН Тогда // Проверим стоит ли настройка проверки заполненности РНН.
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнен РНН сотрудника: %1'"), ВыборкаСотрудников.Сотрудник);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ВыборкаСотрудников.СотрудникБИН_ИИН) Тогда
				ДобавитьВСтроку(Буфер, "СотрудникБИН_ИИН="+ВыборкаСотрудников.СотрудникБИН_ИИН);
			ИначеЕсли ПроверятьБИН_ИИН Тогда // Проверим стоит ли настройка проверки заполненности БИН/ИИН.
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнен ИИН сотрудника: %1'"), ВыборкаСотрудников.Сотрудник);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			Если ВидДанных = "ЗП" Тогда
				ДобавитьВСтроку(Буфер, "СотрудникНомерКартСчета="+ВыборкаСотрудников.СотрудникКартСчет);
			Иначе
				Если НЕ ПустаяСтрока(ВыборкаСотрудников.СотрудникСИК) Тогда
					ДобавитьВСтроку(Буфер, "СотрудникСИК="+ВыборкаСотрудников.СотрудникСИК);
				ИначеЕсли ПроверятьРНН Тогда // Проверим стоит ли настройка проверки заполненности РНН.
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнен СИК сотрудника: %1'"), ВыборкаСотрудников.Сотрудник);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				
				Если НЕ ВыборкаСотрудников.СотрудникДатаРождения = Дата(1,1,1) Тогда
					ДобавитьВСтроку(Буфер, "СотрудникДатаРождения=" + Формат(ВыборкаСотрудников.СотрудникДатаРождения, "ДФ=dd.MM.yyyy"));
				Иначе
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнена дата рождения сотрудника %1'"), ВыборкаСотрудников.Сотрудник);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				
				Если НЕ ВыборкаСотрудников.Период = Дата(1,1,1) Тогда
					ДобавитьВСтроку(Буфер, "Период=" + НРег(Формат(ВыборкаСотрудников.Период, "ДФ='ММгггг'")));
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ВыборкаСотрудников.Сумма) Тогда
				ДобавитьВСтроку(Буфер, "Сумма="+Формат(ВыборкаСотрудников.Сумма, "ЧРД=.; ЧРГ=' '; ЧГ=0; ЧЦ=15; ЧДЦ=2"));
				ОбщаяСумма = ОбщаяСумма + ВыборкаСотрудников.Сумма;
			Иначе
				Если ВидДанных = "ЗП" Тогда
					ТекстСообщения = НСтр("ru = 'Не заполнена сумма заработной платы сотрудника: %1'");
				ИначеЕсли ВидДанных = "ОПВ" Тогда
					ТекстСообщения = НСтр("ru = 'Не заполнена сумма пенсионных перечислений сотрудника: %1 за %2 г.'");
				Иначе
					ТекстСообщения = НСтр("ru = 'Не заполнена сумма социальных отчислений сотрудника: %1 за %2 г.'");
				КонецЕсли;
				ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаСотрудников.Сотрудник, НРег(Формат(ВыборкаСотрудников.Период, "ДФ='ММММ гггг'"))));
			КонецЕсли;
			
			ДобавитьВСтроку(Буфер, "КОНЕЦСОТРУДНИК");
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьВСтроку(Буфер, "КОНЕЦСПИСКАСОТРУДНИКОВ");
	
	Если ВидДанных = "ЗП" Тогда
		
		Если ОбщаяСумма <> СтруктураДокумента.Документ.СуммаДокумента Тогда
			
			СуммаКомиссии = СтруктураДокумента.Документ.СуммаДокумента - ОбщаяСумма;
			
			ДобавитьВСтроку(Буфер, "СуммаКомиссииБанка=" + Формат(СуммаКомиссии, "ЧРД=.; ЧРГ=' '; ЧГ=0; ЧЦ=15; ЧДЦ=2"));
			
			Отбор = Новый Структура;
			Отбор.Вставить("Организация", СтруктураДокумента.Документ.Организация);
			Отбор.Вставить("Банк", СтруктураДокумента.Документ.СчетКонтрагента.Банк);
			
			ЗначенияРегистра = РегистрыСведений.КодыОрганизацийВБанковскойСистеме.Получить(Отбор);
			
			Если ЗначенияРегистра <> Неопределено Тогда
				Если Не ПустаяСтрока(ЗначенияРегистра.КодОрганизации) Тогда
					ДобавитьВСтроку(Буфер, "КодОрганизацииВБанковскойСистеме=" + СокрЛП(ЗначенияРегистра.КодОрганизации));
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьДанныеПеречислениеПоИЛ(Буфер,
	СтруктураДокумента,
	КоллекцияСвойств,
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях,
	КонПериода,
	ПроверятьРНН,
	ПроверятьБИН_ИИН)
	
	Для Каждого ВыгружаемыйРеквизит из КоллекцияСвойств Цикл
		Если Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Свойство(ВыгружаемыйРеквизит.Имя) Тогда
			Значение = ПривестиЗначение(СтруктураДокумента[ВыгружаемыйРеквизит.Имя]);
			Если НЕ ПустаяСтрока(Значение) Тогда
				ДобавитьВСтроку(Буфер, ВыгружаемыйРеквизит.Имя + "=" + Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьВСтроку(Буфер, "СПИСОКПОЛУЧАТЕЛЕЙПОИЛ");
	
	ИмяРеквизитаБИК = Справочники.Банки.ПолучитьИмяРеквизитаБИКБанка(КонПериода);
	
	Запрос = Новый Запрос;
	Запрос.Текст = СформироватьТекстЗапросаПоИЛ(ИмяРеквизитаБИК);
	
	Запрос.УстановитьПараметр("Документ",СтруктураДокумента.Документ);
	Запрос.УстановитьПараметр("Дата",    СтруктураДокумента.Документ.Дата);
	
	ВыборкаПолучателей = Запрос.Выполнить().Выбрать();
	
	ОбщаяСумма = 0;
	Пока ВыборкаПолучателей.Следующий() Цикл
		
		Если НЕ ПустаяСтрока(ВыборкаПолучателей.ПолучательПоИЛФИО) Тогда
			
			ДобавитьВСтроку(Буфер, "ПОЛУЧАТЕЛЬПОИЛ=" + СокрЛП(ВыборкаПолучателей.ПолучательПоИЛФИО));
			
			Если НЕ ПустаяСтрока(ВыборкаПолучателей.ПолучательПоИЛРНН) Тогда
				ДобавитьВСтроку(Буфер, "ПолучательПоИЛРНН=" + ВыборкаПолучателей.ПолучательПоИЛРНН);
			ИначеЕсли ПроверятьРНН Тогда // Проверим стоит ли настройка проверки заполненности РНН.
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнен РНН получателя по исполнительным листам: %1'"), СокрЛП(ВыборкаПолучателей.ПолучательПоИЛФИО));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ВыборкаПолучателей.ПолучательПоИЛБИН_ИИН) Тогда
				ДобавитьВСтроку(Буфер, "ПолучательПоИЛБИН_ИИН=" + ВыборкаПолучателей.ПолучательПоИЛБИН_ИИН);
			ИначеЕсли ПроверятьБИН_ИИН Тогда // Проверим стоит ли настройка проверки заполненности БИН/ИИН.
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнен ИИН получателя по исполнительным листам: %1'"), СокрЛП(ВыборкаПолучателей.ПолучательПоИЛФИО));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			Если ВыборкаПолучателей.ПеречислятьЧерез = Перечисления.СпособыПеречисленияПоИсполнительномуЛисту.ЧерезБанк Тогда
				ДобавитьВСтроку(Буфер, "ПолучательПоИЛБанкНаименование=" + ВыборкаПолучателей.БанкНаименвание);
				ДобавитьВСтроку(Буфер, "ПолучательПоИЛБанкБИК=" + ВыборкаПолучателей.БанкБИК);
				ДобавитьВСтроку(Буфер, "ПолучательПоИЛИИК=" + ВыборкаПолучателей.ПолучательПоИЛИИК);
			Иначе
				ДобавитьВСтроку(Буфер, "ПолучательПоИЛАдрес=" + ?(ВыборкаПолучателей.ПолучательПоИЛАдрес = NULL, "", СокрЛП(ВыборкаПолучателей.ПолучательПоИЛАдрес)));
				Если ВыборкаПолучателей.ПолучательПоИЛАдрес = NULL Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнен фактический адрес контрагента для получателя по ИЛ: %1'"), СокрЛП(ВыборкаПолучателей.ПолучательПоИЛФИО));
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ВыборкаПолучателей.СуммаВзаиморасчетов) Тогда
				ДобавитьВСтроку(Буфер, "Сумма=" + Формат(ВыборкаПолучателей.СуммаВзаиморасчетов, "ЧРД=.; ЧРГ=' '; ЧГ=0; ЧЦ=15; ЧДЦ=2"));
				ОбщаяСумма = ОбщаяСумма + ВыборкаПолучателей.СуммаВзаиморасчетов;
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнена сумма к перечислению по исполнительным листам для получателя: %1'"), СокрЛП(ВыборкаПолучателей.ПолучательПоИЛФИО));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			ДобавитьВСтроку(Буфер, "КОНЕЦПОЛУЧАТЕЛЬПОИЛ");
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьВСтроку(Буфер, "КОНЕЦСПИСКАПОЛУЧАТЕЛЕЙПОИЛ");
	
	Если ОбщаяСумма <> СтруктураДокумента.Документ.СуммаДокумента Тогда
		
		СуммаКомиссии = СтруктураДокумента.Документ.СуммаДокумента - ОбщаяСумма;
		
		ДобавитьВСтроку(Буфер, "СуммаКомиссии=" + Формат(СуммаКомиссии, "ЧРД=.; ЧРГ=' '; ЧГ=0; ЧЦ=15; ЧДЦ=2"));
		
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", СтруктураДокумента.Документ.Организация);
		Отбор.Вставить("Банк", СтруктураДокумента.Документ.СчетКонтрагента.Банк);
		
		ЗначенияРегистра = РегистрыСведений.КодыОрганизацийВБанковскойСистеме.Получить(Отбор);
		
		Если ЗначенияРегистра <> Неопределено Тогда
			Если Не ПустаяСтрока(ЗначенияРегистра.КодОрганизации) Тогда
				ДобавитьВСтроку(Буфер, "КодОрганизацииВБанковскойСистеме=" + СокрЛП(ЗначенияРегистра.КодОрганизации));
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьДанныеПеречислениеПодотчетнику(Буфер,
	СтруктураДокумента,
	КоллекцияСвойств,
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях,
	ПроверятьРНН,
	ПроверятьБИН_ИИН)
	
	Для Каждого ВыгружаемыйРеквизит из КоллекцияСвойств Цикл
		Если Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Свойство(ВыгружаемыйРеквизит.Имя) Тогда
			
			Значение = ПривестиЗначение(СтруктураДокумента[ВыгружаемыйРеквизит.Имя]);
			
			Если НЕ ПустаяСтрока(Значение) И НЕ ВыгружаемыйРеквизит.Имя = "ПеречислениеПодотчетнику" Тогда
				ДобавитьВСтроку(Буфер, ВыгружаемыйРеквизит.Имя + "=" + Значение);
			ИначеЕсли НЕ ПустаяСтрока(Значение) И ВыгружаемыйРеквизит.Имя = "ПеречислениеПодотчетнику" Тогда 
				ДобавитьВСтроку(Буфер, "ПеречислениеНаКартСчета" + "=" + Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьВСтроку(Буфер, "СПИСОКСОТРУДНИКОВ");
	
	Запрос = Новый Запрос;
	Запрос.Текст = СформироватьТекстЗапросаПоПеречислениеПодотчетникам();	
	
	Запрос.УстановитьПараметр("Документ", СтруктураДокумента.Документ); 
	Запрос.УстановитьПараметр("Дата",     СтруктураДокумента.Документ.Дата);
	
	ВыборкаПодотчетников = Запрос.Выполнить().Выбрать();
	
	ОбщаяСумма = 0;
	
	Пока ВыборкаПодотчетников.Следующий() Цикл
		
		Если НЕ ПустаяСтрока(ВыборкаПодотчетников.НаименованиеФизЛица) Тогда
			
			ДобавитьВСтроку(Буфер, "СОТРУДНИК=" + СокрЛП(ВыборкаПодотчетников.Фамилия) + " " + СокрЛП(ВыборкаПодотчетников.Имя) + " " + СокрЛП(ВыборкаПодотчетников.Отчество));
			
			Если НЕ ПустаяСтрока(ВыборкаПодотчетников.РНН) Тогда
				
				ДобавитьВСтроку(Буфер, "СотрудникРНН=" + ВыборкаПодотчетников.РНН);
				
			ИначеЕсли ПроверятьРНН Тогда // Проверим стоит ли настройка проверки заполненности РНН.
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнен РНН подотчетника:%1'"), ВыборкаПодотчетников.НаименованиеФизЛица);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ВыборкаПодотчетников.ПодотчетникБИН_ИИН) Тогда
				ДобавитьВСтроку(Буфер, "СотрудникБИН_ИИН=" + ВыборкаПодотчетников.ПодотчетникБИН_ИИН);
			ИначеЕсли ПроверятьБИН_ИИН Тогда // Проверим стоит ли настройка проверки заполненности БИН/ИИН.
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнен ИИН подотчетника:%1'"), ВыборкаПодотчетников.НаименованиеФизЛица);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
			Если ПустаяСтрока(ВыборкаПодотчетников.НомерКартСчета) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не указан номер карт-счета подотчетника:%1'"), СокрЛП(ВыборкаПодотчетников.НаименованиеФизЛица));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			ДобавитьВСтроку(Буфер, "СотрудникНомерКартСчета="+ВыборкаПодотчетников.НомерКартСчета);
			
			Если НЕ ПустаяСтрока(ВыборкаПодотчетников.СуммаКПеречислению) Тогда
				ДобавитьВСтроку(Буфер, "Сумма=" + Формат(ВыборкаПодотчетников.СуммаКПеречислению, "ЧРД=.; ЧРГ=' '; ЧГ=0; ЧЦ=15; ЧДЦ=2"));
				ОбщаяСумма = ОбщаяСумма + ВыборкаПодотчетников.СуммаКПеречислению;
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнена сумма выдачи в подотчет для подотчетника:%1'"), СокрЛП(ВыборкаПодотчетников.НаименованиеФизЛица));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			ДобавитьВСтроку(Буфер, "КОНЕЦСОТРУДНИК");
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьВСтроку(Буфер, "КОНЕЦСПИСКАСОТРУДНИКОВ");
	
	Если ОбщаяСумма <> СтруктураДокумента.Документ.СуммаДокумента Тогда
		
		СуммаКомиссии = СтруктураДокумента.Документ.СуммаДокумента - ОбщаяСумма;
		
		ДобавитьВСтроку(Буфер, "СуммаКомиссии=" + Формат(СуммаКомиссии, "ЧРД=.; ЧРГ=' '; ЧГ=0; ЧЦ=15; ЧДЦ=2"));
		
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", СтруктураДокумента.Документ.Организация);
		Отбор.Вставить("Банк", СтруктураДокумента.Документ.СчетКонтрагента.Банк);
		
		ЗначенияРегистра = РегистрыСведений.КодыОрганизацийВБанковскойСистеме.Получить(Отбор);
		
		Если ЗначенияРегистра <> Неопределено Тогда
			Если Не ПустаяСтрока(ЗначенияРегистра.КодОрганизации) Тогда
				ДобавитьВСтроку(Буфер, "КодОрганизацииВБанковскойСистеме=" + СокрЛП(ЗначенияРегистра.КодОрганизации));
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСекциюДокумент(СтруктураДокумента, КоллекцияСвойств, КонПериода, СтруктурноеПодразделение, Организация, НастройкаЗапонения)
	
	Буфер = "";
	
	ПроверятьРНН     = ПолучитьНастройкуЗаполнения(НастройкаЗапонения, "ПроверятьРНН");
	ПроверятьБИН_ИИН = ПолучитьНастройкуЗаполнения(НастройкаЗапонения, "ПроверятьБИН_ИИН");
	
	ДобавитьВСтроку(Буфер, "СекцияДокумент=" + ПолучитьТегСекции(СтруктураДокумента.Документ));
	
	ПенсионныеОтчисления_Есть     = ПривестиЗначение(СтруктураДокумента["ПенсионныеОтчисления"]);
	СоциальныеОтчисления_Есть     = ПривестиЗначение(СтруктураДокумента["СоциальныеОтчисления"]);
	ПеречислениеНаКартСчета_Есть  = ПривестиЗначение(СтруктураДокумента["ПеречислениеНаКартСчета"]);
	ПеречислениеПоИЛ_Есть         = ПривестиЗначение(СтруктураДокумента["ПеречислениеПоИЛ"]);
	ПеречислениеПодотчетнику_Есть = ПривестиЗначение(СтруктураДокумента["ПеречислениеПодотчетнику"]);
	
	Экспорт_ВыгружаемыеГЦВП       = СформироватьСтруктуруЭкспорта_ВыгружаемыеГЦВП();
	Экспорт_Выгружаемые           = СформироватьСтруктуруЭкспорта_Выгружаемые();
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях = СформироватьСтруктуруЭкспорта_ВыгружаемыеПриПенсИСоцОтчислениях();
	
	Если ПенсионныеОтчисления_Есть = "1" Тогда
		
		ДобавитьДанныеПоСотрудникам(Буфер, СтруктураДокумента, КоллекцияСвойств, Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях, Экспорт_ВыгружаемыеГЦВП, ПроверятьРНН, ПроверятьБИН_ИИН, "ОПВ");
		
	ИначеЕсли СоциальныеОтчисления_Есть = "1" Тогда
		
		ДобавитьДанныеПоСотрудникам(Буфер, СтруктураДокумента, КоллекцияСвойств, Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях, Экспорт_ВыгружаемыеГЦВП, ПроверятьРНН, ПроверятьБИН_ИИН, "СО");
		
	ИначеЕсли ПеречислениеНаКартСчета_Есть = "1" Тогда
		
		ДобавитьДанныеПоСотрудникам(Буфер, СтруктураДокумента, КоллекцияСвойств, Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях, Экспорт_ВыгружаемыеГЦВП, ПроверятьРНН, ПроверятьБИН_ИИН, "ЗП");
		
	ИначеЕсли ПеречислениеПоИЛ_Есть = "1" Тогда
		
		ДобавитьДанныеПеречислениеПоИЛ(Буфер, СтруктураДокумента, КоллекцияСвойств, Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях, КонПериода, ПроверятьРНН, ПроверятьБИН_ИИН);
		
	ИначеЕсли ПеречислениеПодотчетнику_Есть = "1" Тогда
		
		ДобавитьДанныеПеречислениеПодотчетнику(Буфер, СтруктураДокумента, КоллекцияСвойств, Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях, ПроверятьРНН, ПроверятьБИН_ИИН);
		
	Иначе
		
		Для каждого ВыгружаемыйРеквизит из КоллекцияСвойств Цикл
			
			Если Экспорт_Выгружаемые.Свойство(ВыгружаемыйРеквизит.Имя) = Истина Тогда
				
				Значение = ПривестиЗначение(СтруктураДокумента[ВыгружаемыйРеквизит.Имя]);
				
				Если НЕ ПустаяСтрока(Значение) Тогда
					ДобавитьВСтроку(Буфер, ВыгружаемыйРеквизит.Имя + "=" + Значение);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДобавитьВСтроку(Буфер, "Валюта=" + СокрЛП(СтруктураДокумента.СчетОрганизации.ВалютаДенежныхСредств.Наименование));
	
	СписокОтветственных = ПолучитьСписокОтветственныхЛицОрганизации(Организация, СтруктурноеПодразделение);
	
	Для Каждого СтрокаОтв Из СписокОтветственных Цикл
		
		Если СтрокаОтв.Отв = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда
			
			ФИО      = СтрокаОтв.Наименование;
			Фамилия  = ВыделитьСлово(ФИО, 1);
			Имя      = ВыделитьСлово(ФИО, 2);
			Отчество = ВыделитьСлово(ФИО, 3);
			
			ДобавитьВСтроку(Буфер, "ГлавныйБухгалтер=" + (СокрЛП(Фамилия) + " " + Лев(Имя,1) + ". " + Лев(Отчество,1) + "."));
			
		КонецЕсли;
		
		Если СтрокаОтв.Отв = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда
			
			ФИО      = СтрокаОтв.Наименование;
			Фамилия  = ВыделитьСлово(ФИО, 1);
			Имя      = ВыделитьСлово(ФИО, 2);
			Отчество = ВыделитьСлово(ФИО, 3);
			
			ДобавитьВСтроку(Буфер, "Руководитель=" + (СокрЛП(Фамилия) + " " + Лев(Имя,1) + ". " + Лев(Отчество,1) + "."));
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьВСтроку(Буфер, "КонецДокумента");
	
	Возврат Буфер;
	
КонецФункции

Процедура ЗаписатьСтруктуруВXML(ЗаписьXML, СтруктураДляЗаписи, ИмяУзла)
	
	ЗаписатьXMLОбъект(ЗаписьXML, ИмяУзла,, 1,);
	
	Для Каждого ЭлементСтруктуры Из СтруктураДляЗаписи Цикл
		
		ИмяЭлемента = ЭлементСтруктуры.Ключ;
		Если Найти(ИмяЭлемента, "БанкИИК") > 0 Тогда
			ИмяЭлемента = "КоррСчет";
		КонецЕсли;
		
		Если Найти(ИмяЭлемента, "ПлательщикБанк") > 0 Тогда
			ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "ПлательщикБанк", "");
		КонецЕсли;
		
		Если Найти(ИмяЭлемента, "Плательщик") > 0 Тогда
			ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "Плательщик", "");
		КонецЕсли;
		
		Если Найти(ИмяЭлемента, "ПолучательБанк") > 0 Тогда
			ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "ПолучательБанк", "");
		КонецЕсли;
		
		Если Найти(ИмяЭлемента, "Получатель") > 0 Тогда
			ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "Получатель", "");
		КонецЕсли;
		
		ЗаписатьXMLОбъект(ЗаписьXML, ИмяЭлемента, ЭлементСтруктуры.Значение,,,);
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ЗаписатьXMLОбъект(ЗаписьXML, ИмяОбъекта, ТекстОбъекта = "", НеЗакрывать = 0, СписокАтрибутов = Неопределено, НеПриводитьВСтроку = Ложь)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента(СокрЛП(ИмяОбъекта));
	
	Если Не (СписокАтрибутов = Неопределено) Тогда
		Для Каждого Атрибут Из СписокАтрибутов Цикл
			ЗаписьXML.ЗаписатьАтрибут(СокрЛП(Атрибут.Ключ), СокрЛП(Атрибут.Значение));
		КонецЦикла;
	КонецЕсли;
	
	Если НеЗакрывать = 0 Тогда
		
		Если Не НеПриводитьВСтроку Тогда
			ЗаписьXML.ЗаписатьТекст(СокрЛП(ТекстОбъекта));
		Иначе
			
			Если ТипЗнч(ТекстОбъекта) = Тип("Дата") Тогда
				ТекстЗаписи = ПреобразоватьДату(ТекстОбъекта)
			ИначеЕсли ТипЗнч(ТекстОбъекта) = Тип("Число") Тогда
				ТекстЗаписи = СокрЛП(Формат(ТекстОбъекта, "ЧРД=.; ЧРГ=''; ЧГ=0"));
			ИначеЕсли ТипЗнч(ТекстОбъекта) = Тип("Булево") Тогда
				ТекстЗаписи = ?(ТекстОбъекта=Истина, "true", "false");
			Иначе
				ТекстЗаписи = СокрЛП(ТекстОбъекта);
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьТекст(ТекстЗаписи);
			
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьОбщиеРеквизитыВXML(ЗаписьXML,
	СтруктураДокумента,
	КоллекцияСвойств,
	Экспорт_Выгружаемые,
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях,
	ПлатежныйДокументБезСписка)
	
	Перем НеПреобразовыватьВСтроку;
	
	СтруктураРеквизитовПлательщика      = Новый Структура;
	РеквизитПлательщика                 = Ложь;
	ЗаписатьРеквизитыПлательщика        = Ложь;
	
	СтруктураРеквизитовПолучателя       = Новый Структура;
	РеквизитПолучателя                  = Ложь;
	ЗаписатьРеквизитыПолучателя         = Ложь;
	
	СтруктураРеквизитовБанкаПлательщика = Новый Структура;
	РеквизитБанкаПлательщика            = Ложь;
	ЗаписатьРеквизитыБанкаПлательщика   = Ложь;
	
	СтруктураРеквизитовБанкаПолучателя  = Новый Структура;
	РеквизитБанкаПолучателя             = Ложь;
	ЗаписатьРеквизитыБанкаПолучателя    = Ложь;
	
	РеквизитыПлДок_Плательщик           = "ПлательщикНаименование,ПлательщикРНН,ПлательщикБИН_ИИН,ПлательщикКБЕ,ПлательщикИИК";
	РеквизитыПлДок_Получатель           = "ПолучательНаименование,ПолучательРНН,ПолучательБИН_ИИН,ПолучательКБЕ,ПолучательИИК";
	
	Для каждого ВыгружаемыйРеквизит из КоллекцияСвойств Цикл
		ВыгружатьРеквизит = ?(ПлатежныйДокументБезСписка, Экспорт_Выгружаемые.Свойство(ВыгружаемыйРеквизит.Имя), Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях.Свойство(ВыгружаемыйРеквизит.Имя));
		
		Если ВыгружатьРеквизит = Истина Тогда
			Значение = ПривестиЗначениеXML(СтруктураДокумента, ВыгружаемыйРеквизит.Имя, НеПреобразовыватьВСтроку);
			
			Если НЕ ПустаяСтрока(Значение) Тогда
				Если Найти(РеквизитыПлДок_Плательщик, ВыгружаемыйРеквизит.Имя) > 0
					Или (Найти("ПлательщикБИН_ИИН", ВыгружаемыйРеквизит.Имя) > 0) Тогда
					РеквизитПлательщика = Истина;
					СтруктураРеквизитовПлательщика.Вставить(ВыгружаемыйРеквизит.Имя, Значение);
				Иначе
					Если РеквизитПлательщика Тогда
						ЗаписатьРеквизитыПлательщика = Истина;
						РеквизитПлательщика = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗаписатьРеквизитыПлательщика Тогда
					ЗаписатьРеквизитыПлательщика = Ложь;
					ЗаписатьСтруктуруВXML(ЗаписьXML, СтруктураРеквизитовПлательщика, "Плательщик");
				КонецЕсли;
				
				Если Найти("ПлательщикБанкНаименование,ПлательщикБанкРНН,ПлательщикБанкБИК,ПлательщикБанкБИН_ИИН,ПлательщикБанкИИК", ВыгружаемыйРеквизит.Имя) > 0 Тогда
					РеквизитБанкаПлательщика = Истина;
					СтруктураРеквизитовБанкаПлательщика.Вставить(ВыгружаемыйРеквизит.Имя, Значение);
				Иначе
					Если РеквизитБанкаПлательщика Тогда
						ЗаписатьРеквизитыБанкаПлательщика = Истина;
						РеквизитБанкаПлательщика = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗаписатьРеквизитыБанкаПлательщика Тогда
					ЗаписатьРеквизитыБанкаПлательщика = Ложь;
					ЗаписатьСтруктуруВXML(ЗаписьXML, СтруктураРеквизитовБанкаПлательщика, "БанкПлательщика");
				КонецЕсли;
				
				Если Найти(РеквизитыПлДок_Получатель, ВыгружаемыйРеквизит.Имя) > 0
					Или (Найти("ПолучательБИН_ИИН", ВыгружаемыйРеквизит.Имя) > 0) Тогда
					РеквизитПолучателя = Истина;
					СтруктураРеквизитовПолучателя.Вставить(ВыгружаемыйРеквизит.Имя, Значение);
				Иначе
					Если РеквизитПолучателя Тогда
						ЗаписатьРеквизитыПолучателя = Истина;
						РеквизитПолучателя = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗаписатьРеквизитыПолучателя Тогда
					ЗаписатьРеквизитыПолучателя = Ложь;
					ЗаписатьСтруктуруВXML(ЗаписьXML, СтруктураРеквизитовПолучателя, "Получатель");
				КонецЕсли;
				
				Если Найти("ПолучательБанкНаименование,ПолучательБанкРНН,ПолучательБанкБИК,ПолучательБанкБИН_ИИН,ПолучательБанкИИК", ВыгружаемыйРеквизит.Имя) > 0 Тогда
					РеквизитБанкаПолучателя = Истина;
					СтруктураРеквизитовБанкаПолучателя.Вставить(ВыгружаемыйРеквизит.Имя, Значение);
				Иначе
					Если РеквизитБанкаПолучателя Тогда
						ЗаписатьРеквизитыБанкаПолучателя = Истина;
						РеквизитБанкаПолучателя = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗаписатьРеквизитыБанкаПолучателя Тогда
					ЗаписатьРеквизитыБанкаПолучателя = Ложь;
					ЗаписатьСтруктуруВXML(ЗаписьXML, СтруктураРеквизитовБанкаПолучателя, "БанкПолучателя");
				КонецЕсли;
				
				Если (Не РеквизитПлательщика) И (Не РеквизитПолучателя) И (НЕ РеквизитБанкаПлательщика) И (Не РеквизитБанкаПолучателя) Тогда
					
					ИмяРеквизита = "";
					
					Если ВыгружаемыйРеквизит.Имя = "ПеречислениеПодотчетнику" Тогда
						ИмяРеквизита = "ПеречислениеНаКартСчета";
					Иначе
						ИмяРеквизита = ВыгружаемыйРеквизит.Имя;
					КонецЕсли;
					
					ЗаписатьXMLОбъект(ЗаписьXML, ИмяРеквизита, Значение,,, НеПреобразовыватьВСтроку);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьДанныеПоСотрудникам(ЗаписьXML,
	СтруктураДокумента,
	КоллекцияСвойств,
	Экспорт_Выгружаемые,
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях,
	Экспорт_ВыгружаемыеГЦВП,
	ПроверятьРНН,
	ПроверятьБИН_ИИН,
	НеПреобразовыватьВСтроку,
	ВидДанных)
	
	ЗаписатьОбщиеРеквизитыВXML(ЗаписьXML, СтруктураДокумента, КоллекцияСвойств, Экспорт_Выгружаемые, Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях, Ложь);
	
	ЗаписатьXMLОбъект(ЗаписьXML,"СписокСотрудников",,1);
	
	Если ВидДанных <> "ЗП" Тогда
		Для каждого ВыгружаемыйРеквизит из КоллекцияСвойств Цикл
			Если Экспорт_ВыгружаемыеГЦВП.Свойство(ВыгружаемыйРеквизит.Имя) = Истина Тогда
				
				Значение = ПривестиЗначениеXML(СтруктураДокумента, ВыгружаемыйРеквизит.Имя, НеПреобразовыватьВСтроку);
				
				Если НЕ ПустаяСтрока(Значение) Тогда
					ЗаписатьXMLОбъект(ЗаписьXML, ВыгружаемыйРеквизит.Имя, Значение, , , НеПреобразовыватьВСтроку);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если ВидДанных = "ОПВ" Тогда
		ТекстЗапроса = СформироватьТекстЗапросаПоОПВ();
	ИначеЕсли ВидДанных = "СО" Тогда
		ТекстЗапроса = СформироватьТекстЗапросаПоСО();
	Иначе
		ТекстЗапроса = СформироватьТекстЗапросаПоЗП();
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Документ",СтруктураДокумента.Документ);
	Если ВидДанных = "ЗП" Тогда
		Запрос.УстановитьПараметр("Дата",СтруктураДокумента.Документ.Дата);
	КонецЕсли;
	
	ВыборкаСотрудников = Запрос.Выполнить().Выбрать();
	
	ОбщаяСумма = 0;
	Пока ВыборкаСотрудников.Следующий() Цикл
		Если НЕ ПустаяСтрока(ВыборкаСотрудников.Сотрудник) Тогда
			
			Если ВидДанных = "ЗП" Тогда
				Если ПустаяСтрока(ВыборкаСотрудников.СотрудникКартСчет) Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не указан номер карт-счета сотрудника:%1 %2 %3'"), СокрЛП(ВыборкаСотрудников.Фамилия), СокрЛП(ВыборкаСотрудников.Имя), СокрЛП(ВыборкаСотрудников.Отчество));
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
			
			Если ВидДанных = "ЗП" Тогда
				ЗаписатьXMLОбъект(ЗаписьXML,"Сотрудник",,1, Новый Структура("ФИО", СокрЛП(ВыборкаСотрудников.Фамилия) + " " + СокрЛП(ВыборкаСотрудников.Имя) + " " + СокрЛП(ВыборкаСотрудников.Отчество)));
			Иначе
				ЗаписатьXMLОбъект(ЗаписьXML,"Сотрудник",,1, Новый Структура("ФИО", ВыборкаСотрудников.Сотрудник));
			КонецЕсли;
			
			Если ВидДанных <> "ЗП" Тогда
				Если НЕ ПустаяСтрока(ВыборкаСотрудников.РегистрацияФамилия) Тогда
					ЗаписатьXMLОбъект(ЗаписьXML,"Регистрация",СокрЛП(ВыборкаСотрудников.РегистрацияФамилия)+" "+СокрЛП(ВыборкаСотрудников.РегистрацияИмя)+" "+СокрЛП(ВыборкаСотрудников.РегистрацияОтчество));
				Иначе
					ЗаписатьXMLОбъект(ЗаписьXML,"Регистрация",ВыборкаСотрудников.Сотрудник);
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ВыборкаСотрудников.СотрудникРНН) Тогда
				ЗаписатьXMLОбъект(ЗаписьXML,"СотрудникРНН",ВыборкаСотрудников.СотрудникРНН);
			ИначеЕсли ПроверятьРНН Тогда // Проверим стоит ли настройка проверки заполненности РНН.
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнен РНН сотрудника:%1'"), ВыборкаСотрудников.Сотрудник);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ВыборкаСотрудников.СотрудникБИН_ИИН) Тогда
				ЗаписатьXMLОбъект(ЗаписьXML,"СотрудникБИН_ИИН",ВыборкаСотрудников.СотрудникБИН_ИИН);
			ИначеЕсли ПроверятьБИН_ИИН Тогда // Проверим стоит ли настройка проверки заполненности БИН/ИИН.
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнен ИИН сотрудника:%1'"), ВыборкаСотрудников.Сотрудник);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			Если ВидДанных = "ЗП" Тогда
				ЗаписатьXMLОбъект(ЗаписьXML,"СотрудникНомерКартСчета",ВыборкаСотрудников.СотрудникКартСчет);
			Иначе
				Если НЕ ПустаяСтрока(ВыборкаСотрудников.СотрудникСИК) Тогда
					ЗаписатьXMLОбъект(ЗаписьXML,"СотрудникСИК",ВыборкаСотрудников.СотрудникСИК);
				ИначеЕсли ПроверятьРНН Тогда // Проверим стоит ли настройка проверки заполненности РНН.
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнен СИК сотрудника:%1'"), ВыборкаСотрудников.Сотрудник);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				
				Если НЕ ВыборкаСотрудников.СотрудникДатаРождения = Дата(1,1,1) Тогда
					ЗаписатьXMLОбъект(ЗаписьXML,"СотрудникДатаРождения",ВыборкаСотрудников.СотрудникДатаРождения,,,Истина);
				Иначе
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнена дата рождения сотрудника:%1'"), ВыборкаСотрудников.Сотрудник);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				
				Если НЕ ВыборкаСотрудников.Период = Дата(1,1,1) Тогда
					ЗаписатьXMLОбъект(ЗаписьXML,"Период",НРег(Формат(ВыборкаСотрудников.Период, "ДФ='ММгггг'")));
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ВыборкаСотрудников.Сумма) Тогда
				ЗаписатьXMLОбъект(ЗаписьXML,"Сумма",ВыборкаСотрудников.Сумма,,,Истина);
				ОбщаяСумма = ОбщаяСумма + ВыборкаСотрудников.Сумма;
			Иначе
				Если ВидДанных = "ЗП" Тогда
					ТекстСообщения = НСтр("ru = 'Не заполнена сумма заработной платы сотрудника:%1'");
				ИначеЕсли ВидДанных = "ОПВ" Тогда
					ТекстСообщения = НСтр("ru = 'Не заполнена сумма пенсионных перечислений сотрудника: %1 за %2 г.'");
				Иначе
					ТекстСообщения = НСтр("ru = 'Не заполнена сумма социальных отчислений сотрудника: %1 за %2 г.'");
				КонецЕсли;
				ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаСотрудников.Сотрудник, НРег(Формат(ВыборкаСотрудников.Период, "ДФ='ММММ гггг'"))));
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьКонецЭлемента(); // закроем элемент "СОТРУДНИК".
		КонецЕсли;
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // закроем элемент "СПИСОКСОТРУДНИКОВ".
	
	Если ВидДанных = "ЗП" Тогда
		Если ОбщаяСумма <> СтруктураДокумента.Документ.СуммаДокумента Тогда
			
			СуммаКомиссии = СтруктураДокумента.Документ.СуммаДокумента - ОбщаяСумма;
			
			ЗаписатьXMLОбъект(ЗаписьXML,"СуммаКомиссииБанка",СуммаКомиссии,,,Истина);
			
			Отбор = Новый Структура;
			Отбор.Вставить("Организация", СтруктураДокумента.Документ.Организация);
			Отбор.Вставить("Банк", СтруктураДокумента.Документ.СчетКонтрагента.Банк);
			
			ЗначенияРегистра = РегистрыСведений.КодыОрганизацийВБанковскойСистеме.Получить(Отбор);
			ЗаписатьXMLОбъект(ЗаписьXML,"КодОрганизацииВБанковскойСистеме", ЗначенияРегистра.КодОрганизации);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДанныеПеречислениеПоИЛ(ЗаписьXML,
	СтруктураДокумента,
	КоллекцияСвойств,
	Экспорт_Выгружаемые,
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях,
	ПроверятьРНН,
	ПроверятьБИН_ИИН,
	КонПериода)
	
	ЗаписатьОбщиеРеквизитыВXML(ЗаписьXML,
		СтруктураДокумента,
		КоллекцияСвойств,
		Экспорт_Выгружаемые,
		Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях,
		Ложь);
	
	ИмяРеквизитаБИК = Справочники.Банки.ПолучитьИмяРеквизитаБИКБанка(КонПериода);
	
	ЗаписатьXMLОбъект(ЗаписьXML, "СписокПолучателейПоИЛ", , 1);
	
	Запрос = Новый Запрос;
	Запрос.Текст = СформироватьТекстЗапросаПоИЛ(ИмяРеквизитаБИК);
	
	Запрос.УстановитьПараметр("Документ",СтруктураДокумента.Документ); 
	Запрос.УстановитьПараметр("Дата", СтруктураДокумента.Документ.Дата);
	
	ВыборкаПолучателей = Запрос.Выполнить().Выбрать();
	
	ОбщаяСумма = 0;
	Пока ВыборкаПолучателей.Следующий() Цикл
		
		Если НЕ ПустаяСтрока(ВыборкаПолучателей.ПолучательПоИЛФИО) Тогда
			
			ЗаписатьXMLОбъект(ЗаписьXML, "ПолучательПоИЛ" , , 1, Новый Структура("ФИО", СокрЛП(ВыборкаПолучателей.ПолучательПоИЛФИО)));
			
			Если НЕ ПустаяСтрока(ВыборкаПолучателей.ПолучательПоИЛРНН) Тогда
				ЗаписатьXMLОбъект(ЗаписьXML,"ПолучательПоИЛРНН",ВыборкаПолучателей.ПолучательПоИЛРНН);
			ИначеЕсли ПроверятьРНН Тогда // Проверим стоит ли настройка проверки заполненности РНН.
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнен РНН получателя по исполнительным листам:%1'"), СокрЛП(ВыборкаПолучателей.ПолучательПоИЛФИО));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ВыборкаПолучателей.ПолучательПоИЛБИН_ИИН) Тогда
				ЗаписатьXMLОбъект(ЗаписьXML,"ПолучательПоИЛБИН_ИИН",ВыборкаПолучателей.ПолучательПоИЛБИН_ИИН);
			ИначеЕсли ПроверятьБИН_ИИН Тогда // Проверим стоит ли настройка проверки заполненности БИН/ИИН.
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнен БИН/ИИН получателя по исполнительным листам:%1'"), СокрЛП(ВыборкаПолучателей.ПолучательПоИЛФИО));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			Если ВыборкаПолучателей.ПеречислятьЧерез = Перечисления.СпособыПеречисленияПоИсполнительномуЛисту.ЧерезБанк Тогда
				ЗаписатьXMLОбъект(ЗаписьXML,"ПолучательПоИЛБанкНаименование",ВыборкаПолучателей.БанкНаименвание);
				ЗаписатьXMLОбъект(ЗаписьXML,"ПолучательПоИЛБанкБИК",ВыборкаПолучателей.БанкБИК);
				ЗаписатьXMLОбъект(ЗаписьXML,"ПолучательПоИЛИИК",ВыборкаПолучателей.ПолучательПоИЛИИК);
			Иначе
				ЗаписатьXMLОбъект(ЗаписьXML,"ПолучательПоИЛАдрес",СокрЛП(ВыборкаПолучателей.ПолучательПоИЛАдрес));
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ВыборкаПолучателей.СуммаВзаиморасчетов) Тогда
				ЗаписатьXMLОбъект(ЗаписьXML,"Сумма",ВыборкаПолучателей.СуммаВзаиморасчетов,,,Истина);
				ОбщаяСумма = ОбщаяСумма + ВыборкаПолучателей.СуммаВзаиморасчетов;
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнена сумма к перечислению по исполнительным листам для получателя:%1'"), СокрЛП(ВыборкаПолучателей.ПолучательПоИЛФИО));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьКонецЭлемента(); // закроем элемент "ПОЛУЧАТЕЛЬПОИЛ".
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // закроем элемент "СПИСОКПОЛУЧАТЕЛЕЙПОИЛ".
	
	Если ОбщаяСумма <> СтруктураДокумента.Документ.СуммаДокумента Тогда
		
		СуммаКомиссии = СтруктураДокумента.Документ.СуммаДокумента - ОбщаяСумма;
		ЗаписатьXMLОбъект(ЗаписьXML,"СуммаКомиссииБанка",СуммаКомиссии,,,Истина);
		
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", СтруктураДокумента.Документ.Организация);
		Отбор.Вставить("Банк", СтруктураДокумента.Документ.СчетКонтрагента.Банк);
		
		ЗначенияРегистра = РегистрыСведений.КодыОрганизацийВБанковскойСистеме.Получить(Отбор);
		
		Если ЗначенияРегистра <> Неопределено Тогда
			Если Не ПустаяСтрока(ЗначенияРегистра.КодОрганизации) Тогда
				ЗаписатьXMLОбъект(ЗаписьXML,"КодОрганизацииВБанковскойСистеме", ЗначенияРегистра.КодОрганизации);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДанныеПеречислениеПодотчетнику(ЗаписьXML, 
	СтруктураДокумента,
	КоллекцияСвойств,
	Экспорт_Выгружаемые,
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях, 
	ПроверятьРНН,
	ПроверятьБИН_ИИН)
	
	ЗаписатьОбщиеРеквизитыВXML(
		ЗаписьXML,
		СтруктураДокумента,
		КоллекцияСвойств,
		Экспорт_Выгружаемые,
		Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях,
		Ложь);
	
	ЗаписатьXMLОбъект(ЗаписьXML, "СПИСОКСОТРУДНИКОВ" , , 1);
	
	Запрос = Новый Запрос;
	Запрос.Текст = СформироватьТекстЗапросаПоПеречислениеПодотчетникам();
	
	Запрос.УстановитьПараметр("Документ", СтруктураДокумента.Документ); 
	Запрос.УстановитьПараметр("Дата",     СтруктураДокумента.Документ.Дата);
	
	ВыборкаПодотчетников = Запрос.Выполнить().Выбрать();
	
	ОбщаяСумма = 0;
	Пока ВыборкаПодотчетников.Следующий() Цикл
		
		Если НЕ ПустаяСтрока(ВыборкаПодотчетников.НаименованиеФизЛица) Тогда
			
			Если ПустаяСтрока(ВыборкаПодотчетников.НомерКартСчета) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не указан номер карт-счета подотчетника:%1'"), ВыборкаПодотчетников.НаименованиеФизЛица);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			ЗаписатьXMLОбъект(ЗаписьXML,"СОТРУДНИК",,1, Новый Структура("ФИО", СокрЛП(ВыборкаПодотчетников.Фамилия) + " " + СокрЛП(ВыборкаПодотчетников.Имя) + " " + СокрЛП(ВыборкаПодотчетников.Отчество)));
			
			Если НЕ ПустаяСтрока(ВыборкаПодотчетников.РНН) Тогда
				ЗаписатьXMLОбъект(ЗаписьXML,"СотрудникРНН",ВыборкаПодотчетников.РНН);
			ИначеЕсли ПроверятьРНН Тогда // Проверим стоит ли настройка проверки заполненности РНН.
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнен РНН подотчетника:%1'"), ВыборкаПодотчетников.НаименованиеФизЛица);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ВыборкаПодотчетников.ПодотчетникБИН_ИИН) Тогда
				ЗаписатьXMLОбъект(ЗаписьXML,"СотрудникБИН_ИИН", ВыборкаПодотчетников.ПодотчетникБИН_ИИН);
			ИначеЕсли ПроверятьБИН_ИИН Тогда // Проверим стоит ли настройка проверки заполненности БИН/ИИН.
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнен БИН/ИИН подотчетника:%1'"), ВыборкаПодотчетников.НаименованиеФизЛица);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			ЗаписатьXMLОбъект(ЗаписьXML,"СотрудникНомерКартСчета",ВыборкаПодотчетников.НомерКартСчета);
			Если НЕ ПустаяСтрока(ВыборкаПодотчетников.СуммаКПеречислению) Тогда
				ЗаписатьXMLОбъект(ЗаписьXML,"Сумма",ВыборкаПодотчетников.СуммаКПеречислению,,,Истина);
				ОбщаяСумма = ОбщаяСумма + ВыборкаПодотчетников.СуммаКПеречислению;
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнена сумма выдачи в подотчет для подотчетника:%1'"), ВыборкаПодотчетников.НаименованиеФизЛица);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьКонецЭлемента(); // закроем элемент "Подотчетник".
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // закроем элемент "СписокПодотчеттников".
	
	Если ОбщаяСумма <> СтруктураДокумента.Документ.СуммаДокумента Тогда
		СуммаКомиссии = СтруктураДокумента.Документ.СуммаДокумента - ОбщаяСумма;
		ЗаписатьXMLОбъект(ЗаписьXML,"СуммаКомиссииБанка",СуммаКомиссии,,,Истина);
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", СтруктураДокумента.Документ.Организация);
		Отбор.Вставить("Банк", СтруктураДокумента.Документ.СчетКонтрагента.Банк);
		ЗначеияРегистра = РегистрыСведений.КодыОрганизацийВБанковскойСистеме.Получить(Отбор);
		Если ЗначеияРегистра <> Неопределено Тогда
			Если Не ПустаяСтрока(ЗначеияРегистра.КодОрганизации) Тогда
				ЗаписатьXMLОбъект(ЗаписьXML,"КодОрганизацииВБанковскойСистеме", ЗначеияРегистра.КодОрганизации);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьСекциюДокументВXML(ЗаписьXML, СтруктураДокумента, КоллекцияСвойств, КонПериода, СтруктурноеПодразделение, Организация, НастройкаЗаполнения)
	
	Перем НеПреобразовыватьВСтроку;
	
	ПроверятьРНН	 = ПолучитьНастройкуЗаполнения(НастройкаЗаполнения, "ПроверятьРНН");
	ПроверятьБИН_ИИН = ПолучитьНастройкуЗаполнения(НастройкаЗаполнения, "ПроверятьБИН_ИИН");
	
	ИмяРеквизитаБИК = Справочники.Банки.ПолучитьИмяРеквизитаБИКБанка(КонПериода);
	
	ЗаписатьXMLОбъект(ЗаписьXML, "ПлатежныйДокумент", , 1, Новый Структура("ВидДокумента", ПолучитьТегСекции(СтруктураДокумента.Документ)));
	
	ПенсионныеОтчисления_Есть 	 	= ПривестиЗначение(СтруктураДокумента["ПенсионныеОтчисления"]);
	СоциальныеОтчисления_Есть	 	= ПривестиЗначение(СтруктураДокумента["СоциальныеОтчисления"]);
	ПеречислениеНаКартСчета_Есть 	= ПривестиЗначение(СтруктураДокумента["ПеречислениеНаКартСчета"]);
	ПеречислениеПоИЛ_Есть 		 	= ПривестиЗначение(СтруктураДокумента["ПеречислениеПоИЛ"]);
	ПеречислениеПодотчетнику_Есть	= ПривестиЗначение(СтруктураДокумента["ПеречислениеПодотчетнику"]);
	
	Экспорт_ВыгружаемыеГЦВП 					= СформироватьСтруктуруЭкспорта_ВыгружаемыеГЦВП();
	Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях	= СформироватьСтруктуруЭкспорта_ВыгружаемыеПриПенсИСоцОтчислениях();
	Экспорт_Выгружаемые							= СформироватьСтруктуруЭкспорта_Выгружаемые();
	
	Если ПенсионныеОтчисления_Есть = "1" Тогда
		
		ЗаписатьДанныеПоСотрудникам(ЗаписьXML,
									СтруктураДокумента,
									КоллекцияСвойств,
									Экспорт_Выгружаемые,
									Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях,
									Экспорт_ВыгружаемыеГЦВП,
									ПроверятьРНН,
									ПроверятьБИН_ИИН,
									НеПреобразовыватьВСтроку,
									"ОПВ");
		
	ИначеЕсли СоциальныеОтчисления_Есть = "1" Тогда
		
		ЗаписатьДанныеПоСотрудникам(ЗаписьXML,
									СтруктураДокумента,
									КоллекцияСвойств,
									Экспорт_Выгружаемые,
									Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях,
									Экспорт_ВыгружаемыеГЦВП,
									ПроверятьРНН,
									ПроверятьБИН_ИИН,
									НеПреобразовыватьВСтроку,
									"СО");
		
	ИначеЕсли ПеречислениеНаКартСчета_Есть = "1" Тогда
		
		ЗаписатьДанныеПоСотрудникам(ЗаписьXML,
									СтруктураДокумента,
									КоллекцияСвойств,
									Экспорт_Выгружаемые,
									Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях,
									Экспорт_ВыгружаемыеГЦВП,
									ПроверятьРНН,
									ПроверятьБИН_ИИН,
									НеПреобразовыватьВСтроку,
									"ЗП");
		
	ИначеЕсли ПеречислениеПоИЛ_Есть = "1" Тогда
		
		ЗаписатьДанныеПеречислениеПоИЛ(ЗаписьXML,
									СтруктураДокумента,
									КоллекцияСвойств,
									Экспорт_Выгружаемые,
									Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях,
									ПроверятьРНН,
									ПроверятьБИН_ИИН,
									КонПериода);
		
	ИначеЕсли ПеречислениеПодотчетнику_Есть = "1" Тогда
		
		ЗаписатьДанныеПеречислениеПодотчетнику(ЗаписьXML,
									СтруктураДокумента,
									КоллекцияСвойств,
									Экспорт_Выгружаемые,
									Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях,
									ПроверятьРНН,
									ПроверятьБИН_ИИН);
		
	Иначе
		
		ЗаписатьОбщиеРеквизитыВXML(ЗаписьXML,
									СтруктураДокумента,
									КоллекцияСвойств,
									Экспорт_Выгружаемые,
									Экспорт_ВыгружаемыеПриПенсИСоцОтчислениях,
									Истина)
		
	КонецЕсли;
	
	ЗаписатьXMLОбъект(ЗаписьXML, "Валюта", СокрЛП(СтруктураДокумента.СчетОрганизации.ВалютаДенежныхСредств.Наименование));
	
	СписокОтветственных = ПолучитьСписокОтветственныхЛицОрганизации(Организация, СтруктурноеПодразделение);
	
	Для Каждого СтрокаОтв Из СписокОтветственных Цикл
		
		Если СтрокаОтв.Отв = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда 
			
			ФИО      = СтрокаОтв.Наименование;
			Фамилия  = ВыделитьСлово(ФИО, 1);
			Имя      = ВыделитьСлово(ФИО, 2);
			Отчество = ВыделитьСлово(ФИО, 3);
			
			ЗаписатьXMLОбъект(ЗаписьXML, "ГлавныйБухгалтер", (СокрЛП(Фамилия) + " " + Лев(Имя,1) + ". " + Лев(Отчество,1)+ "."));
			
		КонецЕсли;
		
		Если СтрокаОтв.Отв = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда 
			
			ФИО      = СтрокаОтв.Наименование;
			Фамилия  = ВыделитьСлово(ФИО, 1);
			Имя      = ВыделитьСлово(ФИО, 2);
			Отчество = ВыделитьСлово(ФИО, 3);
			
			ЗаписатьXMLОбъект(ЗаписьXML, "Руководитель", (СокрЛП(Фамилия) + " " + Лев(Имя,1) + ". " + Лев(Отчество,1)+ "."));
			
		КонецЕсли;
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // закроем элемент "СекцияДокумент".
	
КонецПроцедуры

#КонецОбласти

#Область Загрузка

#Область НастройкиЗагрузки

Функция НовыйНастройкиОбменСБанком() Экспорт
	
	Настройки = Новый Структура;
	Настройки.Вставить("СозданиеДокументов",            НовыйНастройкиСозданияДокументов());
	Настройки.Вставить("СтатьиДвиженияДенежныхСредств", Новый Структура);
	Настройки.Вставить("ЗаполнениеНовыхЭлементов",      Новый Соответствие); // Ключ - Тип ссылки; Значение - структура, содержащая значения заполнения
	Настройки.Вставить("Кодировка",                     Неопределено);       // Кодировка файла
	
	Настройки.СтатьиДвиженияДенежныхСредств.Вставить("Поступило", ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка"));
	Настройки.СтатьиДвиженияДенежныхСредств.Вставить("Списано",   ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка"));
	
	Возврат Настройки;
	
КонецФункции

// Заполняет Настройки переданными данными, обеспечивая целостность настроек.
//
// Параметры:
//  Настройки		 - см. НовыйНастройкиОбменСБанком()
//  ДанныеЗаполнения - см. НовыйНастройкиОбменСБанком(). Допускается передавать и другие значения (коллекции).
// 
// Возвращаемое значение:
//  Булево - Истина, если что-то заполнили; Ложь, если ДанныеЗаполнения пустые или не пригодны для заполнения.
//
Функция ЗаполнитьНастройкиОбменСБанком(Настройки, ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения = Неопределено Или ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЧтоТоЗаполнили = Ложь;
	
	Если ДанныеЗаполнения.Свойство("СозданиеДокументов")
		И ТипЗнч(ДанныеЗаполнения.СозданиеДокументов) = Тип("Соответствие") Тогда
		
		Для Каждого Настройка Из Настройки.СозданиеДокументов Цикл
			ЗначениеСохраненнойНастройки = ДанныеЗаполнения.СозданиеДокументов[Настройка.Ключ];
			Если ТипЗнч(ЗначениеСохраненнойНастройки) <> Тип("Структура")
				Или Не ЗначениеЗаполнено(ЗначениеСохраненнойНастройки) Тогда
				Продолжить;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Настройка.Значение, ЗначениеСохраненнойНастройки);
			ЧтоТоЗаполнили = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("СтатьиДвиженияДенежныхСредств")
		И ТипЗнч(ДанныеЗаполнения.СтатьиДвиженияДенежныхСредств) = Тип("Структура")
		И ЗначениеЗаполнено(ДанныеЗаполнения.СтатьиДвиженияДенежныхСредств) Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
			Настройки.СтатьиДвиженияДенежныхСредств,
			ДанныеЗаполнения.СтатьиДвиженияДенежныхСредств,
			Истина);
			
		ЧтоТоЗаполнили = Истина;
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ЗаполнениеНовыхЭлементов")
		И ТипЗнч(ДанныеЗаполнения.ЗаполнениеНовыхЭлементов) = Тип("Соответствие") Тогда
		
		Для Каждого СохраненнаяНастройка Из ДанныеЗаполнения.ЗаполнениеНовыхЭлементов Цикл
			Если ТипЗнч(СохраненнаяНастройка.Значение) <> Тип("Структура") 
				Или Не ЗначениеЗаполнено(СохраненнаяНастройка.Значение) Тогда
				Продолжить;
			КонецЕсли;
			Настройки.ЗаполнениеНовыхЭлементов.Вставить(СохраненнаяНастройка.Ключ, СохраненнаяНастройка.Значение);
		КонецЦикла;
		
		ЧтоТоЗаполнили = Истина;
		
	КонецЕсли;
	
	Возврат ЧтоТоЗаполнили;
	
КонецФункции

Функция НовыйНастройкиСозданияДокументов()
	
	Настройки = Новый Соответствие;
	Настройки.Вставить(Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее"),              НовыйНастройкаСозданияДокументов());
	Настройки.Вставить(Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств"),    НовыйНастройкаСозданияДокументов());
	Настройки.Вставить(Тип("ДокументСсылка.ПлатежноеПоручениеВходящее"),               НовыйНастройкаСозданияДокументов());
	Настройки.Вставить(Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств"), НовыйНастройкаСозданияДокументов());
	
	Возврат Настройки;
	
КонецФункции

Функция НовыйНастройкаСозданияДокументов()
	
	Настройка = Новый Структура;
	Настройка.Вставить("ПроводитьДокумент", Истина);
	Возврат Настройка;
	
КонецФункции

Функция ЗначениеНастройкиСозданияДокументов(Настройки, Имя, ТипДокумента)
	
	Настройка = Настройки.СозданиеДокументов[ТипДокумента];
	Если Настройка = Неопределено Тогда
		Настройка = НовыйНастройкаСозданияДокументов();
	КонецЕсли;
	
	ЗначениеНастройки = Настройка[Имя];
	
	Возврат ЗначениеНастройки;
	
КонецФункции

#КонецОбласти

#Область ПодготовкаЗагрузки

Функция СформироватьСтруктуруЗаголовковИмпорта()
	
	СтруктураЗаголовков = Новый Структура;
	
	СтруктураЗаголовков.Вставить("Загрузить"                 , "_");
	СтруктураЗаголовков.Вставить("Проведен"                  , НСтр("ru = 'Проведен'"));
	СтруктураЗаголовков.Вставить("Готовность"                , НСтр("ru = 'Готовность'"));
	
	СтруктураЗаголовков.Вставить("НомерДок"                  , НСтр("ru = '№ Документа'"));
	СтруктураЗаголовков.Вставить("НомерДокумента"            , НСтр("ru = 'Номер'"));
	СтруктураЗаголовков.Вставить("ДатаДок"                   , НСтр("ru = 'Дата документа'"));
	СтруктураЗаголовков.Вставить("ДатаДокумента"             , НСтр("ru = 'Дата (из файла)'"));
	СтруктураЗаголовков.Вставить("Операция"                  , НСтр("ru = 'Операция'"));
	СтруктураЗаголовков.Вставить("СчетОрганизации"           , НСтр("ru = 'Р/с организации'"));
	СтруктураЗаголовков.Вставить("СуммаДокумента"            , НСтр("ru = 'Сумма'"));
	СтруктураЗаголовков.Вставить("Сумма"                     , НСтр("ru = 'Сумма (из файла)'"));
	
	СтруктураЗаголовков.Вставить("Контрагент"                , НСтр("ru = 'Контрагент'"));
	СтруктураЗаголовков.Вставить("СчетКонтрагента"           , НСтр("ru = 'Р/с контрагента'"));
	
	СтруктураЗаголовков.Вставить("ДатаОперации"              , НСтр("ru = 'Дата операции'"));
	СтруктураЗаголовков.Вставить("СуммаПриход"               , НСтр("ru = 'Сумма приход'"));
	СтруктураЗаголовков.Вставить("СуммаРасход"               , НСтр("ru = 'Сумма расход'"));
	
	СтруктураЗаголовков.Вставить("Списано"                   , НСтр("ru = 'Дата списания'"));
	СтруктураЗаголовков.Вставить("ДатаСписано"               , НСтр("ru = 'Списано'"));
	СтруктураЗаголовков.Вставить("Поступило"                 , НСтр("ru = 'Дата поступления'"));
	СтруктураЗаголовков.Вставить("ДатаПоступило"             , НСтр("ru = 'Поступило'"));
	
	СтруктураЗаголовков.Вставить("ПлательщикНаименование"    , НСтр("ru = 'Отправитель'"));
	СтруктураЗаголовков.Вставить("ПлательщикРНН"             , НСтр("ru = 'РНН отправителя'"));
	СтруктураЗаголовков.Вставить("ПлательщикКБЕ"             , НСтр("ru = 'Кбе отправителя'"));
	СтруктураЗаголовков.Вставить("ПлательщикИИК"             , НСтр("ru = 'Расчетный счет отправителя'"));
	СтруктураЗаголовков.Вставить("ПлательщикБИН_ИИН"         , НСтр("ru = 'БИН / ИИН отправителя'"));
	
	СтруктураЗаголовков.Вставить("ПлательщикБанкНаименование", НСтр("ru = 'Наименование банка отправителя'"));
	СтруктураЗаголовков.Вставить("ПлательщикБанкРНН"         , НСтр("ru = 'РНН банка-отправителя'"));
	СтруктураЗаголовков.Вставить("ПлательщикБанкБИН_ИИН"     , НСтр("ru = 'БИН / ИИН банка отправителя'"));
	СтруктураЗаголовков.Вставить("ПлательщикБанкБИК"         , НСтр("ru = 'БИК банка-отправителя'"));
	СтруктураЗаголовков.Вставить("ПлательщикБанкИИК"         , НСтр("ru = 'ИИК банка-отправителя'"));
	
	СтруктураЗаголовков.Вставить("ПолучательНаименование"    , НСтр("ru = 'Бенефициар'"));
	СтруктураЗаголовков.Вставить("ПолучательРНН"             , НСтр("ru = 'Кбе бенефициара'"));
	СтруктураЗаголовков.Вставить("ПолучательКБЕ"             , НСтр("ru = 'ИИК бенефициара'"));
	СтруктураЗаголовков.Вставить("ПолучательИИК"             , НСтр("ru = 'РНН бенефициара'"));
	СтруктураЗаголовков.Вставить("ПолучательБИН_ИИН"         , НСтр("ru = 'БИН / ИИН бенефициара'"));
	
	СтруктураЗаголовков.Вставить("ПолучательБанкНаименование", НСтр("ru = 'Наименование банка получателя'"));
	СтруктураЗаголовков.Вставить("ПолучательБанкРНН"         , НСтр("ru = 'РНН банка-получателя'"));	
	СтруктураЗаголовков.Вставить("ПолучательБанкБИН_ИИН"     , НСтр("ru = 'БИН / ИИН банка получателя'"));
	СтруктураЗаголовков.Вставить("ПолучательБанкБИК"         , НСтр("ru = 'БИК банка-получателя'"));
	СтруктураЗаголовков.Вставить("ПолучательБанкИИК"         , НСтр("ru = 'ИИК банка-получателя'"));
	
	СтруктураЗаголовков.Вставить("БанкПосредникНаименование" , НСтр("ru = 'Наименование банка посредника'"));
	СтруктураЗаголовков.Вставить("БанкПосредникРНН"          , НСтр("ru = 'РНН банка-посредника'"));
	СтруктураЗаголовков.Вставить("БанкПосредникБИН_ИИН"      , НСтр("ru = 'БИН / ИИН банка посредника'"));
	СтруктураЗаголовков.Вставить("БанкПосредникБИК"          , НСтр("ru = 'БИК банка-посредника'"));
	СтруктураЗаголовков.Вставить("БанкПосредникИИК"          , НСтр("ru = 'ИИК банка-посредника'"));
	
	СтруктураЗаголовков.Вставить("ДатаПолученияТовара"       , НСтр("ru = 'Дата получения товара'"));
	СтруктураЗаголовков.Вставить("НазначениеПлатежа"         , НСтр("ru = 'Назначение платежа'"));
	СтруктураЗаголовков.Вставить("КодНазначенияПлатежа"      , НСтр("ru = 'Код назначения платежа'"));
	СтруктураЗаголовков.Вставить("КодБюджетнойКлассификации" , НСтр("ru = 'Код бюджетной классификации'"));
	СтруктураЗаголовков.Вставить("ДатаВалютирования"         , НСтр("ru = 'Дата валютирования'"));
	
	СтруктураЗаголовков.Вставить("Документ"                  , НСтр("ru = 'Источник'"));
	
	СтруктураЗаголовков.Вставить("СекцияДокумент"            , НСтр("ru = 'Выгрузка'"));
	
	СтруктураЗаголовков.Вставить("ЕстьОшибка"                , НСтр("ru = 'Есть ошибка'"));
	СтруктураЗаголовков.Вставить("ОписаниеОшибок"            , НСтр("ru = 'Замечания'"));
	СтруктураЗаголовков.Вставить("ТипДокумента"              , НСтр("ru = 'Тип пл. документа'"));
	
	СтруктураЗаголовков.Вставить("СостояниеДокумента"        , НСтр("ru = 'Состояние документа'"));
	
	Возврат СтруктураЗаголовков;
	
КонецФункции

Функция СформироватьСтруктуруИмпорт_Загружаемые()
	
	// РеквизитыПлДокЭкс_Основные
	Импорт_Загружаемые = Новый Структура("НомерДокумента, ДатаДокумента, Сумма");
	
	// РеквизитыПлДок_Плательщик
	Импорт_Загружаемые.Вставить("ПлательщикНаименование");
	Импорт_Загружаемые.Вставить("ПлательщикКБЕ");
	Импорт_Загружаемые.Вставить("ПлательщикИИК");
	Импорт_Загружаемые.Вставить("ПлательщикРНН");
	Импорт_Загружаемые.Вставить("ПлательщикБИН_ИИН");
	
	//РеквизитыПлДок_ПлательщикНПР
	Импорт_Загружаемые.Вставить("ПлательщикБанкНаименование");
	Импорт_Загружаемые.Вставить("ПлательщикБанкБИК");
	Импорт_Загружаемые.Вставить("ПлательщикБанкРНН");
	Импорт_Загружаемые.Вставить("ПлательщикБанкБИН_ИИН");
	
	// РеквизитыПлДок_Получатель
	Импорт_Загружаемые.Вставить("ПолучательНаименование");
	Импорт_Загружаемые.Вставить("ПолучательКБЕ");
	Импорт_Загружаемые.Вставить("ПолучательИИК");
	Импорт_Загружаемые.Вставить("ПолучательРНН");
	Импорт_Загружаемые.Вставить("ПолучательБИН_ИИН");
	
	//РеквизитыПлДок_ПолучательНПР
	Импорт_Загружаемые.Вставить("ПолучательБанкНаименование");
	Импорт_Загружаемые.Вставить("ПолучательБанкБИК");
	Импорт_Загружаемые.Вставить("ПолучательБанкРНН");
	Импорт_Загружаемые.Вставить("ПолучательБанкБИН_ИИН");
	
	//РеквизитыПлДок_НеОбязательные
	Импорт_Загружаемые.Вставить("ПлательщикБанкИИК");
	Импорт_Загружаемые.Вставить("ПолучательБанкИИК");
	Импорт_Загружаемые.Вставить("ДатаПолученияТовара");
	Импорт_Загружаемые.Вставить("КодБюджетнойКлассификации");
	Импорт_Загружаемые.Вставить("ДатаВалютирования");
	Импорт_Загружаемые.Вставить("ВидДокумента");
	Импорт_Загружаемые.Вставить("ДатаОперации");
	Импорт_Загружаемые.Вставить("ДатаПоступило");
	Импорт_Загружаемые.Вставить("ДатаСписано");
	Импорт_Загружаемые.Вставить("СуммаПриход");
	Импорт_Загружаемые.Вставить("СуммаРасход");
	
	//РеквизитыПлДок_БанкПосредник
	Импорт_Загружаемые.Вставить("БанкПосредникНаименование");
	Импорт_Загружаемые.Вставить("БанкПосредникИИК");
	Импорт_Загружаемые.Вставить("БанкПосредникРНН");
	Импорт_Загружаемые.Вставить("БанкПосредникБИН_ИИН");
	Импорт_Загружаемые.Вставить("БанкПосредникБИК");
	
	//РеквизитыПлДок_БюджетПлатеж
	Импорт_Загружаемые.Вставить("КодНазначенияПлатежа");
	
	//РеквизитыПлДок_Назначение
	Импорт_Загружаемые.Вставить("НазначениеПлатежа");
	
	Возврат Импорт_Загружаемые;
	
КонецФункции

Функция СформироватьСтруктуруИмпорт_НеПустые(ПроверятьРНН, ПроверятьБИН_ИИН)
	
	Импорт_НеПустые = Новый Структура("НомерДок,ДатаДок,Сумма,ПлательщикИИК,ПолучательИИК");
	
	Если ПроверятьРНН Тогда
		Импорт_НеПустые.Вставить("ПлательщикРНН");
		Импорт_НеПустые.Вставить("ПолучательРНН");
	КонецЕсли;
	
	Если ПроверятьБИН_ИИН Тогда
		Импорт_НеПустые.Вставить("ПлательщикБИН_ИИН");
		Импорт_НеПустые.Вставить("ПолучательБИН_ИИН");
	КонецЕсли;
	
	Возврат Импорт_НеПустые;
	
КонецФункции

Процедура ПроверитьНаПустоеЗначениеИмпорта(СтрокаИмпорта, Импорт_НеПустые, ИмяСвойства, СтруктураСвойств) Экспорт
	
	ШаблонСообщения = НСтр("ru = 'Не заполнено поле <%1>'");
	Если Импорт_НеПустые.Свойство(ИмяСвойства) Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаИмпорта[ИмяСвойства]) Тогда
			ДобавитьЗамечание(СтрокаИмпорта, 3,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтруктураСвойств[ИмяСвойства]));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_МассивСтрок)
	
	Буфер = "";
	
	Пока ПустаяСтрока(Буфер) ИЛИ Лев(Буфер, 2) = "//" Цикл
		
		Если Импорт_ТекущаяСтрока > Импорт_КоличествоСтрок Тогда
			Возврат "";
		КонецЕсли;
		
		Буфер = Импорт_МассивСтрок[Импорт_ТекущаяСтрока - 1];
		Импорт_ТекущаяСтрока = Импорт_ТекущаяСтрока + 1;
		
	КонецЦикла;
	
	Возврат Буфер;
	
КонецФункции

Функция РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение)
	
	ПозицияПрисваивания = Найти(СтрокаРазбора, "=");
	Если ПозицияПрисваивания = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Тег = ВРЕГ(СокрЛП(Лев(СтрокаРазбора, ПозицияПрисваивания - 1)));
	Значение = СокрЛП(Сред(СтрокаРазбора, ПозицияПрисваивания + 1));
	
	Возврат НЕ ПустаяСтрока(Тег);
	
КонецФункции

Функция ЗагрузитьСекциюДокумента(СтрокаДокумента, Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_МассивСтрок)
	
	СтрокаРазбора = ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_МассивСтрок);
	
	Приход = 0;
	Расход = 0;
	
	Импорт_Загружаемые = СформироватьСтруктуруИмпорт_Загружаемые();
	
	Пока Лев(Врег(СокрЛП(СтрокаРазбора)), 14) <> "КОНЕЦДОКУМЕНТА" Цикл
		
		Значение = "";
		Тег = "";
		
		Если РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение) Тогда
			
			Если Импорт_Загружаемые.Свойство(Тег) = Истина Тогда
				Если  Тег = "ВИДДОКУМЕНТА" Тогда 
					СтрокаДокумента.Операция = Значение;
				Иначе
				СтрокаДокумента[Тег] = Значение;
				КонецЕсли;
			КонецЕсли;
			
			Если Тег = "СУММАПРИХОД" Тогда
				Приход = 1;
				СтрокаДокумента.Сумма = Значение;
				Попытка
					Если Число(СтрокаДокумента.Сумма) = 0 Тогда
						Приход = 0;
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЕсли;
			
			Если Тег = "СУММАРАСХОД" Тогда
				Расход = 1;
				СтрокаДокумента.Сумма = Значение;
				Попытка
					Если Число(СтрокаДокумента.Сумма) = 0 Тогда
						Расход = 0;
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЕсли;
			
			Если Тег = "ДАТАПОСТУПИЛО" И НЕ ПустаяСтрока(Значение) Тогда
				Приход = 1;
				Расход = 0;
			КонецЕсли;
			
			Если Тег = "ДАТАСПИСАНО" И НЕ ПустаяСтрока(Значение) Тогда
				Расход = 1;
				Приход = 0;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаРазбора = ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_МассивСтрок);
		
	КонецЦикла;
	
	Если Приход = 1 Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДокумента.ДатаПоступило) Тогда
			СтрокаДокумента.ДатаПоступило = СтрокаДокумента.ДатаОперации;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СуммаПриход) Тогда
			Попытка
				СтрокаДокумента.СуммаПриход = Число(СтрокаДокумента.Сумма);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если Расход = 1 Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДокумента.ДатаСписано) Тогда
			СтрокаДокумента.ДатаСписано = СтрокаДокумента.ДатаОперации;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СуммаРасход) Тогда
			Попытка
				СтрокаДокумента.СуммаРасход = Число(СтрокаДокумента.Сумма);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаДокумента.СостояниеДокумента = 3;
	
	Возврат Истина;
	
КонецФункции

Функция ЗагрузитьСекциюРасчСчета(СтрокаРССчета, Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_МассивСтрок, СтекОповещений)
	
	СтрокаРазбора = ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_МассивСтрок);
	
	Значение = "";
	Тег = "";
	
	ТегиРасчетногоСчета = ТегиРасчетногоСчетаСоответствие();
	Пока РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение) Цикл
		
		Если ТегиРасчетногоСчета[Тег] = Истина Тогда
			СтрокаРССчета[Тег] = Значение;
			
		Иначе
			Если Тег = "РАСЧЕТНЫЙСЧЕТ" Тогда
				СтрокаРССчета["РасчСчет"] = Значение;
			ИначеЕсли Тег = "НАЧАЛЬНЫЙ ОСТАТОК" Тогда
				СтрокаРССчета["НачальныйОстаток"] = Значение;
			Иначе
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неверный реквизит в секции описания расчетного счета, строка %1 : %2'"),
					Импорт_ТекущаяСтрока - 1,
					СтрокаРазбора);
				
				СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
				
				Возврат Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаРазбора = ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_МассивСтрок);
		
		Значение = "";
		Тег = "";
		
	КонецЦикла;
	
	Если ВРЕГ(Лев(СокрЛП(СтрокаРазбора), 13)) = "КОНЕЦРАСЧСЧЕТ" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ЗагрузитьСтрокуЗаголовка(ТекстСтрокиЗаголовка, ТегиЗаголовка, Импорт_Заголовок, Импорт_ТекущаяСтрока, СтекОповещений)
	
	Значение = "";
	Тег = "";
	РазобратьТеговуюСтроку(ТекстСтрокиЗаголовка, Тег, Значение);
	
	Если ТегиЗаголовка[Тег] = Истина Тогда
		Импорт_Заголовок[Тег] = Значение;
		
	Иначе
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неверный реквизит заголовка, строка %1 : %2'"), Импорт_ТекущаяСтрока - 1, ТекстСтрокиЗаголовка);
		
		СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПериодичность(ВидДокумента)
	
	Док = Метаданные.Документы[ВидДокумента];
	Период = Док.ПериодичностьНомера;
	
	Возврат Период;
	
КонецФункции

#КонецОбласти

#Область Загрузка

Процедура Загрузить(ДокументыКИмпорту,
					ТаблицаКонтрагентов,
					Организация,
					СтруктурноеПодразделение,
					Импорт_РасчетныеСчета,
					Импорт_Заголовок,
					ИспользоватьГраницуОбработки,
					ДатаГраницыОбработки,
					СтруктураНастроек,
					СтекОповещений) Экспорт
	
	НачалоИнтервалаЗагрузки = Дата(1,1,1);
	КонецИнтервалаЗагрузки  = Дата(1,1,1);
	
	Результат = ПолучитьДатуИзСтроки(НачалоИнтервалаЗагрузки, Импорт_Заголовок.ДатаНачала);
	
	Если Не ПустаяСтрока(Результат) Тогда
		ТекстСообщения = НСтр("ru = 'В заголовке файла импорта неверно указана дата начала интервала! Файл не может быть загружен!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Результат = ПолучитьДатуИзСтроки(КонецИнтервалаЗагрузки, Импорт_Заголовок.ДатаКонца);
	
	Если НЕ ПустаяСтрока(Результат) Тогда
		ТекстСообщения = Нстр("ru = 'В заголовке файла импорта неверно указана дата окончания интервала!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Проверка даты документов к импорту - дата должна быть позднее даты границы.
	// Если дата не соответствует условие, то для документа снимается признак "Загрузить".
	ПроверитьТаблицуДляЗагрузки(ДокументыКИмпорту, ИспользоватьГраницуОбработки, ДатаГраницыОбработки, СтекОповещений);
	
	Для каждого СтрокаСекции из ДокументыКИмпорту Цикл
		
		Если СтрокаСекции.Загрузить Тогда
			
			РезультатПроверки = ПроверитьДокументДляЗагрузки(СтрокаСекции);  
			
			Если ПустаяСтрока(РезультатПроверки) Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаСекции.Документ) Тогда
					// В ИБ не найден документ, необходимо создать новый.
					ВидДокумента = ПолучитьВидДокумента(СтрокаСекции.Операция, СтрокаСекции.Списано, СтрокаСекции.Поступило);
					ОбъектДокумента = СоздатьНовыйПлатежныйДокумент(ВидДокумента, СтрокаСекции.НомерДок, СтрокаСекции.ДатаДок);
					
				Иначе
					// В ИБ найден документ, необходимо получить его объект.
					ОбъектДокумента = СтрокаСекции.Документ.ПолучитьОбъект();
					
				КонецЕсли;
				
				// При заполнении Организации заполняется СтруктурноеПодразделение.
				ЗаполнитьРеквизитПлатежногоДокумента(ОбъектДокумента, СтрокаСекции, "Организация", СтруктураНастроек, Организация, СтруктурноеПодразделение, СтекОповещений);
				ЗаполнитьРеквизитПлатежногоДокумента(ОбъектДокумента, СтрокаСекции, "Контрагент", СтруктураНастроек, Организация, СтруктурноеПодразделение, СтекОповещений);
				
				Для каждого РеквизитДокумента Из ОбъектДокумента.Метаданные().Реквизиты Цикл
					
					Если (РеквизитДокумента.Имя <> "Организация") И (РеквизитДокумента.Имя <> "Контрагент") Тогда
						ЗаполнитьРеквизитПлатежногоДокумента(ОбъектДокумента, СтрокаСекции, РеквизитДокумента.Имя, СтруктураНастроек, Организация, СтруктурноеПодразделение, СтекОповещений);
					КонецЕсли;
					
				КонецЦикла;
				
				Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
					СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
				ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
					СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбъектДокумента.Контрагент)
					ИЛИ НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента)
					ИЛИ НЕ ЗначениеЗаполнено(СтрокаСекции.СчетКонтрагента)
				Тогда
					
					ДополнитьСписокНеНайденных(СтрокаСекции, ТаблицаКонтрагентов, СтруктураНастроек.СоздаватьНенайденныеЭлементы, Организация, СтруктураНастроек.ГруппаДляНовыхКонтрагентов, СтекОповещений);
					
					ЗаполнитьРеквизитПлатежногоДокумента(ОбъектДокумента, СтрокаСекции, "Контрагент", СтруктураНастроек, Организация, СтруктурноеПодразделение, СтекОповещений);
					ЗаполнитьРеквизитПлатежногоДокумента(ОбъектДокумента, СтрокаСекции, "СчетКонтрагента", СтруктураНастроек, Организация, СтруктурноеПодразделение, СтекОповещений);
					
				КонецЕсли;
				
				Если ОбъектДокумента.ПометкаУдаления Тогда
					ЗадатьПометкуНаУдаление(ОбъектДокумента, Ложь, СтекОповещений);
				КонецЕсли;
				
				Если ОбъектДокумента.Модифицированность() Тогда
					ЗаписатьОбъект(ОбъектДокумента, СтрокаСекции, Организация, СтруктураНастроек, СтекОповещений);
				КонецЕсли;
				
				Если НЕ ОбъектДокумента.ЭтоНовый() Тогда
					Если НЕ ЗначениеЗаполнено(СтрокаСекции.Документ) Тогда
						СтрокаСекции.Документ = ОбъектДокумента.Ссылка;
					КонецЕсли;
						СтрокаСекции.ОписаниеОшибок = "";
						СтрокаСекции.Готовность = 0;
				КонецЕсли;
				
			Иначе
				ТекстСообщения = НСтр("ru = 'Платежный документ ""%1"" №%2 от %3 не может быть загружен по причине:
											|%4'");
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстСообщения,
					СтрокаСекции.Операция,
					СтрокаСекции.НомерДок,
					СтрокаСекции.ДатаДок,
					РезультатПроверки);
				
				СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	///////////////////////////////////////////////////////////////////////////////////////////
	// Платежные поручения исходящие, отсутствующие в загруженном списке, помечаем на удаление.
	
	СписокСчетов = Новый СписокЗначений;
	
	Для каждого СтрокаСчета Из Импорт_РасчетныеСчета Цикл
		СписокСчетов.Добавить(СокрЛП(СтрокаСчета.РасчСчет));
	КонецЦикла;
	
	ДокументыНаУдаление = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлатежноеПоручениеИсходящее.Ссылка,
	|	ПлатежноеПоручениеИсходящее.ДатаВыписки,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.НомерСчета
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	|ГДЕ
	|	ПлатежноеПоручениеИсходящее.ДатаВыписки >= &ДатаНач
	|	И ПлатежноеПоручениеИсходящее.ДатаВыписки <= &ДатаКон
	|	И ПлатежноеПоручениеИсходящее.СчетОрганизации.НомерСчета В(&НомераСчетов)
	|	И ПлатежноеПоручениеИсходящее.СтруктурноеПодразделениеОтправитель = &СтруктурноеПодразделение");
	
	ДокументыНаУдаление.УстановитьПараметр("ДатаНач",				   НачалоИнтервалаЗагрузки);
	ДокументыНаУдаление.УстановитьПараметр("ДатаКон",				   КонецИнтервалаЗагрузки);
	ДокументыНаУдаление.УстановитьПараметр("НомераСчетов", 			   СписокСчетов);
	ДокументыНаУдаление.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	
	ВыборкаДокументов = ДокументыНаУдаление.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		СтрокаВТаблицеИмпорта = ДокументыКИмпорту.Найти(ВыборкаДокументов.Ссылка, "Документ");
		
		Если СтрокаВТаблицеИмпорта = Неопределено Тогда
			ОбъектДокументаКУдаление = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			
			Если ИспользоватьГраницуОбработки Тогда
				Если ЗначениеЗаполнено(ДатаГраницыОбработки) Тогда
					Если НачалоДня(ОбъектДокументаКУдаление.Дата) <= НачалоДня(ДатаГраницыОбработки) Тогда
						
						ТекстСообщения = НСтр("ru = 'Платежный документ ""%1"" №%2 от %3 не может быть загружен по причине:
													|%4'");
						
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ТекстСообщения,
							СтрокаСекции.Операция,
							СтрокаСекции.НомерДок,
							СтрокаСекции.ДатаДок,
							РезультатПроверки);
						
						СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
						
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ЗадатьПометкуНаУдаление(ОбъектДокументаКУдаление, Истина, СтекОповещений);
			
		КонецЕсли;
		
	КонецЦикла;
	
	///////////////////////////////////////////////////////////////////////////////////////////
	// Платежные поручения входящие, отсутствующие в загруженном списке, помечаем на удаление.
	ДокументыНаУдаление = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлатежноеПоручениеВходящее.Ссылка,
	|	ПлатежноеПоручениеВходящее.ДатаВходящегоДокумента,
	|	ПлатежноеПоручениеВходящее.СчетОрганизации.НомерСчета
	|ИЗ
	|	Документ.ПлатежноеПоручениеВходящее КАК ПлатежноеПоручениеВходящее
	|ГДЕ
	|	ПлатежноеПоручениеВходящее.ДатаВходящегоДокумента >= &ДатаНач
	|	И ПлатежноеПоручениеВходящее.ДатаВходящегоДокумента <= &ДатаКон
	|	И ПлатежноеПоручениеВходящее.СчетОрганизации.НомерСчета В(&НомераСчетов)
	|	И ПлатежноеПоручениеВходящее.СтруктурноеПодразделениеПолучатель = &СтруктурноеПодразделение");
	
	ДокументыНаУдаление.УстановитьПараметр("ДатаНач",				   НачалоИнтервалаЗагрузки);
	ДокументыНаУдаление.УстановитьПараметр("ДатаКон",				   КонецИнтервалаЗагрузки);
	ДокументыНаУдаление.УстановитьПараметр("НомераСчетов",			   СписокСчетов);
	ДокументыНаУдаление.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	
	ВыборкаДокументов = ДокументыНаУдаление.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		СтрокаВТаблицеИмпорта = ДокументыКИмпорту.Найти(ВыборкаДокументов.Ссылка, "Документ");
		
		Если СтрокаВТаблицеИмпорта = Неопределено Тогда
			ОбъектДокументаКУдаление = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			Если ИспользоватьГраницуОбработки Тогда
				Если ЗначениеЗаполнено(ДатаГраницыОбработки) Тогда
					Если НачалоДня(ОбъектДокументаКУдаление.Дата) <= НачалоДня(ДатаГраницыОбработки) Тогда
						
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Платежный документ ""%1"" не помечен на удаление, так как имеет дату равной или меньшей границы обработки!'"),
							ОбъектДокументаКУдаление);
						
						СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
						Продолжить;
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ЗадатьПометкуНаУдаление(ОбъектДокументаКУдаление, Истина, СтекОповещений);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТегиЗаголовкаСоответствие()
	
	СтрокаТегов = ВРЕГ("ВерсияФормата,Кодировка,Отправитель,Получатель,ДатаСоздания,ВремяСоздания,ДатаНачала,ДатаКонца");
	ТегиЗаголовка = СоздатьСоответствиеИзСтроки(СтрокаТегов);
	
	Возврат ТегиЗаголовка;
	
КонецФункции

Функция Импорт_ЗаголовокСтруктура()
	
	СтрокаТегов = ВРЕГ("ВерсияФормата,Кодировка,Отправитель,Получатель,ДатаСоздания,ВремяСоздания,ДатаНачала,ДатаКонца");
	Импорт_Заголовок = Новый Структура(СтрокаТегов);
	
	Возврат Импорт_Заголовок;
	
КонецФункции

Функция ТегиРасчетногоСчетаСоответствие()
	
	СтрокаТегов = ВРЕГ("ДатаНачала,ДатаКонца,РасчСчет,НачальныйОстаток,ВсегоПоступило,ВсегоСписано,КонечныйОстаток,КонецРасчСчет");
	ТегиРасчетногоСчета = СоздатьСоответствиеИзСтроки(СтрокаТегов);
	
	Возврат ТегиРасчетногоСчета;
	
КонецФункции

Процедура РаспознатьДанныеВСтроке_Документ(СтрокаДокумента, Организация, СтруктурноеПодразделение, ИспользоватьГраницуОбработки, ДатаГраницыОбработки)
	
	ДатаДок = Дата(1,1,1);
	
	Результат = ПолучитьДатуИзСтроки(ДатаДок, СтрокаДокумента.ДатаДокумента);
	
	СтрокаДокумента.ДатаДок = ДатаДок;
	
	Если НЕ ПустаяСтрока(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		НомерДок = Строка(СтрокаДокумента.НомерДокумента);
		СтрокаДокумента.НомерДок = СокрЛП(НомерДок);
		НомерДок = СокрЛП(НомерДок);
	Исключение
		Возврат;
	КонецПопытки;
	
	// Документ распознается по виду, дате и номеру.
	ВидДокумента = ПолучитьВидДокумента(СтрокаДокумента.Операция, СтрокаДокумента.Списано, СтрокаДокумента.Поступило);
	
	// Во всех платежных документах есть реквизиты НомерВходящегоДокумента и ДатаВходящегоДокумента.
	// Их значения используются для основных реквизитов поиска - РеквизитНомера и РеквизитДаты.
	// Дополнительные реквизиты - РеквизитНомераДоп и РеквизитДатыДоп - используются для поиска в документах,
	// в которых не заполнены основные реквизиты 
	
	РеквизитНомера    = "НомерВходящегоДокумента";
	РеквизитДаты      = "ДатаВходящегоДокумента";
	
	РеквизитНомераДоп = "НомерВходящегоДокумента";
	РеквизитДатыДоп   = "ДатаВходящегоДокумента";
	
	Если ВидДокумента = "ПлатежноеПоручениеВходящее" Тогда
		РеквизитСП        = "СтруктурноеПодразделениеПолучатель";
		
	ИначеЕсли ВидДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств" Тогда         
		РеквизитСП        = "СтруктурноеПодразделениеПолучатель";

	ИначеЕсли ВидДокумента = "ПлатежноеПоручениеИсходящее" Тогда
		РеквизитНомераДоп = "Номер";
		РеквизитДатыДоп   = "ДатаВыписки";
		РеквизитСП        = "СтруктурноеПодразделениеОтправитель";
		
	Иначе
		РеквизитНомераДоп = "Номер";
		РеквизитДатыДоп   = "ДатаВыписки";
		РеквизитСП        = "СтруктурноеПодразделениеОтправитель";
		
	КонецЕсли;
	                                                  
	// Поиск документов по дате импортируемого документа
	// Добавлен отбор по счету организации
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ               
    |	ПлатежноеПоручение.Ссылка,
    |	ПлатежноеПоручение." + РеквизитНомера + ",
    |	ПлатежноеПоручение." + РеквизитДаты + ",
    |	ПлатежноеПоручение." + РеквизитНомераДоп + ",
    |	ПлатежноеПоручение." + РеквизитДатыДоп + ",
    |	ПлатежноеПоручение.Организация,
	|	ПлатежноеПоручение.Контрагент,
	|	ПлатежноеПоручение.СуммаДокумента,
    |	ПлатежноеПоручение.СчетОрганизации
    |ИЗ
    |	Документ." + ВидДокумента + " КАК ПлатежноеПоручение
    |ГДЕ
    |	ВЫБОР
    |		КОГДА ПлатежноеПоручение." + РеквизитДаты + " <> &ПустаяДата
    |				ТОГДА ПлатежноеПоручение." + РеквизитДаты + " МЕЖДУ &НачалоДня И &КонецДня
    |			ИНАЧЕ ПлатежноеПоручение." + РеквизитДатыДоп + " МЕЖДУ &НачалоДня И &КонецДня
    |		КОНЕЦ
    |	И ПлатежноеПоручение.Организация = &Организация
	|	И ПлатежноеПоручение." + РеквизитСП + " = &СтруктурноеПодразделение
	|	И ПлатежноеПоручение.СчетОрганизации = &СчетОрганизации";
		
	Если ВидДокумента = "ПлатежноеПоручениеВходящее" ИЛИ ВидДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств" Тогда
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + "И ПлатежноеПоручение.Контрагент = &Контрагент";
	КонецЕсли;
	
	ЗапросПоискаДокумента = Новый Запрос(ТекстЗапроса);
	
	ЗапросПоискаДокумента.УстановитьПараметр("НачалоДня"  				, НачалоДня(ДатаДок));
	ЗапросПоискаДокумента.УстановитьПараметр("КонецДня"   				, КонецДня(ДатаДок));
	ЗапросПоискаДокумента.УстановитьПараметр("НомерПоБанку"  			, НомерДок);
	ЗапросПоискаДокумента.УстановитьПараметр("Организация"				, Организация);
	ЗапросПоискаДокумента.УстановитьПараметр("Контрагент" 				, СтрокаДокумента.Контрагент);
	ЗапросПоискаДокумента.УстановитьПараметр("СтруктурноеПодразделение"	, СтруктурноеПодразделение);
	ЗапросПоискаДокумента.УстановитьПараметр("СчетОрганизации"          , СтрокаДокумента.СчетОрганизации);
	ЗапросПоискаДокумента.УстановитьПараметр("ПустаяДата"               , Дата(1, 1, 1));
	
	ВыборкаПоиска = ЗапросПоискаДокумента.Выполнить().Выбрать();
	
	Пока ВыборкаПоиска.Следующий() Цикл
		
		Попытка
			Если ВидДокумента = "ПлатежноеПоручениеВходящее" ИЛИ ВидДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств" Тогда
				Если СокрЛП(ВыборкаПоиска[РеквизитНомера]) = НомерДок Тогда
					
					СтрокаДокумента.Документ = ВыборкаПоиска.Ссылка;
					СтрокаДокумента.НомерДок = ВыборкаПоиска[РеквизитНомера];
					СтрокаДокумента.ДатаДок  = ВыборкаПоиска[РеквизитДаты];
					
					Если ВыборкаПоиска.СчетОрганизации <> "" И ВыборкаПоиска.СчетОрганизации <> СтрокаДокумента.СчетОрганизации Тогда
						ТекстЗамечения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Банковский счет в документе, загружаемом из файла, %1 не соответствует банковскому счету в документе информационной базы %2. Для документа %3 будет установлен счет %1!'"),
							СтрокаДокумента.СчетОрганизации,
							ВыборкаПоиска.СчетОрганизации,
							ВыборкаПоиска.Ссылка);
						ДобавитьЗамечание(СтрокаДокумента, 1, ТекстЗамечения);
					КонецЕсли;
					
					Если ВыборкаПоиска.Контрагент <> "" И ВыборкаПоиска.Контрагент <> СтрокаДокумента.Контрагент Тогда
						ТекстЗамечения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Контрагент в документе, загружаемом из файла, %1 не соответствует контрагенту в документе информационной базы %2. Для документа %3 будет установлен контрагент %1!'"),
							СтрокаДокумента.Контрагент,
							ВыборкаПоиска.Контрагент,
							ВыборкаПоиска.Ссылка);
						ДобавитьЗамечание(СтрокаДокумента, 1, ТекстЗамечения);
					КонецЕсли;
					
					Если ВыборкаПоиска.СуммаДокумента <> "" И ВыборкаПоиска.СуммаДокумента <> СтрокаДокумента.СуммаДокумента Тогда 
						ТекстЗамечения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Сумма документа в документе, загружаемом из файла, %1 не соответствует сумме документа в документе информационной базы %2. Для документа %3 будет установлена сумма документа %1!'"),
							СтрокаДокумента.СуммаДокумента,
							ВыборкаПоиска.СуммаДокумента,
							ВыборкаПоиска.Ссылка);
						ДобавитьЗамечание(СтрокаДокумента, 1, ТекстЗамечения);
					КонецЕсли;
					
					Прервать;
					
				КонецЕсли;
			Иначе
				
				СокрНомерДокумента = "";
				Если СокрЛП(ВыборкаПоиска[РеквизитНомера]) = "" Тогда
					// получим номер документа из выборки, обрезав начальные буквы и лидирующие нули
					СокрНомерДокумента = СокрЛП(ВыборкаПоиска[РеквизитНомераДоп]);
					НомерПервойЦифры = 0;
					Для а = 1 По СтрДлина(СокрНомерДокумента) Цикл
						НомерПервойЦифры = НомерПервойЦифры + 1;
						КодСимвола = КодСимвола(Сред(СокрНомерДокумента, а, 1));
						Если (КодСимвола > 48 И КодСимвола <= 57) Тогда
							СокрНомерДокумента = Сред(СокрНомерДокумента, НомерПервойЦифры);
							Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СокрНомерДокумента) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;    				
				КонецЕсли;
			
				Если СокрЛП(ВыборкаПоиска[РеквизитНомера]) = НомерДок
					ИЛИ (СокрЛП(ВыборкаПоиска[РеквизитНомера]) = ""
						И (СокрЛП(ВыборкаПоиска[РеквизитНомераДоп]) = НомерДок ИЛИ СокрНомерДокумента = НомерДок)) Тогда
					
					СтрокаДокумента.Документ = ВыборкаПоиска.Ссылка;
					
					Если СокрЛП(ВыборкаПоиска[РеквизитНомера]) = "" Тогда
						СтрокаДокумента.НомерДок = ВыборкаПоиска[РеквизитНомераДоп];
					Иначе
						СтрокаДокумента.НомерДок = ВыборкаПоиска[РеквизитНомера];
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ВыборкаПоиска[РеквизитДаты]) Тогда
						СтрокаДокумента.ДатаДок  = ВыборкаПоиска[РеквизитДаты];
					Иначе
						СтрокаДокумента.ДатаДок  = ВыборкаПоиска[РеквизитДатыДоп];
					КонецЕсли;
					
					Если ВыборкаПоиска.СчетОрганизации <> "" И ВыборкаПоиска.СчетОрганизации <> СтрокаДокумента.СчетОрганизации Тогда
						ТекстЗамечения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Банковский счет в документе, загружаемом из файла, %1 не соответствует банковскому счету в документе информационной базы %2. Для документа %3 будет установлен счет %1!'"),
							СтрокаДокумента.СчетОрганизации,
							ВыборкаПоиска.СчетОрганизации,
							ВыборкаПоиска.Ссылка);
						ДобавитьЗамечание(СтрокаДокумента, 1, ТекстЗамечения);
					КонецЕсли;
					
					Если ВыборкаПоиска.Контрагент <> "" И ВыборкаПоиска.Контрагент <> СтрокаДокумента.Контрагент Тогда
						ТекстЗамечения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Контрагент в документе, загружаемом из файла, %1 не соответствует контрагенту в документе информационной базы %2. Для документа %3 будет установлен контрагент %1!'"),
							СтрокаДокумента.Контрагент,
							ВыборкаПоиска.Контрагент,
							ВыборкаПоиска.Ссылка);
						ДобавитьЗамечание(СтрокаДокумента, 1, ТекстЗамечения);
					КонецЕсли;
					
					Если ВыборкаПоиска.СуммаДокумента <> "" И ВыборкаПоиска.СуммаДокумента <> СтрокаДокумента.СуммаДокумента Тогда
						ТекстЗамечения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Сумма документа в документе, загружаемом из файла, %1 не соответствует сумме документа в документе информационной базы %2. Для документа %3 будет установлена сумма документа %1!'"),
							СтрокаДокумента.СуммаДокумента,
							ВыборкаПоиска.СуммаДокумента,
							ВыборкаПоиска.Ссылка);
						ДобавитьЗамечание(СтрокаДокумента, 1, ТекстЗамечения);
					КонецЕсли;
					
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
		Исключение
			
		КонецПопытки
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтрокаДокумента.Документ) Тогда
		Если СтрокаДокумента.Проведен Тогда
			СтрокаДокумента.СостояниеДокумента = 1;
		Иначе
			СтрокаДокумента.СостояниеДокумента = 0;
		КонецЕсли;
	Иначе
		СтрокаДокумента.СостояниеДокумента     = 3;
	КонецЕсли;
	
	//Если документ с датой и номером из файла не найден, то проводится дополнительный поиск
	//по номеру, организации, расчетному счету за определенный период,
	//который берется из Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента документа,
	//в который входит дата документа из файла
	// В поиске участвуют ППисх и ПОспис, так как поиск ППвх и ПОпоступ проводится только по входящему номеру
	
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Документ) И (ВидДокумента = "ПлатежноеПоручениеИсходящее" ИЛИ ВидДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств") Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПлатежноеПоручение.Ссылка,
		|	ПлатежноеПоручение." + РеквизитНомера + ",
		|	ПлатежноеПоручение." + РеквизитДаты + ",
        |	ПлатежноеПоручение." + РеквизитНомераДоп + ",
        |	ПлатежноеПоручение." + РеквизитДатыДоп + ",
		|	ПлатежноеПоручение.Организация,
		|	ПлатежноеПоручение.Контрагент,
		|	ПлатежноеПоручение.СуммаДокумента,
		|	ПлатежноеПоручение.СчетОрганизации
		|ИЗ
		|	Документ." + ВидДокумента + " КАК ПлатежноеПоручение
		|ГДЕ
   		|	ВЫБОР
   		|			КОГДА ПлатежноеПоручение." + РеквизитНомера + " <> """"
   		|				ТОГДА ПлатежноеПоручение." + РеквизитНомера + " = &ПарамНомер
   		|			ИНАЧЕ ПлатежноеПоручение." + РеквизитНомераДоп + " = &ПарамНомер
   		|		КОНЕЦ
        |	И ПлатежноеПоручение.Организация = &Организация
		|	И ПлатежноеПоручение.СтруктурноеПодразделениеОтправитель = &СтруктурноеПодразделение
		|	И ПлатежноеПоручение.СчетОрганизации = &СчетОрганизации";
		
		Периодичность = ПолучитьПериодичность(ВидДокумента);
		
		Если Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Непериодический Тогда
			
			ЗапросПоискаДокумента = Новый Запрос(ТекстЗапроса);
			
		Иначе
			
			ТекстЗапроса = ТекстЗапроса + Символы.ПС + " И ВЫБОР
										               |		КОГДА ПлатежноеПоручение." + РеквизитДаты + " <> &ПустаяДата
										               |				ТОГДА ПлатежноеПоручение." + РеквизитДаты + " МЕЖДУ &НачалоПериода И &КонецПериода
										               |			ИНАЧЕ ПлатежноеПоручение." + РеквизитДатыДоп + " МЕЖДУ &НачалоПериода И &КонецПериода
										               |		КОНЕЦ";
													
			ЗапросПоискаДокумента = Новый Запрос(ТекстЗапроса);
			
			Если Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
				ЗапросПоискаДокумента.УстановитьПараметр("НачалоПериода", НачалоГода(ДатаДок));
				ЗапросПоискаДокумента.УстановитьПараметр("КонецПериода" , КонецГода(ДатаДок));
			ИначеЕсли Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда 
				ЗапросПоискаДокумента.УстановитьПараметр("НачалоПериода", НачалоДня(ДатаДок));
				ЗапросПоискаДокумента.УстановитьПараметр("КонецПериода" , КонецДня(ДатаДок));
			ИначеЕсли Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда 
				ЗапросПоискаДокумента.УстановитьПараметр("НачалоПериода", НачалоКвартала(ДатаДок));
				ЗапросПоискаДокумента.УстановитьПараметр("КонецПериода" , КонецКвартала(ДатаДок));
			ИначеЕсли Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда 
				ЗапросПоискаДокумента.УстановитьПараметр("НачалоПериода", НачалоМесяца(ДатаДок));
				ЗапросПоискаДокумента.УстановитьПараметр("КонецПериода" , КонецМесяца(ДатаДок));		
			КонецЕсли;
			
		КонецЕсли;
		
		ЗапросПоискаДокумента.УстановитьПараметр("Организация"              , Организация);
		ЗапросПоискаДокумента.УстановитьПараметр("ПарамНомер"               , НомерДок);
		ЗапросПоискаДокумента.УстановитьПараметр("СтруктурноеПодразделение" , СтруктурноеПодразделение);
		ЗапросПоискаДокумента.УстановитьПараметр("СчетОрганизации"          , СтрокаДокумента.СчетОрганизации);
		ЗапросПоискаДокумента.УстановитьПараметр("ПустаяДата"               , Дата(1, 1, 1));
	 		
		ВыборкаПоиска = ЗапросПоискаДокумента.Выполнить().Выбрать();
		
		Если ВыборкаПоиска.Следующий() Тогда
			Попытка
				
				СтрокаДокумента.Документ = ВыборкаПоиска.Ссылка;

				Если СокрЛП(ВыборкаПоиска[РеквизитНомера]) = "" Тогда
					СтрокаДокумента.НомерДок = ВыборкаПоиска[РеквизитНомераДоп];
				Иначе
					СтрокаДокумента.НомерДок = ВыборкаПоиска[РеквизитНомера];
				КонецЕсли;
				
				//Дату найденного документа не запоминаем, потому что мы ее заменим на дату из файла
				Если ВыборкаПоиска[РеквизитДаты] <> "" Тогда
					Если ВыборкаПоиска[РеквизитДаты] <> СтрокаДокумента.ДатаДок Тогда
						ТекстЗамечения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Дата входящего документа, загружаемого из файла, %1 не соответствует дате найденного документа информационной базы %2. Для документа %3 будет установлена дата входящего документа %1!'"),
							СтрокаДокумента.ДатаДок,
							ВыборкаПоиска[РеквизитДаты],
							ВыборкаПоиска.Ссылка);
						ДобавитьЗамечание(СтрокаДокумента, 1, ТекстЗамечения);
					КонецЕсли;
				ИначеЕсли ВыборкаПоиска[РеквизитДатыДоп] <> "" Тогда
					Если ВыборкаПоиска[РеквизитДатыДоп] <> СтрокаДокумента.ДатаДок Тогда
						ТекстЗамечения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Дата документа, загружаемого из файла, %1 не соответствует дате найденного документа информационной базы %2. Для документа %3 будет установлена дата %1!'"),
							СтрокаДокумента.ДатаДок,
							ВыборкаПоиска[РеквизитДатыДоп],
							ВыборкаПоиска.Ссылка);
						ДобавитьЗамечание(СтрокаДокумента, 1, ТекстЗамечения);
					КонецЕсли;
				КонецЕсли;
				
				Если ВыборкаПоиска.СчетОрганизации <> "" И ВыборкаПоиска.СчетОрганизации <> СтрокаДокумента.СчетОрганизации Тогда
					ТекстЗамечения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Банковский счет в документе, загружаемом из файла, %1 не соответствует банковскому счету в документе информационной базы %2. Для документа %3 будет установлен счет %1!'"),
						СтрокаДокумента.СчетОрганизации,
						ВыборкаПоиска.СчетОрганизации,
						ВыборкаПоиска.Ссылка);
					ДобавитьЗамечание(СтрокаДокумента, 1, ТекстЗамечения);
				КонецЕсли;
				
				Если ВыборкаПоиска.Контрагент <> "" И ВыборкаПоиска.Контрагент <> СтрокаДокумента.Контрагент Тогда
					ТекстЗамечения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Контрагент в документе, загружаемом из файла, %1 не соответствует контрагенту в документе информационной базы %2. Для документа %3 будет установлен контрагент %1!'"),
						СтрокаДокумента.Контрагент,
						ВыборкаПоиска.Контрагент,
						ВыборкаПоиска.Ссылка);
					ДобавитьЗамечание(СтрокаДокумента, 1, ТекстЗамечения);
				КонецЕсли;
				
				Если ВыборкаПоиска.СуммаДокумента <> "" И ВыборкаПоиска.СуммаДокумента <> СтрокаДокумента.СуммаДокумента Тогда
					ТекстЗамечения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Сумма документа в документе, загружаемом из файла, %1 не соответствует сумме документа в документе информационной базы %2. Для документа %3 будет установлена сумма документа %1!'"),
						СтрокаДокумента.СуммаДокумента,
						ВыборкаПоиска.СуммаДокумента,
						ВыборкаПоиска.Ссылка);
					ДобавитьЗамечание(СтрокаДокумента, 1, ТекстЗамечения);
				КонецЕсли;
				
			Исключение
				
			КонецПопытки
		КонецЕсли;
		
	КонецЕсли;
	
	// Если документ не был найден в ИБ.
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Документ) Тогда
		Если ВидДокумента = "ПлатежноеПоручениеИсходящее" ИЛИ ВидДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств" Тогда
			ТекстЗамечения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документ не найден в информационной базе! Будет создан документ с номером:%1 и датой документа:%2'"),
				СтрокаДокумента.НомерДок,
				СтрокаДокумента.ДатаДок);
			ДобавитьЗамечание(СтрокаДокумента, 1, ТекстЗамечения);
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьГраницуОбработки Тогда
		Если ЗначениеЗаполнено(ДатаГраницыОбработки) Тогда
			Если НачалоДня(ДатаДок) <= НачалоДня(ДатаГраницыОбработки) Тогда
				ДобавитьЗамечание(СтрокаДокумента, 3, НСтр("ru = 'Документ имеет дату равной или меньшей границы обработки!'"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура РаспознатьДанныеВСтроке_ТипДокумента(СтрокаДокумента, ДокументыДляИмпорта, ИспользоватьГраницуОбработки, ДатаГраницыОбработки, Принудительно)
	
	// Преобразуем в дату из строки, если не пустая.
	Если НЕ ПустаяСТрока(СтрокаДокумента.ДатаСписано) Тогда
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.Списано, СтрокаДокумента.ДатаСписано);
		Если Не ПустаяСтрока(Результат) Тогда
			СтрокаДокумента.Списано = Дата(1,1,1);
		КонецЕсли;
	Иначе
		СтрокаДокумента.Списано = Дата(1,1,1);
	КонецЕсли;
	
	// Преобразуем в дату из строки, если не пустая.
	Если НЕ ПустаяСТрока(СтрокаДокумента.ДатаПоступило) Тогда
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.Поступило, СтрокаДокумента.ДатаПоступило);
		Если Не ПустаяСтрока(Результат) Тогда            
			СтрокаДокумента.Поступило = Дата(1,1,1);
		КонецЕсли;
	Иначе
		СтрокаДокумента.Поступило = Дата(1,1,1);
	КонецЕсли;
	
	Если Не Принудительно Тогда 
		//!!!Здесь нужно проверить на макс-мин и присвоить СтрокаДокумента.Операция для мин ПОспис, для макс ППисх.
		НовыйВидДокумента = ПроверитьДокументНаПовторяемостьВФайле(СтрокаДокумента, ДокументыДляИмпорта);
		
	КонецЕсли;
	
	ВидДокумента = ПолучитьВидДокумента(СтрокаДокумента.Операция, СтрокаДокумента.Списано, СтрокаДокумента.Поступило);
	
	Если ВидДокумента = "ПлатежноеПоручениеИсходящее" Тогда
		СтрокаДокумента.ТипДокумента = 1;
		
		Если ИспользоватьГраницуОбработки Тогда
			Если ЗначениеЗаполнено(ДатаГраницыОбработки) Тогда
				Если ЗначениеЗаполнено(СтрокаДокумента.Списано) Тогда
					Если НачалоДня(СтрокаДокумента.Списано) <= НачалоДня(ДатаГраницыОбработки) Тогда
						ДобавитьЗамечание(СтрокаДокумента, 3, НСтр("ru = 'Документ имеет дату списания равной или меньшей границы обработки !'"));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств" Тогда
		СтрокаДокумента.ТипДокумента = 2;
		
	ИначеЕсли ВидДокумента = "ПлатежноеПоручениеВходящее" Тогда
		СтрокаДокумента.ТипДокумента = 11;
		
		Если ИспользоватьГраницуОбработки Тогда
			Если ЗначениеЗаполнено(ДатаГраницыОбработки) Тогда
				Если ЗначениеЗаполнено(СтрокаДокумента.Поступило) Тогда
					Если НачалоДня(СтрокаДокумента.Поступило) <= НачалоДня(ДатаГраницыОбработки) Тогда
						ДобавитьЗамечание(СтрокаДокумента, 3, НСтр("ru = 'Документ имеет дату поступления равной или меньшей границы обработки !'"));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств" Тогда
		СтрокаДокумента.ТипДокумента = 12;
		
	Иначе
		СтрокаДокумента.ТипДокумента = 0;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РаспознатьДанныеВСтроке_СуммаДокумента(СтрокаДокумента)
	
	Буфер = СокрЛП(СтрЗаменить(СтрокаДокумента.Сумма, " ", ""));
	
	Попытка
		
		Сумма = Число(Буфер);
		
		Если Сумма < 0 Тогда
			Сумма = - Сумма;
		КонецЕсли;
		
		СтрокаДокумента.СуммаДокумента =Сумма ;
		
	Исключение
		
		ДобавитьЗамечание(СтрокаДокумента, 4, НСтр("ru = 'Указана неверная сумма документа!'"));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура РаспознатьДанныеВСтроке_СчетКонтрагента(СтрокаДокумента, Организация, Импорт_РасчетныеСчета)
	
	// Ищем по номеру счета среди счетов контрагента.
	// Если контранета распознать не удалось ищем счет везде и подставляем в контрагента его владельца.
	
	ЗапросПоискаСчета = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Ссылка,
	|	БанковскиеСчета.НомерСчета,
	|	БанковскиеСчета.Владелец
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.НомерСчета = &НомерСчета");
	
	Если СтрокаДокумента.ТипДокумента < 10 Тогда
		ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СокрЛП(СтрокаДокумента.ПолучательИИК));
		СчетОрганизации = СтрокаДокумента.ПлательщикИИК;
		
	Иначе
		ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СокрЛП(СтрокаДокумента.ПлательщикИИК));
		СчетОрганизации = СтрокаДокумента.ПолучательИИК;
		
	КонецЕсли;
	
	ВыборкаПоиска = ЗапросПоискаСчета.Выполнить().Выбрать();
	
	Кандидат = Неопределено;
	СтепеньКандидата = 0;
	
	Пока ВыборкаПоиска.Следующий() Цикл
		
		Если СтепеньКандидата = 0 Тогда
			Кандидат = ВыборкаПоиска.Ссылка;
			
			Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
				Прервать;
				
			КонецЕсли;
			
			Если ВыборкаПоиска.Владелец = СтрокаДокумента.Контрагент Тогда
				Прервать;
				
			Иначе
				СтепеньКандидата = 1;
				
			КонецЕсли;
			
		Иначе
			Если ВыборкаПоиска.Владелец = СтрокаДокумента.Контрагент Тогда
				Прервать;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаДокумента.СчетКонтрагента = Кандидат;
	
	// Еще определяем счет организации.
	ЗапросПоискаСчета = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Ссылка,
	|	БанковскиеСчета.НомерСчета,
	|	БанковскиеСчета.Владелец
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Организация
	|	И БанковскиеСчета.НомерСчета = &НомерСчета");
	
	ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СчетОрганизации);
	ЗапросПоискаСчета.УстановитьПараметр("Организация", Организация);
	
	ВыборкаПоиска = ЗапросПоискаСчета.Выполнить().Выбрать();
	
	Если ВыборкаПоиска.Следующий() Тогда
		
		СтрокаРССчетов = Импорт_РасчетныеСчета.Найти(СчетОрганизации, "РасчСчет");
		
		Если СтрокаРССчетов = Неопределено Тогда
			ДобавитьЗамечание(СтрокаДокумента, 2, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В документе указан счет, не определенный в заголовке:%1!'"), СчетОрганизации));
		КонецЕсли;
		
		СтрокаДокумента.СчетОрганизации = ВыборкаПоиска.Ссылка;
		
	Иначе
		ДобавитьЗамечание(СтрокаДокумента, 2, НСтр("ru = 'В документе указан счет, не принадлежащий организации!'"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РаспознатьДанныеВСтроке_Контрагент(СтрокаДокумента, Организация, СтруктурноеПодразделение, СтекОповещений)
	
	Если ЗначениеЗаполнено(СтруктурноеПодразделение) Тогда
		СтруктурнаяЕдиница = ?(СтруктурноеПодразделение.УказыватьРеквизитыГоловнойОрганизации, Организация, СтруктурноеПодразделение);
	Иначе 
		СтруктурнаяЕдиница = Организация;
	КонецЕсли;
	
	ЗапросПоискаКонтрагента = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка,
	|	Контрагенты.Наименование,
	|	Контрагенты.ИдентификационныйКодЛичности
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИдентификационныйКодЛичности = &КонтрагентБИН_ИИН");
	
	Если СтрокаДокумента.ТипДокумента < 10 Тогда
		КонтрагентБИН_ИИН = СокрЛП(СтрокаДокумента.ПолучательБИН_ИИН);
		БИН_ИИНОрганизации = СтрокаДокумента.ПлательщикБИН_ИИН;
		БИН_ИИНКонтр = СокрЛП(СтрокаДокумента.ПолучательБИН_ИИН);
		
	Иначе
		КонтрагентБИН_ИИН = СокрЛП(СтрокаДокумента.ПлательщикБИН_ИИН);
		БИН_ИИНОрганизации = СтрокаДокумента.ПолучательБИН_ИИН;
		БИН_ИИНКонтр = СокрЛП(СтрокаДокумента.ПлательщикБИН_ИИН);
		
	КонецЕсли;
	
	Если СокрЛП(СтруктурнаяЕдиница.ИдентификационныйНомер) <> СокрЛП(БИН_ИИНОрганизации) Тогда
		ДобавитьЗамечание(СтрокаДокумента, 2, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В документе указан неверный БИН/ИИН организации: %1 !'"), БИН_ИИНОрганизации));
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(КонтрагентБИН_ИИН) Тогда
		ЗапросПоискаКонтрагента.УстановитьПараметр("КонтрагентБИН_ИИН", КонтрагентБИН_ИИН);
		ВыборкаПоиска = ЗапросПоискаКонтрагента.Выполнить().Выбрать();
		Если ВыборкаПоиска.Следующий() Тогда
			СтрокаДокумента.Контрагент = ВыборкаПоиска.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	//Если контрагент найден по БИН/ИИН то он прописывается с строке таблицы импорта,
	//а если не был найден, то производится поиск по наименованию.
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
		
		ЗапросПоискаКонтрагента.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Ссылка,
		|	Контрагенты.ИдентификационныйКодЛичности,
		|	Контрагенты.Наименование
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Наименование = &КонтрагентНаименование";
		
		Если СтрокаДокумента.ТипДокумента < 10 Тогда
			ЗапросПоискаКонтрагента.УстановитьПараметр("КонтрагентНаименование", СокрЛП(СтрокаДокумента.ПолучательНаименование));
		Иначе
			ЗапросПоискаКонтрагента.УстановитьПараметр("КонтрагентНаименование", СокрЛП(СтрокаДокумента.ПлательщикНаименование));
		КонецЕсли;
		
		ВыборкаПоиска = ЗапросПоискаКонтрагента.Выполнить().Выбрать();
		ВыборкаПоиска.Следующий();
		
		СтрокаДокумента.Контрагент = ВыборкаПоиска.Ссылка;
		Если ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда 
			
			Если СокрЛП(ВыборкаПоиска.ИдентификационныйКодЛичности) <> БИН_ИИНКонтр Тогда
				ТекстРазныеБИН_ИИН = " " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'БИН/ИИН контрагента %1 не совпадает с БИН/ИИН контрагента из файла %2'"),
					СокрЛП(ВыборкаПоиска.ИдентификационныйКодЛичности),
					БИН_ИИНКонтр);
			Иначе
				ТекстРазныеБИН_ИИН = "";
			КонецЕсли;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Контрагент ""%1"" найден по наименованию.'"),
				СокрЛП(ВыборкаПоиска.Наименование)) + ТекстРазныеБИН_ИИН;
			
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьВидДокумента(ПлатежнаяОперация, Списано, Поступило)
	
	ПлатежноеПоручение = (СокрЛП(ВРЕГ(СтрЗаменить(ПлатежнаяОперация, " ", "")) = "ПЛАТЕЖНОЕПОРУЧЕНИЕ"));
	Списали = ЗначениеЗаполнено(Списано);
	Зачислили = ЗначениеЗаполнено(Поступило);
	
	Если Списали И Зачислили Тогда
		// Это исходящее платежное поручение с операцией "перевод на другой счет".
		ВидДокумента = "ПлатежноеПоручениеИсходящее";
		
	ИначеЕсли Списали Тогда
		Если ПлатежноеПоручение Тогда
			// Списали средства платежным поручением.
			ВидДокумента = "ПлатежноеПоручениеИсходящее";
			
		Иначе
			// Списали средства прочим документом.
			ВидДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств";
			
		КонецЕсли;
		
	ИначеЕсли Зачислили Тогда
		Если ПлатежноеПоручение Тогда
			// Зачислили средства платежным поручением.
			ВидДокумента = "ПлатежноеПоручениеВходящее";
			
		Иначе
			// Зачислили средства прочим документом.
			ВидДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств";
			
		КонецЕсли;
		
	Иначе
		// Движение средств не произошло.
		Если ПлатежноеПоручение Тогда
			// Платежное поручение исходящее - выгруженное, но не исполненное.
			ВидДокумента = "ПлатежноеПоручениеИсходящее";
			
		Иначе
			ВидДокумента = "ПлатежноеПоручениеИсходящее";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВидДокумента;
	
КонецФункции

Функция ПроверитьДокументНаПовторяемостьВФайле(СтрокаСекции, ДокументыКИмпорту)
	
	Значение = "";
	
	СовпадающиеДокументы = ДокументыКИмпорту.Скопировать();
	СовпадающиеДокументы.Очистить();
	
	ВидТекущегоДокумента = ПолучитьВидДокумента(СтрокаСекции.Операция, СтрокаСекции.Списано, СтрокаСекции.Поступило);
	
	ЭтоМин = Ложь;
	
	Для Каждого Стр Из ДокументыКИмпорту Цикл
		
		ВидДокумента = ПолучитьВидДокумента(Стр.Операция, Стр.Списано, Стр.Поступило);
		
		ДатаДок = Дата(1,1,1);
		Результат = ПолучитьДатуИзСтроки(ДатаДок,СтрокаСекции.ДатаДокумента);
		СтрокаСекции.ДатаДок = ДатаДок;
		
		ДатаДок = Дата(1,1,1);
		Результат = ПолучитьДатуИзСтроки(ДатаДок,Стр.ДатаДокумента);
		Стр.ДатаДок = ДатаДок;
		
		Если ПустаяСтрока(Результат) Тогда
			Если (СтрокаСекции.НомерДокумента = Стр.НомерДокумента) 
				И Год(СтрокаСекции.ДатаДок) = Год(Стр.ДатаДок) 
				И ЗначениеЗаполнено(СтрокаСекции.СуммаРасход) 
				И ЗначениеЗаполнено(Стр.СуммаРасход) И ВидТекущегоДокумента = ВидДокумента 
			Тогда
				
				Новая = СовпадающиеДокументы.Добавить();
				ЗаполнитьЗначенияСвойств(Новая,Стр);
				РаспознатьДанныеВСтроке_СуммаДокумента(Новая);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СовпадающиеДокументы.Количество()= 2 Тогда
		
		Мин = 0;
		НомерСтроки = 0;
		Для Каждого Док Из СовпадающиеДокументы Цикл
			СуммаДок = Док.СуммаДокумента;
			Если СуммаДок < Мин Тогда 
				Мин = СуммаДок;
			Иначе
				Мин = СуммаДок;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаСекции.СуммаДокумента = Мин Тогда
			СтрокаСекции.Операция = "ПлатежныйОрдер";
		Иначе
			СтрокаСекции.Операция = "ПлатежноеПоручение";
		КонецЕсли;
		
	КонецЕсли;
	
	Значение = ПолучитьВидДокумента(СтрокаСекции.Операция, СтрокаСекции.Списано, СтрокаСекции.Поступило);
	
	Возврат Значение;
	
КонецФункции

Функция РазобратьФайлИмпортаXML(ДокументыДляИмпорта,
								Импорт_РасчетныеСчета,
								Импорт_НеПустые,
								Импорт_Заголовок,
								ИмяВременногоФайла,
								Организация,
								СтруктурноеПодразделение,
								ИспользоватьГраницуОбработки,
								ДатаГраницыОбработки,
								ТаблицаКонтрагентов,
								СтекОповещений)
	
	СтруктураРеквизитов = СформироватьСтруктуруЗаголовковИмпорта();
	
	ТегиРасчетногоСчета = ТегиРасчетногоСчетаСоответствие();
	ТегиЗаголовка		= ТегиЗаголовкаСоответствие();
	
	Импорт_ФайлДляРазбора = Новый ЧтениеXML;
	Импорт_ФайлДляРазбора.ОткрытьФайл(ИмяВременногоФайла);
	
	КорневойЭлемент = 1;
	ОшибкаЗагрузки = "";
	
	Пока Импорт_ФайлДляРазбора.Прочитать() Цикл
		
		Если КорневойЭлемент = 1 Тогда
			Если Импорт_ФайлДляРазбора.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если Импорт_ФайлДляРазбора.Имя = "XML1CClientBankExchange" Тогда
					КорневойЭлемент = 0;
				Иначе
					ОшибкаЗагрузки = НСтр("ru = 'В файле импорта отсутствует признак обмена ""XML1CClientBankExchange""!'");
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Импорт_ФайлДляРазбора.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Если Импорт_ФайлДляРазбора.Имя = "XML1CClientBankExchange" Тогда
				Пока Импорт_ФайлДляРазбора.ПрочитатьАтрибут() Цикл
					Тег = СокрЛП(Импорт_ФайлДляРазбора.Имя);
					Тег = ВРег(Тег);
					Значение = СокрЛП(Импорт_ФайлДляРазбора.Значение);
					
					Если Тег = "РАСЧСЧЕТ" Тогда
						Если СчетПринадлежитОрганизации(Значение, Организация) Тогда
							СтрокаРССчетов = Импорт_РасчетныеСчета.Найти(Значение, "РасчСчет");
							Если СтрокаРССчетов = Неопределено Тогда
								СтрокаРССчетов = Импорт_РасчетныеСчета.Добавить();
								СтрокаРССчетов.РасчСчет = Значение;
							КонецЕсли;
						Иначе
							ОшибкаЗагрузки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В заголовке файла импорта указан счет, не принадлежащий организации: %1 !'"), Значение);
							Прервать;
						КонецЕсли;
						Продолжить;
					КонецЕсли;
					
					Если ТегиЗаголовка[Тег] = Истина Тогда
						Импорт_Заголовок[Тег] = Значение;
					Иначе
						ОшибкаЗагрузки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неверный реквизит заголовка %1'"), Тег);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если Импорт_ФайлДляРазбора.Имя = "СЕКЦИЯРАСЧСЧЕТ" Тогда
				
				СтрокаРССчетов = Импорт_РасчетныеСчета.Добавить();
				Если Импорт_ФайлДляРазбора.ПрочитатьАтрибут() Тогда
					СтрокаРССчетов["РасчСчет"] = Импорт_ФайлДляРазбора.Значение;
				КонецЕсли;
				
				Пока Импорт_ФайлДляРазбора.Прочитать() Цикл
					
					Если Импорт_ФайлДляРазбора.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
						Если Импорт_ФайлДляРазбора.Имя = "СЕКЦИЯРАСЧСЧЕТ" Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
					
					Если Импорт_ФайлДляРазбора.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						Тег = Импорт_ФайлДляРазбора.Имя;
						Тег = ВРег(Тег);
						
						Импорт_ФайлДляРазбора.Прочитать();
						
						Значение = Импорт_ФайлДляРазбора.Значение;
						
						Импорт_ФайлДляРазбора.Прочитать();
						
						Если ТегиРасчетногоСчета[Тег] = Истина Тогда
							СтрокаРССчетов[Тег] = Значение;
						Иначе
							ОшибкаЗагрузки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неверный реквизит в секции описания расчетного счета %1'"), Тег);
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если Импорт_ФайлДляРазбора.Имя = "СЕКЦИЯДОКУМЕНТ" Тогда
				
				СтрокаДокумента = ДокументыДляИмпорта.Добавить();
				
				Приход = 0;
				Расход = 0;
				
				Пока Импорт_ФайлДляРазбора.Прочитать() Цикл
					
					Если Импорт_ФайлДляРазбора.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
						Если Импорт_ФайлДляРазбора.Имя = "СЕКЦИЯДОКУМЕНТ" Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
					
					Если Импорт_ФайлДляРазбора.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						Тег = Импорт_ФайлДляРазбора.Имя;
						Тег = ВРег(Тег);
						
						Импорт_ФайлДляРазбора.Прочитать();
						
						Значение = Импорт_ФайлДляРазбора.Значение;
						
						Импорт_ФайлДляРазбора.Прочитать();
						
						Если СформироватьСтруктуруИмпорт_Загружаемые().Свойство(Тег) = Истина Тогда
							Если  Тег = "ВИДДОКУМЕНТА" Тогда
								СтрокаДокумента.Операция = Значение;
							Иначе
								СтрокаДокумента[Тег] = Значение;
							КонецЕсли;
						Иначе
							ОшибкаЗагрузки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неверный реквизит платежного документа %1'"), Тег);
							Прервать;
						КонецЕсли;
						
						Если Тег = "СУММАПРИХОД" Тогда
							Приход = 1;
							СтрокаДокумента.Сумма = Значение;
						КонецЕсли;
						
						Если Тег = "СУММАРАСХОД" Тогда
							Расход = 1;
							СтрокаДокумента.Сумма = Значение;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если Приход = 1 Тогда
					СтрокаДокумента.ДатаПоступило = СтрокаДокумента.ДатаОперации;
				КонецЕсли;
				
				Если Расход = 1 Тогда
					СтрокаДокумента.ДатаСписано = СтрокаДокумента.ДатаОперации;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Импорт_ФайлДляРазбора.Закрыть();
	
	Если НЕ ПустаяСтрока(ОшибкаЗагрузки) Тогда
		
		ДокументыДляИмпорта.Очистить();
		
		СтекОповещений.Добавить(Новый Структура("Текст", ОшибкаЗагрузки));
		
		ТекстСообщения = НСтр("ru = 'Импорт не выполнен.'");
		СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Для Каждого СтрокаДокумента Из ДокументыДляИмпорта Цикл
		
		//Распознаем реквизиты - порядок распознания важен.
		РаспознатьДанныеВСтроке_СуммаДокумента(СтрокаДокумента);
		
		РаспознатьДанныеВСтроке_ТипДокумента(СтрокаДокумента, ДокументыДляИмпорта, ИспользоватьГраницуОбработки, ДатаГраницыОбработки, Ложь);
		
		РаспознатьДанныеВСтроке_Контрагент(СтрокаДокумента, Организация, СтруктурноеПодразделение, СтекОповещений);
		
		РаспознатьДанныеВСтроке_СчетКонтрагента(СтрокаДокумента, Организация, Импорт_РасчетныеСчета);
		
		//Производим поиск документа в ИБ.
		РаспознатьДанныеВСтроке_Документ(СтрокаДокумента, Организация, СтруктурноеПодразделение, ИспользоватьГраницуОбработки, ДатаГраницыОбработки);
		
		// Для каждого реквизита (= колонка) надо проверить на пустое значение
		Для Каждого КолонкаИмпорта Из ДокументыДляИмпорта.Колонки Цикл
			ПроверитьНаПустоеЗначениеИмпорта(СтрокаДокумента, Импорт_НеПустые, КолонкаИмпорта.Имя, СтруктураРеквизитов);
		КонецЦикла;
		
		Если СтрокаДокумента.Готовность < 3 Тогда
			СтрокаДокумента.Загрузить = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Контрагент)
			Или НЕ ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) Тогда
			ДополнитьСписокНеНайденных(СтрокаДокумента, ТаблицаКонтрагентов);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция РазобратьФайлИмпортаTXT(ДокументыДляИмпорта,
								Импорт_РасчетныеСчета,
								Импорт_НеПустые,
								Импорт_Заголовок,
								ИмяВременногоФайла,
								Кодировка,
								Организация,
								СтруктурноеПодразделение,
								ИспользоватьГраницуОбработки,
								ДатаГраницыОбработки,
								ТаблицаКонтрагентов,
								СтекОповещений)
	
	// Подготавливаем структуры обработки данных.
	Импорт_ПризнакОбмена = Ложь;
	
	СтруктураРеквизитов = СформироватьСтруктуруЗаголовковИмпорта();
	
	// Получаем исходные данные
	Импорт_МассивСтрок  = ПрочитатьФайл(ИмяВременногоФайла, Кодировка, СтекОповещений);
	Если Импорт_МассивСтрок = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	ТегиЗаголовка		= ТегиЗаголовкаСоответствие(); 
	
	Импорт_КоличествоСтрок = Импорт_МассивСтрок.Количество();
	Если Импорт_КоличествоСтрок = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Файл загрузки не содержит данных!'");
		СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// Заполняем первичные структуры данных.
	Импорт_ТекущаяСтрока   = 1;
	
	Наличие = 0;
	Пока Импорт_ТекущаяСтрока <= Импорт_КоличествоСтрок Цикл
		
		Стр = ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_МассивСтрок);
		
		Если Лев(Врег(СокрЛП(Стр)), 14)="СЕКЦИЯДОКУМЕНТ" Тогда
			
			Значение = "";
			Тег 	 = "";
			РазобратьТеговуюСтроку(Стр, Тег, Значение);
			
			Если Тег = "СЕКЦИЯДОКУМЕНТ" Тогда
				НоваяСтрокаДокументов = ДокументыДляИмпорта.Добавить();
				НоваяСтрокаДокументов.Операция = Значение;
				
				Если НЕ ЗагрузитьСекциюДокумента(НоваяСтрокаДокументов, Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_МассивСтрок) Тогда
					Возврат Ложь;
				КонецЕсли;
				
				Если (Импорт_ТекущаяСтрока-1) = Импорт_КоличествоСтрок Тогда 
					Наличие = 1;
					Если НЕ Импорт_ПризнакОбмена Тогда
						
						ТекстСообщения = НСтр("ru = 'В файле импорта отсутствует признак обмена ""1CClientBankExchange""!'");
						СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
						
						Возврат Ложь;
						
					КонецЕсли;
					
					// Формируем объектные структуры данных.
					Для каждого СтрокаДокумента Из ДокументыДляИмпорта Цикл
						
						//Распознаем реквизиты - порядок распознания важен.
						РаспознатьДанныеВСтроке_СуммаДокумента(СтрокаДокумента);
						
						РаспознатьДанныеВСтроке_ТипДокумента(СтрокаДокумента,ДокументыДляИмпорта, ИспользоватьГраницуОбработки, ДатаГраницыОбработки, Ложь);
						
						РаспознатьДанныеВСтроке_Контрагент(СтрокаДокумента, Организация, СтруктурноеПодразделение, СтекОповещений);
						
						РаспознатьДанныеВСтроке_СчетКонтрагента(СтрокаДокумента, Организация, Импорт_РасчетныеСчета);
						
						//Производим поиск документа в ИБ.
						РаспознатьДанныеВСтроке_Документ(СтрокаДокумента, Организация, СтруктурноеПодразделение, ИспользоватьГраницуОбработки, ДатаГраницыОбработки);
						
						// Для каждого реквизита (= колонка) надо проверить на пустое значение.
						Для каждого КолонкаИмпорта из ДокументыДляИмпорта.Колонки Цикл
							ПроверитьНаПустоеЗначениеИмпорта(СтрокаДокумента, Импорт_НеПустые, КолонкаИмпорта.Имя, СтруктураРеквизитов);
						КонецЦикла;
						
						Если СтрокаДокумента.Готовность < 3 Тогда
							СтрокаДокумента.Загрузить = Истина;
						КонецЕсли;
						
						Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Контрагент)
							Или НЕ ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) Тогда
							ДополнитьСписокНеНайденных(СтрокаДокумента, ТаблицаКонтрагентов);
						КонецЕсли;
					КонецЦикла;
					
					Возврат Ложь;
					
				КонецЕсли;
				
			Иначе
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Нарушена структура файла импорта, строка %1 : %2'"), Импорт_ТекущаяСтрока - 1, Стр);
				СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
				Возврат Ложь;
				
			КонецЕсли;
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 14)="СЕКЦИЯРАСЧСЧЕТ" Тогда
			
			СтрокаРССчетов = Импорт_РасчетныеСчета.Добавить();
			Если НЕ ЗагрузитьСекциюРасчСчета(СтрокаРССчетов, Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_МассивСтрок, СтекОповещений) Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Нарушена структура файла импорта в секции описания расчетного счета! Строка: %1'"), Импорт_ТекущаяСтрока - 1);
				СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
				
				Возврат Ложь;
				
			КонецЕсли;
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 8)="РАСЧСЧЕТ" Тогда
			
			Значение = "";
			Тег = "";
			РазобратьТеговуюСтроку(Стр, Тег, Значение);
			
			Если Тег = "РАСЧСЧЕТ" Тогда
				Если СчетПринадлежитОрганизации(Значение, Организация) Тогда
					СтрокаРССчетов = Импорт_РасчетныеСчета.Найти(Значение, "РасчСчет");
					Если СтрокаРССчетов = Неопределено Тогда
						СтрокаРССчетов = Импорт_РасчетныеСчета.Добавить();
						СтрокаРССчетов.РасчСчет = Значение;
					КонецЕсли;
				Иначе
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В заголовке файла импорта указан счет, не принадлежащий организации: %1!'"), Значение);
					СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
					
					Возврат Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 8)="ДОКУМЕНТ" Тогда
			//Импорт_ВидыДокументов.Добавить(Значение);
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 10)="КОНЕЦФАЙЛА" И Наличие = 0 Тогда
			Если НЕ Импорт_ПризнакОбмена Тогда
				
				ТекстСообщения = НСтр("ru = 'В файле импорта отсутствует признак обмена ""1CClientBankExchange""!'");
				СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
					
				Возврат Ложь;
				
			КонецЕсли;
			
			// Формируем объектные структуры данных.
			Для Каждого СтрокаДокумента Из ДокументыДляИмпорта Цикл
				
				//Распознаем реквизиты - порядок распознания важен.
				РаспознатьДанныеВСтроке_СуммаДокумента(СтрокаДокумента);
				
				РаспознатьДанныеВСтроке_ТипДокумента(СтрокаДокумента, ДокументыДляИмпорта, ИспользоватьГраницуОбработки, ДатаГраницыОбработки, Ложь);
				
				РаспознатьДанныеВСтроке_Контрагент(СтрокаДокумента, Организация, СтруктурноеПодразделение, СтекОповещений);
				
				РаспознатьДанныеВСтроке_СчетКонтрагента(СтрокаДокумента, Организация, Импорт_РасчетныеСчета);
				
				//Производим поиск документа в ИБ.
				РаспознатьДанныеВСтроке_Документ(СтрокаДокумента, Организация, СтруктурноеПодразделение, ИспользоватьГраницуОбработки, ДатаГраницыОбработки);
				
				// Для каждого реквизита (= колонка) надо проверить на пустое значение.
				Для каждого КолонкаИмпорта из ДокументыДляИмпорта.Колонки Цикл
					Если Найти(КолонкаИмпорта.Имя, "РНН") = 0 Тогда
						ПроверитьНаПустоеЗначениеИмпорта(СтрокаДокумента, Импорт_НеПустые, КолонкаИмпорта.Имя, СтруктураРеквизитов);
					КонецЕсли;
				КонецЦикла;
				
				Если СтрокаДокумента.Готовность < 3 Тогда
					СтрокаДокумента.Загрузить = Истина;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Контрагент)
					Или НЕ ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) Тогда
					ДополнитьСписокНеНайденных(СтрокаДокумента, ТаблицаКонтрагентов);
				КонецЕсли;
				
				СтрокаДокумента.СообщенияОбОшибках = СтрокаДокумента.ОписаниеОшибок;
				СтрокаДокумента.ОписаниеОшибок     = СтрЗаменить(СтрокаДокумента.ОписаниеОшибок, Символы.ПС, " ");
			КонецЦикла;
			
			Возврат Истина;
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 20)="1CCLIENTBANKEXCHANGE" Тогда
			Импорт_ПризнакОбмена = Истина;
			
		Иначе
			ЗагрузитьСтрокуЗаголовка(Стр, ТегиЗаголовка, Импорт_Заголовок, Импорт_ТекущаяСтрока, СтекОповещений);
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Операция Из ДокументыДляИмпорта Цикл
		Операция.СообщенияОбОшибках = Операция.ОписаниеОшибок;
		Операция.ОписаниеОшибок     = СтрЗаменить(Операция.ОписаниеОшибок, Символы.ПС, " ");
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьВыборкуОрганизаций() Экспорт
	
	ЗапросПоОрганизациям = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|");
	
	Возврат ЗапросПоОрганизациям.Выполнить().Выбрать();
	
КонецФункции

Процедура УстановитьСвойство(Объект, ИмяСвойства, ЗначениеСвойства)
	
	Если Объект[ИмяСвойства] <> ЗначениеСвойства Тогда
		Объект[ИмяСвойства] = ЗначениеСвойства;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПредставлениеОбъекта(Объект)
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежноеПоручениеВходящее") Тогда
		ВидДокумента = НСтр("ru = 'Входящее платежное поручение'");
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежноеПоручениеИсходящее") Тогда
		ВидДокумента = НСтр("ru = 'Исходящее платежное поручение'");
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежныйОрдерСписаниеДенежныхСредств") Тогда
		ВидДокумента = НСтр("ru = 'Платежный ордер (списание)'");
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежныйОрдерПоступлениеДенежныхСредств") Тогда
		ВидДокумента = НСтр("ru = 'Платежный ордер (поступление)'");
		
	Иначе
		Возврат НСтр("ru = 'объект'");
		
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'документ ""%1"" №%2 от %3 '"),
		ВидДокумента,
		СокрЛП(Объект.Номер),
		Объект.Дата);
	
КонецФункции

Функция ПроверитьДокументДляЗагрузки(СтуктураДокумента)
	
	Результат = "";
	
	Если СтуктураДокумента.Готовность > 3 Тогда
		Результат = СтуктураДокумента.ОписаниеОшибок;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьТаблицуДляЗагрузки(ДокументыКИмпорту, ИспользоватьГраницуОбработки, ДатаГраницыОбработки, СтекОповещений)
	
	Для каждого СтрокаСекции из ДокументыКИмпорту Цикл
		
		Если СтрокаСекции.Загрузить Тогда
			
			Если ИспользоватьГраницуОбработки Тогда
				
				Если ЗначениеЗаполнено(ДатаГраницыОбработки) Тогда
					
					Если НачалоДня(СтрокаСекции.ДатаДок) <= НачалоДня(ДатаГраницыОбработки) Тогда
						
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Платежный документ ""%1"" № %2 от %3 имеет дату равной или меньшей границы обработки! Документ не будет загружен!'"), 
							СтрокаСекции.Операция,
							СтрокаСекции.НомерДок,
							СтрокаСекции.ДатаДок);
						
						СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
						СтрокаСекции.Загрузить = Ложь;
						
					ИначеЕсли ЗначениеЗаполнено(СтрокаСекции.Поступило) Тогда
						Если НачалоДня(СтрокаСекции.ДатаДок) <= НачалоДня(ДатаГраницыОбработки) Тогда
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Платежный документ ""%1"" №%2 от %3 имеет дату поступления средств равной или меньшей границы обработки! Документ не будет загружен!'"),
								СтрокаСекции.Операция,
								СтрокаСекции.НомерДок,
								СтрокаСекции.ДатаДок);
							
							СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
							СтрокаСекции.Загрузить = Ложь;
						КонецЕсли;
						
					ИначеЕсли ЗначениеЗаполнено(СтрокаСекции.Списано) Тогда
						Если НачалоДня(СтрокаСекции.ДатаДок) <= НачалоДня(ДатаГраницыОбработки) Тогда
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Платежный документ ""%1"" №%2 от %3 имеет дату списания средств равной или меньшей границы обработки! Документ не будет загружен!'"),
								СтрокаСекции.Операция,
								СтрокаСекции.НомерДок,
								СтрокаСекции.ДатаДок);
							
							СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
							СтрокаСекции.Загрузить = Ложь;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПривестиНомер(НомерДокумента, Номер)
	
	НовыйНомер = "";
	ДлинаНомера = СтрДлина(Номер);
	ДлинаНомераДокумента = СтрДлина(НомерДокумента);
	
	Возврат Лев(НомерДокумента, ДлинаНомераДокумента - ДлинаНомера) + Номер;
	
КонецФункции

Функция СоздатьНовыйПлатежныйДокумент(ВидДокумента, Номер, Дата)
	
	НовыйДокумент = Документы[ВидДокумента].СоздатьДокумент();
	
	Если ВидДокумента = "ПлатежноеПоручениеИсходящее" Тогда
		//НовыйДокумент.Номер = ПривестиНомер(НовыйДокумент.Номер, Номер);
		НовыйДокумент.НомерВходящегоДокумента = Номер;
		НовыйДокумент.ДатаВходящегоДокумента = Дата;
		НовыйДокумент.ДатаВыписки = Дата;
		
	ИначеЕсли ВидДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств" Тогда
		//НовыйДокумент.Номер = ПривестиНомер(НовыйДокумент.Номер, Номер);
		НовыйДокумент.НомерВходящегоДокумента = Номер;
		НовыйДокумент.ДатаВходящегоДокумента = Дата;
		НовыйДокумент.Дата = Дата;
		
	ИначеЕсли ВидДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств" Тогда
		НовыйДокумент.НомерВходящегоДокумента = Номер;              
		НовыйДокумент.ДатаВходящегоДокумента = Дата;
		
	ИначеЕсли ВидДокумента = "ПлатежноеПоручениеВходящее" Тогда
		НовыйДокумент.НомерВходящегоДокумента = Номер;              
		НовыйДокумент.ДатаВходящегоДокумента = Дата;
		
	КонецЕсли;
	
	Возврат НовыйДокумент;
	
КонецФункции

Процедура ЗаполнитьРеквизитПлатежногоДокумента(ОбъектДокумента, СтрокаСекции, Имя, СтруктураНастроек = Неопределено, Организация, СтруктурноеПодразделение, СтекОповещений)
	
	ТипДокумента = ОбъектДокумента.Метаданные().Имя;
	
	Если ТипДокумента = "ПлатежноеПоручениеИсходящее" Тогда
		ЗаполнитьРеквизитПлатежногоПорученияИсходящее(ОбъектДокумента, СтрокаСекции, Имя, СтруктураНастроек, Организация, СтруктурноеПодразделение, СтекОповещений);
		
	ИначеЕсли ТипДокумента = "ПлатежноеПоручениеВходящее" Тогда
		ЗаполнитьРеквизитПлатежногоПорученияВходящее(ОбъектДокумента, СтрокаСекции, Имя, СтруктураНастроек, Организация, СтруктурноеПодразделение, СтекОповещений);
		
	ИначеЕсли ТипДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств" Тогда
		ЗаполнитьРеквизитПлатежногоОрдераСписание(ОбъектДокумента, СтрокаСекции, Имя, СтруктураНастроек, Организация, СтруктурноеПодразделение, СтекОповещений);
		
	ИначеЕсли ТипДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств" Тогда
		ЗаполнитьРеквизитПлатежногоОрдераПоступление(ОбъектДокумента, СтрокаСекции, Имя, СтруктураНастроек, Организация, СтруктурноеПодразделение, СтекОповещений);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитПлатежногоПорученияИсходящее(ОбъектДокумента, ИсходныеДанные, ИмяРеквизита, СтруктураНастроек, Организация, СтруктурноеПодразделение, СтекОповещений)
	
	Если ИмяРеквизита = "Организация" Тогда
		
		УстановитьСвойство(ОбъектДокумента, "Организация",                         Организация);
		УстановитьСвойство(ОбъектДокумента, "СтруктурноеПодразделениеОтправитель", СтруктурноеПодразделение);
		УстановитьСвойство(ОбъектДокумента, "СтруктурноеПодразделениеПолучатель",  СтруктурноеПодразделение);
		
		Если ОбъектДокумента.ДатаВыписки <> Дата(1,1,1) И ОбъектДокумента.ДатаВыписки <> ИсходныеДанные.ДатаДок Тогда 
			ТекстСообщения = НСтр("ru = 'В документе %1 значение <%2> реквизита ""Дата выписки"" заменено на <%3>'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения, ОбъектДокумента.Ссылка, ОбъектДокумента.ДатаВыписки, ИсходныеДанные.ДатаДок);
			
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		КонецЕсли;
		
		УстановитьСвойство(ОбъектДокумента, "НомерВходящегоДокумента", ИсходныеДанные.НомерДок);
		УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента",  ИсходныеДанные.ДатаДок);
		
		УстановитьСвойство(ОбъектДокумента, "Дата",     ИсходныеДанные.ДатаДок);
		УстановитьСвойство(ОбъектДокумента, "Оплачено", Истина);
		
		Если ОбъектДокумента.ЭтоНовый() Тогда
			УстановитьСвойство(ОбъектДокумента, "ДатаВыписки", ИсходныеДанные.ДатаДок);
			//УстановитьСвойство(ОбъектДокумента, "Номер", ИсходныеДанные.НомерДок);
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "Контрагент" Тогда
		
		Если ЗначениеЗаполнено(ОбъектДокумента.Контрагент) И ОбъектДокумента.Контрагент <> ИсходныеДанные.Контрагент Тогда 
			ТекстСообщения = НСтр("ru = 'В документе %1 значение <%2> реквизита ""Контрагент"" заменено на <%3>'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения, ОбъектДокумента.Ссылка, ОбъектДокумента.Контрагент, ИсходныеДанные.Контрагент);
			
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		КонецЕсли;
		
		УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент);
		
		//информация о ДоговореВзаиморасчетов в файле не передается, но
		//она нужна для корректной записи документов
		//поэтому устанавливаем договор по умолчанию "Основной договор"
		
		Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
			
		ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента) Тогда
			Если ЗначениеЗаполнено(ОбъектДокумента.Контрагент) Тогда
				СтрокаРасшифровки.ДоговорКонтрагента = СоздатьНужныйДоговор(ОбъектДокумента.Контрагент, Организация, Ложь, ИсходныеДанные.СчетОрганизации.ВалютаДенежныхСредств, СтекОповещений);
			КонецЕсли;
		КонецЕсли;
		
		СчетУчета  = СтруктураНастроек.ППИсх_СчетУчетаРасчетовСКонтрагентом;
		СчетАванса = СтруктураНастроек.ППИсх_СчетУчетаРасчетовПоАвансам;
		
		ЗаполнятьАвтоматически = СтруктураНастроек.ППИсх_ЗаполнятьДанныеАвтоматически;
		
		Если (ЗаполнятьАвтоматически <> Истина) Тогда
			// Если СчетУчета не проставлен в форме Настройка, то он берется для организации из РегистраСведений.
			Если НЕ (НЕ ЗначениеЗаполнено(ОбъектДокумента.Контрагент) ИЛИ НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента)) Тогда
				СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация, ОбъектДокумента.Контрагент, СтрокаРасшифровки.ДоговорКонтрагента);
				СчетУчетаРегистр = СчетаУчета.СчетРасчетовПокупателя;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СчетУчетаРегистр) Тогда
				Если НЕ ЗначениеЗаполнено(ИсходныеДанные.Поступило) Тогда 
					СчетУчета = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоставщикамИПодрядчикам;
				КонецЕсли;
			КонецЕсли;
		Иначе
			УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовПоАвансам",    СчетАванса);
			УстановитьСвойство(СтрокаРасшифровки, "СтатьяДвиженияДенежныхСредств", СтруктураНастроек.ППИсх_СтатьяДвиженияДенежныхСредств);
		КонецЕсли;
		
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовСКонтрагентомБУ", СчетУчета);
		УстановитьСвойство(ОбъектДокумента, "СчетУчетаРасчетовСКонтрагентомБУ",   СчетУчета);
		
	ИначеЕсли ИмяРеквизита = "ДоговорКонтрагента" Тогда //заполняется при заполнении Контрагент
	
	ИначеЕсли ИмяРеквизита = "СчетОрганизации" Тогда //заполняется при заполнении Контрагент
		
		Если ЗначениеЗаполнено(ОбъектДокумента.СчетОрганизации) И ОбъектДокумента.СчетОрганизации <> ИсходныеДанные.СчетОрганизации Тогда 
			ТекстСообщения = НСтр("ru = 'В документе %1 значение <%2> реквизита ""Счет организации"" заменено на <%3>'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения, ОбъектДокумента.Ссылка, ОбъектДокумента.СчетОрганизации, ИсходныеДанные.СчетОрганизации);
			
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		КонецЕсли;
		
		УстановитьСвойство(ОбъектДокумента, "СчетОрганизации", ИсходныеДанные.СчетОрганизации);
		УстановитьСвойство(ОбъектДокумента, "ВалютаДокумента", ОбъектДокумента.СчетОрганизации.ВалютаДенежныхСредств);
		
		Если НЕ ЗначениеЗаполнено(ОбъектДокумента.СчетБанк) Тогда
			УстановитьСвойство(ОбъектДокумента, "СчетБанк", ПланыСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетах);
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "ВалютаДокумента" Тогда //заполняется при заполнении СчетОрганизации
		
	ИначеЕсли ИмяРеквизита = "СчетБанк" Тогда //заполняется при заполнении СчетОрганизации
	
	ИначеЕсли ИмяРеквизита = "ВидОперации" Тогда
		
		Если ОбъектДокумента.ЭтоНовый() Тогда
			ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
			УстановитьСвойство(ОбъектДокумента, "ВидОперации", ВидОперации);
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "СуммаДокумента" Тогда
		
		Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
		ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС) Тогда 
			СтрокаРасшифровки.СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(, "ОсновнаяСтавкаНДС");
			УстановитьСвойство(СтрокаРасшифровки, "СтавкаНДС", СтрокаРасшифровки.СтавкаНДС);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОбъектДокумента.СуммаДокумента) И ОбъектДокумента.СуммаДокумента <> ИсходныеДанные.СуммаДокумента Тогда 
			ТекстСообщения = НСтр("ru = 'В документе %1 значение <%2> реквизита ""Сумма документа"" заменено на <%3>'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения, ОбъектДокумента.Ссылка, ОбъектДокумента.СуммаДокумента, ИсходныеДанные.СуммаДокумента);
			
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		КонецЕсли;
		
		УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента);
		Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
		ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
		КонецЕсли;
		
		СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
		
		Если Не СтрокаРасшифровки.ДоговорКонтрагента.Пустая() Тогда
			Если ОбъектДокумента.ВалютаДокумента = СтрокаРасшифровки.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
				СтрокаРасшифровки.КурсВзаиморасчетов = 1;
				СтрокаРасшифровки.КратностьВзаиморасчетов = 1;
				СтрокаРасшифровки.СуммаВзаиморасчетов = ОбъектДокумента.СуммаДокумента;
			Иначе
				КурсДокумента = 1;
				КратностьДокумента = 1;
				КурсДоговора = 1;
				КратностьДоговора = 1;
				
				тзКурсКратностьДокумента = РегистрыСведений.КурсыВалют.СрезПоследних(ОбъектДокумента.Дата, Новый Структура("Валюта", ОбъектДокумента.ВалютаДокумента));
				Если тзКурсКратностьДокумента.Количество() > 0 Тогда
					КурсДокумента = ?(тзКурсКратностьДокумента[0].Курс > 0, тзКурсКратностьДокумента[0].Курс, 1);
				КонецЕсли;
				
				тзКурсКратностьДоговора = РегистрыСведений.КурсыВалют.СрезПоследних(ОбъектДокумента.Дата, Новый Структура("Валюта", СтрокаРасшифровки.ДоговорКонтрагента.ВалютаВзаиморасчетов));
				Если тзКурсКратностьДоговора.Количество() > 0 Тогда
					КурсДоговора = ?(тзКурсКратностьДоговора[0].Курс > 0, тзКурсКратностьДоговора[0].Курс, 1);
				КонецЕсли;
				
				КурсПересчета = (КурсДокумента / КурсДоговора) * (КратностьДоговора / КратностьДокумента);
				СтрокаРасшифровки.КурсВзаиморасчетов = КурсДокумента / КурсДоговора;
				СтрокаРасшифровки.КратностьВзаиморасчетов = КратностьДоговора / КратностьДокумента;
				СтрокаРасшифровки.СуммаВзаиморасчетов = ОбъектДокумента.СуммаДокумента * КурсПересчета;
			КонецЕсли;
		Иначе
			СтрокаРасшифровки.КурсВзаиморасчетов = 1;
			СтрокаРасшифровки.КратностьВзаиморасчетов = 1;
			СтрокаРасшифровки.СуммаВзаиморасчетов = ОбъектДокумента.СуммаДокумента;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС) Тогда
			ЗначениеСтавкиНДС          = УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС);
			СтрокаРасшифровки.СуммаНДС = СтрокаРасшифровки.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
			
			УстановитьСвойство(СтрокаРасшифровки, "СуммаНДС", СтрокаРасшифровки.СуммаНДС);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИсходныеДанные.Списано) Тогда
			УстановитьСвойство(ОбъектДокумента, "Оплачено", Истина);
			УстановитьСвойство(ОбъектДокумента, "Дата",     НачалоДня(ИсходныеДанные.Списано));
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "Оплачено" Тогда
	
	ИначеЕсли ИмяРеквизита = "РННПлательщика" Тогда
		УстановитьСвойство(ОбъектДокумента, "РННПлательщика", ИсходныеДанные.ПлательщикРНН);
		
	ИначеЕсли ИмяРеквизита = "РННПолучателя" Тогда
		УстановитьСвойство(ОбъектДокумента, "РННПолучателя", ИсходныеДанные.ПолучательРНН);
		
	ИначеЕсли ИмяРеквизита = "Ответственный" Тогда
		УстановитьСвойство(ОбъектДокумента, "Ответственный", ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(, "ОсновнойОтветственный"));
		
	Иначе
		
		Попытка
			ЗначениеРеквизита = ИсходныеДанные[ИмяРеквизита];
		Исключение
			ЗначениеРеквизита = Неопределено;
		КонецПопытки;
		
		Если ЗначениеРеквизита <> Неопределено Тогда
			УстановитьСвойство(ОбъектДокумента, ИмяРеквизита, ЗначениеРеквизита);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитПлатежногоПорученияВходящее(ОбъектДокумента, ИсходныеДанные, ИмяРеквизита, СтруктураНастроек, Организация, СтруктурноеПодразделение, СтекОповещений)
	
	Если ИмяРеквизита = "Организация" Тогда
		
		УстановитьСвойство(ОбъектДокумента, "Организация",                         Организация);
		УстановитьСвойство(ОбъектДокумента, "СтруктурноеПодразделениеПолучатель",  СтруктурноеПодразделение);
		УстановитьСвойство(ОбъектДокумента, "СтруктурноеПодразделениеОтправитель", СтруктурноеПодразделение);
		
		Если ОбъектДокумента.ДатаВходящегоДокумента <> Дата(1,1,1) И ОбъектДокумента.ДатаВходящегоДокумента <> ИсходныеДанные.ДатаДок Тогда 
			ТекстСообщения = НСтр("ru = 'В документе %1 значение <%2> реквизита ""Дата по банку"" заменено на <%3>'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения, ОбъектДокумента.Ссылка, ОбъектДокумента.ДатаВходящегоДокумента, ИсходныеДанные.ДатаДок);
			
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		КонецЕсли;
		
		УстановитьСвойство(ОбъектДокумента, "НомерВходящегоДокумента", ИсходныеДанные.НомерДок);
		УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента", ИсходныеДанные.ДатаДок);
		
		Если ЗначениеЗаполнено(ИсходныеДанные.Поступило) Тогда
			УстановитьСвойство(ОбъектДокумента, "Оплачено",    Истина);
			УстановитьСвойство(ОбъектДокумента, "Дата",        НачалоДня(ИсходныеДанные.Поступило));
			УстановитьСвойство(ОбъектДокумента, "ДатаВыписки", НачалоДня(ИсходныеДанные.Поступило));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбъектДокумента.Дата) Тогда
			УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.ДатаДок);
			УстановитьСвойство(ОбъектДокумента, "ДатаВыписки", ИсходныеДанные.ДатаДок);
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "Контрагент" Тогда
		
		Если ЗначениеЗаполнено(ОбъектДокумента.Контрагент)   И ОбъектДокумента.Контрагент <> ИсходныеДанные.Контрагент Тогда 
			ТекстСообщения = НСтр("ru = 'В документе %1 значение <%2> реквизита ""Контрагент"" заменено на <%3>'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения, ОбъектДокумента.Ссылка, ОбъектДокумента.Контрагент, ИсходныеДанные.Контрагент);
			
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		КонецЕсли;
		
		УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент);
		
		//информация о ДоговореВзаиморасчетов в файле не передается, но
		//она нужна для корректной записи документов
		//поэтому устанавливаем договор по умолчанию "Основной договор"
		
		Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
			
		ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента) Тогда
			Если ЗначениеЗаполнено(ОбъектДокумента.Контрагент) Тогда
				СтрокаРасшифровки.ДоговорКонтрагента = СоздатьНужныйДоговор(ОбъектДокумента.Контрагент, ОбъектДокумента.Организация, Истина, ИсходныеДанные.СчетОрганизации.ВалютаДенежныхСредств, СтекОповещений);
			КонецЕсли;
		КонецЕсли;
		
		СчетУчета  = СтруктураНастроек.ППВх_СчетУчетаРасчетовСКонтрагентом;
		СчетАванса = СтруктураНастроек.ППВх_СчетУчетаРасчетовПоАвансам;
		
		ЗаполнятьАвтоматически = СтруктураНастроек.ППВх_ЗаполнятьДанныеАвтоматически;
		
		Если (ЗаполнятьАвтоматически <> Истина) Тогда
			
			Если НЕ (НЕ ЗначениеЗаполнено(ОбъектДокумента.Контрагент) ИЛИ НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента)) Тогда
				СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация, ОбъектДокумента.Контрагент, СтрокаРасшифровки.ДоговорКонтрагента);
				СчетУчетаРегистр = СчетаУчета.СчетРасчетов;
				
			Иначе
				СчетУчетаРегистр = Неопределено;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СчетУчетаРегистр) Тогда
				
				Если НЕ ЗначениеЗаполнено(ИсходныеДанные.Списано) Тогда
					СчетУчета = ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовПоАвансам",    СчетАванса);
			УстановитьСвойство(СтрокаРасшифровки, "СтатьяДвиженияДенежныхСредств", СтруктураНастроек.ППВх_СтатьяДвиженияДенежныхСредств);
			
		КонецЕсли;
		
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовСКонтрагентомБУ", СчетУчета);
		УстановитьСвойство(ОбъектДокумента, "СчетУчетаРасчетовСКонтрагентомБУ",   СчетУчета);
	
	ИначеЕсли ИмяРеквизита = "ДоговорКонтрагента" Тогда //заполняется при заполнении Контрагент

	ИначеЕсли ИмяРеквизита = "СчетОрганизации" Тогда //заполняется при заполнении Контрагент
		
		Если ЗначениеЗаполнено(ОбъектДокумента.СчетОрганизации) И ОбъектДокумента.СчетОрганизации <> ИсходныеДанные.СчетОрганизации Тогда 
			ТекстСообщения = НСтр("ru = 'В документе %1 значение <%2> реквизита ""Счет организации"" заменено на <%3>'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения, ОбъектДокумента.Ссылка, ОбъектДокумента.СчетОрганизации, ИсходныеДанные.СчетОрганизации);
			
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		КонецЕсли;
		
		УстановитьСвойство(ОбъектДокумента, "СчетОрганизации", ИсходныеДанные.СчетОрганизации);
		УстановитьСвойство(ОбъектДокумента, "ВалютаДокумента", ОбъектДокумента.СчетОрганизации.ВалютаДенежныхСредств);
		УстановитьСвойство(ОбъектДокумента, "СчетБанк",        ПланыСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетах);
		
	ИначеЕсли ИмяРеквизита = "ВалютаДокумента" Тогда //заполняется при заполнении СчетОрганизации
		
	ИначеЕсли ИмяРеквизита = "СчетБанк" Тогда //заполняется при заполнении СчетОрганизации
		
	ИначеЕсли ИмяРеквизита = "СуммаДокумента" Тогда
		
		Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
		ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС) Тогда 
			СтрокаРасшифровки.СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(, "ОсновнаяСтавкаНДС");
			УстановитьСвойство(СтрокаРасшифровки, "СтавкаНДС", СтрокаРасшифровки.СтавкаНДС);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОбъектДокумента.СуммаДокумента) И ОбъектДокумента.СуммаДокумента <> ИсходныеДанные.СуммаДокумента Тогда 
			ТекстСообщения = НСтр("ru = 'В документе %1 значение <%2> реквизита ""Сумма документа"" заменено на <%3>'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения, ОбъектДокумента.Ссылка, ОбъектДокумента.СуммаДокумента, ИсходныеДанные.СуммаДокумента);
			
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		КонецЕсли;
		
		УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента);
		
		Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
		ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
		КонецЕсли;
		
		СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
		
		Если Не СтрокаРасшифровки.ДоговорКонтрагента.Пустая() Тогда
			Если ОбъектДокумента.ВалютаДокумента = СтрокаРасшифровки.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
				СтрокаРасшифровки.КурсВзаиморасчетов 		= 1;
				СтрокаРасшифровки.КратностьВзаиморасчетов	= 1;
				СтрокаРасшифровки.СуммаВзаиморасчетов 		= ОбъектДокумента.СуммаДокумента;
			Иначе
				КурсДокумента		 = 1;
				КратностьДокумента	 = 1;
				КурсДоговора		 = 1;
				КратностьДоговора	 = 1;
				
				тзКурсКратностьДокумента = РегистрыСведений.КурсыВалют.СрезПоследних(ОбъектДокумента.Дата, Новый Структура("Валюта", ОбъектДокумента.ВалютаДокумента));
				Если тзКурсКратностьДокумента.Количество() > 0 Тогда
					КурсДокумента = ?(тзКурсКратностьДокумента[0].Курс > 0, тзКурсКратностьДокумента[0].Курс, 1);
				КонецЕсли;
				
				тзКурсКратностьДоговора = РегистрыСведений.КурсыВалют.СрезПоследних(ОбъектДокумента.Дата, Новый Структура("Валюта", СтрокаРасшифровки.ДоговорКонтрагента.ВалютаВзаиморасчетов));
				Если тзКурсКратностьДоговора.Количество() > 0 Тогда
					КурсДоговора = ?(тзКурсКратностьДоговора[0].Курс > 0, тзКурсКратностьДоговора[0].Курс, 1);
				КонецЕсли;
				
				КурсПересчета = (КурсДокумента / КурсДоговора) * (КратностьДоговора / КратностьДокумента);
				
				СтрокаРасшифровки.КурсВзаиморасчетов 	  = КурсДокумента / КурсДоговора;
				СтрокаРасшифровки.КратностьВзаиморасчетов = КратностьДоговора / КратностьДокумента;
				СтрокаРасшифровки.СуммаВзаиморасчетов     = ОбъектДокумента.СуммаДокумента * КурсПересчета;
			КонецЕсли;
		Иначе
			СтрокаРасшифровки.КурсВзаиморасчетов 		= 1;
			СтрокаРасшифровки.КратностьВзаиморасчетов 	= 1;
			СтрокаРасшифровки.СуммаВзаиморасчетов 		= ОбъектДокумента.СуммаДокумента;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС) Тогда
			ЗначениеСтавкиНДС     		= УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС);
			СтрокаРасшифровки.СуммаНДС  = СтрокаРасшифровки.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);
			
			УстановитьСвойство(СтрокаРасшифровки, "СуммаНДС", СтрокаРасшифровки.СуммаНДС);
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "Оплачено" Тогда
		
		Если ЗначениеЗаполнено(ИсходныеДанные.Поступило) Тогда
			УстановитьСвойство(ОбъектДокумента, "Оплачено"	, Истина);
			УстановитьСвойство(ОбъектДокумента, "Дата"		, НачалоДня(ИсходныеДанные.Поступило));
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "ВидОперации" Тогда
		
		Если ОбъектДокумента.ЭтоНовый() Тогда
			ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;
			УстановитьСвойство(ОбъектДокумента, "ВидОперации", ВидОперации);
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "Ответственный" Тогда
		УстановитьСвойство(ОбъектДокумента, "Ответственный", ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(, "ОсновнойОтветственный"));
		
	Иначе
		
		Попытка
			ЗначениеРеквизита = ИсходныеДанные[ИмяРеквизита];
		Исключение
			ЗначениеРеквизита = Неопределено;
		КонецПопытки;
		
		Если ЗначениеРеквизита <> Неопределено Тогда
			УстановитьСвойство(ОбъектДокумента, ИмяРеквизита, ЗначениеРеквизита);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитПлатежногоОрдераСписание(ОбъектДокумента, ИсходныеДанные, ИмяРеквизита, СтруктураНастроек, Организация, СтруктурноеПодразделение, СтекОповещений)
	
	Если ИмяРеквизита = "Организация" Тогда
		
		УстановитьСвойство(ОбъектДокумента, "Организация",                         Организация);
		УстановитьСвойство(ОбъектДокумента, "СтруктурноеПодразделениеОтправитель", СтруктурноеПодразделение);
		УстановитьСвойство(ОбъектДокумента, "СтруктурноеПодразделениеПолучатель",  СтруктурноеПодразделение);
		УстановитьСвойство(ОбъектДокумента, "Дата",                                ИсходныеДанные.Списано);
		
		Если НЕ ЗначениеЗаполнено(ОбъектДокумента.Дата) Тогда
			УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.ДатаДок);
		КонецЕсли;
		
		УстановитьСвойство(ОбъектДокумента, "НомерВходящегоДокумента", ИсходныеДанные.НомерДок);
		УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента", ИсходныеДанные.ДатаДок);
		УстановитьСвойство(ОбъектДокумента, "ДатаВыписки", ИсходныеДанные.ДатаДок);
		
		Если ОбъектДокумента.ЭтоНовый() Тогда
			//УстановитьСвойство(ОбъектДокумента, "Номер", ИсходныеДанные.НомерДок);
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "Контрагент" Тогда
		
		Если ЗначениеЗаполнено(ОбъектДокумента.Контрагент) И ОбъектДокумента.Контрагент <> ИсходныеДанные.Контрагент Тогда 
			ТекстСообщения = НСтр("ru = 'В документе %1 значение <%2> реквизита ""Контрагент"" заменено на <%3>'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения, ОбъектДокумента.Ссылка, ОбъектДокумента.Контрагент, ИсходныеДанные.Контрагент);
			
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		КонецЕсли;
		
		УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент);
		
		//информация о ДоговореВзаиморасчетов в файле не передается, но
		//она нужна для корректной записи документов
		//поэтому устанавливаем договор по умолчанию "Основной договор"
		
		Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
			
		ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента) Тогда
			Если ЗначениеЗаполнено(ОбъектДокумента.Контрагент) Тогда
				СтрокаРасшифровки.ДоговорКонтрагента = СоздатьНужныйДоговор(ОбъектДокумента.Контрагент, Организация, Ложь, ИсходныеДанные.СчетОрганизации.ВалютаДенежныхСредств, СтекОповещений);
			КонецЕсли;
		КонецЕсли;
		
		СчетУчета  = СтруктураНастроек.ПОСпис_СчетУчетаРасчетовСКонтрагентом;
		СчетАванса = СтруктураНастроек.ПОСпис_СчетУчетаРасчетовПоАвансам;
		
		ЗаполнятьАвтоматически = СтруктураНастроек.ПОСпис_ЗаполнятьДанныеАвтоматически;
		
		Если (ЗаполнятьАвтоматически <> Истина) Тогда
			
			Если НЕ (НЕ ЗначениеЗаполнено(ОбъектДокумента.Контрагент) ИЛИ НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента)) Тогда
				СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация, ОбъектДокумента.Контрагент, СтрокаРасшифровки.ДоговорКонтрагента);
				СчетУчетаРегистр = СчетаУчета.СчетРасчетовПокупателя;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СчетУчетаРегистр) Тогда
				Если НЕ ЗначениеЗаполнено(ИсходныеДанные.Поступило) Тогда
					СчетУчета = ПланыСчетов.Типовой.КраткосрочнаяЗадолженностьПоставщикамИПодрядчикам;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовПоАвансам",    СчетАванса);
			УстановитьСвойство(СтрокаРасшифровки, "СтатьяДвиженияДенежныхСредств", СтруктураНастроек.ПОСпис_СтатьяДвиженияДенежныхСредств);
		КонецЕсли;
		
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовСКонтрагентомБУ", СчетУчета);
		УстановитьСвойство(ОбъектДокумента, "СчетУчетаРасчетовСКонтрагентомБУ",   СчетУчета);
	
	ИначеЕсли ИмяРеквизита = "ДоговорКонтрагента" Тогда //заполняется при заполнении Контрагент
	
	ИначеЕсли ИмяРеквизита = "СчетОрганизации" Тогда //заполняется при заполнении Контрагент
		
		Если ЗначениеЗаполнено(ОбъектДокумента.СчетОрганизации) И ОбъектДокумента.СчетОрганизации <> ИсходныеДанные.СчетОрганизации Тогда 
			ТекстСообщения = НСтр("ru = 'В документе %1 значение <%2> реквизита ""Счет организации"" заменено на <%3>'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения, ОбъектДокумента.Ссылка, ОбъектДокумента.СчетОрганизации, ИсходныеДанные.СчетОрганизации);
			
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		КонецЕсли;
		
		УстановитьСвойство(ОбъектДокумента, "СчетОрганизации", ИсходныеДанные.СчетОрганизации);
		УстановитьСвойство(ОбъектДокумента, "ВалютаДокумента", ОбъектДокумента.СчетОрганизации.ВалютаДенежныхСредств);
		УстановитьСвойство(ОбъектДокумента, "СчетБанк",        ПланыСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетах);
		
	ИначеЕсли ИмяРеквизита = "ВалютаДокумента" Тогда //заполняется при заполнении СчетОрганизации
		
	ИначеЕсли ИмяРеквизита = "СчетБанк" Тогда //заполняется при заполнении СчетОрганизации
	
	ИначеЕсли ИмяРеквизита = "ВидОперации" Тогда
		
		Если ОбъектДокумента.ЭтоНовый() Тогда
			ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику;
			УстановитьСвойство(ОбъектДокумента, "ВидОперации", ВидОперации);
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "СуммаДокумента" Тогда
		
		Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
			
		ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС) Тогда 
			СтрокаРасшифровки.СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(, "ОсновнаяСтавкаНДС");
			УстановитьСвойство(СтрокаРасшифровки, "СтавкаНДС", СтрокаРасшифровки.СтавкаНДС);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОбъектДокумента.СуммаДокумента) И ОбъектДокумента.СуммаДокумента <> ИсходныеДанные.СуммаДокумента Тогда 
			ТекстСообщения = НСтр("ru = 'В документе %1 значение <%2> реквизита ""Сумма документа"" заменено на <%3>'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения, ОбъектДокумента.Ссылка, ОбъектДокумента.СуммаДокумента, ИсходныеДанные.СуммаДокумента);
			
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		КонецЕсли;
		
		УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента);
		Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
		ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС) Тогда
			ЗначениеСтавкиНДС = УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС);
			СтрокаРасшифровки.СуммаНДС = СтрокаРасшифровки.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);
			УстановитьСвойство(СтрокаРасшифровки, "СуммаНДС", СтрокаРасшифровки.СуммаНДС);
		КонецЕсли;
		
		СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
		Если Не СтрокаРасшифровки.ДоговорКонтрагента.Пустая() Тогда
			Если ОбъектДокумента.ВалютаДокумента = СтрокаРасшифровки.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
				
				СтрокаРасшифровки.КурсВзаиморасчетов 	  = 1;
				СтрокаРасшифровки.КратностьВзаиморасчетов = 1;
				СтрокаРасшифровки.СуммаВзаиморасчетов	  = ОбъектДокумента.СуммаДокумента;
				
			Иначе
				КурсДокумента	   = 1;
				КратностьДокумента = 1;
				КурсДоговора	   = 1;
				КратностьДоговора  = 1;
				
				тзКурсКратностьДокумента = РегистрыСведений.КурсыВалют.СрезПоследних(ОбъектДокумента.Дата, Новый Структура("Валюта", ОбъектДокумента.ВалютаДокумента));
				Если тзКурсКратностьДокумента.Количество() > 0 Тогда
					КурсДокумента = ?(тзКурсКратностьДокумента[0].Курс > 0, тзКурсКратностьДокумента[0].Курс, 1);
				КонецЕсли;
				
				тзКурсКратностьДоговора = РегистрыСведений.КурсыВалют.СрезПоследних(ОбъектДокумента.Дата, Новый Структура("Валюта", СтрокаРасшифровки.ДоговорКонтрагента.ВалютаВзаиморасчетов));
				Если тзКурсКратностьДоговора.Количество() > 0 Тогда
					КурсДоговора = ?(тзКурсКратностьДоговора[0].Курс > 0, тзКурсКратностьДоговора[0].Курс, 1);
				КонецЕсли;
				
				КурсПересчета = (КурсДокумента / КурсДоговора) * (КратностьДоговора / КратностьДокумента);
				
				СтрокаРасшифровки.КурсВзаиморасчетов		= КурсДокумента / КурсДоговора;
				СтрокаРасшифровки.КратностьВзаиморасчетов	= КратностьДоговора / КратностьДокумента;
				СтрокаРасшифровки.СуммаВзаиморасчетов		= ОбъектДокумента.СуммаДокумента * КурсПересчета;
			КонецЕсли;
		Иначе
			СтрокаРасшифровки.КурсВзаиморасчетов	  = 1;
			СтрокаРасшифровки.КратностьВзаиморасчетов = 1;
			СтрокаРасшифровки.СуммаВзаиморасчетов	  = ОбъектДокумента.СуммаДокумента;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИсходныеДанные.Списано) Тогда
			УстановитьСвойство(ОбъектДокумента, "Оплачено", Истина);
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "Оплачено" Тогда
		
	ИначеЕсли ИмяРеквизита = "Ответственный" Тогда
		УстановитьСвойство(ОбъектДокумента, "Ответственный", ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(, "ОсновнойОтветственный"));
		
	Иначе
		
		Попытка
			ЗначениеРеквизита = ИсходныеДанные[ИмяРеквизита];
		Исключение
			ЗначениеРеквизита = Неопределено;
		КонецПопытки;
		
		Если ЗначениеРеквизита <> Неопределено Тогда
			УстановитьСвойство(ОбъектДокумента, ИмяРеквизита, ЗначениеРеквизита);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитПлатежногоОрдераПоступление(ОбъектДокумента, ИсходныеДанные, ИмяРеквизита, СтруктураНастроек, Организация, СтруктурноеПодразделение, СтекОповещений)
	
	Если ИмяРеквизита = "Организация" Тогда
		
		УстановитьСвойство(ОбъектДокумента, "Организация",                         Организация);
		УстановитьСвойство(ОбъектДокумента, "СтруктурноеПодразделениеОтправитель", СтруктурноеПодразделение);
		УстановитьСвойство(ОбъектДокумента, "СтруктурноеПодразделениеПолучатель",  СтруктурноеПодразделение);
		
		Если ОбъектДокумента.ДатаВходящегоДокумента <> Дата(1,1,1) И ОбъектДокумента.ДатаВходящегоДокумента <> ИсходныеДанные.ДатаДок Тогда 
			ТекстСообщения = НСтр("ru = 'В документе %1 значение <%2> реквизита ""Дата по банку"" заменено на <%3>'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения, ОбъектДокумента.Ссылка, ОбъектДокумента.ДатаВходящегоДокумента, ИсходныеДанные.ДатаДок);
			
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		КонецЕсли;
		
		УстановитьСвойство(ОбъектДокумента, "НомерВходящегоДокумента", ИсходныеДанные.НомерДок);
		УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента",  ИсходныеДанные.ДатаДок);
		УстановитьСвойство(ОбъектДокумента, "Дата",                    ИсходныеДанные.Поступило);
		
		Если НЕ ЗначениеЗаполнено(ОбъектДокумента.Дата) Тогда
			УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.ДатаДок);
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "Контрагент" Тогда
		
		Если ЗначениеЗаполнено(ОбъектДокумента.Контрагент)   И ОбъектДокумента.Контрагент <> ИсходныеДанные.Контрагент Тогда 
			ТекстСообщения = НСтр("ru = 'В документе %1 значение <%2> реквизита ""Контрагент"" заменено на <%3>'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения, ОбъектДокумента.Ссылка, ОбъектДокумента.Контрагент, ИсходныеДанные.Контрагент);
			
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		КонецЕсли;
		
		УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент);
		
		//информация о ДоговореВзаиморасчетов в файле не передается, но
		//она нужна для корректной записи документов
		//поэтому устанавливаем договор по умолчанию "Основной договор"
		
		Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
			
		ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента) Тогда
			Если ЗначениеЗаполнено(ОбъектДокумента.Контрагент) Тогда
				СтрокаРасшифровки.ДоговорКонтрагента = СоздатьНужныйДоговор(ОбъектДокумента.Контрагент, Организация, Истина, ИсходныеДанные.СчетОрганизации.ВалютаДенежныхСредств, СтекОповещений);
			КонецЕсли;
		КонецЕсли;
		
		СчетУчета  = СтруктураНастроек.ПОПост_СчетУчетаРасчетовСКонтрагентом;
		СчетАванса = СтруктураНастроек.ПОПост_СчетУчетаРасчетовПоАвансам;
		
		ЗаполнятьАвтоматически = СтруктураНастроек.ПОПост_ЗаполнятьДанныеАвтоматически;
		
		Если (ЗаполнятьАвтоматически <> Истина) Тогда
			
			Если НЕ (НЕ ЗначениеЗаполнено(ОбъектДокумента.Контрагент) ИЛИ НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента)) Тогда
				СчетаУчета = УправлениеВзаиморасчетамиСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация, ОбъектДокумента.Контрагент, СтрокаРасшифровки.ДоговорКонтрагента);
				СчетУчетаРегистр = СчетаУчета.СчетРасчетов;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СчетУчетаРегистр) Тогда
				Если НЕ ЗначениеЗаполнено(ИсходныеДанные.Списано) Тогда
					СчетУчета = ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьПокупателейИЗаказчиков;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовПоАвансам",    СчетАванса);
			УстановитьСвойство(СтрокаРасшифровки, "СтатьяДвиженияДенежныхСредств", СтруктураНастроек.ПОПост_СтатьяДвиженияДенежныхСредств);
			
		КонецЕсли;
		
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовСКонтрагентомБУ", СчетУчета);
		УстановитьСвойство(ОбъектДокумента, "СчетУчетаРасчетовСКонтрагентомБУ",   СчетУчета);
	
	ИначеЕсли ИмяРеквизита = "ДоговорКонтрагента" Тогда //заполняется при заполнении Контрагент
	
	ИначеЕсли ИмяРеквизита = "СчетОрганизации" Тогда //заполняется при заполнении Контрагент
		
		Если ЗначениеЗаполнено(ОбъектДокумента.СчетОрганизации) И ОбъектДокумента.СчетОрганизации <> ИсходныеДанные.СчетОрганизации Тогда 
			ТекстСообщения = НСтр("ru = 'В документе %1 значение <%2> реквизита ""Счет организации"" заменено на <%3>'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения, ОбъектДокумента.Ссылка, ОбъектДокумента.СчетОрганизации, ИсходныеДанные.СчетОрганизации);
			
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		КонецЕсли;
		
		УстановитьСвойство(ОбъектДокумента, "СчетОрганизации", ИсходныеДанные.СчетОрганизации);
		УстановитьСвойство(ОбъектДокумента, "ВалютаДокумента", ОбъектДокумента.СчетОрганизации.ВалютаДенежныхСредств);
		УстановитьСвойство(ОбъектДокумента, "СчетБанк",        ПланыСчетов.Типовой.ДенежныеСредстваНаТекущихБанковскихСчетах);
		
	ИначеЕсли ИмяРеквизита = "ВалютаДокумента" Тогда //заполняется при заполнении СчетОрганизации
		
	ИначеЕсли ИмяРеквизита = "СчетБанк" Тогда //заполняется при заполнении СчетОрганизации
	
	ИначеЕсли ИмяРеквизита = "Оплачено" Тогда
		
	ИначеЕсли ИмяРеквизита = "ВидОперации" Тогда
		
		Если ОбъектДокумента.ЭтоНовый() Тогда
			ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;
			УстановитьСвойство(ОбъектДокумента, "ВидОперации", ВидОперации);
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "СуммаДокумента" Тогда
		
		Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
		ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС) Тогда 
			СтрокаРасшифровки.СтавкаНДС = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(, "ОсновнаяСтавкаНДС");
			УстановитьСвойство(СтрокаРасшифровки, "СтавкаНДС", СтрокаРасшифровки.СтавкаНДС);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОбъектДокумента.СуммаДокумента) И ОбъектДокумента.СуммаДокумента <> ИсходныеДанные.СуммаДокумента Тогда 
			ТекстСообщения = НСтр("ru = 'В документе %1 значение <%2> реквизита ""Сумма документа"" заменено на <%3>'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения, ОбъектДокумента.Ссылка, ОбъектДокумента.СуммаДокумента, ИсходныеДанные.СуммаДокумента);
			
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		КонецЕсли;
		
		УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента);
		Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
		ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
		КонецЕсли;
		
		СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
		Если Не СтрокаРасшифровки.ДоговорКонтрагента.Пустая() Тогда
			Если ОбъектДокумента.ВалютаДокумента = СтрокаРасшифровки.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
				
				СтрокаРасшифровки.КурсВзаиморасчетов 		= 1;
				СтрокаРасшифровки.КратностьВзаиморасчетов 	= 1;
				СтрокаРасшифровки.СуммаВзаиморасчетов 		= ОбъектДокумента.СуммаДокумента;
				
			Иначе
				КурсДокумента		 = 1;
				КратностьДокумента	 = 1;
				КурсДоговора		 = 1;
				КратностьДоговора	 = 1;
				
				тзКурсКратностьДокумента = РегистрыСведений.КурсыВалют.СрезПоследних(ОбъектДокумента.Дата, Новый Структура("Валюта", ОбъектДокумента.ВалютаДокумента));
				Если тзКурсКратностьДокумента.Количество() > 0 Тогда
					КурсДокумента = ?(тзКурсКратностьДокумента[0].Курс > 0, тзКурсКратностьДокумента[0].Курс, 1);
				КонецЕсли;
				
				тзКурсКратностьДоговора = РегистрыСведений.КурсыВалют.СрезПоследних(ОбъектДокумента.Дата, Новый Структура("Валюта", СтрокаРасшифровки.ДоговорКонтрагента.ВалютаВзаиморасчетов));
				Если тзКурсКратностьДоговора.Количество() > 0 Тогда
					КурсДоговора = ?(тзКурсКратностьДоговора[0].Курс > 0, тзКурсКратностьДоговора[0].Курс, 1);
				КонецЕсли;
				
				КурсПересчета = (КурсДокумента / КурсДоговора) * (КратностьДоговора / КратностьДокумента);
				
				СтрокаРасшифровки.КурсВзаиморасчетов 		= КурсДокумента / КурсДоговора;
				СтрокаРасшифровки.КратностьВзаиморасчетов 	= КратностьДоговора / КратностьДокумента;
				СтрокаРасшифровки.СуммаВзаиморасчетов 		= ОбъектДокумента.СуммаДокумента * КурсПересчета;
			КонецЕсли;
		Иначе
			СтрокаРасшифровки.КурсВзаиморасчетов	  = 1;
			СтрокаРасшифровки.КратностьВзаиморасчетов = 1;
			СтрокаРасшифровки.СуммаВзаиморасчетов	  = ОбъектДокумента.СуммаДокумента;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС) Тогда
			ЗначениеСтавкиНДС = УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС);
			
			СтрокаРасшифровки.СуммаНДС = СтрокаРасшифровки.СуммаПлатежа * ЗначениеСтавкиНДС / (100+ЗначениеСтавкиНДС);
			УстановитьСвойство(СтрокаРасшифровки, "СуммаНДС", СтрокаРасшифровки.СуммаНДС);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИсходныеДанные.Поступило) Тогда
			
			УстановитьСвойство(ОбъектДокумента, "Оплачено",		Истина);
			УстановитьСвойство(ОбъектДокумента, "ДатаВыписки", 	НачалоДня(ИсходныеДанные.Поступило));
			
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "Ответственный" Тогда
		УстановитьСвойство(ОбъектДокумента, "Ответственный", ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(, "ОсновнойОтветственный"));
		
	Иначе
		
		Попытка
			ЗначениеРеквизита = ИсходныеДанные[ИмяРеквизита];
		Исключение
			ЗначениеРеквизита = Неопределено;
		КонецПопытки;
		
		Если ЗначениеРеквизита <> Неопределено Тогда
			УстановитьСвойство(ОбъектДокумента, ИмяРеквизита, ЗначениеРеквизита);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗадатьПометкуНаУдаление(ОбъектДляПометки, Пометка, СтекОповещений)
	
	НазваниеОбъекта = ПолучитьПредставлениеОбъекта(ОбъектДляПометки);
	Попытка
		
		ОбъектДляПометки.Записать(РежимЗаписиДокумента.Запись);
		ОбъектДляПометки.УстановитьПометкуУдаления(Пометка);
		
		Если Пометка Тогда
			ТекстСообщения = НСтр("ru = '%1: помечен на удаление.'");
		Иначе
			ТекстСообщения = НСтр("ru = '%1: отменена пометка на удаление.'");
		КонецЕсли;
		СтекОповещений.Добавить(Новый Структура("Текст", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2))));
		
	Исключение
		
		Если Пометка Тогда
			ТекстСообщения = НСтр("ru = '%1: не помечен на удаление! Произошли ошибки при записи!'");
		Иначе
			ТекстСообщения = НСтр("ru = '%1: не отменена пометка на удаление! Произошли ошибки при записи!'");
		КонецЕсли;
		СтекОповещений.Добавить(Новый Структура("Текст", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2))));
		
	КонецПопытки
	
КонецПроцедуры

Функция СоздатьСтруктуруЗначенийДокумента(ИсходныеДанные, КоллецияКолонок)
	
	НоваяСтруктура = Новый Структура;
	
	Для каждого КолонкаТаблицы из КоллецияКолонок  Цикл
		НоваяСтруктура.Вставить(КолонкаТаблицы.Имя, ИсходныеДанные[КолонкаТаблицы.Имя]);
	КонецЦикла;
	
	Возврат НоваяСтруктура;
	
КонецФункции

// Функция выполняет поиск контрагента или организации по БИН/ИИН, РНН, Наименованию.
//
Функция НайтиКонтрагентаПоБИН_ИНН_РНН(Вид, БИН_ИИНКраткий, РННКраткий, ИмяКраткое, СтекОповещений, Оповещать = Истина)
	
	Ссылка = Справочники[Вид].ПустаяСсылка();
	Если ЗначениеЗаполнено(БИН_ИИНКраткий) Тогда
		Если Вид = "Контрагенты" Или Вид = "ФизическиеЛица" Тогда
			Ссылка = Справочники[Вид].НайтиПоРеквизиту("ИдентификационныйКодЛичности", БИН_ИИНКраткий);
		Иначе
			Ссылка = Справочники[Вид].НайтиПоРеквизиту("ИдентификационныйНомер", БИН_ИИНКраткий);
		КонецЕсли;
	КонецЕсли;
	
	Если Ссылка.Пустая() И ЗначениеЗаполнено(РННКраткий) Тогда
		Ссылка = Справочники[Вид].НайтиПоРеквизиту("РНН", РННКраткий);
	КонецЕсли;
	
	Если Ссылка.Пустая() Тогда
		Если Вид = "Контрагенты" Тогда
			Ссылка = Справочники[Вид].НайтиПоНаименованию(ИмяКраткое);
			
			Если Ссылка.Пустая() И Оповещать Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не найден контрагент %1. Проверьте БИН/ИИН или РНН %2'"), ИмяКраткое, РННКраткий);
				СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
			ИначеЕсли Оповещать Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Контрагент %1 найден по наименованию. БИН/ИИН или РНН контрагента %2 не совпадает с БИН/ИИН или РНН контрагента из файла %3'"),
					ИмяКраткое, Ссылка.РНН, РННКраткий);
				СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
			КонецЕсли;
			
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не найдена организация. Проверьте БИН/ИИН или РНН %1'", РННКраткий));
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Процедура ЗаписатьОбъект(ОбъектДляЗаписи, СтрокаСекции, Организация, СтруктураНастроек, СтекОповещений)
	
	НазваниеОбъекта = ПолучитьПредставлениеОбъекта(ОбъектДляЗаписи);
	
	Если НЕ ЗначениеЗаполнено(ОбъектДляЗаписи.Дата) Тогда
		ОбъектДляЗаписи.Дата = ОбъектДляЗаписи.ДатаВыписки;
	КонецЕсли;
	
	ТипДокумента = ОбъектДляЗаписи.Метаданные().Имя;
	
	Если ТипДокумента = "ПлатежноеПоручениеИсходящее" Тогда
		НастройкаЗаполнять  = "ППИсх_ЗаполнятьДанныеАвтоматически";
		НастройкаОтражатьНУ = "ППИсх_УчитыватьКПН";
		НастройкаПроводить  = "ППИсх_ПроводитьНовыеДокументы";
		НастройкаВидУчетаНУ = "ППИсх_ВидУчетаНУ";
		
	ИначеЕсли ТипДокумента = "ПлатежноеПоручениеВходящее" Тогда
		НастройкаЗаполнять 	= "ППВх_ЗаполнятьДанныеАвтоматически";
		НастройкаОтражатьНУ = "ППВх_УчитыватьКПН";
		НастройкаПроводить 	= "ППВх_ПроводитьНовыеДокументы";
		НастройкаВидУчетаНУ = "ППВх_ВидУчетаНУ";
		
	ИначеЕсли ТипДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств" Тогда
		НастройкаЗаполнять	= "ПОСпис_ЗаполнятьДанныеАвтоматически";
		НастройкаОтражатьНУ = "ПОСпис_УчитыватьКПН";
		НастройкаПроводить 	= "ПОСпис_ПроводитьНовыеДокументы";
		НастройкаВидУчетаНУ = "ПОСпис_ВидУчетаНУ";
		
	ИначеЕсли ТипДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств" Тогда
		НастройкаЗаполнять 	= "ПОПост_ЗаполнятьДанныеАвтоматически";
		НастройкаОтражатьНУ = "ПОПост_УчитыватьКПН";
		НастройкаПроводить 	= "ПОПост_ПроводитьНовыеДокументы";
		НастройкаВидУчетаНУ = "ПОПост_ВидУчетаНУ";
		
	КонецЕсли;

	ЗаполнятьАвтоматически = СтруктураНастроек[НастройкаЗаполнять];
	Проводить = Ложь;
	
	Если (ЗаполнятьАвтоматически = Истина) Тогда
		ПризнакНалоговогоУчета = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Организация,ОбъектДляЗаписи.Дата);
		Если СтруктураНастроек[НастройкаОтражатьНУ] = Истина Тогда 
			УстановитьСвойство(ОбъектДляЗаписи, "УчитыватьКПН",ПризнакНалоговогоУчета);
		Иначе 
			УстановитьСвойство(ОбъектДляЗаписи, "УчитыватьКПН",(СтруктураНастроек[НастройкаОтражатьНУ] = Истина));
		КонецЕсли;
		УстановитьСвойство(ОбъектДляЗаписи, "ВидУчетаНУ", СтруктураНастроек[НастройкаВидУчетаНУ]);
		Проводить = (СтруктураНастроек[НастройкаПроводить] = Истина);
	КонецЕсли;
	
	Попытка
		ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Запись);
		
		Если ОбъектДляЗаписи.ЭтоНовый() Тогда
			ТекстСообщения = НСтр("ru = 'Создан %1.'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Записан %1.'");
		КонецЕсли;
		СтекОповещений.Добавить(Новый Структура("Текст", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НазваниеОбъекта)));
		
		СтрокаСекции.СостояниеДокумента = 0;
		
	Исключение
		
		Если ОбъектДляЗаписи.ЭтоНовый() Тогда
			ТекстСообщения = НСтр("ru = '%1 не создан! Произошли ошибки при записи!'");
		Иначе
			ТекстСообщения = НСтр("ru = '%1 не записан! Произошли ошибки при записи!'");
		КонецЕсли;
		СтекОповещений.Добавить(Новый Структура("Текст", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2))));
		
		Возврат;
		
	КонецПопытки;
	
	Попытка
		
		Если Проводить Тогда
			ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Проведение);
			
			ТекстСообщения = НСтр("ru = 'Проведен %1.'");
			СтекОповещений.Добавить(Новый Структура("Текст", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НазваниеОбъекта)));
			
			СтрокаСекции.Проведен = ОбъектДляЗаписи.Проведен;
			СтрокаСекции.СостояниеДокумента = 1;
			
		КонецЕсли;
		
	Исключение
		ТекстСообщения = НСтр("ru = '%1 не проведен! Произошли ошибки при проведении!'");
		СтекОповещений.Добавить(Новый Структура("Текст", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2))));
		
	КонецПопытки
	
КонецПроцедуры

Функция ПолучитьДатуИзСтроки(Приемник, Источник)
	
	Буфер = Источник;
	
	ПозицияТочки = Найти(Буфер, ".");
	
	Если ПозицияТочки = 0 Тогда
		Возврат "Неверный формат строки с датой";
	КонецЕсли;
	
	ЧислоДаты = Лев(Буфер, ПозицияТочки - 1);
	Буфер = Сред(Буфер, ПозицияТочки + 1);
	
	ПозицияТочки = Найти(Буфер, ".");
	
	Если ПозицияТочки = 0 Тогда
		Возврат "Неверный формат строки с датой";
	КонецЕсли;
	
	МесяцДаты = Лев(Буфер, ПозицияТочки - 1);
	ГодДаты = Сред(Буфер, ПозицияТочки + 1);
	
	Попытка
		Приемник = Дата(Число(ГодДаты), Число(МесяцДаты), Число(ЧислоДаты));
		
	Исключение
		Возврат "Не удалось преобразовать строку в дату";
		
	КонецПопытки;
	
	Возврат "";
	
КонецФункции

Функция СоздатьСоответствиеИзСтроки(Знач СтрокаЧерезЗапятую)
	
	НовоеСоответствие = Новый Соответствие;
	
	ПозицияРазделителя = Найти(СтрокаЧерезЗапятую, ",");
	
	Пока ПозицияРазделителя > 0 Цикл
		ИмяИтема = Лев(СтрокаЧерезЗапятую, ПозицияРазделителя - 1);
		НовоеСоответствие.Вставить(ИмяИтема, Истина);
		СтрокаЧерезЗапятую = Сред(СтрокаЧерезЗапятую, ПозицияРазделителя + 1);
		ПозицияРазделителя = Найти(СтрокаЧерезЗапятую, ",");
		
	КонецЦикла;
	
	Если СтрДлина(СтрокаЧерезЗапятую) > 0 Тогда
		НовоеСоответствие.Вставить(СтрокаЧерезЗапятую, Истина);
		
	КонецЕсли;
	
	Возврат НовоеСоответствие;
	
КонецФункции

Функция СчетПринадлежитОрганизации(НомерСчета, Организация)
	
	ЗапросПоСчету = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Владелец,
	|	БанковскиеСчета.НомерСчета,
	|	БанковскиеСчета.Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Организация
	|	И БанковскиеСчета.НомерСчета = &НомерСчета");
	
	ЗапросПоСчету.УстановитьПараметр("НомерСчета", НомерСчета);
	ЗапросПоСчету.УстановитьПараметр("Организация", Организация);
	
	ВыборкаЗапроса = ЗапросПоСчету.Выполнить().Выбрать();
	
	Возврат ВыборкаЗапроса.Следующий();
	
КонецФункции

Функция ПрочитатьФайл(Файл, Кодировка, СтекОповещений)
	
	ФайлЗагр = Новый Файл(Файл);
	Если НЕ ФайлЗагр.Существует() Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Файла %1 не существует!'"), Файл);
		СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	// Кодировку задаем текстом, иначе бывают проблемы на сервере в Linux и в связке англоязычная Windows + англоязычный SQL.
	Если ВРег(Кодировка) = "DOS" Тогда 
		Кодир = "cp866";        // КодировкаТекста.OEM;
	ИначеЕсли ВРег(Кодировка) = "UTF8" Тогда
		Кодир = "UTF-8";        // КодировкаТекста.UTF8;
	Иначе
		Кодир = "windows-1251"; // КодировкаТекста.ANSI;
	КонецЕсли;
	
	Импорт_МассивСтрок = Новый Массив;
	
	Попытка
		
		ПотокЧтения = Новый ЧтениеТекста(Файл, Кодир,,, Ложь);
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Файл не прочитан.'");
		СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с банком.Загрузка'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения + НСтр("ru = 'по причине: '") + ОписаниеОшибки.Описание);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	ТекущаяСтрока = ПотокЧтения.ПрочитатьСтроку();
	Пока ТекущаяСтрока <> Неопределено Цикл
		Импорт_МассивСтрок.Добавить(СокрЛП(ТекущаяСтрока));
		ТекущаяСтрока = ПотокЧтения.ПрочитатьСтроку();
	КонецЦикла;
	
	Если Импорт_МассивСтрок.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Файл загрузки не содержит данных!'");
		СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если Импорт_МассивСтрок[0] <> "1CClientBankExchange" Тогда
		
		Импорт_МассивСтрок.Очистить();
		ТекстСообщения = НСтр("ru = 'Указанный файл не является файлом обмена или неверно указана кодировка!'");
		СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат Импорт_МассивСтрок;
	
КонецФункции

Функция СформироватьСтруктуруНастроекЗаполнения(НастройкиЗаполнения)
	
	СтруктураНастроек = Новый Структура();
	
	СтруктураНастроек.Вставить("ППИсх_СчетУчетаРасчетовСКонтрагентом", 	ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ППИсх_СчетУчетаРасчетовСКонтрагентом"));
	СтруктураНастроек.Вставить("ППИсх_СчетУчетаРасчетовПоАвансам",		ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ППИсх_СчетУчетаРасчетовПоАвансам"));
	СтруктураНастроек.Вставить("ППИсх_ЗаполнятьДанныеАвтоматически",	ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ППИсх_ЗаполнятьДанныеАвтоматически"));
	СтруктураНастроек.Вставить("ППИсх_СтатьяДвиженияДенежныхСредств",	ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ППИсх_СтатьяДвиженияДенежныхСредств"));
	СтруктураНастроек.Вставить("ППИсх_УчитыватьКПН",					ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ППИсх_УчитыватьКПН"));
	СтруктураНастроек.Вставить("ППИсх_ПроводитьНовыеДокументы",			ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ППИсх_ПроводитьНовыеДокументы"));
	СтруктураНастроек.Вставить("ППИсх_ВидУчетаНУ",						ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ППИсх_ВидУчетаНУ"));
	
	СтруктураНастроек.Вставить("ППВх_СчетУчетаРасчетовСКонтрагентом",	ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ППВх_СчетУчетаРасчетовСКонтрагентом"));
	СтруктураНастроек.Вставить("ППВх_СчетУчетаРасчетовПоАвансам",		ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ППВх_СчетУчетаРасчетовПоАвансам"));
	СтруктураНастроек.Вставить("ППВх_ЗаполнятьДанныеАвтоматически",		ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ППВх_ЗаполнятьДанныеАвтоматически"));
	СтруктураНастроек.Вставить("ППВх_СтатьяДвиженияДенежныхСредств",	ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ППВх_СтатьяДвиженияДенежныхСредств"));
	СтруктураНастроек.Вставить("ППВх_УчитыватьКПН",						ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ППВх_УчитыватьКПН"));
	СтруктураНастроек.Вставить("ППВх_ПроводитьНовыеДокументы",			ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ППВх_ПроводитьНовыеДокументы"));
	СтруктураНастроек.Вставить("ППВх_ВидУчетаНУ",						ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ППВх_ВидУчетаНУ"));
	
	СтруктураНастроек.Вставить("ПОСпис_СчетУчетаРасчетовСКонтрагентом",	ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ПОСпис_СчетУчетаРасчетовСКонтрагентом"));
	СтруктураНастроек.Вставить("ПОСпис_СчетУчетаРасчетовПоАвансам",		ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ПОСпис_СчетУчетаРасчетовПоАвансам"));
	СтруктураНастроек.Вставить("ПОСпис_ЗаполнятьДанныеАвтоматически",	ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ПОСпис_ЗаполнятьДанныеАвтоматически"));
	СтруктураНастроек.Вставить("ПОСпис_СтатьяДвиженияДенежныхСредств",	ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ПОСпис_СтатьяДвиженияДенежныхСредств"));
	СтруктураНастроек.Вставить("ПОСпис_УчитыватьКПН",					ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ПОСпис_УчитыватьКПН"));
	СтруктураНастроек.Вставить("ПОСпис_ПроводитьНовыеДокументы",		ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ПОСпис_ПроводитьНовыеДокументы"));
	СтруктураНастроек.Вставить("ПОСпис_ВидУчетаНУ",						ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ПОСпис_ВидУчетаНУ"));
	
	СтруктураНастроек.Вставить("ПОПост_СчетУчетаРасчетовСКонтрагентом",	ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ПОПост_СчетУчетаРасчетовСКонтрагентом"));
	СтруктураНастроек.Вставить("ПОПост_СчетУчетаРасчетовПоАвансам",		ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ПОПост_СчетУчетаРасчетовПоАвансам"));
	СтруктураНастроек.Вставить("ПОПост_ЗаполнятьДанныеАвтоматически",	ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ПОПост_ЗаполнятьДанныеАвтоматически"));
	СтруктураНастроек.Вставить("ПОПост_СтатьяДвиженияДенежныхСредств",	ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ПОПост_СтатьяДвиженияДенежныхСредств"));
	СтруктураНастроек.Вставить("ПОПост_УчитыватьКПН",					ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ПОПост_УчитыватьКПН"));
	СтруктураНастроек.Вставить("ПОПост_ПроводитьНовыеДокументы",		ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ПОПост_ПроводитьНовыеДокументы"));
	СтруктураНастроек.Вставить("ПОПост_ВидУчетаНУ",						ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ПОПост_ВидУчетаНУ"));
	
	СтруктураНастроек.Вставить("СоздаватьНенайденныеЭлементы",			ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "СоздаватьНенайденныеЭлементы"));
	СтруктураНастроек.Вставить("ГруппаДляНовыхКонтрагентов",			ПолучитьНастройкуЗаполнения(НастройкиЗаполнения, "ГруппаДляНовыхКонтрагентов"));
	
	Возврат СтруктураНастроек;
	
КонецФункции

#КонецОбласти

#Область СозданиеНенайденных

Функция СоздатьКонтрагентов(ДеревоКонтрагентов, Организация, ГруппаДляНовыхКонтрагентов, СтекОповещений)
	
	СтекОповещений = Новый Массив;
	МассивСтрок        = Новый Массив;
	СозданныеКонтрагенты = Новый Соответствие;
	
	Для каждого СтрокаДерева Из ДеревоКонтрагентов.Строки Цикл
		
		Если СтрокаДерева.Пометка Тогда
			
			Результат = СоздатьКонтрагента(СтрокаДерева, Организация, СтекОповещений, ГруппаДляНовыхКонтрагентов);
			
			Если НЕ Результат.Контрагент.Пустая() Тогда
				СозданныеКонтрагенты.Вставить(Результат.БИН_ИИН, Результат);
				МассивСтрок.Добавить(СтрокаДерева);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Строка Из МассивСтрок Цикл
		
		ДеревоКонтрагентов.Строки.Удалить(Строка);
		
	КонецЦикла;
	
	Возврат СозданныеКонтрагенты;
	
КонецФункции

Процедура ДополнитьСписокНеНайденных(СтрокаДокумента, ТаблицаКонтрагентов, СоздаватьКонтрагента = Ложь, Организация = Неопределено, ГруппаДляНовыхКонтрагентов = Неопределено, СтекОповещений = Неопределено)
	
	НайденКонтрагент = ЗначениеЗаполнено(СтрокаДокумента.Контрагент);
	НайденСчет       = ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента);
	
	Если ЗначениеЗаполнено(СтрокаДокумента.ДатаПоступило) Тогда
		ТипКонтрагента = "ПЛАТЕЛЬЩИК";
	Иначе
		ТипКонтрагента = "ПОЛУЧАТЕЛЬ";
	КонецЕсли;
	
	НайденнаяЗаписьОКонтрагенте
		= ТаблицаКонтрагентов.Строки.Найти(СтрокаДокумента[ТипКонтрагента + "БИН_ИИН"], "Значение", Истина);
	
	// Контрагент
	Если НайденнаяЗаписьОКонтрагенте = Неопределено Тогда
		
		НовыйКонтрагент = ТаблицаКонтрагентов.Строки.Добавить();
		
		Окончание = ?(СтрокаДокумента[ТипКонтрагента + "НАИМЕНОВАНИЕ"] = "", "", "НАИМЕНОВАНИЕ");
		
		НовыйКонтрагент.Представление  = СтрокаДокумента[ТипКонтрагента + Окончание];
		НовыйКонтрагент.ЭтоРодитель    = Истина;
		НовыйКонтрагент.ТипКонтрагента = ТипКонтрагента;
		
		ДобавитьОписаниеНовогоРеквизита(НСтр("ru = 'Наименование'"),
										Окончание,
										ТипКонтрагента,
										НовыйКонтрагент.Строки,
										СтрокаДокумента);
		ДобавитьОписаниеНовогоРеквизита(НСтр("ru = 'БИН / ИИН'"),
										"БИН_ИИН",
										ТипКонтрагента,
										НовыйКонтрагент.Строки,
										СтрокаДокумента);
		ДобавитьОписаниеНовогоРеквизита(НСтр("ru = 'КБЕ'"),
										"КБЕ",
										ТипКонтрагента,
										НовыйКонтрагент.Строки,
										СтрокаДокумента);
		ДобавитьОписаниеНовогоРеквизита(НСтр("ru = 'РНН'"),
										"РНН",
										ТипКонтрагента,
										НовыйКонтрагент.Строки,
										СтрокаДокумента);
		Если НайденКонтрагент Тогда
			НовыйКонтрагент.Ссылка = СтрокаДокумента.Контрагент;
		КонецЕсли;
		
	Иначе
		
		НовыйКонтрагент = НайденнаяЗаписьОКонтрагенте.Родитель;
		Если НовыйКонтрагент = Неопределено Тогда
			НовыйКонтрагент = НайденнаяЗаписьОКонтрагенте;
		КонецЕсли;
	КонецЕсли;
	
	НайденныеСтроки
		= ТаблицаКонтрагентов.Строки.Найти(СтрокаДокумента[ТипКонтрагента + "ИИК"], "Значение", Истина);
	
	Если НЕ НайденСчет И НайденныеСтроки = Неопределено Тогда
		
		РеквизитыНовогоКонтрагента
			= ДобавитьОписаниеНовогоРеквизита(НСтр("ru = 'Р/счет'"),
												"ИИК",
												ТипКонтрагента,
												НовыйКонтрагент.Строки,
												СтрокаДокумента);
		
		ДобавитьОписаниеНовогоРеквизита(НСтр("ru = 'Банк'"),
											"БАНКНАИМЕНОВАНИЕ",
											ТипКонтрагента,
											РеквизитыНовогоКонтрагента.Строки,
											СтрокаДокумента);
		ДобавитьОписаниеНовогоРеквизита(НСтр("ru = 'Код банка'"),
											"БАНКБИК",
											ТипКонтрагента,
											РеквизитыНовогоКонтрагента.Строки,
											СтрокаДокумента);
		ДобавитьОписаниеНовогоРеквизита(НСтр("ru = 'Кор. счет банка'"),
											"БАНКИИК",
											ТипКонтрагента,
											РеквизитыНовогоКонтрагента.Строки,
											СтрокаДокумента);
		
	КонецЕсли;
	
	Если СоздаватьКонтрагента Тогда
		Результат = СоздатьКонтрагента(НовыйКонтрагент, Организация, СтекОповещений, ГруппаДляНовыхКонтрагентов);
		СтрокаДокумента.Контрагент = Результат.Контрагент;
		СтрокаДокумента.СчетКонтрагента = Результат.СчетаКонтрагента.Получить(СтрокаДокумента[ТипКонтрагента + "ИИК"]);
		ТаблицаКонтрагентов.Строки.Удалить(НовыйКонтрагент);
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьОписаниеНовогоРеквизита(Представление, Реквизит, ТипКонтрагента, НовыйКонтрагент, СтрокаДокумента)
	
	РеквизитыНовогоКонтрагента = НовыйКонтрагент.Добавить();
	
	РеквизитыНовогоКонтрагента.Представление = Представление;
	РеквизитыНовогоКонтрагента.Значение      = СтрокаДокумента[ТипКонтрагента + Реквизит];
	РеквизитыНовогоКонтрагента.Реквизит      = ТипКонтрагента + Реквизит;
	
	Возврат РеквизитыНовогоКонтрагента;
	
КонецФункции

// Функция выполняет поиск/создание нового контрагента по информации из файла.
//
Функция СоздатьКонтрагента(СтрокаКонтрагент, ТекОрганизация, СтекОповещений, ГруппаДляНовыхКонтрагентов = Неопределено) Экспорт //или СтрокаКонтрагент - строка, или ТаблицаКонтрагентов - ТЗ
	
	ДанныеКонтрагента = Новый Структура("РасчетныеСчета", Новый Массив);
	ТипКонтрагента = СтрокаКонтрагент.ТипКонтрагента;
	
	ПреобразоватьСтрокуДереваВСтруктуру(СтрокаКонтрагент, ДанныеКонтрагента);
	
	Если ДанныеКонтрагента.Свойство(ТипКонтрагента + "РНН") Тогда
		РННКраткий = ДанныеКонтрагента[ТипКонтрагента + "РНН"];
	Иначе
		РННКраткий = "";
	КонецЕсли;
	
	Если ДанныеКонтрагента.Свойство(ТипКонтрагента + "БИН_ИИН") Тогда
		БИН_ИИНКраткий = ДанныеКонтрагента[ТипКонтрагента + "БИН_ИИН"];
	Иначе
		БИН_ИИНКраткий = "";
	КонецЕсли;
	
	Если ДанныеКонтрагента.Свойство(ТипКонтрагента + "Наименование") Тогда
		ИмяКраткое = ДанныеКонтрагента[ТипКонтрагента + "Наименование"];
	Иначе
		ИмяКраткое = "";
	КонецЕсли;
	
	Контрагент = НайтиКонтрагентаПоБИН_ИНН_РНН("Контрагенты", БИН_ИИНКраткий, РННКраткий, ИмяКраткое, СтекОповещений, Ложь);
	
	СтруктураДанныхКонтрагента = Новый Структура;
	
	НовыйКонтрагент = Неопределено;
	
	Если Контрагент.Пустая() Тогда
		
		НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
		
		Если ДанныеКонтрагента.Свойство(ТипКонтрагента + "Наименование") Тогда
			НовыйКонтрагент.НаименованиеПолное = ИмяКраткое;
			НовыйКонтрагент.Наименование       = НовыйКонтрагент.НаименованиеПолное;
		КонецЕсли;
		
		Если ДанныеКонтрагента.Свойство(ТипКонтрагента + "РНН") Тогда
			НовыйКонтрагент.РНН = ДанныеКонтрагента[ТипКонтрагента + "РНН"];
		КонецЕсли;
		
		Если ДанныеКонтрагента.Свойство(ТипКонтрагента + "БИН_ИИН") Тогда
			НовыйКонтрагент.ИдентификационныйКодЛичности = ДанныеКонтрагента[ТипКонтрагента + "БИН_ИИН"];
		КонецЕсли;
		
		// Определим вид контрагента.
		НовыйКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		Если СтрНайти("0123", Сред(НовыйКонтрагент.ИдентификационныйКодЛичности, 5, 1)) > 0 Тогда
			НовыйКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
		КонецЕсли;
		
		НовыйКонтрагент.СтранаРезидентства = Справочники.КлассификаторСтранМира.Казахстан;
		НовыйКонтрагент.Родитель = ГруппаДляНовыхКонтрагентов;
		
		Попытка
			НовыйКонтрагент.Записать();
		Исключение
			ТекстОповещения = НСтр("ru = 'Не удалось создать контрагента ""%1"" (%2) по причине: 
				|%3'");
			СтекОповещений.Добавить(
				Новый Структура("Текст",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ТекстОповещения, 
						ИмяКраткое,
						БИН_ИИНКраткий,
						КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
					)
				)
			);
			Возврат Неопределено;
		КонецПопытки;
		
		Контрагент = НовыйКонтрагент.Ссылка;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		// Устанавливаем управляемую блокировку, чтобы провести ответственное чтение объекта.
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.Контрагенты");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Контрагент);
		Блокировка.Заблокировать();
		
		// Найдем/создадим банковский счет контрагента.
		НомерСчета = "";
		БИКБанка = "";
		КонтрагентОбъект = Неопределено;
		СчетКонтрагента = Неопределено;
		ВалютаСчета = ТекОрганизация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств;
		Если НЕ ЗначениеЗаполнено(ВалютаСчета) Тогда
			ВалютаСчета = Константы.ВалютаРегламентированногоУчета.Получить();
		КонецЕсли;
		
		СозданныеРасчетныеСчета = Новый Соответствие;
		Для Каждого РасчетныйСчет Из ДанныеКонтрагента.РасчетныеСчета Цикл
			Для Каждого ПараметрыСчета Из РасчетныйСчет Цикл
				Если ЗначениеЗаполнено(ПараметрыСчета.Ключ) Тогда
					
					СозданныеРасчетныеСчета.Вставить(
						ПараметрыСчета.Ключ,
						СоздатьНужныйСчет(
							Контрагент,
							ПараметрыСчета.Ключ,
							ВалютаСчета,
							ПараметрыСчета.Значение,
							ТипКонтрагента,
							СтекОповещений)
						);
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(Контрагент.ОсновнойБанковскийСчет) Тогда
			Для Каждого РасчетныйСчет Из СозданныеРасчетныеСчета Цикл
				КонтрагентОбъект = Контрагент.ПолучитьОбъект();
				КонтрагентОбъект.ОсновнойБанковскийСчет = РасчетныйСчет.Значение;
				Прервать;
			КонецЦикла;
		КонецЕсли;
		
		// Найдем/создадим договор контрагента.
		ДоговорКонтрагента = СоздатьНужныйДоговор(Контрагент, ТекОрганизация, ТипКонтрагента = "ПЛАТЕЛЬЩИК", ВалютаСчета, СтекОповещений);
		Если КонтрагентОбъект = Неопределено Тогда
			КонтрагентОбъект = Контрагент.ПолучитьОбъект();
		КонецЕсли;
		// для нового контрагента заполним Основной договор
		Если НовыйКонтрагент <> Неопределено Тогда
			КонтрагентОбъект.ОсновнойДоговорКонтрагента = ДоговорКонтрагента;
		КонецЕсли;
		
		Если КонтрагентОбъект <> Неопределено Тогда
			Попытка
				КонтрагентОбъект.Записать();
				Контрагент = КонтрагентОбъект.Ссылка;
			Исключение
				ТекстОповещения = НСтр("ru = 'Не удалось записать контрагента ""%1"" (%2) по причине: 
					|%3'");
				СтекОповещений.Добавить(
					Новый Структура("Текст",
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ТекстОповещения, 
							КонтрагентОбъект.Наименование,
							КонтрагентОбъект.ИдентификационныйКодЛичности,
							КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
						)
					)
				);
			КонецПопытки;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОповещения = НСтр("ru = 'Не удалось обработать %1 по причине: %2'");
		ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОповещения, Контрагент, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
		СтекОповещений.Добавить(Новый Структура("Текст", ТекстОповещения));
		
	КонецПопытки;
	
	СтруктураДанныхКонтрагента.Вставить("БИН_ИИН",         БИН_ИИНКраткий);
	СтруктураДанныхКонтрагента.Вставить("Контрагент",      Контрагент);
	СтруктураДанныхКонтрагента.Вставить("СчетаКонтрагента", СозданныеРасчетныеСчета);
	
	Возврат СтруктураДанныхКонтрагента;
	
КонецФункции

// Функция выполняет поиск/создание договора по информации из файла.
//
Функция СоздатьНужныйДоговор(Владелец, ТекОрганизация, Плательщик, ВалютаСчета, СтекОповещений) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.ВидДоговора В(&ВидДоговора)
	|	И ДоговорыКонтрагентов.Ссылка = &ОсновнойДоговорКонтрагента
	|	И &УсловиеВалютаВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.ВидДоговора В(&ВидДоговора)
	|	И &УсловиеВалютаВзаиморасчетов";
	
	Запрос.УстановитьПараметр("Организация", ТекОрганизация);
	Запрос.УстановитьПараметр("Владелец",    Владелец);
	Запрос.УстановитьПараметр("ОсновнойДоговорКонтрагента", Владелец.ОсновнойДоговорКонтрагента);
	Если ЗначениеЗаполнено(ВалютаСчета) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеВалютаВзаиморасчетов", "ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов");
		Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаСчета);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеВалютаВзаиморасчетов", "ИСТИНА");
	КонецЕсли;
	
	СписокДоговоров = Новый СписокЗначений();
	
	Если Плательщик Тогда
		СписокДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		СписокДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
		Запрос.УстановитьПараметр("ВидДоговора",СписокДоговоров);
	Иначе
		СписокДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		СписокДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
		Запрос.УстановитьПараметр("ВидДоговора",СписокДоговоров);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Ссылка;
		
	Иначе
		
		ДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		
		ДоговорОбъект.Наименование          = НСтр("ru = 'Без договора'", ОбщегоНазначения.КодОсновногоЯзыка());
		ДоговорОбъект.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
		
		Если ЗначениеЗаполнено(ВалютаСчета) Тогда
			ДоговорОбъект.ВалютаВзаиморасчетов = ВалютаСчета;
		Иначе
			ДоговорОбъект.ВалютаВзаиморасчетов = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(, "ОсновнаяВалютаВзаиморасчетов");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДоговорОбъект.ВалютаВзаиморасчетов) Тогда
			ДоговорОбъект.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
		КонецЕсли;
		
		ДоговорОбъект.Организация = ТекОрганизация;
		
		Если НЕ ЗначениеЗаполнено(ДоговорОбъект.Организация) Тогда
			Выборка = ПолучитьВыборкуОрганизаций();
			Если Выборка.Следующий() Тогда
				ДоговорОбъект.Организация = Выборка.Организация;
			КонецЕсли;
		КонецЕсли;
		
		ДоговорОбъект.Владелец = Владелец;
		
		Если Плательщик Тогда
			ДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
		Иначе
			ДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
		КонецЕсли;
		
		Попытка
			ДоговорОбъект.Записать();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось записать основной договор контрагента ""%1"" (%2) по причине:
							|%3'"),
				Владелец,
				Владелец.ИдентификационныйКодЛичности,
				ОписаниеОшибки());
			
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
			
		КонецПопытки;
		
		Ссылка = ДоговорОбъект.Ссылка;
		
		Возврат Ссылка;
		
	КонецЕсли;
	
КонецФункции

// Функция выполняет поиск/создание банковского счета контрагента по информации из файла.
//
Функция СоздатьНужныйСчет(Владелец, НомерСчета, ВалютаСчета, ДанныеКонтрагента, ТипКонтрагента, СтекОповещений)
	
	Запрос=Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Владелец
	|	И БанковскиеСчета.НомерСчета = &ИИК";
	
	Запрос.УстановитьПараметр("ИИК",      НомерСчета);
	Запрос.УстановитьПараметр("Владелец", Владелец);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Ссылка;
		
	Иначе
		БИКБанка = "";
		
		НовыйСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
		НовыйСчет.Наименование          = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (Основной расчетный счет)'"), Строка(НомерСчета));
		НовыйСчет.НомерСчета            = НомерСчета;
		НовыйСчет.Владелец              = Владелец;
		НовыйСчет.ВидСчета              = "Расчетный";
		НовыйСчет.ВалютаДенежныхСредств = ВалютаСчета;
		
		Если ДанныеКонтрагента.Свойство(ТипКонтрагента + "БАНКБИК", БИКБанка) Тогда
			НовыйСчет.Банк = Справочники.Банки.НайтиПоРеквизиту("БИК", БИКБанка);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НовыйСчет.Банк) Тогда
			НовыйСчет.УстановитьНовыйКод();
			НовыйСчет.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		
		Попытка
			НовыйСчет.Записать();
		Исключение
			ТекстОповещения = НСтр("ru = 'Не удалось создать банковский счет %1 контрагента ""%2"" (%3) по причине: 
				|%4'");
			СтекОповещений.Добавить(
				Новый Структура(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ТекстОповещения, 
						БИКБанка,
						Владелец.Наименование,
						Владелец.ИдентификационныйКодЛичности,
						КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
					)
				)
			);
			Возврат Неопределено;
		КонецПопытки;
		
		Возврат НовыйСчет.Ссылка;
		
	КонецЕсли;
	
КонецФункции

// Обходит дерево в глубину и преобразует значения строк дерева в свойства структуры.
//
Процедура ПреобразоватьСтрокуДереваВСтруктуру(СтрокаДерева, Структура)
	
	Для Каждого Строка Из СтрокаДерева.Строки Цикл
		Если СтрНайти(Строка.Представление, НСтр("ru = 'Р/счет'")) > 0 Тогда
			Если Строка.Строки.Количество() > 0 Тогда
				ВложеннаяСтруктура = Новый Структура;
				ПреобразоватьСтрокуДереваВСтруктуру(Строка, ВложеннаяСтруктура);
			КонецЕсли;
			Структура.РасчетныеСчета.Добавить(Новый Структура(Строка.Значение, ВложеннаяСтруктура));
		Иначе
			Структура.Вставить(Строка.Реквизит, Строка.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли