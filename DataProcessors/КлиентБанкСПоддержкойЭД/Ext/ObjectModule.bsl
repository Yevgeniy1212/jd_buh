#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Выгрузка

// Заполняет табл. часть "Банковские счета" настройками счетов для выгрузки платежей
//
Процедура ЗаполнитьТаблицуСчетовВыгрузки() Экспорт
	
	БанковскиеСчета = ТаблицаСчетов();
	
	ДополнитьТаблицуСчетовПоддержкойПрямогоОбмена(БанковскиеСчета);
	
	ТаблицаСчетов.Загрузить(БанковскиеСчета);
	
КонецПроцедуры

// Заполняет табл. часть "Документы к выгрузке" платежными поручениями и требованиями
//
Процедура ЗаполнитьДокументыНаЭкспорт(ДокументыНаЭкспорт,
										НачПериода,
										КонПериода,
										Организация,
										СтруктурноеПодразделение,
										ТаблицаБанковскихСчетов,
										НастройкаЗаполнения) Экспорт
	
	ДокументыНаЭкспорт.Очистить();
	
	ПроверятьРНН     = ПолучитьНастройкуЗаполнения(НастройкаЗаполнения, "ПроверятьРНН");
	ПроверятьБИН_ИИН = ПолучитьНастройкуЗаполнения(НастройкаЗаполнения, "ПроверятьБИН_ИИН");
	
	ИмяРеквизитаБИК = Справочники.Банки.ПолучитьИмяРеквизитаБИКБанка(КонПериода);
	
	Если ЗначениеЗаполнено(СтруктурноеПодразделение) Тогда
		СтруктурноеПодразделениеЗапрос = ?(СтруктурноеПодразделение.УказыватьРеквизитыГоловнойОрганизации, "Организация", "СтруктурноеПодразделениеОтправитель");
	Иначе
		СтруктурноеПодразделениеЗапрос = "Организация";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлатежноеПоручениеИсходящее.Ссылка,
	|	ПлатежноеПоручениеИсходящее.Номер,
	|	ПлатежноеПоручениеИсходящее.Проведен,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящее.Проведен
	|			ТОГДА 0
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК СостояниеДокумента,
	|	ПлатежноеПоручениеИсходящее.ДатаВыписки 									КАК Дата,
	|	ПлатежноеПоручениеИсходящее.ДатаВыписки 									КАК ДатаДокумента,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.НазначениеПлатежа КАК СТРОКА(1000)) 	КАК НазначениеПлатежа,
	|	ПлатежноеПоручениеИсходящее.СуммаДокумента                                  КАК СуммаДокумента,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.ТекстПлательщика КАК СТРОКА(1000)) 	КАК ТекстПлательщика,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.ТекстПолучателя КАК СТРОКА(1000)) 		КАК ТекстПолучателя,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее." + СтруктурноеПодразделениеЗапрос + ".НаименованиеПолное КАК СТРОКА(1000)) КАК Организация,
	|	ПлатежноеПоручениеИсходящее." + СтруктурноеПодразделениеЗапрос + ".Наименование,
	|	ПлатежноеПоручениеИсходящее." + СтруктурноеПодразделениеЗапрос + ".РНН 		КАК ОрганизацияРНН,
	|	ПлатежноеПоручениеИсходящее.Организация.КБЕ 								КАК ОрганизацияКБЕ,
	|	ПлатежноеПоручениеИсходящее.Организация.КБЕ 								КАК ПлательщикКБЕ, 
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации 								КАК СчетОрганизации,
	|
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.НомерСчета 						КАК НомерСчетаОрганизации,
	|
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк." + ИмяРеквизитаБИК + " 	КАК ПлательщикБанкБИК,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.Наименование 				КАК ПлательщикБанкНаименование,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.РНН						КАК ПлательщикБанкРНН,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.КоррСчет 					КАК ПлательщикБанкИИК,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.СчетОрганизации.ТекстКорреспондента КАК СТРОКА(1000)) 	КАК ОрганизацияТекстКорреспондента,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.СчетОрганизации.ТекстНазначения КАК СТРОКА(1000)) 		КАК ОрганизацияТекстНазначения,
	|	ПлатежноеПоручениеИсходящее.Контрагент 														КАК ЭлементКонтрагент,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.Контрагент.НаименованиеПолное КАК СТРОКА(1000)) 		КАК Контрагент,
	|	ПлатежноеПоручениеИсходящее.Контрагент.Наименование,
	|	ПлатежноеПоручениеИсходящее.Контрагент.РНН 													КАК КонтрагентРНН,
	|	ПлатежноеПоручениеИсходящее.Контрагент.КБЕ 													КАК КонтрагентКБЕ,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента 												КАК СчетКонтрагента,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.НомерСчета                                      КАК ПолучательИИК,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.НомерСчета 										КАК НомерСчетаКонтрагента,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.Наименование 								КАК ПолучательБанкНаименование,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.РНН 										КАК ПолучательБанкРНН,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк." + ИмяРеквизитаБИК + " 					КАК ПолучательБанкБИК,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.КоррСчет 									КАК ПолучательБанкИИК,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.СчетКонтрагента.ТекстКорреспондента КАК СТРОКА(1000)) 	КАК КонтрагентТекстКорреспондента,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.СчетКонтрагента.ТекстНазначения КАК СТРОКА(1000)) 		КАК КонтрагентТекстНазначения,
	|	ПлатежноеПоручениеИсходящее.СчетБанкаПосредника.Банк.КоррСчет 								КАК БанкПосредникИИК,
	|	ПлатежноеПоручениеИсходящее.СчетБанкаПосредника.Банк." + ИмяРеквизитаБИК + " 				КАК БанкПосредникБИК,
	|	ПлатежноеПоручениеИсходящее.СчетБанкаПосредника.Банк.Наименование 							КАК БанкПосредникБанкНаименование,
	|	ПлатежноеПоручениеИсходящее.СчетБанкаПосредника.НомерСчета 									КАК БанкПосредникНомерСчета,
	|	ПлатежноеПоручениеИсходящее.БанкПосредник.Наименование 										КАК БанкПосредникНаименование,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов)
	|			ТОГДА ПлатежноеПоручениеИсходящее.Контрагент.РНН
	|		ИНАЧЕ ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений)
	|			ТОГДА ПлатежноеПоручениеИсходящее.БанкПосредник.РНН
	|		ИНАЧЕ """"
	|	КОНЕЦ 
	|	КОНЕЦ КАК ГЦВПРНН,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов)
	|			ТОГДА ПлатежноеПоручениеИсходящее.Контрагент.ИдентификационныйКодЛичности
	|		ИНАЧЕ ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений)
	|			ТОГДА ВЫБОР КОГДА ПлатежноеПоручениеИсходящее.БанкПосредник.ИдентификационныйНомер ЕСТЬ NULL ТОГДА ПлатежноеПоручениеИсходящее.БанкПосредник.ИдентификационныйКодЛичности ИНАЧЕ ПлатежноеПоручениеИсходящее.БанкПосредник.ИдентификационныйНомер КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ 
	|	КОНЕЦ КАК ГЦВПБИН_ИИН,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов)
	|			ТОГДА ПлатежноеПоручениеИсходящее.СчетКонтрагента.НомерСчета
	|		ИНАЧЕ ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений)
	|			ТОГДА ПлатежноеПоручениеИсходящее.СчетБанкаПосредника.Банк.КоррСчет
	|		ИНАЧЕ """"
	|	КОНЕЦ 
	|	КОНЕЦ КАК ГЦВПИИК,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов)
	|			ТОГДА ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.Наименование
	|		ИНАЧЕ ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений)
	|			ТОГДА ПлатежноеПоручениеИсходящее.СчетБанкаПосредника.Банк.Наименование
	|		ИНАЧЕ """"
	|	КОНЕЦ 
	|	КОНЕЦ КАК ГЦВПБанкНаименование,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов)
	|			ТОГДА ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк." + ИмяРеквизитаБИК + "
	|		ИНАЧЕ ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений)
	|			ТОГДА ПлатежноеПоручениеИсходящее.СчетБанкаПосредника.Банк." + ИмяРеквизитаБИК + "
	|		ИНАЧЕ """"
	|	КОНЕЦ 
	|	КОНЕЦ КАК ГЦВПБанкБик,
	|	ПлатежноеПоручениеИсходящее.БанкПосредник.РНН 								КАК БанкПосредникРНН,
	|	ПлатежноеПоручениеИсходящее.ДатаПолученияТовара,
	|	ПлатежноеПоручениеИсходящее.КодНазначенияПлатежа,
	|	ПлатежноеПоручениеИсходящее.КодБК,
	|	ПлатежноеПоручениеИсходящее.ДатаВалютирования,
	|	ПлатежноеПоручениеИсходящее.ВидОперации,
	|	ПлатежноеПоручениеИсходящее.ВидОперации 									КАК Операция,
	|	ПлатежноеПоручениеИсходящее." + СтруктурноеПодразделениеЗапрос + ".РНН 		КАК РННПлательщика,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.ТекстПлательщика КАК СТРОКА(1000)) 	КАК ТекстПлательщика1,
	|	ПлатежноеПоручениеИсходящее.Контрагент.РНН									КАК РННПолучателя,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.ТекстПолучателя КАК СТРОКА(1000)) 		КАК ТекстПолучателя1,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов)
	|			ТОГДА 1
	|		ИНАЧЕ &ПустаяСтрока
	|	КОНЕЦ КАК ПенсионныеОтчисления,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений)
	|			ТОГДА 1
	|		ИНАЧЕ &ПустаяСтрока
	|	КОНЕЦ КАК СоциальныеОтчисления,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты)
	|			ТОГДА 1
	|		ИНАЧЕ &ПустаяСтрока
	|	КОНЕЦ КАК ПеречислениеНаКартСчета,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеПоИсполнительнымЛистам)
	|			ТОГДА 1
	|		ИНАЧЕ &ПустаяСтрока
	|	КОНЕЦ КАК ПеречислениеПоИЛ,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручениеИсходящее.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику)
	|			ТОГДА 1
	|		ИНАЧЕ &ПустаяСтрока
	|	КОНЕЦ КАК ПеречислениеПодотчетнику,
	|	ПлатежноеПоручениеИсходящее." + СтруктурноеПодразделениеЗапрос + ".ИдентификационныйНомер 	КАК ПлательщикБИН_ИИН,
	|	ПлатежноеПоручениеИсходящее.Контрагент.ИдентификационныйКодЛичности 						КАК КонтрагентБИН_ИИН,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.ИдентификационныйНомер 					КАК ПлательщикБанкБИН_ИИН,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.ИдентификационныйНомер 					КАК ПолучательБанкБИН_ИИН,
	|	ПлатежноеПоручениеИсходящее.СчетБанкаПосредника.Банк.ИдентификационныйНомер 				КАК БанкПосредникБИН_ИИН 
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	|ГДЕ
	|	ПлатежноеПоручениеИсходящее.Дата >= &ДатаНачало
	|	И ПлатежноеПоручениеИсходящее.Дата <= &ДатаОкончание
	|	И ПлатежноеПоручениеИсходящее.ПометкаУдаления = ЛОЖЬ
	|	И ПлатежноеПоручениеИсходящее.Организация = &Организация 
	|	И ПлатежноеПоручениеИсходящее.СтруктурноеПодразделениеОтправитель = &СтруктурноеПодразделение
	|	И ПлатежноеПоручениеИсходящее.СчетОрганизации В (&МассивБанковскихСчетов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПлатежноеПоручениеИсходящее.Дата
	|";
	
	МассивСчетов = Новый Массив;
	
	Для каждого СтрокаСчетов из ТаблицаБанковскихСчетов Цикл
		Если СтрокаСчетов.Пометка Тогда
			МассивСчетов.Добавить(СтрокаСчетов.Счет);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСчетов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросПоДокументам = Новый Запрос(ТекстЗапроса);
	
	ЗапросПоДокументам.УстановитьПараметр("ДатаНачало",               НачалоДня(НачПериода));
	ЗапросПоДокументам.УстановитьПараметр("ДатаОкончание",            КонецДня(КонПериода));
	ЗапросПоДокументам.УстановитьПараметр("ПустаяСтрока",             "");
	ЗапросПоДокументам.УстановитьПараметр("СтруктурноеПодразделение", СтруктурноеПодразделение);
	ЗапросПоДокументам.УстановитьПараметр("Организация",              Организация);
	ЗапросПоДокументам.УстановитьПараметр("МассивБанковскихСчетов",   МассивСчетов);
	
	РезультатЗапроса = ЗапросПоДокументам.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДляЭкспорта = РезультатЗапроса.Выбрать();
		
		СтруктураЗаголовковЭкспорта = СформироватьСтруктуруЗаголовковЭкспорта();
		
		Пока ВыборкаДляЭкспорта.Следующий() Цикл
			
			СтрокаЭкспорта = ДокументыНаЭкспорт.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаЭкспорта, ВыборкаДляЭкспорта);
			
			ЗаполнитьЗначениеЭкспорта(СтрокаЭкспорта, ВыборкаДляЭкспорта);
			
			ПроверитьНаКорректностьИПустоеЗначениеЭкспорта(СтрокаЭкспорта,
															СтруктураЗаголовковЭкспорта,
															ПроверятьРНН,
															ПроверятьБИН_ИИН,
															ВыборкаДляЭкспорта.ВидОперации);
			
			СтрокаЭкспорта.Выгружать  = ПустаяСтрока(СтрокаЭкспорта.ОписаниеОшибок);
			СтрокаЭкспорта.ЕстьОшибка = НЕ ПустаяСтрока(СтрокаЭкспорта.ОписаниеОшибок);
			
			СтрокаЭкспорта.СообщенияОбОшибках = СтрокаЭкспорта.ОписаниеОшибок;
			СтрокаЭкспорта.ОписаниеОшибок     = СтрЗаменить(СтрокаЭкспорта.ОписаниеОшибок, Символы.ПС, " ");
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет выгрузку платежей в файл по всем выбранным счетам
//
// Параметры
//    ИдФормы - УникальныйИдентификатор - идентификатор вызывающей метод формы
//
Процедура ВыгрузитьПлатежи(ИдФормы = "", ДокументыКВыгрузке) Экспорт
	
	Для каждого Счет из ТаблицаСчетов Цикл
		
		Если Не Счет.Пометка Или Не ЗначениеЗаполнено(Счет.НастройкаОбмена) Или Счет.Выгружается Или Счет.ПрямойОбмен Тогда
			Продолжить;
		КонецЕсли;
		
		ВыгрузитьПлатежиПоСчету(Счет, ИдФормы, ДокументыКВыгрузке);
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет выгрузку платежей в файл по указанному счету
//
// Параметры
//    Счет - Строка табличной части - Строка списка банковских счетов
//    ИдФормы - УникальныйИдентификатор - идентификатор вызывающей метод формы
//
Процедура ВыгрузитьПлатежиПоСчету(Счет, ИдФормы = "", ДокументыКВыгрузке) Экспорт
	
	Счет.Выгружен = Ложь;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Выгружать", Истина);
	Отбор.Вставить("СчетОрганизации", Счет.Счет);
	
	СтрокиКВыгрузке = ДокументыКВыгрузке.НайтиСтроки(Отбор);
	Если СтрокиКВыгрузке.Количество() Тогда
		
		ПараметрыВыгрузки = Новый Структура;
		ПараметрыВыгрузки.Вставить("БанковскийСчет",     Счет.Счет);
		ПараметрыВыгрузки.Вставить("НастройкаОбмена",    Счет.НастройкаОбмена);
		ПараметрыВыгрузки.Вставить("Кодировка",          Счет.Кодировка);
		
		ТаблицаДокументов = ДокументыКВыгрузке.Выгрузить(СтрокиКВыгрузке);
		ПараметрыВыгрузки.Вставить("ТаблицаДокументов", ТаблицаДокументов);
		
		ПараметрыВыгрузки.Вставить("Организация",              Организация);
		ПараметрыВыгрузки.Вставить("СтруктурноеПодразделение", СтруктурноеПодразделение);
		ПараметрыВыгрузки.Вставить("НастройкаЗаполнения",      НастройкаЗаполнения);
		ПараметрыВыгрузки.Вставить("ВыгружатьВXMLФормате",     ВыгружатьВXMLФормате);
		
		Счет.АдресХранилищаДокументов = ПоместитьВоВременноеХранилище(ТаблицаДокументов, ИдФормы);
		
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			ИдФормы,
			"Обработки.КлиентБанкСПоддержкойЭД.Выгрузить",
			ПараметрыВыгрузки,
			НСтр("ru='Выгрузка платежей в банк'")
		);
		
		Счет.АдресХранилищаФайла = Результат.АдресХранилища;
		
		Если Результат.ЗаданиеВыполнено Тогда
			Счет.СохранитьФайл = Истина;
		Иначе
			Счет.Выгружается = Истина;
			Счет.ИдентификаторВыгрузки = Результат.ИдентификаторЗадания;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует Табличный документ с отчетом о выгруженных платежах
//
// Параметры
//    ПрямойОбмен - Булево - Признак печати отчета для выгрузки через прямой обмен
//
// Возвращаемое значение
//    ТабличныйДокумент - отчет о выгрузке
//
Функция ПечатьОтчетаОВыгрузке(ПрямойОбмен = Ложь) Экспорт
	
	ПолеОтчета = Неопределено;
	
	Для каждого Счет из ТаблицаСчетов Цикл
		Если Счет.Выгружен Тогда
			Если ПолеОтчета = Неопределено Тогда
				ПолеОтчета = Новый ТабличныйДокумент;
				ПолеОтчета.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			КонецЕсли;
			Если ЭтоАдресВременногоХранилища(Счет.АдресХранилищаДокументов) Тогда
				ВыгруженныеДокументы = ПолучитьИзВременногоХранилища(Счет.АдресХранилищаДокументов);
				Если ВыгруженныеДокументы <> Неопределено Тогда
					ОтборПоСчету = Новый Структура("СчетОрганизации", Счет.Счет);
					ДокументыПоСчету = ВыгруженныеДокументы.Скопировать(ОтборПоСчету);
					
					ВывестиСекциюОтчетаОВыгрузке(ПолеОтчета, ДокументыПоСчету, Счет.Счет);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПолеОтчета;
	
КонецФункции

Функция ПолучитьНастройкуЗаполнения(НастройкаЗаполнения, ИмяНастройкиЗаполнения) Экспорт
	
	Если ТипЗнч(НастройкаЗаполнения) = Тип("СписокЗначений") Тогда
		Для каждого ЭлементНастроек Из НастройкаЗаполнения Цикл
			Если ЭлементНастроек.Представление = ИмяНастройкиЗаполнения Тогда
				Возврат ЭлементНастроек.Значение;
			КонецЕсли;
		КонецЦикла
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует таблицу баннковских счетов с настройками обмена
//
// Параметры
//    Загрузка - Булево - Признак подготовки счетов для загрузки или для выгрузки платежей
//
Функция ТаблицаСчетов(Загрузка = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаНастройкиСчетов();
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Загрузка",    Загрузка);
	
	БанковскиеСчета = Запрос.Выполнить().Выгрузить();
	
	Возврат БанковскиеСчета;
	
КонецФункции

#Область ТекстыЗапросов

Функция ТекстЗапросаНастройкиСчетов()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИСТИНА                                            КАК Пометка,
	|	БанковскиеСчета.Ссылка                            КАК Счет,
	|	БанковскиеСчета.Владелец                          КАК Организация,
	|	БанковскиеСчета.Наименование                      КАК Наименование,
	|	БанковскиеСчета.НомерСчета                        КАК НомерСчета,
	|	
	|	БанковскиеСчета.ИспользоватьПрямойОбменСБанком    КАК ПрямойОбмен,
	|	БанковскиеСчета.ИспользоватьОбменСБанком          КАК ОбменЧерезФайл,
	|	
	|	ВЫБОР КОГДА БанковскиеСчета.ИспользоватьПрямойОбменСБанком ТОГДА
	|		ЕСТЬNULL(СоглашениеЭД.Ссылка, ЗНАЧЕНИЕ(Справочник.НастройкиОбменСБанками.ПустаяСсылка))
	|	КОГДА БанковскиеСчета.ИспользоватьОбменСБанком ТОГДА
	|		ВЫБОР КОГДА &Загрузка ТОГДА
	|			БанковскиеСчета.ФайлЗагрузки
	|		ИНАЧЕ
	|			БанковскиеСчета.ФайлВыгрузки
	|		КОНЕЦ
	|	КОНЕЦ КАК НастройкаОбмена,
	|	БанковскиеСчета.Кодировка                         КАК Кодировка,
	|	
	|	0                                                 КАК КВыгрузке,
	|	
	|	БанковскиеСчета.Банк.БИК                          КАК БИКБанка,
	|	БанковскиеСчета.Банк                              КАК Банк,
	|	Ложь                                              КАК ЕстьВозможностьПрямогоОбмена
	|	
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.НастройкиОбменСБанками КАК СоглашениеЭД
	|	ПО
	|		БанковскиеСчета.ИспользоватьПрямойОбменСБанком
	|		И БанковскиеСчета.Владелец = СоглашениеЭД.Организация
	|		И БанковскиеСчета.Банк = СоглашениеЭД.Банк
	|		И НЕ СоглашениеЭД.Недействительна
	|	
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Организация
	|	И БанковскиеСчета.ОбменСБанкомВключен
	|	И НЕ БанковскиеСчета.ПометкаУдаления
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

Процедура ДополнитьТаблицуСчетовПоддержкойПрямогоОбмена(ТаблицаСчетов)
	
	Макет = Справочники.НастройкиОбменСБанками.ПолучитьМакет("СписокБанков");
	КоличествоЗаписей = Макет.ВысотаТаблицы;
	МассивБИКБанков = Новый Массив;
	
	Для Индекс = 1 По КоличествоЗаписей Цикл
		МассивБИКБанков.Добавить(Макет.Область(Индекс, 2).Текст);
	КонецЦикла;
	
	Для каждого Счет из ТаблицаСчетов Цикл
		Если МассивБИКБанков.Найти(Счет.БИКБанка) <> Неопределено Тогда
			Счет.ЕстьВозможностьПрямогоОбмена = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВСтроку(Буфер, НоваяСтрока)
	
	Если ПустаяСтрока(Буфер) Тогда
		Буфер = НоваяСтрока;
		
	Иначе
		Буфер = Буфер + Символы.ПС + НоваяСтрока;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЗамечание(СтруктураДокумента, НоваяГотовность, ТекстЗамечания)
	
	УстановитьГотовность(СтруктураДокумента.Готовность, НоваяГотовность);
	ДобавитьВСтроку(СтруктураДокумента.ОписаниеОшибок, ТекстЗамечания);
	
КонецПроцедуры

Процедура УстановитьГотовность(ТекущаяГотовность, НоваяГотовность)
	
	Если ТекущаяГотовность < НоваяГотовность Тогда
		ТекущаяГотовность = НоваяГотовность;
	КонецЕсли;
	
КонецПроцедуры

#Область ПодготовкаВыгрузки

Функция СформироватьСтруктуруЗаголовковЭкспорта()
	
	СтруктураЗаголовков = Новый Структура;
	
	СтруктураЗаголовков.Вставить("Выгружать"                 , "_");
	СтруктураЗаголовков.Вставить("Готовность"                , НСтр("ru = 'Готовность'"));
	
	СтруктураЗаголовков.Вставить("НомерДокумента"            , НСтр("ru = '№ Документа'"));
	СтруктураЗаголовков.Вставить("ДатаДокумента"             , НСтр("ru = 'Дата'"));
	СтруктураЗаголовков.Вставить("Операция"                  , НСтр("ru = 'Операция'"));
	СтруктураЗаголовков.Вставить("СчетОрганизации"           , НСтр("ru = 'Эл. Р/с организации'"));
	СтруктураЗаголовков.Вставить("НомерСчетаОрганизации"     , НСтр("ru = 'Р/с организации'"));
	СтруктураЗаголовков.Вставить("Сумма"                     , НСтр("ru = 'Сумма'"));
	СтруктураЗаголовков.Вставить("СуммаДокумента"            , НСтр("ru = 'Сумма'"));
	
	СтруктураЗаголовков.Вставить("ПенсионныеОтчисления"      , НСтр("ru = 'Пенсионные отчисления'"));
	СтруктураЗаголовков.Вставить("СоциальныеОтчисления"      , НСтр("ru = 'Социальные отчисления'"));
	СтруктураЗаголовков.Вставить("ПеречислениеНаКартСчета"   , НСтр("ru = 'Заработная плата'"));
	СтруктураЗаголовков.Вставить("ПеречислениеПоИЛ"          , НСтр("ru = 'Перечисление по исполнительным листам'"));
	СтруктураЗаголовков.Вставить("ПеречислениеПодотчетнику"  , НСтр("ru = 'Перечисление подотчетнику'"));
	
	СтруктураЗаголовков.Вставить("Контрагент"                , НСтр("ru = 'Контрагент'"));
	СтруктураЗаголовков.Вставить("ЭлементКонтрагент"         , НСтр("ru = 'Контрагент'"));
	СтруктураЗаголовков.Вставить("СчетКонтрагента"           , НСтр("ru = 'Р/с контрагента'"));
	СтруктураЗаголовков.Вставить("НомерСчетаКонтрагента"     , НСтр("ru = 'Р/с контрагента'"));
	
	СтруктураЗаголовков.Вставить("ПлательщикНаименование"    , НСтр("ru = 'Отправитель'"));
	СтруктураЗаголовков.Вставить("ПлательщикРНН"             , НСтр("ru = 'РНН отправителя'"));
	СтруктураЗаголовков.Вставить("ПлательщикБИН_ИИН"         , НСтр("ru = 'БИН / ИИН отправителя'"));
	СтруктураЗаголовков.Вставить("ПлательщикКБЕ"             , НСтр("ru = 'Кбе отправителя'"));
	СтруктураЗаголовков.Вставить("ПлательщикИИК"             , НСтр("ru = 'Расчетный счет отправителя'"));
	
	СтруктураЗаголовков.Вставить("ПлательщикБанкНаименование", НСтр("ru = 'Наименование банка-отправителя'"));
	СтруктураЗаголовков.Вставить("ПлательщикБанкРНН"         , НСтр("ru = 'РНН банка-отправителя'"));
	СтруктураЗаголовков.Вставить("ПлательщикБанкБИН_ИИН"     , НСтр("ru = 'БИН / ИИН банка-отправителя'"));
	СтруктураЗаголовков.Вставить("ПлательщикБанкБИК"         , НСтр("ru = 'БИК банка-отправителя'"));
	СтруктураЗаголовков.Вставить("ПлательщикБанкИИК"         , НСтр("ru = 'ИИК банка-отправителя'"));
	
	СтруктураЗаголовков.Вставить("ПолучательНаименование"    , НСтр("ru = 'Бенефициар'"));
	СтруктураЗаголовков.Вставить("ПолучательРНН"             , НСтр("ru = 'РНН бенефициара'"));
	СтруктураЗаголовков.Вставить("ПолучательБИН_ИИН"         , НСтр("ru = 'БИН / ИИН бенефициара'"));
	СтруктураЗаголовков.Вставить("ПолучательКБЕ"             , НСтр("ru = 'Кбе бенефициара'"));
	СтруктураЗаголовков.Вставить("ПолучательИИК"             , НСтр("ru = 'ИИК бенефициара'"));
	
	СтруктураЗаголовков.Вставить("ПолучательБанкНаименование", НСтр("ru = 'Наименование банка-получателя'"));
	СтруктураЗаголовков.Вставить("ПолучательБанкРНН"         , НСтр("ru = 'РНН банка-получателя'"));
	СтруктураЗаголовков.Вставить("ПолучательБанкБИН_ИИН"     , НСтр("ru = 'БИН / ИИН банка-получателя'"));
	СтруктураЗаголовков.Вставить("ПолучательБанкБИК"         , НСтр("ru = 'БИК банка-получателя'"));
	СтруктураЗаголовков.Вставить("ПолучательБанкИИК"         , НСтр("ru = 'ИИК банка-получателя'"));
	
	СтруктураЗаголовков.Вставить("БанкПосредникНаименование" , НСтр("ru = 'Наименование банка-посредника'"));
	СтруктураЗаголовков.Вставить("БанкПосредникРНН"          , НСтр("ru = 'РНН банка-посредника'"));
	СтруктураЗаголовков.Вставить("БанкПосредникБИН_ИИН"      , НСтр("ru = 'БИН / ИИН банка-посредника'"));
	СтруктураЗаголовков.Вставить("БанкПосредникБИК"          , НСтр("ru = 'БИК банка-посредника'"));
	СтруктураЗаголовков.Вставить("БанкПосредникИИК"          , НСтр("ru = 'ИИК банка-посредника'"));
	
	СтруктураЗаголовков.Вставить("ГЦВПРНН"                   , НСтр("ru = 'РНН ГЦВП'"));
	СтруктураЗаголовков.Вставить("ГЦВПБИН_ИИН"               , НСтр("ru = 'БИН / ИИН ГЦВП'"));
	
	СтруктураЗаголовков.Вставить("ГЦВПИИК"                   , НСтр("ru = 'Р/с ГЦВП'"));
	СтруктураЗаголовков.Вставить("ГЦВПБанкНаименование"      , НСтр("ru = 'Наименование банка ГЦВП'"));
	СтруктураЗаголовков.Вставить("ГЦВПБанкБИК"               , НСтр("ru = 'БИК банка ГЦВП'"));
	
	СтруктураЗаголовков.Вставить("ДатаПолученияТовара"       , НСтр("ru = 'Дата получения товара'"));
	СтруктураЗаголовков.Вставить("НазначениеПлатежа"         , НСтр("ru = 'Назначение платежа'"));
	
	СтруктураЗаголовков.Вставить("КодНазначенияПлатежа"      , НСтр("ru = 'Код назначения платежа'"));
	СтруктураЗаголовков.Вставить("КодБюджетнойКлассификации" , НСтр("ru = 'Код бюджетной классификации'"));
	СтруктураЗаголовков.Вставить("ДатаВалютирования"         , НСтр("ru = 'Дата валютирования'"));
	
	СтруктураЗаголовков.Вставить("Документ"                  , НСтр("ru = 'Источник'"));
	СтруктураЗаголовков.Вставить("СекцияДокумент"            , НСтр("ru = 'Выгрузка'"));
	
	СтруктураЗаголовков.Вставить("ОписаниеОшибок"            , НСтр("ru = 'Замечания'"));
	СтруктураЗаголовков.Вставить("ТипДокумента"              , НСтр("ru = 'Тип пл. документа'"));
	СтруктураЗаголовков.Вставить("Проведен"                  , "");
	
	СтруктураЗаголовков.Вставить("СостояниеДокумента"        , НСтр("ru = 'Состояние документа'"));
	
	Возврат СтруктураЗаголовков;
	
КонецФункции

Процедура ЗаполнитьЗначениеЭкспорта(СтрокаЭкспорта, ВыборкаДляЭкспорта)
	
	СтрокаЭкспорта.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаДляЭкспорта.Номер, ВыборкаДляЭкспорта.Ссылка);
	
	СтрокаЭкспорта.Сумма = Формат(ВыборкаДляЭкспорта.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧГ=0");
	
	ТекстПлательщика = СокрЛП(ВыборкаДляЭкспорта["ТекстПлательщика"]);
	Если ПустаяСтрока(ТекстПлательщика) Тогда
		СтрокаЭкспорта.ПлательщикНаименование = СокрЛП(ВыборкаДляЭкспорта["Организация"]);
	Иначе
		СтрокаЭкспорта.ПлательщикНаименование = ТекстПлательщика;
	КонецЕсли;
	
	РННПлательщика = СокрЛП(ВыборкаДляЭкспорта["РННПлательщика"]);
	Если ПустаяСтрока(РННПлательщика) Тогда
		СтрокаЭкспорта.ПлательщикРНН = ВыборкаДляЭкспорта["ОрганизацияРНН"];
	Иначе
		СтрокаЭкспорта.ПлательщикРНН = РННПлательщика;
	КонецЕсли;
	
	СтрокаЭкспорта.ПлательщикИИК = ВыборкаДляЭкспорта["НомерСчетаОрганизации"];
	
	//ПолучательБИН_ИИН
	Если ВыборкаДляЭкспорта.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		Значение = ВыборкаДляЭкспорта.ПлательщикБИН_ИИН;
	Иначе
		Значение = ВыборкаДляЭкспорта["КонтрагентБИН_ИИН"];
	КонецЕсли;
	СтрокаЭкспорта.ПолучательБИН_ИИН = Значение;
	
	//ПолучательНаименование
	ТекстПолучателя = "";
	Если ВыборкаДляЭкспорта.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		ТекстПолучателя = СокрЛП(ВыборкаДляЭкспорта.Организация);
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстПолучателя) Тогда
		ТекстПолучателя = СокрЛП(ВыборкаДляЭкспорта["ТекстПолучателя"]);
		Если ПустаяСтрока(ТекстПолучателя) Тогда
			ТекстПолучателя = СокрЛП(ВыборкаДляЭкспорта["Контрагент"]);
		КонецЕсли;
	КонецЕсли;
	СтрокаЭкспорта.ПолучательНаименование  = ТекстПолучателя;
	
	//ПолучательРНН
	Если ВыборкаДляЭкспорта.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		Значение = ВыборкаДляЭкспорта.ОрганизацияРНН;
	Иначе
		Значение = СокрЛП(ВыборкаДляЭкспорта["РННПолучателя"]);
		Если ПустаяСтрока(Значение) Тогда
			Значение = ВыборкаДляЭкспорта["КонтрагентРНН"];
		КонецЕсли;
	КонецЕсли;
	СтрокаЭкспорта.ПолучательРНН = Значение;
	
	//ПолучательКБЕ
	Если ВыборкаДляЭкспорта.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		Значение = ВыборкаДляЭкспорта.ПлательщикКБЕ;
	Иначе
		Значение = ВыборкаДляЭкспорта["КонтрагентКБЕ"];
	КонецЕсли;
	СтрокаЭкспорта.ПолучательКБЕ = Значение;
	
	//КБК
	Если ВыборкаДляЭкспорта.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
		СтрокаЭкспорта.КодБюджетнойКлассификации = ВыборкаДляЭкспорта.КодБК;
	КонецЕсли;
	
	СтрокаЭкспорта.НазначениеПлатежа = СокрЛП(СтрЗаменить(СтрЗаменить(СтрЗаменить(ВыборкаДляЭкспорта.НазначениеПлатежа, Символы.ПС, " "), Символы.ВК, ""), Символы.ПФ, " "));
	
	СтрокаЭкспорта.Документ = ВыборкаДляЭкспорта.Ссылка;
	
	//ТипДокумента
	Если ТипЗнч(ВыборкаДляЭкспорта.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
		
		ПеречислениеНалога = (ВыборкаДляЭкспорта.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога);
		ТипДокумента = ?(ПеречислениеНалога, 1, 0) * 4 + 2 + 1 + 1;
		
	Иначе
		ТипДокумента = 0;
	КонецЕсли;
	
	СтрокаЭкспорта.ТипДокумента = ТипДокумента;
	
КонецПроцедуры

Процедура ПроверитьНаКорректностьИПустоеЗначениеЭкспорта(СтрокаЭкспорта, СтруктураЗаголовков, ПроверятьРНН, ПроверятьБИН_ИИН, ВидОперации)
	
	Если НЕ СтрокаЭкспорта.Проведен Тогда
		ДобавитьЗамечание(СтрокаЭкспорта, 3, НСтр("ru = 'Не проведен документ'"));
		УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
	КонецЕсли;
	
	// РеквизитыПлДокЭкс_Основные
	Экспорт_НеПустые = Новый Структура("НомерДокумента, ДатаДокумента, Сумма");
	
	// РеквизитыПлДок_Плательщик
	Экспорт_НеПустые.Вставить("ПлательщикНаименование");
	Экспорт_НеПустые.Вставить("ПлательщикКБЕ");
	Экспорт_НеПустые.Вставить("ПлательщикИИК");
	Если ПроверятьРНН Тогда
		Экспорт_НеПустые.Вставить("ПлательщикРНН");
	КонецЕсли;
	Если ПроверятьБИН_ИИН Тогда
		Экспорт_НеПустые.Вставить("ПлательщикБИН_ИИН");
	КонецЕсли;
	
	//РеквизитыПлДок_ПлательщикНПР
	Экспорт_НеПустые.Вставить("ПлательщикБанкНаименование");
	Экспорт_НеПустые.Вставить("ПлательщикБанкБИК");
	Если ПроверятьРНН Тогда
		Экспорт_НеПустые.Вставить("ПлательщикБанкРНН");
	КонецЕсли;
	Если ПроверятьБИН_ИИН Тогда
		Экспорт_НеПустые.Вставить("ПлательщикБанкБИН_ИИН");
	КонецЕсли;
	
	// РеквизитыПлДок_Получатель
	Экспорт_НеПустые.Вставить("ПолучательНаименование");
	Экспорт_НеПустые.Вставить("ПолучательКБЕ");
	Экспорт_НеПустые.Вставить("ПолучательИИК");
	Если ПроверятьРНН Тогда
		Экспорт_НеПустые.Вставить("ПолучательРНН");
	КонецЕсли;
	Если ПроверятьБИН_ИИН Тогда
		Экспорт_НеПустые.Вставить("ПолучательБИН_ИИН");
	КонецЕсли;
	
	//РеквизитыПлДок_ПолучательНПР
	Экспорт_НеПустые.Вставить("ПолучательБанкНаименование");
	Экспорт_НеПустые.Вставить("ПолучательБанкБИК");
	Если ПроверятьРНН Тогда
		Экспорт_НеПустые.Вставить("ПолучательБанкРНН");
	КонецЕсли;
	Если ПроверятьБИН_ИИН Тогда
		Экспорт_НеПустые.Вставить("ПолучательБанкБИН_ИИН");
	КонецЕсли;
	
	//РеквизитыПлДок_Назначение
	Экспорт_НеПустые.Вставить("НазначениеПлатежа");
	
	//РеквизитыПлДок_БюджетПлатеж
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
		Экспорт_НеПустые.Вставить("КодНазначенияПлатежа");
	КонецЕсли;
	
	Для каждого Свойство Из Экспорт_НеПустые Цикл
		ПроверитьНаПустоеЗначениеЭкспорта(СтрокаЭкспорта, Свойство.Ключ, СтруктураЗаголовков[Свойство.Ключ]);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьНаПустоеЗначениеЭкспорта(СтрокаЭкспорта, ИмяСвойства, ПредставлениеСвойства)
	
	Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта[ИмяСвойства]) Тогда
		Если ИмяСвойства = "ПолучательБанкРНН" Тогда
			Возврат;
		КонецЕсли;
		ТекстЗамечания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнено ""%1"".'"), ПредставлениеСвойства);
		ДобавитьЗамечание(СтрокаЭкспорта, 4, ТекстЗамечания);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Выгрузка

Процедура ВывестиСекциюОтчетаОВыгрузке(ПолеОтчета, Документы, БанковскийСчетСсылка)
	
	МакетОтчета = ПолучитьМакет("ОтчетОВыгрузке");
	
	Шапка    = МакетОтчета.ПолучитьОбласть("Шапка");
	Строка   = МакетОтчета.ПолучитьОбласть("Строка");
	Подвал   = МакетОтчета.ПолучитьОбласть("Подвал");
	НазвОрг  = МакетОтчета.ПолучитьОбласть("НазваниеОрганизации");
	
	РеквизитыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БанковскийСчетСсылка, "Владелец, ВалютаДенежныхСредств, НомерСчета");
	
	НазвОрг.Параметры.НазваниеОрганизации = Строка(РеквизитыСчета.Владелец);
	ПолеОтчета.Вывести(НазвОрг);
	
	Шапка.Параметры.ИмяОтчета = НСтр("ru='Отчет о выгруженных платежных документах'");
	Шапка.Параметры.ИмяСуммыПоступления = "Поступление";
	Шапка.Параметры.ИмяСуммыСписания    = "Списание";
	
	ОбрБанковскийСчет = "";
	Индекс = 0; ИтогоСуммаП = 0; ИтогоСуммаР = 0;
	
	Документы.Сортировать("ДатаДокумента");
	НачПериода = Документы[0].ДатаДокумента;
	КонПериода = Документы[Документы.Количество() - 1].ДатаДокумента;
	
	Валюта = ?(ЗначениеЗаполнено(РеквизитыСчета.ВалютаДенежныхСредств), СокрЛП(Строка(РеквизитыСчета.ВалютаДенежныхСредств)), НСтр("ru='валюта не указана'"));
	НачалоОтчетногоПериода = Формат(НачПериода, "ДЛФ=D");
	КонецОтчетногоПериода = Формат(КонПериода, "ДЛФ=D");
	
	Шапка.Параметры.ОписаниеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='по счету %1 (%2) с %3 по %4'"),
		РеквизитыСчета.НомерСчета,
		Валюта,
		НачалоОтчетногоПериода,
		КонецОтчетногоПериода);
	ПолеОтчета.Вывести(Шапка);
	
	Для Каждого СтрокаИсточника Из Документы Цикл
		
		Строка.Параметры.Плательщик = СтрокаИсточника.ПлательщикНаименование;
		Строка.Параметры.ПлательщикСчет = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 (%2)",
			СтрокаИсточника.ПлательщикИИК,
			Валюта);
		
		Строка.Параметры.Получатель = СтрокаИсточника.ПолучательНаименование;
		Строка.Параметры.ПолучательСчет = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 (%2)",
			СтрокаИсточника.ПолучательИИК,
			Валюта);
		
		Строка.Параметры.СуммаПоступление = "";
		Строка.Параметры.СуммаСписание = СтрокаИсточника.Сумма;
		ИтогоСуммаР = ИтогоСуммаР + СтрокаИсточника.Сумма;
		
		Строка.Параметры.Документ = СтрокаИсточника.Документ;
		Индекс = Индекс + 1;
		Строка.Параметры.Индекс = Индекс;
		
		ПолеОтчета.Вывести(Строка);
		
	КонецЦикла;
	
	Подвал.Параметры.ИтогоСуммаП = ИтогоСуммаП;
	Подвал.Параметры.ИтогоСуммаР = ИтогоСуммаР;
	
	ПолеОтчета.Вывести(Подвал);
	
	ПолеОтчета.ОтображатьГруппировки = Ложь;
	ПолеОтчета.ОтображатьЗаголовки   = Ложь;
	ПолеОтчета.ОтображатьСетку       = Ложь;
	ПолеОтчета.ТолькоПросмотр        = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли