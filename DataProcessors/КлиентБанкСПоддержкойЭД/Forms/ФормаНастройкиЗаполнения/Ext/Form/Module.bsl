
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("НастройкаЗаполнения") Тогда
		НастройкаЗаполнения = Параметры.НастройкаЗаполнения;
	КонецЕсли;
	
	Для каждого ЭлементЗаполения Из НастройкаЗаполнения Цикл
		
		ИмяРеквизита = ЭлементЗаполения.Представление;
		ЗначениеРеквизита = ЭлементЗаполения.Значение;
		
		Попытка
			ЭтаФорма[ИмяРеквизита] = ЗначениеРеквизита;
			
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
	Если Параметры.Свойство("Программа") Тогда
		Настр_Программа = Параметры.Программа;
	КонецЕсли;
	
	Если Параметры.Свойство("Кодировка") Тогда
		Настр_Кодировка = Параметры.Кодировка;
	КонецЕсли;
	
	ЗаполнитьВидУчетаНУ(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ППИсх_ЗаполнятьДанныеАвтоматическиПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
	ЗаполнятьДанныеАвтоматическиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ППВх_ЗаполнятьДанныеАвтоматическиПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
	ЗаполнятьДанныеАвтоматическиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПОСпис_ЗаполнятьДанныеАвтоматическиПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
	ЗаполнятьДанныеАвтоматическиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПОПост_ЗаполнятьДанныеАвтоматическиПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	ЗаполнятьДанныеАвтоматическиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ППИсх_УчитыватьКПНПриИзменении(Элемент)
	
	УчитыватьКПНПриИзмененииНаСервере("ППИсх_");
	
КонецПроцедуры

&НаКлиенте
Процедура ППВх_УчитыватьКПНПриИзменении(Элемент)
	
	УчитыватьКПНПриИзмененииНаСервере("ППВх_");
	
КонецПроцедуры

&НаКлиенте
Процедура ПОСпис_УчитыватьКПНПриИзменении(Элемент)
	
	УчитыватьКПНПриИзмененииНаСервере("ПОСпис_");
	
КонецПроцедуры

&НаКлиенте
Процедура ПОПост_УчитыватьКПНПриИзменении(Элемент)
	
	УчитыватьКПНПриИзмененииНаСервере("ПОПост_");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьНастройки(Команда)
	
	НастройкаЗаполнения.Очистить();
	
	НастройкаЗаполнения.Добавить(ППИсх_ЗаполнятьДанныеАвтоматически,   	"ППИсх_ЗаполнятьДанныеАвтоматически");
	НастройкаЗаполнения.Добавить(ППИсх_УчитыватьКПН,        		   	"ППИсх_УчитыватьКПН");
	НастройкаЗаполнения.Добавить(ППИсх_ПроводитьНовыеДокументы,        	"ППИсх_ПроводитьНовыеДокументы");
	НастройкаЗаполнения.Добавить(ППИсх_СчетУчетаРасчетовСКонтрагентом, 	"ППИсх_СчетУчетаРасчетовСКонтрагентом");
	НастройкаЗаполнения.Добавить(ППИсх_СчетУчетаРасчетовПоАвансам,     	"ППИсх_СчетУчетаРасчетовПоАвансам");
	НастройкаЗаполнения.Добавить(ППИсх_СтатьяДвиженияДенежныхСредств,  	"ППИсх_СтатьяДвиженияДенежныхСредств");
	НастройкаЗаполнения.Добавить(ППИсх_ВидУчетаНУ,                     	"ППИсх_ВидУчетаНУ");
	
	НастройкаЗаполнения.Добавить(ППВх_ЗаполнятьДанныеАвтоматически,    	"ППВх_ЗаполнятьДанныеАвтоматически");
	НастройкаЗаполнения.Добавить(ППВх_УчитыватьКПН,        			   	"ППВх_УчитыватьКПН");
	НастройкаЗаполнения.Добавить(ППВх_ПроводитьНовыеДокументы,         	"ППВх_ПроводитьНовыеДокументы");
	НастройкаЗаполнения.Добавить(ППВх_СчетУчетаРасчетовСКонтрагентом,  	"ППВх_СчетУчетаРасчетовСКонтрагентом");
	НастройкаЗаполнения.Добавить(ППВх_СчетУчетаРасчетовПоАвансам,      	"ППВх_СчетУчетаРасчетовПоАвансам");
	НастройкаЗаполнения.Добавить(ППВх_СтатьяДвиженияДенежныхСредств,   	"ППВх_СтатьяДвиженияДенежныхСредств");
	НастройкаЗаполнения.Добавить(ППВх_ВидУчетаНУ,                       "ППВх_ВидУчетаНУ");
	
	НастройкаЗаполнения.Добавить(ПОСпис_ЗаполнятьДанныеАвтоматически,   "ПОСпис_ЗаполнятьДанныеАвтоматически");
	НастройкаЗаполнения.Добавить(ПОСпис_УчитыватьКПН,        			"ПОСпис_УчитыватьКПН");
	НастройкаЗаполнения.Добавить(ПОСпис_ПроводитьНовыеДокументы,        "ПОСпис_ПроводитьНовыеДокументы");
	НастройкаЗаполнения.Добавить(ПОСпис_СчетУчетаРасчетовСКонтрагентом, "ПОСпис_СчетУчетаРасчетовСКонтрагентом");
	НастройкаЗаполнения.Добавить(ПОСпис_СчетУчетаРасчетовПоАвансам,     "ПОСпис_СчетУчетаРасчетовПоАвансам");
	НастройкаЗаполнения.Добавить(ПОСпис_СтатьяДвиженияДенежныхСредств,  "ПОСпис_СтатьяДвиженияДенежныхСредств");
	НастройкаЗаполнения.Добавить(ПОСпис_ВидУчетаНУ,                     "ПОСпис_ВидУчетаНУ");
	
	НастройкаЗаполнения.Добавить(ПОПост_ЗаполнятьДанныеАвтоматически,   "ПОПост_ЗаполнятьДанныеАвтоматически");
	НастройкаЗаполнения.Добавить(ПОПост_УчитыватьКПН,			        "ПОПост_УчитыватьКПН");
	НастройкаЗаполнения.Добавить(ПОПост_ПроводитьНовыеДокументы,        "ПОПост_ПроводитьНовыеДокументы");
	НастройкаЗаполнения.Добавить(ПОПост_СчетУчетаРасчетовСКонтрагентом, "ПОПост_СчетУчетаРасчетовСКонтрагентом");
	НастройкаЗаполнения.Добавить(ПОПост_СчетУчетаРасчетовПоАвансам,     "ПОПост_СчетУчетаРасчетовПоАвансам");
	НастройкаЗаполнения.Добавить(ПОПост_СтатьяДвиженияДенежныхСредств,  "ПОПост_СтатьяДвиженияДенежныхСредств");
	НастройкаЗаполнения.Добавить(ПОПост_ВидУчетаНУ,                     "ПОПост_ВидУчетаНУ");
	
	НастройкаЗаполнения.Добавить(ПроверятьБИН_ИИН,     					"ПроверятьБИН_ИИН");
	НастройкаЗаполнения.Добавить(ПроверятьРНН,  						"ПроверятьРНН");
	
	НастройкаЗаполнения.Добавить(СоздаватьНенайденныеЭлементы, "СоздаватьНенайденныеЭлементы");
	НастройкаЗаполнения.Добавить(ГруппаДляНовыхКонтрагентов,  	"ГруппаДляНовыхКонтрагентов");
	
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("НастройкаЗаполнения", НастройкаЗаполнения);
	ПараметрОповещения.Вставить("СоздаватьНенайденныеЭлементы", СоздаватьНенайденныеЭлементы);
	ПараметрОповещения.Вставить("Кодировка", Настр_Кодировка);
	ПараметрОповещения.Вставить("Программа", Настр_Программа);
	
	Оповестить("ИзменениеНастроекЗаполнения", ПараметрОповещения, ЭтаФорма);

	Закрыть(Истина);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	ППИсх_ЗаполнятьДанныеАвтоматически = Форма.ППИсх_ЗаполнятьДанныеАвтоматически;
	Форма.Элементы.ППИсх_УчитыватьКПН.Доступность 							= ППИсх_ЗаполнятьДанныеАвтоматически;
	Форма.Элементы.ППИсх_ПроводитьНовыеДокументы.Доступность  				= ППИсх_ЗаполнятьДанныеАвтоматически;
	Форма.Элементы.ППИсх_СчетУчетаРасчетовСКонтрагентом.Доступность  		= ППИсх_ЗаполнятьДанныеАвтоматически;
	Форма.Элементы.ППИсх_СчетУчетаРасчетовПоАвансам.Доступность  			= ППИсх_ЗаполнятьДанныеАвтоматически;
	Форма.Элементы.ППИсх_СтатьяДвиженияДенежныхСредств.Доступность  		= ППИсх_ЗаполнятьДанныеАвтоматически;
	Форма.Элементы.ППИсх_ВидУчетаНУ.Доступность  		                    = ППИсх_ЗаполнятьДанныеАвтоматически;
	
	УстановитьВидимостьВидУчетаНУ(Форма, "ППИсх_");
	
	ППВх_ЗаполнятьДанныеАвтоматически = Форма.ППВх_ЗаполнятьДанныеАвтоматически;
	Форма.Элементы.ППВх_УчитыватьКПН.Доступность 							= ППВх_ЗаполнятьДанныеАвтоматически;
	Форма.Элементы.ППВх_ПроводитьНовыеДокументы.Доступность 				= ППВх_ЗаполнятьДанныеАвтоматически;
	Форма.Элементы.ППВх_СчетУчетаРасчетовСКонтрагентом.Доступность 			= ППВх_ЗаполнятьДанныеАвтоматически;
	Форма.Элементы.ППВх_СчетУчетаРасчетовПоАвансам.Доступность 				= ППВх_ЗаполнятьДанныеАвтоматически;
	Форма.Элементы.ППВх_СтатьяДвиженияДенежныхСредств.Доступность 			= ППВх_ЗаполнятьДанныеАвтоматически;
	Форма.Элементы.ППВх_ВидУчетаНУ.Доступность 		                    	= ППВх_ЗаполнятьДанныеАвтоматически;
	
	УстановитьВидимостьВидУчетаНУ(Форма, "ППВх_");
	
	ПОСпис_ЗаполнятьДанныеАвтоматически = Форма.ПОСпис_ЗаполнятьДанныеАвтоматически;
	Форма.Элементы.ПОСпис_УчитыватьКПН.Доступность 						  	= ПОСпис_ЗаполнятьДанныеАвтоматически;
	Форма.Элементы.ПОСпис_ПроводитьНовыеДокументы.Доступность 			  	= ПОСпис_ЗаполнятьДанныеАвтоматически;
	Форма.Элементы.ПОСпис_СчетУчетаРасчетовСКонтрагентом.Доступность 		= ПОСпис_ЗаполнятьДанныеАвтоматически;
	Форма.Элементы.ПОСпис_СчетУчетаРасчетовПоАвансам.Доступность 			= ПОСпис_ЗаполнятьДанныеАвтоматически;
	Форма.Элементы.ПОСпис_СтатьяДвиженияДенежныхСредств.Доступность 		= ПОСпис_ЗаполнятьДанныеАвтоматически;
	Форма.Элементы.ПОСпис_ВидУчетаНУ.Доступность 		                    = ПОСпис_ЗаполнятьДанныеАвтоматически;
	
	УстановитьВидимостьВидУчетаНУ(Форма, "ПОСпис_");
	
	ПОПост_ЗаполнятьДанныеАвтоматически = Форма.ПОПост_ЗаполнятьДанныеАвтоматически;
	Форма.Элементы.ПОПост_УчитыватьКПН.Доступность 						 	= ПОПост_ЗаполнятьДанныеАвтоматически;
	Форма.Элементы.ПОПост_ПроводитьНовыеДокументы.Доступность 			  	= ПОПост_ЗаполнятьДанныеАвтоматически;
	Форма.Элементы.ПОПост_СчетУчетаРасчетовСКонтрагентом.Доступность 		= ПОПост_ЗаполнятьДанныеАвтоматически;
	Форма.Элементы.ПОПост_СчетУчетаРасчетовПоАвансам.Доступность 			= ПОПост_ЗаполнятьДанныеАвтоматически;
	Форма.Элементы.ПОПост_СтатьяДвиженияДенежныхСредств.Доступность 		= ПОПост_ЗаполнятьДанныеАвтоматически;
	Форма.Элементы.ПОПост_ВидУчетаНУ.Доступность 		                    = ПОПост_ЗаполнятьДанныеАвтоматически;
	
	УстановитьВидимостьВидУчетаНУ(форма, "ПОПост_");
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьВидУчетаНУ(Форма, Префикс)
	
	Элементы = Форма.Элементы;
	
	УчитыватьКПН = Форма[Префикс + "УчитыватьКПН"];
	
	Элементы[Префикс + "ВидУчетаНУ"].Видимость 		     	= УчитыватьКПН;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьВидУчетаНУ(Форма)
	
	ПустойВидУчетаНУ = Справочники.ВидыУчетаНУ.ПустаяСсылка();
	
	Если Форма.ППИсх_УчитыватьКПН И Форма.ППИсх_ВидУчетаНУ = ПустойВидУчетаНУ Тогда
		ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Форма.ППИсх_УчитыватьКПН, Форма["ППИсх_ВидУчетаНУ"]);		
	КонецЕсли;
	
	Если Форма.ППВх_УчитыватьКПН И Форма.ППВх_ВидУчетаНУ = ПустойВидУчетаНУ Тогда
		ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Форма.ППВх_УчитыватьКПН, Форма["ППВх_ВидУчетаНУ"]);		
	КонецЕсли;
	
	Если Форма.ПОСпис_УчитыватьКПН И Форма.ПОСпис_ВидУчетаНУ = ПустойВидУчетаНУ Тогда
		ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Форма.ПОСпис_УчитыватьКПН, Форма["ПОСпис_ВидУчетаНУ"]);		
	КонецЕсли;
	
	Если Форма.ПОПост_УчитыватьКПН И Форма.ПОПост_ВидУчетаНУ = ПустойВидУчетаНУ Тогда
		ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Форма.ПОПост_УчитыватьКПН, Форма["ПОПост_ВидУчетаНУ"]);		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнятьДанныеАвтоматическиПриИзмененииНаСервере()
	
	ЗаполнитьВидУчетаНУ(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере(Префикс)
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(ЭтаФорма[Префикс + "УчитыватьКПН"], ЭтаФорма[Префикс + "ВидУчетаНУ"]);
	УстановитьВидимостьВидУчетаНУ(ЭтаФорма, Префикс);
	
КонецПроцедуры

#КонецОбласти
