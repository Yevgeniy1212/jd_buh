#Область ПеременныеФормы

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа
		Возврат;
	КонецЕсли;
	
	ВозможностьВыбораФайлов = Истина;
	
	ЗаполнитьЗначенияСвойств(Объект, Параметры);
	
	Если Параметры.Свойство("РежимПоУмолчанию") Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы[Параметры.РежимПоУмолчанию];
	КонецЕсли;
	
	ПодготовитьФормуНаСервере();
	
	// Разбор выписки при открытии КлиентБанка из формы электронного документа.
	Если Параметры.Свойство("ЭлектроннаяВыпискаБанка")
		И ЗначениеЗаполнено(Параметры.ЭлектроннаяВыпискаБанка)
		И ТипЗнч(Параметры.ЭлектроннаяВыпискаБанка) = Тип("ДокументСсылка.СообщениеОбменСБанками") Тогда
		
		СообщениеБанка = Параметры.ЭлектроннаяВыпискаБанка;
		ВыпискиБанка.Добавить(СообщениеБанка);
		//ДатаСообщения = СообщениеБанка.ДатаСообщения;
		//Объект.НачПериода = ДатаСообщения;
		//Объект.КонПериода = ДатаСообщения;
		Объект.НачПериода = СообщениеБанка.ДатаНачала;
		Объект.КонПериода = СообщениеБанка.ДатаОкончания;
		ЭлектроннаяВыпискаБанка = ТекстСсылкиНаЭлектронныеВыписки(Объект.НачПериода, Объект.КонПериода);
		АдресФайлаВыписки = Параметры.АдресФайлаВыписки;
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементовВыбораФайлов(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Для Каждого Настройка Из Настройки Цикл
		Если Настройка.Ключ = "Объект.СтрокаНастроек" Тогда
			Попытка
				Объект.НастройкаЗаполнения = ЗначениеИзСтрокиВнутр(Настройка.Значение);
			Исключение
				Объект.НастройкаЗаполнения.Очистить();
				Объект.НастройкаЗаполнения.Добавить(Истина, "ПроверятьБИН_ИИН");
				Объект.НастройкаЗаполнения.Добавить(Ложь,   "ПроверятьРНН");
			КонецПопытки;
			
			//Получим настройки проверки заполненности реквизитов
			ОбработкаОбъект  = РеквизитФормыВЗначение("Объект");
			ПроверятьРНН     = ОбработкаОбъект.ПолучитьНастройкуЗаполнения(Объект.НастройкаЗаполнения, "ПроверятьРНН");
			ПроверятьБИН_ИИН = ОбработкаОбъект.ПолучитьНастройкуЗаполнения(Объект.НастройкаЗаполнения, "ПроверятьБИН_ИИН");
			
			Если ПроверятьРНН = Неопределено Тогда
				Объект.НастройкаЗаполнения.Добавить(Ложь, "ПроверятьРНН");
			КонецЕсли;
			
			Если ПроверятьБИН_ИИН = Неопределено Тогда
				Объект.НастройкаЗаполнения.Добавить(Истина, "ПроверятьБИН_ИИН");
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("Объект.СтрокаНастроек", ЗначениеВСтрокуВнутр(Объект.НастройкаЗаполнения))
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеОбменСБанками" Тогда
		
		ОбработатьЗавершениеВыгрузкиПрямойОбмен();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеНастроекЗаполнения" Тогда
		Объект.Кодировка = Параметр.Кодировка;
		Объект.Программа = Параметр.Программа;
		Объект.НастройкаЗаполнения = Параметр.НастройкаЗаполнения;
		Объект.СоздаватьНенайденныеЭлементы = Параметр.СоздаватьНенайденныеЭлементы;
		
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ВыпискиБанка.Очистить();
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.СообщениеОбменСБанками")
		И ЗначениеЗаполнено(Объект.СоглашениеПрямогоОбменаСБанками) Тогда
		
		ВыпискиБанка.Добавить(ВыбранноеЗначение);
		МассивВыписок = ВыпискиБанка.ВыгрузитьЗначения();
		АдресФайла    = ПолучитьДанныеВыпискиБанкаВФайл(МассивВыписок);
		
		ПрочитатьФайлВыпискиНаКлиенте(Новый ОписаниеПередаваемогоФайла(,АдресФайла));
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Массив") И ВыбранноеЗначение.Количество() > 0 Тогда
		
		Для Каждого Выписка Из ВыбранноеЗначение Цикл
			
			ВыпискиБанка.Добавить(Выписка);
			
		КонецЦикла;
		
		АдресФайла    = ПолучитьДанныеВыпискиБанкаВФайл(ВыбранноеЗначение);
		ПрочитатьФайлВыпискиНаКлиенте(Новый ОписаниеПередаваемогоФайла(,АдресФайла));
		
	КонецЕсли;
	
	Если ВыпискиБанка.Количество() > 0 Тогда
		
		ЭлектроннаяВыпискаБанка = ТекстСсылкиНаЭлектронныеВыписки(Объект.НачПериода, Объект.КонПериода);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.СписокСчетов.Количество() = 1 Тогда
		БанковскийСчет = Объект.СписокСчетов[0].Значение;
		Элементы.ТаблицаСчетов.ТекущаяСтрока = ИндексСтрокиСчета;
	КонецЕсли;
	
	Если Не ПустаяСтрока(АдресФайлаВыписки) Тогда
		
		Объект.Кодировка = "UTF8";
		ПрочитатьФайлВыпискиНаКлиенте(Новый ОписаниеПередаваемогоФайла(,АдресФайлаВыписки));
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ПодключитьРасширениеРаботыСФайламиИПрочитатьФайл", 0.1, Истина);
	
	НастройкаКлиентБанкаПриОткрытии();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
		
		СтруктурноеПодразделениеОрганизация = Неопределено;
		
	Иначе
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачПериодаПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьСписокПлатежейНаКлиенте", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КонПериодаПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьСписокПлатежейНаКлиенте", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	
	// Запомним предыдущий путь к файлу.
	ТекущийФайлЗагрузки = Объект.ФайлЗагрузки;
	ЗагрузитьНастройкиДляБанковскогоСчета();
	ОбновитьСписокДокументовКИмпорту();
	
	ПодключитьОбработчикОжидания("Подключаемый_ПодключитьРасширениеРаботыСФайламиИПрочитатьФайл", 0.1, Истина);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьИЗагрузитьФайл(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФайлДляПросмотра("Объект.ФайлЗагрузки", Объект.ФайлЗагрузки, Объект.Кодировка, НСтр("ru = 'Файл загрузки'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если НЕ ПустаяСтрока(Текст) Тогда
		Объект.ФайлЗагрузки = СокрЛП(Текст);
		ЗагрузитьВыбранныйФайл(Объект.ФайлЗагрузки, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиПриИзменении(Элемент)
	
	Элементы.ДокументыКИмпортуИнформацияПоСчетам.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьГраницуОбработкиПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяВыпискаБанкаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыпискиБанка.Количество() > 1 Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВыпискиБанка", ВыпискиБанка);
		ПараметрыФормы.Вставить("НачалоПериода", Объект.НачПериода);
		ПараметрыФормы.Вставить("КонецПериода", Объект.КонПериода);
		ОткрытьФорму("Обработка.КлиентБанкСПоддержкойЭД.Форма.ФормаСпискаВыписок", ПараметрыФормы);
		
	ИначеЕсли ВыпискиБанка.Количество() = 1 Тогда
		
		ПараметрыФормы = Новый Структура("СообщениеОбмена", ВыпискиБанка[0].Значение);
		ОткрытьФорму("Документ.СообщениеОбменСБанками.Форма.ЭлектронныйДокумент", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// Установим кнопку по умолчанию.
	ОткрытаСтраницаВыгрузки = (Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаЭкспорт);
	
	Элементы.КнопкаВыгрузить.КнопкаПоУмолчанию = ОткрытаСтраницаВыгрузки;
	Элементы.КнопкаЗагрузить.КнопкаПоУмолчанию = НЕ ОткрытаСтраницаВыгрузки;
	Элементы.КнопкаВыгрузить.Доступность       = ОткрытаСтраницаВыгрузки;
	Элементы.КнопкаЗагрузить.Доступность       = (КоличествоКЗагрузке > 0);
	
	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаСчетов

&НаКлиенте
Процедура ТаблицаСчетовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаСчетов.ТекущиеДанные;
	
	Если Поле.Имя = "ТаблицаСчетовСчет" Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Счет);
		
	ИначеЕсли Поле.Имя = "ТаблицаСчетовНастройкаОбмена" Тогда
		
		Если ТекущиеДанные.ПрямойОбмен Тогда
			СтандартнаяОбработка = Ложь;
			Обработчик = Новый ОписаниеОповещения("ПослеСозданияНастройкиЭДО", ЭтотОбъект);
			ОбменСБанкамиКлиент.ОткрытьСоздатьНастройкуОбмена(
				Объект.Организация,
				ТекущиеДанные.Банк,
				ТекущиеДанные.НомерСчета,
				Обработчик);
		Иначе
			Если ТекущиеДанные.Выгружается Тогда
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ПоказатьИнформациюПрямойОбмен", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовПометкаПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработатьПометкуСчета", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовНастройкаОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВозможностьВыбораФайлов Тогда
		ТекущиеДанные = Элементы.ТаблицаСчетов.ТекущиеДанные;
		ВыборФайлаОбменаСБанком(ТекущиеДанные, "Выгрузка");
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ПодключитьРасширениеРаботыСФайламиИВыбратьФайл", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовНастройкаОбменаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ТаблицаСчетов.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.НастройкаОбмена) Тогда
		ОткрытьФайлДляПросмотра(
			"Объект.ТаблицаСчетов[" + Строка(Элементы.ТаблицаСчетов.ТекущаяСтрока) + "].НастройкаОбмена",
			ТекущиеДанные.НастройкаОбмена, ТекущиеДанные.Кодировка, НСтр("ru = 'Файл выгрузки'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНастройкуПрямойОбменНажатие(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаСчетов.ТекущиеДанные;
	
	Обработчик = Новый ОписаниеОповещения("ПослеСозданияНастройкиЭДО", ЭтотОбъект);
	ОбменСБанкамиКлиент.ОткрытьСоздатьНастройкуОбмена(
		Объект.Организация,
		ТекущиеДанные.Банк,
		ТекущиеДанные.НомерСчета,
		Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура УзнатьПодробнееПрямойОбменНажатие(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗапуститьПриложениеБезОбработкиРезультатаЗавершение",
		ЭтотОбъект);
		
	НачатьЗапускПриложения(ОписаниеОповещения, "http://v8.1c.ru/edi/edi_app/bank/");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыНаЭкспорт

&НаКлиенте
Процедура ДокументыНаЭкспортВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле.Имя = "ДокументыНаЭкспортОписаниеОшибок" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Элемент.ТекущиеДанные.СообщенияОбОшибках);
		
	ИначеЕсли Поле.Имя = "ДокументыНаЭкспортНазначениеПлатежа" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Элемент.ТекущиеДанные.НазначениеПлатежа);
		
	ИначеЕсли Поле.Имя = "ДокументыНаЭкспортКонтрагент" Тогда
		ПоказатьЗначение(,Элемент.ТекущиеДанные.ЭлементКонтрагент);
		
	Иначе
		ПоказатьЗначение(,Элемент.ТекущиеДанные.Документ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаЭкспортПриАктивизацииСтроки(Элемент)
	
	ДанныеСтроки = Элементы.ДокументыНаЭкспорт.ТекущиеДанные;
	Если ДанныеСтроки <> Неопределено Тогда
		Если ДанныеСтроки.Готовность > 0 Тогда
			Элементы.ДекорацияСтатуснаяСтрокаПриВыгрузке.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка: %1'"), СтрЗаменить(ДанныеСтроки.ОписаниеОшибок, Символы.ПС, " "));
		Иначе
			Элементы.ДекорацияСтатуснаяСтрокаПриВыгрузке.Заголовок = НСтр("ru = 'Документ готов к выгрузке!'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаЭкспортПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ТекДанные = Элементы.ДокументыНаЭкспорт.ТекущиеДанные;
	Если Копирование И ТекДанные <> Неопределено Тогда
		НомерСтрокиТаблицыДокументов = ТекДанные.ПолучитьИдентификатор();
		НовыйДок = СоздатьИЗаписатьНовыйДокументНаСервере(НомерСтрокиТаблицыДокументов);
		
		ПоказатьЗначение(,НовыйДок);
	Иначе
		ОткрытьФорму("Документ.ПлатежноеПоручениеИсходящее.ФормаОбъекта", , ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаЭкспортПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущийЭлемент.Имя <> "ДокументыНаЭкспортВыгружать" Тогда
		Отказ = Истина;
		ПоказатьЗначение(,Элемент.ТекущиеДанные.Документ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаЭкспортПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыКИмпорту

&НаКлиенте
Процедура ДокументыКИмпортуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ДокументыКИмпортуОписаниеОшибок" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначенияКлиент.СообщитьПользователю(Элемент.ТекущиеДанные.СообщенияОбОшибках);
		
	ИначеЕсли Поле.Имя = "ДокументыКИмпортуЕстьОшибка" И Элемент.ТекущиеДанные.ЕстьОшибка = Истина Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначенияКлиент.СообщитьПользователю(Элемент.ТекущиеДанные.ОписаниеОшибок);
		
	ИначеЕсли Поле.Имя = "ДокументыКИмпортуНазначениеПлатежа" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначенияКлиент.СообщитьПользователю(Элемент.ТекущиеДанные.НазначениеПлатежа);
		
	ИначеЕсли Поле.Имя = "ДокументыКИмпортуДокумент" И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Документ) Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(,Элемент.ТекущиеДанные.Документ);
		
	ИначеЕсли Поле.Имя = "ДокументыКИмпортуДокумент" И НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Документ) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеВходящее"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств"));
		
		ОписаниеВозможныхТипов = Новый ОписаниеТипов(МассивТипов);
		ПолученноеЗначение = Неопределено;
		
		Оповещение = Новый ОписаниеОповещения("ПослеВводаДокумента", ЭтотОбъект);
		
		ПоказатьВводЗначения(Оповещение, ПолученноеЗначение, НСтр("ru = 'Выберите документ:'"), ОписаниеВозможныхТипов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуПриАктивизацииСтроки(Элемент)
	
	ДанныеСтроки = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	Если ДанныеСтроки <> Неопределено Тогда
		Если ДанныеСтроки.Готовность > 0 Тогда
			Элементы.ДекорацияСтатуснаяСтрокаПриЗагрузке.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка: %1'"), СтрЗаменить(ДанныеСтроки.ОписаниеОшибок, Символы.ПС, " "));
		Иначе
			Элементы.ДекорацияСтатуснаяСтрокаПриЗагрузке.Заголовок = НСтр("ru = 'Документ готов к загрузке!'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуЗагрузитьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Знак = ?(ТекущиеДанные.Загрузить, 1, -1);
	
	КоличествоКЗагрузке     = КоличествоКЗагрузке     + 1 * Знак;
	СуммаПоступилоКЗагрузке = СуммаПоступилоКЗагрузке + ТекущиеДанные.СуммаПриход * Знак;
	СуммаСписаноКЗагрузке   = СуммаСписаноКЗагрузке   + ТекущиеДанные.СуммаРасход * Знак;
	
	УстановитьДоступностьКнопкиЗагрузить(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода", Объект.НачПериода, Объект.КонПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовУстановитьФлажки(Команда)
	
	Для каждого СтрокаСчета из Объект.ТаблицаСчетов Цикл
		СтрокаСчета.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовСнятьФлажки(Команда)
	
	Для каждого СтрокаСчета из Объект.ТаблицаСчетов Цикл
		СтрокаСчета.Пометка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокСчетов(Команда)
	
	// Если есть счета, которые выгружаются, обновить не даем.
	ПроизводитсяВыгрузка = Ложь;
	Для каждого Счет из Объект.ТаблицаСчетов Цикл
		Если Счет.Выгружается Тогда
			ПроизводитсяВыгрузка = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПроизводитсяВыгрузка Тогда
		ОбновитьСписокСчетовНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокСчетовНаСервере()
	
	ЗаполнитьТаблицуСчетов();
	
	// Отмеченные счета сохраняют отметку
	МассивНайденныхСчетов = Новый Массив;
	Для каждого Счет из Объект.ТаблицаСчетов Цикл
		СчетСписка = Объект.СписокСчетов.НайтиПоЗначению(Счет.Счет);
		Если СчетСписка <> Неопределено Тогда
			Счет.Пометка = Истина;
			МассивНайденныхСчетов.Добавить(СчетСписка);
		КонецЕсли;
	КонецЦикла;
	
	МассивНеНайденныхСчетов = Новый Массив;
	Для каждого Счет из Объект.СписокСчетов Цикл
		Если МассивНайденныхСчетов.Найти(Счет) = Неопределено Тогда
			МассивНеНайденныхСчетов.Добавить(Счет);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Счет Из МассивНеНайденныхСчетов Цикл
		Объект.СписокСчетов.Удалить(Счет);
	КонецЦикла;
	
	ОбновитьСписокПлатежей();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайл(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаСчетов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ВозможностьВыбораФайлов Тогда
			ВыборФайлаОбменаСБанком(ТекущиеДанные, "Выгрузка");
		Иначе
			ПодключитьОбработчикОжидания("Подключаемый_ПодключитьРасширениеРаботыСФайламиИВыбратьФайл", 0.1, Истина);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Для выбора файла должна быть выделена строка с банковским счетом.
				|Если список банковских счетов пуст, убедитесь, что в карточке банковского счета включен обмен с банком.'"),
			,
			"Элементы.ТаблицаСчетовСчет");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаСчетов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если Не ТекущиеДанные.ПрямойОбмен И ЗначениеЗаполнено(ТекущиеДанные.НастройкаОбмена) Тогда
			ОткрытьФайлДляПросмотра(
				"Объект.ТаблицаСчетов[" + Строка(Элементы.ТаблицаСчетов.ТекущаяСтрока) + "].НастройкаОбмена",
				ТекущиеДанные.НастройкаОбмена, ТекущиеДанные.Кодировка, НСтр("ru = 'Файл выгрузки'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовУстановитьФлажки(Команда)
	
	Для каждого СтрокаДокумента из Объект.ТаблицаДокументов Цикл
		СтрокаДокумента.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовСнятьФлажки(Команда)
	
	Для каждого СтрокаДокумента из Объект.ТаблицаДокументов Цикл
		СтрокаДокумента.Пометка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаЭкспортУстановитьФлажки(Команда)
	
	Для каждого СтрокаДокумента из ДокументыНаЭкспорт Цикл
		СтрокаДокумента.Выгружать = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаЭкспортСнятьФлажки(Команда)
	
	Для каждого СтрокаДокумента из ДокументыНаЭкспорт Цикл
		СтрокаДокумента.Выгружать = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаЭкспортОбновить(Команда)
	
	ДокументыНаЭкспортОбновитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуОбновить(Команда)
	
	ОбновитьИзВыписки();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуУстановитьФлажки(Команда)
	
	ДокументыКИмпортуУстановитьОтметку(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуСнятьФлажки(Команда)
	
	ДокументыКИмпортуУстановитьОтметку(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуИнформацияПоСчетам(Команда)
	
	ОткрытьФорму("Обработка.КлиентБанкСПоддержкойЭД.Форма.СписокРасчетныхСчетов",
				Новый Структура("Импорт_РасчетныеСчета", Импорт_РасчетныеСчета),
				ЭтаФорма,
				,
				,
				,
				,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗапроситьЭлектроннуюВыпискуБанка(Команда)
	
	ЗапроситьЭлектроннуюВыпискуБанка();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыгрузить(Команда)
	
	Для Каждого Счет Из Объект.ТаблицаСчетов Цикл
		
		Если НЕ Счет.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если Счет.ПрямойОбмен Тогда
			Если Не ЗначениеЗаполнено(Счет.НастройкаОбмена) Тогда
				
				ТекстСоощения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для банковского счета %1 не настроено подключение к сервису 1С:ДиректБанк. Выполните настройку или воспользуйтесь выгрузкой в файл.'"),
					Счет.Счет);
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					ТекстСоощения
					,, Элементы.ТаблицаСчетовНастройкаОбмена.Имя);
					
			Иначе
				
				ВыгрузитьПлатежиПоСчетуПрямойОбмен(Счет.Счет);
				
			КонецЕсли;
		Иначе
			Если Не ЗначениеЗаполнено(Счет.НастройкаОбмена) Тогда
				
				Если ВозможностьВыбораФайлов Тогда
					ВыборФайлаПриВыгрузке(Счет);
				Иначе
					ПодключитьРасширениеРаботыСФайламиИВыбратьФайлПриВыгрузке(Счет);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ВыгрузитьНаСервере();
	
	ПодключитьОбработчикОжидания("ОбработатьЗавершениеВыгрузки", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузить(Команда)
	
	ВыполненаЗагрузка = Истина;
	
	РезультатЗагрузки = ЗагрузкаВыпискиНаСервере();
	
	Если НЕ РезультатЗагрузки.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияЗагрузкаВыписки", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
		
		ИдентификаторЗадания    = РезультатЗагрузки.ИдентификаторЗадания;
		АдресХранилища          = РезультатЗагрузки.АдресХранилища;
	Иначе
		АктуализироватьДокументыКИмпорту(АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНастройка(Команда)
	
	ОткрытьФорму("Обработка.КлиентБанкСПоддержкойЭД.Форма.ФормаНастройкиЗаполнения",
				Новый Структура("НастройкаЗаполнения, Кодировка, Программа",
					Объект.НастройкаЗаполнения, Объект.Кодировка, Объект.Программа)
				,
				ЭтаФорма,
				,
				,
				,
				,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьИПрочитатьФайл(Команда)
	
	ОбновитьИзВыписки();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьЗагружаемыйФайл(Элемент)
	
	ОткрытьФайлДляПросмотра(
		"Объект.ФайлЗагрузки",
		Объект.ФайлЗагрузки,
		Объект.Кодировка,
		НСтр("ru = 'Файл загрузки'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтчетОВыгрузке(Команда)
	
	ПолеОтчета = ПолучитьОтчетОВыгрузке();
	Если ПолеОтчета <> Неопределено Тогда
		ПолеОтчета.Показать(НСтр("ru = 'Отчет о выгруженных платежах'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтчетПоЗагрузке(Команда)
	
	ПолеОтчета = Новый ТабличныйДокумент;
	ПечатьОтчетаНаСервере(ПолеОтчета);
	ПолеОтчета.ТолькоПросмотр = Истина;
	ПолеОтчета.Показать(НСтр("ru = 'Отчет о загруженных документах'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНенайденное(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	АдресХранилищаКонтрагентов = АдресВременногоХранилищаДереваКонтрагентов();
	ПараметрыФормы.Вставить("АдресХранилищаКонтрагентов", АдресХранилищаКонтрагентов);
	ПараметрыФормы.Вставить("СтруктураНастроек",          Объект.НастройкаЗаполнения);
	ПараметрыФормы.Вставить("Организация",                Объект.Организация);
	ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьНенайденноеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.КлиентБанкСПоддержкойЭД.Форма.ФормаСозданиеНенайденных", ПараметрыФормы,,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПроведения(Команда)
	
	ТекущиеДанные = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда
		ПараметрыФормы = Новый Структура("ДокументСсылка", ТекущиеДанные.Документ);
		ОткрытьФорму("Обработка.КорректировкаДвижений.Форма",
			ПараметрыФормы,
			Команда,
			Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибки(Команда)
	
	Элементы.ДокументыКИмпортуПоказатьОшибки.Пометка = НЕ Элементы.ДокументыКИмпортуПоказатьОшибки.Пометка;
	
	ПоказатьОшибкиИмпорта = Элементы.ДокументыКИмпортуПоказатьОшибки.Пометка;
	ПоказатьОшибкиНаСервере(ПоказатьОшибкиИмпорта);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкиВыгрузки(Команда)
	
	Элементы.ДокументыНаЭкспортПоказатьОшибкиВыгрузки.Пометка = НЕ Элементы.ДокументыНаЭкспортПоказатьОшибкиВыгрузки.Пометка;
	
	ПоказатьОшибкиЭкспорта = Элементы.ДокументыНаЭкспортПоказатьОшибкиВыгрузки.Пометка;
	ПоказатьОшибкиВыгрузкиНаСервере(ПоказатьОшибкиЭкспорта);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьНомерСчета(Знач БанковскийСчет)
	
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "НомерСчета");
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	НастройкиУсловногоОформления = Новый Структура();
	
	УсловноеОформление.Элементы.Очистить();
	
	// Условное оформление, связанное с видимостью, устанавливаем сразу для всех колонок.
	УстановитьУсловноеОформлениеВидимость();
	
	// Условное оформление для полей, расположенных на страницах
	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(Форма)
	
	Элементы = Форма.Элементы;
	
	Если НЕ Форма.НастройкиУсловногоОформления.Свойство("ВыгрузкаПроинициализировано")
		И Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаЭкспорт Тогда
		
		Форма.УстановитьУсловноеОформлениеВыгрузка();
		
	ИначеЕсли НЕ Форма.НастройкиУсловногоОформления.Свойство("ЗагрузкаПроинициализировано")
		И Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаИмпорт Тогда
		
		Форма.УстановитьУсловноеОформлениеЗагрузка();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВидимость()
	
	// ДокументыНаЭкспортОписаниеОшибок
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыНаЭкспортОписаниеОшибок");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"ДокументыНаЭкспорт.ОписаниеОшибок",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"ПоказатьОшибкиЭкспорта",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
		
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// ДокументыКИмпортуДокументНеЗагружен
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуДокументНеЗагружен");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Документ",
		ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// ДокументыКИмпортуДокумент
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуДокумент");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Документ",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// ДокументыКИмпортуСтатьяДДС
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуСтатьяДДС");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ИспользоватьСтатьиДДС",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// ДокументыКИмпортуОписаниеОшибок
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуОписаниеОшибок");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"ДокументыКИмпорту.ОписаниеОшибок",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"ПоказатьОшибкиИмпорта",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
		
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВыгрузка() Экспорт
	
	НастройкиУсловногоОформления.Вставить("ВыгрузкаПроинициализировано", Истина);
	
	// Настройка ЭДО не указана
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаСчетовНастройкаОбмена.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаСчетов.ПрямойОбмен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаСчетов.НастройкаОбмена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<1С:ДиректБанк не настроен. Создать настройку>'"));
	
	// Видимость предупреждения о возможности прямого обмена
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаСчетовЕстьВозможностьПрямогоОбмена.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаСчетов.ПрямойОбмен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаСчетов.НастройкаОбмена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Настройка прямого обмена не редактируется
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаСчетовНастройкаОбмена.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаСчетов.ПрямойОбмен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Возможна выгрузка данных по счету
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаСчетовКВыгрузке.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаСчетов.Выгружается");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаСчетов.Выгружен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='К выгрузке'"));
	
	// Производится выгрузка данных по счету
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаСчетовКВыгрузке.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаСчетов.Выгружается");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Выгружается...'"));
	
	// Выгрузка данных по счету завершена
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаСчетовКВыгрузке.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаСчетов.Выгружен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Выгружен'"));
	
	// Есть ошибка, препятствующая выгрузке документа
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументыНаЭкспорт.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДокументыНаЭкспорт.ЕстьОшибка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеЗагрузка() Экспорт
	
	НастройкиУсловногоОформления.Вставить("ЗагрузкаПроинициализировано", Истина);
	
	// ДокументыКИмпортуДокументНеЗагружен
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуДокументНеЗагружен");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Документ",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не загружен'"));
	
	// ДокументыКИмпортуДокумент, ДокументыКИмпортуДокументНеЗагружен
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуДокумент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуДокументНеЗагружен");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Готовность",
		ВидСравненияКомпоновкиДанных.Равно,
		0);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Документ",
		ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаТабличнойЧасти);
	
	// ДокументыКИмпортуДокумент, ДокументыКИмпортуДокументНеЗагружен
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуДокумент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуДокументНеЗагружен");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Готовность",
		ВидСравненияКомпоновкиДанных.Равно,
		0);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Документ",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// ДокументыКИмпортуДокумент, ДокументыКИмпортуДокументНеЗагружен
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуДокумент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуДокументНеЗагружен");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Готовность", 
		ВидСравненияКомпоновкиДанных.Больше, 
		0);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийПроблемуТекст);
	
	// ДокументыКИмпортуКонтрагент
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуКонтрагент");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.КонтрагентОтображениеНенайденного",
		ВидСравненияКомпоновкиДанных.Содержит,
		НСтр("ru = 'Не найден'"));
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийПроблемуТекст);
	
	// ДокументыКИмпортуКонтрагент
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуКонтрагент");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.КонтрагентОтображениеНенайденного",
		ВидСравненияКомпоновкиДанных.Содержит,
		НСтр("ru = 'Не загружен'"));
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// ДокументыКИмпортуКонтрагент
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуКонтрагент");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Готовность",
		ВидСравненияКомпоновкиДанных.Больше,
		0);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.КонтрагентОтображениеНенайденного",
		ВидСравненияКомпоновкиДанных.Содержит,
		НСтр("ru = 'Не указаны реквизиты контрагента'"));
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийПроблемуТекст);
	
	// ДокументыКИмпортуКонтрагент
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуКонтрагент");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Контрагент",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.КонтрагентОтображениеНенайденного",
		ВидСравненияКомпоновкиДанных.Заполнено);
			
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Документ",
		ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста",  ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// ДокументыКИмпортуКонтрагент
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуКонтрагент");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Контрагент",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.КонтрагентОтображениеНенайденного",
		ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("ДокументыКИмпорту.КонтрагентОтображениеНенайденного"));
	
	// ДокументыКИмпортуСчетКонтрагента
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуСчетКонтрагента");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.СчетКонтрагента",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.СчетКонтрагентаОтображениеНенайденного",
		ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("ДокументыКИмпорту.СчетКонтрагентаОтображениеНенайденного"));
	
	// ДокументыКИмпортуСчетКонтрагента
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуСчетКонтрагента");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.СчетКонтрагентаОтображениеНенайденного",
		ВидСравненияКомпоновкиДанных.Содержит,
		НСтр("ru = 'Не найден'"));
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийПроблемуТекст);
	
	// ДокументыКИмпортуСчетКонтрагента
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуСчетКонтрагента");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.СчетКонтрагентаОтображениеНенайденного",
		ВидСравненияКомпоновкиДанных.Содержит,
		НСтр("ru = 'Не загружен'"));
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуСчетКонтрагента");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.СчетКонтрагентаОтображениеНенайденного",
		ВидСравненияКомпоновкиДанных.Равно,
		НСтр("ru = 'Не указаны реквизиты расчетного счета'"));
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийПроблемуТекст);
	
	// ДокументыКИмпортуСчетКонтрагента
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуСчетКонтрагента");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.СчетКонтрагента",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.СчетКонтрагентаОтображениеНенайденного",
		ВидСравненияКомпоновкиДанных.Заполнено);
			
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Документ",
		ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста",  ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// ДокументыКИмпортуСчетКонтрагента
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуСчетКонтрагента");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Контрагент",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// ДокументыКИмпортуНомерДок
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуНомерДок");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Готовность",
		ВидСравненияКомпоновкиДанных.Больше,
		0);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.НомерДокументаНекорректен",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийПроблемуТекст);
	
	// ДокументыКИмпортуВидОперации
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуВидОперации");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуКонтрагент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуСчетКонтрагента");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуСтатьяДДС");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"ДокументыКИмпорту.Документ",
		ВидСравненияКомпоновкиДанных.Заполнено);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"ВыполненаЗагрузка",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
		
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	ЕстьВозможностьПрямогоОбмена = Ложь;
	Для каждого Счет из Объект.ТаблицаСчетов Цикл
		Если Не Счет.ПрямойОбмен И Счет.ЕстьВозможностьПрямогоОбмена Тогда
			ЕстьВозможностьПрямогоОбмена = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Элементы.ТаблицаСчетовЕстьВозможностьПрямогоОбмена.Видимость = ЕстьВозможностьПрямогоОбмена;
	
	ЕстьОшибкиПлатежей = Ложь;
	Отбор = Новый Структура("ЕстьОшибка", Истина);
	НайденныеСтроки = ДокументыНаЭкспорт.НайтиСтроки(Отбор);
	ЕстьОшибкиПлатежей = Булево(НайденныеСтроки.Количество());
	Элементы.ДекорацияСтатуснаяСтрокаПриВыгрузке.Видимость = ЕстьОшибкиПлатежей;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСчетов()
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Обработка.ЗаполнитьТаблицуСчетовВыгрузки();
	ЗначениеВРеквизитФормы(Обработка, "Объект");
	
	МассивСчетов = Объект.ТаблицаСчетов.Выгрузить().ВыгрузитьКолонку("Счет");
	ДополнитьТаблицуСчетовКоличествомДокументовКВыгрузке(МассивСчетов);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьТаблицуСчетовКоличествомДокументовКВыгрузке(МассивСчетов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеДокумента.СчетОрганизации КАК БанковскийСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеДокумента.Ссылка) КАК Количество
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|	И НЕ ДанныеДокумента.Оплачено
	|	И ДанныеДокумента.СчетОрганизации В (&МассивСчетов)
	|	И ДанныеДокумента.ДатаВыписки МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.СчетОрганизации
	|";
	
	Запрос.УстановитьПараметр("МассивСчетов",  МассивСчетов);
	Запрос.УстановитьПараметр("ДатаНачала",    НачалоДня(Объект.НачПериода));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Объект.КонПериода));
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Таблица = Результат.Выгрузить();
	Таблица.Свернуть("БанковскийСчет", "Количество");
	
	Для каждого Счет из Объект.ТаблицаСчетов Цикл
		СтрокаКоличества = Таблица.Найти(Счет.Счет, "БанковскийСчет");
		Если СтрокаКоличества <> Неопределено Тогда
			Счет.КВыгрузке = СтрокаКоличества.Количество;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокПлатежейНаКлиенте()
	ОбновитьСписокПлатежей();
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокПлатежей()
	
	ЗаполнитьДокументыНаЭкспорт();
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИнформациюПрямойОбмен()
	
	ТекущиеДанные = Элементы.ТаблицаСчетов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ПрямойОбмен И ТекущиеДанные.ЕстьВозможностьПрямогоОбмена Тогда
		Элементы.ГруппаИнформация.Видимость = Истина;
		Элементы.БанкПрямойОбмен.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 поддерживает прямой обмен'"), Строка(ТекущиеДанные.Банк));
	Иначе
		Элементы.ГруппаИнформация.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПометкуСчета()
	
	Объект.СписокСчетов.Очистить();
	Для каждого Счет из Объект.ТаблицаСчетов Цикл
		Если Счет.Пометка Тогда
			Объект.СписокСчетов.Добавить(Счет.Счет);
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьСписокПлатежей();
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	Если Объект.Организация.Пустая() Тогда
		ВыборкаОрганизаций = ПолучитьВыборкуОрганизаций();
		Если ВыборкаОрганизаций.Следующий() Тогда
			Объект.Организация = ВыборкаОрганизаций.Организация;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ЗаполнитьТаблицуСчетов();
	КонецЕсли;
	
	Если Параметры.Свойство("БанковскийСчет")
		И ЗначениеЗаполнено(Параметры.БанковскийСчет) Тогда
		
		СтрокиТаблицы = Объект.ТаблицаСчетов.НайтиСтроки(Новый Структура("Ссылка", Параметры.БанковскийСчет));
		Если СтрокиТаблицы.Количество() Тогда
			СтрокиТаблицы[0].Пометка = Истина;
			Объект.СписокСчетов.Добавить(СтрокиТаблицы[0].Ссылка);
			ОбновитьСписокПлатежей();
			ИндексСтрокиСчета = Объект.ТаблицаСчетов.Индекс(СтрокиТаблицы[0]);
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполним настройки заполнения по умолчанию, позже они могут быть заменены сохраненными настройками.
	Если Объект.НастройкаЗаполнения.Количество() = 0 Тогда
		Объект.НастройкаЗаполнения.Добавить(Истина, "ПроверятьБИН_ИИН");
		Объект.НастройкаЗаполнения.Добавить(Ложь,   "ПроверятьРНН");
	КонецЕсли;
	
	Объект.НачПериода = ОбщегоНазначения.ТекущаяДатаПользователя();
	Объект.КонПериода = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	УстановитьВидимостьРеквизитовСтруктурногоПодразделения();
	
	РасширениеЭкспорта = "txt";
	Импорт_ТекстДляРазбора = "";
	
	Элементы.ДокументыКИмпортуПоказатьОшибки.Доступность   = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Форма.Элементы.ДатаГраницыОбработки.Доступность = Форма.Объект.ИспользоватьГраницуОбработки;
	
	Форма.Элементы.ДокументыКИмпортуИнформацияПоСчетам.Доступность = (Форма.Импорт_РасчетныеСчета.Количество() > 0);
	Форма.Элементы.ДекорацияЗагружаемыйФайл.Доступность            = ЗначениеЗаполнено(Форма.Объект.ФайлЗагрузки);
	
	// Установим кнопку по умолчанию.
	ОткрытаСтраницаВыгрузки = (Форма.Элементы.Страницы.ТекущаяСтраница = Форма.Элементы.ГруппаЭкспорт);
	
	Форма.Элементы.КнопкаВыгрузить.КнопкаПоУмолчанию = ОткрытаСтраницаВыгрузки;
	Форма.Элементы.КнопкаВыгрузить.Доступность       = ОткрытаСтраницаВыгрузки;
	Форма.Элементы.КнопкаЗагрузить.КнопкаПоУмолчанию = НЕ ОткрытаСтраницаВыгрузки;
	Форма.Элементы.КнопкаЗагрузить.Доступность       = (Форма.КоличествоКЗагрузке > 0);
	
	Если Форма.ДокументыКИмпорту.Количество() > 0 Тогда
		Форма.Элементы.ДекорацияСтатуснаяСтрокаПриЗагрузке.Заголовок = "";
	КонецЕсли;
	
	Форма.Элементы.ДокументыКИмпортуСоздатьНенайденное.Видимость = НЕ Форма.Объект.СоздаватьНенайденныеЭлементы;
	
	УстановитьВидимостьЭлементовВыбораФайлов(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКнопкиЗагрузить(Форма)
	
	Элементы = Форма.Элементы;
	Элементы.КнопкаЗагрузить.Доступность = (Форма.КоличествоКЗагрузке > 0);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРеквизитовСтруктурногоПодразделения()
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
		
	Если  ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Если Не ЗначениеЗаполнено(Объект.СтруктурноеПодразделение)Тогда
			СтруктурноеПодразделениеОрганизация = Объект.Организация;
		Иначе
			СтруктурноеПодразделениеОрганизация = ?(ЗначениеЗаполнено(Объект.СтруктурноеПодразделение), Объект.СтруктурноеПодразделение, Объект.Организация);
		КонецЕсли;	
		
		РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, Истина);
		РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, Истина);
	
	Иначе 
		РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Справочники.ПодразделенияОрганизаций.ПустаяСсылка(), СтруктурноеПодразделениеОрганизация, Ложь);
		РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Справочники.ПодразделенияОрганизаций.ПустаяСсылка(), Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ПараметрыФО = Новый Структура();
	ПараметрыФО.Вставить("Организация", Объект.Организация);
	Если Объект.НачПериода <> Неопределено Тогда
		ПараметрыФО.Вставить("Период", НачалоМесяца(Объект.НачПериода));
		// Приводим к началу месяца для того, чтобы сократить пространство кэшируемых значений.
		// Параметр "Организация" используется в функциональных опциях, привязанных к регистрам сведений с периодичностью Месяц или реже.
	КонецЕсли;
	
	ЭтаФорма.УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКлиентБанкаПриОткрытии()
	
	Если НЕ ЗначениеЗаполнено(Объект.ФайлЗагрузки) Тогда
		РабочийКаталогВыгрузки = РаботаСФайламиСлужебныйКлиент.КаталогВыгрузки();
		Если РабочийКаталогВыгрузки = Неопределено Тогда
			РабочийКаталогВыгрузки = "";
		КонецЕсли;
		Объект.ФайлЗагрузки = РабочийКаталогВыгрузки + "kl_to_1c.txt";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Кодировка) Тогда
		Объект.Кодировка = "UTF8";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьЭлементовВыбораФайлов(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.ЭлектроннаяВыпискаБанка.Видимость  = ЗначениеЗаполнено(Объект.СоглашениеПрямогоОбменаСБанками);
	Если ЗначениеЗаполнено(Объект.СоглашениеПрямогоОбменаСБанками) Тогда
		Элементы.СтраницыВыборВыписки.ТекущаяСтраница = Элементы.ВыпискаПоПрямомуОбмену;
	ИначеЕсли Форма.ВозможностьВыбораФайлов Тогда
		Элементы.СтраницыВыборВыписки.ТекущаяСтраница = Элементы.ВыпискаИзФайлаСРасширением;
	Иначе
		Элементы.СтраницыВыборВыписки.ТекущаяСтраница = Элементы.ВыпискаИзФайлаБезРасширения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Параметры)
	
	СтруктураРезультатаВыполнения = Неопределено;
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
	
	ОбновитьСписокДокументовКИмпорту();
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаИмпорт Тогда
		ОбновитьИзВыписки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта")
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииНаСервере(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииНаСервере(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если Не СтруктураПараметров.ИзмененаОрганизация И Не СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьФункциональныеОпцииФормы();
	
	ЗаполнитьТаблицуСчетов();
	
	ДокументыНаЭкспорт.Очистить();
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаЭкспорт Тогда
		ЗаполнитьДокументыНаЭкспорт();
	КонецЕсли;
	
	Попытка
		ОбъектОрганизация = Объект.Организация.ПолучитьОбъект();
		НетОбъектаОрганизации = Ложь;
	Исключение
		НетОбъектаОрганизации = Истина;
	КонецПопытки;
	
	Если НетОбъектаОрганизации ИЛИ Объект.Организация.Пустая() Тогда
		ВыборкаОрганизаций = ПолучитьВыборкуОрганизаций();
		Если ВыборкаОрганизаций.Следующий() Тогда
			Объект.Организация = ВыборкаОрганизаций.Организация;
		КонецЕсли;
	КонецЕсли;
	
	Объект.БанковскийСчет = Неопределено;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.БанковскийСчет = Справочники.БанковскиеСчета.БанковскийСчетОрганизацииПоУмолчанию(Объект.Организация);
	КонецЕсли;
	
	ЗагрузитьНастройкиДляБанковскогоСчета();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВыборкуОрганизаций() Экспорт
	
	ЗапросПоОрганизациям = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|");
	
	Возврат ЗапросПоОрганизациям.Выполнить().Выбрать();
	
КонецФункции

&НаСервере
Процедура ДокументыНаЭкспортОбновитьНаСервере()
	
	ЗаполнитьДокументыНаЭкспорт();
	
КонецПроцедуры

&НаСервере
Функция СоздатьИЗаписатьНовыйДокументНаСервере(НомерСтрокиТаблицыДокументов)
	
	ТекСтрока = ДокументыНаЭкспорт.НайтиПоИдентификатору(НомерСтрокиТаблицыДокументов);
	
	Если НЕ ЗначениеЗаполнено(ТекСтрока.Документ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйДокумент = ТекСтрока.Документ.Скопировать();
	
	НовыйДокумент.Заполнить(ТекСтрока.Документ);
	НовыйДокумент.Записать();
	
	Возврат НовыйДокумент.Ссылка;
	
КонецФункции

&НаКлиенте
Процедура ВыборФайлаДляВыгрузкиИЗагрузки(Элемент, Режим) Экспорт
	
	ПозицияНачалоИмяФайла = СтрНайти(Элемент.ТекстРедактирования,"\");
	ИмяФайла              = Сред(Элемент.ТекстРедактирования, ПозицияНачалоИмяФайла + 1);
	ИмяФайла              = ?(ПустаяСтрока(ИмяФайла), ?(Режим = "выгрузки", "1c_to_kl." + РасширениеЭкспорта, "kl_to_1c.txt"), ИмяФайла);
	ПолныйКаталогВыгрузки = Лев(Элемент.ТекстРедактирования, ПозицияНачалоИмяФайла);
	ПолныйКаталогВыгрузки = ?(ПустаяСтрока(ПолныйКаталогВыгрузки), РаботаСФайламиСлужебныйКлиент.КаталогВыгрузки(), ПолныйКаталогВыгрузки);
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	Если Режим = "выгрузки" И Объект.ВыгружатьВXMLФормате Тогда
		ДиалогВыбора.Фильтр = НСтр("ru = 'XML документ'") + "(*.xml)|*.xml";
	Иначе
		ДиалогВыбора.Фильтр = НСтр("ru = 'Текстовый файл'") + " (*.txt)|*.txt";
	КонецЕсли;
	
	ДиалогВыбора.Заголовок                   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Выберите файл для %1 данных из клиента банка'"), Режим);
	ДиалогВыбора.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбора.Расширение                  = "txt";
	ДиалогВыбора.ИндексФильтра               = 0;
	ДиалогВыбора.ПолноеИмяФайла              = ИмяФайла;
	ДиалогВыбора.Каталог                     = ПолныйКаталогВыгрузки;
	ДиалогВыбора.ПроверятьСуществованиеФайла = Ложь;
	
	Если ДиалогВыбора.Выбрать() Тогда
		Если Режим = НСтр("ru = 'загрузки'") Тогда
			Объект.ФайлЗагрузки = ДиалогВыбора.ПолноеИмяФайла;
			
			Оповестить("ВыбранФайлЗагрузки");
		Иначе
			Объект.ФайлВыгрузки = ДиалогВыбора.ПолноеИмяФайла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаДокумента(ВыбранныйДокумент, Параметры) Экспорт
	
	Если ВыбранныйДокумент <> Неопределено Тогда
		
		ТекущиеДанные = Элементы.ДокументыКИмпорту.ТекущиеДанные;
		ТекущиеДанные.Документ = ВыбранныйДокумент;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПечатьОтчетаНаСервере(ПолеОтчета)
	
	ИсточникТЗ = ДокументыКИмпорту.Выгрузить();
	
	Обработки.КлиентБанкСПоддержкойЭД.ПечатьОтчетаОЗагруженныхПлатежныхДокументах(ПолеОтчета, ИсточникТЗ);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОшибкуВЖурнал(ТекстСообщения, ОписаниеОшибки)
	
	ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
	
КонецПроцедуры

#Область ОбработкаСобытийДокументыКИмпорту

&НаСервере
Процедура ДокументыКИмпортуУстановитьОтметку(Отметка)
	
	Для каждого СтрокаДокумента Из ДокументыКИмпорту Цикл
		СтрокаДокумента.Загрузить = Отметка;
	КонецЦикла;
	
	ДокументыКИмпортуОбновитьИтогиВПодвале();
	УстановитьДоступностьКнопкиЗагрузить(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьОшибкиНаСервере(Включить)
	
	Если Включить Тогда
		ОтборОшибок = Новый Структура("ЕстьОшибка", Истина);
		Элементы.ДокументыКИмпорту.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборОшибок);
	Иначе
		Элементы.ДокументыКИмпорту.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьОшибкиВыгрузкиНаСервере(Включить)
	
	Если Включить Тогда
		ОтборОшибок = Новый Структура("ЕстьОшибка", Истина);
		Элементы.ДокументыНаЭкспорт.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборОшибок);
	Иначе
		Элементы.ДокументыНаЭкспорт.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаВБанк

&НаСервере
Процедура ЗаполнитьДокументыНаЭкспорт()
	
	РеквизитФормыВЗначение("Объект").ЗаполнитьДокументыНаЭкспорт(ДокументыНаЭкспорт,
													Объект.НачПериода,
													Объект.КонПериода,
													Объект.Организация,
													Объект.СтруктурноеПодразделение,
													Объект.ТаблицаСчетов,
													Объект.НастройкаЗаполнения);
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьДокументы()
	
	Возврат РеквизитФормыВЗначение("Объект").Выгрузить(ДокументыНаЭкспорт.Выгрузить(),
									Объект.ВыгружатьВXMLФормате,
									Объект.Кодировка,
									Объект.КлиентБанка,
									Объект.ТаблицаСчетов,
									Объект.ТаблицаДокументов,
									Объект.ФайлВыгрузки,
									Объект.НачПериода,
									Объект.КонПериода,
									Объект.Организация,
									Объект.СтруктурноеПодразделение,
									Объект.НастройкаЗаполнения,
									УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьПлатежиПоСчетуПрямойОбмен(БанковскийСчет)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Выгружать", Истина);
	Отбор.Вставить("СчетОрганизации", БанковскийСчет);
	
	МассивДокументов = Новый Массив;
	
	СтрокиКВыгрузке = ДокументыНаЭкспорт.НайтиСтроки(Отбор);
	Для каждого СтрокаКВыгрузке из СтрокиКВыгрузке Цикл
		МассивДокументов.Добавить(СтрокаКВыгрузке.Документ);
	КонецЦикла;
	
	Если МассивДокументов.Количество() Тогда
		Обработчик = Новый ОписаниеОповещения("СформироватьПодписатьОтправитьЭДПродолжение", ЭтотОбъект, Новый Структура);
		ЭлектронноеВзаимодействиеКлиентПереопределяемый.ВыполнитьПроверкуПроведенияДокументов(МассивДокументов, Обработчик, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьНаСервере()
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Обработка.ВыгрузитьПлатежи(ЭтаФорма.УникальныйИдентификатор, ДокументыНаЭкспорт);
	ЗначениеВРеквизитФОрмы(Обработка, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПодписатьОтправитьЭДПродолжение(МассивДокументов, Результат) Экспорт
	
	Если ЗначениеЗаполнено(МассивДокументов) Тогда
		ОбменСБанкамиКлиент.СформироватьПодписатьОтправитьЭД(МассивДокументов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОтчетОВыгрузке()
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Возврат Обработка.ПечатьОтчетаОВыгрузке(Истина);
	
КонецФункции

&НаСервере
Процедура ОбработатьЗавершениеВыгрузкиПрямойОбмен()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(СостоянияОбменСБанками.СсылкаНаОбъект) = ТИП(Документ.ПлатежноеПоручениеВходящее) ТОГДА
	|		ВЫРАЗИТЬ(СостоянияОбменСБанками.СсылкаНаОбъект КАК Документ.ПлатежноеПоручениеВходящее).СчетОрганизации
	|	КОГДА ТИПЗНАЧЕНИЯ(СостоянияОбменСБанками.СсылкаНаОбъект) = ТИП(Документ.ПлатежноеПоручениеИсходящее) ТОГДА
	|		ВЫРАЗИТЬ(СостоянияОбменСБанками.СсылкаНаОбъект КАК Документ.ПлатежноеПоручениеИсходящее).СчетОрганизации
	|	КОНЕЦ КАК Счет
	|
	|ИЗ
	|	РегистрСведений.СостоянияОбменСБанками КАК СостоянияОбменСБанками
	|	
	|ГДЕ
	|	СостоянияОбменСБанками.СсылкаНаОбъект В (&МассивОбъектов)
	|	И СостоянияОбменСБанками.Состояние В (
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ОжидаетсяИсполнение)
	|	)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(СостоянияОбменСБанками.СсылкаНаОбъект) = ТИП(Документ.ПлатежноеПоручениеВходящее) ТОГДА
	|		ВЫРАЗИТЬ(СостоянияОбменСБанками.СсылкаНаОбъект КАК Документ.ПлатежноеПоручениеВходящее).СчетОрганизации
	|	КОГДА ТИПЗНАЧЕНИЯ(СостоянияОбменСБанками.СсылкаНаОбъект) = ТИП(Документ.ПлатежноеПоручениеИсходящее) ТОГДА
	|		ВЫРАЗИТЬ(СостоянияОбменСБанками.СсылкаНаОбъект КАК Документ.ПлатежноеПоручениеИсходящее).СчетОрганизации
	|	КОНЕЦ
	|	
	|;
	|///////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	СостоянияОбменСБанками.СсылкаНаОбъект КАК Ссылка,
	|	СостоянияОбменСБанками.Состояние КАК Состояние,
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(СостоянияОбменСБанками.СсылкаНаОбъект) = ТИП(Документ.ПлатежноеПоручениеВходящее) ТОГДА
	|		ВЫРАЗИТЬ(СостоянияОбменСБанками.СсылкаНаОбъект КАК Документ.ПлатежноеПоручениеВходящее).СчетОрганизации
	|	КОГДА ТИПЗНАЧЕНИЯ(СостоянияОбменСБанками.СсылкаНаОбъект) = ТИП(Документ.ПлатежноеПоручениеИсходящее) ТОГДА
	|		ВЫРАЗИТЬ(СостоянияОбменСБанками.СсылкаНаОбъект КАК Документ.ПлатежноеПоручениеИсходящее).СчетОрганизации
	|	КОНЕЦ КАК Счет
	|ИЗ
	|	РегистрСведений.СостоянияОбменСБанками КАК СостоянияОбменСБанками
	|ГДЕ
	|	СостоянияОбменСБанками.СсылкаНаОбъект В (&МассивОбъектов)
	|	И СостоянияОбменСБанками.Состояние В (
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.ОжидаетсяИсполнение)
	|	)
	|";
	
	МассивОбъектов = ДокументыНаЭкспорт.Выгрузить(
		ДокументыНаЭкспорт.НайтиСтроки(Новый Структура("Выгружать", Истина)),
		"Документ").ВыгрузитьКолонку("Документ");
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДокументов = Результат[1].Выгрузить();
	
	МассивСчетов = Новый Массив;
	Выборка = Результат[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		Строки = Объект.ТаблицаСчетов.НайтиСтроки(Новый Структура("Счет", Выборка.Счет));
		Для Каждого СтрокаТЧ Из Строки Цикл
			СтрокаТЧ.Выгружен = Истина;
			МассивСчетов.Добавить(Выборка.Счет);
			
			МассивСтрок = Новый Массив;
			СсылкиНаДокументы = ТаблицаДокументов.НайтиСтроки(Новый Структура("Счет", Выборка.Счет));
			Для Каждого СсылкаНаДокумент Из СсылкиНаДокументы Цикл
				Строки = ДокументыНаЭкспорт.НайтиСтроки(Новый Структура("Документ", СсылкаНаДокумент.Ссылка));
				Для каждого СтрокаДокумента Из Строки Цикл
					МассивСтрок.Добавить(СтрокаДокумента);
				КонецЦикла;
			КонецЦикла;
			
			СтрокаТЧ.АдресХранилищаДокументов =
				ПоместитьВоВременноеХранилище(ДокументыНаЭкспорт.Выгрузить(МассивСтрок), ЭтаФорма.УникальныйИдентификатор);
		КонецЦикла;
	КонецЦикла;
	
	ДополнитьТаблицуСчетовКоличествомДокументовКВыгрузке(МассивСчетов);
	
	УстановитьВидимость();
	
КонецПроцедуры

#КонецОбласти

////////////// ЗАГРУЗКА //////////////////////////////////////////////////

&НаСервере
Функция ЗагрузитьПодготовленныеДанные(АдресХранилища)
	
	СтруктураДанныхНаКлиенте = Новый Структура();
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат СтруктураДанныхНаКлиенте;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ДокументыКИмпорту")
		И ЗначениеЗаполнено(Объект.БанковскийСчет)
		И Не ЗначениеЗаполнено(Объект.СоглашениеПрямогоОбменаСБанками) Тогда
		ДокументыКИмпорту.Очистить();
		Для Каждого Операция Из СтруктураДанных.ДокументыКИмпорту Цикл
			Если Операция.СчетОрганизации <> Объект.БанковскийСчет Тогда
				Продолжить;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ДокументыКИмпорту.Добавить(), Операция);
		КонецЦикла;
	ИначеЕсли СтруктураДанных.Свойство("ДокументыКИмпорту") Тогда
		ДокументыКИмпорту.Загрузить(СтруктураДанных.ДокументыКИмпорту);
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("Импорт_Заголовок") И СтруктураДанных.Импорт_Заголовок <> Неопределено Тогда
		Импорт_Заголовок = СтруктураДанных.Импорт_Заголовок;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("Импорт_РасчетныеСчета") Тогда
		ЗначениеВРеквизитФормы(СтруктураДанных.Импорт_РасчетныеСчета, "Импорт_РасчетныеСчета");
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ТаблицаКонтрагентов") Тогда
		ЗначениеВРеквизитФормы(СтруктураДанных.ТаблицаКонтрагентов, "ТаблицаКонтрагентов");
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("СтекОповещений")
		И СтруктураДанных.СтекОповещений.Количество() > 0 Тогда
		СтруктураДанныхНаКлиенте.Вставить("СтекОповещений", СтруктураДанных.СтекОповещений);
	КонецЕсли;
	
	Для Каждого СтрокаКИмпорту Из ДокументыКИмпорту Цикл
		ДозаполнитьСтрокуКИмпортуПоПрочитаннойВыписке(СтрокаКИмпорту);
	КонецЦикла;
	
	Возврат СтруктураДанныхНаКлиенте;
	
КонецФункции

&НаСервере
Процедура ДозаполнитьСтрокуКИмпортуПоПрочитаннойВыписке(СтрокаТаблицы)
	
	ШаблоныТекстов = Новый Структура;
	ШаблоныТекстов.Вставить("КонтрагентРасчетныйСчет");
	ШаблоныТекстов.Вставить("Договор");
	Если Объект.СоздаватьНенайденныеЭлементы Тогда
		ШаблоныТекстов.КонтрагентРасчетныйСчет = НСтр("ru = 'Не загружен (%1)'");
		ШаблоныТекстов.Договор                 = НСтр("ru = 'Не создан'");
	Иначе
		ШаблоныТекстов.КонтрагентРасчетныйСчет = НСтр("ru = 'Не найден (%1)'");
		ШаблоныТекстов.Договор                 = НСтр("ru = 'Не найден'");
	КонецЕсли;
	
	// Контрагент.
	ТребуетсяКонтрагент = КонтрагентДолженБытьЗаполнен(СтрокаТаблицы.ВидОперации);
	
	НовыйКонтрагент = Новый Структура("БИН, Наименование");
	НовыйКонтрагент.БИН = СтрокаТаблицы.ПлательщикБИН_ИИН;
	НовыйКонтрагент.Наименование = СтрокаТаблицы.ПлательщикНаименование;
	НомерСчетаКонтрагента = СтрокаТаблицы.ПлательщикИИК;
	Если СтрокаТаблицы.ТипДокумента < 10 Тогда
		НовыйКонтрагент.БИН = СтрокаТаблицы.ПолучательБИН_ИИН;
		НовыйКонтрагент.Наименование = СтрокаТаблицы.ПолучательНаименование;
		НомерСчетаКонтрагента = СтрокаТаблицы.ПолучательИИК;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НовыйКонтрагент.БИН) Тогда
		РаспознанныйКонтрагент      = СтрокаТаблицы.Контрагент;
		СтрокаТаблицы.КонтрагентБИН = НовыйКонтрагент.БИН;
		
		Если ЗначениеЗаполнено(РаспознанныйКонтрагент) Тогда
			СтрокаТаблицы.Контрагент                        = РаспознанныйКонтрагент;
			СтрокаТаблицы.КонтрагентОтображениеНенайденного = "";
		Иначе
			СтрокаТаблицы.КонтрагентСсылкаДляНового = Новый(ТипКонтрагентаПоВидуОперации(СтрокаТаблицы.ВидОперации));
			Если ТипЗнч(РаспознанныйКонтрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				СтрокаТаблицы.КонтрагентОтображениеНенайденного = СтрШаблон(ШаблоныТекстов.КонтрагентРасчетныйСчет, НовыйКонтрагент.Наименование);
				СтрокаТаблицы.Контрагент                        = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
			ИначеЕсли ТипЗнч(РаспознанныйКонтрагент) = Тип("СправочникСсылка.ФизическиеЛица")  Тогда
				СтрокаТаблицы.КонтрагентОтображениеНенайденного = СтрШаблон(ШаблоныТекстов.КонтрагентРасчетныйСчет, НовыйКонтрагент.Наименование);
				СтрокаТаблицы.Контрагент                        = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТребуетсяКонтрагент Тогда
		СтрокаТаблицы.КонтрагентОтображениеНенайденного = НСтр("ru = 'Не указаны реквизиты контрагента'");
		СтрокаТаблицы.Контрагент = Новый(ТипКонтрагентаПоВидуОперации(СтрокаТаблицы.ВидОперации));
	КонецЕсли;
	
	// Счет контрагента.
	Если ЗначениеЗаполнено(НомерСчетаКонтрагента) Тогда
		РаспознанныйСчетКонтрагента = СтрокаТаблицы.СчетКонтрагента;
		СтрокаТаблицы.СчетКонтрагентаНомерСчета = НомерСчетаКонтрагента;
		
		Если ЗначениеЗаполнено(РаспознанныйСчетКонтрагента) Тогда
			СтрокаТаблицы.СчетКонтрагента                        = РаспознанныйСчетКонтрагента;
		Иначе
			СтрокаТаблицы.СчетКонтрагентаСсылкаДляНового         = РаспознанныйСчетКонтрагента;
			СтрокаТаблицы.СчетКонтрагентаОтображениеНенайденного = СтрШаблон(ШаблоныТекстов.КонтрагентРасчетныйСчет, НомерСчетаКонтрагента);
		КонецЕсли;
	ИначеЕсли ТребуетсяКонтрагент Тогда
		СтрокаТаблицы.СчетКонтрагентаОтображениеНенайденного = НСтр("ru = 'Не указаны реквизиты расчетного счета'");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Документ) Тогда
		СтрокаТаблицы.СостояниеДокумента = 3;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОЗагрузкеДанныхНаКлиенте(СтруктураДанныхКлиента, Операция = "Загрузка")
	
	Если СтруктураДанныхКлиента.Свойство("СтекОповещений") Тогда
		Если Операция = "Загрузка" Тогда
			Для каждого Оповещение Из СтруктураДанныхКлиента.СтекОповещений Цикл
				Если Оповещение.Свойство("Текст") Тогда
					ОбщегоНазначенияКлиент.СообщитьПользователю(Оповещение.Текст);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для каждого Сообщение Из СтруктураДанныхКлиента.СтекОповещений Цикл
				ОбщегоНазначенияКлиент.СообщитьПользователю(Сообщение.Текст);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область ПодключаемыеОбработчики

&НаКлиенте
Процедура Подключаемый_ПодключитьРасширениеРаботыСФайламиИПрочитатьФайл() Экспорт
	
	// Для прямого обмена с банками не предлагаем установку расширения работы с файлами.
	Если ПрямойОбменСБанками Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПрочитатьФайлЗавершение", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область ЗавершениеНемодальныхВызовов

&НаКлиенте
Процедура ПрочитатьФайлЗавершение(ПодключеноРасширениеРаботыСФайлами, ДополнительныеПараметры) Экспорт
	
	ВозможностьВыбораФайлов = ПодключеноРасширениеРаботыСФайлами;
	УстановитьВидимостьЭлементовВыбораФайлов(ЭтотОбъект);
	Если (Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаИмпорт)
		И НЕ ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() // Не запускаем чтение файла в веб-клиенте, так как требуется разрешение от пользователя.
		И ВозможностьВыбораФайлов Тогда
		Если НЕ ПустаяСтрока(Объект.ФайлЗагрузки) Тогда
			ЗагрузитьВыбранныйФайл(Объект.ФайлЗагрузки, ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВБанкЗавершение(МассивДокументов, ДополнительныеПараметры) Экспорт
	
	ОбменСБанкамиКлиент.СформироватьПодписатьОтправитьЭД(МассивДокументов);
	ЭкспортПроизведен = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.НачПериода = РезультатВыбора.НачалоПериода;
	Объект.КонПериода = РезультатВыбора.КонецПериода;
	
	ОбновитьСписокПлатежей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСозданияНастройкиЭДО(НастройкаЭДО, Параметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ЗапуститьПриложениеБезОбработкиРезультатаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Возврат; // обработка результата запуска не требуется
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеДокументов

&НаСервере
Функция ЗагрузкаВыпискиНаСервере()
	
	ПараметрыЗагрузкиДокументов = ПараметрыЗагрузкиДокументовНаСервере();
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.КлиентБанкСПоддержкойЭД.ФоноваяЗагрузкаДокументовКИмпортуИзКлиентБанка",
		ПараметрыЗагрузкиДокументов,
		НСтр("ru = 'Загрузка банковской выписки'"));
	
	АдресХранилища = Результат.АдресХранилища;
	
	Если Результат.ЗаданиеВыполнено Тогда
		Результат.Вставить("СтруктураДанныхКлиента", ЗагрузитьПодготовленныеДанные(АдресХранилища));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПараметрыЗагрузкиДокументовНаСервере()
	
	СтекОповещений = Новый Массив;
	
	ПараметрыЗагрузкиДокументов = Новый Структура(
			"ДокументыКИмпорту,
			|ТаблицаКонтрагентов,
			|Организация,
			|СтруктурноеПодразделение,
			|Импорт_РасчетныеСчета,
			|Импорт_Заголовок,
			|ИспользоватьГраницуОбработки,
			|ДатаГраницыОбработки,
			|НастройкаЗаполнения,
			|СтекОповещений",
			ДокументыКИмпорту.Выгрузить(),
			РеквизитФормыВЗначение("ТаблицаКонтрагентов"),
			Объект.Организация,
			Объект.СтруктурноеПодразделение,
			Импорт_РасчетныеСчета.Выгрузить(),
			Импорт_Заголовок,
			Объект.ИспользоватьГраницуОбработки,
			Объект.ДатаГраницыОбработки,
			Объект.НастройкаЗаполнения,
			СтекОповещений);
	
	Возврат ПараметрыЗагрузкиДокументов;
	
КонецФункции

&НаКлиенте
Процедура АктуализироватьДокументыКИмпорту(АдресХранилища)
	
	СтруктураДанных = ЗагрузитьПодготовленныеДанные(АдресХранилища);
	ОповеститьОЗагрузкеДанныхНаКлиенте(СтруктураДанных, "Загрузка");
	
	Если СтруктураДанных.Свойство("РезультатСозданияДокументов") Тогда
		
		РезультатСозданияДокументов = СтруктураДанных.РезультатСозданияДокументов;
		
		Если НЕ СтруктураДанных.Свойство("КоличествоЗагружено") Тогда
			ТекстОповещения = НСтр("ru='Новых документов для загрузки не обнаружено'");
			ТекстПояснения = "";
			СсылкаДляПерехода = Неопределено;
		Иначе
			ТекстОповещения = НСтр("ru='Выполнена загрузка документов'");
			ШаблонТекста = НСтр("ru = 'Загружено: [КоличествоДокументов].
				|Поступило: [СуммаПоступило]
				|Списано: [СуммаСписано]'");
			
			СтрокаКоличествоДокументов = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(СтруктураДанных.КоличествоЗагружено, "документ, документа, документов");
			СтрокаСуммаПоступило       = ОбщегоНазначенияБКВызовСервера.ФорматСумм(СтруктураДанных.СуммаПоступило, , "0,00");
			СтрокаСуммаСписано         = ОбщегоНазначенияБКВызовСервера.ФорматСумм(СтруктураДанных.СуммаСписано, , "0,00");
			
			ВставляемыеЗначения = Новый Структура;
			ВставляемыеЗначения.Вставить("КоличествоДокументов", СтрокаКоличествоДокументов);
			ВставляемыеЗначения.Вставить("СуммаПоступило",       СтрокаСуммаПоступило);
			ВставляемыеЗначения.Вставить("СуммаСписано",         СтрокаСуммаСписано);
			ТекстПояснения = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ВставляемыеЗначения);
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			ТекстОповещения,
			,
			ТекстПояснения,);
		
	КонецЕсли;
	
	ОповеститьОбИзменении(Тип("ДокументСсылка.ПлатежноеПоручениеВходящее"));
	ОповеститьОбИзменении(Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее"));
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеНенайденного

&НаСервере
Функция АдресВременногоХранилищаДереваКонтрагентов()
	
	Возврат ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("ТаблицаКонтрагентов"), УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура СоздатьНенайденноеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ОшибкаСоздания Из Результат.МассивСообщений Цикл
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОшибкаСоздания.Текст);
	КонецЦикла;
	
	ОтобразитьСозданныеЭлементы(Результат.СсылкиНаСозданныеОбъекты);
	
	ОбновитьТаблицуКонтрагентовПоРезультатамСозданияНенайденных(АдресХранилищаКонтрагентов);
	
	// Обновим доступность кнопки создать ненайденное.
	Элементы.ДокументыКИмпортуСоздатьНенайденное.Доступность = ТаблицаКонтрагентов.ПолучитьЭлементы().Количество() >0;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСозданныеЭлементы(СсылкиНаСозданныеОбъекты)
	
	ИзмененныеСтроки = Новый Соответствие;
	
	// Одна ссылка может использоваться в нескольких строках,
	// поэтому ищем использование данной ссылки в таблице 
	// и устанавливаем новое значение для отображения реквизита.
	Для Каждого Ссылка Из СсылкиНаСозданныеОбъекты Цикл
		Если ТипЗнч(Ссылка.Значение.Контрагент) = Тип("СправочникСсылка.Контрагенты")
			ИЛИ ТипЗнч(Ссылка.Значение.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("КонтрагентБИН", Ссылка.Ключ);
			СтрокиДокументыКИмпорту = ДокументыКИмпорту.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаДокументыКИмпорту Из СтрокиДокументыКИмпорту Цикл
				СтрокаДокументыКИмпорту.Контрагент                = Ссылка.Значение.Контрагент;
				СтрокаДокументыКИмпорту.КонтрагентСсылкаДляНового = Неопределено;
				СтрокаДокументыКИмпорту.КонтрагентОтображениеНенайденного = "";
				ИзмененныеСтроки.Вставить(СтрокаДокументыКИмпорту, Истина);
			КонецЦикла;
		КонецЕсли;
		Если ТипЗнч(Ссылка.Значение.СчетаКонтрагента) = Тип("Соответствие") Тогда
			Для Каждого РасчетныйСчет Из Ссылка.Значение.СчетаКонтрагента Цикл
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("СчетКонтрагентаНомерСчета", РасчетныйСчет.Ключ);
				СтрокиДокументыКИмпорту = ДокументыКИмпорту.НайтиСтроки(СтруктураПоиска);
				Для Каждого СтрокаДокументыКИмпорту Из СтрокиДокументыКИмпорту Цикл
					СтрокаДокументыКИмпорту.СчетКонтрагента                = РасчетныйСчет.Значение;
					СтрокаДокументыКИмпорту.СчетКонтрагентаСсылкаДляНового = Неопределено;
					СтрокаДокументыКИмпорту.СчетКонтрагентаОтображениеНенайденного = "";
					ИзмененныеСтроки.Вставить(СтрокаДокументыКИмпорту, Истина);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Установить готовность для измененных строк.
	Для Каждого КлючИЗначение Из ИзмененныеСтроки Цикл
		СтрокаТаблицы = КлючИЗначение.Ключ;
		СтрокаТаблицы.Готовность = ГотовностьСтроки(СтрокаТаблицы, Объект.СоздаватьНенайденныеЭлементы);
	КонецЦикла;
	
	Если СсылкиНаСозданныеОбъекты.Количество() > 0 Тогда
		ОповеститьОбИзменении(Тип("СправочникСсылка.Контрагенты"));
		ОповеститьОбИзменении(Тип("СправочникСсылка.БанковскиеСчета"));
		ОповеститьОбИзменении(Тип("СправочникСсылка.ФизическиеЛица"));
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Добавлены контрагенты и банковские счета'")
			,,, БиблиотекаКартинок.КлиентБанкКомандаЗагрузить);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуКонтрагентовПоРезультатамСозданияНенайденных(АдресТаблицыВХранилище)
	
	ДеревоКонтрагентов = ПолучитьИзВременногоХранилища(АдресТаблицыВХранилище);
	ЗначениеВРеквизитФормы(ДеревоКонтрагентов, "ТаблицаКонтрагентов");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяСозданиеНенайденныхВСтроке(Знач ДанныеСтроки)
	
	Возврат Не (ЗначениеЗаполнено(ДанныеСтроки.Контрагент)
				И ЗначениеЗаполнено(ДанныеСтроки.СчетКонтрагента))
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаИзБанка

&НаСервере
Процедура ЗагрузитьНастройкиДляБанковскогоСчета()
	
	СообщениеПрямогоОбмена = "";
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Объект.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "Владелец");
		
	КонецЕсли;
	
	Настройки = Обработки.КлиентБанкСПоддержкойЭД.НастройкиПрограммыКлиентаБанкаПоУмолчанию();
	Если ЗначениеЗаполнено(Объект.Организация)
		И ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		
		Настройки = Обработки.КлиентБанкСПоддержкойЭД.НастройкиПрограммыКлиентаБанка(Объект.Организация, Объект.БанковскийСчет);
	КонецЕсли;
	
	Объект.СоглашениеПрямогоОбменаСБанками          = Настройки.СоглашениеПрямогоОбменаСБанками;
	ПрямойОбменСБанками = ЗначениеЗаполнено(Настройки.СоглашениеПрямогоОбменаСБанками);
	
	Объект.Программа                                = Настройки.Программа;
	Объект.Кодировка                                = Настройки.Кодировка;
	Объект.ФайлВыгрузки                             = Настройки.ФайлВыгрузки;
	Если НЕ ПустаяСтрока(Настройки.ФайлЗагрузки) Тогда
		Объект.ФайлЗагрузки                         = Настройки.ФайлЗагрузки;
	КонецЕсли;
	
	ВалютаДенежныхСредств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "ВалютаДенежныхСредств");
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция НастройкиЗагрузки()
	
	Если ПустаяСтрока(КешНастроекЗагрузки) Тогда
		НастройкиЗагрузки = Неопределено;
	Иначе
		НастройкиЗагрузки = ПолучитьИзВременногоХранилища(КешНастроекЗагрузки);
	КонецЕсли;
	
	Если НастройкиЗагрузки = Неопределено Тогда
		НастройкиЗагрузки   = Обработки.КлиентБанкСПоддержкойЭД.НастройкиЗагрузки();
		КешНастроекЗагрузки = ПоместитьВоВременноеХранилище(НастройкиЗагрузки, УникальныйИдентификатор);
	КонецЕсли;
		
	Возврат НастройкиЗагрузки;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСписокДокументовКИмпорту()
	
	ОчиститьСообщения();
	ДокументыКИмпорту.Очистить();
	КоличествоКЗагрузке     = 0;
	СуммаПоступилоКЗагрузке = 0;
	СуммаСписаноКЗагрузке   = 0;
	
	Элементы.КнопкаЗагрузить.Доступность = Ложь;
	Элементы.ДокументыКИмпортуСоздатьНенайденное.Доступность = Ложь;
	Элементы.ДокументыКИмпортуПоказатьОшибки.Доступность     = Ложь;
	Элементы.ДокументыКИмпортуПоказатьОшибки.Пометка         = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ДокументыКИмпортуОбновитьИтогиВПодвале()
	
	ДокументыКЗагрузке = ДокументыКИмпорту.Выгрузить(Новый Структура("Загрузить", Истина));
	
	КоличествоКЗагрузке     = ДокументыКЗагрузке.Количество();
	СуммаПоступилоКЗагрузке = ДокументыКЗагрузке.Итог("СуммаПриход");
	СуммаСписаноКЗагрузке   = ДокументыКЗагрузке.Итог("СуммаРасход");
	
	Элементы.ДокументыКИмпортуСоздатьНенайденное.Доступность = ТаблицаКонтрагентов.ПолучитьЭлементы().Количество() > 0;
	Элементы.ДокументыКИмпортуПоказатьОшибки.Доступность     = ЕстьОшибкиВДокументыКИмпорту();
	
КонецПроцедуры

#Область ПолучениеВыписки

&НаКлиенте
Процедура ПрочитатьФайлВыпискиНаКлиенте(ОписаниеФайла, Кодировка = Неопределено) Экспорт
	
	Если Кодировка = Неопределено Тогда
		Кодировка = "UTF8";
	КонецЕсли;

	Если ТипЗнч(ОписаниеФайла) = Тип("ОписаниеПереданногоФайла") Тогда
		ИмяФайла = "ПолноеИмя";
	Иначе
		ИмяФайла = "Имя";
	КонецЕсли;
	
	Объект.ФайлЗагрузки = ОписаниеФайла[ИмяФайла];
	Если ВРег(Кодировка) = "UTF8" Тогда
		Объект.Кодировка = "UTF8";
	ИначеЕсли ВРег(Кодировка) = "CP866" Тогда
		Объект.Кодировка = "DOS";
	Иначе
		Объект.Кодировка = "WINDOWS";
	КонецЕсли;
	
	Результат = ПрочитатьФайлВыпискиНаСервере(ОписаниеФайла, Кодировка);
	
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияПрочитатьФайлВыписки", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
		
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
	Иначе
		ОбработатьРезультатПрочитаннойВыписки(Результат.АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПрочитаннойВыписки(АдресХранилища)
	
	АдресХранилищаРаспознанныеДанныеИзБанка = АдресХранилища;
	ВыполненаЗагрузка = Ложь;
	
	СтруктураДанных = ЗагрузитьПодготовленныеДанные(АдресХранилища);
	ОповеститьОЗагрузкеДанныхНаКлиенте(СтруктураДанных, "Чтение");
	ДокументыКИмпортуОбновитьИтогиВПодвале();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПрочитатьФайлВыпискиНаСервере(ОписаниеФайла, Кодировка)
	
	Если ТипЗнч(ОписаниеФайла) = Тип("ОписаниеПереданногоФайла") Тогда
		ИмяФайла = "ПолноеИмя";
	Иначе
		ИмяФайла = "Имя";
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Настройки",      НастройкиЗагрузки());
	СтруктураПараметров.Вставить("ИмяФайла",       ОписаниеФайла[ИмяФайла]);
	СтруктураПараметров.Настройки.Кодировка = Кодировка;
	Если НЕ ПустаяСтрока(ОписаниеФайла.Хранение) Тогда
		СтруктураПараметров.Вставить("ДвоичныеДанные", ПолучитьИзВременногоХранилища(ОписаниеФайла.Хранение));
	КонецЕсли;
	СтруктураПараметров.Вставить("ДокументыКИмпорту", ДокументыКИмпорту.Выгрузить());
	СтруктураПараметров.Вставить("Импорт_РасчетныеСчета", Импорт_РасчетныеСчета.Выгрузить());
	СтруктураПараметров.Вставить("ФайлЗагрузки", Объект.ФайлЗагрузки);
	СтруктураПараметров.Вставить("Кодировка", Объект.Кодировка);
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	СтруктураПараметров.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	СтруктураПараметров.Вставить("ИспользоватьГраницуОбработки", Объект.ИспользоватьГраницуОбработки);
	СтруктураПараметров.Вставить("ДатаГраницыОбработки", Объект.ДатаГраницыОбработки);
	СтруктураПараметров.Вставить("НастройкаЗаполнения", Объект.НастройкаЗаполнения);
	
	ТаблицаКонтрагентов.ПолучитьЭлементы().Очистить();
	СтруктураПараметров.Вставить("ТаблицаКонтрагентов", РеквизитФормыВЗначение("ТаблицаКонтрагентов"));
	
	СтекОповещений      = Новый Массив;
	СтруктураПараметров.Вставить("СтекОповещений", СтекОповещений);
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.КлиентБанкСПоддержкойЭД.ФоноваяРаспознатьДанныеИзБанка",
		СтруктураПараметров,
		НСтр("ru = 'Чтение данных из банка'"));
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьИзВыписки()
	
	Если ПрямойОбменСБанками Тогда
		ЗапроситьЭлектроннуюВыпискуБанка();;
	Иначе
		ОбновитьВыпискуЧерезФайл();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьЭлектроннуюВыпискуБанка()
	
	Если НЕ ЗначениеЗаполнено(Объект.СоглашениеПрямогоОбменаСБанками) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			Нстр("ru = 'Не выбран банковский счет'")
			,, "Объект.БанковскийСчет");
		Возврат;
	КонецЕсли;
	
	// Проверим период
	Если НЕ ЗначениеЗаполнено(Объект.НачПериода) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			Нстр("ru = 'Не заполнена дата начала периода'")
			,, "Объект.НачалоПериода");
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.КонПериода) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			Нстр("ru = 'Не заполнена дата окончания периода'")
			,, "Объект.КонецПериода");
		Возврат;
	КонецЕсли;
	ТекущаяДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	Если Объект.КонПериода > КонецДня(ТекущаяДатаСеанса) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Дата окончания периода не может быть больше текущей даты'")
			,, "Объект.КонецПериода");
		Возврат;
	ИначеЕсли Объект.НачПериода > Объект.КонПериода Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Дата начала не может быть больше даты окончания периода'")
			,, "Объект.НачалоПериода");
		Возврат;
	КонецЕсли;
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияВыписки",ЭтотОбъект);
	ОбменСБанкамиКлиент.ПолучитьВыписку(Оповещение
		,Объект.БанковскийСчет, Объект.НачПериода, Объект.КонПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияВыписки(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	ВыпискиБанка.Очистить();
	Если ВыбранноеЗначение.Свойство("Выписки") Тогда 
		Если ТипЗнч(ВыбранноеЗначение.Выписки) = Тип("ДокументСсылка.СообщениеОбменСБанками")
			И ЗначениеЗаполнено(Объект.СоглашениеПрямогоОбменаСБанками) Тогда
			
			ВыпискиБанка.Добавить(ВыбранноеЗначение);
			МассивВыписок = ВыпискиБанка.ВыгрузитьЗначения();
			АдресФайла    = ПолучитьДанныеВыпискиБанкаВФайл(МассивВыписок);
			
			ПрочитатьФайлВыпискиНаКлиенте(Новый ОписаниеПередаваемогоФайла(,АдресФайла));
			
		ИначеЕсли ТипЗнч(ВыбранноеЗначение.Выписки) = Тип("Массив") И ВыбранноеЗначение.Количество() > 0 Тогда
			
			Для Каждого Выписка Из ВыбранноеЗначение.Выписки Цикл
				
				ВыпискиБанка.Добавить(Выписка);
				
			КонецЦикла;
			
			АдресФайла    = ПолучитьДанныеВыпискиБанкаВФайл(ВыбранноеЗначение.Выписки);
			ПрочитатьФайлВыпискиНаКлиенте(Новый ОписаниеПередаваемогоФайла(,АдресФайла));
			
		КонецЕсли;
	КонецЕсли;
	
	Если ВыпискиБанка.Количество() > 0 Тогда
		
		ЭлектроннаяВыпискаБанка = ТекстСсылкиНаЭлектронныеВыписки(Объект.НачПериода, Объект.КонПериода);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстСсылкиНаЭлектронныеВыписки(НачалоПериода, КонецПериода)
	
	ШаблонСтроки = НСтр("ru = 'Выписка банка за период с %1 по %2'");
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, 
		Формат(НачалоПериода, "ДФ=dd.MM.yyyy"), Формат(КонецПериода, "ДФ=dd.MM.yyyy")); 		
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеВыпискиБанкаВФайл(Знач МассивВыписок)
	
	МассивСчетов      = Новый Массив;
	СсылкаНаХранилище = "";
	ОбменСБанками.ПолучитьДанныеВыпискиБанкаТекстовыйФормат(МассивВыписок, СсылкаНаХранилище, МассивСчетов);
	
	Возврат СсылкаНаХранилище;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьВыпискуЧерезФайл()
	
	Если ЗначениеЗаполнено(Объект.ФайлЗагрузки) И ВозможностьВыбораФайлов Тогда
		// Файл определен - можно начинаем чтение
		ЗагрузитьВыбранныйФайл(Объект.ФайлЗагрузки, ЭтаФорма);
	Иначе
		// Файл не определен - запросим файл у пользователя
		ВыбратьИЗагрузитьФайл(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РазмещениеВыпискиНаФорме

&НаСервере
Функция ЭлементВыборкиЗапросаДанныхДокументовВСтруктуру(Выборка, Исключения)
	
	Структура = Новый Структура;
	Для Каждого Колонка Из Выборка.Владелец().Колонки Цикл
		
		Если Исключения.Свойство(Колонка.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		Значение = Выборка[Колонка.Имя];
		Структура.Вставить(Колонка.Имя, Значение);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

&НаСервере
Функция ЕстьОшибкиВДокументыКИмпорту()
	
	Возврат (ДокументыКИмпорту.НайтиСтроки(Новый Структура("ЕстьОшибка", Истина)).Количество() > 0);
	
КонецФункции

#КонецОбласти

&НаСервере
Функция КонтрагентДолженБытьЗаполнен(ВидОперации) Экспорт
	
	Возврат НЕ (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет
		Или ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет
		Или ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ИнкассацияДенежныхСредств);
	
КонецФункции

&НаСервере
Функция ТипКонтрагентаПоВидуОперации(ВидОперации) Экспорт
	
	ТипКонтрагента = Тип("СправочникСсылка.Контрагенты");
	
	Возврат ТипКонтрагента;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ГотовностьСтроки(Знач ДанныеСтроки, Знач СоздаватьНенайденныеЭлементы)
	
	// Если есть описание ошибки, то строка не готова
	Если НЕ ПустаяСтрока(ДанныеСтроки.ОписаниеОшибок) Тогда
		Готовность = 1;
	// Если требуется создавать контрагентов вручную, тогда проверим нужно ли что-то создавать
	ИначеЕсли НЕ СоздаватьНенайденныеЭлементы Тогда
		Готовность = ?(ТребуетсяСозданиеНенайденныхВСтроке(ДанныеСтроки), 1, 0);
	// Во всех остальных случаях строка готова к загрузке
	Иначе
		Готовность = 0;
	КонецЕсли;
	
	Возврат Готовность;
	
КонецФункции

#КонецОбласти

#Область РаботаСФайлами

#Область ВыгрузкаФайла

&НаКлиенте
Процедура Подключаемый_ПодключитьРасширениеРаботыСФайламиИВыбратьФайл()
	
	ТекстСообщения = НСтр("ru = 'Для выбора файла необходимо установить расширение работы с файлами.'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьФайлЗавершение", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения, ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВозможностьВыбораФайлов = Результат;
	
	Если ВозможностьВыбораФайлов Тогда
		ТекущиеДанные = Элементы.ТаблицаСчетов.ТекущиеДанные;
		ВыборФайлаОбменаСБанком(ТекущиеДанные, "Выгрузка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьРасширениеРаботыСФайламиИВыбратьФайлПриВыгрузке(Счет)
	
	ТекстСообщения = НСтр("ru = 'Для указания файла выгрузки платежей по счету %1 необходимо установить расширение работы с файлами.'");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Счет.Счет);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьФайлПриВыгрузкеЗавершение", ЭтотОбъект, Счет);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения, ТекстСообщения, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлПриВыгрузкеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВозможностьВыбораФайлов = Результат;
	
	Если ВозможностьВыбораФайлов Тогда
		ВыборФайлаПриВыгрузке(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаПриВыгрузке(Счет)
	
	Режим = "Выгрузка";
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	
	РасширениеФайла = "txt";
	Если Объект.ВыгружатьВXMLФормате Тогда
		ДиалогВыбораФайла.Фильтр = НСтр("ru = 'XML документ (*.xml)|*.xml'");
		РасширениеФайла = "xml";
	Иначе
		ДиалогВыбораФайла.Фильтр = НСтр("ru = 'Текстовый файл (*.txt)|*.txt'");
	КонецЕсли;
	ДиалогВыбораФайла.Заголовок               = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		?(Режим = "Выгрузка",
			НСтр("ru='Укажите файл для выгрузки данных по счету %1'"),
			НСтр("ru='Укажите файл для загрузки данных по счету %1'")),
		Счет.Счет);
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.Расширение              = "txt";
	ДиалогВыбораФайла.ИндексФильтра           = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла          = ?(Режим = "Выгрузка", "1c_to_kl." + РасширениеФайла, "kl_to_1c.txt");
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Ложь;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИдСчета", Счет.ПолучитьИдентификатор());
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборФайлаПриВыгрузкеЗавершение", ЭтаФорма, ДопПараметры);
	
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаПриВыгрузкеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено
		И ТипЗнч(Результат) = Тип("Массив")
		И Результат.Количество() > 0 Тогда
		
		ИмяФайла = Результат[0];
		Счет = Объект.ТаблицаСчетов.НайтиПоИдентификатору(ДополнительныеПараметры.ИдСчета);
		
		Если Счет <> Неопределено Тогда
			Счет.НастройкаОбмена = ИмяФайла;
			ВыгрузитьПлатежиПослеВыбораФайла(ДополнительныеПараметры.ИдСчета);
			
			ПодключитьОбработчикОжидания("ОбработатьЗавершениеВыгрузки", 1, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьПлатежиПослеВыбораФайла(ИдСчета)
	
	Счет = Объект.ТаблицаСчетов.НайтиПоИдентификатору(ИдСчета);
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Обработка.ВыгрузитьПлатежиПоСчету(Счет, ЭтаФорма.УникальныйИдентификатор, ДокументыНаЭкспорт);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаОбменаСБанком(ТекущиеДанные, Режим) Экспорт
	
	Если ТекущиеДанные.ПрямойОбмен Тогда
		ИмяФайла = "";
	Иначе
		ИмяФайла = ТекущиеДанные.НастройкаОбмена;
	КонецЕсли;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Фильтр                  = НСтр("ru = 'Текстовый файл (*.txt)|*.txt'");
	ДиалогВыбораФайла.Заголовок               = ?(Режим = "Выгрузка", 
		НСтр("ru='Выберите файл для выгрузки данных из клиента банка'"),
		НСтр("ru='Выберите файл для загрузки данных из клиента банка'"));
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.Расширение              = "txt";
	ДиалогВыбораФайла.ИндексФильтра           = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла          = ?(ПустаяСтрока(ИмяФайла),
		?(Режим = "Выгрузка", "1c_to_kl.txt", "kl_to_1c.txt"), ИмяФайла);
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыборФайлаЗавершение",
		ЭтотОбъект,
		Новый Структура("Режим, ТекущиеДанные", Режим, ТекущиеДанные));
	
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	Иначе
		ДополнительныеПараметры.ТекущиеДанные.НастройкаОбмена = ВыбранныеФайлы[0];
		ДополнительныеПараметры.ТекущиеДанные.ПрямойОбмен = Ложь;
		Если Не ДополнительныеПараметры.ТекущиеДанные.Пометка Тогда
			ПодключитьОбработчикОжидания("ОбработатьПометкуСчета", 0.1, Истина);
		КонецЕсли;
		ДополнительныеПараметры.ТекущиеДанные.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлы()
	
	ВыгруженныеСчета = "";
	
	Для каждого Счет Из Объект.ТаблицаСчетов Цикл
		
		Если Счет.СохранитьФайл И ЭтоАдресВременногоХранилища(Счет.АдресХранилищаФайла) Тогда
			
			ДанныеВыгрузки = ПолучитьИзВременногоХранилища(Счет.АдресХранилищаФайла);
			Если ТипЗнч(ДанныеВыгрузки) = Тип("ДвоичныеДанные") Тогда
				
				Если ВозможностьВыбораФайлов Тогда
					
					ВыгрузитьФайлНаКлиенте(Счет);
					
				Иначе // Веб клиент без расширения для работы с файлами.
					
					Попытка
						Если ЗначениеЗаполнено(Счет.НастройкаОбмена) Тогда
							ПолучитьФайл(Счет.АдресХранилищаФайла, Счет.НастройкаОбмена, Истина);
						Иначе
							ПолучитьФайл(Счет.АдресХранилищаФайла, "1c_to_kl.txt", Истина);
						КонецЕсли;
						Счет.Выгружен = Истина;
						
					Исключение
						ШаблонСообщения = НСтр("ru = 'При записи файла возникла ошибка
							|%1'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
							КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						
						ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
					КонецПопытки;
				КонецЕсли;
				
				ВыгруженныеСчета = ВыгруженныеСчета + Строка(Счет.Счет) + "
				|";
			КонецЕсли;
			
			Счет.СохранитьФайл = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ВыгруженныеСчета) Тогда
		ПоказатьОповещениеПользователя(,, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выгружены в файлы данные по счетам
			|%1'"),
			ВыгруженныеСчета)
		);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиенте(Счет)
	
	ДополнительныеПараметры = Новый Структура("Счет", Счет);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеСозданиеФайла", ЭтотОбъект, ДополнительныеПараметры);
	
	Файл = Новый Файл();
	Файл.НачатьИнициализацию(ОписаниеОповещения, Счет.НастройкаОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиентеСозданиеФайла(Файл, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("Файл", Файл);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеПроверкаСуществования", ЭтотОбъект, ДополнительныеПараметры);
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиентеПроверкаСуществования(Существует, ДополнительныеПараметры) Экспорт
	
	Файл = ДополнительныеПараметры.Файл;
	ДополнительныеПараметры.Вставить("ФайлСуществует", Существует);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеПроверкаНаКаталог", ЭтотОбъект, ДополнительныеПараметры);
	Если Существует Тогда
		Файл.НачатьПроверкуЭтоКаталог(ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиентеПроверкаНаКаталог(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Счет = ДополнительныеПараметры.Счет;
	
	Если Прав(СокрЛП(Счет.НастройкаОбмена), 1) = "\"
		ИЛИ Прав(СокрЛП(Счет.НастройкаОбмена), 1) = "/"
		ИЛИ ЭтоКаталог Тогда
		ТекстСообщения = НСтр("ru = 'Указан некорректный файл для выгрузки - выбран ""каталог"".
			|Выберите файл для выгрузки'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения
			,, "Объект.ТаблицаСчетов");
		Возврат;
	КонецЕсли;
	
	ПередаваемыеФайлы = Новый Массив;
	
	ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(Счет.НастройкаОбмена, Счет.АдресХранилищаФайла);
	ПередаваемыеФайлы.Добавить(ОписаниеФайла);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПолучениеФайлов(ОписаниеОповещения, ПередаваемыеФайлы, Счет.НастройкаОбмена, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиентеЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Счет.Выгружен = Истина;
	
	ОбработатьЗавершениеВыгрузки();
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаФайла

&НаКлиенте
Процедура ВыбратьИЗагрузитьФайл(Форма)
	
	ДополнительныеПараметры = Новый Структура("Форма", Форма);
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбора.Заголовок          = НСтр("ru = 'Выберите файл для загрузки выписки из банка'");
	ДиалогВыбора.МножественныйВыбор = Ложь;
	
	Если Форма.ВозможностьВыбораФайлов Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ДиалогВыбораФайлаДляЗагрузкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДиалогВыбора.Фильтр                  = НСтр("ru = 'Текстовый файл'") + " (*.txt)|*.txt";
		ДиалогВыбора.ПредварительныйПросмотр = Ложь;
		ДиалогВыбора.Расширение              = "txt";
		ДиалогВыбора.ИндексФильтра           = 0;
		ДиалогВыбора.ПолноеИмяФайла          = "kl_to_1c.txt";
		ДиалогВыбора.Показать(ОписаниеОповещения);
	Иначе
	    ОбъектКодировка = ВРег(СокрЛП(Форма.Объект.Кодировка));
		Если ОбъектКодировка = "DOS" Тогда
			Кодировка = "cp866";
		ИначеЕсли ОбъектКодировка = "UTF8" Тогда
			Кодировка = "utf8";
		ИначеЕсли ОбъектКодировка = "WINDOWS" Тогда
			Кодировка = "ansi";
		Иначе
			Кодировка = Неопределено;
		КонецЕсли;
		ДополнительныеПараметры.Вставить("Кодировка", Кодировка);
		ОповещениеПомещениеФайла = Новый ОписаниеОповещения("ПомещениеФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		НачатьПомещениеФайла(ОповещениеПомещениеФайла, , ДиалогВыбора, Истина, Форма.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВыбранныйФайл(ФайлЗагрузки, Форма) Экспорт
	
	ДополнительныеПараметры = Новый Структура("Форма", Форма);
	Если Форма.ВозможностьВыбораФайлов Тогда
		ЗагрузитьФайлНаКлиенте(ФайлЗагрузки, ДополнительныеПараметры);
	Иначе
	    ОбъектКодировка = ВРег(СокрЛП(Форма.Объект.Кодировка));
		Если ОбъектКодировка = "DOS" Тогда
			Кодировка = "cp866";
		ИначеЕсли ОбъектКодировка = "UTF8" Тогда
			Кодировка = "utf8";
		ИначеЕсли ОбъектКодировка = "WINDOWS" Тогда
			Кодировка = "ansi";
		Иначе
			Кодировка = Неопределено;
		КонецЕсли;
		ДополнительныеПараметры.Вставить("Кодировка", Кодировка);
		ОповещениеПомещениеФайла = Новый ОписаниеОповещения("ПомещениеФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		НачатьПомещениеФайла(ОповещениеПомещениеФайла, , ФайлЗагрузки, Истина, Форма.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДиалогВыбораФайлаДляЗагрузкиЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		
		ИмяФайла = ВыбранныеФайлы.Получить(0);
		ЗагрузитьФайлНаКлиенте(ИмяФайла, ДополнительныеПараметры)
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлНаКлиенте(ИмяФайла, ДополнительныеПараметры)
	
	ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьФайлНаКлиентеСозданиеФайла", ЭтотОбъект, ДополнительныеПараметры);
	
	Файл = Новый Файл();
	Файл.НачатьИнициализацию(ОписаниеОповещения, ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлНаКлиентеСозданиеФайла(Файл, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("Файл", Файл);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьФайлНаКлиентеПроверкаСуществования",
		ЭтотОбъект, ДополнительныеПараметры);
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлНаКлиентеПроверкаСуществования(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		Файл = ДополнительныеПараметры.Файл;
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьФайлНаКлиентеПроверкаНаКаталог", ЭтотОбъект, ДополнительныеПараметры);
		Файл.НачатьПроверкуЭтоКаталог(ОписаниеОповещения);
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросВыбратьФайлИнтерактивноЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru = 'Файл обмена с банком не обнаружен. Выбрать файл интерактивно?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросВыбратьФайлИнтерактивноЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыбратьИЗагрузитьФайл(ДополнительныеПараметры.Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлНаКлиентеПроверкаНаКаталог(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если ЭтоКаталог Тогда
		ТекстСообщения = НСтр("ru = 'Файл данных для загрузки документов из банка некорректен - выбран ""каталог"".
			|Выберите файл загрузки'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПомещаемыеФайлы = Новый Массив;
	ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ДополнительныеПараметры.ИмяФайла));
	
	ПомещениеФайловЗавершение = Новый ОписаниеОповещения("ЗагрузитьФайлНаКлиентеЗавершениеПомещения",
		ЭтотОбъект, ДополнительныеПараметры);
	НачатьПомещениеФайлов(ПомещениеФайловЗавершение, ПомещаемыеФайлы,, Ложь, ДополнительныеПараметры.Форма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлНаКлиентеЗавершениеПомещения(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы <> Неопределено И ПомещенныеФайлы.Количество() > 0 Тогда
		
		ОписаниеФайла = ПомещенныеФайлы.Получить(0);
		АдресФайла    = ОписаниеФайла.Хранение;
	
		Если ТипЗнч(ОписаниеФайла) = Тип("ОписаниеПереданногоФайла") Тогда
			ИмяФайла = "ПолноеИмя";
		Иначе
			ИмяФайла = "Имя";
		КонецЕсли;
		
		Если АдресФайла = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Кодировка = Неопределено;
		// В ВебКлиенте не выполняем экспресс проверку, так как объект ЧтениеТекста недоступен.
		#Если НЕ ВебКлиент Тогда 
			Результат = ЭкспрессЧтениеФайла(ОписаниеФайла[ИмяФайла], КодировкаТекста.ANSI);
			Если Результат.НеУдалосьПрочитатьФайл Тогда
				ТекстПредупреждения = НСтр("ru= 'Не удалось прочитать файл, возможно неверно указана кодировка!'");
				ПоказатьПредупреждение(, ТекстПредупреждения);
				Возврат;
			ИначеЕсли НЕ Результат.ЭтоФайлОбмена Тогда
				ТекстПредупреждения = НСтр("ru= 'Указанный файл не является файлом обмена - не найден ключ ""1CClientBankExchange""'");
				ПоказатьПредупреждение(, ТекстПредупреждения);
				Возврат;
			КонецЕсли;
			
			Кодировка = Результат.Кодировка;
			
		#Иначе
			ОбъектКодировка = ВРег(СокрЛП(ДополнительныеПараметры.Форма.Объект.Кодировка)); 
			Если ОбъектКодировка = "DOS" Тогда
				Кодировка = "cp866";
			ИначеЕсли ОбъектКодировка = "UTF8" Тогда
				Кодировка = "utf8";
			ИначеЕсли ОбъектКодировка = "WINDOWS" Тогда
				Кодировка = "ansi";
			КонецЕсли;
		
		#КонецЕсли
		
		ДополнительныеПараметры.Форма.ПрочитатьФайлВыпискиНаКлиенте(ОписаниеФайла, Кодировка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеФайлаЗавершение(Результат, АдресФайлаПомещенный, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат = Ложь ИЛИ АдресФайлаПомещенный = "" Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("Кодировка") Тогда
		Кодировка = ДополнительныеПараметры.Кодировка;
	Иначе
		Кодировка = Неопределено;
	КонецЕсли;
	
	ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ВыбранноеИмяФайла, АдресФайлаПомещенный);
	ДополнительныеПараметры.Форма.ПрочитатьФайлВыпискиНаКлиенте(ОписаниеФайла, Кодировка);
	
КонецПроцедуры

#КонецОбласти

#Область ОткрытиеФайла

// Открывает для просмотра текстовой документ.
//
&НаКлиенте
Процедура ОткрытьФайлДляПросмотра(ЭлементПривязки, ИмяФайла, Кодировка, Заголовок)
	
	ДополнительныеПараметры = Новый Структура("Форма, ИмяФайла, Кодировка, Заголовок, ЭлементПривязки", ЭтотОбъект, ИмяФайла, Кодировка, Заголовок, ЭлементПривязки);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлДляПросмотраСозданиеФайла", ЭтотОбъект, ДополнительныеПараметры);
	
	Файл = Новый Файл();
	Файл.НачатьИнициализацию(ОписаниеОповещения, ДополнительныеПараметры.ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДляПросмотраСозданиеФайла(Файл, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("Файл", Файл);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлДляПросмотраПроверкаСуществования", ЭтотОбъект, ДополнительныеПараметры);
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДляПросмотраПроверкаСуществования(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		
		ТекстСоощения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 не обнаружен'"), ДополнительныеПараметры.Заголовок);
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСоощения
			,, ДополнительныеПараметры.ЭлементПривязки);
		
		Возврат;
		
	КонецЕсли;
	
	Файл = ДополнительныеПараметры.Файл;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлДляПросмотраПроверкаНаКаталог", ЭтотОбъект, ДополнительныеПараметры);
	Файл.НачатьПроверкуЭтоКаталог(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДляПросмотраПроверкаНаКаталог(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если ЭтоКаталог Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 некорректен - выбран ""каталог"".
			|Выберите %1'"), ДополнительныеПараметры.Заголовок);
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения
			,, ДополнительныеПараметры.ЭлементПривязки);
		
		Возврат;
		
	КонецЕсли;
	
	ПомещаемыеФайлы = Новый Массив;
	ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ДополнительныеПараметры.ИмяФайла));
	
	ПомещениеФайловЗавершение = Новый ОписаниеОповещения("ОткрытьФайлДляПросмотраЗавешениеПомещения", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПомещениеФайлов(ПомещениеФайловЗавершение, ПомещаемыеФайлы,, Ложь, ДополнительныеПараметры.Форма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДляПросмотраЗавешениеПомещения(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы <> Неопределено И ПомещенныеФайлы.Количество() > 0 Тогда
		ОписаниеФайлов = ПомещенныеФайлы.Получить(0);
		АдресФайла     = ОписаниеФайлов.Хранение;
		
		Если АдресФайла = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Текст = ДополнительныеПараметры.Форма.ТекстовыйДокументИзВременногоХранилищаФайла(АдресФайла, ДополнительныеПараметры.Кодировка);
		Текст.Показать(ДополнительныеПараметры.Заголовок, ДополнительныеПараметры.ИмяФайла);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЭкспрессПроверкаВыбранногоФайла

&НаКлиенте
// Читаем первые строки файла, определяем является ли данный файл - файлом обмена, определяем кодировку.
// 
// Параметры:
//  ОписаниеФайла - ОписаниеПередаваемогоФайла - Также может использоваться структура:
//              ключ - Хранение, значение - Адрес файла на сервере (во временном хранилище)
//              ключ - Имя,      значение - Адрес файла на клиенте
//
// Возвращаемое значение:
//  Структура - содержит результат чтения файла.
//  Ключи     - ЭтоФайлОбмена          - Булево - Признак является ли файл файлом обмена
//            - НеУдалосьПрочитатьФайл - Булево
//            - Кодировка              - КодировкаТекста - Кодировка, в которой сохранен файл
//
Функция ЭкспрессЧтениеФайла(ИмяФайла, ИспользуемаяКодировкаТекста)
	
	Если ИспользуемаяКодировкаТекста = КодировкаТекста.ANSI Тогда
		Кодир = "windows-1251";
		КодировкаИзменена = 0;
	ИначеЕсли ИспользуемаяКодировкаТекста = КодировкаТекста.UTF8 Тогда
		Кодир = "utf8";
		КодировкаИзменена = 1;
	Иначе
		Кодир = "cp866";
		КодировкаИзменена = 2;
	КонецЕсли;
	
	НеУдалосьПрочитатьФайл = Ложь;
	ЭтоФайлОбмена          = Ложь;
	НомерТекущейСтроки     = 0;
	
	Текст = Новый ЧтениеТекста(ИмяФайла, Кодир);
	СтрокаТекста = Текст.ПрочитатьСтроку();
	Пока СтрокаТекста <> Неопределено Цикл
		
		// Проверяем кодировку файла
		Если НЕ ТолькоСимволыВСтроке(СтрокаТекста) Тогда
			Если КодировкаИзменена = 2 Тогда
				НеУдалосьПрочитатьФайл = Истина;
			ИначеЕсли КодировкаИзменена = 0 Тогда
				// Изменим кодировку и прочитаем еще раз
				Возврат ЭкспрессЧтениеФайла(ИмяФайла, КодировкаТекста.UTF8);
			Иначе
				// Изменим кодировку и прочитаем еще раз
				Возврат ЭкспрессЧтениеФайла(ИмяФайла, КодировкаТекста.OEM);
			КонецЕсли;
			Прервать;
		КонецЕсли;
		
		// Читаем первые пять строк, этого должно быть достаточно,
		// чтобы определить кодировку и найти ключ 1CClientBankExchange
		Если НомерТекущейСтроки > 5 Тогда 
			Прервать;
		КонецЕсли;
		
		ДанныеСтроки = РазложитьСтроку(СтрокаТекста);
		
		Если Врег(ДанныеСтроки.Ключ) = Врег("1CClientBankExchange") Тогда
			ЭтоФайлОбмена = Истина;
		КонецЕсли;
		
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
		СтрокаТекста = Текст.ПрочитатьСтроку();
		
	КонецЦикла;
	
	РезультатЧтенияФайла = Новый Структура;
	РезультатЧтенияФайла.Вставить("ЭтоФайлОбмена",          ЭтоФайлОбмена);
	РезультатЧтенияФайла.Вставить("НеУдалосьПрочитатьФайл", НеУдалосьПрочитатьФайл);
	РезультатЧтенияФайла.Вставить("Кодировка",              Кодир);
	
	Возврат РезультатЧтенияФайла;
	
КонецФункции

&НаКлиенте
// Функция возвращает структуру строки из файла
// Параметры:
// Строка - Строка - Текстовая строка, прочитанная из файла
// Возвращаемое значение
// Структура:
//    Ключ     - Идентификатор из строки
//    Значение - Значение из строки
//
Функция РазложитьСтроку(Строка)
	
	Результат = Новый Структура;
	Результат.Вставить("Ключ",     "");
	Результат.Вставить("Значение", "");
	
	ПозицияРавно = СтрНайти(Строка, "=");
	Если ПозицияРавно = 0 Тогда
		Результат.Ключ = Строка;
	Иначе
		Результат.Ключ     = Лев(Строка,  ПозицияРавно - 1);
		Результат.Значение = Сред(Строка, ПозицияРавно + 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
// Проверяет строку на соответствие требованиям
//
// Параметры:
//  ПроверяемаяСтрока - Строка - проверяемый строка.
//
// Возвращаемое значение:
//  Булево - Истина, если ошибок нет.
//
Функция ТолькоСимволыВСтроке(Знач ПроверяемаяСтрока)
	
	// допустимые символы
	Буквы = "abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя";
	Цифры = "0123456789";
	СпецСимволы = ".,;:$№#@&_-+*=?'/|\""%()[]{} ";
	
	// приводим строку к нижнему регистру
	ПроверяемаяСтрока = НРег(СокрЛП(ПроверяемаяСтрока));
	
	// проверяем наличие спецсимволов в начале строке
	Если ЕстьСимволыВНачалеСтроки(Лев(ПроверяемаяСтрока, 1), СпецСимволы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// проверяем допустимые символы
	Если НЕ СтрокаСодержитТолькоДопустимыеСимволы(ПроверяемаяСтрока, Буквы + Цифры + СпецСимволы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЕстьСимволыВНачалеСтроки(Строка, ПроверяемыеСимволы)
	Для Позиция = 1 По СтрДлина(ПроверяемыеСимволы) Цикл
		Символ = Сред(ПроверяемыеСимволы, Позиция, 1);
		СимволНайден = (Лев(Строка, 1) = Символ) Или (Прав(Строка,1) = Символ);
		Если СимволНайден Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция СтрокаСодержитТолькоДопустимыеСимволы(Строка, ДопустимыеСимволы)
	МассивСимволов = Новый Массив;
	Для Позиция = 1 По СтрДлина(ДопустимыеСимволы) Цикл
		МассивСимволов.Добавить(Сред(ДопустимыеСимволы, Позиция, 1));
	КонецЦикла;
	
	Для Позиция = 1 По СтрДлина(Строка) Цикл
		Если МассивСимволов.Найти(Сред(Строка, Позиция, 1)) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

#КонецОбласти

&НаСервереБезКонтекста
Функция ТекстовыйДокументИзВременногоХранилищаФайла(АдресФайла, Кодировка) Экспорт
	
	ИмяВременногоФайла  = ПолучитьИмяВременногоФайла("txt");
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
	ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
	Текст = Новый ТекстовыйДокумент();
	Если Кодировка = "DOS" Тогда
		Кодир = "cp866";
	ИначеЕсли Кодировка = "UTF8" Тогда
		Кодир = "utf-8";
	Иначе
		Кодир = "windows-1251";
	КонецЕсли;
	
	Текст.Прочитать(ИмяВременногоФайла, Кодир);
	
	Возврат Текст;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ОбработатьЗавершениеВыгрузки()
	
	ЕстьФайлыДляСохранения = Ложь;
	ЕстьНеобходимостьОбновленияСпискаПлатежей = Ложь;
	ЕстьНевыполненныеЗадания = Ложь;
	
	Для каждого Счет из Объект.ТаблицаСчетов Цикл
		Если Счет.Выгружается И ЗначениеЗаполнено(Счет.ИдентификаторВыгрузки) Тогда
			Если ЗаданиеВыполнено(Счет.ИдентификаторВыгрузки) Тогда
				Счет.Выгружается = Ложь;
				Счет.СохранитьФайл = Истина;
			Иначе
				ЕстьНевыполненныеЗадания = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Счет из Объект.ТаблицаСчетов Цикл
		Если Счет.СохранитьФайл Тогда
			ЕстьФайлыДляСохранения = Истина;
			Если Счет.Пометка Тогда
				ЕстьНеобходимостьОбновленияСпискаПлатежей = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьФайлыДляСохранения Тогда
		СохранитьФайлы();
	КонецЕсли;
	
	Если ЕстьНевыполненныеЗадания Тогда
		ПодключитьОбработчикОжидания("ОбработатьЗавершениеВыгрузки", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#Область ПроцедурыРаботаМеханизмаДлительныхОпераций

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияПрочитатьФайлВыписки()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			ОбработатьРезультатПрочитаннойВыписки(АдресХранилища);
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗаданияПрочитатьФайлВыписки",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияЗагрузкаВыписки()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			АктуализироватьДокументыКИмпорту(АдресХранилища);
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗаданияЗагрузкаВыписки",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
