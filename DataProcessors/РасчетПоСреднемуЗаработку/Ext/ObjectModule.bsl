#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
Перем ТаблицаКалендаря;
Перем ПроизводственныйКалендарь;

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Выбирает из базы данные о среднем заработке
//
// Параметры:
// 	СпособРасчета - значение перечисления СпособыРасчетаОплатыТруда, определяет какой вид заработка считать
//
Процедура РассчитатьСреднийЗаработок(СпособРасчета) Экспорт

	Если ДатаНачала < ПроведениеРасчетовСервер.ПолучитьДатуНачалаРасчетаСреднегоЗаработкаТолькоПоРабочимДням() Тогда
		РассчитатьСреднийЗаработокДо29_12_2007(СпособРасчета);
	Иначе
		РассчитатьСреднийЗаработокПосле_29_12_2007(СпособРасчета);
	КонецЕсли;
	
КонецПроцедуры

// Рассчитывает средний заработок согласно Инструкции 1942 от 29.12.2000 
// (отпускные - по календарным дням, больничные - по рабочим)
// Действовала до ввода Инстркции № 1394 от 29.12.2007.
//
Процедура РассчитатьСреднийЗаработокДо29_12_2007(СпособРасчета)

	СреднийЗаработок.Очистить();
	
	ДатыРасчетногоПериода           = Обработки.РасчетПоСреднемуЗаработку.ПолучитьДатыРасчетногоПериода(Организация, Сотрудник, ДатаНачала);
	ДатаНачалаРасчетногоПериода 	= ДатыРасчетногоПериода.ДатаНачалаРасчетногоПериода;
	ДатаОкончанияРасчетногоПериода 	= ДатыРасчетногоПериода.ДатаОкончанияРасчетногоПериода;
	
	Если ДатаОкончанияРасчетногоПериода < ДатаНачалаРасчетногоПериода Тогда
		// если расчет среднего заработка производится за период, когда работник еще не работал, 
		// например, принес больничный лист в первый же месяц работы и предыдущих 12 месяцев еще нет
		ВызватьИсключение НСтр("ru = 'Отсутствует период для расчета среднего заработка, необходимо ввести данные о среднем заработке вручную'");
	КонецЕсли;
	
	Если НЕ ПроцедурыУправленияПерсоналомСервер.РегламентированныйКалендарьЗаполнен(НачалоМесяца(ДатаНачалаРасчетногоПериода), КонецМесяца(ДатаОкончанияРасчетногоПериода)) Тогда
		ТекстИсключения = НСтр("ru = 'Не заполнен регламентированный производственный календарь за %1'");
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИсключения, Формат(НачалоМесяца(ДатаНачалаРасчетногоПериода), "ДФ='гггг'"));
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска Тогда
		ОсновнойВидРасчета = Начисления[0].ВидРасчета; // считаем, что база сред. заработка у всех отпусков одинаковая
	Иначе
		ОсновнойВидРасчета = ВидРасчета; // больничный берем из шапки
	КонецЕсли;
	
	Если ОсновнойВидРасчета.БазовыеВидыРасчета.Количество() = 0 Тогда
		ТекстИсключения = НСтр("ru = 'Для вида расчета %1 не указаны базовые виды расчета'");
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИсключения, ОсновнойВидРасчета.Наименование);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ОсновнойВидРасчета", ОсновнойВидРасчета);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Организация));
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачалаРасчетногоПериода);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончанияРасчетногоПериода);
	Запрос.УстановитьПараметр("ДатаНачалаСобытия", ДатаНачала);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("Праздник", Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("Премия", Перечисления.ВидыПремии.Премия);
	Запрос.УстановитьПараметр("ПоСреднемуЗаработкуДляОтпуска", Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска);
	Запрос.УстановитьПараметр("ПоСреднемуЗаработкуДляБольничных", Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных);
	Запрос.УстановитьПараметр("БезИндексации", Перечисления.СоставныеЧастиЗаработкаДляРасчетаСреднего.НеИндексируемыйЗаработок);
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", ПроизводственныйКалендарь);
	
	УчетнаяПолитикаПоПерсоналуОрганизацииТаблица = ПолныеПраваПовтИсп.СформироватьТаблицуУчетнойПолитикиПоПерсоналу();		
	Запрос.УстановитьПараметр("парамУчетнаяПолитикаПоПерсоналуОрганизации", УчетнаяПолитикаПоПерсоналуОрганизацииТаблица);		
	
	// выберем все повышающие коэффициенты за период с даты начала расчетного периода по дату начала события (кроме самой даты начала события)
	ПериодыИндексацииТекст = "";
	ТекущийКоэффициент = 1;
	ТекущаяДата = ДатаОкончанияРасчетногоПериода;
	ИндексПараметра = 0;
	
	Если ДатаНачала >= ПолучитьДатуНачалаРасчетаСреднегоЗаработкаСУчетомИндексации() Тогда
		// надо применять коэффициент индексации
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КоэффициентыИндексацииЗаработка.Период,
		|	КоэффициентыИндексацииЗаработка.Коэффициент
		|ИЗ
		|	РегистрСведений.КоэффициентыИндексацииЗаработка КАК КоэффициентыИндексацииЗаработка
		|ГДЕ
		|	КоэффициентыИндексацииЗаработка.Организация = &ГоловнаяОрганизация
		|	И КоэффициентыИндексацииЗаработка.Сотрудник = &Сотрудник
		|	И КоэффициентыИндексацииЗаработка.Период >= &ДатаНачала
		|	И КоэффициентыИндексацииЗаработка.Период < &ДатаНачалаСобытия
		|	И КоэффициентыИндексацииЗаработка.Активность
		|УПОРЯДОЧИТЬ ПО
		|	КоэффициентыИндексацииЗаработка.Период УБЫВ // с конца в начало
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		// составим текст запроса для разделения расчетного периода по периодам коэффициента индексации
		Пока Выборка.Следующий() Цикл
			Если Выборка.Период > ДатаОкончанияРасчетногоПериода Тогда
				// повышение после окончания расчетного периода до даты начала события - просто увеличиваем коэффициент
				ТекущийКоэффициент = ТекущийКоэффициент * Выборка.Коэффициент;
			Иначе
				// повышение в расчетном периоде
				ИндексПараметра = ИндексПараметра + 1;
				Если Не ПустаяСтрока(ПериодыИндексацииТекст) Тогда
					ПериодыИндексацииТекст = ПериодыИндексацииТекст + "
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|";
				КонецЕсли;
				ПериодыИндексацииТекст = ПериодыИндексацииТекст + "
				|ВЫБРАТЬ
				|	ДАТАВРЕМЯ(" + Формат(Выборка.Период, "ДФ=гггг,М,д,Ч,м,с") + ") КАК ДатаНачала,
				|	ДАТАВРЕМЯ(" + Формат(ТекущаяДата, "ДФ=гггг,М,д,Ч,м,с") + ") КАК ДатаОкончания,
				|	&парамКоэффициентИндексации" + Формат(ИндексПараметра, "ЧГ=") + " КАК КоэффициентИндексации
				|";
				
				Если ИндексПараметра = 1 Тогда
					ПериодыИндексацииТекст = ПериодыИндексацииТекст + "
					|ПОМЕСТИТЬ ВТПериодыИндексации";
				КонецЕсли;
				
				Запрос.УстановитьПараметр("парамКоэффициентИндексации" + Формат(ИндексПараметра, "ЧГ="), ТекущийКоэффициент);
				
				ТекущийКоэффициент = ТекущийКоэффициент * Выборка.Коэффициент;
				ТекущаяДата = Выборка.Период - 1; 
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// коэффициент индексации за период с начала расчетного периода до первого повышения
	Если ТекущаяДата > ДатаНачалаРасчетногоПериода Тогда
		ИндексПараметра = ИндексПараметра + 1;
		Если Не ПустаяСтрока(ПериодыИндексацииТекст) Тогда
			ПериодыИндексацииТекст = ПериодыИндексацииТекст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		ПериодыИндексацииТекст = ПериодыИндексацииТекст + "
		|ВЫБРАТЬ
		|	ДАТАВРЕМЯ(" + Формат(ДатаНачалаРасчетногоПериода, "ДФ=гггг,М,д,Ч,м,с") + ") КАК ДатаНачала,
		|	ДАТАВРЕМЯ(" + Формат(ТекущаяДата, "ДФ=гггг,М,д,Ч,м,с") + ") КАК ДатаОкончания,
		|	&парамКоэффициентИндексации" + Формат(ИндексПараметра, "ЧГ=") + " КАК КоэффициентИндексации
		|";
		
		Если ИндексПараметра = 1 Тогда
			ПериодыИндексацииТекст = ПериодыИндексацииТекст + "
			|ПОМЕСТИТЬ ВТПериодыИндексации";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("парамКоэффициентИндексации" + Формат(ИндексПараметра, "ЧГ="), ТекущийКоэффициент);
	КонецЕсли;
	
	// Если все-таки получилась пустая строка, то подставим текст запроса за весь период
	Если ПустаяСтрока(ПериодыИндексацииТекст) Тогда
		ПериодыИндексацииТекст = "
		|ВЫБРАТЬ
		|	ДАТАВРЕМЯ(" + Формат(ДатаНачалаРасчетногоПериода, "ДФ=гггг,М,д,Ч,м,с") + ") КАК ДатаНачала,
		|	ДАТАВРЕМЯ(" + Формат(ДатаОкончанияРасчетногоПериода, "ДФ=гггг,М,д,Ч,м,с") + ") КАК ДатаОкончания,
		|	1 КАК КоэффициентИндексации
		|ПОМЕСТИТЬ ВТПериодыИндексации";
	КонецЕсли;
	
	// выбираем данные для расчета среднего заработка
	Запрос.Текст = ПериодыИндексацииТекст + ОбщегоНазначенияБКВызовСервера.ТекстРазделителяЗапросовПакета() +
	"ВЫБРАТЬ
	|	УчетнаяПолитика.Организация,
	|	УчетнаяПолитика.ВедениеУчетаПоГоловнойОрганизации
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитикаПоПерсоналуОрганизации
	|ИЗ
	|	&парамУчетнаяПолитикаПоПерсоналуОрганизации КАК УчетнаяПолитика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПроизводственногоКалендаря.Дата,
	|	СУММА(ВЫБОР
	|			КОГДА НачислениеЗарплаты.Результат < 0
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ПризнакДня
	|ПОМЕСТИТЬ ВТИсключаемыеДаты
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК НачислениеЗарплаты
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоПерсоналуОрганизации КАК ВТ_УчетнаяПолитикаПоПерсоналуОрганизации
	|			ПО НачислениеЗарплаты.Ссылка.Организация = ВТ_УчетнаяПолитикаПоПерсоналуОрганизации.Организация
	|		ПО (ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь)
	|			И (ДанныеПроизводственногоКалендаря.Дата МЕЖДУ НачислениеЗарплаты.ДатаНачала И НачислениеЗарплаты.ДатаОкончания)
	|			И (НачислениеЗарплаты.Ссылка.Проведен)
	|			И (НачислениеЗарплаты.Сотрудник = &Сотрудник)
	|			И (ВЫБОР
	|				КОГДА НачислениеЗарплаты.Ссылка.Организация.ГоловнаяОрганизация = &ПустаяОрганизация
	|						ИЛИ НЕ ВТ_УчетнаяПолитикаПоПерсоналуОрганизации.ВедениеУчетаПоГоловнойОрганизации
	|					ТОГДА НачислениеЗарплаты.Ссылка.Организация
	|				ИНАЧЕ НачислениеЗарплаты.Ссылка.Организация.ГоловнаяОрганизация
	|			КОНЕЦ = &ГоловнаяОрганизация)
	|			И (НачислениеЗарплаты.ДатаНачала МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			И (НачислениеЗарплаты.ВидРасчета.СпособРасчета В (&ПоСреднемуЗаработкуДляОтпуска, &ПоСреднемуЗаработкуДляБольничных))
	|			И (НЕ НачислениеЗарплаты.ВидРасчета.ЯвляетсяКомпенсациейЗаНеиспользованныйОтпуск)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеПроизводственногоКалендаря.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПериодыИндексации.ДатаНачала > НАЧАЛОПЕРИОДА(Календарь.Дата, МЕСЯЦ)
	|			ТОГДА ПериодыИндексации.ДатаНачала
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(Календарь.Дата, МЕСЯЦ)
	|	КОНЕЦ КАК БазовыйПериодНачало,
	|	ВЫБОР
	|		КОГДА ПериодыИндексации.ДатаОкончания < КОНЕЦПЕРИОДА(Календарь.Дата, МЕСЯЦ)
	|			ТОГДА ПериодыИндексации.ДатаОкончания
	|		ИНАЧЕ КОНЕЦПЕРИОДА(Календарь.Дата, МЕСЯЦ)
	|	КОНЕЦ КАК БазовыйПериодКонец,
	|	ПериодыИндексации.КоэффициентИндексации,
	|	СУММА(ВЫБОР
	|			КОГДА Календарь.ВидДня <> &Праздник
	|					И ЕСТЬNULL(ИсключаемыеДаты.ПризнакДня, 0) = 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Дни
	|ПОМЕСТИТЬ ВТПериоды
	|ИЗ
	|	ВТПериодыИндексации КАК ПериодыИндексации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК Календарь
	|		ПО (Календарь.ПроизводственныйКалендарь = &ПроизводственныйКалендарь)
	|			И (Календарь.Дата МЕЖДУ ПериодыИндексации.ДатаНачала И ПериодыИндексации.ДатаОкончания)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсключаемыеДаты КАК ИсключаемыеДаты
	|		ПО (Календарь.Дата = ИсключаемыеДаты.Дата)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ПериодыИндексации.ДатаНачала > НАЧАЛОПЕРИОДА(Календарь.Дата, МЕСЯЦ)
	|			ТОГДА ПериодыИндексации.ДатаНачала
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(Календарь.Дата, МЕСЯЦ)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ПериодыИндексации.ДатаОкончания < КОНЕЦПЕРИОДА(Календарь.Дата, МЕСЯЦ)
	|			ТОГДА ПериодыИндексации.ДатаОкончания
	|		ИНАЧЕ КОНЕЦПЕРИОДА(Календарь.Дата, МЕСЯЦ)
	|	КОНЕЦ,
	|	ПериодыИндексации.КоэффициентИндексации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачислениеЗарплаты.Ссылка КАК Ссылка,
	|	НачислениеЗарплаты.НомерСтроки КАК НомерСтроки,
	|	МАКСИМУМ(ПериодыИндексации.ДатаНачала) КАК БазовыйПериодНачало
	|ПОМЕСТИТЬ ВТДатаБлижайщейИндексации
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК НачислениеЗарплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоПерсоналуОрганизации КАК ВТ_УчетнаяПолитикаПоПерсоналуОрганизации
	|		ПО НачислениеЗарплаты.Ссылка.Организация = ВТ_УчетнаяПолитикаПоПерсоналуОрганизации.Организация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыИндексации КАК ПериодыИндексации
	|		ПО (ВЫБОР
	|				КОГДА НАЧАЛОПЕРИОДА(НачислениеЗарплаты.ДатаНачала, МЕСЯЦ) = НачислениеЗарплаты.Ссылка.ПериодРегистрации
	|						И НАЧАЛОПЕРИОДА(НачислениеЗарплаты.ДатаОкончания, МЕСЯЦ) = НачислениеЗарплаты.Ссылка.ПериодРегистрации
	|					ТОГДА НачислениеЗарплаты.ДатаНачала
	|				ИНАЧЕ НачислениеЗарплаты.Ссылка.ПериодРегистрации
	|			КОНЕЦ >= ПериодыИндексации.ДатаНачала)
	|ГДЕ
	|	НачислениеЗарплаты.Ссылка.Проведен
	|	И НачислениеЗарплаты.Ссылка.ПериодРегистрации МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачала, МЕСЯЦ) И &ДатаОкончания
	|	И НачислениеЗарплаты.Сотрудник = &Сотрудник
	|	И ВЫБОР
	|			КОГДА НачислениеЗарплаты.Ссылка.Организация.ГоловнаяОрганизация = &ПустаяОрганизация
	|					ИЛИ НЕ ВТ_УчетнаяПолитикаПоПерсоналуОрганизации.ВедениеУчетаПоГоловнойОрганизации
	|				ТОГДА НачислениеЗарплаты.Ссылка.Организация
	|			ИНАЧЕ НачислениеЗарплаты.Ссылка.Организация.ГоловнаяОрганизация
	|		КОНЕЦ = &ГоловнаяОрганизация
	|
	|СГРУППИРОВАТЬ ПО
	|	НачислениеЗарплаты.Ссылка,
	|	НачислениеЗарплаты.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БазовыеВидыРасчета.ВидРасчета КАК ВидРасчета
	|ПОМЕСТИТЬ ВТБазовыеВидыРасчета
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.БазовыеВидыРасчета КАК БазовыеВидыРасчета
	|ГДЕ
	|	БазовыеВидыРасчета.Ссылка = &ОсновнойВидРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПериодыИндексации.ДатаНачала > НАЧАЛОПЕРИОДА(НачислениеЗарплаты.Ссылка.ПериодРегистрации, МЕСЯЦ)
	|			ТОГДА ПериодыИндексации.ДатаНачала
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(НачислениеЗарплаты.Ссылка.ПериодРегистрации, МЕСЯЦ)
	|	КОНЕЦ КАК БазовыйПериодНачало,
	|	ВЫБОР
	|		КОГДА ПериодыИндексации.ДатаОкончания < КОНЕЦПЕРИОДА(НачислениеЗарплаты.Ссылка.ПериодРегистрации, МЕСЯЦ)
	|			ТОГДА ПериодыИндексации.ДатаОкончания
	|		ИНАЧЕ КОНЕЦПЕРИОДА(НачислениеЗарплаты.Ссылка.ПериодРегистрации, МЕСЯЦ)
	|	КОНЕЦ КАК БазовыйПериодКонец,
	|	ВЫБОР
	|		КОГДА НачислениеЗарплаты.ВидРасчета.УчетЗаработкаПриРасчетеСреднего = &БезИндексации
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеИндексируемыйЗаработок,
	|	ВЫБОР
	|		КОГДА НачислениеЗарплаты.ВидРасчета.ВидПремии = &Премия
	|			ТОГДА ВЫБОР
	|					КОГДА НачислениеЗарплаты.ВидРасчета.УчетЗаработкаПриРасчетеСреднего = &БезИндексации
	|						ТОГДА ""Премия без индексации""
	|					ИНАЧЕ ""Премия""
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НачислениеЗарплаты.ВидРасчета.УчетЗаработкаПриРасчетеСреднего = &БезИндексации
	|					ТОГДА ""Заработок без индексации""
	|				ИНАЧЕ ""Заработок""
	|			КОНЕЦ
	|	КОНЕЦ КАК ВидСтроки,
	|	ВЫБОР
	|		КОГДА НачислениеЗарплаты.ВидРасчета.ВидПремии = &Премия
	|			ТОГДА НАЧАЛОПЕРИОДА(НачислениеЗарплаты.ДатаНачала, МЕСЯЦ)
	|		ИНАЧЕ &ПустаяДата
	|	КОНЕЦ КАК ДатаНачалаПериодаПремии,
	|	ВЫБОР
	|		КОГДА НачислениеЗарплаты.ВидРасчета.ВидПремии = &Премия
	|			ТОГДА КОНЕЦПЕРИОДА(НачислениеЗарплаты.ДатаОкончания, МЕСЯЦ)
	|		ИНАЧЕ &ПустаяДата
	|	КОНЕЦ КАК ДатаОкончанияПериодаПремии,
	|	ВЫБОР
	|		КОГДА НачислениеЗарплаты.ВидРасчета.УчетЗаработкаПриРасчетеСреднего = &БезИндексации
	|			ТОГДА 1
	|		ИНАЧЕ ПериодыИндексации.КоэффициентИндексации
	|	КОНЕЦ КАК КоэффициентИндексации,
	|	СУММА(НачислениеЗарплаты.Результат) КАК Размер,
	|	СУММА(ВЫБОР
	|			КОГДА НачислениеЗарплаты.ВидРасчета.ЗачетОтработанногоВремени
	|				ТОГДА НачислениеЗарплаты.ОтработаноДней * ВЫБОР
	|						КОГДА НачислениеЗарплаты.Результат < 0
	|							ТОГДА -1
	|						ИНАЧЕ 1
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Дни,
	|	СУММА(ВЫБОР
	|			КОГДА НачислениеЗарплаты.ВидРасчета.ЗачетОтработанногоВремени
	|				ТОГДА НачислениеЗарплаты.ОтработаноЧасов * ВЫБОР
	|						КОГДА НачислениеЗарплаты.Результат < 0
	|							ТОГДА -1
	|						ИНАЧЕ 1
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Часы
	|ПОМЕСТИТЬ ВТДанныеОЗаработке
	|ИЗ
	|	ВТДатаБлижайщейИндексации КАК ДатаБлижайщейИндексации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыИндексации КАК ПериодыИндексации
	|		ПО ДатаБлижайщейИндексации.БазовыйПериодНачало = ПериодыИндексации.ДатаНачала
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК НачислениеЗарплаты
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоПерсоналуОрганизации КАК ВТ_УчетнаяПолитикаПоПерсоналуОрганизации
	|			ПО НачислениеЗарплаты.Ссылка.Организация = ВТ_УчетнаяПолитикаПоПерсоналуОрганизации.Организация
	|		ПО ДатаБлижайщейИндексации.Ссылка = НачислениеЗарплаты.Ссылка
	|			И ДатаБлижайщейИндексации.НомерСтроки = НачислениеЗарплаты.НомерСтроки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБазовыеВидыРасчета КАК БазовыеВидыРасчета
	|		ПО (НачислениеЗарплаты.ВидРасчета = БазовыеВидыРасчета.ВидРасчета)
	|ГДЕ
	|	НачислениеЗарплаты.Ссылка.Проведен
	|	И НачислениеЗарплаты.Ссылка.ПериодРегистрации МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачала, МЕСЯЦ) И &ДатаОкончания
	|	И НачислениеЗарплаты.Сотрудник = &Сотрудник
	|	И ВЫБОР
	|			КОГДА НачислениеЗарплаты.Ссылка.Организация.ГоловнаяОрганизация = &ПустаяОрганизация
	|					ИЛИ НЕ ВТ_УчетнаяПолитикаПоПерсоналуОрганизации.ВедениеУчетаПоГоловнойОрганизации
	|				ТОГДА НачислениеЗарплаты.Ссылка.Организация
	|			ИНАЧЕ НачислениеЗарплаты.Ссылка.Организация.ГоловнаяОрганизация
	|		КОНЕЦ = &ГоловнаяОрганизация
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ПериодыИндексации.ДатаНачала > НАЧАЛОПЕРИОДА(НачислениеЗарплаты.Ссылка.ПериодРегистрации, МЕСЯЦ)
	|			ТОГДА ПериодыИндексации.ДатаНачала
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(НачислениеЗарплаты.Ссылка.ПериодРегистрации, МЕСЯЦ)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ПериодыИндексации.ДатаОкончания < КОНЕЦПЕРИОДА(НачислениеЗарплаты.Ссылка.ПериодРегистрации, МЕСЯЦ)
	|			ТОГДА ПериодыИндексации.ДатаОкончания
	|		ИНАЧЕ КОНЕЦПЕРИОДА(НачислениеЗарплаты.Ссылка.ПериодРегистрации, МЕСЯЦ)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НачислениеЗарплаты.ВидРасчета.УчетЗаработкаПриРасчетеСреднего = &БезИндексации
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НачислениеЗарплаты.ВидРасчета.ВидПремии = &Премия
	|			ТОГДА ВЫБОР
	|					КОГДА НачислениеЗарплаты.ВидРасчета.УчетЗаработкаПриРасчетеСреднего = &БезИндексации
	|						ТОГДА ""Премия без индексации""
	|					ИНАЧЕ ""Премия""
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НачислениеЗарплаты.ВидРасчета.УчетЗаработкаПриРасчетеСреднего = &БезИндексации
	|					ТОГДА ""Заработок без индексации""
	|				ИНАЧЕ ""Заработок""
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НачислениеЗарплаты.ВидРасчета.ВидПремии = &Премия
	|			ТОГДА НАЧАЛОПЕРИОДА(НачислениеЗарплаты.ДатаНачала, МЕСЯЦ)
	|		ИНАЧЕ &ПустаяДата
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НачислениеЗарплаты.ВидРасчета.ВидПремии = &Премия
	|			ТОГДА КОНЕЦПЕРИОДА(НачислениеЗарплаты.ДатаОкончания, МЕСЯЦ)
	|		ИНАЧЕ &ПустаяДата
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НачислениеЗарплаты.ВидРасчета.УчетЗаработкаПриРасчетеСреднего = &БезИндексации
	|			ТОГДА 1
	|		ИНАЧЕ ПериодыИндексации.КоэффициентИндексации
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Периоды.БазовыйПериодНачало,
	|	Периоды.БазовыйПериодКонец,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеОЗаработке.НеИндексируемыйЗаработок, ЛОЖЬ)
	|			ТОГДА 0
	|		ИНАЧЕ Периоды.Дни
	|	КОНЕЦ КАК КалендарныеДни,
	|	ЕСТЬNULL(ДанныеОЗаработке.ДатаНачалаПериодаПремии, &ПустаяДата) КАК ДатаНачалаПериодаПремии,
	|	ЕСТЬNULL(ДанныеОЗаработке.ДатаОкончанияПериодаПремии, &ПустаяДата) КАК ДатаОкончанияПериодаПремии,
	|	ЕСТЬNULL(ДанныеОЗаработке.ВидСтроки, ""Заработок"") КАК ВидСтроки,
	|	ЕСТЬNULL(ДанныеОЗаработке.КоэффициентИндексации, Периоды.КоэффициентИндексации) КАК КоэффициентИндексации,
	|	ЕСТЬNULL(ДанныеОЗаработке.Размер, 0) КАК Размер,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеОЗаработке.НеИндексируемыйЗаработок, ЛОЖЬ)
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ДанныеОЗаработке.Дни, 0)
	|	КОНЕЦ КАК РабочиеДни,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеОЗаработке.НеИндексируемыйЗаработок, ЛОЖЬ)
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ДанныеОЗаработке.Часы, 0)
	|	КОНЕЦ КАК РабочиеЧасы
	|ИЗ
	|	ВТПериоды КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОЗаработке КАК ДанныеОЗаработке
	|		ПО Периоды.БазовыйПериодНачало = ДанныеОЗаработке.БазовыйПериодНачало
	|			И Периоды.БазовыйПериодКонец = ДанныеОЗаработке.БазовыйПериодКонец
	|
	|УПОРЯДОЧИТЬ ПО
	|	Периоды.БазовыйПериодНачало,
	|	ДанныеОЗаработке.ВидСтроки";
	
	// получим структуру табличной части
	ТЗСреднийЗаработок = СреднийЗаработок.Выгрузить();
	
	ПервыйМесяцПремии = '29991231';
	ПоследнийМесяцПремии = '00010101';
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТЗСреднийЗаработок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если Найти(Выборка.ВидСтроки, "Премия") = 0 Тогда
			Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска Тогда
				НоваяСтрока.Дни 	= Выборка.КалендарныеДни;
			Иначе
				НоваяСтрока.Дни 	= Выборка.РабочиеДни;
				НоваяСтрока.Часы 	= Выборка.РабочиеЧасы;
			КонецЕсли;
			НоваяСтрока.Результат 	= Выборка.Размер * Выборка.КоэффициентИндексации;
		Иначе
			// премию разбиваем на периоды, за которые начислена премия
			Если ЗначениеЗаполнено(Выборка.ДатаНачалаПериодаПремии)
					И ЗначениеЗаполнено(Выборка.ДатаОкончанияПериодаПремии) Тогда
					
				ПервыйМесяцПремии = Мин(ПервыйМесяцПремии, Выборка.ДатаНачалаПериодаПремии);
				ПоследнийМесяцПремии = Макс(ПоследнийМесяцПремии, Выборка.ДатаОкончанияПериодаПремии);
				
				ПериодПремииВМесяцах = Месяц(Выборка.ДатаОкончанияПериодаПремии) + 12 * Год(Выборка.ДатаОкончанияПериодаПремии) - 
										Месяц(Выборка.ДатаНачалаПериодаПремии) - 12 * Год(Выборка.ДатаНачалаПериодаПремии) + 1;
				
				ПервыйМесяцПремииВРасчетномПериоде	 = Макс(Выборка.ДатаНачалаПериодаПремии, ДатаНачалаРасчетногоПериода);
				ПоследнийМесяцПремииВРасчетномПериоде= Мин(Выборка.ДатаОкончанияПериодаПремии, ДатаОкончанияРасчетногоПериода);
										
				МесяцевПериодаПремииВРасчетномПериоде = Месяц(ПоследнийМесяцПремииВРасчетномПериоде) + 12 * Год(ПоследнийМесяцПремииВРасчетномПериоде) - 
															Месяц(ПервыйМесяцПремииВРасчетномПериоде) - 12 * Год(ПервыйМесяцПремииВРасчетномПериоде) + 1;

				ТекущийМесяц = Выборка.ДатаНачалаПериодаПремии;
				ДатаОкончанияПериодаПремии = Выборка.ДатаОкончанияПериодаПремии;
				РезультатКРаспределению = Выборка.Размер * МесяцевПериодаПремииВРасчетномПериоде / ПериодПремииВМесяцах;
				РезультатРаспределено = 0;
				ПоследняяСтрока = Неопределено;
					
				Пока ТекущийМесяц < ДатаОкончанияПериодаПремии Цикл
					
					Если ТекущийМесяц = НоваяСтрока.ДатаНачалаПериодаПремии Тогда
						// корректируем результат в самой первой строке движения
						ДопСтрока = НоваяСтрока;
					Иначе
						// добавляем новую строку
						ДопСтрока = ТЗСреднийЗаработок.Добавить();
						ЗаполнитьЗначенияСвойств(ДопСтрока, Выборка);
					КонецЕсли;
					
					Если ТекущийМесяц >= ПервыйМесяцПремииВРасчетномПериоде И ТекущийМесяц <= ПоследнийМесяцПремииВРасчетномПериоде Тогда
						ДопСтрока.Результат = РезультатКРаспределению / МесяцевПериодаПремииВРасчетномПериоде;
						ПоследняяСтрока = ДопСтрока;
					Иначе
						// этот месяц из периода премии не попадает в расчетный период
						ДопСтрока.Результат = 0;
					КонецЕсли;
					ДопСтрока.ЧислоМесяцев = ПериодПремииВМесяцах;
					ДопСтрока.ДатаНачалаПериодаПремии = ТекущийМесяц;
					ДопСтрока.ДатаОкончанияПериодаПремии = КонецМесяца(ТекущийМесяц);
					
					РезультатРаспределено = РезультатРаспределено + ДопСтрока.Результат;
				
					ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, 1);
					
				КонецЦикла;
				
				// ошибки округления на последнюю запись
				Если ПоследняяСтрока <> Неопределено Тогда
					ПоследняяСтрока.Результат = ПоследняяСтрока.Результат + РезультатКРаспределению - РезультатРаспределено;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТЗСреднийЗаработок.Сортировать("БазовыйПериодНачало, ВидСтроки, ЧислоМесяцев, ДатаНачалаПериодаПремии");
	
	Если ПервыйМесяцПремии < ПоследнийМесяцПремии И ДатаНачала >= ПолучитьДатуНачалаРасчетаСреднегоЗаработкаСУчетомИндексации() Тогда

		// составим запрос по всем месяцам, за которые начислялись премии
		ПериодыТекст = "";
		ТекущийМесяц = ПервыйМесяцПремии;
		Пока ТекущийМесяц < ПоследнийМесяцПремии Цикл
			Если Не ПустаяСтрока(ПериодыТекст) Тогда
				ПериодыТекст = ПериодыТекст + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|";
			КонецЕсли;
			
			ПериодыТекст = ПериодыТекст + "
			|ВЫБРАТЬ
			|	ДАТАВРЕМЯ(" + Формат(ТекущийМесяц, "ДФ=гггг,М,д,Ч,м,с") + ") КАК Период
			|";
			
			ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, 1);
		КонецЦикла;

		// для премий определим периоды индексации заработка по каждому месяцу, за который начислена премия
		// выбираем все повышения заработка после начала месяца, за который начислена премия, до даты события
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Периоды.Период,
		|	ЕСТЬNULL(КоэффициентыИндексацииЗаработка.Коэффициент, 1) КАК КоэффициентИндексации
		|ИЗ
		|	(" + ПериодыТекст + ") КАК Периоды
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоэффициентыИндексацииЗаработка КАК КоэффициентыИндексацииЗаработка
		|		ПО КоэффициентыИндексацииЗаработка.Организация = &ГоловнаяОрганизация
		|			И КоэффициентыИндексацииЗаработка.Сотрудник = &Сотрудник
		|			И КоэффициентыИндексацииЗаработка.Период > Периоды.Период
		|			И КоэффициентыИндексацииЗаработка.Период < &ДатаНачалаСобытия
		|			И КоэффициентыИндексацииЗаработка.Активность
		|
		|УПОРЯДОЧИТЬ ПО
		|	Периоды.Период,
		|	КоэффициентыИндексацииЗаработка.Период УБЫВ
		|";
			
		ВыборкаКоэффициентовИндексацииПремий = Запрос.Выполнить().Выбрать();
			
		СтруктураПоиска = Новый Структура("ВидСтроки, ДатаНачалаПериодаПремии", "Премия");		
		
		ЕстьДанные = ВыборкаКоэффициентовИндексацииПремий.Следующий();
		Пока ЕстьДанные Цикл
				
			ТекущийПериод = ВыборкаКоэффициентовИндексацииПремий.Период;
			ТекущийКоэффициент = 1;
				
			Пока ЕстьДанные 
					И ВыборкаКоэффициентовИндексацииПремий.Период = ТекущийПериод Цикл
					
				ТекущийКоэффициент = ТекущийКоэффициент * ВыборкаКоэффициентовИндексацииПремий.КоэффициентИндексации;
					
				ЕстьДанные = ВыборкаКоэффициентовИндексацииПремий.Следующий(); 
					
			КонецЦикла;
			
        	СтруктураПоиска.ДатаНачалаПериодаПремии = ТекущийПериод;
			
			НайденныеСтроки = ТЗСреднийЗаработок.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаТЗ Из НайденныеСтроки Цикл
				СтрокаТЗ.КоэффициентИндексации = ТекущийКоэффициент;
				СтрокаТЗ.Результат = СтрокаТЗ.Результат * ТекущийКоэффициент;
			КонецЦикла;
				
		КонецЦикла;
		
	КонецЕсли;
	
	// переносим в табличную часть обработки
	СреднийЗаработок.Загрузить(ТЗСреднийЗаработок);
	
КонецПроцедуры

// Рассчитывает средний заработок согласно Инструкции 1394 от 29.12.2007
// (и отпускные и больничные - по рабочим дням)
//
Процедура РассчитатьСреднийЗаработокПосле_29_12_2007(СпособРасчета) Экспорт

	СреднийЗаработок.Очистить();
	
	// Данные о среднем заработке должны содержать все начисления не зависимо от настроек РЛС,
	// поэтому для выполнения запросов устанавливаем привилигированный режим
	УстановитьПривилегированныйРежим(Истина);
	
	ДатыРасчетногоПериода           = Обработки.РасчетПоСреднемуЗаработку.ПолучитьДатыРасчетногоПериода(Организация, Сотрудник, ДатаНачала);
	ДатаНачалаРасчетногоПериода 	= ДатыРасчетногоПериода.ДатаНачалаРасчетногоПериода;
	ДатаОкончанияРасчетногоПериода 	= ДатыРасчетногоПериода.ДатаОкончанияРасчетногоПериода;
	
	ДатаНачалаПримененияКоэффициентаПоМесяцуПовышения = ПолучитьДатуНачалаПримененияКоэффициентаПоМесяцуПовышения();
	
	ПериодПоследнегоПеремещения = Дата('00010101000000');
		
	Если ДатаОкончанияРасчетногоПериода < ДатаНачалаРасчетногоПериода Тогда
		// если расчет среднего заработка производится за период, когда работник еще не работал, 
		// например, принес больничный лист в первый же месяц работы и предыдущих 12 месяцев еще нет
		ВызватьИсключение НСтр("ru = 'Отсутствует период для расчета среднего заработка, необходимо ввести данные о среднем заработке вручную'");
	КонецЕсли;

	ТекстИсключения = "";
	Если НЕ ПроцедурыУправленияПерсоналомСервер.РегламентированныйКалендарьЗаполнен(НачалоМесяца(ДатаНачалаРасчетногоПериода), КонецМесяца(ДатаОкончанияРасчетногоПериода), ТекстИсключения) Тогда
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска Тогда
		ОсновнойВидРасчета = Начисления[0].ВидРасчета; // считаем, что база сред. заработка у всех отпусков одинаковая
	Иначе
		ОсновнойВидРасчета = ВидРасчета; // больничный берем из шапки
	КонецЕсли;
	
	Если ОсновнойВидРасчета.БазовыеВидыРасчета.Количество() = 0 Тогда
		ТекстИсключения = НСтр("ru = 'Для вида расчета %1 не указаны базовые виды расчета'");
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИсключения, ОсновнойВидРасчета.Наименование);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ГоловнаяОрганизация = ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Организация);
	Запрос.УстановитьПараметр("ОсновнойВидРасчета", ОсновнойВидРасчета);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачалаРасчетногоПериода);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончанияРасчетногоПериода);
	Запрос.УстановитьПараметр("ДатаНачалаСобытия", ДатаНачала);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("Праздник", Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("Премия", Перечисления.ВидыПремии.Премия);
	Запрос.УстановитьПараметр("ПоСреднемуЗаработкуДляОтпуска", Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска);
	Запрос.УстановитьПараметр("ПоСреднемуЗаработкуДляБольничных", Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных);
	Запрос.УстановитьПараметр("БезИндексации", Перечисления.СоставныеЧастиЗаработкаДляРасчетаСреднего.НеИндексируемыйЗаработок);
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", ПроизводственныйКалендарь);
	
	УчетнаяПолитикаПоПерсоналуОрганизацииТаблица = ПолныеПраваПовтИсп.СформироватьТаблицуУчетнойПолитикиПоПерсоналу();		
	Запрос.УстановитьПараметр("парамУчетнаяПолитикаПоПерсоналуОрганизации", УчетнаяПолитикаПоПерсоналуОрганизацииТаблица);		
	
	ЗначениеУчетнойПолитики = УчетнаяПолитикаПоПерсоналуОрганизацииТаблица.Найти(ГоловнаяОрганизация, "Организация");
	Если ЗначениеУчетнойПолитики <> Неопределено Тогда
		УчитыватьКадровыеПерестановкиПриРасчетеСреднегоЗаработка       = ЗначениеУчетнойПолитики.УчитыватьКадровыеПерестановкиПриРасчетеСреднегоЗаработка;
		РасчетКоэффициентаНарастающимИтогом                            = ЗначениеУчетнойПолитики.РасчетКоэффициентаНарастающимИтогом;
		ВариантУчетаКадровыхПерестановок						       = ЗначениеУчетнойПолитики.ВариантУчетаКадровыхПерестановок;
		РассчитыватьКоэффициентИндексацииВПределахКадровыхПерестановок = ЗначениеУчетнойПолитики.РассчитыватьКоэффициентИндексацииВПределахКадровыхПерестановок;
	Иначе 
		УчитыватьКадровыеПерестановкиПриРасчетеСреднегоЗаработка       = Истина;
		РасчетКоэффициентаНарастающимИтогом                            = Ложь;
		РассчитыватьКоэффициентИндексацииВПределахКадровыхПерестановок = Истина;
		//ВариантУчетаКадровыхПерестановок						 = Перечисления.ВариантыУчетаКадровыхПерестановок.ПодразделениеИДолжность;
	КонецЕсли;
		
	Если УчитыватьКадровыеПерестановкиПриРасчетеСреднегоЗаработка Тогда
		
		ТекущееПодразделение = "";
		ТекущаяДолжность = "";
		
		КадровыеПерестановкиФизЛицТекст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РаботникиОрганизаций.Организация,
			|	РаботникиОрганизаций.Сотрудник,
			|	РаботникиОрганизаций.Период,
			|	РаботникиОрганизаций.ПодразделениеОрганизации,
			|	РаботникиОрганизаций.Должность
			|ПОМЕСТИТЬ ВТ_КадровыеПерестановкиФизЛиц
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
			|ГДЕ РаботникиОрганизаций.Сотрудник = &Сотрудник
			|	И РаботникиОрганизаций.Организация = &ГоловнаяОрганизация
			|	И РаботникиОрганизаций.Активность";
			
		Запрос.Текст = КадровыеПерестановкиФизЛицТекст;
		Запрос.Выполнить();
		КадровыеПерестановкиФизЛицТекст = "ВТ_КадровыеПерестановкиФизЛиц";
			
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	РаботникиОрганизаций.Сотрудник,
		               |	РаботникиОрганизаций.Организация,
		               |	РаботникиОрганизаций.Период,
		               |	РаботникиОрганизаций.ПодразделениеОрганизации,
		               |	РаботникиОрганизаций.Должность
		               |ИЗ
		               |	" + КадровыеПерестановкиФизЛицТекст + " КАК РаботникиОрганизаций
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |			РаботникиОрганизаций.Сотрудник КАК Сотрудник,
		               |			РаботникиОрганизаций.Организация КАК Организация,
		               |			МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период
		               |		ИЗ
		               |			" + КадровыеПерестановкиФизЛицТекст + " КАК РаботникиОрганизаций
		               |		ГДЕ	&ДатаНачала >= РаботникиОрганизаций.Период
		               |		
		               |		СГРУППИРОВАТЬ ПО
		               |			РаботникиОрганизаций.Сотрудник,
		               |			РаботникиОрганизаций.Организация) КАК КадровыеДанныеДоРасчетаСреднегоЗаработка
		               |		ПО РаботникиОрганизаций.Период = КадровыеДанныеДоРасчетаСреднегоЗаработка.Период
		               |			И РаботникиОрганизаций.Сотрудник = КадровыеДанныеДоРасчетаСреднегоЗаработка.Сотрудник
		               |			И РаботникиОрганизаций.Организация = КадровыеДанныеДоРасчетаСреднегоЗаработка.Организация";
					   
		ТекущееМестоРаботы = Запрос.Выполнить().Выбрать();
		Если ТекущееМестоРаботы.Следующий() Тогда
			ТекущееПодразделение = ТекущееМестоРаботы.ПодразделениеОрганизации;
			ТекущаяДолжность	 = ТекущееМестоРаботы.Должность;
		КонецЕсли;
		
		ПериодыПеремещенийТекст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
			|	РаботникиОрганизаций.Организация КАК Организация,
			|	РаботникиОрганизаций.Период КАК Период,
			|	" + ?(ВариантУчетаКадровыхПерестановок = Перечисления.ВариантыУчетаКадровыхПерестановок.ПодразделениеИДолжность,
				"РаботникиОрганизаций.ПодразделениеОрганизации КАК ПодразделениеОрганизации,","") + "
			|	
			|	РаботникиОрганизаций.Должность КАК Должность
			|ИЗ
			|	" + КадровыеПерестановкиФизЛицТекст + " КАК РаботникиОрганизаций
			|ГДЕ 
			|	РаботникиОрганизаций.Период < &ДатаНачалаСобытия
			|	И РаботникиОрганизаций.Период >= &ДатаНачала
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период
			|";

		Запрос.Текст = ПериодыПеремещенийТекст;
		ПеремещенияСотрудника = Запрос.Выполнить().Выбрать();
		
		// Определим последнюю дату смены места работы
	    КоличествоПеремещений = 0;
		МассивПериодовПеремещений = Новый Массив;
		
		Если ВариантУчетаКадровыхПерестановок = Перечисления.ВариантыУчетаКадровыхПерестановок.ПодразделениеИДолжность Тогда
			
			Пока ПеремещенияСотрудника.Следующий() Цикл
				Если ТекущееПодразделение <>  ПеремещенияСотрудника.ПодразделениеОрганизации
					Или ТекущаяДолжность <> ПеремещенияСотрудника.Должность Тогда
					
					Если ТекущееПодразделение <> "" И ТекущаяДолжность <> "" Тогда
						КоличествоПеремещений = КоличествоПеремещений + 1;
					КонецЕсли;
					
					ТекущееПодразделение 		= ПеремещенияСотрудника.ПодразделениеОрганизации;
					ТекущаяДолжность			= ПеремещенияСотрудника.Должность;
					МассивПериодовПеремещений.Добавить(ПеремещенияСотрудника.Период);
					ПериодПоследнегоПеремещения	= ПеремещенияСотрудника.Период;
				КонецЕсли;			
			КонецЦикла;
			
		ИначеЕсли ВариантУчетаКадровыхПерестановок = Перечисления.ВариантыУчетаКадровыхПерестановок.Должность Тогда
			
			Пока ПеремещенияСотрудника.Следующий() Цикл
				Если ТекущаяДолжность <> ПеремещенияСотрудника.Должность Тогда
					
					Если ТекущаяДолжность <> "" Тогда
						КоличествоПеремещений = КоличествоПеремещений + 1;
					КонецЕсли;
					
					ТекущаяДолжность			= ПеремещенияСотрудника.Должность;
					МассивПериодовПеремещений.Добавить(ПеремещенияСотрудника.Период);
					ПериодПоследнегоПеремещения	= ПеремещенияСотрудника.Период;
				КонецЕсли;			
			КонецЦикла;
		КонецЕсли;
	
	КонецЕсли;
	
	// выберем все повышающие коэффициенты за период с даты начала расчетного периода по дату начала события (кроме самой даты начала события)
	ПериодыИндексацииТекст = "";
	ТекущийКоэффициент = 1;
	ТекущаяДата = ДатаОкончанияРасчетногоПериода;
	ИндексПараметра = 0;
	
	// надо применять коэффициент индексации
	КоэффициентыИндексацииЗаработкаТекст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КоэффициентыИндексацииЗаработка.Период КАК Период,
	|	КоэффициентыИндексацииЗаработка.Коэффициент КАК Коэффициент
	|ИЗ
	|	РегистрСведений.КоэффициентыИндексацииЗаработка КАК КоэффициентыИндексацииЗаработка
	|ГДЕ
	|	КоэффициентыИндексацииЗаработка.Организация = &ГоловнаяОрганизация
	|	И КоэффициентыИндексацииЗаработка.Сотрудник = &Сотрудник
	|	И КоэффициентыИндексацииЗаработка.Период >= &ДатаНачала
	|	И КоэффициентыИндексацииЗаработка.Период < &ДатаНачалаСобытия
	|	И КоэффициентыИндексацииЗаработка.Активность";
	
	Если УчитыватьКадровыеПерестановкиПриРасчетеСреднегоЗаработка И КоличествоПеремещений > 0 Тогда
		
		Запрос.УстановитьПараметр("ПериодПоследнегоПеремещения", ПериодПоследнегоПеремещения);
		Запрос.УстановитьПараметр("МассивПериодовПеремещений", МассивПериодовПеремещений);
		
		Если НЕ РассчитыватьКоэффициентИндексацииВПределахКадровыхПерестановок Тогда
			КоэффициентыИндексацииЗаработкаТекст = КоэффициентыИндексацииЗаработкаТекст + "
			|	И КоэффициентыИндексацииЗаработка.Период > &ПериодПоследнегоПеремещения";
		Иначе 
			КоэффициентыИндексацииЗаработкаТекст = КоэффициентыИндексацииЗаработкаТекст + "
			|	И КоэффициентыИндексацииЗаработка.Период НЕ В(&МассивПериодовПеремещений)";
			
			Для Каждого ПериодПеремещений Из МассивПериодовПеремещений Цикл
				ИндексПараметра = ИндексПараметра + 1;
				Запрос.УстановитьПараметр("ПериодПеремещений" + Формат(ИндексПараметра, "ЧГ="), ПериодПеремещений);
				
				КоэффициентыИндексацииЗаработкаТекст = ?(ПериодПеремещений <> ПериодПоследнегоПеремещения, КоэффициентыИндексацииЗаработкаТекст + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ 
				|	&ПериодПеремещений" + Формат(ИндексПараметра, "ЧГ=") + " КАК Период,
				|	0 КАК Коэффициент
				|", КоэффициентыИндексацииЗаработкаТекст);
			КонецЦикла;

		КонецЕсли;
		
		КоэффициентыИндексацииЗаработкаТекст = КоэффициентыИндексацииЗаработкаТекст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	&ПериодПоследнегоПеремещения КАК Период,
		|	1 КАК Коэффициент
		|";
		
	КонецЕсли;
	
	КоэффициентыИндексацииЗаработкаТекст = КоэффициентыИндексацииЗаработкаТекст + "
	|УПОРЯДОЧИТЬ ПО
	|	КоэффициентыИндексацииЗаработка.Период УБЫВ // с конца в начало
	|";
	
	Запрос.Текст = КоэффициентыИндексацииЗаработкаТекст;
	ВыборкаКЭ = Запрос.Выполнить().Выбрать();
	
	ПерваяВыборка = Истина;
	ИндексПараметра = 0;
	// составим текст запроса для разделения расчетного периода по периодам коэффициента индексации
	Пока ВыборкаКЭ.Следующий() Цикл
		Если ВыборкаКЭ.Период > ДатаОкончанияРасчетногоПериода Тогда
			// повышение после окончания расчетного периода до даты начала события - просто увеличиваем коэффициент
			Если УчитыватьКадровыеПерестановкиПриРасчетеСреднегоЗаработка И 
				(РассчитыватьКоэффициентИндексацииВПределахКадровыхПерестановок И ВыборкаКЭ.Период = ПериодПоследнегоПеремещения)
				ИЛИ (НЕ РассчитыватьКоэффициентИндексацииВПределахКадровыхПерестановок И ВыборкаКЭ.Период <= ПериодПоследнегоПеремещения) Тогда
				ТекущийКоэффициент = 1;
			Иначе 
				Если ДатаНачала < ДатаНачалаПримененияКоэффициентаПоМесяцуПовышения 
					ИЛИ РасчетКоэффициентаНарастающимИтогом Тогда
					ТекущийКоэффициент = ТекущийКоэффициент * ВыборкаКЭ.Коэффициент;
				Иначе
					ТекущийКоэффициент = ВыборкаКЭ.Коэффициент;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			// повышение в расчетном периоде
			ИндексПараметра = ИндексПараметра + 1;
			Если Не ПустаяСтрока(ПериодыИндексацииТекст) Тогда
				ПериодыИндексацииТекст = ПериодыИндексацииТекст + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|";
			КонецЕсли;
			ПериодыИндексацииТекст = ПериодыИндексацииТекст + "
			|ВЫБРАТЬ
			|	ДАТАВРЕМЯ(" + Формат(ВыборкаКЭ.Период, "ДФ=гггг,М,д,Ч,м,с") + ") КАК ДатаНачала,
			|	ДАТАВРЕМЯ(" + Формат(ТекущаяДата, "ДФ=гггг,М,д,Ч,м,с") + ") КАК ДатаОкончания,
			|	&парамКоэффициентИндексации" + Формат(ИндексПараметра, "ЧГ=") + " КАК КоэффициентИндексации
			|" + ?(ПерваяВыборка, "ПОМЕСТИТЬ ВТПериодыИндексации", "");
			
			Запрос.УстановитьПараметр("парамКоэффициентИндексации" + Формат(ИндексПараметра, "ЧГ="), ТекущийКоэффициент);
			ПерваяВыборка = Ложь;
			
			Если УчитыватьКадровыеПерестановкиПриРасчетеСреднегоЗаработка И 
				(РассчитыватьКоэффициентИндексацииВПределахКадровыхПерестановок И ВыборкаКЭ.Период = ПериодПоследнегоПеремещения)
				ИЛИ (НЕ РассчитыватьКоэффициентИндексацииВПределахКадровыхПерестановок И ВыборкаКЭ.Период <= ПериодПоследнегоПеремещения) Тогда
				ТекущийКоэффициент = 1;
			Иначе 
				Если ДатаНачала < ДатаНачалаПримененияКоэффициентаПоМесяцуПовышения 
					ИЛИ РасчетКоэффициентаНарастающимИтогом Тогда
					ТекущийКоэффициент = ?(ВыборкаКЭ.Коэффициент = 0, 1, ТекущийКоэффициент * ВыборкаКЭ.Коэффициент);
				Иначе
					ТекущийКоэффициент = ?(ВыборкаКЭ.Коэффициент = 0, 1, ВыборкаКЭ.Коэффициент);
				КонецЕсли;
			КонецЕсли;
			
			ТекущаяДата = ВыборкаКЭ.Период - 1; 
			
		КонецЕсли;
	КонецЦикла;
	
	// коэффициент индексации за период с начала расчетного периода до первого повышения
	Если ТекущаяДата > ДатаНачалаРасчетногоПериода Тогда
		ИндексПараметра = ИндексПараметра + 1;
		Если Не ПустаяСтрока(ПериодыИндексацииТекст) Тогда
			ПериодыИндексацииТекст = ПериодыИндексацииТекст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		ПериодыИндексацииТекст = ПериодыИндексацииТекст + "
		|ВЫБРАТЬ
		|	ДАТАВРЕМЯ(" + Формат(ДатаНачалаРасчетногоПериода, "ДФ=гггг,М,д,Ч,м,с") + ") КАК ДатаНачала,
		|	ДАТАВРЕМЯ(" + Формат(ТекущаяДата, "ДФ=гггг,М,д,Ч,м,с") + ") КАК ДатаОкончания,
		|	&парамКоэффициентИндексации" + Формат(ИндексПараметра, "ЧГ=") + " КАК КоэффициентИндексации
		|" + ?(ПерваяВыборка, "ПОМЕСТИТЬ ВТПериодыИндексации", "");
		Запрос.УстановитьПараметр("парамКоэффициентИндексации" + Формат(ИндексПараметра, "ЧГ="), ТекущийКоэффициент);
		ПерваяВыборка = Ложь;
	КонецЕсли;
	
	// Если все-таки получилась пустая строка, то подставим текст запроса за весь период
	Если ПустаяСтрока(ПериодыИндексацииТекст) Тогда
		ПериодыИндексацииТекст = "
		|ВЫБРАТЬ
		|	ДАТАВРЕМЯ(" + Формат(ДатаНачалаРасчетногоПериода, "ДФ=гггг,М,д,Ч,м,с") + ") КАК ДатаНачала,
		|	ДАТАВРЕМЯ(" + Формат(ДатаОкончанияРасчетногоПериода, "ДФ=гггг,М,д,Ч,м,с") + ") КАК ДатаОкончания,
		|	1 КАК КоэффициентИндексации
		|" + ?(ПерваяВыборка, "ПОМЕСТИТЬ ВТПериодыИндексации", "");
	КонецЕсли;
	
	Запрос.Текст = ПериодыИндексацииТекст;
	Запрос.Выполнить();
	ПериодыИндексацииТекст = "ВТПериодыИндексации";	
	
	
	// выбираем данные для расчета среднего заработка
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетнаяПолитика.Организация,
		|	УчетнаяПолитика.ВедениеУчетаПоГоловнойОрганизации
		|ПОМЕСТИТЬ ВТ_УчетнаяПолитикаПоПерсоналуОрганизации
		|ИЗ
		|	&парамУчетнаяПолитикаПоПерсоналуОрганизации КАК УчетнаяПолитика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ПериодыИндексации.ДатаНачала > НАЧАЛОПЕРИОДА(Календарь.Дата, МЕСЯЦ)
		|			ТОГДА ПериодыИндексации.ДатаНачала
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(Календарь.Дата, МЕСЯЦ)
		|	КОНЕЦ КАК БазовыйПериодНачало,
		|	ВЫБОР
		|		КОГДА ПериодыИндексации.ДатаОкончания < КОНЕЦПЕРИОДА(Календарь.Дата, МЕСЯЦ)
		|			ТОГДА ПериодыИндексации.ДатаОкончания
		|		ИНАЧЕ КОНЕЦПЕРИОДА(Календарь.Дата, МЕСЯЦ)
		|	КОНЕЦ КАК БазовыйПериодКонец,
		|	ПериодыИндексации.КоэффициентИндексации
		|ПОМЕСТИТЬ ВТПериоды
		|ИЗ
		|	ВТПериодыИндексации КАК ПериодыИндексации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК Календарь
		|		ПО (Календарь.ПроизводственныйКалендарь = &ПроизводственныйКалендарь)
		|			И (Календарь.Дата МЕЖДУ ПериодыИндексации.ДатаНачала И ПериодыИндексации.ДатаОкончания)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА ПериодыИндексации.ДатаНачала > НАЧАЛОПЕРИОДА(Календарь.Дата, МЕСЯЦ)
		|			ТОГДА ПериодыИндексации.ДатаНачала
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(Календарь.Дата, МЕСЯЦ)
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ПериодыИндексации.ДатаОкончания < КОНЕЦПЕРИОДА(Календарь.Дата, МЕСЯЦ)
		|			ТОГДА ПериодыИндексации.ДатаОкончания
		|		ИНАЧЕ КОНЕЦПЕРИОДА(Календарь.Дата, МЕСЯЦ)
		|	КОНЕЦ,
		|	ПериодыИндексации.КоэффициентИндексации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачислениеЗарплаты.Ссылка КАК Ссылка,
		|	НачислениеЗарплаты.НомерСтроки КАК НомерСтроки,
		|	МАКСИМУМ(ПериодыИндексации.ДатаНачала) КАК БазовыйПериодНачало
		|ПОМЕСТИТЬ ВТДатаБлижайщейИндексации
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК НачислениеЗарплаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоПерсоналуОрганизации КАК ВТ_УчетнаяПолитикаПоПерсоналуОрганизации
		|		ПО НачислениеЗарплаты.Ссылка.Организация = ВТ_УчетнаяПолитикаПоПерсоналуОрганизации.Организация
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыИндексации КАК ПериодыИндексации
		|		ПО (ВЫБОР
		|				КОГДА НАЧАЛОПЕРИОДА(НачислениеЗарплаты.ДатаНачала, МЕСЯЦ) = НачислениеЗарплаты.Ссылка.ПериодРегистрации
		|						И НАЧАЛОПЕРИОДА(НачислениеЗарплаты.ДатаОкончания, МЕСЯЦ) = НачислениеЗарплаты.Ссылка.ПериодРегистрации
		|					ТОГДА НачислениеЗарплаты.ДатаНачала
		|				ИНАЧЕ НачислениеЗарплаты.Ссылка.ПериодРегистрации
		|			КОНЕЦ >= ПериодыИндексации.ДатаНачала)
		|ГДЕ
		|	НачислениеЗарплаты.Ссылка.Проведен
		|	И НачислениеЗарплаты.Ссылка.ПериодРегистрации МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачала, МЕСЯЦ) И &ДатаОкончания
		|	И НачислениеЗарплаты.Сотрудник = &Сотрудник
		|	И ВЫБОР
		|			КОГДА НачислениеЗарплаты.Ссылка.Организация.ГоловнаяОрганизация = &ПустаяОрганизация
		|					ИЛИ НЕ ВТ_УчетнаяПолитикаПоПерсоналуОрганизации.ВедениеУчетаПоГоловнойОрганизации
		|				ТОГДА НачислениеЗарплаты.Ссылка.Организация
		|			ИНАЧЕ НачислениеЗарплаты.Ссылка.Организация.ГоловнаяОрганизация
		|		КОНЕЦ = &ГоловнаяОрганизация
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплаты.Ссылка,
		|	НачислениеЗарплаты.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ПериодыИндексации.ДатаНачала > НАЧАЛОПЕРИОДА(НачислениеЗарплаты.Ссылка.ПериодРегистрации, МЕСЯЦ)
		|			ТОГДА ПериодыИндексации.ДатаНачала
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(НачислениеЗарплаты.Ссылка.ПериодРегистрации, МЕСЯЦ)
		|	КОНЕЦ КАК БазовыйПериодНачало,
		|	ВЫБОР
		|		КОГДА ПериодыИндексации.ДатаОкончания < КОНЕЦПЕРИОДА(НачислениеЗарплаты.Ссылка.ПериодРегистрации, МЕСЯЦ)
		|			ТОГДА ПериодыИндексации.ДатаОкончания
		|		ИНАЧЕ КОНЕЦПЕРИОДА(НачислениеЗарплаты.Ссылка.ПериодРегистрации, МЕСЯЦ)
		|	КОНЕЦ КАК БазовыйПериодКонец,
		|	ВЫБОР
		|		КОГДА НачислениеЗарплаты.ВидРасчета.УчетЗаработкаПриРасчетеСреднего = &БезИндексации
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеИндексируемыйЗаработок,
		|	ВЫБОР
		|		КОГДА НачислениеЗарплаты.ВидРасчета.ВидПремии = &Премия
		|			ТОГДА ВЫБОР
		|					КОГДА НачислениеЗарплаты.ВидРасчета.УчетЗаработкаПриРасчетеСреднего = &БезИндексации
		|						ТОГДА ""Премия без индексации""
		|					ИНАЧЕ ""Премия""
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА НачислениеЗарплаты.ВидРасчета.УчетЗаработкаПриРасчетеСреднего = &БезИндексации
		|					ТОГДА ""Заработок без индексации""
		|				ИНАЧЕ ""Заработок""
		|			КОНЕЦ
		|	КОНЕЦ КАК ВидСтроки,
		|	ВЫБОР
		|		КОГДА НачислениеЗарплаты.ВидРасчета.ВидПремии = &Премия
		|			ТОГДА НАЧАЛОПЕРИОДА(НачислениеЗарплаты.ДатаНачала, МЕСЯЦ)
		|		ИНАЧЕ &ПустаяДата
		|	КОНЕЦ КАК ДатаНачалаПериодаПремии,
		|	ВЫБОР
		|		КОГДА НачислениеЗарплаты.ВидРасчета.ВидПремии = &Премия
		|			ТОГДА КОНЕЦПЕРИОДА(НачислениеЗарплаты.ДатаОкончания, МЕСЯЦ)
		|		ИНАЧЕ &ПустаяДата
		|	КОНЕЦ КАК ДатаОкончанияПериодаПремии,
		|	ВЫБОР
		|		КОГДА НачислениеЗарплаты.ВидРасчета.УчетЗаработкаПриРасчетеСреднего = &БезИндексации
		|			ТОГДА 1
		|		ИНАЧЕ ПериодыИндексации.КоэффициентИндексации
		|	КОНЕЦ КАК КоэффициентИндексации,
		|	СУММА(НачислениеЗарплаты.Результат) КАК Размер,
		|	СУММА(ВЫБОР
		|			КОГДА НачислениеЗарплаты.ВидРасчета.ЗачетОтработанногоВремени
		|				ТОГДА НачислениеЗарплаты.ОтработаноДней * ВЫБОР
		|						КОГДА НачислениеЗарплаты.Результат < 0
		|							ТОГДА -1
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Дни,
		|	СУММА(ВЫБОР
		|			КОГДА НачислениеЗарплаты.ВидРасчета.ЗачетОтработанногоВремени
		|				ТОГДА НачислениеЗарплаты.ОтработаноЧасов * ВЫБОР
		|						КОГДА НачислениеЗарплаты.Результат < 0
		|							ТОГДА -1
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Часы
		|ПОМЕСТИТЬ ВТДанныеОЗаработке
		|ИЗ
		|	ВТДатаБлижайщейИндексации КАК ДатаБлижайщейИндексации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыИндексации КАК ПериодыИндексации
		|		ПО ДатаБлижайщейИндексации.БазовыйПериодНачало = ПериодыИндексации.ДатаНачала
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК НачислениеЗарплаты
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоПерсоналуОрганизации КАК ВТ_УчетнаяПолитикаПоПерсоналуОрганизации
		|			ПО НачислениеЗарплаты.Ссылка.Организация = ВТ_УчетнаяПолитикаПоПерсоналуОрганизации.Организация
		|		ПО ДатаБлижайщейИндексации.Ссылка = НачислениеЗарплаты.Ссылка
		|			И ДатаБлижайщейИндексации.НомерСтроки = НачислениеЗарплаты.НомерСтроки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.БазовыеВидыРасчета КАК БазовыеВидыРасчета
		|		ПО (НачислениеЗарплаты.ВидРасчета = БазовыеВидыРасчета.ВидРасчета)
		|			И (БазовыеВидыРасчета.Ссылка = &ОсновнойВидРасчета)
		|ГДЕ
		|	НачислениеЗарплаты.Ссылка.Проведен
		|	И НачислениеЗарплаты.Ссылка.ПериодРегистрации МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачала, МЕСЯЦ) И &ДатаОкончания
		|	И НачислениеЗарплаты.Сотрудник = &Сотрудник
		|	И ВЫБОР
		|			КОГДА НачислениеЗарплаты.Ссылка.Организация.ГоловнаяОрганизация = &ПустаяОрганизация
		|					ИЛИ НЕ ВТ_УчетнаяПолитикаПоПерсоналуОрганизации.ВедениеУчетаПоГоловнойОрганизации
		|				ТОГДА НачислениеЗарплаты.Ссылка.Организация
		|			ИНАЧЕ НачислениеЗарплаты.Ссылка.Организация.ГоловнаяОрганизация
		|		КОНЕЦ = &ГоловнаяОрганизация
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА ПериодыИндексации.ДатаНачала > НАЧАЛОПЕРИОДА(НачислениеЗарплаты.Ссылка.ПериодРегистрации, МЕСЯЦ)
		|			ТОГДА ПериодыИндексации.ДатаНачала
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(НачислениеЗарплаты.Ссылка.ПериодРегистрации, МЕСЯЦ)
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ПериодыИндексации.ДатаОкончания < КОНЕЦПЕРИОДА(НачислениеЗарплаты.Ссылка.ПериодРегистрации, МЕСЯЦ)
		|			ТОГДА ПериодыИндексации.ДатаОкончания
		|		ИНАЧЕ КОНЕЦПЕРИОДА(НачислениеЗарплаты.Ссылка.ПериодРегистрации, МЕСЯЦ)
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НачислениеЗарплаты.ВидРасчета.УчетЗаработкаПриРасчетеСреднего = &БезИндексации
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НачислениеЗарплаты.ВидРасчета.ВидПремии = &Премия
		|			ТОГДА ВЫБОР
		|					КОГДА НачислениеЗарплаты.ВидРасчета.УчетЗаработкаПриРасчетеСреднего = &БезИндексации
		|						ТОГДА ""Премия без индексации""
		|					ИНАЧЕ ""Премия""
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА НачислениеЗарплаты.ВидРасчета.УчетЗаработкаПриРасчетеСреднего = &БезИндексации
		|					ТОГДА ""Заработок без индексации""
		|				ИНАЧЕ ""Заработок""
		|			КОНЕЦ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НачислениеЗарплаты.ВидРасчета.ВидПремии = &Премия
		|			ТОГДА НАЧАЛОПЕРИОДА(НачислениеЗарплаты.ДатаНачала, МЕСЯЦ)
		|		ИНАЧЕ &ПустаяДата
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НачислениеЗарплаты.ВидРасчета.ВидПремии = &Премия
		|			ТОГДА КОНЕЦПЕРИОДА(НачислениеЗарплаты.ДатаОкончания, МЕСЯЦ)
		|		ИНАЧЕ &ПустаяДата
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НачислениеЗарплаты.ВидРасчета.УчетЗаработкаПриРасчетеСреднего = &БезИндексации
		|			ТОГДА 1
		|		ИНАЧЕ ПериодыИндексации.КоэффициентИндексации
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Периоды.БазовыйПериодНачало,
		|	Периоды.БазовыйПериодКонец,
		|	ЕСТЬNULL(ДанныеОЗаработке.ДатаНачалаПериодаПремии, &ПустаяДата) КАК ДатаНачалаПериодаПремии,
		|	ЕСТЬNULL(ДанныеОЗаработке.ДатаОкончанияПериодаПремии, &ПустаяДата) КАК ДатаОкончанияПериодаПремии,
		|	ЕСТЬNULL(ДанныеОЗаработке.ВидСтроки, ""Заработок"") КАК ВидСтроки,
		|	ЕСТЬNULL(ДанныеОЗаработке.КоэффициентИндексации, Периоды.КоэффициентИндексации) КАК КоэффициентИндексации,
		|	ЕСТЬNULL(ДанныеОЗаработке.Размер, 0) КАК Размер,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДанныеОЗаработке.НеИндексируемыйЗаработок, ЛОЖЬ)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(ДанныеОЗаработке.Дни, 0)
		|	КОНЕЦ КАК РабочиеДни,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДанныеОЗаработке.НеИндексируемыйЗаработок, ЛОЖЬ)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(ДанныеОЗаработке.Часы, 0)
		|	КОНЕЦ КАК РабочиеЧасы
		|ИЗ
		|	ВТПериоды КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОЗаработке КАК ДанныеОЗаработке
		|		ПО Периоды.БазовыйПериодНачало = ДанныеОЗаработке.БазовыйПериодНачало
		|			И Периоды.БазовыйПериодКонец = ДанныеОЗаработке.БазовыйПериодКонец
		|
		|УПОРЯДОЧИТЬ ПО
		|	Периоды.БазовыйПериодНачало,
		|	ДанныеОЗаработке.ВидСтроки";
	
	// получим структуру табличной части
	ТЗСреднийЗаработок = СреднийЗаработок.Выгрузить();
	
	ПервыйМесяцПремии = '29991231';
	ПоследнийМесяцПремии = '00010101';
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТЗСреднийЗаработок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если Найти(Выборка.ВидСтроки, "Премия") = 0 Тогда
			НоваяСтрока.Дни 		= Выборка.РабочиеДни;
			НоваяСтрока.Часы 		= Выборка.РабочиеЧасы;
			НоваяСтрока.Результат 	= Выборка.Размер * Выборка.КоэффициентИндексации;
		Иначе
			// премию разбиваем на периоды, за которые начислена премия
			Если ЗначениеЗаполнено(Выборка.ДатаНачалаПериодаПремии)
					И ЗначениеЗаполнено(Выборка.ДатаОкончанияПериодаПремии) Тогда
					
				ПервыйМесяцПремии = Мин(ПервыйМесяцПремии, Выборка.ДатаНачалаПериодаПремии);
				ПоследнийМесяцПремии = Макс(ПоследнийМесяцПремии, Выборка.ДатаОкончанияПериодаПремии);
				
				ПериодПремииВМесяцах = Месяц(Выборка.ДатаОкончанияПериодаПремии) + 12 * Год(Выборка.ДатаОкончанияПериодаПремии) - 
										Месяц(Выборка.ДатаНачалаПериодаПремии) - 12 * Год(Выборка.ДатаНачалаПериодаПремии) + 1;
										
										Если ПериодПремииВМесяцах = 0 Тогда
											Продолжить;
										Конецесли;
										
				ПервыйМесяцПремииВРасчетномПериоде	 = Макс(Выборка.ДатаНачалаПериодаПремии, НачалоМесяца(ДатаНачалаРасчетногоПериода));
				ПоследнийМесяцПремииВРасчетномПериоде= Мин(Выборка.ДатаОкончанияПериодаПремии, ДатаОкончанияРасчетногоПериода);
										
				МесяцевПериодаПремииВРасчетномПериоде = Месяц(ПоследнийМесяцПремииВРасчетномПериоде) + 12 * Год(ПоследнийМесяцПремииВРасчетномПериоде) - 
															Месяц(ПервыйМесяцПремииВРасчетномПериоде) - 12 * Год(ПервыйМесяцПремииВРасчетномПериоде) + 1;

				ТекущийМесяц = Выборка.ДатаНачалаПериодаПремии;
				ДатаОкончанияПериодаПремии = Выборка.ДатаОкончанияПериодаПремии;
				РезультатКРаспределению = Выборка.Размер * МесяцевПериодаПремииВРасчетномПериоде / ПериодПремииВМесяцах;
				РезультатРаспределено = 0;
				ПоследняяСтрока = Неопределено;
					
				Пока ТекущийМесяц < ДатаОкончанияПериодаПремии Цикл
					
					Если ТекущийМесяц = НоваяСтрока.ДатаНачалаПериодаПремии Тогда
						// корректируем результат в самой первой строке движения
						ДопСтрока = НоваяСтрока;
					Иначе
						// добавляем новую строку
						ДопСтрока = ТЗСреднийЗаработок.Добавить();
						ЗаполнитьЗначенияСвойств(ДопСтрока, Выборка);
					КонецЕсли;
					
					Если ТекущийМесяц >= ПервыйМесяцПремииВРасчетномПериоде И ТекущийМесяц <= ПоследнийМесяцПремииВРасчетномПериоде Тогда
						ДопСтрока.Результат = РезультатКРаспределению / МесяцевПериодаПремииВРасчетномПериоде;
						ПоследняяСтрока = ДопСтрока;
					Иначе
						// этот месяц из периода премии не попадает в расчетный период
						ДопСтрока.Результат = 0;
					КонецЕсли;
					ДопСтрока.ЧислоМесяцев = ПериодПремииВМесяцах;
					ДопСтрока.ДатаНачалаПериодаПремии = ТекущийМесяц;
					ДопСтрока.ДатаОкончанияПериодаПремии = КонецМесяца(ТекущийМесяц);
					
					РезультатРаспределено = РезультатРаспределено + ДопСтрока.Результат;
				
					ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, 1);
					
				КонецЦикла;
				
				// ошибки округления на последнюю запись
				Если ПоследняяСтрока <> Неопределено Тогда
					ПоследняяСтрока.Результат = ПоследняяСтрока.Результат + РезультатКРаспределению - РезультатРаспределено;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТЗСреднийЗаработок.Сортировать("БазовыйПериодНачало, ВидСтроки, ЧислоМесяцев, ДатаНачалаПериодаПремии");
	
	Если ПервыйМесяцПремии < ПоследнийМесяцПремии Тогда

		// составим запрос по всем месяцам, за которые начислялись премии
		ПериодыТекст = "";
		ТекущийМесяц = ПервыйМесяцПремии;
		Пока ТекущийМесяц < ПоследнийМесяцПремии Цикл
			Если Не ПустаяСтрока(ПериодыТекст) Тогда
				ПериодыТекст = ПериодыТекст + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|";
			КонецЕсли;
			
			ПериодыТекст = ПериодыТекст + "
			|ВЫБРАТЬ
			|	ДАТАВРЕМЯ(" + Формат(ТекущийМесяц, "ДФ=гггг,М,д,Ч,м,с") + ") КАК Период
			|";
			
			ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, 1);
		КонецЦикла;

		// для премий определим периоды индексации заработка по каждому месяцу, за который начислена премия
		// выбираем все повышения заработка после начала месяца, за который начислена премия, до даты события
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Периоды.Период,
		|	ЕСТЬNULL(КоэффициентыИндексацииЗаработка.КоэффициентИндексации, 1) КАК КоэффициентИндексации
		|ИЗ
		|	(" + ПериодыТекст + ") КАК Периоды
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыИндексации КАК КоэффициентыИндексацииЗаработка
		|			ПО Периоды.Период МЕЖДУ КоэффициентыИндексацииЗаработка.ДатаНачала И КоэффициентыИндексацииЗаработка.ДатаОкончания 
		|
		|УПОРЯДОЧИТЬ ПО
		|	Периоды.Период,
		|	КоэффициентыИндексацииЗаработка.ДатаНачала УБЫВ
		|";
			
		ВыборкаКоэффициентовИндексацииПремий = Запрос.Выполнить().Выбрать();
			
		СтруктураПоиска = Новый Структура("ВидСтроки, ДатаНачалаПериодаПремии", "Премия");		
		
		ЕстьДанные = ВыборкаКоэффициентовИндексацииПремий.Следующий();
		Пока ЕстьДанные Цикл
				
			ТекущийПериод = ВыборкаКоэффициентовИндексацииПремий.Период;
			ТекущийКоэффициент = 1;
				
			Пока ЕстьДанные 
				И ВыборкаКоэффициентовИндексацииПремий.Период = ТекущийПериод Цикл
				
				ТекущийКоэффициент = ВыборкаКоэффициентовИндексацииПремий.КоэффициентИндексации;
							
				ЕстьДанные = ВыборкаКоэффициентовИндексацииПремий.Следующий(); 
				
			КонецЦикла;
			
        	СтруктураПоиска.ДатаНачалаПериодаПремии = ТекущийПериод;
			
			НайденныеСтроки = ТЗСреднийЗаработок.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаТЗ Из НайденныеСтроки Цикл
				СтрокаТЗ.КоэффициентИндексации = ТекущийКоэффициент;
				СтрокаТЗ.Результат = СтрокаТЗ.Результат * ТекущийКоэффициент;
			КонецЦикла;
				
		КонецЦикла;
		
	КонецЕсли;
	
	// Закончили расчет среднего заработка, снимаем привилигированный режим
	УстановитьПривилегированныйРежим(Ложь);
	
	// переносим в табличную часть обработки
	СреднийЗаработок.Загрузить(ТЗСреднийЗаработок);
	
КонецПроцедуры

// Рассчитывает начисления за отпуск
//
Процедура РассчитатьОтпуск() Экспорт

	Если ДатаНачала < ПроведениеРасчетовСервер.ПолучитьДатуНачалаРасчетаСреднегоЗаработкаТолькоПоРабочимДням() Тогда
		РассчитатьОтпускДо29_12_2007();
	Иначе
		РассчитатьОтпускПосле29_12_2007();
	КонецЕсли;

КонецПроцедуры

// Рассчитывает начисления за отпуск в соответствии с инструкцией № 1942 от 29.12.2000
//
Процедура РассчитатьОтпускДо29_12_2007() Экспорт

	// определим среднедневной заработок
	ВсегоНачислено = СреднийЗаработок.Итог("Результат");
	ВсегоДни = СреднийЗаработок.Итог("Дни");
	
	Если ВсегоДни <> 0 Тогда
		Заработок = Окр(ВсегоНачислено / ВсегоДни, 2);
	Иначе
		Заработок = 0;
	КонецЕсли;
	
	// считаем, что правила округления для всех видов начислений одинаковые
	ПравилоОкругления = ПроведениеРасчетовСервер.ПолучитьПравилоОкругленияВидаРасчета(Начисления[0].ВидРасчета, Ссылка.ПериодРегистрации);
	ДатаНачалаРасчетаСреднегоЗаработкаТолькоПоРабочимДням = ПроведениеРасчетовСервер.ПолучитьДатуНачалаРасчетаСреднегоЗаработкаТолькоПоРабочимДням();
	
	Если Не КомпенсацияОтпуска Тогда
		
		// для ускорения последующей работы выгрузим часть регистра РеглПроизводКалендарь в таблицу значений
		// считаем, что больше 6 месяцев отпуск быть не может
		ЗаполнитьТаблицуКалендаря(НачалоМесяца(ДатаНачала), КонецМесяца(?(ЗначениеЗаполнено(ДатаОкончания), ДатаОкончания, ДобавитьМесяц(НачалоМесяца(ДатаНачала), 6))));
		
		// сохраним таблицу распределения отпуска по видам во врем. переменную
		ТаблицаВидовОтпуска = Начисления.Выгрузить();
		ТаблицаВидовОтпуска.Свернуть("ВидРасчета", "КалендарныеДни");
		
		Начисления.Очистить();
		
		// разделим начисления по месяцам и по видам
		Инд = 0;
		ТекДата = НачалоДня(ДатаНачала);
		КоличествоВидовОтпусков = ТаблицаВидовОтпуска.Количество();
		
		Пока Инд < КоличествоВидовОтпусков Цикл
			
			Если ТаблицаВидовОтпуска[Инд].КалендарныеДни <> 0 Тогда
				ВидРасчета = ТаблицаВидовОтпуска[Инд].ВидРасчета;
				
				НоваяСтрока = Начисления.Добавить();
				НоваяСтрока.ВидРасчета = ТаблицаВидовОтпуска[Инд].ВидРасчета;
				НоваяСтрока.ДатаНачала = ТекДата;
				НоваяСтрока.КоэффициентИндексации = 1;
				
				СтрокаКалендаря = ТаблицаКалендаря.Найти(ТекДата, "Дата");
				Если СтрокаКалендаря <> Неопределено Тогда
					ИндКалендаря = ТаблицаКалендаря.Индекс(СтрокаКалендаря);
				КонецЕсли;
				Если СтрокаКалендаря = Неопределено Или ИндКалендаря = -1 Тогда
					ТекстИсключения = НСтр("ru = 'Не заполнен регламентированный производственный календарь за %1'");
					ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИсключения, Формат(ТекДата, "ДФ='гггг'"));
					ВызватьИсключение ТекстИсключения;
				КонецЕсли;
				
				ПоследняяДатаМесяца = НачалоДня(КонецМесяца(НоваяСтрока.ДатаНачала));
				Знак = ?(ТаблицаВидовОтпуска[инд].КалендарныеДни < 0, -1, 1);
				
				// пока остаются дни к распределению и не перешли в другой месяц
				Пока ТекДата <= ПоследняяДатаМесяца
						И ТаблицаВидовОтпуска[Инд].КалендарныеДни <> 0 Цикл
					
					НоваяСтрока.ДатаОкончания = ТекДата;
					НоваяСтрока.КалендарныеДни = НоваяСтрока.КалендарныеДни + Знак * ТаблицаКалендаря[ИндКалендаря].КалендарныйДень;
					НоваяСтрока.РабочиеДни = НоваяСтрока.РабочиеДни + Знак * ТаблицаКалендаря[ИндКалендаря].РабочийДень;
					ТаблицаВидовОтпуска[Инд].КалендарныеДни = ТаблицаВидовОтпуска[Инд].КалендарныеДни - Знак * ТаблицаКалендаря[ИндКалендаря].КалендарныйДень;
						
					ТекДата = ТекДата + 86400;
					ИндКалендаря = ИндКалендаря + 1;
					
				КонецЦикла;			
				
			Иначе
				// все дни текущего вида отпуска распределили, переходим к следующей строке
				Инд = Инд + 1;
			КонецЕсли;
		
		КонецЦикла;
		
		// разделим записи по периодам коэффициента индексации
		Если ДатаНачала >= ПолучитьДатуНачалаРасчетаСреднегоЗаработкаСУчетомИндексации() Тогда
			РазделитьЗаписиНачисленийПоПериодамИндексацииЗаработка();
		КонецЕсли;
		
		// теперь просчитаем результат
		Для Каждого СтрокаТЧ Из Начисления Цикл	
			ВрмКалендарныеДни = 0;
			ВрмРабочиеДни = 0;
			
			Для Каждого СтрокаКалендаря Из ТаблицаКалендаря Цикл
				Если СтрокаКалендаря.Дата >= СтрокаТЧ.ДатаНачала
						И СтрокаКалендаря.Дата <= СтрокаТЧ.ДатаОкончания Тогда
					ВрмКалендарныеДни 	= ВрмКалендарныеДни + СтрокаКалендаря.КалендарныйДень;
					ВрмРабочиеДни 		= ВрмРабочиеДни + СтрокаКалендаря.РабочийДень;
				КонецЕсли;
			КонецЦикла;
			
			СтрокаТЧ.КалендарныеДни = ВрмКалендарныеДни * ?(СтрокаТЧ.КалендарныеДни >= 0, 1, -1);
			СтрокаТЧ.РабочиеДни 	= ВрмРабочиеДни * ?(СтрокаТЧ.РабочиеДни >= 0, 1, -1);
			СтрокаТЧ.Результат 		= СтрокаТЧ.КалендарныеДни * Заработок * СтрокаТЧ.КоэффициентИндексации;
			// округлим результат
			СтрокаТЧ.Результат = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(СтрокаТЧ.Результат, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
			
		КонецЦикла;
		
	Иначе
		
		// учтем индексацию заработка в сам день предоставления компенсации
		КоэффициентИндексации = 1;
		Если ДатаНачала >= ПолучитьДатуНачалаРасчетаСреднегоЗаработкаСУчетомИндексации() Тогда
			Запрос = Новый Запрос;
			
			Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
			Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Организация));
			Запрос.УстановитьПараметр("ДатаНачалаСобытия", ДатаНачала);
			
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КоэффициентыИндексацииЗаработка.Коэффициент
			|ИЗ
			|	РегистрСведений.КоэффициентыИндексацииЗаработка КАК КоэффициентыИндексацииЗаработка
			|ГДЕ
			|	КоэффициентыИндексацииЗаработка.Сотрудник = &Сотрудник
			|	И КоэффициентыИндексацииЗаработка.Организация = &ГоловнаяОрганизация
			|	И КоэффициентыИндексацииЗаработка.Период = &ДатаНачалаСобытия
			|	И КоэффициентыИндексацииЗаработка.Активность
			|";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				КоэффициентИндексации = Выборка.Коэффициент;
			КонецЕсли;
		КонецЕсли;
	
		// компенсация отпуска - в каждой строке умножаем число дней на заработок и получаем сумму
		Для Каждого СтрокаТЧ Из Начисления Цикл
			СтрокаТЧ.КоэффициентИндексации = КоэффициентИндексации;
			СтрокаТЧ.Результат = СтрокаТЧ.КалендарныеДни * Заработок * КоэффициентИндексации;
			// округлим результат
			СтрокаТЧ.Результат = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(СтрокаТЧ.Результат, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
			
			СтрокаТЧ.ДатаНачала = ДатаНачала;
			СтрокаТЧ.ДатаОкончания = ДатаНачала;
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры

// Рассчитывает начисления за отпуск в соответствии с инструкцией № 1394 от 29.12.2007
//
Процедура РассчитатьОтпускПосле29_12_2007() Экспорт

	// определим среднедневной заработок
	ВсегоНачислено = СреднийЗаработок.Итог("Результат");
	Если ИспользоватьСреднеЧасовойЗаработок Тогда
		ВсегоВремя = СреднийЗаработок.Итог("Часы");
	Иначе
		ВсегоВремя = СреднийЗаработок.Итог("Дни");
	КонецЕсли;
	
	Если ВсегоВремя <> 0 Тогда
		Заработок = Окр(ВсегоНачислено / ВсегоВремя, 2);
	Иначе
		Заработок = 0;
	КонецЕсли;
	
	// считаем, что правила округления для всех видов начислений одинаковые
	ПравилоОкругления = ПроведениеРасчетовСервер.ПолучитьПравилоОкругленияВидаРасчета(Начисления[0].ВидРасчета, Ссылка.ПериодРегистрации);
	
	Если НЕ КомпенсацияОтпуска Тогда
		
		// для ускорения последующей работы выгрузим часть регистра РеглПроизводКалендарь в таблицу значений
		// считаем, что больше 6 месяцев отпуск быть не может
		ЗаполнитьТаблицуКалендаря(НачалоМесяца(ДатаНачала), КонецМесяца(?(ЗначениеЗаполнено(ДатаОкончания), ДатаОкончания, ДобавитьМесяц(НачалоМесяца(ДатаНачала), 6))));
		
		// сохраним таблицу распределения отпуска по видам во врем. переменную
		ТаблицаВидовОтпуска = Начисления.Выгрузить();
		ТаблицаВидовОтпуска.Свернуть("ВидРасчета", "КалендарныеДни"); // разбивку по дням делаем от календарных дней, а оплачиваем рабочие
		
		Начисления.Очистить();
		
		// разделим начисления по месяцам и по видам
		Инд = 0;
		ТекДата = НачалоДня(ДатаНачала);
		КоличествоВидовОтпусков = ТаблицаВидовОтпуска.Количество();
		
		Пока Инд < КоличествоВидовОтпусков Цикл
			
			Если ТаблицаВидовОтпуска[Инд].КалендарныеДни <> 0 Тогда
				ВидРасчета = ТаблицаВидовОтпуска[Инд].ВидРасчета;
				
				НоваяСтрока = Начисления.Добавить();
				НоваяСтрока.ВидРасчета = ТаблицаВидовОтпуска[Инд].ВидРасчета;
				НоваяСтрока.ДатаНачала = ТекДата;
				НоваяСтрока.КоэффициентИндексации = 1;
				
				СтрокаКалендаря = ТаблицаКалендаря.Найти(ТекДата, "Дата");
				Если СтрокаКалендаря <> Неопределено Тогда
					ИндКалендаря = ТаблицаКалендаря.Индекс(СтрокаКалендаря);
				КонецЕсли;
				Если СтрокаКалендаря = Неопределено ИЛИ ИндКалендаря = -1 Тогда
					ТекстИсключения = НСтр("ru = 'Не заполнен регламентированный производственный календарь за %1'");
					ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИсключения, Формат(ТекДата, "ДФ='гггг'"));
					ВызватьИсключение ТекстИсключения;
				КонецЕсли;
				
				ПоследняяДатаМесяца = НачалоДня(КонецМесяца(НоваяСтрока.ДатаНачала));
				Знак = ?(ТаблицаВидовОтпуска[Инд].КалендарныеДни <0, -1, 1);
				
				// пока остаются дни к распределению и не перешли в другой месяц
				Пока ТекДата <= ПоследняяДатаМесяца
						И ТаблицаВидовОтпуска[Инд].КалендарныеДни <> 0 Цикл
					
					НоваяСтрока.ДатаОкончания 	= ТекДата;
					НоваяСтрока.КалендарныеДни 	= НоваяСтрока.КалендарныеДни + Знак * ТаблицаКалендаря[ИндКалендаря].КалендарныйДень;
					НоваяСтрока.РабочиеДни 		= НоваяСтрока.РабочиеДни + Знак * ТаблицаКалендаря[ИндКалендаря].РабочийДень;
					НоваяСтрока.РабочиеЧасы		= НоваяСтрока.РабочиеЧасы + Знак * ТаблицаКалендаря[ИндКалендаря].РабочийДень * 8;
					ТаблицаВидовОтпуска[Инд].КалендарныеДни = ТаблицаВидовОтпуска[Инд].КалендарныеДни - Знак * ТаблицаКалендаря[ИндКалендаря].КалендарныйДень;
						
					ТекДата = ТекДата + 86400;
					ИндКалендаря = ИндКалендаря + 1;
					
				КонецЦикла;			
				
			Иначе
				// все дни текущего вида отпуска распределили, переходим к следующей строке
				Инд = Инд + 1;
			КонецЕсли;
		
		КонецЦикла;
		
		// разделим записи по периодам коэффициента индексации
		РазделитьЗаписиНачисленийПоПериодамИндексацииЗаработка();
		
		// теперь просчитаем результат
		Для Каждого СтрокаТЧ Из Начисления Цикл	
			ВрмКалендарныеДни = 0;
			ВрмРабочиеДни = 0;
			
			Для Каждого СтрокаКалендаря Из ТаблицаКалендаря Цикл
				Если СтрокаКалендаря.Дата >= СтрокаТЧ.ДатаНачала
					И СтрокаКалендаря.Дата <= СтрокаТЧ.ДатаОкончания Тогда
					ВрмКалендарныеДни = ВрмКалендарныеДни + СтрокаКалендаря.КалендарныйДень;
					ВрмРабочиеДни = ВрмРабочиеДни + СтрокаКалендаря.РабочийДень;
				КонецЕсли;
			КонецЦикла;
			
			СтрокаТЧ.КалендарныеДни = ВрмКалендарныеДни * ?(СтрокаТЧ.КалендарныеДни >= 0, 1, -1);
			СтрокаТЧ.РабочиеДни 	= ВрмРабочиеДни * ?(СтрокаТЧ.КалендарныеДни >= 0, 1, -1);
			СтрокаТЧ.РабочиеЧасы 	= ВрмРабочиеДни * 8 * ?(СтрокаТЧ.КалендарныеДни >= 0, 1, -1);
			Если ИспользоватьСреднеЧасовойЗаработок Тогда
				СтрокаТЧ.Результат = СтрокаТЧ.РабочиеЧасы * Заработок * СтрокаТЧ.КоэффициентИндексации;
			Иначе
				СтрокаТЧ.Результат = СтрокаТЧ.РабочиеДни * Заработок * СтрокаТЧ.КоэффициентИндексации;
			КонецЕсли;
			// округлим результат
			СтрокаТЧ.Результат = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(СтрокаТЧ.Результат, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
			
		КонецЦикла;
		
	Иначе
		
		// учтем индексацию заработка в сам день предоставления компенсации
		КоэффициентИндексации = 1;

		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);	
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Организация));
		Запрос.УстановитьПараметр("ДатаНачалаСобытия", ДатаНачала);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КоэффициентыИндексацииЗаработка.Коэффициент
		|ИЗ
		|	РегистрСведений.КоэффициентыИндексацииЗаработка КАК КоэффициентыИндексацииЗаработка
		|ГДЕ
		|	КоэффициентыИндексацииЗаработка.Сотрудник = &Сотрудник
		|	И КоэффициентыИндексацииЗаработка.Организация = &ГоловнаяОрганизация
		|	И КоэффициентыИндексацииЗаработка.Период = &ДатаНачалаСобытия
		|	И КоэффициентыИндексацииЗаработка.Активность
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			КоэффициентИндексации = Выборка.Коэффициент;
		КонецЕсли;
	
		// компенсация отпуска - в каждой строке умножаем число дней на заработок и получаем сумму
		Для Каждого СтрокаТЧ Из Начисления Цикл
			
			СтрокаТЧ.КоэффициентИндексации = КоэффициентИндексации;
			
			Если ИспользоватьСреднеЧасовойЗаработок Тогда
				СтрокаТЧ.Результат = СтрокаТЧ.РабочиеЧасы * Заработок * КоэффициентИндексации;
			Иначе
				СтрокаТЧ.Результат = СтрокаТЧ.РабочиеДни * Заработок * КоэффициентИндексации;
			КонецЕсли;
			
			// округлим результат
			СтрокаТЧ.Результат = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(СтрокаТЧ.Результат, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
			
			СтрокаТЧ.ДатаНачала = ДатаНачала;
			СтрокаТЧ.ДатаОкончания = ДатаНачала;
			
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры

// Рассчитывает начисления по больничному листу
//
Процедура РассчитатьБольничныйЛист() Экспорт

	// определим среднедневной заработок
	ВсегоНачислено = СреднийЗаработок.Итог("Результат");
	Если ИспользоватьСреднеЧасовойЗаработок Тогда
		ВсегоВремя = СреднийЗаработок.Итог("Часы");
	Иначе
		ВсегоВремя = СреднийЗаработок.Итог("Дни");
	КонецЕсли;
	
	Если ВсегоВремя <> 0 Тогда
		Заработок = Окр(ВсегоНачислено / ВсегоВремя, 2);
	Иначе
		Заработок = 0;
	КонецЕсли;

	ПравилоОкругления = ПроведениеРасчетовСервер.ПолучитьПравилоОкругленияВидаРасчета(ВидРасчета, Ссылка.ПериодРегистрации);
	
	Если Ограничивать10МРП Тогда
		// определим уже начисленные больничные листы за период по месяцам
		
		ПериодыТекст = "";
		ПерваяВыборка = Истина;
		ТекДата = НачалоМесяца(ДатаНачала);
		Пока ТекДата <= ДатаОкончания Цикл
			Если ПериодыТекст <> "" Тогда
				ПериодыТекст = ПериодыТекст + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|";
			КонецЕсли;
			
			ПериодыТекст = ПериодыТекст + "
			|ВЫБРАТЬ
			|	ДАТАВРЕМЯ(" + Формат(ТекДата, "ДФ=гггг,ММ,дд") + ") КАК Период
			|
			|	" + ?(ПерваяВыборка, "ПОМЕСТИТЬ ВТПериоды", "") + "
			|";
			
			ТекДата = ДобавитьМесяц(ТекДата, 1);
			ПерваяВыборка = Ложь;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ВидРасчетаБЛ", ВидРасчета);
		Запрос.УстановитьПараметр("ФизЛицо", Сотрудник.Физлицо);
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Организация));
		Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
		Запрос.УстановитьПараметр("ДокументСсылка", Ссылка.Ссылка);
		Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
		
		УчетнаяПолитикаПоПерсоналуОрганизацииТаблица = ПолныеПраваПовтИсп.СформироватьТаблицуУчетнойПолитикиПоПерсоналу();		
		Запрос.УстановитьПараметр("парамУчетнаяПолитикаПоПерсоналуОрганизации", УчетнаяПолитикаПоПерсоналуОрганизацииТаблица);		
	
		Запрос.Текст = ПериодыТекст;
		Запрос.Выполнить();
		ПериодыТекст = "ВТПериоды";
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	УчетнаяПолитика.Организация,
		|	УчетнаяПолитика.ВедениеУчетаПоГоловнойОрганизации
		|ПОМЕСТИТЬ ВТ_УчетнаяПолитикаПоПерсоналуОрганизации
		|ИЗ
		|	&парамУчетнаяПолитикаПоПерсоналуОрганизации КАК УчетнаяПолитика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Периоды.Период,
		|	ЕСТЬNULL(НачислениеБЛ.Результат, 0) КАК Результат,
		|	ВЫБОР 
		|		КОГДА ЕСТЬNULL(РеглРасчетныеПоказатели.РазмерМРПДляПособийИныхСоциальныхВыплат, 0) = 0 
		|			ТОГДА ЕСТЬNULL(РеглРасчетныеПоказатели.РазмерМРП, 0)
		|		ИНАЧЕ
		|			ЕСТЬNULL(РеглРасчетныеПоказатели.РазмерМРПДляПособийИныхСоциальныхВыплат, 0) 
		|	КОНЕЦ КАК РазмерМРП
		|ИЗ
		|	" + ПериодыТекст + " КАК Периоды
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|							НАЧАЛОПЕРИОДА(НачислениеЗарплаты.ДатаНачала, МЕСЯЦ) КАК ПериодДействия,
		|							СУММА(НачислениеЗарплаты.Результат) КАК Результат
		|						ИЗ
		|							Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК НачислениеЗарплаты
		|								ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоПерсоналуОрганизации КАК ВТ_УчетнаяПолитикаПоПерсоналуОрганизации
		|									ПО НачислениеЗарплаты.Ссылка.Организация = ВТ_УчетнаяПолитикаПоПерсоналуОрганизации.Организация
		|						ГДЕ
		|							НачислениеЗарплаты.Ссылка.Проведен
		|							И НачислениеЗарплаты.ДатаНачала МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачала, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ДатаОкончания, МЕСЯЦ)
		|							И НачислениеЗарплаты.Сотрудник.ФизЛицо = &ФизЛицо
		|							И ВЫБОР
		|								КОГДА НачислениеЗарплаты.Ссылка.Организация.ГоловнаяОрганизация = &ПустаяОрганизация
		|									ИЛИ (НЕ ВТ_УчетнаяПолитикаПоПерсоналуОрганизации.ВедениеУчетаПоГоловнойОрганизации)
		|									ТОГДА НачислениеЗарплаты.Ссылка.Организация
		|								ИНАЧЕ НачислениеЗарплаты.Ссылка.Организация.ГоловнаяОрганизация
		|  							КОНЕЦ = &ГоловнаяОрганизация 
		|							И НачислениеЗарплаты.ВидРасчета = &ВидРасчетаБЛ
		|							И НачислениеЗарплаты.Ссылка <> &ДокументСсылка
		|
		|					СГРУППИРОВАТЬ ПО
		|							НАЧАЛОПЕРИОДА(НачислениеЗарплаты.ДатаНачала, МЕСЯЦ)) КАК НачислениеБЛ
		|		ПО Периоды.Период = НачислениеБЛ.ПериодДействия
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|							Периоды.Период,
		|							МАКСИМУМ(РеглРасчетныеПоказатели.Период) КАК ДатаИзменения
		|						ИЗ
		|							" + ПериодыТекст + " КАК Периоды
		|							ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РеглРасчетныеПоказатели
		|								ПО РеглРасчетныеПоказатели.Период <= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ)
		|
		|						СГРУППИРОВАТЬ ПО
		|							Периоды.Период) КАК РеглРасчетныеПоказателиСрезПоследних
		|		ПО Периоды.Период = РеглРасчетныеПоказателиСрезПоследних.Период
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РеглРасчетныеПоказатели
		|		ПО РеглРасчетныеПоказателиСрезПоследних.ДатаИзменения = РеглРасчетныеПоказатели.Период
		|";
		
		ТаблицаОграничений = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	// для ускорения последующей работы выгрузим часть регистра РеглПроизводКалендарь в таблицу значений
	ЗаполнитьТаблицуКалендаря(НачалоМесяца(ДатаНачала), КонецМесяца(ДатаОкончания));
		
	Начисления.Очистить();
		
	// разделим начисления по месяцам и по видам
	//Инд = 0;
	ТекДата = ДатаНачала;
	
	Пока ТекДата <= ДатаОкончания Цикл
		НоваяСтрока = Начисления.Добавить();
		НоваяСтрока.ВидРасчета = ВидРасчета;
		НоваяСтрока.КоэффициентИндексации = 1;
		НоваяСтрока.ДатаНачала = ТекДата;
		НоваяСтрока.ДатаОкончания = Мин(КонецМесяца(ТекДата), ДатаОкончания);
		НоваяСтрока.РабочиеДни = 0;
		НоваяСтрока.РабочиеЧасы = 0;
		
		ТекДата = КонецДня(НоваяСтрока.ДатаОкончания) + 1;
	КонецЦикла;

	// разделим записи по периодам коэффициента индексации
	Если ДатаНачала >= ПолучитьДатуНачалаРасчетаСреднегоЗаработкаСУчетомИндексации() Тогда
		РазделитьЗаписиНачисленийПоПериодамИндексацииЗаработка();
	КонецЕсли;
		
	// теперь просчитаем результат
	Для Каждого СтрокаТЧ Из Начисления Цикл	
		ВрмДни = 0;
			
		Для Каждого СтрокаКалендаря Из ТаблицаКалендаря Цикл
			Если СтрокаКалендаря.Дата >= СтрокаТЧ.ДатаНачала
					И СтрокаКалендаря.Дата <= СтрокаТЧ.ДатаОкончания Тогда
				ВрмДни = ВрмДни + СтрокаКалендаря.РабочийДень;
			КонецЕсли;
		КонецЦикла;
			
		// рассчитаем сумму
		СтрокаТЧ.РабочиеДни = ВрмДни;
		СтрокаТЧ.РабочиеЧасы = ВрмДни * 8;
		Если ИспользоватьСреднеЧасовойЗаработок Тогда
			СтрокаТЧ.Результат 	= СтрокаТЧ.РабочиеЧасы * Заработок * СтрокаТЧ.КоэффициентИндексации;
		Иначе
			СтрокаТЧ.Результат 	= СтрокаТЧ.РабочиеДни * Заработок * СтрокаТЧ.КоэффициентИндексации;
		КонецЕсли;
		
		Если Ограничивать10МРП Тогда // учтем необходимость ограничений
		
			Если СтрокаТЧ.ДатаНачала < '20080901' Тогда
				// до 1 сентября 2008 года действовало ограничение на размер пособия в 10 МРП
				КоличествоМРПДляОграничения = 10;
			ИначеЕсли СтрокаТЧ.ДатаНачала < '20230701' Тогда
				// после 1 сентября 2008 года по 30 июня 2023 года действует ограничение на размер пособия в 15 МРП
				КоличествоМРПДляОграничения = 15;
			Иначе
				// после 1 июля 2023 года действует ограничение на размер пособия в 25 МРП
				КоличествоМРПДляОграничения = 25;
			КонецЕсли;
		
			СтрокаОграничений = ТаблицаОграничений.Найти(НачалоМесяца(СтрокаТЧ.ДатаНачала), "Период");
			Если СтрокаОграничений <> Неопределено Тогда
				Если СтрокаТЧ.Результат + СтрокаОграничений.Результат > КоличествоМРПДляОграничения * СтрокаОграничений.РазмерМРП Тогда
					СтрокаТЧ.Результат = КоличествоМРПДляОграничения * СтрокаОграничений.РазмерМРП - СтрокаОграничений.Результат;
				КонецЕсли;
				
				// запомним сколько начислили в текущей строке, чтобы если из-за индексации заработка в середине 
				// оплачиваемого периода учитывать ограничение на 10 МРП
				СтрокаОграничений.Результат = СтрокаОграничений.Результат + СтрокаТЧ.Результат;
			Иначе
				// запомним сколько начислили в текущей строке, чтобы если из-за индексации заработка в середине 
				// оплачиваемого периода учитывать ограничение на 10 МРП
				СтрокаОграничений = ТаблицаОграничений.Добавить();
				СтрокаОграничений.Период = НачалоМесяца(СтрокаТЧ.ДатаНачала);
				СтрокаОграничений.Результат = СтрокаТЧ.Результат;
			КонецЕсли;
		КонецЕсли;
			
		// округлим результат
		СтрокаТЧ.Результат = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(СтрокаТЧ.Результат, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
	КонецЦикла;

КонецПроцедуры

Процедура НачальноеЗаполнение(Параметры) Экспорт

	Если ТипЗнч(Параметры.Ссылка) <> Тип("ДокументСсылка.НачислениеЗарплатыРаботникамОрганизаций") 
		ИЛИ ВРег(Параметры.ИмяТабличнойЧасти) <> ВРег("Начисления") Тогда
		
		ВызватьИсключение НСтр("ru = 'Обработка предназначена только для заполнения табличной части ""Начисления"" документа ""Начисление зарплаты работникам организаций""!'");
		
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Параметры.Организация) Тогда
		
		ВызватьИсключение НСтр("ru = 'Не выбрана организация!'");
		
	КонецЕсли;
	
	Ссылка = Параметры.Ссылка;
	Организация = Параметры.Организация;
	СпособОтраженияВБухучете = Параметры.СпособОтраженияВБухучете;
	
	Если Параметры.Режим = "РасчетКомпенсации" Тогда
		КомпенсацияОтпуска = Истина;
	Иначе
		КомпенсацияОтпуска = Ложь;
	КонецЕсли;
	
	ЗаполнитьТабличныеЧастиОбработки(Параметры);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


Функция ПолучитьДатуНачалаПримененияКоэффициентаПоМесяцуПовышения() Экспорт
	
	Возврат	'20150820';
	
КонецФункции

// Возвращает дату вступления в Постановлением Правительства РК от 11.07.2006 г. № 657  
// "О  внесении дополнения в постановление Правительства РК от 29.12.2000 г. № 1942 
//	«Об утверждении Инструкции о порядке исчисления средней заработной платы работников»"
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   дата
//
Функция ПолучитьДатуНачалаРасчетаСреднегоЗаработкаСУчетомИндексации() Экспорт

	Возврат	'20060725';              

КонецФункции

// Загружает из регл. производственного календаря данные за указанный период
//
Процедура ЗаполнитьТаблицуКалендаря(ДатаНач, ДатаКон)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", ПроизводственныйКалендарь);
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Календарь.Дата КАК Дата,
	|	ВЫБОР КОГДА Календарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК РабочийДень,
	|	ВЫБОР КОГДА Календарь.ВидДня <> ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК КалендарныйДень
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК Календарь
	|ГДЕ
	|	Календарь.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
	|	И Календарь.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|УПОРЯДОЧИТЬ ПО
	|	Календарь.Дата
	|";

	ТаблицаКалендаря = Запрос.Выполнить().Выгрузить();

КонецПроцедуры

// Процедура разделяет записи в таблиной части Начисления с учетом периодов действия коэффициентов индексации заработка.
//	
// Возвращаемого значения нет, изменяет содержимое табличной части Начисления
//
Процедура РазделитьЗаписиНачисленийПоПериодамИндексацииЗаработка()

	ДатаНачалаПримененияКоэффициентаПоМесяцуПовышения = ПолучитьДатуНачалаПримененияКоэффициентаПоМесяцуПовышения();
	
	ГоловнаяОрганизация = ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Организация);
	УчетнаяПолитикаПоПерсоналуОрганизацииТаблица = ПолныеПраваПовтИсп.СформироватьТаблицуУчетнойПолитикиПоПерсоналу();		
	ЗначениеУчетнойПолитики = УчетнаяПолитикаПоПерсоналуОрганизацииТаблица.Найти(ГоловнаяОрганизация, "Организация");
	Если ЗначениеУчетнойПолитики <> Неопределено Тогда
		РасчетКоэффициентаНарастающимИтогом                      = ЗначениеУчетнойПолитики.РасчетКоэффициентаНарастающимИтогом;
	Иначе 
		РасчетКоэффициентаНарастающимИтогом                      = Ложь;
	КонецЕсли;

	// определим даты выбора сведений о коэффициентах индексации

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Организация));
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КоэффициентыИндексацииЗаработка.Период,
	|	КоэффициентыИндексацииЗаработка.Коэффициент
	|ИЗ
	|	РегистрСведений.КоэффициентыИндексацииЗаработка КАК КоэффициентыИндексацииЗаработка
	|ГДЕ
	|	КоэффициентыИндексацииЗаработка.Организация = &Организация
	|	И КоэффициентыИндексацииЗаработка.Сотрудник = &Сотрудник
	|	И КоэффициентыИндексацииЗаработка.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И КоэффициентыИндексацииЗаработка.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоэффициентыИндексацииЗаработка.Период
	|";
	
	ВыборкаКоэффициентовИндексации = Запрос.Выполнить().Выбрать();

	// учтем возможность повышения заработка в течение оплачиваемого периода
	Пока ВыборкаКоэффициентовИндексации.Следующий() Цикл
		Инд = 0;
		Пока Инд < Начисления.Количество() Цикл
			ЗаписьНабора = Начисления[Инд];
				
			Если ЗаписьНабора.ДатаНачала >= ВыборкаКоэффициентовИндексации.Период Тогда
				// нужно применить коэффициент индексации к строке
				Если ДатаНачала < ДатаНачалаПримененияКоэффициентаПоМесяцуПовышения
					ИЛИ РасчетКоэффициентаНарастающимИтогом Тогда
					ЗаписьНабора.КоэффициентИндексации = ЗаписьНабора.КоэффициентИндексации * ВыборкаКоэффициентовИндексации.Коэффициент;
				Иначе 
					ЗаписьНабора.КоэффициентИндексации = ВыборкаКоэффициентовИндексации.Коэффициент;
				КонецЕсли;
				
			ИначеЕсли ЗаписьНабора.ДатаНачала < ВыборкаКоэффициентовИндексации.Период
					И ВыборкаКоэффициентовИндексации.Период <= ЗаписьНабора.ДатаОкончания Тогда
					
				// нужно разделить строку на две - до и после индексации
				НоваяЗаписьНабора = Начисления.Вставить(Начисления.Индекс(ЗаписьНабора)+1);
				ЗаполнитьЗначенияСвойств(НоваяЗаписьНабора, ЗаписьНабора);
					
				ЗаписьНабора.ДатаОкончания 		= НачалоДня(ВыборкаКоэффициентовИндексации.Период) - 1;
				НоваяЗаписьНабора.ДатаНачала 	= НачалоДня(ВыборкаКоэффициентовИндексации.Период);
				Если ДатаНачала < ДатаНачалаПримененияКоэффициентаПоМесяцуПовышения 
					ИЛИ РасчетКоэффициентаНарастающимИтогом Тогда
					НоваяЗаписьНабора.КоэффициентИндексации = ЗаписьНабора.КоэффициентИндексации * ВыборкаКоэффициентовИндексации.Коэффициент;
				Иначе 
					НоваяЗаписьНабора.КоэффициентИндексации = ВыборкаКоэффициентовИндексации.Коэффициент;
				КонецЕсли;
						
				Инд = Инд + 1; // пропускаем добавленную запись
				
			КонецЕсли;
				
			Инд = Инд + 1;
		КонецЦикла;
			
	КонецЦикла;

КонецПроцедуры

// Заполняет данные обработки по содержимому исходного документа
//
Процедура ЗаполнитьТабличныеЧастиОбработки(Параметры)
	
	// если уже есть данные, то перенесем их в обработку
	Если Ссылка.Начисления.Количество() > 0 Тогда
		
		// в документе должны быть данные только по одному работнику, поэтому берем его из первой строки
		Сотрудник = Ссылка.Начисления[0].Сотрудник;
		
		ДатаНачала = '29991231';
		ДатаОкончания = '00010101';
		РабочиеДни = 0;
		РабочиеЧасы = 0;
		КалендарныеДни = 0;
		ДатаНачалаРасчетаСреднегоЗаработкаТолькоПоРабочимДням = ПроведениеРасчетовСервер.ПолучитьДатуНачалаРасчетаСреднегоЗаработкаТолькоПоРабочимДням();
		
		Для Каждого СтрокаТЧ Из Ссылка.Начисления Цикл
			
			Если СтрокаТЧ.Сотрудник = Сотрудник Тогда
				
				Если СтрокаТЧ.Сотрудник <> Сотрудник Тогда
					
					ВызватьИсключение НСтр("ru = 'В документе введены данные более чем по одному сотруднику, расчет по среднему заработку невозможен!'");
					
				КонецЕсли;
				
				СпособРасчетаТЧ = СтрокаТЧ.ВидРасчета.СпособРасчета;
				Если ЗначениеЗаполнено(СпособРасчетаТЧ) Тогда
					
					Если (Параметры.Режим = "РасчетОтпуска" ИЛИ Параметры.Режим = "РасчетКомпенсации")
						И СпособРасчетаТЧ <> Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска Тогда
						
						ТекстИсключения = НСтр("ru = 'В документе присутствуют виды расчета со способом, отличным от %1'");  
						ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИсключения, Строка(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска));
						
						ВызватьИсключение ТекстИсключения;
						
					ИначеЕсли Параметры.Режим = "РасчетБольничного" И СпособРасчетаТЧ <> Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных Тогда
						
						ТекстИсключения = НСтр("ru = 'В документе присутствуют виды расчета со способом, отличным от %1'");  
						ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИсключения, Строка(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных));
						
						ВызватьИсключение ТекстИсключения;
						
					КонецЕсли;
					
				КонецЕсли;
				
				НоваяСтрока = Начисления.Добавить();
				НоваяСтрока.ВидРасчета 					= СтрокаТЧ.ВидРасчета;
				НоваяСтрока.ДатаНачала 					= СтрокаТЧ.ДатаНачала;
				НоваяСтрока.ДатаОкончания 				= СтрокаТЧ.ДатаОкончания;
				Если Параметры.Режим = "РасчетОтпуска" ИЛИ Параметры.Режим = "РасчетКомпенсации" Тогда
					Если Ссылка.Начисления[0].ДатаНачала < ДатаНачалаРасчетаСреднегоЗаработкаТолькоПоРабочимДням Тогда
						// до 29.12.2007 оплачивались календарные дни - они были в ОтработаноДней, а в ДополнительныхДанных - рабочие дни за период отпуска
						НоваяСтрока.РабочиеДни 			= СтрокаТЧ.ДополнительныеДанные;
						НоваяСтрока.КалендарныеДни		= СтрокаТЧ.ОтработаноДней;
					Иначе
						// после 29.12.2007 оплачиваются рабочие дни - они в ОтработаноДней, а в ДополнительныеДанные - календарные дни
						НоваяСтрока.РабочиеДни 			= СтрокаТЧ.ОтработаноДней;
						НоваяСтрока.РабочиеЧасы			= СтрокаТЧ.ОтработаноЧасов;
						НоваяСтрока.КалендарныеДни		= СтрокаТЧ.ДополнительныеДанные;
					КонецЕсли;
				Иначе
					НоваяСтрока.РабочиеДни 				= СтрокаТЧ.ОтработаноДней;
					НоваяСтрока.РабочиеЧасы				= СтрокаТЧ.ОтработаноЧасов;
				КонецЕсли;
				Если СтрокаТЧ.Размер <> СтрокаТЧ.Результат Тогда
					НоваяСтрока.КоэффициентИндексации		= СтрокаТЧ.Размер;
				Иначе
					НоваяСтрока.КоэффициентИндексации		= 1;
				КонецЕсли;
				НоваяСтрока.Результат 					= СтрокаТЧ.Результат;
				НоваяСтрока.СпособОтраженияВБухучете 	= СтрокаТЧ.СпособОтраженияВБухучете;
				
				// определяем период всего отпуска и общее число дней
				ДатаНачала 		= Мин(ДатаНачала, НоваяСтрока.ДатаНачала);
				ДатаОкончания 	= Макс(ДатаОкончания, НоваяСтрока.ДатаОкончания);
				РабочиеДни 		= РабочиеДни + НоваяСтрока.РабочиеДни;
				РабочиеЧасы		= РабочиеЧасы + НоваяСтрока.РабочиеЧасы;
				КалендарныеДни 	= КалендарныеДни + НоваяСтрока.КалендарныеДни;
				
				// если компенсация, то попытаемся подставить дату увольнения, если последнее кадровое событие - увольнение
				Если Параметры.Режим = "РасчетКомпенсации" Тогда
					Запрос = Новый Запрос;
					
					Запрос.УстановитьПараметр("Сотрудник", СтрокаТЧ.Сотрудник);
					Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Параметры.Организация));
					
					Запрос.Текст = "
					|ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	РаботникиОрганизации.Период,
					|	РаботникиОрганизации.ПричинаИзмененияСостояния
					|ИЗ
					|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(,
					|			Сотрудник = &Сотрудник
					|			И Организация = &Организация) КАК РаботникиОрганизации
					|";
					
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						Если Выборка.ПричинаИзмененияСостояния = Перечисления.ПричиныИзмененияСостояния.Увольнение Тогда
							Если Параметры.Свойство("Ссылка") И ТипЗнч(Параметры.Ссылка) = Тип("ДокументСсылка.НачислениеЗарплатыРаботникамОрганизаций")
							   И Параметры.Ссылка.Начисления.Количество() > 0
							   И Параметры.Ссылка.Начисления[0].ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.КомпенсацияОтпуска Тогда // это "Компенсация отпуска при увольнении"
								ДатаНачала = Выборка.Период;
								ДатаОкончания = Макс(ДатаОкончания, ДатаНачала);
							Иначе
								ДатаНачала = Выборка.Период - 86400;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;		
				КонецЕсли;
				
			Иначе
				
				ВызватьИсключение НСтр("ru = 'В документе введены данные более чем по одному сотруднику, расчет по среднему заработку невозможен!'");
				
			КонецЕсли;
		КонецЦикла;
		
		Если ДатаНачала = '29991231' Тогда
			ДатаНачала = '00010101';
		КонецЕсли;
		
		Если НЕ ((Параметры.Режим = "РасчетОтпуска" ИЛИ Параметры.Режим = "РасчетКомпенсации")
			И ЗначениеЗаполнено(ДатаНачала) 
			И ДатаНачала < ДатаНачалаРасчетаСреднегоЗаработкаТолькоПоРабочимДням) Тогда
			// для отпуска поддержка расчета среднего заработка по часам осуществляется только с момента
			// вступления в силу Единых правил исчисления средней зарплаты, для бол. листов - всегда
			
			ИспользоватьСреднеЧасовойЗаработок = Обработки.РасчетПоСреднемуЗаработку.ОпределитьИспользованиеСреднеЧасовогоЗаработка(Организация, Сотрудник, ДатаНачала);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Ограничивать10МРП = Истина; // по умолчанию ограничивать 
ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ;
ПроизводственныйКалендарь = КалендарныеГрафики.ПроизводственныйКалендарьРеспубликиКазахстан();

#КонецЕсли
