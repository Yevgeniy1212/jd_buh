////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	
	ПараметрыРазмещенияИсточники = Новый Массив;
	ПараметрыРазмещенияИсточники.Добавить(Метаданные.Документы.НачислениеЗарплатыРаботникамОрганизаций);
	
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ФормаКоманднаяПанель;
	ПараметрыРазмещения.Источники = ПараметрыРазмещенияИсточники;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбработкаОбъект = ДанныеФормыВЗначение(Объект, Тип("ОбработкаОбъект.РасчетПоСреднемуЗаработку"));
	ОбработкаОбъект.НачальноеЗаполнение(Параметры);
	ЗначениеВДанныеФормы(ОбработкаОбъект, Объект);
	
	ДатаНачалаРасчетаСреднегоЗаработка = ПроведениеРасчетовСервер.ПолучитьДатуНачалаРасчетаСреднегоЗаработкаТолькоПоРабочимДням();
	
	Если Объект.Начисления.Количество() = 0 Тогда
		// если открыли первый раз, то по умолчанию поставим вид расчета "Оплата отпуска" либо компенсация без увольнения
		НоваяСтрока = Объект.Начисления.Добавить();
		Если Объект.КомпенсацияОтпуска Тогда
			НоваяСтрока.ВидРасчета = ПредопределенноеЗначение("ПланВидовРасчета.ОсновныеНачисленияОрганизаций.КомпенсацияОтпускаБезУвольнения");
		Иначе
			НоваяСтрока.ВидРасчета = ПредопределенноеЗначение("ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтп");
		КонецЕсли;
		НоваяСтрока.КоэффициентИндексации = 1;
	КонецЕсли;

	//заполним рабочие и календарные  дни
	Если НЕ Объект.КомпенсацияОтпуска Тогда

		ЗаполнитьКалендарныеИРабочиеДни(Объект.РабочиеДни, Объект.КалендарныеДни, Объект.ДатаНачала, Объект.ДатаОкончания);
		
		Объект.РабочиеЧасы = 8 * Объект.РабочиеДни;

		Если Объект.Начисления.Количество() = 1 Тогда
			// если одна строка в начислениях, то сразу в ней увеличим число дней
			Объект.Начисления[0].КалендарныеДни = Объект.КалендарныеДни;
		КонецЕсли;
	
	КонецЕсли;

	УстановитьПараметрыВыбораНачисленияВидРасчета(ЭтаФорма);

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ЗначениеЗаполнено(Объект.ДатаОкончания) И Объект.ДатаНачала > Объект.ДатаОкончания Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Дата окончания не может быть больше даты начала'"),, "ДатаОкончания", "Объект", Отказ);
	КонецЕсли;
	
	ВсегоДней = Объект.Начисления.Итог("КалендарныеДни");
	Если Объект.КалендарныеДни <> 0 И ?(Объект.КалендарныеДни < 0, -Объект.КалендарныеДни, Объект.КалендарныеДни) <> ?(ВсегоДней < 0, -ВсегоДней, ВсегоДней) И НЕ Объект.КомпенсацияОтпуска Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Количество дней отпуска по видам не совпадает с общим числом календарных дней за период'"),, "КалендарныеДни", "Объект", Отказ);
	КонецЕсли;

	Если Объект.Начисления.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'В табличной части ""Отпуска"" не указаны строки с видами и количеством дней отпуска!'"),, "Начисления", "Объект", Отказ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВозврата = ПриЗакрытииНаСервере();

	Если ПеренестиВДокумент Тогда
		ОповеститьОВыборе(СтруктураВозврата);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	ПриИзмененииДатыНачалаОкончания();
	
	Если ЗначениеЗаполнено(Объект.ДатаНачала) И Объект.ДатаНачала >= ДатаНачалаРасчетаСреднегоЗаработка Тогда
		// определим как считать средний заработок - от дней или от часов
		Объект.ИспользоватьСреднеЧасовойЗаработок = ОпределитьИспользованиеСреднеЧасовогоЗаработка(Объект.Организация, Объект.Сотрудник, Объект.ДатаНачала);
		СреднеЧасовойЗароботок = ?(Объект.ИспользоватьСреднеЧасовойЗаработок, 1, 0);

	КонецЕсли;

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	ПриИзмененииДатыНачалаОкончания();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	Если Объект.КомпенсацияОтпуска 
		ИЛИ ЗначениеЗаполнено(Объект.ДатаНачала) И Объект.ДатаНачала >= ДатаНачалаРасчетаСреднегоЗаработка Тогда
		
		Если Объект.Начисления.Количество() = 1 Тогда
			ВидРасчета = Объект.Начисления[0].ВидРасчета;
		Иначе
			ВидРасчета = Неопределено;
		КонецЕсли;
		
		ДанныеОбъекта = Новый Структура("Организация, Сотрудник, КомпенсацияОтпуска, ДатаНачала, ИспользоватьСреднеЧасовойЗаработок, ДатаНачалаРасчетаСреднегоЗаработка, ВидРасчета", 
										Объект.Организация, Объект.Сотрудник, Объект.КомпенсацияОтпуска, Объект.ДатаНачала, Объект.ИспользоватьСреднеЧасовойЗаработок, ДатаНачалаРасчетаСреднегоЗаработка, ВидРасчета);
										
		СотрудникПриИзмененииНаСервере(ДанныеОбъекта);
		
		Если ДанныеОбъекта.ИспользоватьСреднеЧасовойЗаработок <> Объект.ИспользоватьСреднеЧасовойЗаработок Тогда
			
			СреднеЧасовойЗароботок = ?(ДанныеОбъекта.ИспользоватьСреднеЧасовойЗаработок, 1, 0);

		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
		
		Если Объект.Начисления.Количество() = 1 И НЕ ДанныеОбъекта.ВидРасчета = Объект.Начисления[0].ВидРасчета Тогда
			Объект.Начисления[0].ВидРасчета = ДанныеОбъекта.ВидРасчета;	
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СреднеЧасовойЗароботокПриИзменении(Элемент)
	
	Объект.ИспользоватьСреднеЧасовойЗаработок = ?(СреднеЧасовойЗароботок = 1, Истина, Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ СреднийЗаработок

&НаКлиенте
Процедура СреднийЗаработокПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.КоэффициентИндексации = 1;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Начисления

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		Если НЕ Копирование Тогда
			Элемент.ТекущиеДанные.КоэффициентИндексации = 1;
		КонецЕсли;
		
		// вычислим остаток дней отпуска
		ОстатокРабочихДней = Объект.РабочиеДни;
		ОстатокРабочихЧасов = Объект.РабочиеЧасы;
		ОстатокКалендарныхДней = Объект.КалендарныеДни;
		
		Для Каждого СтрокаОтпуска Из Объект.Начисления Цикл
			Если СтрокаОтпуска <> Элемент.ТекущиеДанные Тогда
				ОстатокРабочихДней = ОстатокРабочихДней - СтрокаОтпуска.РабочиеДни;
				ОстатокРабочихЧасов = ОстатокРабочихЧасов - СтрокаОтпуска.РабочиеЧасы;
				ОстатокКалендарныхДней = ОстатокКалендарныхДней - СтрокаОтпуска.КалендарныеДни;
			КонецЕсли;
		КонецЦикла;
		
		Элемент.ТекущиеДанные.РабочиеДни = ОстатокРабочихДней;
		Элемент.ТекущиеДанные.РабочиеЧасы = ОстатокРабочихЧасов;
		Элемент.ТекущиеДанные.КалендарныеДни = ОстатокКалендарныхДней;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияКалендарныеДниПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;
	
	Если Объект.КомпенсацияОтпуска И ТекущиеДанные.КалендарныеДни <> 0 Тогда
		
		ДанныеОбъект = Новый Структура("Организация, Сотрудник, ДатаНачала", Объект.Организация, Объект.Сотрудник, Объект.ДатаНачала);
		
		ДанныеСтрока = Новый Структура("КалендарныеДни, РабочиеДни, РабочиеЧасы", ТекущиеДанные.КалендарныеДни, ТекущиеДанные.РабочиеДни, ТекущиеДанные.РабочиеЧасы);
		
		НачисленияКалендарныеДниПриИзмененииНаСервере(ДанныеОбъект, ДанныеСтрока);
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрока) 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияРабочиеДниРучныеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;
	ТекущиеДанные.РабочиеЧасы = ТекущиеДанные.РабочиеДни * 8;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указан сотрудник'"),, "Сотрудник", "Объект");
		Возврат;
	КонецЕсли;

	ПеренестиВДокумент = Истина;
	Закрыть(КодВозвратаДиалога.OK);
	
КонецПроцедуры

&НаКлиенте
Процедура Рассчитать(Команда)
	
	РассчитатьСреднийЗаработокИОтпуск(Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНачисления(Команда)
	
	РассчитатьСреднийЗаработокИОтпуск(, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСреднийЗаработок(Команда)
	
	РассчитатьСреднийЗаработокИОтпуск(Истина);
	
КонецПроцедуры

&НаКлиенте
Функция ПечатьСреднегоЗаработка(ПараметрыПечати) Экспорт

	ПараметрыПечати.ДополнительныеПараметры.Вставить("ДанныеОбработки", ПолучитьДанныеОбработки());

	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(ПараметрыПечати.МенеджерПечати, ПараметрыПечати.Идентификатор,
		ПараметрыПечати.ОбъектыПечати, ПараметрыПечати.Форма, ПараметрыПечати.ДополнительныеПараметры);

КонецФункции
	

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;

	Если Объект.КомпенсацияОтпуска Тогда
		// для компенсации скрываем лишние реквизиты
		Элементы.ДатаНачала.Заголовок = НСтр("ru = 'Дата расчета'");
		
		Элементы.ДатаОкончания.Видимость  = Ложь;
		Элементы.КалендарныеДни.Видимость = Ложь;
		Элементы.РабочиеДни.Видимость     = Ложь;
		Элементы.РабочиеЧасы.Видимость    = Ложь;
		
	Иначе
		// для отпуска необходимо указывать период
		Элементы.ДатаНачала.Заголовок = НСтр("ru = 'Период с'");
		
		Элементы.ДатаОкончания.Видимость  = Истина;
		Элементы.КалендарныеДни.Видимость = Истина;
		Элементы.РабочиеДни.Видимость  	  = Истина;
		Элементы.РабочиеЧасы.Видимость    = Истина;
		
	КонецЕсли;		
	
	Форма.СреднеЧасовойЗароботок = ?(Объект.ИспользоватьСреднеЧасовойЗаработок, 1, 0);

	// для отпуска расчет от дней или от часов может быть только после вступления в силу Единых правил расчета ср. заработка (29.12.2007)
	Если ЗначениеЗаполнено(Объект.ДатаНачала) И Объект.ДатаНачала < Форма.ДатаНачалаРасчетаСреднегоЗаработка Тогда
		
		Объект.ИспользоватьСреднеЧасовойЗаработок = Ложь;
		Форма.СреднеЧасовойЗароботок = 0;
		Элементы.СреднеЧасовойЗароботок.Доступность = Ложь;
		
		Элементы.РабочиеДни.Видимость  = Ложь;
		Элементы.РабочиеЧасы.Видимость = Ложь;
		
	Иначе
		Элементы.СреднеЧасовойЗароботок.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораНачисленияВидРасчета(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	НовыеПараметры = Новый Массив();
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.СпособРасчета", ПредопределенноеЗначение("Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска")));
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ЯвляетсяКомпенсациейЗаНеиспользованныйОтпуск", Объект.КомпенсацияОтпуска));
	
	Элементы.НачисленияВидРасчета.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьЧислоДнейНаСервере(ДатаНачала, ДатаОкончания, ВидДня)
	
	Возврат Обработки.РасчетПоСреднемуЗаработку.РассчитатьЧислоДней(ДатаНачала, ДатаОкончания, ВидДня)	
	
КонецФункции

&НаСервереБезКонтекста
Процедура СотрудникПриИзмененииНаСервере(ДанныеОбъекта)
	
	// если компенсация, то попытаемся подставить дату увольнения, если последнее кадровое событие - увольнение
	Если ДанныеОбъекта.КомпенсацияОтпуска Тогда
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Сотрудник", ДанныеОбъекта.Сотрудник);
		Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(ДанныеОбъекта.Организация));
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаботникиОрганизации.Период,
		|	РаботникиОрганизации.ПричинаИзмененияСостояния
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(,
		|			Сотрудник = &Сотрудник
		|			И Организация = &Организация) КАК РаботникиОрганизации
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.ПричинаИзмененияСостояния = Перечисления.ПричиныИзмененияСостояния.Увольнение Тогда
				// в регистре при увольнении пишется дата следующего дня
				ДанныеОбъекта.ДатаНачала = Выборка.Период - 86400;
				
				Если НЕ ДанныеОбъекта.ВидРасчета = Неопределено Тогда
					// подставим вид расчета "Компенсация при увольнении"
					ДанныеОбъекта.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.КомпенсацияОтпуска;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.ДатаНачала) И ДанныеОбъекта.ДатаНачала >= ДанныеОбъекта.ДатаНачалаРасчетаСреднегоЗаработка Тогда
		// определим как считать средний заработок - от дней или от часов
		ДанныеОбъекта.ИспользоватьСреднеЧасовойЗаработок = ОпределитьИспользованиеСреднеЧасовогоЗаработка(ДанныеОбъекта.Организация, ДанныеОбъекта.Сотрудник, ДанныеОбъекта.ДатаНачала);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДатыНачалаОкончания()
	
	Если НЕ Объект.КомпенсацияОтпуска Тогда

		ЗаполнитьКалендарныеИРабочиеДни(Объект.РабочиеДни, Объект.КалендарныеДни, Объект.ДатаНачала, Объект.ДатаОкончания);
		
		Объект.РабочиеЧасы = 8 * Объект.РабочиеДни;

		Если Объект.Начисления.Количество() = 1 Тогда
			// если одна строка в начислениях, то сразу в ней увеличим число дней
			Объект.Начисления[0].КалендарныеДни = Объект.КалендарныеДни;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьКалендарныеИРабочиеДни(РабочиеДни, КалендарныеДни, ДатаНачала, ДатаОкончания)
	
	КалендарныеДни 	= РассчитатьЧислоДнейНаСервере(ДатаНачала, ДатаОкончания, "Календарные");
	РабочиеДни		= РассчитатьЧислоДнейНаСервере(ДатаНачала, ДатаОкончания, "Рабочие");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьИспользованиеСреднеЧасовогоЗаработка(Организация, Сотрудник, ДатаНачала)
	
	Возврат Обработки.РасчетПоСреднемуЗаработку.ОпределитьИспользованиеСреднеЧасовогоЗаработка(Организация, Сотрудник, ДатаНачала);
	
КонецФункции

&НаСервере
Процедура РассчитатьСреднийЗаработокИОтпуск(РасчетСреднего = Ложь, РасчетОтпуска = Ложь)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;

	ОбработкаОбъект = ДанныеФормыВЗначение(Объект, Тип("ОбработкаОбъект.РасчетПоСреднемуЗаработку"));
	
	Если РасчетСреднего Тогда
		ЗначениеТаймера = ОценкаПроизводительности.НачатьЗамерВремени();
		ОбработкаОбъект.РассчитатьСреднийЗаработок(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска);
		ОценкаПроизводительности.ЗакончитьЗамерВремени("Обработка ""расчет по среднему заработку"" (расчет среднего для отпуска)", ЗначениеТаймера);
	КонецЕсли;
	
	Если РасчетОтпуска Тогда
		ЗначениеТаймера = ОценкаПроизводительности.НачатьЗамерВремени();
		ОбработкаОбъект.РассчитатьОтпуск();
		ОценкаПроизводительности.ЗакончитьЗамерВремени("Обработка ""расчет по среднему заработку"" (расчет отпускных)", ЗначениеТаймера);
	КонецЕсли;

	ЗначениеВДанныеФормы(ОбработкаОбъект, Объект);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура НачисленияКалендарныеДниПриИзмененииНаСервере(ДанныеОбъекта, ДанныеСтроки)
	
	// если это компенсация, связанная с увольнением, то отсчет ведем от даты, следующей за датой увольнения
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник", ДанныеОбъекта.Сотрудник);
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(ДанныеОбъекта.Организация));
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОрганизации.Период,
	|	РаботникиОрганизации.ПричинаИзмененияСостояния
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(,
	|           Сотрудник = &Сотрудник
	|			И Организация = &Организация) КАК РаботникиОрганизации
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ДатаНач = ДанныеОбъекта.ДатаНачала;
	Если Выборка.Следующий() Тогда
		Если Выборка.ПричинаИзмененияСостояния = Перечисления.ПричиныИзмененияСостояния.Увольнение
				И ДатаНач = Выборка.Период - 86400 Тогда
			ДатаНач = Выборка.Период;
		КонецЕсли;
	КонецЕсли;
	
	// определим первый рабочий день, начиная с даты расчета, чтобы от него начинать отсчет календарных дней
	Запрос.УстановитьПараметр("ДатаНачалаСобытия", ДатаНач);
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", КалендарныеГрафики.ПроизводственныйКалендарьРеспубликиКазахстан());
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеПроизводственногоКалендаря.Дата
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|ГДЕ
	|   ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
	|	И ДанныеПроизводственногоКалендаря.Дата >= &ДатаНачалаСобытия
	|	И ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеПроизводственногоКалендаря.Дата
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДатаНач = Выборка.Дата;
	КонецЕсли;
	
	// определим дату окончания периода с нужным количеством календарных дней
	//ДанныеСтроки = ЭлементыФормы.Отпуска.ТекущиеДанные;
	ДатаКон = Обработки.РасчетПоСреднемуЗаработку.ПолучитьДатуОкончанияПоЧислуДнейПериода(ДатаНач, ДанныеСтроки.КалендарныеДни);
	
	ДанныеСтроки.РабочиеДни = Обработки.РасчетПоСреднемуЗаработку.РассчитатьЧислоДней(ДатаНач, ДатаКон, "Рабочие");
	ДанныеСтроки.РабочиеЧасы = ДанныеСтроки.РабочиеДни * 8;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьРасчетаСреднегоВВХранилище()

	ТаблицаНоменклатуры = ПодготовитьТаблицуНачислений();

	АдресРасчетаСреднегоВХранилище = ПоместитьВоВременноеХранилище(ТаблицаНоменклатуры, УникальныйИдентификатор);

	Возврат АдресРасчетаСреднегоВХранилище;

КонецФункции

&НаСервере
Функция ПодготовитьТаблицуНачислений()

	// узнаем подразделение, в котором числится работник на начало отпуска/больничного
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаАктуальности", ?(ЗначениеЗаполнено(Объект.ДатаНачала), Объект.ДатаНачала, Объект.Ссылка.Дата));
	Запрос.УстановитьПараметр("Сотрудник", Объект.Сотрудник);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Объект.Организация));
		
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОрганизации.ПодразделениеОрганизации
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&ДатаАктуальности,
	|			Организация = &ГоловнаяОрганизация
	|			И Сотрудник = &Сотрудник) КАК РаботникиОрганизации
	|";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
	Иначе
		ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	ТаблицаНачислений = Объект.Ссылка.Начисления.ВыгрузитьКолонки();
	
	Для Каждого СтрокаТЧ Из Объект.Начисления Цикл

		НоваяСтрока = ТаблицаНачислений.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		
		НоваяСтрока.Физлицо   = Объект.Сотрудник.ФизЛицо;
		НоваяСтрока.Сотрудник = Объект.Сотрудник;
		НоваяСтрока.Размер    = СтрокаТЧ.КоэффициентИндексации;
		НоваяСтрока.ПодразделениеОрганизации = ПодразделениеОрганизации;		
		Если Параметры.Режим = "РасчетОтпуска" ИЛИ Параметры.Режим = "РасчетКомпенсации" Тогда
			Если Объект.ДатаНачала < ДатаНачалаРасчетаСреднегоЗаработка Тогда
				// до 29.12.2007 - отпуск рассчитывается в календарных днях
				НоваяСтрока.ОтработаноДней	     = СтрокаТЧ.КалендарныеДни;
				НоваяСтрока.ДополнительныеДанные = СтрокаТЧ.РабочиеДни;
			Иначе
				// после 29.12.2007 - отпуск рассчитывается в рабочих днях
				НоваяСтрока.ОтработаноДней	  	 = СтрокаТЧ.РабочиеДни;
				НоваяСтрока.ОтработаноЧасов		 = СтрокаТЧ.РабочиеЧасы;
				НоваяСтрока.ДополнительныеДанные = СтрокаТЧ.КалендарныеДни;
			КонецЕсли;
		Иначе
			НоваяСтрока.ОтработаноДней  = СтрокаТЧ.РабочиеДни;
			НоваяСтрока.ОтработаноЧасов = СтрокаТЧ.РабочиеЧасы;
		КонецЕсли;
	КонецЦикла;

	Возврат ТаблицаНачислений;
	
КонецФункции

&НаСервере
Функция ПриЗакрытииНаСервере()

	СтруктураВозврата = Новый Структура;
	
	Если ПеренестиВДокумент Тогда
		АдресРасчетаСреднегоВХранилище = ПоместитьРасчетаСреднегоВВХранилище();
		СтруктураВозврата.Вставить("АдресРасчетаСреднегоВХранилище", АдресРасчетаСреднегоВХранилище);
		СтруктураВозврата.Вставить("СпособОтраженияВБухучете", Объект.СпособОтраженияВБухучете);
	КонецЕсли;
	
	Возврат СтруктураВозврата;

КонецФункции

&НаСервере
Функция ПолучитьДанныеОбработки()
	
	СтруктураДанных = Новый Структура("Сотрудник, Организация, Ссылка, ДатаНачала, ДатаОкончания, РабочиеДни, РабочиеЧасы, КалендарныеДни, КомпенсацияОтпуска, Ограничивать10МРП, ВидРасчета, СпособОтраженияВБухучете, ИспользоватьСреднеЧасовойЗаработок");
	
	ЗаполнитьЗначенияСвойств(СтруктураДанных, Объект);
	
	СтруктураДанных.Вставить("СпособРасчета", Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска);
	СтруктураДанных.Вставить("АдресСреднийЗаработок", ПоместитьВоВременноеХранилище(Объект.СреднийЗаработок.Выгрузить(), Новый УникальныйИдентификатор())); 
	СтруктураДанных.Вставить("АдресНачисления", 	  ПоместитьВоВременноеХранилище(Объект.Начисления.Выгрузить(), Новый УникальныйИдентификатор()));
	
	Возврат СтруктураДанных;
	
КонецФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды



