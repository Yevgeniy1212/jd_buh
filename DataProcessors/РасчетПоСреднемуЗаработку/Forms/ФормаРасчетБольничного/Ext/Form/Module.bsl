
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	
	ПараметрыРазмещенияИсточники = Новый Массив;
	ПараметрыРазмещенияИсточники.Добавить(Метаданные.Документы.НачислениеЗарплатыРаботникамОрганизаций);
	
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ФормаКоманднаяПанель;
	ПараметрыРазмещения.Источники = ПараметрыРазмещенияИсточники;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	ОбработкаОбъект = ДанныеФормыВЗначение(Объект, Тип("ОбработкаОбъект.РасчетПоСреднемуЗаработку"));
	ОбработкаОбъект.НачальноеЗаполнение(Параметры);
	ЗначениеВДанныеФормы(ОбработкаОбъект, Объект);
	
	ДатаНачалаРасчетаСреднегоЗаработка = ПроведениеРасчетовСервер.ПолучитьДатуНачалаРасчетаСреднегоЗаработкаТолькоПоРабочимДням();
	
	Объект.РабочиеДни = РассчитатьЧислоДнейНаСервере(Объект.ДатаНачала, Объект.ДатаОкончания, "Рабочие");
	Объект.РабочиеЧасы = Объект.РабочиеДни * 8;
	
	УстановитьПараметрыВыбораНачисленияВидРасчета(ЭтаФорма); 	

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидРасчета) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Поле ""Вид расчета"" не заполнено'"),, "ВидРасчета", "Объект", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Поле ""Дата окончания"" не заполнено'"),, "ДатаОкончания", "Объект", Отказ);
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ДатаОкончания) И Объект.ДатаНачала > Объект.ДатаОкончания Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Дата окончания не может быть больше даты начала'"),, "ДатаОкончания", "Объект", Отказ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураВозврата = ПриЗакрытииНаСервере();

	Если ПеренестиВДокумент Тогда
		ОповеститьОВыборе(СтруктураВозврата);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СреднеЧасовойЗароботокПриИзменении(Элемент)
	
	Объект.ИспользоватьСреднеЧасовойЗаработок = ?(СреднеЧасовойЗароботок = 1, Истина, Ложь);
	СреднеЧасовойЗароботок = ?(Объект.ИспользоватьСреднеЧасовойЗаработок, 1, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)

	Объект.ИспользоватьСреднеЧасовойЗаработок = ОпределитьИспользованиеСреднеЧасовогоЗаработка(Объект.Организация, Объект.Сотрудник, Объект.ДатаНачала);
	СреднеЧасовойЗароботок = ?(Объект.ИспользоватьСреднеЧасовойЗаработок, 1, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
		
	Объект.РабочиеДни = РассчитатьЧислоДнейНаСервере(Объект.ДатаНачала, Объект.ДатаОкончания, "Рабочие");
	Объект.РабочиеЧасы = Объект.РабочиеДни * 8;
	
	// определим как считать средний заработок - от дней или от часов
	Объект.ИспользоватьСреднеЧасовойЗаработок = ОпределитьИспользованиеСреднеЧасовогоЗаработка(Объект.Организация, Объект.Сотрудник, Объект.ДатаНачала);
	СреднеЧасовойЗароботок = ?(Объект.ИспользоватьСреднеЧасовойЗаработок, 1, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	Объект.РабочиеДни = РассчитатьЧислоДнейНаСервере(Объект.ДатаНачала, Объект.ДатаОкончания, "Рабочие");
	Объект.РабочиеЧасы = Объект.РабочиеДни * 8;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ СреднийЗаработок

&НаКлиенте
Процедура СреднийЗаработокПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование  Тогда
		
		Элемент.ТекущиеДанные.КоэффициентИндексации = 1;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Начисления

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование  Тогда
		
		Элемент.ТекущиеДанные.КоэффициентИндексации = 1;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указан сотрудник'"),, "Сотрудник", "Объект");
		Возврат;
	КонецЕсли;

	ПеренестиВДокумент = Истина;
	Закрыть(КодВозвратаДиалога.OK);
	
КонецПроцедуры

&НаКлиенте
Процедура Рассчитать(Команда)
	
	РассчитатьСреднийЗаработокИБольничный(Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНачисления(Команда)
	
	РассчитатьСреднийЗаработокИБольничный(, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСреднийЗаработок(Команда)
	
	РассчитатьСреднийЗаработокИБольничный(Истина);
	
КонецПроцедуры

&НаКлиенте
Функция ПечатьСреднегоЗаработка(ПараметрыПечати) Экспорт

	ПараметрыПечати.ДополнительныеПараметры.Вставить("ДанныеОбработки", ПолучитьДанныеОбработки());

	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(ПараметрыПечати.МенеджерПечати, ПараметрыПечати.Идентификатор,
		ПараметрыПечати.ОбъектыПечати, ПараметрыПечати.Форма, ПараметрыПечати.ДополнительныеПараметры);

КонецФункции
	

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораНачисленияВидРасчета(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	НовыеПараметры = Новый Массив();
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.СпособРасчета", ПредопределенноеЗначение("Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных")));
	
	Элементы.ВидРасчета.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	Элементы.НачисленияВидРасчета.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСреднийЗаработокИБольничный(РасчетСреднего = Ложь, РасчетБольничного = Ложь)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;

	ОбработкаОбъект = ДанныеФормыВЗначение(Объект, Тип("ОбработкаОбъект.РасчетПоСреднемуЗаработку"));
	
	Если РасчетСреднего Тогда
		ЗначениеТаймера = ОценкаПроизводительности.НачатьЗамерВремени();
		ОбработкаОбъект.РассчитатьСреднийЗаработок(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных);
		ОценкаПроизводительности.ЗакончитьЗамерВремени("Обработка ""расчет по среднему заработку"" (расчет среднего для больнихного листа)", ЗначениеТаймера);
	КонецЕсли;
	
	Если РасчетБольничного Тогда
		ЗначениеТаймера = ОценкаПроизводительности.НачатьЗамерВремени();
		ОбработкаОбъект.РассчитатьБольничныйЛист();
		ОценкаПроизводительности.ЗакончитьЗамерВремени("Обработка ""расчет по среднему заработку"" (расчет больничного листа)", ЗначениеТаймера);
	КонецЕсли;

	ЗначениеВДанныеФормы(ОбработкаОбъект, Объект);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьИспользованиеСреднеЧасовогоЗаработка(Организация, Сотрудник, ДатаНачала)
	
	Возврат Обработки.РасчетПоСреднемуЗаработку.ОпределитьИспользованиеСреднеЧасовогоЗаработка(Организация, Сотрудник, ДатаНачала);
	
КонецФункции

&НаСервереБезКонтекста
Функция РассчитатьЧислоДнейНаСервере(ДатаНачала, ДатаОкончания, ВидДня)
	
	Возврат Обработки.РасчетПоСреднемуЗаработку.РассчитатьЧислоДней(ДатаНачала, ДатаОкончания, ВидДня)	
	
КонецФункции

&НаСервере
Функция ПоместитьРасчетаСреднегоВВХранилище()

	ТаблицаНоменклатуры = ПодготовитьТаблицуНачислений();

	АдресРасчетаСреднегоВХранилище = ПоместитьВоВременноеХранилище(ТаблицаНоменклатуры, УникальныйИдентификатор);

	Возврат АдресРасчетаСреднегоВХранилище;

КонецФункции

&НаСервере
Функция ПодготовитьТаблицуНачислений()

	// узнаем подразделение, в котором числится работник на начало отпуска/больничного
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаАктуальности", ?(ЗначениеЗаполнено(Объект.ДатаНачала), Объект.ДатаНачала, Объект.Ссылка.Дата));
	Запрос.УстановитьПараметр("Сотрудник", Объект.Сотрудник);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Объект.Организация));
		
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОрганизации.ПодразделениеОрганизации
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&ДатаАктуальности,
	|			Организация = &ГоловнаяОрганизация
	|			И Сотрудник = &Сотрудник) КАК РаботникиОрганизации
	|";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
	Иначе
		ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	ТаблицаНачислений = Объект.Ссылка.Начисления.ВыгрузитьКолонки();
	
	Для Каждого СтрокаТЧ Из Объект.Начисления Цикл

		НоваяСтрока = ТаблицаНачислений.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		
		НоваяСтрока.Физлицо   = Объект.Сотрудник.ФизЛицо;
		НоваяСтрока.Сотрудник = Объект.Сотрудник;
		НоваяСтрока.Размер    = СтрокаТЧ.КоэффициентИндексации;
		НоваяСтрока.ПодразделениеОрганизации = ПодразделениеОрганизации;		
		Если Параметры.Режим = "РасчетОтпуска" ИЛИ Параметры.Режим = "РасчетКомпенсации" Тогда
			Если Объект.ДатаНачала < ДатаНачалаРасчетаСреднегоЗаработка Тогда
				// до 29.12.2007 - отпуск рассчитывается в календарных днях
				НоваяСтрока.ОтработаноДней	     = СтрокаТЧ.КалендарныеДни;
				НоваяСтрока.ДополнительныеДанные = СтрокаТЧ.РабочиеДни;
			Иначе
				// после 29.12.2007 - отпуск рассчитывается в рабочих днях
				НоваяСтрока.ОтработаноДней	  	 = СтрокаТЧ.РабочиеДни;
				НоваяСтрока.ОтработаноЧасов		 = СтрокаТЧ.РабочиеЧасы;
				НоваяСтрока.ДополнительныеДанные = СтрокаТЧ.КалендарныеДни;
			КонецЕсли;
		Иначе
			НоваяСтрока.ОтработаноДней  = СтрокаТЧ.РабочиеДни;
			НоваяСтрока.ОтработаноЧасов = СтрокаТЧ.РабочиеЧасы;
		КонецЕсли;
	КонецЦикла;

	Возврат ТаблицаНачислений;
	
КонецФункции

&НаСервере
Функция ПриЗакрытииНаСервере()

	СтруктураВозврата = Новый Структура;
	
	Если ПеренестиВДокумент Тогда
		АдресРасчетаСреднегоВХранилище = ПоместитьРасчетаСреднегоВВХранилище();
		СтруктураВозврата.Вставить("АдресРасчетаСреднегоВХранилище", АдресРасчетаСреднегоВХранилище);
		СтруктураВозврата.Вставить("СпособОтраженияВБухучете", Объект.СпособОтраженияВБухучете);
	КонецЕсли;
	
	Возврат СтруктураВозврата;

КонецФункции

&НаСервере
Функция ПолучитьДанныеОбработки()
	
	СтруктураДанных = Новый Структура("Сотрудник, Организация, Ссылка, ДатаНачала, ДатаОкончания, РабочиеДни, РабочиеЧасы, КалендарныеДни, КомпенсацияОтпуска, Ограничивать10МРП, ВидРасчета, СпособОтраженияВБухучете, ИспользоватьСреднеЧасовойЗаработок");
	
	ЗаполнитьЗначенияСвойств(СтруктураДанных, Объект);
	
	СтруктураДанных.Вставить("СпособРасчета", Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных);
	СтруктураДанных.Вставить("АдресСреднийЗаработок", ПоместитьВоВременноеХранилище(Объект.СреднийЗаработок.Выгрузить(), Новый УникальныйИдентификатор())); 
	СтруктураДанных.Вставить("АдресНачисления", 	  ПоместитьВоВременноеХранилище(Объект.Начисления.Выгрузить(), Новый УникальныйИдентификатор()));
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Форма.СреднеЧасовойЗароботок = ?(Объект.ИспользоватьСреднеЧасовойЗаработок, 1, 0);
		
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

