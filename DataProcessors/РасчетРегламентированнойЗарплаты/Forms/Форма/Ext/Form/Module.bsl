////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	НастроитьВидимость();
	ОбновитьДанные(ПолучитьСписокПодразделений(Истина).ВыгрузитьЗначения());
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере();
		КонецЕсли;
		Если НЕ ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Результат.Вставить("Организация", Объект.Организация);
			Результат.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
			ПослеВыбораСтруктурногоПодразделения(Результат, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойПриИзменении(Элемент)
	
	РаботаСДиалогамиКлиент.ДатаКакМесяцПодобратьДатуПоТексту(МесяцНачисленияСтрокой, Объект.ПериодРегистрации);
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
		
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Объект.ПериодРегистрации = ДобавитьМесяц(Объект.ПериодРегистрации, Направление);
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
	Модифицированность = Истина;
	НастроитьВидимость();
	ОбновитьДанные(ПолучитьСписокПодразделений(Истина).ВыгрузитьЗначения());
		
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.ДатаКакМесяцОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Текст = "" Тогда
		Ожидание = 0;
		РаботаСДиалогамиКлиент.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, Объект.ПериодРегистрации, ЭтаФорма, ,Истина);
	Иначе
		РаботаСДиалогамиКлиент.ДатаКакМесяцАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитыватьНачисленияПриИзменении(Элемент)
	
	ОбновитьДанные(ПолучитьСписокПодразделений(Истина).ВыгрузитьЗначения());
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитыватьУдержанияПриИзменении(Элемент)
	
	ОбновитьДанные(ПолучитьСписокПодразделений(Истина).ВыгрузитьЗначения());
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитыватьЕдиныеПлатежиПриИзменении(Элемент)
	
	ОбновитьДанные(ПолучитьСписокПодразделений(Истина).ВыгрузитьЗначения());
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитыватьСНиСОПриИзменении(Элемент)
	
	ОбновитьДанные(ПолучитьСписокПодразделений(Истина).ВыгрузитьЗначения());
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитыватьУдержанияИПНиОПВНУПриИзменении(Элемент)
	
	ОбновитьДанные(ПолучитьСписокПодразделений(Истина).ВыгрузитьЗначения());
	
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьОтражениеВРеглУчетеПриИзменении(Элемент)
	
	ОбновитьДанные(ПолучитьСписокПодразделений(Истина).ВыгрузитьЗначения());
		
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияПрочихДоходовВЦеляхНалогообложенияПриИзменении(Элемент)
	
	ОбновитьДанные(ПолучитьСписокПодразделений(Истина).ВыгрузитьЗначения());	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ПодразделенияОрганизаций

&НаКлиенте
Процедура ПодразделенияОрганизацийПометкаПриИзменении(Элемент)
	
	СтрокаДерева = Элементы.ПодразделенияОрганизаций.ТекущиеДанные;	
	Родитель     = СтрокаДерева.ПолучитьРодителя();
	ИмяКолонки   = "Пометка";
	
	Если СтрокаДерева[ИмяКолонки] = 2  Тогда
		СтрокаДерева[ИмяКолонки] = 0;
	КонецЕсли; 
	
	Если Родитель = Неопределено Тогда
		Для Каждого ТекСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл			
			ТекСтрока[ИмяКолонки] = СтрокаДерева[ИмяКолонки];
			ВложенныеСтроки = ТекСтрока.ПолучитьЭлементы();
			Если ВложенныеСтроки.Количество() <> 0 Тогда 
				Для Каждого ВложеннаяСтрока Из ВложенныеСтроки Цикл
					ВложеннаяСтрока[ИмяКолонки] = ТекСтрока[ИмяКолонки];					
				КонецЦикла;
			КонецЕсли; 
		КонецЦикла;
	Иначе							
		ВсеПризнаки = 0;
		КоличествоСтрок = 0;
		
		ВсеРодителя = 0;
		КоличествоСтрокРодителя = 0;
		РодительРодителя = Родитель.ПолучитьРодителя();
		
		Если РодительРодителя <> Неопределено Тогда
			Для Каждого ТекСтрока Из РодительРодителя.ПолучитьЭлементы() Цикл							
				Если ТекСтрока[ИмяКолонки] = 2  Тогда 
					Продолжить;
				КонецЕсли;   				
				ВсеРодителя             = ВсеРодителя + ТекСтрока[ИмяКолонки];
				КоличествоСтрокРодителя = КоличествоСтрокРодителя + 1;  			
			КонецЦикла;	
		КонецЕсли;

		Для Каждого ТекСтрока Из Родитель.ПолучитьЭлементы() Цикл					
			ВложенныеСтроки = ТекСтрока.ПолучитьЭлементы();
			Для Каждого ВложеннаяСтрока ИЗ ВложенныеСтроки Цикл
				ВложеннаяСтрока[ИмяКолонки] = ТекСтрока[ИмяКолонки];					
	        КонецЦикла;      			                                       			
			ВсеПризнаки = ВсеПризнаки + ТекСтрока[ИмяКолонки];			
			КоличествоСтрок = КоличествоСтрок + 1;
		КонецЦикла;
		
		Если ВсеПризнаки = 0 Тогда
			Родитель[ИмяКолонки]= 0;
			Если КоличествоСтрокРодителя <> 0 И ВсеРодителя = 0 Тогда 
				РодительРодителя[ИмяКолонки] = 0;
			КонецЕсли;
		ИначеЕсли ВсеПризнаки = КоличествоСтрок Тогда
			Родитель[ИмяКолонки] = 1;
		Иначе
			Родитель[ИмяКолонки] = 2;
			Если РодительРодителя <> Неопределено Тогда 
				РодительРодителя[ИмяКолонки]  = 2;
			КонецЕсли; 			
		КонецЕсли; 		          		
	КонецЕсли;
	
	ОбновитьДанные(ПолучитьСписокПодразделений(Истина).ВыгрузитьЗначения());
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделенияОрганизацийПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделенияОрганизацийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ РасчетныеДокументы

&НаКлиенте
Процедура РасчетныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("Документ."+ ИмяДокументаНаСервере(Элемент.ТекущиеДанные.Документ) + ".ФормаОбъекта",Новый Структура("Ключ", Элемент.ТекущиеДанные.Документ),ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетныеДокументыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетныеДокументыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура РассчитатьОтмеченныеПодразделения(Команда)
	
	Если НЕ Объект.РассчитыватьНачисления 
		 И НЕ Объект.РассчитыватьСНиСО
		 И НЕ Объект.РассчитыватьУдержания
		 И НЕ Объект.РассчитыватьУдержанияИПНиОПВНУ
		 И НЕ Объект.ФормироватьОтражениеВРеглУчете
		 И НЕ Объект.РассчитыватьЕдиныеПлатежи
		 И НЕ Объект.РегистрацияПрочихДоходовВЦеляхНалогообложения Тогда
		Возврат
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "Обработка ""расчет регламентированной зарплаты"" (рассчет отмеченных подразделений)");
	
	Рассчитать(ПолучитьСписокПодразделений(Истина).ВыгрузитьЗначения());
	
КонецПроцедуры

&НаКлиенте
Процедура Провести(Команда)

	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "Обработка ""расчет регламентированной зарплаты"" (проведение документов)");
	
	ПровестиНаСервере();
		
КонецПроцедуры

&НаКлиенте
Процедура ОтменаПроведения(Команда)

	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "Обработка ""расчет регламентированной зарплаты"" (отмена проведение документов)");
	
	ОтменаПроведенияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
	
	ПоказыватьНастройки = НЕ ПоказыватьНастройки;
	ОбработкаИзмененияПоказыватьНастройки(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	НастроитьВидимость(Истина);
	ОбновитьДанные(ПолучитьСписокПодразделений(Истина).ВыгрузитьЗначения());
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлаги(Команда)
	
	КорневыеСтроки = ПодразделенияОрганизаций.ПолучитьЭлементы();
	
	Если КорневыеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из КорневыеСтроки Цикл
		УстановитьПометки("Установить", ТекущаяСтрока);
	КонецЦикла;
	
	ОбновитьДанные(ПолучитьСписокПодразделений(Истина).ВыгрузитьЗначения());

КонецПроцедуры

&НаКлиенте
Процедура СнятьФлаги(Команда)
	
	КорневыеСтроки = ПодразделенияОрганизаций.ПолучитьЭлементы();
	
	Если КорневыеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из КорневыеСтроки Цикл
		УстановитьПометки("Снять", ТекущаяСтрока);
	КонецЦикла;
	
	ОбновитьДанные(ПолучитьСписокПодразделений(Истина).ВыгрузитьЗначения());

КонецПроцедуры

&НаКлиенте
Процедура Инвертировать(Команда)
	
	КорневыеСтроки = ПодразделенияОрганизаций.ПолучитьЭлементы();
	
	Если КорневыеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из КорневыеСтроки Цикл
		УстановитьПометки("Инвертировать", ТекущаяСтрока);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокумент(Команда)
	
	Если Элементы.РасчетныеДокументы.ТекущиеДанные <> Неопределено Тогда
		ОткрытьФорму("Документ."+ ИмяДокументаНаСервере(Элементы.РасчетныеДокументы.ТекущиеДанные.Документ) 
					+ ".ФормаОбъекта",Новый Структура("Ключ", Элементы.РасчетныеДокументы.ТекущиеДанные.Документ),ЭтаФорма);
	КонецЕсли;
						
КонецПроцедуры     

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	// установим значения по умолчанию
	Объект.ПериодРегистрации = НачалоМесяца(ОбщегоНазначения.ТекущаяДатаПользователя());
	Объект.Организация    		 = Справочники.Организации.ОрганизацияПоУмолчанию();

	// Заполним реквизит формы МесяцСтрока.
	МесяцНачисленияСтрокой = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.ПериодРегистрации);
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	ЗаполнитьДеревоПодразделений();
	
	НастроитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения = Неопределено)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
			И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		НастроитьВидимость();
		Модифицированность = Истина;
		Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
		СтруктураРезультатаВыполнения = Неопределено;
		ЗаполнитьДеревоПодразделений();
		ОбновитьДанные(ПолучитьСписокПодразделений(Истина).ВыгрузитьЗначения());
		Элементы.ПодразделенияОрганизаций.Развернуть(ПодразделенияОрганизаций.ПолучитьЭлементы()[0].ПолучитьИдентификатор(), Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанные(Знач МассивПодразделений)
	
	Объект.РасчетныеДокументы.Очистить();
	
	Если МассивПодразделений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Если ТипЗнч(СтруктурноеПодразделениеОрганизация) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			УсловиеСтруктурноеПодразделениеДляДокументов = " И (Док.СтруктурноеПодразделение В (&МассивСтруктурныхПодразделений) ИЛИ Док.ПодразделениеОрганизации В (&МассивПодразделений)) ";
		Иначе
			УсловиеСтруктурноеПодразделениеДляДокументов = " И (Док.СтруктурноеПодразделение В (&МассивСтруктурныхПодразделений) ИЛИ Док.ПодразделениеОрганизации В (&МассивПодразделений)) ";
		КонецЕсли;
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	Иначе 
		УсловиеСтруктурноеПодразделениеДляДокументов = " И Док.ПодразделениеОрганизации В (&МассивПодразделений) ";
	КонецЕсли;
	
	// Подразделения, которые можно/надо рассчитывать
	МассивПодразделений.Добавить(Справочники.ПодразделенияОрганизаций.ПустаяСсылка()); // те документы, где подразделение не указано берем всегда
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("МассивПодразделений", 			МассивПодразделений);
	Запрос.УстановитьПараметр("ПериодРегистрации", 				НачалоМесяца(Объект.ПериодРегистрации));
	МассивСтруктурныхПодразделений = Новый Массив;
	
	Для Каждого Строка Из МассивПодразделений Цикл
		Если Строка <> Неопределено И Строка.ЯвляетсяСтруктурнымПодразделением Тогда
			МассивСтруктурныхПодразделений.Добавить(Строка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("МассивСтруктурныхПодразделений", МассивСтруктурныхПодразделений);
	
	// выберем документы, относящиеся к месячному расчету зарплаты (неразовые и неотклонения)
	ТекстЗапроса = "";
	
	Если Объект.РассчитыватьНачисления Тогда
	
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Док.Ссылка КАК Документ,
		|	Док.ПодразделениеОрганизации,
		|	ВЫРАЗИТЬ(Док.Комментарий КАК СТРОКА(250)) КАК Комментарий
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций КАК Док
		|ГДЕ
		|	Док.Организация = &Организация  " + УсловиеСтруктурноеПодразделениеДляДокументов + "
		|	И Док.ПериодРегистрации = &ПериодРегистрации
		|	И НЕ Док.ПометкаУдаления
		|	И Док.ВидРасчета.Ссылка ЕСТЬ NULL // документы, заполненные по одному какому-то виду расчета не учитываем, т.к. они могут не содержать полный список видов расчета за месяц
		|";

	КонецЕсли;
	
	Если Объект.РегистрацияПрочихДоходовВЦеляхНалогообложения Тогда
	
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
			ИспользоватьРазрешенные = Ложь;
			ТекстЗапроса = ТекстЗапроса + "
							|
							|ОБЪЕДИНИТЬ ВСЕ
							|";
		Иначе
			ИспользоватьРазрешенные = Истина;
		КонецЕсли;
	
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ " + ?(ИспользоватьРазрешенные, "РАЗРЕШЕННЫЕ", "") + "
		|	Док.Ссылка КАК Документ,
		|	Док.ПодразделениеОрганизации,
		|	ВЫРАЗИТЬ(Док.Комментарий КАК СТРОКА(250)) КАК Комментарий
		|ИЗ
		|	Документ.РегистрацияПрочихДоходовВЦеляхНалогообложения КАК Док
		|ГДЕ
		|	Док.Организация = &Организация 
		|	И Док.ПериодРегистрации = &ПериодРегистрации
		|	И НЕ Док.ПометкаУдаления
		|";
	
	КонецЕсли;
	
	Если Объект.РассчитыватьЕдиныеПлатежи Тогда
	
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ИспользоватьРазрешенные = Ложь;
			ТекстЗапроса = ТекстЗапроса + "
							|
							|ОБЪЕДИНИТЬ ВСЕ
							|";
		Иначе
			ИспользоватьРазрешенные = Истина;
		КонецЕсли;
	
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ " + ?(ИспользоватьРазрешенные, "РАЗРЕШЕННЫЕ", "") + "
		|	Док.Ссылка КАК Документ,
		|	Док.ПодразделениеОрганизации,
		|	ВЫРАЗИТЬ(Док.Комментарий КАК СТРОКА(250)) КАК Комментарий
		|ИЗ
		|	Документ.РасчетЕдиногоПлатежа КАК Док
		|ГДЕ
		|	Док.Организация = &Организация " + УсловиеСтруктурноеПодразделениеДляДокументов + "
		|	И Док.ПериодРегистрации = &ПериодРегистрации
		|	И НЕ Док.ПометкаУдаления
		|";
		
	КонецЕсли;
	
	Если Объект.РассчитыватьУдержания Тогда
	
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ИспользоватьРазрешенные = Ложь;
			ТекстЗапроса = ТекстЗапроса + "
							|
							|ОБЪЕДИНИТЬ ВСЕ
							|";
		Иначе
			ИспользоватьРазрешенные = Истина;
		КонецЕсли;
	
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ " + ?(ИспользоватьРазрешенные, "РАЗРЕШЕННЫЕ", "") + "
		|	Док.Ссылка КАК Документ,
		|	Док.ПодразделениеОрганизации,
		|	ВЫРАЗИТЬ(Док.Комментарий КАК СТРОКА(250)) КАК Комментарий
		|ИЗ
		|	Документ.РасчетУдержанийРаботниковОрганизаций КАК Док
		|ГДЕ
		|	Док.Организация = &Организация " + УсловиеСтруктурноеПодразделениеДляДокументов + "
		|	И Док.ПериодРегистрации = &ПериодРегистрации
		|	И НЕ Док.ПометкаУдаления
		|	И Док.ВидРасчета.Ссылка ЕСТЬ NULL // документы, заполненные по одному какому-то виду расчета не учитываем, т.к. они могут не содержать полный список видов расчета за месяц
		|";
		
	КонецЕсли;
	
	Если Объект.РассчитыватьСНиСО Тогда

		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ИспользоватьРазрешенные = Ложь;
			ТекстЗапроса = ТекстЗапроса + "
							|
							|ОБЪЕДИНИТЬ ВСЕ
							|";
		Иначе
			ИспользоватьРазрешенные = Истина;
		КонецЕсли;
	
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ " + ?(ИспользоватьРазрешенные, "РАЗРЕШЕННЫЕ", "") + "
		|	Док.Ссылка КАК Документ,
		|	Док.ПодразделениеОрганизации,
		|	ВЫРАЗИТЬ(Док.Комментарий КАК СТРОКА(250)) КАК Комментарий
		|ИЗ
		|	Документ.РасчетСНиСО КАК Док
		|ГДЕ
		|	Док.Организация = &Организация " + УсловиеСтруктурноеПодразделениеДляДокументов + "
		|	И Док.ПериодРегистрации = &ПериодРегистрации
		|	И НЕ Док.ПометкаУдаления
		|";
	
	КонецЕсли;
		
	Если Объект.ФормироватьОтражениеВРеглУчете Тогда
	
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
			ИспользоватьРазрешенные = Ложь;
			ТекстЗапроса = ТекстЗапроса + "
							|
							|ОБЪЕДИНИТЬ ВСЕ
							|";
		Иначе
			ИспользоватьРазрешенные = Истина;
		КонецЕсли;
	
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ " + ?(ИспользоватьРазрешенные, "РАЗРЕШЕННЫЕ", "") + "
		|	Док.Ссылка КАК Документ,
		|	Док.ПодразделениеОрганизации,
		|	ВЫРАЗИТЬ(Док.Комментарий КАК СТРОКА(250)) КАК Комментарий
		|ИЗ
		|	Документ.ОтражениеЗарплатыВРеглУчете КАК Док
		|ГДЕ
		|	Док.Организация = &Организация " + УсловиеСтруктурноеПодразделениеДляДокументов + "
		|	И Док.ПериодРегистрации = &ПериодРегистрации
		|	И НЕ Док.ПометкаУдаления
		|";
	
	КонецЕсли;
	
	УпрощенныйУчетИПНиОПВ = УчетнаяПолитикаСервер.УпрощенныйУчетИПНиОПВ(Объект.Организация, Объект.ПериодРегистрации);
	
	Если Объект.РассчитыватьУдержанияИПНиОПВНУ И НЕ УпрощенныйУчетИПНиОПВ Тогда

		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ИспользоватьРазрешенные = Ложь;
			ТекстЗапроса = ТекстЗапроса + "
							|
							|ОБЪЕДИНИТЬ ВСЕ
							|";
		Иначе
			ИспользоватьРазрешенные = Истина;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ " + ?(ИспользоватьРазрешенные, "РАЗРЕШЕННЫЕ", "") + "
		|	Док.Ссылка КАК Документ,
		|	Док.ПодразделениеОрганизации,
		|	ВЫРАЗИТЬ(Док.Комментарий КАК СТРОКА(250)) КАК Комментарий
		|ИЗ
		|	Документ.УдержаниеИПНиОПВНУ КАК Док
		|ГДЕ
		|	Док.Организация = &Организация " + УсловиеСтруктурноеПодразделениеДляДокументов + "
		|	И Док.ПериодРегистрации = &ПериодРегистрации
		|	И НЕ Док.ПометкаУдаления
		|";
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстЗапроса) Тогда                                          
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();

		Пока Выборка.Следующий() Цикл
			СтрокаТабличнойЧасти           = Объект.РасчетныеДокументы.Добавить();
			СтрокаТабличнойЧасти.Документ  = Выборка.Документ;
			СтрокаТабличнойЧасти.ПодразделениеОрганизации  = Выборка.ПодразделениеОрганизации;
			Если Выборка.Документ.Проведен Тогда
				СтрокаТабличнойЧасти.Картинка = 0;
			ИначеЕсли Выборка.Документ.ПометкаУдаления Тогда
				СтрокаТабличнойЧасти.Картинка = 1;
			ИначеЕсли НЕ Выборка.Документ.Проведен Тогда
				СтрокаТабличнойЧасти.Картинка = 2;
			Иначе
				СтрокаТабличнойЧасти.Картинка = 3;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьДеревоПодразделений()
	
	ДеревоПодразделений = РеквизитФормыВЗначение("ПодразделенияОрганизаций");

	ДеревоПодразделений.Строки.Очистить();
	КорневаяСтрока = ДеревоПодразделений.Строки.Добавить();
	КорневаяСтрока.Наименование = НСтр("ru='Все подразделения'");
	КорневаяСтрока.Ссылка 		= Неопределено;
	КорневаяСтрока.Пометка      = Истина;
	
	Запрос = Новый Запрос;
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Если ТипЗнч(СтруктурноеПодразделениеОрганизация) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			УсловиеСтруктурноеПодразделение = " И (ПодразделенияОрганизаций.Родитель В ИЕРАРХИИ (&СтруктурноеПодразделение) ИЛИ ПодразделенияОрганизаций.Ссылка = &СтруктурноеПодразделение)";
		Иначе
			УсловиеСтруктурноеПодразделение = "";
		КонецЕсли;
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	Иначе 
		УсловиеСтруктурноеПодразделение = "";	
	КонецЕсли;

	Запрос.УстановитьПараметр("Организация", Объект.Организация);

	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	1 КАК Пометка,
		|	ПодразделенияОрганизаций.Ссылка,
		|	ПодразделенияОрганизаций.Наименование,
		|	ВЫБОР
		|		КОГДА ПодразделенияОрганизаций.Родитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|			ТОГДА ПодразделенияОрганизаций.Владелец
		|		ИНАЧЕ ПодразделенияОрганизаций.Родитель
		|	КОНЕЦ КАК Родитель,
		|	ПодразделенияОрганизаций.Код
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций 
		|
		|ГДЕ
        |	ПодразделенияОрганизаций.Владелец = &Организация " + УсловиеСтруктурноеПодразделение +  "
		|
		|УПОРЯДОЧИТЬ ПО
		|	Родитель,
		|	Наименование";
		
	Выборка = Запрос.Выполнить().Выгрузить();

	Для Каждого СтрокаВыборки Из Выборка Цикл
		
		Если ДеревоПодразделений.Строки.Найти(СтрокаВыборки.Ссылка, , Истина) = Неопределено Тогда 
			ДобавитьСтрокуВДерево(ДеревоПодразделений, КорневаяСтрока.Строки, СтрокаВыборки, Выборка);	
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоПодразделений, "ПодразделенияОрганизаций");
		
КонецПроцедуры

&НаСервереБезКонтекста
//Процедура преднозначена для добавления строки в дерево значений
//которое формируется по подразделениям
Функция ДобавитьСтрокуВДерево(ДеревоПодразделений, Уровень, ДобавляемоеЗначение, ПереченьЗначений)
	         
	//Проверяем есть ли у данного подразделения родитель
	Если ЗначениеЗаполнено(ДобавляемоеЗначение.Родитель) Тогда
		
		Если ДеревоПодразделений.Строки.Найти(ДобавляемоеЗначение.Родитель, , Истина) = Неопределено Тогда 
			//Подразделение родитель не найдено в дереве сначала добавим его.
			Если ПереченьЗначений.Найти(ДобавляемоеЗначение.Родитель, "Ссылка") <> Неопределено Тогда 
				НайденныйУровень = ДобавитьСтрокуВДерево(ДеревоПодразделений, Уровень, ПереченьЗначений.Найти(ДобавляемоеЗначение.Родитель, "Ссылка"), ПереченьЗначений);
			Иначе 
				НайденныйУровень = Уровень;
			КонецЕсли;
			
			Если ТипЗнч(НайденныйУровень) = Тип("СтрокаДереваЗначений") Тогда
                НоваяСтрока = НайденныйУровень.Строки.Добавить();       
			Иначе
				НоваяСтрока = НайденныйУровень.Добавить();       
			КонецЕсли;			
			
			НоваяСтрока.Пометка		   = ДобавляемоеЗначение.Пометка;
			НоваяСтрока.Наименование   = ДобавляемоеЗначение.Наименование;
			НоваяСтрока.Ссылка 		   = ДобавляемоеЗначение.Ссылка;	
		Иначе 
			//Подразделение родитель найдено, добавим к нему текущее подразделение.
			НоваяСтрока = ДеревоПодразделений.Строки.Найти(ДобавляемоеЗначение.Родитель, , Истина).Строки.Добавить();
			НоваяСтрока.Пометка		   = ДобавляемоеЗначение.Пометка;
			НоваяСтрока.Наименование   = ДобавляемоеЗначение.Наименование;
			НоваяСтрока.Ссылка 		   = ДобавляемоеЗначение.Ссылка;	
		КонецЕсли;
		
	Иначе
		//У подразделения нет родителя, просто добавим его в дерево.
		НоваяСтрока = Уровень.Добавить();
		НоваяСтрока.Пометка		   = ДобавляемоеЗначение.Пометка;
		НоваяСтрока.Наименование   = ДобавляемоеЗначение.Наименование;
		НоваяСтрока.Ссылка 		   = ДобавляемоеЗначение.Ссылка;	
		
	КонецЕсли;
		
	Возврат НоваяСтрока;		
	
КонецФункции //ДобавитьСтрокуВДерево

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработкаИзмененияПоказыватьНастройки(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ФормаНастройки.Пометка    = Форма.ПоказыватьНастройки;	
	
	Элементы.ГруппаНастройки.Видимость = Форма.ПоказыватьНастройки;
	
КонецПроцедуры

&НаСервере
Процедура ПровестиНаСервере()
	
	Для Каждого СтрокаТаблицы Из Объект.РасчетныеДокументы Цикл
		Документ = СтрокаТаблицы.Документ.ПолучитьОбъект();
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Проведение документа: %1'"), СтрокаТаблицы.Документ);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СтрокаТаблицы.Документ);
		
		Если Документ.ПометкаУдаления Тогда
			Документ.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		Если Документ.ПроверитьЗаполнение() Тогда
			Попытка
				ЗначениеТаймера = ОценкаПроизводительности.НачатьЗамерВремени();
				Документ.Записать(РежимЗаписиДокумента.Проведение);
				ОценкаПроизводительности.ЗакончитьЗамерВремени("Обработка ""расчет регламентированной зарплаты"" (проведение " + Нрег(Документ.Метаданные().Синоним) + ")", ЗначениеТаймера);
			Исключение
				ТекстСообщения = НСтр("ru='Операция не выполнена!'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СтрокаТаблицы.Документ);
			КонецПопытки;
		Иначе
			ТекстСообщения = НСтр("ru='Операция не выполнена!'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СтрокаТаблицы.Документ);
		КонецЕсли;
		СтрокаТаблицы.Картинка = ?(Документ.Проведен, 0, 2);  
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтменаПроведенияНаСервере() 
	
	Для Каждого СтрокаТаблицы Из Объект.РасчетныеДокументы Цикл
		Документ = СтрокаТаблицы.Документ.ПолучитьОбъект();
		Попытка
			ЗначениеТаймера = ОценкаПроизводительности.НачатьЗамерВремени();
			Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ОценкаПроизводительности.ЗакончитьЗамерВремени("Обработка ""расчет регламентированной зарплаты"" (отмена проведения " + Нрег(Документ.Метаданные().Синоним) + ")", ЗначениеТаймера);
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена!'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СтрокаТаблицы.Документ);
		КонецПопытки;
		СтрокаТаблицы.Картинка = ?(НЕ Документ.Проведен, 2, 0);  
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокПодразделений(ТолькоОтмеченные = Ложь)

	ДеревоПодразделений = РеквизитФормыВЗначение("ПодразделенияОрганизаций");

	// составим массив подразделений организации для расчета
	СписокПодразделений = Новый СписокЗначений;
	СтекВладельцевСтрокДерева = Новый Массив;
	СтекВладельцевСтрокДерева.Добавить(ДеревоПодразделений);
	
	Пока СтекВладельцевСтрокДерева.Количество() > 0 Цикл
		ВладелецСтрок = СтекВладельцевСтрокДерева[СтекВладельцевСтрокДерева.Количество() - 1];
		СтекВладельцевСтрокДерева.Удалить(СтекВладельцевСтрокДерева.Количество() - 1);
		Для Каждого СтрокаДерева Из ВладелецСтрок.Строки Цикл
			Если НЕ ТолькоОтмеченные ИЛИ (ТолькоОтмеченные И СтрокаДерева.Пометка = 1) Тогда
				// добавляем в обратном порядке, чтобы сначала шли самые глубоко вложенные, потом их родители
				СписокПодразделений.Вставить(0, СтрокаДерева.Ссылка);
			КонецЕсли;
				
			Если СтрокаДерева.Строки.Количество() > 0 Тогда
				СтекВладельцевСтрокДерева.Добавить(СтрокаДерева);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат СписокПодразделений;

КонецФункции

&НаСервере
Процедура ЗаполнитьДополнительныеДанные(Источник, Приемник)
	
	Для Каждого СтрокаДанных Из Источник Цикл
		
		СтруктураПоиска = Новый Структура("ФизЛицо, МесяцНалоговогоПериода", СтрокаДанных.ФизЛицо, СтрокаДанных.МесяцНалоговогоПериода);
		Строки = Приемник.НайтиСтроки(СтруктураПоиска);
		Если Строки.Количество() > 0 Тогда
			Строка = Строки[0];
		Иначе
			Строка = Приемник.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Строка, СтрокаДанных);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура Рассчитать(Знач МассивПодразделений)
	
	Если Не ПроцедурыУправленияПерсоналомСервер.РегламентированныйКалендарьЗаполнен(НачалоМесяца(Объект.ПериодРегистрации), КонецМесяца(Объект.ПериодРегистрации)) Тогда
		Возврат;
	КонецЕсли;

	
	Если Объект.РегистрацияПрочихДоходовВЦеляхНалогообложения Тогда 
		
		// составляем текст запроса для выбора документов
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивДокументов", 	 Объект.РасчетныеДокументы.Выгрузить(,"Документ"));
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		               |	Док.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.РегистрацияПрочихДоходовВЦеляхНалогообложения КАК Док
		               |ГДЕ
		               |	Док.Ссылка В(&МассивДокументов)
		               |	И Док.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРегистрацияПрочихДоходов.ДоходыИП)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда 
			// сохраним ссылку на документ для расчета
			ДокументСсылка = Выборка.Ссылка;			
		Иначе
			
			Если ЗначениеЗаполнено(Объект.СтруктурноеПодразделение) Тогда
				СтруктурноеПодразделениеВШапкеДокумента = Объект.СтруктурноеПодразделение;
			Иначе
				СтруктурноеПодразделениеВШапкеДокумента = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			КонецЕсли;
			
			// создаем недостающие документы
			//МетаданныеДокумента = Метаданные.НайтиПоТипу(Колонка.ТипЗначения.Типы()[0]);
			НовыйДок = Документы.РегистрацияПрочихДоходовВЦеляхНалогообложения.СоздатьДокумент();
			
			// заполним реквизиты шапки
			НовыйДок.Дата						= КонецМесяца(Объект.ПериодРегистрации);
			НовыйДок.ПериодРегистрации 			= НачалоМесяца(Объект.ПериодРегистрации);
			НовыйДок.Организация 				= Объект.Организация;
			НовыйДок.СтруктурноеПодразделение	= СтруктурноеПодразделениеВШапкеДокумента;
			НовыйДок.ПодразделениеОрганизации	= Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			НовыйДок.Ответственный 				= ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(
			Пользователи.ТекущийПользователь(), "ОсновнойОтветственный");
					
			НовыйДок.ВидОперации 			    = Перечисления.ВидыОперацийРегистрацияПрочихДоходов.ДоходыИП;
			
			// сформируем новый номер
			НовыйДок.УстановитьНовыйНомер();
			
			Попытка 
				НовыйДок.Записать(РежимЗаписиДокумента.Запись);
				// сохраним ссылку на документ	
				
				// в табличную часть обработки
				НоваяСтрока = Объект.РасчетныеДокументы.Добавить();
				НоваяСтрока.Документ = НовыйДок.Ссылка;
				
				// отдельно для расчета
				ДокументСсылка = НовыйДок.Ссылка;
			Исключение
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось записать документ: %1'"), НовыйДок);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецПопытки;
						
		КонецЕсли;
		
		Попытка
			ДокОбъект = ДокументСсылка.ПолучитьОбъект();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Расчет документа: %1'"), ДокументСсылка);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДокументСсылка);
			
			Если ДокОбъект.Проведен Тогда
				// отменим проведение, чтобы автозаполнение не учитывало само себя
				ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
			
			Документы.РегистрацияПрочихДоходовВЦеляхНалогообложения.ЗаполнитьСведенияОдоходахСОиОПВиВОСМС(ДокОбъект);
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			Если ДокОбъект.ПроверитьЗаполнение() Тогда
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
				ТекстСообщения = НСтр("ru='При расчете документа %1 возникли ошибки.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументСсылка);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДокументСсылка);
			КонецЕсли;
			
		Исключение
			ТекстСообщения = НСтр("ru='При расчете документа %1 возникли ошибки.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументСсылка);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДокументСсылка);		
		КонецПопытки;
		
	КонецЕсли;
	
   	ДеревоПодразделений = РеквизитФормыВЗначение("ПодразделенияОрганизаций");

	УпрощенныйУчетИПНиОПВ = УчетнаяПолитикаСервер.УпрощенныйУчетИПНиОПВ(Объект.Организация, Объект.ПериодРегистрации);

	// По каждому подразделению определим есть ли в нем работники и/или договорники за месяц.
	// По тем подразделениям, в которых в течение месяца не было ни одного работника/договорника,
	// документы по расчету создавать не будем. Такая ситуация возможна по подразделениям-группам.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонецПериодаРегистрации", 	КонецМесяца(Объект.ПериодРегистрации));
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", 		ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Объект.Организация));
	Запрос.УстановитьПараметр("Организация",				Объект. Организация);
	Запрос.УстановитьПараметр("МассивПодразделений", 		МассивПодразделений);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", 	Объект.СтруктурноеПодразделение);
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями
		И (ТипЗнч(СтруктурноеПодразделениеОрганизация) = Тип("СправочникСсылка.ПодразделенияОрганизаций")) Тогда
		
		УсловиеСтруктурноеПодразделение = " И (РаботникиОрганизации.СтруктурноеПодразделение = &СтруктурноеПодразделение И РаботникиОрганизации.ПодразделениеОрганизации В (&МассивПодразделений)) ";
		УсловиеСтруктурноеПодразделениеДляДокументов = " И ((Док.СтруктурноеПодразделение В (&МассивСтруктурныхПодразделений) И Док.ПодразделениеОрганизации В (&МассивПодразделений)) ИЛИ Док.ПодразделениеОрганизации В (&МассивПодразделений)) ";
		УсловиеСтруктурноеПодразделениеДляДокументовПустаяСсылка = " И (Док.СтруктурноеПодразделение В (&МассивСтруктурныхПодразделений))";
		
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
		
		МассивСтруктурныхПодразделений = Новый Массив;
		
		Для Каждого Строка Из МассивПодразделений Цикл
			Если Строка <> Неопределено И Строка.ЯвляетсяСтруктурнымПодразделением = Истина Тогда
				МассивСтруктурныхПодразделений.Добавить(Строка.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		Запрос.УстановитьПараметр("МассивСтруктурныхПодразделений", МассивСтруктурныхПодразделений);
	Иначе 
		УсловиеСтруктурноеПодразделение = " И РаботникиОрганизации.ПодразделениеОрганизации В ИЕРАРХИИ (&МассивПодразделений) ";	
		УсловиеСтруктурноеПодразделениеДляДокументов = " И Док.ПодразделениеОрганизации В ИЕРАРХИИ (&МассивПодразделений) ";
		УсловиеСтруктурноеПодразделениеДляДокументовПустаяСсылка = "";
	КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РаботникиОрганизации.ПодразделениеОрганизации
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.Организация = &ГоловнаяОрганизация " + УсловиеСтруктурноеПодразделение + "
	|	И РаботникиОрганизации.Период <= &КонецПериодаРегистрации
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 и Объект.Организация.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ФизЛицо Тогда 
		ТекстОграничения = "";
		Если ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписейФизическиеЛица") Тогда
			ТекстОграничения = "2. Настроено ограничение по группам физических лиц."	
		КонецЕсли;	
		ТекстСообщения = НСтр("ru = 'Не обнаружены данные для заполнения. Возможные причины:'") 
		+ Символы.ПС 
		+ НСтр("ru = '1.  В организацию/подразделение не принято ни одного сотрудника.'") 
		+ Символы.ПС 
		+ НСтр("ru = '%1'");
		ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекстОграничения));
		Возврат;
		
	ИначеЕсли Выборка.Количество() = 0 и Объект.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		СоответствиеПодразделений = Новый Соответствие;
		СоответствиеПодразделений.Вставить(Справочники.ПодразделенияОрганизаций.ПустаяСсылка(), Истина);
	Иначе
		
		СоответствиеПодразделений = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			СоответствиеПодразделений.Вставить(Выборка.ПодразделениеОрганизации, Истина);
		КонецЦикла;
		
	КонецЕсли;	
	
	// оставим только те подразделения, в которых есть работники
	Н = МассивПодразделений.Количество() - 1;
	Пока Н >= 0 Цикл
		Если СоответствиеПодразделений[МассивПодразделений[Н]] = Неопределено И Объект.Организация.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ФизЛицо
			Тогда
			// исключаем из массива
			МассивПодразделений.Удалить(Н);
		КонецЕсли;
		Н = Н - 1;
	КонецЦикла;
	
	// определим список уже существующих документов, относящихся к нужным подразделениям
	Запрос.УстановитьПараметр("МассивПодразделений", МассивПодразделений);
	Запрос.УстановитьПараметр("ПустоеПодразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	Запрос.УстановитьПараметр("МассивДокументов", 	 Объект.РасчетныеДокументы.Выгрузить(,"Документ"));
	
	ТекстЗапроса = "";
	МассивИменДокументов = Новый Массив();
	Если  Объект.РассчитыватьНачисления Тогда
		МассивИменДокументов.Добавить("НачислениеЗарплатыРаботникамОрганизаций");
	КонецЕсли;
	Если  Объект.РегистрацияПрочихДоходовВЦеляхНалогообложения Тогда
		МассивИменДокументов.Добавить("РегистрацияПрочихДоходовВЦеляхНалогообложения");
	КонецЕсли;
	Если  Объект.РассчитыватьУдержания Тогда
		МассивИменДокументов.Добавить("РасчетУдержанийРаботниковОрганизаций");
	КонецЕсли;
	Если  Объект.РассчитыватьЕдиныеПлатежи Тогда
		МассивИменДокументов.Добавить("РасчетЕдиногоПлатежа");
	КонецЕсли;
	Если  Объект.РассчитыватьСНиСО Тогда
		МассивИменДокументов.Добавить("РасчетСНиСО");
	КонецЕсли;
	Если НЕ УпрощенныйУчетИПНиОПВ И Объект.РассчитыватьУдержанияИПНиОПВНУ Тогда
		МассивИменДокументов.Добавить("УдержаниеИПНиОПВНУ");
	КонецЕсли;
	Если  Объект.ФормироватьОтражениеВРеглУчете Тогда
		МассивИменДокументов.Добавить("ОтражениеЗарплатыВРеглУчете");
	КонецЕсли;
		
	Для Н = 0 По МассивИменДокументов.Количество() - 1 Цикл
		ИмяДокумента = МассивИменДокументов[Н];

		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
			ИспользоватьРазрешенные = Ложь;
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		Иначе
			ИспользоватьРазрешенные = Истина;
		КонецЕсли;
		
		// составляем текст запроса для выбора документов
		ТекстЗапроса = ТекстЗапроса + "
		|// все документы, где встречаются сами подразделения или их родительские подразделения
		|ВЫБРАТЬ " + ?(ИспользоватьРазрешенные, "РАЗРЕШЕННЫЕ", "") + "
		|	Док.Ссылка,
		|	Док.ПодразделениеОрганизации
		|ИЗ
		|	Документ." + ИмяДокумента + " КАК Док
		|ГДЕ
		|	Док.Ссылка В (&МассивДокументов) 
		|	" + УсловиеСтруктурноеПодразделениеДляДокументов + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// все документы, которые введеные по организации в целом
		|ВЫБРАТЬ
		|	Док.Ссылка,
		|	Док.ПодразделениеОрганизации
		|ИЗ
		|	Документ." + ИмяДокумента + " КАК Док
		|ГДЕ
		|	Док.Ссылка В (&МассивДокументов)
		|	И Док.ПодразделениеОрганизации = &ПустоеПодразделение " + УсловиеСтруктурноеПодразделениеДляДокументовПустаяСсылка + "
		|";
		
	КонецЦикла;
	                                                             
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();

	// Составим список документов, которые надо пересчитывать
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("ПорядокРасчета", Новый ОписаниеТипов("Число"));
	ТаблицаДокументов.Колонки.Добавить("УровеньПодразделения", Новый ОписаниеТипов("Число"));
	ТаблицаДокументов.Колонки.Добавить("Документ");
	
	// Таблица ссылок на каждый тип документа по каждому подразделению из переданного списка
	ТаблицаДокументовПодразделений = Новый ТаблицаЗначений;
	ТаблицаДокументовПодразделений.Колонки.Добавить("ПодразделениеОрганизации", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Если  Объект.РассчитыватьНачисления Тогда
		ТаблицаДокументовПодразделений.Колонки.Добавить("НачислениеЗарплаты", Новый ОписаниеТипов("ДокументСсылка.НачислениеЗарплатыРаботникамОрганизаций"));
	КонецЕсли;
	Если  Объект.РегистрацияПрочихДоходовВЦеляхНалогообложения Тогда
		ТаблицаДокументовПодразделений.Колонки.Добавить("НачислениеДохода", Новый ОписаниеТипов("ДокументСсылка.РегистрацияПрочихДоходовВЦеляхНалогообложения"));
	КонецЕсли;
	Если Объект.РассчитыватьЕдиныеПлатежи Тогда
		ТаблицаДокументовПодразделений.Колонки.Добавить("РассчитыватьЕдиныеПлатежи", Новый ОписаниеТипов("ДокументСсылка.РасчетЕдиногоПлатежа"));
	КонецЕсли;
	Если  Объект.РассчитыватьУдержания Тогда
		ТаблицаДокументовПодразделений.Колонки.Добавить("РасчетУдержаний", Новый ОписаниеТипов("ДокументСсылка.РасчетУдержанийРаботниковОрганизаций"));
	КонецЕсли;
	Если  Объект.РассчитыватьСНиСО Тогда
		ТаблицаДокументовПодразделений.Колонки.Добавить("РасчетСНиСО", Новый ОписаниеТипов("ДокументСсылка.РасчетСНиСО"));
	КонецЕсли;
	Если НЕ УпрощенныйУчетИПНиОПВ И Объект.РассчитыватьУдержанияИПНиОПВНУ Тогда
		ТаблицаДокументовПодразделений.Колонки.Добавить("УдержаниеИПНиОПВНУ", Новый ОписаниеТипов("ДокументСсылка.УдержаниеИПНиОПВНУ"));
	КонецЕсли;
	Если  Объект.ФормироватьОтражениеВРеглУчете Тогда
		ТаблицаДокументовПодразделений.Колонки.Добавить("ОтражениеЗарплатыВРеглУчете", Новый ОписаниеТипов("ДокументСсылка.ОтражениеЗарплатыВРеглУчете"));
	КонецЕсли;
		
	// составим соответствие типов документов и колонок таблицы
	СоответствиеКолонок = Новый Соответствие();
	// соответствие типов документов и порядка их расчета
	СоответствиеТипов = Новый Соответствие();
	
	Для Н = 0 По ТаблицаДокументовПодразделений.Колонки.Количество() - 1 Цикл
		Колонка = ТаблицаДокументовПодразделений.Колонки[Н];
		ТипКолонки = Колонка.ТипЗначения.Типы()[0];
		СоответствиеКолонок.Вставить(ТипКолонки, Колонка.Имя);
		СоответствиеТипов.Вставить(ТипКолонки, Н);
	КонецЦикла;
	
	ТипПодразделениеОрганизации = Тип("СправочникСсылка.ПодразделенияОрганизаций");
	
	// массив документов "Отражение з/п в регл учете" - должен быть один за месяц по организации
	МассивОтражениеВРеглУчете = Новый Массив();
	
	Пока Выборка.Следующий() Цикл
		
		// определим порядок расчета текущего документа
		ТипЗнчДокумента = ТипЗнч(Выборка.Ссылка);
		ПорядокРасчета = СоответствиеТипов.Получить(ТипЗнчДокумента);
		Если ПорядокРасчета = Неопределено Тогда
			// какой-то неизвестный документ
			Продолжить;
		КонецЕсли;
		
		// запомним документ для расчета
		НоваяСтрока = ТаблицаДокументов.Добавить();
		НоваяСтрока.ПорядокРасчета = ПорядокРасчета;
		Если ЗначениеЗаполнено(Выборка.ПодразделениеОрганизации) Тогда
			НоваяСтрока.УровеньПодразделения = Выборка.ПодразделениеОрганизации.Уровень();
		Иначе
			НоваяСтрока.УровеньПодразделения = 0;
		КонецЕсли;
		НоваяСтрока.Документ = Выборка.Ссылка;
		
		// для подразделения запомним, каким документом он рассчитывается
		СтрокаТаблицы = ТаблицаДокументовПодразделений.Найти(Выборка.ПодразделениеОрганизации, "ПодразделениеОрганизации");
		Если СтрокаТаблицы = Неопределено Тогда
			СтрокаТаблицы = ТаблицаДокументовПодразделений.Добавить();
			СтрокаТаблицы.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
		КонецЕсли;
		// по типу документа найдем колонку
		СтрокаТаблицы[СоответствиеКолонок[ТипЗнчДокумента]] = Выборка.Ссылка;
		
	КонецЦикла;
	
	// Определим, по каким подразделениям (из входного массива-параметра) не хватает документов (еще не были введены).
	// Здесь следует учитывать, что документы могут быть созданы не по самому подразделению, а по одному из
	// его родителей, тогда в таких документах в процедуре Автозаполнение() за счет запроса "В ИЕРАРХИИ" будут учтены
	// и все вложенные в него подразделения. Но если есть документы по дочерним подразделениям, то документы 
	// по родительскому все равно надо создавать, т.к. могут быть приняты работники в само родительское подразделение,
	// или для данного родительского могут быть другие дочерние подразделения, по которым нет отдельных документов.
	Индекс = 0;
	Для Каждого Подразделение Из МассивПодразделений Цикл
		
		Если МассивПодразделений.Количество() > 1 И Подразделение = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		НадоИскатьРодительскоеПодразделение = Ложь;
		
		// уточним есть ли ссылки на документы по текущему подразделению
		СтрокаТаблицы = ТаблицаДокументовПодразделений.Найти(Подразделение, "ПодразделениеОрганизации");
		Если СтрокаТаблицы = Неопределено Тогда
			// создадим строку для подразделения и попытаемся найти среди родительских подразделений
			СтрокаТаблицы = ТаблицаДокументовПодразделений.Добавить();
			СтрокаТаблицы.ПодразделениеОрганизации = Подразделение;
			НадоИскатьРодительскоеПодразделение = Истина;
		Иначе
			// Проверим, чтобы были созданные ссылки на все типы рассчитываемых документов
			Для Каждого Колонка Из ТаблицаДокументовПодразделений.Колонки Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы[Колонка.Имя]) Тогда
					НадоИскатьРодительскоеПодразделение = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НадоИскатьРодительскоеПодразделение Тогда
			// для ускорения ищем не по "живой" базе, а по дереву значений с формы
			ИскатьПоПустомуПодразделению = Ложь; // признак того, что надо искать по пустому подразделению (на последнем шаге цикла)
			СтрокаДерева = ДеревоПодразделений.Строки.Найти(Подразделение, "Ссылка", Истина);
			
			Если СтрокаДерева <> Неопределено Тогда
				РодительскаяСтрока = СтрокаДерева.Родитель;
			КонецЕсли;
			
			Если РодительскаяСтрока = Неопределено Тогда
				ИскатьПоПустомуПодразделению = Истина;
			КонецЕсли;
				
			Пока РодительскаяСтрока <> Неопределено ИЛИ ИскатьПоПустомуПодразделению Цикл
					
				Если ИскатьПоПустомуПодразделению Тогда
					РодительскоеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
				Иначе
					РодительскоеПодразделение = РодительскаяСтрока.Ссылка;
				КонецЕсли;
					
				// поищем документы по родительскому подразделению
				РодительскаяСтрокаТаблицы = ТаблицаДокументовПодразделений.Найти(РодительскоеПодразделение, "ПодразделениеОрганизации");
				
				Если РодительскаяСтрокаТаблицы <> Неопределено Тогда
					Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
						СтруктурноеПодразделениеРодительскоеПодразделение = ?(РодительскаяСтрокаТаблицы[Колонка.Имя].СтруктурноеПодразделение = РодительскоеПодразделение, Ложь, Истина);
						Если СтруктурноеПодразделениеРодительскоеПодразделение Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
					// проверим наличие документов
					КоличествоДокументов = 0;
					Для Каждого Колонка Из ТаблицаДокументовПодразделений.Колонки Цикл
						Если ЗначениеЗаполнено(РодительскаяСтрокаТаблицы[Колонка.Имя]) Тогда
							КоличествоДокументов = КоличествоДокументов + 1;
								
							// если у текущего дочернего подразделения такого документа нет, то 
							// назначим ему ссылку на документ по родительскому подразделению
							Если НЕ ЗначениеЗаполнено(СтрокаТаблицы[Колонка.Имя]) Тогда
								СтрокаТаблицы[Колонка.Имя] = РодительскаяСтрокаТаблицы[Колонка.Имя];
							КонецЕсли;
							
						КонецЕсли;
					КонецЦикла;
					
					Если РодительскаяСтрока = Неопределено Тогда
						КоличествоДокументов = 0;
					КонецЕсли;
						
					// если у родительского подразделения заполнены все документы, то дальше не ищем
					Если КоличествоДокументов = ТаблицаДокументовПодразделений.Колонки.Количество() Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
					
				Если РодительскаяСтрока <> Неопределено Тогда
					РодительскаяСтрока = РодительскаяСтрока.Родитель;
				КонецЕсли;
				
				Если РодительскаяСтрока = Неопределено И ИскатьПоПустомуПодразделению Тогда
					Прервать; // все возможные комбинации уже проверены
				ИначеЕсли РодительскаяСтрока = Неопределено И НЕ ИскатьПоПустомуПодразделению Тогда
					ИскатьПоПустомуПодразделению = Истина; // попробуем поискать документ с пустым подразделением (для всей организации)
				КонецЕсли;
					
			КонецЦикла;
		КонецЕсли;
		
		// В том случае, если в шапке обработки выбрана организация и в дереве подразделений 
		// отмечено СП, то в шапке рассчитываемого документа необходимо в реквизите структурное
		// подразделение также указывать отмеченное СП.
		Если ЗначениеЗаполнено(Объект.СтруктурноеПодразделение) Тогда
			СтруктурноеПодразделениеВШапкеДокумента = Объект.СтруктурноеПодразделение;
		Иначе
			СтруктурноеПодразделениеВШапкеДокумента = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;
 
		Для Каждого Колонка Из ТаблицаДокументовПодразделений.Колонки Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы[Колонка.Имя]) И Колонка.Имя <> "ПодразделениеОрганизации" Тогда
				
				// создаем недостающие документы
				МетаданныеДокумента = Метаданные.НайтиПоТипу(Колонка.ТипЗначения.Типы()[0]);
				НовыйДок = Документы[МетаданныеДокумента.Имя].СоздатьДокумент();
					
				// заполним реквизиты шапки
				НовыйДок.Дата						= КонецМесяца(Объект.ПериодРегистрации);
				НовыйДок.ПериодРегистрации 			= НачалоМесяца(Объект.ПериодРегистрации);
				НовыйДок.Организация 				= Объект.Организация;
				НовыйДок.СтруктурноеПодразделение	= СтруктурноеПодразделениеВШапкеДокумента;
				НовыйДок.ПодразделениеОрганизации	= Подразделение;
				НовыйДок.Ответственный 				= ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(
															Пользователи.ТекущийПользователь(), "ОсновнойОтветственный");
															
				// сформируем новый номер
				НовыйДок.УстановитьНовыйНомер();
				
				Попытка 
					НовыйДок.Записать(РежимЗаписиДокумента.Запись);
					// сохраним ссылку на документ
						
					// в таблицу документов по подразделениям
					СтрокаТаблицы[Колонка.Имя] = НовыйДок.Ссылка;
						
					// в таблицу рассчитываемых документов
					НоваяСтрока = ТаблицаДокументов.Добавить();
					НоваяСтрока.Документ = НовыйДок.Ссылка;
					НоваяСтрока.ПорядокРасчета = СоответствиеТипов[ТипЗнч(НовыйДок.Ссылка)];
					Если Подразделение <> Неопределено Тогда
						НоваяСтрока.УровеньПодразделения = Подразделение.Уровень();
					Иначе
						Подразделение =  Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
						НоваяСтрока.УровеньПодразделения = 0;
					КонецЕсли;
	
					// в табличную часть обработки
					НоваяСтрока = Объект.РасчетныеДокументы.Добавить();
					НоваяСтрока.Документ = НовыйДок.Ссылка;
					НоваяСтрока.ПодразделениеОрганизации = Подразделение;
					
				Исключение
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось записать документ: %1'"), НовыйДок);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецПопытки;	
									
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	// сортируем документы в порядке расчета (сначала самые глубоко вложенные подразделения, потом более верхних уровней)
	ТаблицаДокументов.Сортировать("ПорядокРасчета Возр, УровеньПодразделения Убыв");
	
	// Производим заполнение и расчет документов. Заполнение надо производить каждый раз, т.к.
	// возможно изменение в кадровых документах по работникам или в документах по расчету налогов, взносов, отчислений
	// могут появиться новые доходы по новым людям, которых раньше не было. Поэтому необходимо, чтобы
	// в документах, подпадающих под данную обработку, были только действительно автозаполняемые. Все 
	// прочие суммы надо регистрировать как разовые начисления.
	Для Каждого СтрокаДок Из ТаблицаДокументов Цикл
		
		Попытка
			ДокОбъект = СтрокаДок.Документ.ПолучитьОбъект();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Расчет документа: %1'"), СтрокаДок.Документ);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СтрокаДок.Документ);
			
			Если ДокОбъект.Проведен Тогда
				// отменим проведение, чтобы автозаполнение не учитывало само себя
				ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
			
			Если ТипЗнч(СтрокаДок.Документ) = Тип("ДокументСсылка.ОтражениеЗарплатыВРеглУчете") Тогда
				
				ЗначениеТаймера = ОценкаПроизводительности.НачатьЗамерВремени();
				
				АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ЭтаФорма.УникальныйИдентификатор);
				
				СтруктураПараметров = Новый Структура;	
				
				СтруктураПараметров.Вставить("Организация",СтрокаДок.Документ.Организация);
				СтруктураПараметров.Вставить("ПодразделениеОрганизации", СтрокаДок.Документ.ПодразделениеОрганизации);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение", СтрокаДок.Документ.СтруктурноеПодразделение); 
				СтруктураПараметров.Вставить("Документ", ДокОбъект);
				СтруктураПараметров.Вставить("ДокументСсылка", СтрокаДок.Документ);
				СтруктураПараметров.Вставить("ПериодРегистрации",СтрокаДок.Документ.ПериодРегистрации);
				СтруктураПараметров.Вставить("ПоддержкаРаботыСоСтруктурнымиПодразделениями",ПоддержкаРаботыСоСтруктурнымиПодразделениями);
				СтруктураПараметров.Вставить("Дата",СтрокаДок.Документ.Дата);
				СтруктураПараметров.Вставить("парамНачалоМесяца", НачалоМесяца(СтрокаДок.Документ.ПериодРегистрации));
				СтруктураПараметров.Вставить("парамКонецМесяца", КонецМесяца(СтрокаДок.Документ.ПериодРегистрации));
				СтруктураПараметров.Вставить("парамОрганизация", СтрокаДок.Документ.Организация);
				СтруктураПараметров.Вставить("парамСтруктурноеПодразделение", СтрокаДок.Документ.СтруктурноеПодразделение);
				СтруктураПараметров.Вставить("парамГоловнаяОрганизация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(ДокОбъект.Организация));
				СтруктураПараметров.Вставить("Принят", Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
				СтруктураПараметров.Вставить("Уволен", Перечисления.ПричиныИзмененияСостояния.Увольнение);
				СтруктураПараметров.Вставить("парамВнутреннееСовместительство", Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
				СтруктураПараметров.Вставить("парамПодразделение", СтрокаДок.Документ.ПодразделениеОрганизации);
				СтруктураПараметров.Вставить("парамПриход", ВидДвиженияНакопления.Приход);
				СтруктураПараметров.Вставить("парамИсчисление", Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
				СтруктураПараметров.Вставить("ТаблицаОтражениеВУчете", СтрокаДок.Документ.ОтражениеВУчете.ВыгрузитьКолонки());
				
				Документы.ОтражениеЗарплатыВРеглУчете.Автозаполнение(СтруктураПараметров, АдресХранилища);				
				СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);                          				
				
				Если ТипЗнч(СтруктураДанных) = Тип("Структура") Тогда                                     								
					ТаблицаОтражениеВУчете = СтруктураДанных.ТаблицаОтражениеВУчете;
					ДокОбъект.ОтражениеВУчете.Загрузить(ТаблицаОтражениеВУчете);
				КонецЕсли;     	
				
				ОценкаПроизводительности.ЗакончитьЗамерВремени("Обработка ""расчет регламентированной зарплаты"" (отражение зарплаты в регл учете)", ЗначениеТаймера);
				
			ИначеЕсли ТипЗнч(СтрокаДок.Документ) = Тип("ДокументСсылка.УдержаниеИПНиОПВНУ") Тогда
				ЗначениеТаймера = ОценкаПроизводительности.НачатьЗамерВремени();
				
				Документы.УдержаниеИПНиОПВНУ.Автозаполнение(ДокОбъект);
				ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
				Документы.УдержаниеИПНиОПВНУ.Рассчитать(ДокОбъект);
				
				ОценкаПроизводительности.ЗакончитьЗамерВремени("Обработка ""расчет регламентированной зарплаты"" (удержание ипн, опв и восмс по ну)", ЗначениеТаймера);
				
			ИначеЕсли ТипЗнч(СтрокаДок.Документ) = Тип("ДокументСсылка.РасчетСНиСО") Тогда
				ЗначениеТаймера = ОценкаПроизводительности.НачатьЗамерВремени();
				
				Документы.РасчетСНиСО.Автозаполнение(ДокОбъект, ЭтотОбъект, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
				ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
				
				СтруктураДополнительныхДанных = Новый Структура("РасчетСОДополнительныеДанные, РасчетСНДополнительныеДанные, РасчетОППВДополнительныеДанные, РасчетООСМСДополнительныеДанные, РасчетОПВРДополнительныеДанные");
				СтруктураДополнительныхДанных.РасчетСОДополнительныеДанные    = ПроведениеРасчетовСервер.РасчетСОДополнительныеДанныеОписаниеТаблицыЗначений();
				СтруктураДополнительныхДанных.РасчетСНДополнительныеДанные    = ПроведениеРасчетовСервер.РасчетСНДополнительныеДанныеОписаниеТаблицыЗначений();
				СтруктураДополнительныхДанных.РасчетОППВДополнительныеДанные  = ПроведениеРасчетовСервер.РасчетОППВДополнительныеДанныеОписаниеТаблицыЗначений();
				СтруктураДополнительныхДанных.РасчетОПВРДополнительныеДанные  = ПроведениеРасчетовСервер.РасчетОПВРДополнительныеДанныеОписаниеТаблицыЗначений();
				СтруктураДополнительныхДанных.РасчетООСМСДополнительныеДанные = ПроведениеРасчетовСервер.РасчетООСМСДополнительныеДанныеОписаниеТаблицыЗначений();
				
				Документы.РасчетСНиСО.Рассчитать(ДокОбъект, , Истина, СтруктураДополнительныхДанных);
				
				ЗаполнитьДополнительныеДанные(СтруктураДополнительныхДанных.РасчетСОДополнительныеДанные   , ДокОбъект.ИсчисленныеСО);
				ЗаполнитьДополнительныеДанные(СтруктураДополнительныхДанных.РасчетСНДополнительныеДанные   , ДокОбъект.ИсчисленныйСН);
				ЗаполнитьДополнительныеДанные(СтруктураДополнительныхДанных.РасчетОППВДополнительныеДанные , ДокОбъект.ИсчисленныйОППВ);
				ЗаполнитьДополнительныеДанные(СтруктураДополнительныхДанных.РасчетОПВРДополнительныеДанные , ДокОбъект.ИсчисленныйОПВР);
				ЗаполнитьДополнительныеДанные(СтруктураДополнительныхДанных.РасчетООСМСДополнительныеДанные, ДокОбъект.ИсчисленныеООСМС);
				
				ОценкаПроизводительности.ЗакончитьЗамерВремени("Обработка ""расчет регламентированной зарплаты"" (расчет налогов, взносов и отчислений сотрудников организаций)", ЗначениеТаймера);
				
			ИначеЕсли ТипЗнч(СтрокаДок.Документ) = Тип("ДокументСсылка.РасчетУдержанийРаботниковОрганизаций") Тогда
				ЗначениеТаймера = ОценкаПроизводительности.НачатьЗамерВремени();
				
				Документы.РасчетУдержанийРаботниковОрганизаций.Автозаполнение(ДокОбъект);
				ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
				Документы.РасчетУдержанийРаботниковОрганизаций.Рассчитать(ДокОбъект);
				
				ОценкаПроизводительности.ЗакончитьЗамерВремени("Обработка ""расчет регламентированной зарплаты"" (расчет удержаний сотрудников организаций)", ЗначениеТаймера);
				
			ИначеЕсли ТипЗнч(СтрокаДок.Документ) = Тип("ДокументСсылка.РасчетЕдиногоПлатежа") Тогда
				ЗначениеТаймера = ОценкаПроизводительности.НачатьЗамерВремени();
				
				Документы.РасчетЕдиногоПлатежа.Автозаполнение(ДокОбъект);
				ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
				Документы.РасчетЕдиногоПлатежа.Рассчитать(ДокОбъект);
				
				ОценкаПроизводительности.ЗакончитьЗамерВремени("Обработка ""расчет регламентированной зарплаты"" (расчет единых платежей)", ЗначениеТаймера);
				
			ИначеЕсли ТипЗнч(СтрокаДок.Документ) = Тип("ДокументСсылка.НачислениеЗарплатыРаботникамОрганизаций") Тогда
				ЗначениеТаймера = ОценкаПроизводительности.НачатьЗамерВремени();
				
				Документы.НачислениеЗарплатыРаботникамОрганизаций.Автозаполнение(ДокОбъект, ЭтотОбъект, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
				ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
				Документы.НачислениеЗарплатыРаботникамОрганизаций.Рассчитать(ДокОбъект);
				
				ОценкаПроизводительности.ЗакончитьЗамерВремени("Обработка ""расчет регламентированной зарплаты"" (начисление зарплаты сотрудникам организации)", ЗначениеТаймера);
				
			КонецЕсли;
			
			Если ДокОбъект.ПроверитьЗаполнение() Тогда
				ЗначениеТаймера = ОценкаПроизводительности.НачатьЗамерВремени();
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
				ОценкаПроизводительности.ЗакончитьЗамерВремени("Обработка ""расчет регламентированной зарплаты"" (проведение " + НРег(ДокОбъект.Метаданные().Синоним) + ")", ЗначениеТаймера);
			Иначе
				ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
				ТекстСообщения = НСтр("ru='При расчете документа %1 возникли ошибки.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаДок.Документ);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СтрокаДок.Документ);
			КонецЕсли;
			
		Исключение
			ТекстСообщения = НСтр("ru='При расчете документа %1 возникли ошибки.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаДок.Документ);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СтрокаДок.Документ);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Для Каждого СтрокаДок Из Объект.РасчетныеДокументы Цикл
		Если СтрокаДок.Документ.Проведен Тогда
			СтрокаДок.Картинка = 0;
		ИначеЕсли СтрокаДок.Документ.ПометкаУдаления Тогда
			СтрокаДок.Картинка = 1;
		ИначеЕсли НЕ СтрокаДок.Документ.Проведен Тогда
			СтрокаДок.Картинка = 2;
		Иначе
			СтрокаДок.Картинка = 3;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(ВидКоманды, ТекущаяСтрока)
	
	Если ВидКоманды = "Установить" Тогда
		ТекущаяСтрока.Пометка = Истина;
	ИначеЕсли ВидКоманды = "Снять" Тогда
		ТекущаяСтрока.Пометка = Ложь;
	ИначеЕсли ВидКоманды = "Инвертировать" И НЕ ТекущаяСтрока.Пометка = 2 Тогда
		ТекущаяСтрока.Пометка = НЕ ТекущаяСтрока.Пометка;
	КонецЕсли;

	Подчиненные	= ТекущаяСтрока.ПолучитьЭлементы();

	Если Подчиненные.Количество() > 0 Тогда
		Для Каждого Подчиненный из Подчиненные Цикл
			УстановитьПометки(ВидКоманды, Подчиненный);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Функция ИмяДокументаНаСервере(Знач ДокументСсылка)
	
	ИмяДокумента = ДокументСсылка.Метаданные().Имя;
	
	Возврат ИмяДокумента;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПослеВыбораИзСпискаПредставленияПериодаРегистрации(ВыбранныйЭлемент, ДопПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	ИначеЕсли Год(ВыбранныйЭлемент.Значение) <> Год(ДопПараметры.ПериодРегистрации) Тогда
		РаботаСДиалогамиКлиент.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(ДопПараметры.Элемент, ВыбранныйЭлемент.Значение, ДопПараметры.ЭтаФорма, ВыбранныйЭлемент.Значение, Истина);
		Возврат;
	КонецЕсли;
	
	ДопПараметры.ЭтаФорма.Объект.ПериодРегистрации = ВыбранныйЭлемент.Значение; 
	ДопПараметры.ЭтаФорма.МесяцНачисленияСтрокой   = РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(ВыбранныйЭлемент.Значение);
	ДопПараметры.ЭтаФорма.Модифицированность = Истина;
	
	НастроитьВидимость();
	ОбновитьДанные(ПолучитьСписокПодразделений(Истина).ВыгрузитьЗначения());
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимость(ОбновлениеДанных = Ложь)
	
	Если Объект.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ПризнакЕжемесячногоРасчетаВзносовИОтчисленийЗаИП = ПроцедурыНалоговогоУчета.ПолучитьПризнакЕжемесячногоРасчетаВзносовИОтчисленийЗаИП(Объект.Организация, Объект.ПериодРегистрации);
		Элементы.РегистрацияПрочихДоходовВЦеляхНалогообложения.Видимость = ПризнакЕжемесячногоРасчетаВзносовИОтчисленийЗаИП;
		Если НЕ ОбновлениеДанных Тогда
        	Объект.РегистрацияПрочихДоходовВЦеляхНалогообложения = ПризнакЕжемесячногоРасчетаВзносовИОтчисленийЗаИП;
		КонецЕсли;
	Иначе
		Объект.РегистрацияПрочихДоходовВЦеляхНалогообложения = Ложь;
		Элементы.РегистрацияПрочихДоходовВЦеляхНалогообложения.Видимость = Ложь;	
	КонецЕсли;
	
	ПорядокОбложенияДоходовРаботников = УчетнаяПолитикаСервер.ПорядокОбложенияДоходовРаботников(Объект.Организация, Объект.ПериодРегистрации);
	
	Объект.РассчитыватьЕдиныеПлатежи = (ПорядокОбложенияДоходовРаботников = Перечисления.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж)
														ИЛИ СуществуютДокументыРасчетаЕдиногоПлатежа();
													
	Элементы.РассчитыватьЕдиныеПлатежи.Видимость = Объект.РассчитыватьЕдиныеПлатежи;   
	
	Если СуществуютДокументыРасчетаЕдиногоПлатежа() И НЕ (ПорядокОбложенияДоходовРаботников = Перечисления.ПорядокОбложенияДоходовРаботников.ЕдиныйПлатеж) Тогда
		ТекстСообщения = НСтр("ru='За выбранный период в базе существуют рассчитанные документы Расчет единого платежа, что не соответствует порядку обложения доходов работников в Учетной политике (налоговый учет) организации. 
		|При пересчете документы будут очищены.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СуществуютДокументыРасчетаЕдиногоПлатежа ()

	Запрос = Новый Запрос; 
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Если ТипЗнч(СтруктурноеПодразделениеОрганизация) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			УсловиеСтруктурноеПодразделениеДляДокументов = " И (РасчетЕдиногоПлатежа.СтруктурноеПодразделение В (&МассивСтруктурныхПодразделений) ИЛИ РасчетЕдиногоПлатежа.ПодразделениеОрганизации В (&МассивПодразделений)) ";
		Иначе
			УсловиеСтруктурноеПодразделениеДляДокументов = " И (РасчетЕдиногоПлатежа.СтруктурноеПодразделение В (&МассивСтруктурныхПодразделений) ИЛИ РасчетЕдиногоПлатежа.ПодразделениеОрганизации В (&МассивПодразделений)) ";
		КонецЕсли;
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	Иначе 
		УсловиеСтруктурноеПодразделениеДляДокументов = " И РасчетЕдиногоПлатежа.ПодразделениеОрганизации В (&МассивПодразделений) ";
	КонецЕсли;
	
	МассивПодразделений = ПолучитьСписокПодразделений(Истина).ВыгрузитьЗначения();
	МассивПодразделений.Добавить(Справочники.ПодразделенияОрганизаций.ПустаяСсылка()); // те документы, где подразделение не указано берем всегда
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("МассивПодразделений", 			МассивПодразделений);
	Запрос.УстановитьПараметр("ПериодРегистрации", 				НачалоМесяца(Объект.ПериодРегистрации));
	МассивСтруктурныхПодразделений = Новый Массив;
	
	Для Каждого Строка Из МассивПодразделений Цикл
		Если Строка <> Неопределено И Строка.ЯвляетсяСтруктурнымПодразделением Тогда
			МассивСтруктурныхПодразделений.Добавить(Строка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("МассивСтруктурныхПодразделений", МассивСтруктурныхПодразделений);

	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		|	РасчетЕдиногоПлатежа.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РасчетЕдиногоПлатежа КАК РасчетЕдиногоПлатежа
		|ГДЕ
		|	РасчетЕдиногоПлатежа.ПериодРегистрации = &ПериодРегистрации
		|	И РасчетЕдиногоПлатежа.Организация = &Организация " + УсловиеСтруктурноеПодразделениеДляДокументов + "
		|	И РасчетЕдиногоПлатежа.Проведен
		|";
	
	ВыборкаДокументы = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаДокументы.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции



