#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции выгрузки данных отчета в XML

//Выгружает данные отчета в формат XML
// Параметры:
//   РевизияВыгрузки - ревизия выгрузки файла, определяет структуру файла
//
Функция ВыгрузитьОтчетВXMLДляСОНО(ДокументДляВыгрузки, ЗНАЧ РевизияВыгрузки) Экспорт

	ДанныеДляВыгрузки = ЗаполнениеДанныхДляВыгрузки(ДокументДляВыгрузки);
	
	Префикс  = РевизияВыгрузки;
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	
	// Запишем общие атрибуты (code, version) и создадим элемент form.
	Запись = Новый ЗаписьXML;		
	Запись.ОткрытьФайл(ИмяФайла,"UTF-8");
	Запись.ЗаписатьОбъявлениеXML();
	
	// Запишем корневой элемент.
	Запись.ЗаписатьНачалоЭлемента("fno");
	
	МакетВыгрузки = ПолучитьМакет("ВыгрузкаВXML");

	ТаблОбщиеРеквизиты = Новый ТаблицаЗначений;
	ТаблОбщиеРеквизиты.Колонки.Добавить("ИмяАтрибута");
	ТаблОбщиеРеквизиты.Колонки.Добавить("ЗначениеАтрибута");
	
	ОбластьОбщихРеквизитов = МакетВыгрузки.Область("ОбщиеРеквизиты" + Префикс);
	Для Ном = ОбластьОбщихРеквизитов.Верх По ОбластьОбщихРеквизитов.Низ Цикл
		Строка = ТаблОбщиеРеквизиты.Добавить();
		Строка.ИмяАтрибута 		  = СокрП(МакетВыгрузки.Область(Ном, 1).Текст);
		Строка.ЗначениеАтрибута   = СокрП(МакетВыгрузки.Область(Ном, 2).Текст);		
	КонецЦикла;                           	
	
	// Запишем атрибуты корневого элемента.
	Для Каждого Строка Из ТаблОбщиеРеквизиты Цикл
		Запись.ЗаписатьАтрибут(Строка.ИмяАтрибута, Строка.ЗначениеАтрибута);			  
	КонецЦикла;
	
	// Создадим таблицу для выгрузки.
	ТаблицаВыгрузки = Новый ТаблицаЗначений;
	ТаблицаВыгрузки.Колонки.Добавить("Форма");
	ТаблицаВыгрузки.Колонки.Добавить("Страница");
	ТаблицаВыгрузки.Колонки.Добавить("ИмяАтрибута");
	ТаблицаВыгрузки.Колонки.Добавить("ИмяЯчейки");
	ТаблицаВыгрузки.Колонки.Добавить("КоличествоROW");
	ТаблицаВыгрузки.Колонки.Добавить("ГруппаROW");
	ТаблицаВыгрузки.Колонки.Добавить("ИмяФормы");
	ТаблицаВыгрузки.Колонки.Добавить("ИмяЛиста");
	ТаблицаВыгрузки.Колонки.Добавить("Отображение");
	
	ТаблицаВыгрузки.Колонки.Добавить("КодФормы");
	ТаблицаВыгрузки.Колонки.Добавить("Выгружать");
	ТаблицаВыгрузки.Колонки.Добавить("Многострочность");
	ТаблицаВыгрузки.Колонки.Добавить("ЗаголовокФормы"); 
	ТаблицаВыгрузки.Колонки.Добавить("КоличествоНаЛисте");    
	ТаблицаВыгрузки.Колонки.Добавить("Значение");    
	
	ОбластьВыгрузки = МакетВыгрузки.Область("Выгрузка" + Префикс);
	ТекущееИмяФормы = Неопределено;
	Для Ном = ОбластьВыгрузки.Верх По ОбластьВыгрузки.Низ Цикл
		Строка = ТаблицаВыгрузки.Добавить();
		Строка.Форма 	       = СокрП(МакетВыгрузки.Область(Ном, 1).Текст);
		Строка.Страница        = СокрП(МакетВыгрузки.Область(Ном, 2).Текст);		
		Строка.ИмяАтрибута     = СокрП(МакетВыгрузки.Область(Ном, 3).Текст);		
		Строка.ИмяЯчейки       = СокрП(МакетВыгрузки.Область(Ном, 4).Текст);		
		Строка.КоличествоROW   = СокрП(МакетВыгрузки.Область(Ном, 5).Текст);		
		Строка.ИмяФормы        = СокрП(МакетВыгрузки.Область(Ном, 6).Текст);		
		Строка.ИмяЛиста        = СокрП(МакетВыгрузки.Область(Ном, 7).Текст);		
		Строка.Отображение     = СокрП(МакетВыгрузки.Область(Ном, 8).Текст);		
		Строка.ГруппаROW	   = СокрП(МакетВыгрузки.Область(Ном, 9).Текст);				
		НовоеИмяФормы = Строка.ИмяФормы;
		Если НовоеИмяФормы <> ТекущееИмяФормы Тогда
			Попытка
				Макет = ПолучитьМакет("Показатели");
				Форма = Макет.ПолучитьОбласть(Строка.ИмяФормы +"_"+ Префикс);
			Исключение
				Форма = Неопределено;
			КонецПопытки;
		КонецЕсли;
		Если Форма <> Неопределено Тогда
			Строка.КодФормы  		 = СокрП(Форма.Область(1, 1).Текст);
			Строка.Выгружать  		 = Число(Форма.Область(1, 4).Текст);
			Строка.Многострочность   = Число(Форма.Область(1, 6).Текст);
			Строка.ЗаголовокФормы    = СокрП(Форма.Область(1, 9).Текст);
			Строка.КоличествоНаЛисте = Число(Форма.Область(1, 10).Текст);
			Строка.Значение  		 = "";
		КонецЕсли;
		ТекущееИмяФормы = Строка.ИмяФормы;
	КонецЦикла;                           	
	
	// Выгрузка в XML.
	КоличествоСтрокВТаблице = ТаблицаВыгрузки.Количество();
	НомерСтроки = 0;
	
	ТекущаяФорма = Неопределено;
	ТекущаяСтраница = Неопределено;
	
	Пока Истина Цикл
		Если НомерСтроки >= КоличествоСтрокВТаблице Тогда
			Прервать;
		КонецЕсли; 
		ВыгрузитьСтрокуВXML(Запись, ТаблицаВыгрузки, КоличествоСтрокВТаблице, НомерСтроки, ДанныеДляВыгрузки, ТекущаяФорма, ТекущаяСтраница);
		НомерСтроки = НомерСтроки + 1;                                                                                      		
	КонецЦикла;
	
	Запись.ЗаписатьКонецЭлемента();		// </sheet>
	Запись.ЗаписатьКонецЭлемента();		// </sheetGroup>
	Запись.ЗаписатьКонецЭлемента();		// </form> 
	
	Запись.ЗаписатьКонецЭлемента();     // fno
		
	Запись.Закрыть();
	
	// Данный текст модуля добавлен для совместимости с СОНО (в СОНО для UTF-8 нет BOM поля).
	ТекстДок = Новый ТекстовыйДокумент;
    ТекстДок.Прочитать(ИмяФайла, "windows-1251");
    Строка = ТекстДок.ПолучитьСтроку(1);
    ТекстДок.ЗаменитьСтроку(1,Прав(Строка,СтрДлина(Строка)-3));
    ТекстДок.Записать(ИмяФайла, "windows-1251");
	
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
	
	ФайлВременный = Новый Файл(ИмяФайла);
	Попытка
		ФайлВременный.УстановитьТолькоЧтение(Ложь);
		УдалитьФайлы(ИмяФайла);
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ВыгрузкаВXMLЗаявленияОВвозеТоваров.Удаление файлов при выгрузке'",
			     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, Новый УникальныйИдентификатор);
	
КонецФункции

// Формирует построчно структуру XML файла из макета "ВыгрузкаВXML"
//
Процедура ВыгрузитьСтрокуВXML(Запись, ТаблицаВыгрузки, КоличествоСтрокВТаблице, НомерСтроки, ДанныеДляВыгрузки, ТекущаяФорма = Неопределено, ТекущаяСтраница = Неопределено)
	
	СтрокаВыгрузки 	= ТаблицаВыгрузки.Получить(НомерСтроки);
	НоваяФорма 		= СтрокаВыгрузки.Форма; 
	НоваяСтраница 	= СтрокаВыгрузки.Страница; 	
	Если ТекущаяФорма <> Неопределено И НоваяФорма <> ТекущаяФорма Тогда
	   Запись.ЗаписатьКонецЭлемента();			// </sheet>
	КонецЕсли;
	Если НЕ НоваяФорма = ТекущаяФорма Тогда		
		Если НЕ ТекущаяФорма = Неопределено Тогда
			Запись.ЗаписатьКонецЭлемента();			// </sheetGroup>
			Запись.ЗаписатьКонецЭлемента();			// </form>
		КонецЕсли;
		Запись.ЗаписатьНачалоЭлемента("form");
		Запись.ЗаписатьАтрибут("name",СтрокаВыгрузки.Форма);
		Запись.ЗаписатьНачалоЭлемента("sheetGroup");
	КонецЕсли;                                       	
	Если НЕ НоваяСтраница = ТекущаяСтраница Тогда
		Если ТекущаяФорма <> Неопределено И НоваяФорма <> ТекущаяФорма Тогда
			// ничего не делаем
	    ИначеЕсли НЕ ТекущаяСтраница = Неопределено Тогда		
			Запись.ЗаписатьКонецЭлемента();			// </sheet>
		КонецЕсли;
		Запись.ЗаписатьНачалоЭлемента("sheet");
		Запись.ЗаписатьАтрибут("name",СтрокаВыгрузки.Страница);
	КонецЕсли;
	
	Если СтрокаВыгрузки.Многострочность <> Неопределено И СтрокаВыгрузки.Многострочность = 1 Тогда 
		ВыгрузитьМногострочнуюФорму(Запись, ТаблицаВыгрузки, КоличествоСтрокВТаблице, НомерСтроки, ДанныеДляВыгрузки);
	// проверим многострочное ли значение
	ИначеЕсли ЗначениеЗаполнено(СтрокаВыгрузки.КоличествоROW) И СтрокаВыгрузки.КоличествоROW <> "0" Тогда  // для обычных форм
		// если в обычной форме встретилась многострочность 
		КоличествоПовторений 	= Число(СтрокаВыгрузки.КоличествоROW);
		ГруппаRow 				= СтрокаВыгрузки.ГруппаROW;	
		Для Н = 1 По КоличествоПовторений Цикл 				
			Запись.ЗаписатьНачалоЭлемента("row");
			СтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки);
			Если Н = 1 Тогда
				ТаблицаМногострочныхТегов = ТаблицаВыгрузки.СкопироватьКолонки();
				НоваяСтрока = ТаблицаМногострочныхТегов.Добавить();			
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыгрузки);
				КоличествоСтрокТаблицыВыгрузки = ТаблицаВыгрузки.Количество();
				 // Проверим многострочная ли следующая строка
				 Если НомерСтроки < КоличествоСтрокТаблицыВыгрузки-1 Тогда 
					 СледСтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки+1);
					 Пока ЗначениеЗаполнено(СледСтрокаВыгрузки.КоличествоROW) И СледСтрокаВыгрузки.КоличествоROW <> "0" И (СледСтрокаВыгрузки.ГруппаRow = ГруппаRow) И (НомерСтроки < КоличествоСтрокТаблицыВыгрузки-1) Цикл
						 НомерСтроки = НомерСтроки+1;
						 НоваяСтрока = ТаблицаМногострочныхТегов.Добавить();			
						 ЗаполнитьЗначенияСвойств(НоваяСтрока, СледСтрокаВыгрузки);
						 Если НомерСтроки < КоличествоСтрокТаблицыВыгрузки-1 Тогда
						 	СледСтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки+1);
						 КонецЕсли;
					 КонецЦикла;   				
				 КонецЕсли;
			КонецЕсли;
			Для Каждого МногСтрока Из ТаблицаМногострочныхТегов Цикл
				ЗаписатьЗначениеЭлемента(Запись, МногСтрока, ДанныеДляВыгрузки);
			КонецЦикла;    			
			Запись.ЗаписатьКонецЭлемента();			// </row>
		КонецЦикла;			
	Иначе
		ЗаписатьЗначениеЭлемента(Запись, СтрокаВыгрузки, ДанныеДляВыгрузки);
	КонецЕсли;	      	
	
	ТекущаяФорма = НоваяФорма;
	ТекущаяСтраница = НоваяСтраница;
		
КонецПроцедуры

// Выгружает многострочные формы в XML
//
Процедура ВыгрузитьМногострочнуюФорму(Запись, ТаблицаВыгрузки, КоличествоСтрокВТаблице, НомерСтроки, ДанныеДляВыгрузки)
	
	Перем СтруктураГруппы;
	
	СтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки);	
	
	Если СтрокаВыгрузки.КоличествоНаЛисте = 1 Тогда  // форма многостраничная
		
		// для многострочной = одностраничной
		
		НачальнаяСтрока = НомерСтроки;
		КонечнаяСтрока = 0;
		
		ТекущаяФорма = СтрокаВыгрузки.Форма;
		СледСтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки+1);
		НоваяФорма = СледСтрокаВыгрузки.Форма;
		Пока НоваяФорма = ТекущаяФорма Цикл
			НомерСтроки = НомерСтроки+1;
			
			ТекущаяФорма = СледСтрокаВыгрузки.Форма;
			Если НомерСтроки+1 < КоличествоСтрокВТаблице Тогда
				СледСтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки+1);						
				НоваяФорма = СледСтрокаВыгрузки.Форма;
				КонечнаяСтрока = НомерСтроки;
			Иначе
				НоваяФорма = Неопределено;
				КонечнаяСтрока = НомерСтроки;
			КонецЕсли;
		КонецЦикла;
        		
		МногСтруктура = СтрокаВыгрузки.Значение[0].Данные;
		
		КоличествоЗаписей = 0;
		
		Для Каждого КлючИЗначение Из МногСтруктура Цикл
			ТаблицаСтрокГруппы = КлючИЗначение.Значение.Строки;
			КоличествоЗаписей =  ТаблицаСтрокГруппы.Количество();
			Прервать;
		КонецЦикла;
		
		ВсегоСтр = 0;
		
		Если КоличествоЗаписей <= 1 Тогда 
			ВсегоСтр = 0;
		Иначе 
			ВсегоСтр = КоличествоЗаписей - 1;	
		КонецЕсли;
		
		ОдинШаг = Истина;
		НачальнаяСтрока = НачальнаяСтрока - 1;	
		
		Для ШагФорм = 0 По ВсегоСтр Цикл 
			
			Для Шаг = НачальнаяСтрока По КонечнаяСтрока Цикл  
				
				Если Шаг = КонечнаяСтрока Тогда 
					Прервать;
				КонецЕсли;
				
				СтрокаВыгрузкиТек = ТаблицаВыгрузки.Получить(Шаг);
				ТекущаяФорма 	  = СтрокаВыгрузкиТек.Форма; 
				ТекущаяСтраница   = СтрокаВыгрузкиТек.Страница;
				
				СтрокаВыгрузкиСлед = ТаблицаВыгрузки.Получить(Шаг + 1);
				
				НоваяФорма 		   = СтрокаВыгрузкиСлед.Форма; 
				НоваяСтраница      = СтрокаВыгрузкиСлед.Страница; 			
				
				Если ОдинШаг Тогда 
					НомерЛиста = Новый Структура;
					НомерЛиста.Вставить("НомерЛиста",ШагФорм);
					ЗаписатьЗначениеЭлемента(Запись, СтрокаВыгрузкиСлед, ДанныеДляВыгрузки, НомерЛиста);
                    ОдинШаг = Ложь;
					Продолжить;
				КонецЕсли;


				Если НоваяФорма <> ТекущаяФорма Тогда
					Запись.ЗаписатьКонецЭлемента();			// </sheet>
				КонецЕсли;
				Если НЕ НоваяФорма = ТекущаяФорма Тогда		
					Запись.ЗаписатьКонецЭлемента();			// </sheetGroup>
					Запись.ЗаписатьКонецЭлемента();			// </form>
					Запись.ЗаписатьНачалоЭлемента("form");
					Запись.ЗаписатьАтрибут("name",СтрокаВыгрузкиСлед.Форма);
					Запись.ЗаписатьНачалоЭлемента("sheetGroup");
				КонецЕсли;                                       	
				Если НЕ НоваяСтраница = ТекущаяСтраница Тогда
					Если НоваяФорма <> ТекущаяФорма Тогда
						// ничего не делаем
					Иначе
						Запись.ЗаписатьКонецЭлемента();			// </sheet>
					КонецЕсли;
					Запись.ЗаписатьНачалоЭлемента("sheet");
					Запись.ЗаписатьАтрибут("name",СтрокаВыгрузкиСлед.Страница);
				КонецЕсли;
				НомерЛиста = Новый Структура;
				НомерЛиста.Вставить("НомерЛиста",ШагФорм);
				ЗаписатьЗначениеЭлемента(Запись, СтрокаВыгрузкиСлед, ДанныеДляВыгрузки, НомерЛиста);
			КонецЦикла;
		КонецЦикла;
		
	Иначе // форма многострочная
		
		// Определяем одинаковое ли количество строк на всех страницах формы и создаем таблицу значений
		// например, в форме 300.07 и 300.08 одинаковое количество
		// а в других может быть неодинаковое - и там другой механизм выгрузки по строкам
		ОдинаковоеКоличествоСтрок = Истина;
		КоличествоСтрокНаЛисте = 0;
		
		ТаблицаМногострочнойФормы = ТаблицаВыгрузки.СкопироватьКолонки();
		НоваяСтрока = ТаблицаМногострочнойФормы.Добавить();			
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыгрузки);
		
		ТекущаяФорма = СтрокаВыгрузки.Форма;
		СледСтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки+1);
		НоваяФорма = СледСтрокаВыгрузки.Форма;
		Пока НоваяФорма = ТекущаяФорма Цикл
			НомерСтроки = НомерСтроки+1;
			НоваяСтрока = ТаблицаМногострочнойФормы.Добавить();			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СледСтрокаВыгрузки);
			Если ЗначениеЗаполнено(СледСтрокаВыгрузки.КоличествоROW) И СледСтрокаВыгрузки.КоличествоROW <> "0" Тогда
				ТекКоличествоСтрокНаЛисте = Число(СледСтрокаВыгрузки.КоличествоROW);
				Если КоличествоСтрокНаЛисте <> 0 И КоличествоСтрокНаЛисте <> ТекКоличествоСтрокНаЛисте Тогда
					 ОдинаковоеКоличествоСтрок = Ложь;
				КонецЕсли;
				КоличествоСтрокНаЛисте = Число(СледСтрокаВыгрузки.КоличествоROW);
			КонецЕсли;
			ТекущаяФорма = СледСтрокаВыгрузки.Форма;
			Если НомерСтроки+1 < КоличествоСтрокВТаблице Тогда
				СледСтрокаВыгрузки = ТаблицаВыгрузки.Получить(НомерСтроки+1);						
				НоваяФорма = СледСтрокаВыгрузки.Форма;
			Иначе
				НоваяФорма = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
		//Выгружаем многострочные данные, у которых одинаковое количество строк
		//Если ОдинаковоеКоличествоСтрок Тогда //как для 300.07, 300.08 и большинства других многострочных
			
			// Определим количество <sheetGroup>
			МногСтруктура = ДанныеДляВыгрузки.ТаблицаДанных;
			
			КоличествоЗаписей =  МногСтруктура.Количество();
									
			мКоличествоНаЛисте = СтрокаВыгрузки.КоличествоНаЛисте; // из макета Показатели
			Стр =  Цел(КоличествоЗаписей/мКоличествоНаЛисте);
			Если Стр = КоличествоЗаписей/мКоличествоНаЛисте  Тогда
				ВсегоСтр = Стр;
			Иначе
				ВсегоСтр = Стр + 1;
			КонецЕсли;
			
			Если КоличествоЗаписей = 0 Тогда // форма не заполнена, то выгружаем пустые теги
				ВсегоСтр = 1;
			КонецЕсли;
			
			Для КолСтр = 1 По ВсегоСтр Цикл // sheetgroup
				Если КолСтр <> 1 Тогда
					Запись.ЗаписатьКонецЭлемента();		// </sheet>
					Запись.ЗаписатьКонецЭлемента();		// </sheetgroup>
					Запись.ЗаписатьНачалоЭлемента("sheetGroup");
					Запись.ЗаписатьНачалоЭлемента("sheet");
					Запись.ЗаписатьАтрибут("name", СтрокаВыгрузки.Страница);
				КонецЕсли;
				ТекущаяСтраница = СтрокаВыгрузки.Страница;
				Для Ном = 0 По ТаблицаМногострочнойФормы.Количество()-1 Цикл 
					СтрокаТаблицы = ТаблицаМногострочнойФормы[Ном];				
					НоваяСтраница = СтрокаТаблицы.Страница;
					// если перешли на новую страницу
					Если НоваяСтраница <> ТекущаяСтраница Тогда
						 Запись.ЗаписатьКонецЭлемента();		// </sheet>
						 Запись.ЗаписатьНачалоЭлемента("sheet");
						 Запись.ЗаписатьАтрибут("name", СтрокаТаблицы.Страница);
					КонецЕсли;		
					Если ЗначениеЗаполнено(СтрокаТаблицы.Отображение) И КолСтр <> Число(СтрокаТаблицы.Отображение) Тогда
						Продолжить;
					КонецЕсли;
					// проверим элемент это или нет
					Если Лев(СтрокаТаблицы.ИмяАтрибута,1) = "#" Тогда
						Атрибут = Сред(СтрокаТаблицы.ИмяАтрибута,2);
						// опеределим начальный или конечный элемент
						Если Лев(Атрибут,1) = "/" Тогда // это конечный элемент							
							Запись.ЗаписатьКонецЭлемента();
						Иначе // это начальный
							Запись.ЗаписатьНачалоЭлемента(Атрибут);
						КонецЕсли;						
					ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.КоличествоROW) И СтрокаТаблицы.КоличествоROW <> "0" Тогда
						КоличествоПовторений = Число(СтрокаТаблицы.КоличествоROW);
						Если КолСтр = ВсегоСтр И КолСтр <> 1  Тогда // рассчитаем сколько должно быть строк на последней странице, при этом на 1 стр - должно быть количество строк как в макете
							КоличествоПовторений = КоличествоЗаписей - КоличествоПовторений*(КолСтр-1);
						КонецЕсли;
						Для Н = 1 По КоличествоПовторений Цикл 
							Запись.ЗаписатьНачалоЭлемента("row");							
							Если Н = 1 Тогда
								ТаблицаМногострочныхТегов = ТаблицаМногострочнойФормы.СкопироватьКолонки();
								НоваяСтрока = ТаблицаМногострочныхТегов.Добавить();			
								ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
								
								// Проверим многострочная ли следующая строка
								СледСтрокаВыгрузки = ТаблицаМногострочнойФормы.Получить(Ном+1);
								Пока ЗначениеЗаполнено(СледСтрокаВыгрузки.КоличествоROW) И СледСтрокаВыгрузки.КоличествоROW <> "0" Цикл
									Ном = Ном+1;
									НоваяСтрока = ТаблицаМногострочныхТегов.Добавить();			
									ЗаполнитьЗначенияСвойств(НоваяСтрока, СледСтрокаВыгрузки);
									Если Ном + 1 = ТаблицаМногострочнойФормы.Количество() Тогда
										Прервать;
									КонецЕсли;
									СледСтрокаВыгрузки = ТаблицаМногострочнойФормы.Получить(Ном+1);
								КонецЦикла;   				
							КонецЕсли;
							Для Каждого МногСтрока Из ТаблицаМногострочныхТегов Цикл
								СтруктураПараметров = Новый Структура;
								СтруктураПараметров.Вставить("КоличествоГруппСтраниц", КолСтр);
								СтруктураПараметров.Вставить("НомерЗаписи", Н);
								ЗаписатьЗначениеЭлемента(Запись, МногСтрока, ДанныеДляВыгрузки, СтруктураПараметров);
							КонецЦикла;    			
												
							Запись.ЗаписатьКонецЭлемента();			// </row>
						КонецЦикла;	
					Иначе			
						СтруктураПараметров = Новый Структура;
						СтруктураПараметров.Вставить("КоличествоГруппСтраниц", КолСтр);
						ЗаписатьЗначениеЭлемента(Запись, СтрокаТаблицы, ДанныеДляВыгрузки, СтруктураПараметров);
					КонецЕсли;				 
					СтрокаТаблицы = ТаблицаМногострочнойФормы[Ном];				
					ТекущаяСтраница = СтрокаТаблицы.Страница;
				КонецЦикла; 
			КонецЦикла; 				
		
	КонецЕсли;	
	
КонецПроцедуры

// Записываем значение в поле field из структуры хранения данных
//
Процедура ЗаписатьЗначениеЭлемента(Запись, СтрокаВыгрузки, ДанныеДляВыгрузки, СтруктураПараметров = Неопределено)
	
	Запись.ЗаписатьНачалоЭлемента("field");
	Запись.ЗаписатьАтрибут("name",СтрокаВыгрузки.ИмяАтрибута);
	// Выгрузим значение ячейки, если оно есть в форме
	ИмяЯчейки = СтрокаВыгрузки.ИмяЯчейки;
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда
		//получаем и записываем значение из отчета		
		Если СтрокаВыгрузки.Выгружать = 1 Тогда
			Если СтрокаВыгрузки.Многострочность Тогда
				// определим имя Листа по имени страницы
				ИмяЛиста = СтрокаВыгрузки.ИмяЛиста;
				СтруктураГруппы = Неопределено;
				Попытка
					Если СтруктураПараметров.Количество() = 1 Тогда 
						СтруктураГруппы = ДанныеДляВыгрузки[СтрокаВыгрузки.ИмяЯчейки];
					Иначе
						ИндексДляПоиска = СтруктураПараметров.КоличествоГруппСтраниц * СтрокаВыгрузки.КоличествоНаЛисте - СтрокаВыгрузки.КоличествоНаЛисте + СтруктураПараметров.НомерЗаписи - 1;
						СтруктураГруппы = ДанныеДляВыгрузки.ТаблицаДанных.Получить(ИндексДляПоиска)[СтрокаВыгрузки.ИмяЯчейки];
					КонецЕсли;					
				Исключение
					СтруктураГруппы = Неопределено;
				КонецПопытки;	
					
				Если ИмяЯчейки = "НомерСтраницы" Тогда
					КолСтр = Неопределено;
					СтруктураПараметров.Свойство("НомерЗаписи", КолСтр);
					Запись.ЗаписатьТекст(XMLСтрока(Формат(КолСтр,"ЧЦ=3; ЧВН=")));
				// заполнения многостроничных данных	
				ИначеЕсли СтрокаВыгрузки.КоличествоНаЛисте = 1 Тогда 
					Если СтруктураГруппы <> Неопределено Тогда
						 НомерЛиста = СтруктураПараметров.НомерЛиста;
						 СтрокаЗначений = СтруктураГруппы.Строки[НомерЛиста];
						 Попытка
							 Строка = СтрокаЗначений[ИмяЯчейки];
						 Исключение
							 Строка = Неопределено;
						 КонецПопытки;
						 Если Строка <> Неопределено Тогда
							 Значение = Строка;
							 Значение = ПривестиЗначениеКФорматуСОНО(Значение); 
				    		 Запись.ЗаписатьТекст(XMLСтрока(Значение));
						 КонецЕсли;
					 КонецЕсли;
				ИначеЕсли ЗначениеЗаполнено(СтрокаВыгрузки.КоличествоROW) И СтрокаВыгрузки.КоличествоROW <> "0" Тогда  // многострочная часть row
					КоличествоНаЛисте = Число(СтрокаВыгрузки.КоличествоROW);
					НомерЗаписиНаЛисте = Неопределено;
					СтруктураПараметров.Свойство("НомерЗаписи", НомерЗаписиНаЛисте);
					КолСтр = Неопределено;
					СтруктураПараметров.Свойство("КоличествоГруппСтраниц", КолСтр);										
					Если СтруктураГруппы <> Неопределено Тогда
						 Значение = СтруктураГруппы;
						 Значение = ПривестиЗначениеКФорматуСОНО(Значение); 
					     Запись.ЗаписатьТекст(XMLСтрока(Значение));
					КонецЕсли;
				Иначе // шапка или подвал
					Если СтруктураГруппы <> Неопределено Тогда
							 Значение = СтруктураГруппы;
							 Значение = ПривестиЗначениеКФорматуСОНО(Значение); 
				    		 Запись.ЗаписатьТекст(XMLСтрока(Значение));
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(СтрокаВыгрузки.ИмяЯчейки) Тогда 
					Попытка
						СтрокаОбласти = ДанныеДляВыгрузки[СтрокаВыгрузки.ИмяЯчейки];
						
					Исключение
						СтрокаОбласти = Неопределено;
					КонецПопытки;
				
				Иначе 
					
					СтрокаОбласти = Неопределено;
				КонецЕсли;
				
				Если СтрокаОбласти <> Неопределено Тогда
					Значение = СтрокаОбласти;
					Значение = ПривестиЗначениеКФорматуСОНО(Значение); 
				    Запись.ЗаписатьТекст(XMLСтрока(Значение));
				Иначе
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не найдена ячейка ""%1"" для выгрузки значения в XML.'"), ИмяЯчейки);
					ОбщегоНазначения.СообщитьПользователю(
						ТекстСообщения,
					);
					
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'ВыгрузкаВXMLЗаявленияОВвозеТоваров.Запись значений элементов'",
						     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
						УровеньЖурналаРегистрации.Предупреждение,
						,
						ДокументДляВыгрузки,
						ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	Запись.ЗаписатьКонецЭлемента();			// </field>

КонецПроцедуры

//Приводит значение к нужному формату для выгрузки в формате XML
//
Функция ПривестиЗначениеКФорматуСОНО(Значение) 
	
	Если Врег(Значение) = "Х" ИЛИ Врег(Значение) = "X" Тогда
		Значение = Истина;
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		Если Значение = Дата('00010101') Тогда
			Значение = "";
		Иначе
			Значение = Лев(Значение,10);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") И Значение = 0 Тогда
		Значение = "";
	КонецЕсли;
	
	Возврат Значение;	
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции заполнения данных

// Функция создает табличный документ ун. формы счета-фактуры
//
// Параметры 
//  ДанныеДляПечати - типизированная струтктура данных для заполнения параметров макета
//
Функция ЗаполнениеДанныхДляВыгрузки(ДокументДляВыгрузки) Экспорт

	ДанныеДляВыгрузки = Новый Структура;
	
	// Заполнение Шапки
	ЗапросПоШапке = Новый Запрос("ВЫБРАТЬ
	                             |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Номер КАК Номер,
	                             |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Дата КАК Дата,
	                             |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.НалоговыйПериод КАК НалоговыйПериод,
	                             |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Контрагент.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
	                             |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Контрагент.Наименование КАК КонтрагентНаименование,
	                             |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Контрагент КАК Контрагент,
	                             |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Организация.Ссылка КАК Организация,
	                             |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Организация.Наименование КАК ОрганизацияНаименование,
	                             |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
								 |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Организация.ИндивидуальныйПредприниматель КАК ОрганизацияИндивидуальныйПредприниматель,
	                             |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ДоговорКонтрагента КАК ДоговорКонтрагента,
	                             |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ДоговорКонтрагента.НомерДоговора КАК НомерДоговора,
	                             |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ДоговорКонтрагента.ДатаДоговора КАК ДатаДоговора,
	                             |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Организация.СтранаРегистрации КАК ОрганизацияСтранаРегистрации,
	                             |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Организация.СтранаРегистрации.Код КАК ОрганизацияСтранаРегистрацииКод,
	                             |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Организация.СтранаРегистрации.КодАльфа3 КАК ОрганизацияСтранаРегистрацииКодАльфа3,
	                             |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Контрагент.СтранаРезидентства КАК КонтрагентСтранаРезидентства,
	                             |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Контрагент.СтранаРезидентства.Код КАК КонтрагентСтранаРезидентстваКод,
	                             |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Контрагент.СтранаРезидентства.КодАльфа3 КАК КонтрагентСтранаРезидентстваКодАльфа3,
								 |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Контрагент.НомерНалоговойРегистрацииВСтранеРезидентства КАК КонтрагентНомерНалоговойРегистрацииВСтранеРезидентства,
								 |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Контрагент.ФизЛицо КАК КонтрагентФизЛицо,
								 |	ВЫБОР
	                             |		КОГДА ПОДСТРОКА(ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Организация.КБе, 1, 1) = ""1""								 
	                             |				ИЛИ ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Организация.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	                             |				ИЛИ ПОДСТРОКА(ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Организация.СтранаРегистрации.Код, 1, 3) = ""398""								 
	                             |			ТОГДА ИСТИНА
	                             |		ИНАЧЕ ЛОЖЬ
	                             |	КОНЕЦ КАК ПризнакРК
	                             |ИЗ
	                             |	Документ.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов КАК ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов
	                             |ГДЕ
	                             |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Ссылка = &Ссылка");
	ЗапросПоШапке.УстановитьПараметр("Ссылка", ДокументДляВыгрузки);
	ВыборкаПоШапке = ЗапросПоШапке.Выполнить().Выбрать();
	ВыборкаПоШапке.Следующий();
	
	НалоговыйПериод = ВыборкаПоШапке.НалоговыйПериод;
	НалоговыйпериодГод   = ?(ЗначениеЗаполнено(НалоговыйПериод), Формат(ВыборкаПоШапке.НалоговыйПериод, "ДФ=""гггг"""), "");
	налоговыйпериодМесяц = ?(ЗначениеЗаполнено(НалоговыйПериод), Формат(ВыборкаПоШапке.НалоговыйПериод, "ДФ=""ММ"""), "");
	
	ДанныеДляВыгрузки.Вставить("Год",						НалоговыйпериодГод);
	ДанныеДляВыгрузки.Вставить("Месяц",						налоговыйпериодМесяц);
	ДанныеДляВыгрузки.Вставить("Дата",						Формат(ВыборкаПоШапке.Дата, "ДЛФ=D"));
	ДанныеДляВыгрузки.Вставить("ДатаДоговора",				Формат(ВыборкаПоШапке.ДатаДоговора, "ДЛФ=D"));
	ДанныеДляВыгрузки.Вставить("ДатаСпецификации",			"");
	ДанныеДляВыгрузки.Вставить("Договор",					"");
	ДанныеДляВыгрузки.Вставить("КоличествоСтраниц",			"");
	ДанныеДляВыгрузки.Вставить("Контрагент",				ВыборкаПоШапке.Контрагент);
	ДанныеДляВыгрузки.Вставить("Номер",						ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаПоШапке.Номер, ДокументДляВыгрузки));
	ДанныеДляВыгрузки.Вставить("НомерДоговора",				ВыборкаПоШапке.НомерДоговора);
	ДанныеДляВыгрузки.Вставить("НомерСпецификации",			"");
	ДанныеДляВыгрузки.Вставить("НомерСтраницы",				"");
	ДанныеДляВыгрузки.Вставить("Организация",				ВыборкаПоШапке.Организация);
	
	СведенияОПокупателе = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ВыборкаПоШапке.Организация, ВыборкаПоШапке.Дата);
	СведенияОПоставщике = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ВыборкаПоШапке.Контрагент,  ВыборкаПоШапке.Дата);
	
	ПокупательКодСтраны = ?(ЗначениеЗаполнено(ВыборкаПоШапке.ОрганизацияСтранаРегистрацииКод), СокрЛП(ВыборкаПоШапке.ОрганизацияСтранаРегистрацииКод), Справочники.КлассификаторСтранМира.Казахстан.Код);	
	ПокупательАдрес 	= ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,");	
		
	ДанныеДляВыгрузки.Вставить("ПокупательКодСтраны",		ПокупательКодСтраны);
	ДанныеДляВыгрузки.Вставить("ПокупательАдрес",			ПокупательАдрес);
	ДанныеДляВыгрузки.Вставить("ПризнакРК",					ВыборкаПоШапке.ПризнакРК);
	
	Если СведенияОПокупателе.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ПокупательНаименование = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ВыборкаПоШапке.Организация, ВыборкаПоШапке.ОрганизацияИндивидуальныйПредприниматель, ВыборкаПоШапке.Дата).Представление;
		Если ПокупательНаименование = Неопределено Тогда
			ПокупательНаименование = "";
		КонецЕсли;
	Иначе
		ПокупательНаименование = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,");
	КонецЕсли;
	
	ДанныеДляВыгрузки.Вставить("ПокупательНаименование",	ПокупательНаименование);
	
	ВыводитьРНН = Ложь; // C 2013 года в форме всегда выводится БИН/ИИН	
	
	Если ВыводитьРНН Тогда
		// выводим РНН
		ПокупательРНН = ДокументДляВыгрузки.Организация.РНН;		
		ДанныеДляВыгрузки.Вставить("ОтметкаПокупательРНН",				"Х");
		ДанныеДляВыгрузки.Вставить("ОтметкаПокупательБИН",				"");
		ДанныеДляВыгрузки.Вставить("ОтметкаПокупательИИН",				"");

	Иначе
		// Выводим БИН, отметки имеют тип булево
		ПокупательРНН = СведенияОПокупателе.БИН_ИИН;		
		
		Если СведенияОПокупателе.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			ДанныеДляВыгрузки.Вставить("ОтметкаПокупательБИН",				"Х");
			ДанныеДляВыгрузки.Вставить("ОтметкаПокупательИИН",				"");
	 	Иначе	
			ДанныеДляВыгрузки.Вставить("ОтметкаПокупательБИН",				"");
			ДанныеДляВыгрузки.Вставить("ОтметкаПокупательИИН",				"Х");
	 	КонецЕсли;

		ДанныеДляВыгрузки.Вставить("ОтметкаПокупательРНН",					"");
		
	КонецЕсли;	
	
	ДанныеДляВыгрузки.Вставить("ПокупательРНН",				ПокупательРНН);
	
	ПродавецКодСтраны	= СокрЛП(ВыборкаПоШапке.КонтрагентСтранаРезидентстваКод);
	ПродавецАдрес 		= ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,");
	
	ДанныеДляВыгрузки.Вставить("ПродавецКодСтраны",			ПродавецКодСтраны);
	ДанныеДляВыгрузки.Вставить("ПродавецАдрес",				ПродавецАдрес);
	
	Если СведенияОПоставщике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ПродавецНаименование = ПроцедурыУправленияПерсоналомВызовСервера.ДанныеФизЛица(ВыборкаПоШапке.Организация, ВыборкаПоШапке.КонтрагентФизЛицо, ВыборкаПоШапке.Дата).Представление;
		Если ПродавецНаименование = Неопределено Тогда
			ПродавецНаименование = "";
		КонецЕсли;
	Иначе	
		ПродавецНаименование = ОбщегоНазначенияБКВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");	
	КонецЕсли; 

	ДанныеДляВыгрузки.Вставить("ПродавецНаименование",		ПродавецНаименование);
	
	// для налогоплательщиков Республики Беларусь – УНП (учетный номер плательщика), 
	// для налогоплательщиков Республики Казахстан – РНН (регистрационный номер налогоплательщика) либо БИН (бизнес - идентификационный номер) либо ИИН (индивидуальный идентификационный номер), 
	// для налогоплательщиков Российской Федерации – ИНН/КПП (идентификационный номер налогоплательщика/код причины постановки на учет); 
	ПродавецРНН  = ВыборкаПоШапке.КонтрагентНомерНалоговойРегистрацииВСтранеРезидентства;	
	// В форме 2015 года не используется
	ПозицияЗнака = Найти(ПродавецРНН, "/"); 
	
	Если ПозицияЗнака <> 0 Тогда 
		ПродавецКПП  = Сред(ПродавецРНН, ПозицияЗнака + 1, СтрДлина(ПродавецРНН)); 
	Иначе 
		ПродавецКПП	 = "";
	КонецЕсли;
	
	ПродавецРНН  = ?(ПозицияЗнака<>0, Лев(ПродавецРНН,ПозицияЗнака - 1),ПродавецРНН);
	
	ДанныеДляВыгрузки.Вставить("ПродавецРНН",				ПродавецРНН);
	ДанныеДляВыгрузки.Вставить("ПродавецКПП",				ПродавецКПП);
	
	Если ПродавецКодСтраны = "643" Тогда 
		ДанныеДляВыгрузки.Вставить("ОтметкаПродавецУНП",	"");
		ДанныеДляВыгрузки.Вставить("ОтметкаПродавецИННКПП",	"Х");
	ИначеЕсли ПродавецКодСтраны = "112" Тогда 
		ДанныеДляВыгрузки.Вставить("ОтметкаПродавецУНП",	"Х");
		ДанныеДляВыгрузки.Вставить("ОтметкаПродавецИННКПП",	"");
	Иначе
		ДанныеДляВыгрузки.Вставить("ОтметкаПродавецУНП",	"");
		ДанныеДляВыгрузки.Вставить("ОтметкаПродавецИННКПП",	"");
	КонецЕсли;
	
	Руководители = ОбщегоНазначенияБКВызовСервера.ОтветственныеЛицаОрганизаций(ВыборкаПоШапке.Организация, ВыборкаПоШапке.Дата);
	ГлавныйБухгалтер = ?(НЕ ЗначениеЗаполнено(Руководители.ГлавныйБухгалтер), НСтр("ru = 'Не предусмотрен'"), Руководители.ГлавныйБухгалтер);
	
	ДанныеДляВыгрузки.Вставить("ФИОГлавногоБухгалтера",		ГлавныйБухгалтер);
	ДанныеДляВыгрузки.Вставить("ФИОРуководителя",			?(НЕ ЗначениеЗаполнено(Руководители.Руководитель), "", Руководители.Руководитель));
		
	ИтогоСуммаНДС = 0;
	ИтогоВсего    = 0;
	ЗапросПоТоварам = Новый Запрос("ВЫБРАТЬ
	                               |	1 КАК IDТабличнойЧасти,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.Номенклатура КАК Номенклатура,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.Номенклатура.Наименование КАК НоменклатураНаименование,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.Номенклатура.НаименованиеПолное КАК НоменклатураНаименованиеПолное,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.НаименованиеТовара КАК НаименованиеТовара,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.КодТНВЭД КАК КодТНВЭД,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияПредставление,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.Количество КАК Количество,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.Сумма КАК Сумма,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.Валюта.Код КАК ВалютаКод,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.КурсВалюты КАК КурсВалюты,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.НомерТранспортногоДокумента КАК НомерТранспортногоДокумента,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.ДатаТранспортногоДокумента КАК ДатаТранспортногоДокумента,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.НомерСчетаФактуры КАК НомерСчетаФактуры,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.ОборотПоРеализации КАК ОборотПоРеализации,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.СтавкаНДС КАК СтавкаНДС,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.СтавкаНДС.Ставка КАК СтавкаНДССтавка,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.СтавкаНДС.Представление КАК СтавкаНДСПредставление,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.ДатаПринятияНаУчет КАК ДатаПринятияНаУчет,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.СуммаНДС КАК СуммаНДС,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.Валюта КАК Валюта,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.НомерСтроки КАК НомерСтроки,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.ДокументОснование КАК ДокументОснование,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.СтавкаНДС.ДляОсвобожденногоОборота КАК СтавкаНДСДляОсвобожденногоОборота,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.СтавкаНДС.МестоРеализацииНеРК КАК СтавкаНДСМестоРеализацииНеРК,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.ВидНДС КАК ВидНДС,
	                               |	ВЫБОР
	                               |		КОГДА ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.ВидНДС = &НДСМетодомЗачета
	                               |			ТОГДА ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.СуммаНДС 
	                               |		ИНАЧЕ 0
	                               |	КОНЕЦ КАК СуммаНДСМетодомЗачета
	                               |ИЗ
	                               |	Документ.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Товары КАК ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары
	                               |ГДЕ
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.Ссылка = &Ссылка
	                               |
	                               |ОБЪЕДИНИТЬ ВСЕ
	                               |
	                               |ВЫБРАТЬ
	                               |	2,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ОсновноеСредство,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ОсновноеСредство.Наименование,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ОсновноеСредство.НаименованиеПолное,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ОсновноеСредство.НаименованиеПолное,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.КодТНВЭД,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ЕдиницаИзмерения,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ЕдиницаИзмерения.Представление,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.Количество,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.Сумма,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.Валюта.Код,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.КурсВалюты,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.НомерТранспортногоДокумента,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ДатаТранспортногоДокумента,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.НомерСчетаФактуры,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ДатаСчетаФактуры,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ОборотПоРеализации,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.СтавкаНДС,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.СтавкаНДС.Ставка,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.СтавкаНДС.Представление,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ДатаПринятияНаУчет,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.СуммаНДС,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.Валюта,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.НомерСтроки,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ДокументОснование,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.СтавкаНДС.ДляОсвобожденногоОборота,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.СтавкаНДС.МестоРеализацииНеРК,
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ВидНДС,
	                               |	ВЫБОР
	                               |		КОГДА ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.ВидНДС = &НДСМетодомЗачета
	                               |			ТОГДА ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.СуммаНДС 
	                               |		ИНАЧЕ 0
	                               |	КОНЕЦ
	                               |ИЗ
	                               |	Документ.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.ОС КАК ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС
	                               |ГДЕ
	                               |	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговОС.Ссылка = &Ссылка
	                               |
	                               |УПОРЯДОЧИТЬ ПО
	                               |	IDТабличнойЧасти,
	                               |	НомерСтроки
	                               |ИТОГИ
	                               |	СУММА(ОборотПоРеализации),
	                               |	СУММА(СуммаНДС),
	                               |	СУММА(СуммаНДСМетодомЗачета)
	                               |ПО
	                               |	ОБЩИЕ"); 	
	ЗапросПоТоварам.УстановитьПараметр("Ссылка", ДокументДляВыгрузки);
	ЗапросПоТоварам.УстановитьПараметр("НДСМетодомЗачета", Перечисления.ВидыНДС.НДСМетодомЗачета);
	ВыборкаОбщиеИтоги = ЗапросПоТоварам.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	ВыборкаОбщиеИтоги.Следующий();
	ОборотПоРеализацииИтого = ВыборкаОбщиеИтоги.ОборотПоРеализации; // для этого поля в формате предусмотрено наличие дробной части
	Если ВыборкаОбщиеИтоги.СуммаНДС = Неопределено Тогда
		СуммаНДСИтого = Неопределено;
	Иначе
		// округляется, если установлен флаг
		СуммаНДСИтого = ?(ОкруглятьИтоговыеСуммы, Окр(ВыборкаОбщиеИтоги.СуммаНДС), ВыборкаОбщиеИтоги.СуммаНДС);
	КонецЕсли;
	Если ВыборкаОбщиеИтоги.СуммаНДСМетодомЗачета = Неопределено Тогда
		СуммаНДСМетодомЗачетаИтого = Неопределено;
	Иначе
		СуммаНДСМетодомЗачетаИтого = ВыборкаОбщиеИтоги.СуммаНДСМетодомЗачета;
	КонецЕсли;
	ДанныеДляВыгрузки.Вставить("ОборотПоРеализацииИтого",    ОборотПоРеализацииИтого);
	ДанныеДляВыгрузки.Вставить("СуммаНДСИтого",              СуммаНДСИтого);
	ДанныеДляВыгрузки.Вставить("СуммаНДСМетодомЗачетаИтого", ?(ОкруглятьИтоговыеСуммы И ЗначениеЗаполнено(СуммаНДСМетодомЗачетаИтого),
																	Окр(СуммаНДСМетодомЗачетаИтого), СуммаНДСМетодомЗачетаИтого));
	ДанныеДляВыгрузки.Вставить("СуммаНДСМетодомЗачетаУплачено", СуммаНДСМетодомЗачетаИтого);

	ВыборкаПоТоварам = ВыборкаОбщиеИтоги.Выбрать();	
	НомерСтроки = 1;
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	ТаблицаДанных.Колонки.Добавить("IDТабличнойЧасти");
	ТаблицаДанных.Колонки.Добавить("Валюта");
	ТаблицаДанных.Колонки.Добавить("ВалютаКод");
	ТаблицаДанных.Колонки.Добавить("ДатаПринятияНаУчет");
	ТаблицаДанных.Колонки.Добавить("ДатаСчетаФактуры");
	ТаблицаДанных.Колонки.Добавить("ДатаТранспортногоДокумента");
	ТаблицаДанных.Колонки.Добавить("ДокументОснование");
	ТаблицаДанных.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаДанных.Колонки.Добавить("ЕдиницаИзмеренияПредставление");
	ТаблицаДанных.Колонки.Добавить("КодТНВЭД");
	ТаблицаДанных.Колонки.Добавить("Количество");
	ТаблицаДанных.Колонки.Добавить("КурсВалюты");
	ТаблицаДанных.Колонки.Добавить("Номенклатура");
	ТаблицаДанных.Колонки.Добавить("НоменклатураНаименование");
	ТаблицаДанных.Колонки.Добавить("НоменклатураНаименованиеПолное");
	ТаблицаДанных.Колонки.Добавить("НомерСтроки");	
	ТаблицаДанных.Колонки.Добавить("НомерСчетаФактуры");
	ТаблицаДанных.Колонки.Добавить("НомерТранспортногоДокумента");
	ТаблицаДанных.Колонки.Добавить("ОборотПоРеализации");
	ТаблицаДанных.Колонки.Добавить("СтавкаНДС");
	ТаблицаДанных.Колонки.Добавить("СтавкаНДСДляОсвобожденногоОборота");
	ТаблицаДанных.Колонки.Добавить("СтавкаНДСПредставление");
	ТаблицаДанных.Колонки.Добавить("Сумма");
	ТаблицаДанных.Колонки.Добавить("СуммаНДС");
	ТаблицаДанных.Колонки.Добавить("Льгота");
	ТаблицаДанных.Колонки.Добавить("СуммаНДСМетодомЗачета");
	
	СчетчикНомераСтроки = 1;
	Пока ВыборкаПоТоварам.Следующий() Цикл		
		
		НоваяСтрока 									= ТаблицаДанных.Добавить();
		НоваяСтрока.IDТабличнойЧасти 					= ВыборкаПоТоварам.IDТабличнойЧасти;
		НоваяСтрока.Валюта								= ВыборкаПоТоварам.Валюта;
		НоваяСтрока.ВалютаКод							= ВыборкаПоТоварам.ВалютаКод;
		НоваяСтрока.ДатаПринятияНаУчет					= ВыборкаПоТоварам.ДатаПринятияНаУчет;
		НоваяСтрока.ДатаСчетаФактуры					= ВыборкаПоТоварам.ДатаСчетаФактуры;
		НоваяСтрока.ДатаТранспортногоДокумента			= ВыборкаПоТоварам.ДатаТранспортногоДокумента;
		НоваяСтрока.ДокументОснование					= ВыборкаПоТоварам.ДокументОснование;
		НоваяСтрока.ЕдиницаИзмерения					= ВыборкаПоТоварам.ЕдиницаИзмерения;
		НоваяСтрока.ЕдиницаИзмеренияПредставление		= ВРег(ВыборкаПоТоварам.ЕдиницаИзмеренияПредставление);
		НоваяСтрока.КодТНВЭД							= ВыборкаПоТоварам.КодТНВЭД;
		НоваяСтрока.Количество							= ВыборкаПоТоварам.Количество;
		НоваяСтрока.КурсВалюты							= Формат(Цел(ВыборкаПоТоварам.КурсВалюты * 100) / 100, "ЧЦ=10; ЧДЦ=2; ЧРД='.'; ЧГ=0");
		НоваяСтрока.Номенклатура						= ВыборкаПоТоварам.Номенклатура;
		
		Если ЗначениеЗаполнено(СокрЛП(ВыборкаПоТоварам.НаименованиеТовара)) Тогда
			НоменклатураНаименование = СокрЛП(ВыборкаПоТоварам.НаименованиеТовара);
		ИначеЕсли ЗначениеЗаполнено(ВыборкаПоТоварам.НоменклатураНаименованиеПолное) Тогда
			НоменклатураНаименование = ВыборкаПоТоварам.НоменклатураНаименованиеПолное;
		Иначе                                                     
			НоменклатураНаименование = ВыборкаПоТоварам.НоменклатураНаименование;
		КонецЕсли;	
			
		НоваяСтрока.НоменклатураНаименование			= НоменклатураНаименование;
		НоваяСтрока.НоменклатураНаименованиеПолное		= ВыборкаПоТоварам.НоменклатураНаименованиеПолное;
		НоваяСтрока.НомерСтроки							= Формат(СчетчикНомераСтроки,"ЧЦ=4; ЧВН=; ЧГ=0");		
		НоваяСтрока.НомерСчетаФактуры					= ВыборкаПоТоварам.НомерСчетаФактуры;
		НоваяСтрока.НомерТранспортногоДокумента			= ВыборкаПоТоварам.НомерТранспортногоДокумента;
		НоваяСтрока.ОборотПоРеализации					= ВыборкаПоТоварам.ОборотПоРеализации;
		НоваяСтрока.СтавкаНДСДляОсвобожденногоОборота	= ВыборкаПоТоварам.СтавкаНДСДляОсвобожденногоОборота;
		
		Если ВыборкаПоТоварам.СтавкаНДСДляОсвобожденногоОборота = ИСТИНА 
			ИЛИ ВыборкаПоТоварам.СтавкаНДСМестоРеализацииНеРК = ИСТИНА Тогда
			НоваяСтрока.СтавкаНДС						= "";
		Иначе 
			НоваяСтрока.СтавкаНДС						= ВыборкаПоТоварам.СтавкаНДССтавка;
		КонецЕсли;	
		
		Если ВыборкаПоТоварам.СтавкаНДСДляОсвобожденногоОборота = ИСТИНА 
			ИЛИ ВыборкаПоТоварам.СтавкаНДСМестоРеализацииНеРК = ИСТИНА Тогда
			НоваяСтрока.Льгота							= "X";
		Иначе 
			НоваяСтрока.Льгота							= "";
		КонецЕсли;	
	
		НоваяСтрока.Сумма								= ВыборкаПоТоварам.Сумма;
		НоваяСтрока.СуммаНДС							= ВыборкаПоТоварам.СуммаНДС;
		НоваяСтрока.СуммаНДСМетодомЗачета				= ВыборкаПоТоварам.СуммаНДСМетодомЗачета;
		
		// нумеруем сами, чтобы в СОНО получить свозную нумерацию для строк всех ТЧ документа
		СчетчикНомераСтроки = СчетчикНомераСтроки + 1;
	КонецЦикла;

	Если ТаблицаДанных.Количество() >= 10 Тогда
		ТаблицаДанных.Добавить();
	КонецЕсли;
		
	ДанныеДляВыгрузки.Вставить("ТаблицаДанных", ТаблицаДанных);
	
	Возврат ДанныеДляВыгрузки;

	
КонецФункции

#КонецЕсли
