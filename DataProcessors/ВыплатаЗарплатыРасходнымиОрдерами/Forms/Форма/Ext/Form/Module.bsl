
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	
	ПараметрыРазмещенияИсточники = Новый Массив;
	ПараметрыРазмещенияИсточники.Добавить(Метаданные.Документы.РасходныйКассовыйОрдер);
	
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ФормаКоманднаяПанель;
	ПараметрыРазмещения.Источники = ПараметрыРазмещенияИсточники;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Параметры.Свойство("Организация") И ЗначениеЗаполнено(Параметры.Организация) Тогда
		Объект.Организация = Параметры.Организация;
	КонецЕсли;
	
	Если Параметры.Свойство("СтруктурноеПодразделение") И ЗначениеЗаполнено(Параметры.СтруктурноеПодразделение) Тогда
		Объект.СтруктурноеПодразделение = Параметры.СтруктурноеПодразделение;
	КонецЕсли;
	
	Если  Параметры.Свойство("ПлатежнаяВедомость") И ЗначениеЗаполнено(Параметры.ПлатежнаяВедомость) Тогда
		Объект.ПлатежнаяВедомость	        = Параметры.ПлатежнаяВедомость;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		НастройкиПользователя = ПользователиБКВызовСервераПовтИсп.ЗначенияНастроекПользователя(Пользователи.ТекущийПользователь(), "ОсновнаяОрганизация");
		
		Объект.Организация = НастройкиПользователя.ОсновнаяОрганизация;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Касса) Тогда
		Объект.Касса		  = Объект.Организация.ОсновнаяКасса;
	КонецЕсли;
	
	ТекПользователь = Пользователи.ТекущийПользователь();

	Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Объект.Ответственный = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойОтветственный");
	КонецЕсли;

	Если Параметры.Свойство("Автозаполнение") И ЗначениеЗаполнено(Параметры.Автозаполнение) Тогда
		Обработки.ВыплатаЗарплатыРасходнымиОрдерами.Автозаполнение(Объект);
	КонецЕсли;
	
	ПодготовитьФормуНаСервере();
	
	УстановитьЗаголовкиПоПлатежнойВедомости();
	
	УстановитьВидимость();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
		Объект.Касса = Неопределено;
		ОрганизацияИспользуетОбменЗУП31 = Ложь;
	Иначе 
		Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
			ПриИзмененииЗначенияОрганизацииСервер(Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаФормированияПриИзменении(Элемент)
	
	// спросим у пользователя о необходимости смены даты РКО в табличной части РКО
	Если ТекущаяДатаФормирования <> Объект.ДатаФормирования 
			И ЗначениеЗаполнено(Объект.ДатаФормирования) Тогда
			
		// если ли созданные документы
		КоличествоДокументов = 0;
		Для Каждого СтрокаТаблицы Из Объект.РКО Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.РКО) Тогда
				КоличествоДокументов = КоличествоДокументов + 1;
			КонецЕсли;
		КонецЦикла;
	
		Если КоличествоДокументов > 0 Тогда
			
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru= 'Изменить даты отмеченных документов на %1?'"), 
									Формат(Объект.ДатаФормирования, "ДФ=дд.ММ.гггг"));
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииДат", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
			
		КонецЕсли;
		
	КонецЕсли;	
	
	ТекущаяДатаФормирования = Объект.ДатаФормирования;

КонецПроцедуры

&НаКлиенте
Процедура ПлатежнаяВедомостьПриИзменении(Элемент)
	
	ПлатежнаяВедомостьПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <ИМЯ ТАБЛИЦЫ ФОРМЫ>

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	Массив = Новый Массив;
	Для Каждого СтрокаТаблицы Из Объект.РКО Цикл
		Если СтрокаТаблицы.Отметка Тогда
			Массив.Добавить(СтрокаТаблицы.РКО);
		КонецЕсли;
	КонецЦикла;
	
	  ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда,Элементы.РКО);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


&НаКлиенте
Процедура Создать(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "Обработка ""выплата зарплаты расходными ордерами"" (создание документа)");
	
	СоздатьРКОНаСервере();
	ОповеститьОбИзменении(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	Если ТипЗнч(Объект.ПлатежнаяВедомость) = Тип("ДокументСсылка.ВедомостьПрочихДоходов") Тогда
		ОповещаемыеВедомости = Новый Соответствие;
		ОповещаемыеВедомости.Вставить(Объект.ПлатежнаяВедомость, Объект.ПлатежнаяВедомость);
		Оповестить("ИзменениеВыплатыПоВедомостиРегл", ОповещаемыеВедомости);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Провести(Команда)
	
	ПровестиНаСервере();
	
	Оповестить("ОбновитьФорму", Объект.ПлатежнаяВедомость, Объект.ПлатежнаяВедомость);
		
КонецПроцедуры

&НаКлиенте
Процедура ОтменаПроведения(Команда)

	ОтменаПроведенияНаСервере();
	
	Оповестить("ОбновитьФорму", Объект.ПлатежнаяВедомость, Объект.ПлатежнаяВедомость);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлаги(Команда)
		
	Для Каждого СтрокаРКО Из Объект.РКО Цикл
		СтрокаРКО.Отметка = Истина;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СнятьФлаги(Команда)
		
	Для Каждого СтрокаРКО Из Объект.РКО Цикл
		СтрокаРКО.Отметка = Ложь;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура Инвертировать(Команда)
		
	Для Каждого СтрокаРКО Из Объект.РКО Цикл
		СтрокаРКО.Отметка = Не СтрокаРКО.Отметка;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();

	Объект.ДатаФормирования = ОбщегоНазначения.ТекущаяДатаПользователя();
	ТекущаяДатаФормирования = Объект.ДатаФормирования;
	
	Для Каждого СтрокаТаблицы Из Объект.РКО Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.РКО) Тогда
			СтрокаТаблицы.Ссылка = СтрокаТаблицы.РКО;
		КонецЕсли;
	КонецЦикла;
			
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	ОрганизацияИспользуетОбменЗУП31 = ОбменДаннымиСервер.ОрганизацияИспользуетОбменЧерезУниверсальныйФормат(Объект.Организация, "ОбменЗУП31БП", Истина);

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ПараметрыФО = Новый Структура();
	ПараметрыФО.Вставить("Организация", Объект.Организация);
	ПараметрыФО.Вставить("Дата", Объект.ДатаФормирования);
	
	ЭтаФорма.УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	
	РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		Модифицированность = Истина;
		ПриИзмененииЗначенияОрганизацииСервер(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацияИспользуетОбменЗУП31 = ОбменДаннымиСервер.ОрганизацияИспользуетОбменЧерезУниверсальныйФормат(Объект.Организация, "ОбменЗУП31БП", Истина);
	
	Если Объект.ПлатежнаяВедомость <> Неопределено Тогда
		ДанныеОбъекта = Новый Структура();
		ДанныеОбъекта.Вставить("Ссылка", Объект.ПлатежнаяВедомость);
		ДанныеОбъекта.Вставить("Организация", Объект.Организация);
		ДанныеОбъекта.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
		Объект.Касса = Справочники.Кассы.КассаПоУмолчанию(ДанныеОбъекта);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте  
Процедура ПослеЗакрытияВопросаПриИзмененииДат(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;		
	КонецЕсли;
	
	ПослеЗакрытияВопросаПриИзмененииДатНаСервере();
	
	ОповеститьОбИзменении(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));

КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияВопросаПриИзмененииДатНаСервере()
	
	Обработки.ВыплатаЗарплатыРасходнымиОрдерами.ИзменитьДатыРКО(Объект.ДатаФормирования, Объект);
	
КонецПроцедуры

&НаСервере
Процедура ПлатежнаяВедомостьПриИзмененииНаСервере()
	
	Обработки.ВыплатаЗарплатыРасходнымиОрдерами.Автозаполнение(Объект);
	УстановитьЗаголовкиПоПлатежнойВедомости();
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьРКОНаСервере()
	
	Обработки.ВыплатаЗарплатыРасходнымиОрдерами.СоздатьРКО(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ПровестиНаСервере()
	
	Для Каждого СтрокаТаблицы Из Объект.РКО Цикл
		Если СтрокаТаблицы.Отметка и ЗначениеЗаполнено(СтрокаТаблицы.РКО) Тогда
			ДокументРКО = СтрокаТаблицы.РКО.ПолучитьОбъект();
			
			Если ДокументРКО.ПометкаУдаления Тогда
				ДокументРКО.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			Если ДокументРКО.ПроверитьЗаполнение() Тогда
				Попытка
					ЗначениеТаймера = ОценкаПроизводительности.НачатьЗамерВремени();
					ДокументРКО.Записать(РежимЗаписиДокумента.Проведение);
					ОценкаПроизводительности.ЗакончитьЗамерВремени("Обработка ""выплата зарплаты расходными ордерами"" (проведение документа)", ЗначениеТаймера);
				Исключение
					ТекстСообщения = НСтр("ru='Операция не выполнена!'");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецПопытки;
			КонецЕсли;
			СтрокаТаблицы.Отметка = НЕ СтрокаТаблицы.Отметка;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтменаПроведенияНаСервере() 
	
	Для Каждого СтрокаТаблицы Из Объект.РКО Цикл
		Если СтрокаТаблицы.Отметка и ЗначениеЗаполнено(СтрокаТаблицы.РКО) И СтрокаТаблицы.РКО.Проведен Тогда
			ДокументРКО = СтрокаТаблицы.РКО.ПолучитьОбъект();
			Попытка
				ЗначениеТаймера = ОценкаПроизводительности.НачатьЗамерВремени();
				ДокументРКО.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				ОценкаПроизводительности.ЗакончитьЗамерВремени("Обработка ""выплата зарплаты расходными ордерами"" (отмена проведения документа)", ЗначениеТаймера);
			Исключение
				ТекстСообщения = НСтр("ru='Операция не выполнена!'");
    			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
			КонецПопытки;
			СтрокаТаблицы.Отметка = НЕ СтрокаТаблицы.Отметка;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежнаяВедомостьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокТипов = ПолучитьСписокВыбораПлатежнойВедомости();
	
	Если СписокТипов.Количество() = 1 Тогда
		ПараметрыОтбора = Новый Структура("Организация", Объект.Организация);
		ПараметрыОтбора.Вставить("ОбработкаВыплатаЗарплатыРКО", Истина);
		
		ПараметрыФормы = Новый Структура("ПараметрыОтбораСписка, ТекущаяСтрока", ПараметрыОтбора, Объект.ПлатежнаяВедомость);
		ОткрытьФорму("Документ.ЗарплатаКВыплатеОрганизаций.ФормаВыбора", ПараметрыФормы, Элемент);  //ЭтаФорма);
	Иначе
		Оповещение = Новый ОписаниеОповещения("ОткрытиеФормыВыбораПлатежнойВедомости", ЭтотОбъект);
		СписокТипов.ПоказатьВыборЭлемента(Оповещение, НСтр("ru = 'Выбор типа платежной ведомости'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСписокВыбораПлатежнойВедомости()
	
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций"));
	Если ОрганизацияИспользуетОбменЗУП31 Тогда
		СписокТипов.Добавить(Тип("ДокументСсылка.ВедомостьПрочихДоходов"));
	КонецЕсли;
	
	Возврат СписокТипов;
	
КонецФункции

&НаКлиенте
Процедура ОткрытиеФормыВыбораПлатежнойВедомости(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяОткрываемойФормы = ПолучитьИмяФормыВыбораПлатежнойВедомости(ВыбранныйЭлемент);
	Владелец = ЭтаФорма.Элементы.ПлатежнаяВедомость;
	
	ПараметрыОтбора = Новый Структура("Организация", Объект.Организация);
	ПараметрыОтбора.Вставить("ОбработкаВыплатаЗарплатыРКО", Истина);
	
	ПараметрыФормы = Новый Структура("ПараметрыОтбораСписка, ТекущаяСтрока", ПараметрыОтбора, Объект.ПлатежнаяВедомость);
	ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыФормы, Владелец);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяФормыВыбораПлатежнойВедомости(ВыбранныйЭлемент)
	
	ИмяОткрываемойФормы = "";
	
	Если ВыбранныйЭлемент.Значение = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций") Тогда
		ИмяОткрываемойФормы = "Документ.ЗарплатаКВыплатеОрганизаций.ФормаВыбора";
	ИначеЕсли ВыбранныйЭлемент.Значение = Тип("ДокументСсылка.ВедомостьПрочихДоходов") Тогда
		ИмяОткрываемойФормы = "Документ.ВедомостьПрочихДоходов.ФормаВыбора";
	КонецЕсли;
	
	Возврат ИмяОткрываемойФормы;
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовкиПоПлатежнойВедомости()
	
	Если ТипЗнч(Объект.ПлатежнаяВедомость) = Тип("ДокументСсылка.ВедомостьПрочихДоходов") Тогда
		ЭтаФорма.Заголовок = НСтр("ru = 'Выплата прочего дохода расходными ордерами'");
		Элементы.РКОФизЛицо.Заголовок = НСтр("ru = 'Контрагент'");
	Иначе
		ЭтаФорма.Заголовок = НСтр("ru = 'Выплата зарплаты расходными ордерами'");
		Элементы.РКОФизЛицо.Заголовок = НСтр("ru = 'Сотрудник'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	ВедомостьПрочихДоходов = (ТипЗнч(Объект.ПлатежнаяВедомость) = Тип("ДокументСсылка.ВедомостьПрочихДоходов"));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РКОДоговорКонтрагента", "Видимость", ВедомостьПрочихДоходов);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

