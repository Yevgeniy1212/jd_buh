#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает заготовку коллекции обработчиков обновления, которые необходимо выполнить.
// Запуск обработчиков выполняется функцией ЗапуститьФоновоеВыполнениеОбработчиковОбновления().
//
Функция ПустаяКоллекцияОбработчиковОбновления() Экспорт
	
	ТаблицаОбработчиков = Новый ТаблицаЗначений;
	
	// Полное имя обработчика, например: "Обработки.ОбновлениеИнформационнойБазыБК.ОбновитьСчетаФактуры".
	ТаблицаОбработчиков.Колонки.Добавить("Процедура", Новый ОписаниеТипов("Строка"));
	
	// Параметры обработчика, должен содержать две структуры Основные и Дополнительные.
	// Основные - Это пользовательские параметры, например: ДатаНачала.
	// Дополнительные - Это параметры подсистемы, напрмиер: ИмяСобытия.
	ТаблицаОбработчиков.Колонки.Добавить("Параметры", Новый ОписаниеТипов("Структура"));
	
	Возврат ТаблицаОбработчиков;
	
КонецФункции

// Запускает фоновое задание, которое выполняет переданные обработчики обновления.
//
// Параметры:
//  КоллекцияОбработчиковОбновления - ТаблицаЗначений - Смотрите ПустаяКоллекцияОбработчиковОбновления().
//  УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор формы, из которой запущено выполнение.
//
// Возвращаемое значение:
//  Структура - Смотрите ДлительныеОперации.ЗапуститьВыполнениеВФоне().
//
Функция ЗапуститьФоновоеВыполнениеОбработчиковОбновления(Знач КоллекцияОбработчиковОбновления, УникальныйИдентификатор) Экспорт
	
	Параметры = Новый Структура("КоллекцияОбработчиковОбновления", КоллекцияОбработчиковОбновления);
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.ОбновлениеИнформационнойБазыБК.ВыполнитьОбработчикиОбновления",
		Параметры,
		НСтр("ru = 'Выполнение обработок обновления'"));
		
	Возврат Результат;
		
КонецФункции

// Возвращает необходимость выполнения ручных обработчиков обновления.
//
// Возвращаемое значение:
//  Булево - Истина, если есть ручные обработчики требующие выполнения. Ложь, в противном случае.
//                                     
Функция ЕстьРучныеОбработчикиОбновленияТребуещиеВыполнения() Экспорт
	
	ЕстьТребуещиеВыполнения = Ложь;
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		
		СведенияОбОбновленииИБ_БК = ПрочитатьКонстантуСведенияОбОбновленииИБ_БК();
		ТаблицаОбработчиков = СведенияОбОбновленииИБ_БК.РучныеОбработчики.ТаблицаОбработчиков;
		
		ОбработчикТребующийВыполнения = ТаблицаОбработчиков.Найти(Истина, "ТребуетсяВыполнить");
		
		Если ОбработчикТребующийВыполнения = Неопределено Тогда
			ЕстьТребуещиеВыполнения = Ложь;	
		Иначе
			ЕстьТребуещиеВыполнения = Истина;	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЕстьТребуещиеВыполнения;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции



// Работа с константой СведенияОбОбновленииИБ_БК

Функция ПрочитатьКонстантуСведенияОбОбновленииИБ_БК() Экспорт
	
	// Прочитать константу.
	ХранилищеЗначения = Константы.СведенияОбОбновленииИБ_БК.Получить();
	СведенияОбОбновленииИБ_БК = ХранилищеЗначения.Получить();
	
	// Если константа еще не использовалась, то создать пустой шаблон константы.
	Если СведенияОбОбновленииИБ_БК = Неопределено Тогда
		СведенияОбОбновленииИБ_БК = ПустоеЗначениеКонстантыСведенияОбОбновленииИБ_БК();
	КонецЕсли;
	
	Возврат СведенияОбОбновленииИБ_БК;
	
КонецФункции

Функция ЗаписатьКонстантуСведенияОбОбновленииИБ_БК(Знач СведенияОбОбновленииИБ_БК) Экспорт
	
	ХранилищеЗначения = Новый ХранилищеЗначения(СведенияОбОбновленииИБ_БК);
	Константы.СведенияОбОбновленииИБ_БК.Установить(ХранилищеЗначения);
	
КонецФункции

// Добавляет новый или изменяет существующий ручной обработчик обновления ИБ.
// Проверяет СведенияОбОбновленииИБ_БК.РучныеОбработчики.ТаблицаОбработчиков,
// Если обработчик с указанным значением поля "Процедура" найден, то обновляет его,
// Иначе добавляет в таблицу новый обработчик и заполняет его.
//
// Параметры:
//  ОбработчикОбновления - Структура - Смотреть ПустоеОписаниеРучногоОбработчикаОбновления().
//  СведенияОбОбновленииИБ_БК - Структура - Смотреть ПустоеЗначениеКонстантыСведенияОбОбновленииИБ_БК().
//
// Возвращаемое значение:
//  СтрокаТаблицыЗначений - Добавленный или обновленный ручной обработчик обновления ИБ,
//   смотреть ПустоеОписаниеРучногоОбработчикаОбновления().
//
Функция ДобавитьОбновитьРучнойОбработчикОбновленияИБ(Знач ОписаниеОбработчика, СведенияОбОбновленииИБ_БК) Экспорт
	
	ТаблицаОбработчиков = СведенияОбОбновленииИБ_БК.РучныеОбработчики.ТаблицаОбработчиков;	
	РучнойОбработчик = ТаблицаОбработчиков.Найти(ОписаниеОбработчика.Процедура, "Процедура");
		
	Если РучнойОбработчик = Неопределено Тогда
		РучнойОбработчик = ТаблицаОбработчиков.Добавить();	
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(РучнойОбработчик, ОписаниеОбработчика);
	
	Возврат РучнойОбработчик;
	
КонецФункции

// Возвращает пустую заготовку константы СведенияОбОбновленииИБ_БК.
//
// Возвращаемое значение:
//  Структура - пустая заготовка константы СведенияОбОбновленииИБ_БК.
//
Функция ПустоеЗначениеКонстантыСведенияОбОбновленииИБ_БК() Экспорт
	
	ТаблицаОбработчиков = ПустаяТаблицаРучныеОбработчики();

	РучныеОбработчики = Новый Структура;
	РучныеОбработчики.Вставить("ТаблицаОбработчиков", ТаблицаОбработчиков);	
	
	СведенияОбОбновленииИБ_БК = Новый Структура;
	СведенияОбОбновленииИБ_БК.Вставить("РучныеОбработчики", РучныеОбработчики);
	
	Возврат СведенияОбОбновленииИБ_БК;
	
КонецФункции

// Возвращает заготовку описания ручного обработчика обновления.
//
// Возвращаемое значение:
//  Структура - Смотреть ПустаяТаблицаРучныеОбработчики().
//
Функция ПустоеОписаниеРучногоОбработчикаОбновления() Экспорт
	
	РучнойОбработчик = Новый Структура;
	
	РучнойОбработчик.Вставить("Процедура", "");	
	РучнойОбработчик.Вставить("Состояние", ОбновлениеИнформационнойБазыБККлиентСервер.СостояниеОбработчика_НеВыполнен());	
	РучнойОбработчик.Вставить("ТребуетсяВыполнить", Ложь);	
	РучнойОбработчик.Вставить("ВремяНачала", '0001-01-01');	
	РучнойОбработчик.Вставить("ВремяЗавершения", '0001-01-01');	
	РучнойОбработчик.Вставить("ОписаниеЗавершения", "");	
	
	Возврат РучнойОбработчик;
	
КонецФункции

Функция ПустаяТаблицаРучныеОбработчики() Экспорт
	
	ТаблицаОбработчиков = Новый ТаблицаЗначений;
	
	// Полное имя процедуры, например: "Обработки.ОбновлениеИнформационнойБазыБК.ОбновитьСчетаФактуры".
	ТаблицаОбработчиков.Колонки.Добавить("Процедура", Новый ОписаниеТипов("Строка"));
	
	// Одно из трех значений "НеВыполнен", "ВыполненУспешно", "ВыполненСОшибками".
	ТаблицаОбработчиков.Колонки.Добавить("Состояние", Новый ОписаниеТипов("Строка"));
	
	// Может быть установлен только при обновлении на новую версию. Снимается при успешном выполнении.
	// Обработчики, у которых установлен данный флаг будут помечены в форме ЗапускОбработчиковОбновления.
	ТаблицаОбработчиков.Колонки.Добавить("ТребуетсяВыполнить", Новый ОписаниеТипов("Булево"));
	
	ТипВремя = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	
	// Время начала выполнения обработчика.
	ТаблицаОбработчиков.Колонки.Добавить("ВремяНачала", ТипВремя);
	
	// Время завершения выполнения обработчика.
	ТаблицаОбработчиков.Колонки.Добавить("ВремяЗавершения", ТипВремя);
	
	// Строковое описание завершения, например: 
	// - "Все счета-фактуры успешно обновлены."
	// - "Не удалось обновить счетов-фактур: 10.".
	ТаблицаОбработчиков.Колонки.Добавить("ОписаниеЗавершения", Новый ОписаниеТипов("Строка"));
	
	Возврат ТаблицаОбработчиков;
	
КонецФункции

Процедура ЗаписатьРезультатВыполненияОбработчикаОбновленияВКонстантуСведенияОбОбновленииИБ_БК(Знач РезультатВыполнения)
	
	СведенияОбОбновленииИБ_БК = ПрочитатьКонстантуСведенияОбОбновленииИБ_БК();
	ТаблицаОбработчиков = СведенияОбОбновленииИБ_БК.РучныеОбработчики.ТаблицаОбработчиков;
	
	РучнойОбработчик = ТаблицаОбработчиков.Найти(РезультатВыполнения.Процедура, "Процедура");	
	
	Если РучнойОбработчик = Неопределено Тогда
		РучнойОбработчик = ТаблицаОбработчиков.Добавить();
	КонецЕсли;
	
	РучнойОбработчик.Процедура = РезультатВыполнения.Процедура;
	
	Если РезультатВыполнения.ВыполненоУспешно Тогда	
		РучнойОбработчик.Состояние = ОбновлениеИнформационнойБазыБККлиентСервер.СостояниеОбработчика_ВыполненУспешно();
	Иначе
		РучнойОбработчик.Состояние = ОбновлениеИнформационнойБазыБККлиентСервер.СостояниеОбработчика_ВыполненСОшибками();
	КонецЕсли;
	
	Если РучнойОбработчик.ТребуетсяВыполнить И РезультатВыполнения.ВыполненоУспешно Тогда
		РучнойОбработчик.ТребуетсяВыполнить = Ложь;
		// Иначе останется старое значение, т.е. если оно было Истина, то останется Истина.
	КонецЕсли;
	
	РучнойОбработчик.ВремяНачала = РезультатВыполнения.ВремяНачала;
	РучнойОбработчик.ВремяЗавершения = РезультатВыполнения.ВремяЗавершения;

	РучнойОбработчик.ОписаниеЗавершения = РезультатВыполнения.ОписаниеЗавершения;
	
	ЗаписатьКонстантуСведенияОбОбновленииИБ_БК(СведенияОбОбновленииИБ_БК);
	
КонецПроцедуры



// Прочие служебные процедуры и функции

// Возвращает содержимое макета ОбработчикиОбновления в виде таблицы значений.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Обработчики обновлений из макета ОбработчикиОбновления.
//
Функция ОбработчикиОбновленияИзМакета() Экспорт
	
	МакетОбработчикиОбновления = Обработки.ОбновлениеИнформационнойБазыБК.ПолучитьМакет("ОбработчикиОбновления");	
	ТаблицаОбработчикиОбновления = Новый ТаблицаЗначений;	
	
	// Добавить колонки таблицы значений в порядке следования колонок в макете.
	ТаблицаОбработчикиОбновления.Колонки.Добавить("Версия");
	ТаблицаОбработчикиОбновления.Колонки.Добавить("Процедура");
	ТаблицаОбработчикиОбновления.Колонки.Добавить("Форма");
	ТаблицаОбработчикиОбновления.Колонки.Добавить("Наименование");
	ТаблицаОбработчикиОбновления.Колонки.Добавить("Описание");
	
	// Заполнить строки таблицы значений на основе строк макета.
	Для НомерСтрокиМакета = 1 По МакетОбработчикиОбновления.ВысотаТаблицы Цикл
		СтрокаМакета = МакетОбработчикиОбновления.ПолучитьОбласть(НомерСтрокиМакета, , НомерСтрокиМакета);
		СтрокаТаблицы = ТаблицаОбработчикиОбновления.Добавить();
		Для Каждого Колонка Из ТаблицаОбработчикиОбновления.Колонки Цикл
			ИндексКолонкиТаблицы = ТаблицаОбработчикиОбновления.Колонки.Индекс(Колонка);
			НомерКолонкиМакета = ИндексКолонкиТаблицы + 1; // Порядок колонок в макете и таблице значений совпадает.
			СтрокаТаблицы[ИндексКолонкиТаблицы] = СтрокаМакета.Область(1, НомерКолонкиМакета, 1, НомерКолонкиМакета).Текст;
		КонецЦикла;
	КонецЦикла;
	
	// Добавить и заполнить колонку ВесВерсии, которую можно использовать для сортировки таблицы.
	ТаблицаОбработчикиОбновления.Колонки.Добавить("ВесВерсии", Новый ОписаниеТипов("Число"));
	Для Каждого СтрокаТаблицы Из ТаблицаОбработчикиОбновления Цикл
		СтрокаТаблицы.ВесВерсии = ОбновлениеИнформационнойБазыСлужебный.ВесВерсии(СтрокаТаблицы.Версия);	
	КонецЦикла;
	
	Возврат ТаблицаОбработчикиОбновления;
	
КонецФункции

// Выполняет обработки из обработки ОбновлениеИнформационнойБазыБК.
//
// Параметры:
//  Параметры - Структура - Содержит один элемент,
//   |- КоллекцияОбработчиковОбновления - ТаблицаЗначений - Обработчики обновления для выполнения.
//       Подробнее смотрите в функции ПустаяКоллекцияОбработчиковОбновления().
//  АдресХранилища - Строка - Данный параметр не используется.
//
Процедура ВыполнитьОбработчикиОбновления(Параметры, АдресХранилища) Экспорт
	
	Для Каждого ОписаниеОбработчика Из Параметры.КоллекцияОбработчиковОбновления Цикл
		
		ИмяСобытия = ОписаниеОбработчика.Параметры.Дополнительные.ИмяСобытия;
		
		ТекстНачало = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Начало ""%1"" (%2).'"), ИмяСобытия, ТекущаяДата());
		СообщитьПользователю(ТекстНачало, , , , ИмяСобытия, УровеньЖурналаРегистрации.Информация);
		
		Результат = Новый Структура;
		Результат.Вставить("ВыполненоУспешно", Ложь);
		Результат.Вставить("ОписаниеЗавершения", "");
		
		ПараметрыМетода = Новый Массив;
		ПараметрыМетода.Добавить(ОписаниеОбработчика.Параметры.Основные);
		ПараметрыМетода.Добавить(ИмяСобытия);
		ПараметрыМетода.Добавить(Результат);
		
		ВремяНачала = ТекущаяДата();
		
		Попытка
			
			ОбщегоНазначения.ВыполнитьМетодКонфигурации(ОписаниеОбработчика.Процедура, ПараметрыМетода);
						
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОшибкаКратко = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			ОшибкаПодробно = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			
			Результат.ВыполненоУспешно = Ложь;
			Результат.ОписаниеЗавершения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'При выполнении обработки возникла ошибка: %1.'"), ОшибкаКратко);
			
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ОшибкаПодробно);
			
		КонецПопытки;
		
		// Принудительно закрыть транзакцию, если ее открыли, но не закрыли в обработке обновления.
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ВремяЗавершения = ТекущаяДата();
		
		Результат.Вставить("Процедура", ОписаниеОбработчика.Процедура);
		Результат.Вставить("ВремяНачала", ВремяНачала);
		Результат.Вставить("ВремяЗавершения", ВремяЗавершения);
		
		ЗаписатьРезультатВыполненияОбработчикаОбновленияВКонстантуСведенияОбОбновленииИБ_БК(Результат);
		
		ТекстЗавершение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Завершение ""%1"" (%2).'"), ИмяСобытия, ТекущаяДата());
		СообщитьПользователю(ТекстЗавершение, , , , ИмяСобытия, УровеньЖурналаРегистрации.Информация);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкиОбновления



// Универсальные методы для использования в обработчиках обновления 

// Показывает сообщение и создает запись в журнале регистрации.
//
// Параметры:
//  Текст - Строка - Текст сообщения.
//  Ссылка - ЛюбаяСсылка - Ссылка на объект с которым будет связано сообщение.
//  ПоказатьСообщение - Булево - Если Истина, то будет показано сообщение.
//  ЗаписатьЖурналРегистрации - Булево - Если Истина, то будет создана запись журнала регистрации.
//  ИмяСобытияЖурналаРегистрации - Строка - Имя события, которое будет в журнале регистрации.
//   Параметр должен быть обязательно указан, если ЗаписатьЖурналРегистрации = Истина.
//  УровеньСобытияЖурналаРегистрации - УровеньЖурналаРегистрации - Уровень события журнала регистрации.
//   По умолчанию уровень: Предупреждение.
//
Процедура СообщитьПользователю(
	Текст, 
	Ссылка = Неопределено, 
	ПоказатьСообщение = Истина, 
	ЗаписатьЖурналРегистрации = Истина, 
	ИмяСобытияЖурналаРегистрации = "",
	УровеньСобытияЖурналаРегистрации = Неопределено)
	
	Если ПоказатьСообщение Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Текст;
		Сообщение.КлючДанных = Ссылка;
		Сообщение.Сообщить();		
	КонецЕсли;
	
	Если ЗаписатьЖурналРегистрации Тогда
		УровеньСобытия = ?(УровеньСобытияЖурналаРегистрации = Неопределено, УровеньЖурналаРегистрации.Предупреждение, УровеньСобытияЖурналаРегистрации);			
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации, УровеньСобытия, , Ссылка, Текст);	
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаписатьДокументБезПроведения(ОбъектДокумент)
	
	ОбъектДокумент.ОбменДанными.Загрузка = Истина;
	ОбъектДокумент.Записать(РежимЗаписиДокумента.Запись);
	
КонецФункции

Функция ПровестиДокумент(ОбъектДокумент)
	
	ОбъектДокумент.ДополнительныеСвойства.Вставить("ВыполненаПроверкаЗаполнения", Истина);
	ОбъектДокумент.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	
КонецФункции

Функция ТекстОшибкиРучнаяКорректировкаДокумента(Знач СсылкаДокумент)
	
	ТекстОшибки = НСтр(
	"ru = 'Не удалось провести документ ""%1"", так как его движения скорректированы вручную.
	|Пожалуйста, самостоятельно обновите движения данного документа.'");
	
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СсылкаДокумент);
	
	Возврат ТекстОшибки;
		
КонецФункции

Функция ТекстОшибкиПриЗаписиДокумента(Знач СсылкаДокумент, Знач ОписаниеОшибки)
	
	ТекстОшибки = НСтр(
	"ru = 'Не удалось записать документ ""%1"" по причине:
	|%2'");
	
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СсылкаДокумент, ОписаниеОшибки);
	
	Возврат ТекстОшибки;
		
КонецФункции



// Заполнение реквизита коэффициент

// Заполняет в документах реквизит "Коэффициент" значением 1, если он не заполнен.
// Подробнее смотреть в справке к форме ЗаполнениеРеквизитаКоэффициент.
//
// Параметры:
//  Параметры - Неопределено - Параметр не используется.
//
Процедура ЗаполнитьРеквизитКоэффициент(Параметры, ИмяСобытия, Результат) Экспорт
	
	// Если документ не удалось записать, то он добавляется в данный массив, 
	// чтобы исключить его из следующей выборки, иначе обновление зависнет.
	МассивИсключаемыхДокументов = Новый Массив;
	
	// Транзакции применяются для ускорения процееса записи.
	КоличествоОбъектовВТранзакции = 1000;
	КоличествоЗаписанныхВТранзакции = 0;

	Пока Истина Цикл

		РезультатЗапроса = НоваяПорцияДокументовСПустымКоэффициентом(МассивИсключаемыхДокументов);
	
		Если РезультатЗапроса.Пустой() Тогда
			Прервать;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
		
			Если НЕ ТранзакцияАктивна() Тогда
				НачатьТранзакцию();
			КонецЕсли;
			
			ОбъектДокумент = Выборка.Ссылка.ПолучитьОбъект();
			
			// Заполнить реквизиты "Коэффициент", если они равны нулю.
			ЧастиИмениРеквизитаКоэффициент = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Выборка.ПолноеИмяРеквизитаКоэффициент, ".");
			Если ЧастиИмениРеквизитаКоэффициент.Количество() = 2 Тогда
				// Реквизит "Коэффициент" находится в табличной части.
				ИмяТабличнойЧасти = ЧастиИмениРеквизитаКоэффициент[0];
				ИмяРеквизитаТабличнойЧасти = ЧастиИмениРеквизитаКоэффициент[1];
				ТабличнаяЧасть = ОбъектДокумент[ИмяТабличнойЧасти];
				Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
					Если СтрокаТабличнойЧасти[ИмяРеквизитаТабличнойЧасти] = 0 Тогда
						СтрокаТабличнойЧасти[ИмяРеквизитаТабличнойЧасти] = 1;	
					КонецЕсли;
				КонецЦикла;
			Иначе
				// Реквизит "Коэффициент" это реквизит документа.
				ИмяРеквизитаДокумента = ЧастиИмениРеквизитаКоэффициент[0];
				Если ОбъектДокумент[ИмяРеквизитаДокумента] = 0 Тогда
					ОбъектДокумент[ИмяРеквизитаДокумента] = 1;	
				КонецЕсли;
			КонецЕсли;
			
			Попытка
				
				ЗаписатьДокументБезПроведения(ОбъектДокумент);		
				КоличествоЗаписанныхВТранзакции = КоличествоЗаписанныхВТранзакции + 1;
				
		    Исключение
				
				КоличествоЗаписанныхВТранзакции = 0;
		        ОтменитьТранзакцию();
		        МассивИсключаемыхДокументов.Добавить(Выборка.Ссылка);
				
				ТекстОшибки = ТекстОшибкиПриЗаписиДокумента(Выборка.Ссылка, ОписаниеОшибки());
				СообщитьПользователю(ТекстОшибки, Выборка.Ссылка, , , ИмяСобытия, УровеньЖурналаРегистрации.Ошибка);
				
				Прервать; 
				
		   	КонецПопытки;
		   	
			Если КоличествоЗаписанныхВТранзакции >= КоличествоОбъектовВТранзакции Тогда
				ЗафиксироватьТранзакцию();
				КоличествоЗаписанныхВТранзакции = 0;
			КонецЕсли;
			
		КонецЦикла

	КонецЦикла;
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();		
	КонецЕсли;

	Если МассивИсключаемыхДокументов.Количество() = 0 Тогда
		Результат.ВыполненоУспешно = Истина;
		Результат.ОписаниеЗавершения = НСтр("ru = 'Реквизит ""Коэффициент"" успешно заполнен во всех документах.'");
	Иначе
		Результат.ВыполненоУспешно = Ложь;
		Результат.ОписаниеЗавершения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось заполнить реквизит ""Коэффициент"" в документах: %1.'"), 
			МассивИсключаемыхДокументов.Количество());
	КонецЕсли
	
КонецПроцедуры

Функция НоваяПорцияДокументовСПустымКоэффициентом(Знач МассивИсключаемыхДокументов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	АвансовыйОтчетТовары.Ссылка КАК Ссылка,
	|	""Товары.Коэффициент"" КАК ПолноеИмяРеквизитаКоэффициент
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
	|ГДЕ
	|	АвансовыйОтчетТовары.Коэффициент = 0
	|	И НЕ АвансовыйОтчетТовары.Ссылка В (&МассивИсключаемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	АктОбОказанииПроизводственныхУслугУслуги.Ссылка,
	|	""Услуги.Коэффициент""
	|ИЗ
	|	Документ.АктОбОказанииПроизводственныхУслуг.Услуги КАК АктОбОказанииПроизводственныхУслугУслуги
	|ГДЕ
	|	АктОбОказанииПроизводственныхУслугУслуги.Коэффициент = 0
	|	И НЕ АктОбОказанииПроизводственныхУслугУслуги.Ссылка В (&МассивИсключаемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ВозвратТоваровОтПокупателяТовары.Ссылка,
	|	""Товары.Коэффициент""
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|ГДЕ
	|	ВозвратТоваровОтПокупателяТовары.Коэффициент = 0
	|	И НЕ ВозвратТоваровОтПокупателяТовары.Ссылка В (&МассивИсключаемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ВозвратТоваровПоставщикуТовары.Ссылка,
	|	""Товары.Коэффициент""
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Коэффициент = 0
	|	И НЕ ВозвратТоваровПоставщикуТовары.Ссылка В (&МассивИсключаемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ГТДИмпортТовары.Ссылка,
	|	""Товары.Коэффициент""
	|ИЗ
	|	Документ.ГТДИмпорт.Товары КАК ГТДИмпортТовары
	|ГДЕ
	|	ГТДИмпортТовары.Коэффициент = 0
	|	И НЕ ГТДИмпортТовары.Ссылка В (&МассивИсключаемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.Ссылка,
	|	""Товары.Коэффициент""
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов.Товары КАК ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары
	|ГДЕ
	|	ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.Коэффициент = 0
	|	И НЕ ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалоговТовары.Ссылка В (&МассивИсключаемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ИнвентаризацияТоваровНаСкладеТовары.Ссылка,
	|	""Товары.Коэффициент""
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК ИнвентаризацияТоваровНаСкладеТовары
	|ГДЕ
	|	ИнвентаризацияТоваровНаСкладеТовары.Коэффициент = 0
	|	И НЕ ИнвентаризацияТоваровНаСкладеТовары.Ссылка В (&МассивИсключаемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	КомплектацияНоменклатурыКомплектующие.Ссылка,
	|	""Комплектующие.Коэффициент""
	|ИЗ
	|	Документ.КомплектацияНоменклатуры.Комплектующие КАК КомплектацияНоменклатурыКомплектующие
	|ГДЕ
	|	КомплектацияНоменклатурыКомплектующие.Коэффициент = 0
	|	И НЕ КомплектацияНоменклатурыКомплектующие.Ссылка В (&МассивИсключаемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	КомплектацияНоменклатуры.Ссылка,
	|	""Коэффициент""
	|ИЗ
	|	Документ.КомплектацияНоменклатуры КАК КомплектацияНоменклатуры
	|ГДЕ
	|	КомплектацияНоменклатуры.Коэффициент = 0
	|	И НЕ КомплектацияНоменклатуры.Ссылка В (&МассивИсключаемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ОприходованиеТоваровТовары.Ссылка,
	|	""Товары.Коэффициент""
	|ИЗ
	|	Документ.ОприходованиеТоваров.Товары КАК ОприходованиеТоваровТовары
	|ГДЕ
	|	ОприходованиеТоваровТовары.Коэффициент = 0
	|	И НЕ ОприходованиеТоваровТовары.Ссылка В (&МассивИсключаемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ОтчетПроизводстваЗаСменуПродукция.Ссылка,
	|	""Продукция.Коэффициент""
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ОтчетПроизводстваЗаСменуПродукция
	|ГДЕ
	|	ОтчетПроизводстваЗаСменуПродукция.Коэффициент = 0
	|	И НЕ ОтчетПроизводстваЗаСменуПродукция.Ссылка В (&МассивИсключаемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ОтчетПроизводстваЗаСменуВозвратныеОтходы.Ссылка,
	|	""ВозвратныеОтходы.Коэффициент""
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену.ВозвратныеОтходы КАК ОтчетПроизводстваЗаСменуВозвратныеОтходы
	|ГДЕ
	|	ОтчетПроизводстваЗаСменуВозвратныеОтходы.Коэффициент = 0
	|	И НЕ ОтчетПроизводстваЗаСменуВозвратныеОтходы.Ссылка В (&МассивИсключаемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ПеремещениеТоваровТовары.Ссылка,
	|	""Товары.Коэффициент""
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|ГДЕ
	|	ПеремещениеТоваровТовары.Коэффициент = 0
	|	И НЕ ПеремещениеТоваровТовары.Ссылка В (&МассивИсключаемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ПоступлениеДопРасходовТовары.Ссылка,
	|	""Товары.Коэффициент""
	|ИЗ
	|	Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеДопРасходовТовары
	|ГДЕ
	|	ПоступлениеДопРасходовТовары.Коэффициент = 0
	|	И НЕ ПоступлениеДопРасходовТовары.Ссылка В (&МассивИсключаемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ПоступлениеТоваровУслугТовары.Ссылка,
	|	""Товары.Коэффициент""
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Коэффициент = 0
	|	И НЕ ПоступлениеТоваровУслугТовары.Ссылка В (&МассивИсключаемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	РеализацияТоваровУслугТовары.Ссылка,
	|	""Товары.Коэффициент""
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Коэффициент = 0
	|	И НЕ РеализацияТоваровУслугТовары.Ссылка В (&МассивИсключаемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДСТовары.Ссылка,
	|	""Товары.Коэффициент""
	|ИЗ
	|	Документ.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС.Товары КАК РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДСТовары
	|ГДЕ
	|	РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДСТовары.Коэффициент = 0
	|	И НЕ РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДСТовары.Ссылка В (&МассивИсключаемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДСТовары.Ссылка,
	|	""Товары.Коэффициент""
	|ИЗ
	|	Документ.РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС.Товары КАК РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДСТовары
	|ГДЕ
	|	РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДСТовары.Коэффициент = 0
	|	И НЕ РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДСТовары.Ссылка В (&МассивИсключаемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	РеструктуризацияОСТовары.Ссылка,
	|	""Товары.Коэффициент""
	|ИЗ
	|	Документ.РеструктуризацияОС.Товары КАК РеструктуризацияОСТовары
	|ГДЕ
	|	РеструктуризацияОСТовары.Коэффициент = 0
	|	И НЕ РеструктуризацияОСТовары.Ссылка В (&МассивИсключаемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	СписаниеТоваровТовары.Ссылка,
	|	""Товары.Коэффициент""
	|ИЗ
	|	Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
	|ГДЕ
	|	СписаниеТоваровТовары.Коэффициент = 0
	|	И НЕ СписаниеТоваровТовары.Ссылка В (&МассивИсключаемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	СчетНаОплатуПокупателюТовары.Ссылка,
	|	""Товары.Коэффициент""
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
	|ГДЕ
	|	СчетНаОплатуПокупателюТовары.Коэффициент = 0
	|	И НЕ СчетНаОплатуПокупателюТовары.Ссылка В (&МассивИсключаемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	СчетФактураВыданныйТовары.Ссылка,
	|	""Товары.Коэффициент""
	|ИЗ
	|	Документ.СчетФактураВыданный.Товары КАК СчетФактураВыданныйТовары
	|ГДЕ
	|	СчетФактураВыданныйТовары.Коэффициент = 0
	|	И НЕ СчетФактураВыданныйТовары.Ссылка В (&МассивИсключаемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	СчетФактураПолученныйТовары.Ссылка,
	|	""Товары.Коэффициент""
	|ИЗ
	|	Документ.СчетФактураПолученный.Товары КАК СчетФактураПолученныйТовары
	|ГДЕ
	|	СчетФактураПолученныйТовары.Коэффициент = 0
	|	И НЕ СчетФактураПолученныйТовары.Ссылка В (&МассивИсключаемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	ТребованиеНакладнаяМатериалы.Ссылка,
	|	""Материалы.Коэффициент""
	|ИЗ
	|	Документ.ТребованиеНакладная.Материалы КАК ТребованиеНакладнаяМатериалы
	|ГДЕ
	|	ТребованиеНакладнаяМатериалы.Коэффициент = 0
	|	И НЕ ТребованиеНакладнаяМатериалы.Ссылка В (&МассивИсключаемыхДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка УБЫВ";
	
	Запрос.УстановитьПараметр("МассивИсключаемыхДокументов", МассивИсключаемыхДокументов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции



// Обновление счетов-фактур при появлении ЭСФ

Процедура ОбновитьДокументыСчетФактураПолученный(Параметры, ИмяСобытия, Результат) Экспорт
	
	КоличествоНеОбновленныхСчетовФактур = 0;	
	МоментВремени = Новый МоментВремени('3999-12-31');
	
	Пока Истина Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	СчетФактураПолученный.Ссылка,
		|	СчетФактураПолученныйДокументыОснования.ДокументОснование.Дата КАК ДатаДокументаОснования
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
		|		ПО СчетФактураПолученный.Ссылка = СчетФактураПолученныйДокументыОснования.Ссылка
		|			И (СчетФактураПолученныйДокументыОснования.НомерСтроки = 1)
		|ГДЕ
		|	СчетФактураПолученный.МоментВремени < &МоментВремени
		|	И СчетФактураПолученный.СпособПолучения = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаДокументами.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СчетФактураПолученный.МоментВремени УБЫВ";
		
		Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Прервать;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ТекущийСчетФактураПолностьюОбновлен = Истина;
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			МоментВремени = Объект.МоментВремени();
			
			// Заполнить реквизиты СпособПолучения, ВидСчетаФактуры, ДатаСовершенияОборотаПоРеализации.
			ЗаполнитьРеквизитыСчетаФактуры(Объект, Выборка.ДатаДокументаОснования);
			
			// Заполнить реквизиты ОборотПоРеализации в табличных частях счета-фактуры.
			ЗаполнитьОборотПоРеализацииСчетаФактуры(Объект);
			
			// Попытка записи документа с проведением или без проведения.
			Попытка
				
				Если НЕ Объект.Проведен Тогда
					
					ЗаписатьДокументБезПроведения(Объект);
					
				ИначеЕсли Объект.Проведен И Объект.РучнаяКорректировка Тогда
					
					ЗаписатьДокументБезПроведения(Объект);
					
					// Реквизиты счета-фактуры будут обновлены, а движения не будут обновлены.
					ТекущийСчетФактураПолностьюОбновлен = Ложь;
					
					ТекстСообщения = ТекстОшибкиРучнаяКорректировкаДокумента(Выборка.Ссылка); 
					СообщитьПользователю(ТекстСообщения, Выборка.Ссылка, , , ИмяСобытия);
					
				ИначеЕсли Объект.Проведен Тогда
					
					ПровестиДокумент(Объект);
					
				КонецЕсли;
				
			Исключение
				
				// Не удалось обновить счет-фактуру.
				ТекущийСчетФактураПолностьюОбновлен = Ложь;
				
				ТекстОшибки = ТекстОшибкиПриЗаписиДокумента(Выборка.Ссылка, ОписаниеОшибки());
				СообщитьПользователю(ТекстОшибки, Выборка.Ссылка, , , ИмяСобытия, УровеньЖурналаРегистрации.Ошибка);
				
			КонецПопытки;
			
			Если НЕ ТекущийСчетФактураПолностьюОбновлен Тогда
				КоличествоНеОбновленныхСчетовФактур = КоличествоНеОбновленныхСчетовФактур + 1;	
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если КоличествоНеОбновленныхСчетовФактур = 0 Тогда
		Результат.ВыполненоУспешно = Истина;
		Результат.ОписаниеЗавершения = НСтр("ru = 'Все счета-фактуры успешно обновлены.'");
	Иначе
		Результат.ВыполненоУспешно = Ложь;
		Результат.ОписаниеЗавершения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось обновить счетов-фактур: %1.'"), 
			КоличествоНеОбновленныхСчетовФактур);
	КонецЕсли
		
КонецПроцедуры

Процедура ОбновитьДокументыСчетФактураВыданный(Параметры, ИмяСобытия, Результат) Экспорт
	
	КоличествоНеОбновленныхСчетовФактур = 0;	
	МоментВремени = Новый МоментВремени('3999-12-31');	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Пока Истина Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	СчетФактураВыданный.Ссылка,
		|	СчетФактураВыданныйДокументыОснования.ДокументОснование.Дата КАК ДатаДокументаОснования
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
		|		ПО СчетФактураВыданный.Ссылка = СчетФактураВыданныйДокументыОснования.Ссылка
		|			И (СчетФактураВыданныйДокументыОснования.НомерСтроки = 1)
		|ГДЕ
		|	СчетФактураВыданный.МоментВремени < &МоментВремени
		|	И СчетФактураВыданный.СпособВыставления = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаДокументами.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СчетФактураВыданный.МоментВремени УБЫВ";
		
		Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Прервать;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ТекущийСчетФактураПолностьюОбновлен = Истина;
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			МоментВремени = Объект.МоментВремени();
			
			Если Объект.Дата >= Дата(2014, 7, 1) И Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
				
				// Заполнить реквизиты СпособПолучения, ВидСчетаФактуры, ДатаСовершенияОборотаПоРеализации.
				ЗаполнитьРеквизитыСчетаФактуры(Объект, Выборка.ДатаДокументаОснования);
				
				// Заполнить реквизиты ОборотПоРеализации в табличных частях счета-фактуры.
				ЗаполнитьОборотПоРеализацииСчетаФактуры(Объект);
				
				// Попытка записи документа с проведением или без проведения.
				Попытка
					
					Если НЕ Объект.Проведен Тогда
						
						ЗаписатьДокументБезПроведения(Объект);
												
					ИначеЕсли Объект.Проведен И Объект.РучнаяКорректировка Тогда
						
						ЗаписатьДокументБезПроведения(Объект);
												
						// Реквизиты счета-фактуры будут обновлены, а движения не будут обновлены.
						ТекущийСчетФактураПолностьюОбновлен = Ложь;
						
						ТекстСообщения = ТекстОшибкиРучнаяКорректировкаДокумента(Выборка.Ссылка); 
						СообщитьПользователю(ТекстСообщения, Выборка.Ссылка, , , ИмяСобытия);
						
					ИначеЕсли Объект.Проведен Тогда
						
						НачатьТранзакцию();
						
						КоллекцияСтарыхДвижений = ДвиженияДокументаСчетФактураВыданный(Выборка.Ссылка);
						ПровестиДокумент(Объект);						
						КоллекцияНовыхДвижений = ДвиженияДокументаСчетФактураВыданный(Выборка.Ссылка);
						
						РазличияДопустимы = РазличияДвиженийСчетаФактурыВыданногоДопустимы(КоллекцияСтарыхДвижений, КоллекцияНовыхДвижений);
						
						Если РазличияДопустимы Тогда 
							
							ЗафиксироватьТранзакцию();
							
						Иначе
							
							ОтменитьТранзакцию();
							
							// Реквизиты счета-фактуры будут обновлены, а движения не будут обновлены.
							ТекущийСчетФактураПолностьюОбновлен = Ложь;
							
							Объект = Выборка.Ссылка.ПолучитьОбъект();
							ЗаполнитьРеквизитыСчетаФактуры(Объект, Выборка.ДатаДокументаОснования);
							ЗаписатьДокументБезПроведения(Объект);
							
							ТекстСообщения = НСтр(
								"ru = 'В документе ""%1"" не удалось пересчитать оборот по реализации из тенге в валюту,
								|так как в результате автоматического пересчета произошли бы изменения движений по регистру накопления ""Сведения о счетах-фактурах выданных"".
								|Пожалуйста, самостоятельно выполните пересчет оборота по реализации из тенге в валюту в данном документе.'");
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.Ссылка);
							СообщитьПользователю(ТекстСообщения, Выборка.Ссылка, , , ИмяСобытия);
							
						КонецЕсли;
						
					КонецЕсли;
					
				Исключение
					
					// Не удалось обновить счет-фактуру.
					ТекущийСчетФактураПолностьюОбновлен = Ложь;
					
					ТекстОшибки = ТекстОшибкиПриЗаписиДокумента(Выборка.Ссылка, ОписаниеОшибки());
					СообщитьПользователю(ТекстОшибки, Выборка.Ссылка, , , ИмяСобытия, УровеньЖурналаРегистрации.Ошибка);
					
				КонецПопытки;
				
			Иначе
				
				// Заполнить реквизиты СпособПолучения, ВидСчетаФактуры, ДатаСовершенияОборотаПоРеализации.
				ЗаполнитьРеквизитыСчетаФактуры(Объект, Выборка.ДатаДокументаОснования);
				
				// Попытка записи документа с проведением или без проведения.
				Попытка
					
					Если НЕ Объект.Проведен Тогда
						
						ЗаписатьДокументБезПроведения(Объект);
						
					ИначеЕсли Объект.Проведен И Объект.РучнаяКорректировка Тогда
						
						ЗаписатьДокументБезПроведения(Объект);
												
						// Реквизиты счета-фактуры будут обновлены, а движения не будут обновлены.
						ТекущийСчетФактураПолностьюОбновлен = Ложь;
						
						ТекстСообщения = ТекстОшибкиРучнаяКорректировкаДокумента(Выборка.Ссылка); 
						СообщитьПользователю(ТекстСообщения, Выборка.Ссылка, , , ИмяСобытия);
						
					ИначеЕсли Объект.Проведен Тогда
						
						ПровестиДокумент(Объект);
						
					КонецЕсли;
					
				Исключение
					
					// Не удалось обновить счет-фактуру.
					ТекущийСчетФактураПолностьюОбновлен = Ложь;
					
					ТекстОшибки = ТекстОшибкиПриЗаписиДокумента(Выборка.Ссылка, ОписаниеОшибки());
					СообщитьПользователю(ТекстОшибки, Выборка.Ссылка, , , ИмяСобытия, УровеньЖурналаРегистрации.Ошибка);
					
				КонецПопытки;
				
			КонецЕсли;
			
			Если НЕ ТекущийСчетФактураПолностьюОбновлен Тогда
				КоличествоНеОбновленныхСчетовФактур = КоличествоНеОбновленныхСчетовФактур + 1;	
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если КоличествоНеОбновленныхСчетовФактур = 0 Тогда
		Результат.ВыполненоУспешно = Истина;
		Результат.ОписаниеЗавершения = НСтр("ru = 'Все счета-фактуры успешно обновлены.'");
	Иначе
		Результат.ВыполненоУспешно = Ложь;
		Результат.ОписаниеЗавершения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось обновить счетов-фактур: %1.'"), 
			КоличествоНеОбновленныхСчетовФактур);
	КонецЕсли
	
КонецПроцедуры

// Заполняет реквизиты ВидСчетаФактуры, ДатаСовершенияОборотаПоРеализации, СпособВыставления или СпособПолучения.
//
// Параметры:
//  Объект - ДокументОбъект.СчетФактураВыданный - Заполняемый счет-фактура.
//  ДатаДокументаОснования - Дата - Используется для заполнения ДатаСовершенияОборотаПоРеализации.
//
Процедура ЗаполнитьРеквизитыСчетаФактуры(Объект, Знач ДатаДокументаОснования)
	
	// Заполнить реквизит СпособВыставления или СпособПолучения.
	ИмяРеквизита = ?(ТипЗнч(Объект) = Тип("ДокументОбъект.СчетФактураВыданный"), "СпособВыставления", "СпособПолучения");
	Если НЕ ЗначениеЗаполнено(Объект[ИмяРеквизита]) Тогда
		Объект[ИмяРеквизита] = Перечисления.СпособыОбменаДокументами.Бумажно;
	КонецЕсли;
	
	// Заполнить реквизит ВидСчетаФактуры.
	Если НЕ ЗначениеЗаполнено(Объект.ВидСчетаФактуры) Тогда
		Если Объект.УдалитьДополнительная Тогда
			Объект.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Дополнительный;
		Иначе
			Объект.ВидСчетаФактуры = Перечисления.ВидыСчетовФактур.Обычный;
		КонецЕсли;
	КонецЕсли;
	
	// Заполнить реквизит ДатаСовершенияОборотаПоРеализации.
	Если НЕ ЗначениеЗаполнено(Объект.ДатаСовершенияОборотаПоРеализации) Тогда
		Если ЗначениеЗаполнено(ДатаДокументаОснования) Тогда
			Объект.ДатаСовершенияОборотаПоРеализации = ДатаДокументаОснования;
		Иначе
			Объект.ДатаСовершенияОборотаПоРеализации = Объект.Дата;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьОборотПоРеализацииСчетаФактуры(ОбъектСчетФактура)
	
	МетаданныеСчетФактура = ОбъектСчетФактура.Метаданные();
	
	// Создать структуру, содержащую данные счета-фактуры.
	СтруктураСчетФактура = Новый Структура;
	Для Каждого Реквизит Из МетаданныеСчетФактура.Реквизиты Цикл
		СтруктураСчетФактура.Вставить(Реквизит.Имя, ОбъектСчетФактура[Реквизит.Имя]);
	КонецЦикла;	
	Для Каждого СтандартныйРеквизит Из МетаданныеСчетФактура.СтандартныеРеквизиты Цикл
		СтруктураСчетФактура.Вставить(СтандартныйРеквизит.Имя, ОбъектСчетФактура[СтандартныйРеквизит.Имя]);	
	КонецЦикла;	
	
	МассивИменТабличныхЧастей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Товары,Услуги,ОС,НМА", ",");
	
	Для Каждого ИмяТабличнойЧасти Из МассивИменТабличныхЧастей Цикл
		
		МетаданныеТабличнойЧасти = МетаданныеСчетФактура.ТабличныеЧасти[ИмяТабличнойЧасти];
		
		Для Каждого СтрокаТабличнойЧасти Из ОбъектСчетФактура[ИмяТабличнойЧасти] Цикл
			
			// Создать структуру, содержащую данные строки табличной части. 
			СтруктураСтрокаТабличнойЧасти = Новый Структура;
			Для Каждого Реквизит Из МетаданныеТабличнойЧасти.Реквизиты Цикл
				СтруктураСтрокаТабличнойЧасти.Вставить(Реквизит.Имя, СтрокаТабличнойЧасти[Реквизит.Имя]);
			КонецЦикла;	
			Для Каждого СтандартныйРеквизит Из МетаданныеТабличнойЧасти.СтандартныеРеквизиты Цикл
				СтруктураСтрокаТабличнойЧасти.Вставить(СтандартныйРеквизит.Имя, СтрокаТабличнойЧасти[СтандартныйРеквизит.Имя]);	
			КонецЦикла;
			
			УчетНДСиАкцизаКлиентСервер.РассчитатьОборотПоРеализацииТабЧасти(СтруктураСтрокаТабличнойЧасти, СтруктураСчетФактура);
			СтрокаТабличнойЧасти.ОборотПоРеализации = СтруктураСтрокаТабличнойЧасти.ОборотПоРеализации;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры



// Обновление реквизита ОборотПоРеализации в счетах-фактурах выданных.

// Процедура пересчитывает реквизит "Оборот по реализации" из тенге в валюту, 
// в валютных счетах-фактурах, выписанных после 01.07.2014.
//
Процедура ПересчитатьОборотПоРеализацииВСчетахФактурахВыданных(Параметры, ИмяСобытия, Результат) Экспорт
	      
	// Счетчик, для определения успешности выполнения обработки.
	НеУдалосьОбновитьСчетовФактур = 0;	
	
	МоментВремени = Новый МоментВремени('3999-12-31');	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

	Пока Истина Цикл
		
		// Выбрать все валютные счета-фактуры выданные начиная с 01.07.2014 г.
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	СчетФактураВыданный.Ссылка
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.МоментВремени < &МоментВремени
		|	И СчетФактураВыданный.Дата >= ДАТАВРЕМЯ(2014, 7, 1)
		|	И СчетФактураВыданный.ВалютаДокумента <> &ВалютаРегламентированногоУчета
		|
		|УПОРЯДОЧИТЬ ПО
		|	СчетФактураВыданный.МоментВремени УБЫВ";	
		
		Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);			
		Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
		РезультатЗапроса = Запрос.Выполнить();		
		
		Если РезультатЗапроса.Пустой() Тогда
			Прервать;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ОбъектСчетФактура = Выборка.Ссылка.ПолучитьОбъект();
			МоментВремени = ОбъектСчетФактура.МоментВремени();

			Если ОбъектСчетФактура.РучнаяКорректировка Тогда
				
				НеУдалосьОбновитьСчетовФактур = НеУдалосьОбновитьСчетовФактур + 1;
				
				ТекстСообщения = НСтр(
					"ru = 'Движения документа ""%1"" скорректированы вручную.
					|Пожалуйста, самостоятельно выполните пересчет оборота по реализации из тенге в валюту в данном документе.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.Ссылка);
				СообщитьПользователю(ТекстСообщения, Выборка.Ссылка, , , ИмяСобытия); 
				
				Продолжить;
				
			КонецЕсли;
			
			НачатьТранзакцию();
			
			// Если счет-фактура проведен, то получить старые записи регистра СведенияСчетовФактурВыданных.
			Если ОбъектСчетФактура.Проведен Тогда
				КоллекцияСтарыхДвижений = ДвиженияДокументаСчетФактураВыданный(Выборка.Ссылка);
			КонецЕсли;
			
			ЗаполнитьОборотПоРеализацииСчетаФактуры(ОбъектСчетФактура);
			
			// Если счет-фактура проведен, то записать с перепроведением, иначе записать без проведения.
			Попытка
				
				Если ОбъектСчетФактура.Проведен Тогда
					ПровестиДокумент(ОбъектСчетФактура);
				Иначе
					ЗаписатьДокументБезПроведения(ОбъектСчетФактура);
				КонецЕсли;
				
			Исключение
				
				ОтменитьТранзакцию();
				НеУдалосьОбновитьСчетовФактур = НеУдалосьОбновитьСчетовФактур + 1;
				ТекстОшибки = ТекстОшибкиПриЗаписиДокумента(Выборка.Ссылка, ОписаниеОшибки());
				СообщитьПользователю(ТекстОшибки, Выборка.Ссылка, , , ИмяСобытия, УровеньЖурналаРегистрации.Ошибка); 
				Прервать; 
				
			КонецПопытки;		
			
			// Проверить отсутствие или допустимость изменений в регистре СведенияСчетовФактурВыданных.
			// Если изменения отсутствуют или допустимы, то зафиксировать транзакцию, иначе отменить.
			Если ОбъектСчетФактура.Проведен Тогда
				
				КоллекцияНовыхДвижений = ДвиженияДокументаСчетФактураВыданный(Выборка.Ссылка);
				РазличияДопустимы = РазличияДвиженийСчетаФактурыВыданногоДопустимы(КоллекцияСтарыхДвижений, КоллекцияНовыхДвижений);
				
				Если РазличияДопустимы Тогда
					
					ЗафиксироватьТранзакцию();
					
				Иначе
					
					ОтменитьТранзакцию();
					НеУдалосьОбновитьСчетовФактур = НеУдалосьОбновитьСчетовФактур + 1;
					
					ТекстСообщения = НСтр(
						"ru = 'В документе ""%1"" не удалось пересчитать оборот по реализации из тенге в валюту,
						|так как в результате автоматического пересчета произошли бы изменения движений по регистру накопления ""Сведения о счетах-фактурах выданных"". 
						|Пожалуйста, самостоятельно выполните пересчет оборота по реализации из тенге в валюту в данном документе.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.Ссылка);
					СообщитьПользователю(ТекстСообщения, Выборка.Ссылка, , , ИмяСобытия);
					
				КонецЕсли;
				
			Иначе
				
				// Документ не проведен, поэтому нет движений для сравнения. Зафиксировать транзакцию.
				ЗафиксироватьТранзакцию();
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если НеУдалосьОбновитьСчетовФактур = 0 Тогда
		Результат.ВыполненоУспешно = Истина;
		Результат.ОписаниеЗавершения = НСтр("ru = 'Обработка выполнена успешно.'");
	Иначе
		Результат.ВыполненоУспешно = Ложь;
		Результат.ОписаниеЗавершения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось обновить счетов-фактур: %1.'"), 
			НеУдалосьОбновитьСчетовФактур);
	КонецЕсли
		
КонецПроцедуры

Функция ДвиженияДокументаСчетФактураВыданный(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияСчетовФактурВыданных.Период,
	|	СведенияСчетовФактурВыданных.Регистратор,
	|	СведенияСчетовФактурВыданных.НомерСтроки КАК НомерСтроки,
	|	СведенияСчетовФактурВыданных.Активность,
	|	СведенияСчетовФактурВыданных.Налогоплательщик,
	|	СведенияСчетовФактурВыданных.Организация,
	|	СведенияСчетовФактурВыданных.СтруктурнаяЕдиница,
	|	СведенияСчетовФактурВыданных.СтавкаНДС,
	|	СведенияСчетовФактурВыданных.Контрагент,
	|	СведенияСчетовФактурВыданных.ТМЗ,
	|	СведенияСчетовФактурВыданных.Покупатель,
	|	СведенияСчетовФактурВыданных.СтавкаАкциза,
	|	СведенияСчетовФактурВыданных.СчетФактура,
	|	СведенияСчетовФактурВыданных.СуммаВВалютеДоговора,
	|	СведенияСчетовФактурВыданных.СуммаНДСВВалютеДоговора,
	|	СведенияСчетовФактурВыданных.СуммаАкцизаВВалютеДоговора,
	|	СведенияСчетовФактурВыданных.СуммаРегл,
	|	СведенияСчетовФактурВыданных.СуммаНДСРегл,
	|	СведенияСчетовФактурВыданных.ОборотПоРеализацииРегл,
	|	СведенияСчетовФактурВыданных.СуммаАкцизаРегл,
	|	СведенияСчетовФактурВыданных.ОборотПоРеализацииВВалютеДоговора,
	|	СведенияСчетовФактурВыданных.СтранаНазначения,
	|	СведенияСчетовФактурВыданных.УчастникСовместнойДеятельности
	|ИЗ
	|	РегистрНакопления.СведенияСчетовФактурВыданных КАК СведенияСчетовФактурВыданных
	|ГДЕ
	|	СведенияСчетовФактурВыданных.Регистратор = &Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Регистратор", Ссылка);	
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗначений;
	
КонецФункции

Функция РазличияДвиженийСчетаФактурыВыданногоДопустимы(Знач КоллекцияСтарыхДвижений, Знач КоллекцияНовыхДвижений)
	
	РазличияДопустимы = Ложь;
	
	Если КоллекцияСтарыхДвижений.Количество() = КоллекцияНовыхДвижений.Количество() Тогда
		
		РазличияДопустимы = Истина;
		
		// Перебрать все строки движений.
		Для Индекс = 0 По КоллекцияСтарыхДвижений.Количество() - 1 Цикл
			
			СтароеДвижение = КоллекцияСтарыхДвижений[Индекс];
			НовоеДвижение = КоллекцияНовыхДвижений[Индекс];
			
			// Проверить совпадение данных, учитывая непроверяемые данные.
			Для Каждого Колонка Из КоллекцияСтарыхДвижений.Колонки Цикл
				
				Если Колонка.Имя = "Период" 
					ИЛИ Колонка.Имя = "СчетФактура" 
					ИЛИ Колонка.Имя = "ОборотПоРеализацииРегл" 
					ИЛИ Колонка.Имя = "ОборотПоРеализацииВВалютеДоговора" Тогда	
					
					// ОборотПоРеализацииРегл и ОборотПоРеализацииВВалютеДоговора проверяются ниже.
					// Период не проверяется, т.к. в регламентированной отчетности ничего не изменится.
					// СчетФактура не проверяется, т.к. он мог измениться с пустого на заполненный.
					
					Продолжить;
					
				КонецЕсли;	
				
				Если СтароеДвижение[Колонка.Имя] = НовоеДвижение[Колонка.Имя] Тогда
					// Значения в колонках совпадают.
					РазличияДопустимы = Истина;
				Иначе
					// Значения в колонках различаются.
					РазличияДопустимы = Ложь;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ РазличияДопустимы Тогда
				Прервать;
			КонецЕсли;
			
			// Проверить ОборотПоРеализацииРегл и ОборотПоРеализацииВВалютеДоговора.
			Если СтароеДвижение.ОборотПоРеализацииВВалютеДоговора = НовоеДвижение.ОборотПоРеализацииВВалютеДоговора
				И СтароеДвижение.ОборотПоРеализацииРегл = НовоеДвижение.ОборотПоРеализацииРегл Тогда
				
				// Данная ситуация будет при повторном запуске обработки обновления.
				РазличияДопустимы = Истина;
				
			ИначеЕсли СтароеДвижение.ОборотПоРеализацииВВалютеДоговора = 0 
				И СтароеДвижение.ОборотПоРеализацииРегл = НовоеДвижение.ОборотПоРеализацииРегл Тогда
				
				// Данная ситуация будет при обновлении с 2.0.16, т.к. в 2.0.16 не было ресурса ОборотПоРеализацииВВалютеДоговора.
				// Старый оборот по реализации в валюте регл. учета совпадает с новым, поэтому ситуация корректна.
				РазличияДопустимы = Истина;
				
			ИначеЕсли СтароеДвижение.ОборотПоРеализацииВВалютеДоговора = НовоеДвижение.ОборотПоРеализацииРегл Тогда
				
				// Данная ситуация будет при обновлении с тестовых версий 2.0.17 и 3.0.1.
				РазличияДопустимы = Истина;	
				
			Иначе
				
				// Во всех остальных ситуациях считается, что различия не допустимы.
				РазличияДопустимы = Ложь;	
				
			КонецЕсли;
			
			Если НЕ РазличияДопустимы Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		РазличияДопустимы = Ложь;
		
	КонецЕсли;
	
	Возврат РазличияДопустимы;
	
КонецФункции



// Обновление реквизита ОборотПоРеализации в счетах-фактурах полученных.

// Пересчитывает оборот по реализации во всех валютных счетах-фактурах полученных.
// Если счет-фактура до 01.07.2014, то оборот по реализации изменяется на тенговый.
// Если счет-фактура начиная с 01.07.2014, то оборот по реализации изменяется на валютный.
//
Процедура ПересчитатьОборотПоРеализацииВСчетахФактурахПолученных(Параметры, ИмяСобытия, Результат) Экспорт
	
	// Счетчик, для определения успешности выполнения обработки.
	НеУдалосьОбновитьСчетовФактур = 0;	
	
	МоментВремени = Новый МоментВремени('3999-12-31');	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

	Пока Истина Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	СчетФактураПолученный.Ссылка
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|ГДЕ
		|	СчетФактураПолученный.МоментВремени < &МоментВремени
		|	И СчетФактураПолученный.ВалютаДокумента <> &ВалютаРегламентированногоУчета
		|
		|УПОРЯДОЧИТЬ ПО
		|	СчетФактураПолученный.МоментВремени УБЫВ";	
		
		Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);			
		Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
		РезультатЗапроса = Запрос.Выполнить();		
		
		Если РезультатЗапроса.Пустой() Тогда
			Прервать;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ОбъектСчетФактура = Выборка.Ссылка.ПолучитьОбъект();
			МоментВремени = ОбъектСчетФактура.МоментВремени();

			Если ОбъектСчетФактура.РучнаяКорректировка Тогда
				
				НеУдалосьОбновитьСчетовФактур = НеУдалосьОбновитьСчетовФактур + 1;
				
				ТекстСообщения = НСтр(
					"ru = 'Движения документа ""%1"" скорректированы вручную.
					|Пожалуйста, самостоятельно выполните пересчет оборота по реализации в данном документе.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.Ссылка);
				СообщитьПользователю(ТекстСообщения, Выборка.Ссылка, , , ИмяСобытия); 
				
				Продолжить;
				
			КонецЕсли;
			
			ЗаполнитьОборотПоРеализацииСчетаФактуры(ОбъектСчетФактура);
			
			// Если счет-фактура проведен, то записать с перепроведением, иначе записать без проведения.
			Попытка
				
				Если ОбъектСчетФактура.Проведен Тогда
					ПровестиДокумент(ОбъектСчетФактура);
				Иначе
					ЗаписатьДокументБезПроведения(ОбъектСчетФактура);
				КонецЕсли;
				
			Исключение
				
				НеУдалосьОбновитьСчетовФактур = НеУдалосьОбновитьСчетовФактур + 1;
				ТекстОшибки = ТекстОшибкиПриЗаписиДокумента(Выборка.Ссылка, ОписаниеОшибки());
				СообщитьПользователю(ТекстОшибки, Выборка.Ссылка, , , ИмяСобытия, УровеньЖурналаРегистрации.Ошибка); 
				Прервать; 
				
			КонецПопытки;		
						
		КонецЦикла;
		
	КонецЦикла;
	
	Если НеУдалосьОбновитьСчетовФактур = 0 Тогда
		Результат.ВыполненоУспешно = Истина;
		Результат.ОписаниеЗавершения = НСтр("ru = 'Обработка выполнена успешно.'");
	Иначе
		Результат.ВыполненоУспешно = Ложь;
		Результат.ОписаниеЗавершения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось обновить счетов-фактур: %1.'"), 
			НеУдалосьОбновитьСчетовФактур);
	КонецЕсли
		
КонецПроцедуры



// Пересчет оборота по реализации счетов-фактур для участников СД.

Процедура ПересчитатьОборотПоРеализацииДляУчастниковСДДляСФВ(Параметры, ИмяСобытия, Результат) Экспорт
	
	ПересчитатьОборотПоРеализацииДляУчастниковСДПоТипуСчетовФактур("СчетФактураВыданный", Параметры, ИмяСобытия, Результат);
	
КонецПроцедуры

Процедура ПересчитатьОборотПоРеализацииДляУчастниковСДДляСФП(Параметры, ИмяСобытия, Результат) Экспорт
	
	ПересчитатьОборотПоРеализацииДляУчастниковСДПоТипуСчетовФактур("СчетФактураПолученный", Параметры, ИмяСобытия, Результат);
	
КонецПроцедуры

Процедура ПересчитатьОборотПоРеализацииДляУчастниковСДПоТипуСчетовФактур(ТипСчетовФактур, Параметры, ИмяСобытия, Результат)
	
	НеУдалосьОбновитьСчетовФактур = 0;
	
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		Если Параметры.Свойство("ДатаНачала") Тогда
			ПараметрДатаНачала = Параметры.ДатаНачала;	
		Иначе
			ПараметрДатаНачала = Неопределено;	
		КонецЕсли;
	Иначе
		ПараметрДатаНачала = Неопределено;	
	КонецЕсли;
	
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		Если Параметры.Свойство("ДатаКонца") Тогда
			ПараметрДатаКонца = Параметры.ДатаКонца;	
		Иначе
			ПараметрДатаКонца = Неопределено;	
		КонецЕсли;
	Иначе
		ПараметрДатаКонца = Неопределено;
	КонецЕсли;
	
	ТипСчетФактураПолученный = "СчетФактураПолученный";
	ТипСчетФактураВыданный = "СчетФактураВыданный";
		
	Если ТипСчетовФактур = ТипСчетФактураВыданный Тогда
		ИмяРегистра = "Сведения о счетах-фактурах выданных";	
	Иначе // ТипСчетовФактур = ТипСчетФактураПолученный
		ИмяРегистра = "Сведения о счетах-фактурах полученных";	
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	&УсловиеНаДатуНачала
	|	И &УсловиеНаДатуКонца
	|	И СчетФактураВыданный.Проведен = ИСТИНА
	|	И СчетФактураВыданный.ПометкаУдаления = ЛОЖЬ
	|	И СчетФактураВыданный.ДоговорКонтрагента.ДоговорСовместнойДеятельности = ИСТИНА";
		
	Если ЗначениеЗаполнено(ПараметрДатаНачала) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаДатуНачала", "СчетФактураВыданный.Дата >= &НачалоДняДатаНачала"); 
		Запрос.УстановитьПараметр("НачалоДняДатаНачала", НачалоДня(ПараметрДатаНачала));
	Иначе
		Запрос.УстановитьПараметр("УсловиеНаДатуНачала", Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрДатаКонца) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаДатуКонца", "СчетФактураВыданный.Дата <= &КонецДняДатаКонца");
		Запрос.УстановитьПараметр("КонецДняДатаКонца", КонецДня(ПараметрДатаКонца));	
	Иначе
		Запрос.УстановитьПараметр("УсловиеНаДатуКонца", Истина);
	КонецЕсли;
	
	Если ТипСчетовФактур = ТипСчетФактураПолученный Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СчетФактураВыданный", "СчетФактураПолученный");	
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
						
			Попытка
				
				ОбъектСчетФактура = Выборка.Ссылка.ПолучитьОбъект();
				ОбъектСчетФактура.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				
			Исключение
				
				НеУдалосьОбновитьСчетовФактур = НеУдалосьОбновитьСчетовФактур + 1;
				
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
								
				ТекстСообщения = НСтр(
				"ru = 'Не удалось провести документ ""[СчетФактура]"" по причине:
				|[ПодробноеПредставлениеОшибки]'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "[СчетФактура]", Выборка.Ссылка);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ПодробноеПредставлениеОшибки]", ПодробноеПредставлениеОшибки);
				СообщитьПользователю(ТекстСообщения, Выборка.Ссылка, , , ИмяСобытия); 
				
			КонецПопытки;
			
		КонецЦикла;
		
	Иначе
		
		Если ТипСчетовФактур = ТипСчетФактураВыданный Тогда
			ТекстСообщения = НСтр("ru = 'Документы ""Счет-фактура (выданный)"", выставленные в адрес участников совместной деятельности отсутствуют.'"); 
		Иначе // ТипСчетовФактур = ТипСчетФактураПолученный
			ТекстСообщения = НСтр("ru = 'Документы ""Счет-фактура (полученный)"", полученные от участников совместной деятельности отсутствуют.'"); 
		КонецЕсли;
		СообщитьПользователю(ТекстСообщения, , , , ИмяСобытия); 
		
	КонецЕсли;   
	
	Если НеУдалосьОбновитьСчетовФактур = 0 Тогда
		Результат.ВыполненоУспешно = Истина;
		Результат.ОписаниеЗавершения = НСтр("ru = 'Обработка выполнена успешно.'");
	Иначе
		Результат.ВыполненоУспешно = Ложь;
		Результат.ОписаниеЗавершения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось обновить счетов-фактур: %1.'"), 
			НеУдалосьОбновитьСчетовФактур);
	КонецЕсли
		
КонецПроцедуры


// Заполнение реквизита Представление периода

// Заполняет в документах реквизит "Представление периода".
// Подробнее смотреть в справке к форме ЗаполнениеРеквизитаКоэффициент.
//
// Параметры:
//  Параметры - Неопределено - Параметр не используется.
//
Процедура ЗаполнитьРеквизитПредставлениеПериода(Параметры, ИмяСобытия, Результат) Экспорт
	
	// Если документ не удалось записать, то он добавляется в данный массив, 
	// чтобы исключить его из следующей выборки, иначе обновление зависнет.
	МассивИсключаемыхДокументов = Новый Массив;
	
	// Транзакции применяются для ускорения процееса записи.
	КоличествоОбъектовВТранзакции = 1000;
	КоличествоЗаписанныхВТранзакции = 0;

	Пока Истина Цикл

		РезультатЗапроса = НоваяПорцияДокументовСПустымПредставлениемПериода(МассивИсключаемыхДокументов);
	
		Если РезультатЗапроса.Пустой() Тогда
			Прервать;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
		
			Если НЕ ТранзакцияАктивна() Тогда
				НачатьТранзакцию();
			КонецЕсли;
			
			ОбъектДокумент = Выборка.Ссылка.ПолучитьОбъект();
			
			ОбъектДокумент.ПредставлениеПериода = ПредставлениеПериода(ОбъектДокумент.ДатаНачала, КонецДня(ОбъектДокумент.ДатаОкончания), "Л=" + ОбщегоНазначения.КодОсновногоЯзыка() + "; ФП = Истина");
			
			Попытка
				
				ЗаписатьДокументБезПроведения(ОбъектДокумент);		
				КоличествоЗаписанныхВТранзакции = КоличествоЗаписанныхВТранзакции + 1;
				
		    Исключение
				
				КоличествоЗаписанныхВТранзакции = 0;
		        ОтменитьТранзакцию();
		        МассивИсключаемыхДокументов.Добавить(Выборка.Ссылка);
				
				ТекстОшибки = ТекстОшибкиПриЗаписиДокумента(Выборка.Ссылка, ОписаниеОшибки());
				СообщитьПользователю(ТекстОшибки, Выборка.Ссылка, , , ИмяСобытия, УровеньЖурналаРегистрации.Ошибка);
				
				Прервать; 
				
		   	КонецПопытки;
		   	
			Если КоличествоЗаписанныхВТранзакции >= КоличествоОбъектовВТранзакции Тогда
				ЗафиксироватьТранзакцию();
				КоличествоЗаписанныхВТранзакции = 0;
			КонецЕсли;
			
		КонецЦикла

	КонецЦикла;
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();		
	КонецЕсли;

	Если МассивИсключаемыхДокументов.Количество() = 0 Тогда
		Результат.ВыполненоУспешно = Истина;
		Результат.ОписаниеЗавершения = НСтр("ru = 'Реквизит ""Представление периода"" успешно заполнен в документах.'");
	Иначе
		Результат.ВыполненоУспешно = Ложь;
		Результат.ОписаниеЗавершения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось заполнить реквизит ""Представление периода"" в документах: %1.'"), 
			МассивИсключаемыхДокументов.Количество());
	КонецЕсли
	
КонецПроцедуры

Функция НоваяПорцияДокументовСПустымПредставлениемПериода(Знач МассивИсключаемыхДокументов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	РегламентированныйОтчет.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	|ГДЕ
	|	РегламентированныйОтчет.ПредставлениеПериода = """"
	|	И НЕ РегламентированныйОтчет.Ссылка В (&МассивИсключаемыхДокументов)
	|	
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка УБЫВ";
	
	Запрос.УстановитьПараметр("МассивИсключаемыхДокументов", МассивИсключаемыхДокументов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции


// Перенос корректировки в операции

Функция ПеренестиКорректировкиВОперации(Параметры, ИмяСобытия, Результат) Экспорт
	
	ОтсутствующиеРегистры = Неопределено;
	Если НЕ ОперацияСодержитВсеРегистрыКорректировки(ОтсутствующиеРегистры) Тогда
		
		ТекстСообщения = НСтр(
		"ru = 'Не удалось перенести документы ""Корректировка записей регистров"" в документы ""Операция"",
		|так как документ ""Корректировка записей регистров"" может делать движения по регистрам:
		|%1
		|а документ ""Операция"" не может делать движения по данным регистрам.
		|
		|Для переноса документов ""Корректировка записей регистров"" в документы ""Операция"" требуется,
		|чтобы документ ""Операция"" имел возможность делать движения по всем регистрам документа ""Корректировка записей регистров"".
		|
		|Данную настройку необходимо выполнять в режиме ""Конфигуратор"".'");
		
		СтрокаРегистры = "";
		Для Каждого МетаданныеРегистра ИЗ ОтсутствующиеРегистры Цикл
			СтрокаРегистры = СтрокаРегистры + "- " + МетаданныеРегистра.Синоним + "," + Символы.ПС;	
		КонецЦикла;
		СтрокаРегистры = СокрЛП(СтрокаРегистры);
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаРегистры);
		
		Результат.ВыполненоУспешно = Ложь;
		Результат.ОписаниеЗавершения = ТекстСообщения;		
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	НеУдалосьПеренестиКорректировок = 0;
		
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		Если Параметры.Свойство("ДатаНачала") Тогда
			ПараметрДатаНачала = Параметры.ДатаНачала;	
		Иначе
			ПараметрДатаНачала = Неопределено;	
		КонецЕсли;
	Иначе
		ПараметрДатаНачала = Неопределено;	
	КонецЕсли;
	
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		Если Параметры.Свойство("ДатаКонца") Тогда
			ПараметрДатаКонца = Параметры.ДатаКонца;	
		Иначе
			ПараметрДатаКонца = Неопределено;	
		КонецЕсли;
	Иначе
		ПараметрДатаКонца = Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьКорректировкаЗаписейРегистров.Ссылка
	|ИЗ
	|	Документ.УдалитьКорректировкаЗаписейРегистров КАК УдалитьКорректировкаЗаписейРегистров
	|ГДЕ
	|	НЕ УдалитьКорректировкаЗаписейРегистров.ПометкаУдаления
	|	И &УсловиеНаДатуНачала
	|	И &УсловиеНаДатуКонца
	|
	|УПОРЯДОЧИТЬ ПО
	|	УдалитьКорректировкаЗаписейРегистров.Дата";
	
	Если ЗначениеЗаполнено(ПараметрДатаНачала) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаДатуНачала", "УдалитьКорректировкаЗаписейРегистров.Дата >= &НачалоДняДатаНачала"); 
		Запрос.УстановитьПараметр("НачалоДняДатаНачала", НачалоДня(ПараметрДатаНачала));
	Иначе
		Запрос.УстановитьПараметр("УсловиеНаДатуНачала", Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрДатаКонца) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаДатуКонца", "УдалитьКорректировкаЗаписейРегистров.Дата <= &КонецДняДатаКонца");
		Запрос.УстановитьПараметр("КонецДняДатаКонца", КонецДня(ПараметрДатаКонца));	
	Иначе
		Запрос.УстановитьПараметр("УсловиеНаДатуКонца", Истина);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Попытка
				
				// Одна транзакция - это перенос одного документа Корректировка в один документ Операция.
				НачатьТранзакцию();
				
				ОбъектКорректировка = Выборка.Ссылка.ПолучитьОбъект();
				ОбъектОперация = Документы.ОперацияБух.СоздатьДокумент();
				
				// Получить все движения, которые есть в документе Корректировки.
				Для Каждого РегистрКорректировки Из ОбъектКорректировка.Движения Цикл
					РегистрКорректировки.Прочитать();
				КонецЦикла;
				
				// Перенести все движения документа корректировка в документа Операция.
				Для Каждого РегистрКорректировки Из ОбъектКорректировка.Движения Цикл
					
					ИмяРегистра = РегистрКорректировки.Метаданные().Имя;
					
					НаборДвиженийКорректировки = ОбъектКорректировка.Движения[ИмяРегистра];
					НаборДвиженийОперации = ОбъектОперация.Движения[ИмяРегистра];
					НаборДвиженийОперации.Записывать = Истина;
					
					Для Каждого ДвижениеКорректировки Из НаборДвиженийКорректировки Цикл
						ДвижениеОперации = НаборДвиженийОперации.Добавить();
						ЗаполнитьЗначенияСвойств(ДвижениеОперации, ДвижениеКорректировки);
					КонецЦикла;
					
				КонецЦикла; 
				
				// Заполнить Операцию.
				ОбъектОперация.Дата = ОбъектКорректировка.Дата;
				ОбъектОперация.УстановитьНовыйНомер();
				ОбъектОперация.Комментарий = СтрЗаменить(Строка(ОбъектКорректировка.Ссылка), НСтр("ru = '(не используется) '", ОбщегоНазначения.КодОсновногоЯзыка()), "");
				ОбъектОперация.Организация = ОбъектКорректировка.Организация;
				ОбъектОперация.СтруктурноеПодразделение = ОбъектКорректировка.СтруктурноеПодразделение;
				ОбъектОперация.Ответственный = ОбъектКорректировка.Ответственный;
				ОбъектОперация.СпособЗаполнения = "Вручную";
				ОбъектОперация.Автор = ПользователиКлиентСервер.ТекущийПользователь();
				
				МассивТабличныхЧастей = Новый Массив;
				МассивТабличныхЧастей.Добавить("ТаблицаРегистровСведений");
				МассивТабличныхЧастей.Добавить("ТаблицаРегистровНакопления");
				
				// Перенести табличные части ТаблицаРегистровНакопления и ТаблицаРегистровСведений
				// из Корректировки в Операцию.
				Для Каждого ТабличнаяЧасть Из МассивТабличныхЧастей Цикл
					
					Для Каждого СтрокаКорректировки Из ОбъектКорректировка[ТабличнаяЧасть] Цикл
						
						Если СтрДлина(СтрокаКорректировки.Имя) > 200 Тогда						
							ТекстИсключения = НСтр(
							"ru = 'Невозможно перенести ""%1"" в документ ""Операция"",
							|так как в корректировке есть движения по регистру:
							|""%2"".
							|
							|Длина имени данного регистра превышает 200 символов,
							|а в документе ""Операция"" максимальная длина именим 200 символов.'");
							ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИсключения, ОбъектКорректировка.Ссылка, СтрокаКорректировки.Имя);						
							ВызватьИсключение ТекстИсключения;
						КонецЕсли;
						
						СтрокаОперации = ОбъектОперация[ТабличнаяЧасть].Добавить();
						СтрокаОперации.Имя = СтрокаКорректировки.Имя;
						
					КонецЦикла;
					
				КонецЦикла;
				
				// Удалить все движения из документа Корректировка.
				Для Каждого РегистрКорректировки Из ОбъектКорректировка.Движения Цикл
					ИмяРегистра = РегистрКорректировки.Метаданные().Имя;
					НаборДвиженийКорректировки = ОбъектКорректировка.Движения[ИмяРегистра];
					НаборДвиженийКорректировки.Очистить();
				КонецЦикла;
				
				// Записать Корректировку с удаленными движениями.
				ОбъектКорректировка.ОбменДанными.Загрузка = Истина;
				ОбъектКорректировка.ПометкаУдаления = Истина;
				ОбъектКорректировка.Записать();
				
				// Записать заполненую Операцию.
				ОбъектОперация.ОбменДанными.Загрузка = Истина;
				ОбъектОперация.Записать();
				
				ПеренестиДополнительныеСвойстваИКатегорииКорректировки(ОбъектКорректировка.Ссылка, ОбъектОперация.Ссылка);
				
				// Одна транзакция - это перенос одного документа Корректировка в один документ Операция.
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
				
				НеУдалосьПеренестиКорректировок = НеУдалосьПеренестиКорректировок + 1;
				
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				
				ТекстСообщения = НСтр(
				"ru = 'Не удалось перенести ""%1"" в документ ""Операция"" по причине:
				|%2'");
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.Ссылка, ПодробноеПредставлениеОшибки);				
				СообщитьПользователю(ТекстСообщения, Выборка.Ссылка, , , ИмяСобытия); 
				
			КонецПопытки;
			
		КонецЦикла;
		
	Иначе
		
		ТекстСообщения = НСтр(
		"ru = 'Не обнаружены документы ""Корректировка записей регистров"" для переноса в документ ""Операция"".
		|Переносятся только документы ""Корректировка записей регистров"" не помеченные на удаление.'"); 
		СообщитьПользователю(ТекстСообщения, , , , ИмяСобытия); 
		
	КонецЕсли;   
	
	Если НеУдалосьПеренестиКорректировок = 0 Тогда
		
		Результат.ВыполненоУспешно = Истина;
		Результат.ОписаниеЗавершения = НСтр("ru = 'Обработка выполнена успешно.'");
		
	Иначе
		
		Результат.ВыполненоУспешно = Ложь;
		
		Текст = НСтр("ru = 'Не удалось перенести документов ""Корректировка записей регистров"": %1.'");
		Результат.ОписаниеЗавершения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, НеУдалосьПеренестиКорректировок);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

Функция ОперацияСодержитВсеРегистрыКорректировки(ОтсутствующиеРегистры)
	
	СодержитВсеРегистры = Истина;
	ОтсутствующиеРегистры = Новый Массив;
	
	РегистрыКорректировки = Метаданные.Документы.УдалитьКорректировкаЗаписейРегистров.Движения; 
	РегистрыОперации = Метаданные.Документы.ОперацияБух.Движения; 
	
	Для Каждого РегистрКорректировки Из РегистрыКорректировки Цикл
		
		Если НЕ РегистрыОперации.Содержит(РегистрКорректировки) Тогда
			
			СодержитВсеРегистры = Ложь;
			ОтсутствующиеРегистры.Добавить(РегистрКорректировки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СодержитВсеРегистры;
		
КонецФункции

// Если у документа Корректировка были дополнительные свойства и категории,
// то данная процедура уберет их у Корректировки и назначит их Операции.
//
// Важно! 
// 1. Данная процедура вызывается в транзакции,
// которая была открыта в ПеренестиКорректировкиВОперации().
// 2. Данная процедура вызывается в привелегированном режиме,
// который был открыт в ПеренестиКорректировкиВОперации().
//
Процедура ПеренестиДополнительныеСвойстваИКатегорииКорректировки(Корректировка, Операция)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НазначенияСвойствОбъектов.Объект,
	|	НазначенияСвойствОбъектов.Свойство
	|ИЗ
	|	РегистрСведений.УдалитьНазначенияСвойствОбъектов КАК НазначенияСвойствОбъектов
	|ГДЕ
	|	НазначенияСвойствОбъектов.Объект = &Корректировка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект,
	|	ЗначенияСвойствОбъектов.Свойство,
	|	ЗначенияСвойствОбъектов.Значение
	|ИЗ
	|	РегистрСведений.УдалитьЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Объект = &Корректировка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КатегорииОбъектов.Объект,
	|	КатегорииОбъектов.Категория
	|ИЗ
	|	РегистрСведений.УдалитьКатегорииОбъектов КАК КатегорииОбъектов
	|ГДЕ
	|	КатегорииОбъектов.Объект = &Корректировка";
	
	Запрос.УстановитьПараметр("Корректировка", Корректировка);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// НазначенияСвойствОбъектов. 
	Выборка = МассивРезультатов[0].Выбрать();	
	Пока Выборка.Следующий() Цикл
		
		// Создать запись для Операции.
		НаборЗаписей = РегистрыСведений.УдалитьНазначенияСвойствОбъектов.СоздатьНаборЗаписей();
		Запись = НаборЗаписей.Добавить();
		Запись.Объект = Операция;
		Запись.Свойство = Выборка.Свойство;
		НаборЗаписей.Записать(Ложь);
		
		// Удалить запись для Корректировки.
		НаборЗаписей = РегистрыСведений.УдалитьНазначенияСвойствОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Выборка.Объект, Истина); 
		НаборЗаписей.Отбор.Свойство.Установить(Выборка.Свойство, Истина);
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
	// ЗначенияСвойствОбъектов. 
	Выборка = МассивРезультатов[1].Выбрать();	
	Пока Выборка.Следующий() Цикл
		
		// Создать запись для Операции.
		НаборЗаписей = РегистрыСведений.УдалитьЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
		Запись = НаборЗаписей.Добавить();
		Запись.Объект = Операция;
		Запись.Свойство = Выборка.Свойство;
		Запись.Значение = Выборка.Значение;
		НаборЗаписей.Записать(Ложь);
		
		// Удалить запись для Корректировки.
		НаборЗаписей = РегистрыСведений.УдалитьЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Выборка.Объект, Истина); 
		НаборЗаписей.Отбор.Свойство.Установить(Выборка.Свойство, Истина);
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
	// КатегорииОбъектов. 
	Выборка = МассивРезультатов[2].Выбрать();	
	Пока Выборка.Следующий() Цикл
		
		// Создать запись для Операции.
		НаборЗаписей = РегистрыСведений.УдалитьКатегорииОбъектов.СоздатьНаборЗаписей();
		Запись = НаборЗаписей.Добавить();
		Запись.Объект = Операция;
		Запись.Категория = Выборка.Категория;
		НаборЗаписей.Записать(Ложь);
		
		// Удалить запись для Корректировки.
		НаборЗаписей = РегистрыСведений.УдалитьКатегорииОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Выборка.Объект, Истина); 
		НаборЗаписей.Отбор.Категория.Установить(Выборка.Категория, Истина);
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры


// Заполнение ключа связи

Процедура ЗаполнитьКлючСвязи(Параметры, ИмяСобытия, Результат) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	//////////////////////////////////////////////////////////////////////////////
	// Определить дату начала и дату конца выполнения обработки.
	
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		Если Параметры.Свойство("ДатаНачала") Тогда
			ПараметрДатаНачала = НачалоДня(Параметры.ДатаНачала);	
		Иначе
			ПараметрДатаНачала = Дата(0001, 01, 01);	
		КонецЕсли;
	Иначе
		ПараметрДатаНачала = Дата(0001, 01, 01);	
	КонецЕсли;
	
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		Если Параметры.Свойство("ДатаКонца") Тогда
			Если Параметры.ДатаКонца = Дата(0001, 01, 01) Тогда
				ПараметрДатаКонца = Дата(3999, 12, 31);
			Иначе
				ПараметрДатаКонца = КонецДня(Параметры.ДатаКонца);
			КонецЕсли;
		Иначе
			ПараметрДатаКонца = Дата(3999, 12, 31);	
		КонецЕсли;
	Иначе
		ПараметрДатаКонца = Дата(3999, 12, 31);
	КонецЕсли;	
	
	//////////////////////////////////////////////////////////////////////////////
	// Заполнить ключ связи в документах.
		
	ТаблицаДокументов = НоваяТаблицаДокументовДляЗаполненияКлючаСвязи();
	ОбщийМассивОшибочныхДокументов = Новый Массив;
	
	Для Каждого СтрокаТаблицыДокументов Из ТаблицаДокументов Цикл
				
		Запрос = Новый Запрос;
		Запрос.Текст = НовыйТекстЗапросаДляЗаполненияКлючаСвязи(СтрокаТаблицыДокументов.Документ, СтрокаТаблицыДокументов.ТабличнаяЧасть);		
		Запрос.УстановитьПараметр("НачалоПериода", ПараметрДатаНачала);
		Запрос.УстановитьПараметр("КонецПериода", ПараметрДатаКонца);		
		
		ПоследнийДокумент = Неопределено;
		МассивОшибочныхДокументов = Новый Массив;
		
		Пока Истина Цикл
			
			Если ПоследнийДокумент = Неопределено Тогда
				Запрос.УстановитьПараметр("МоментВремениПоследнегоДокумента", Новый МоментВремени(Дата(3999, 12, 31)));
			Иначе
				Запрос.УстановитьПараметр("МоментВремениПоследнегоДокумента", ПоследнийДокумент.МоментВремени());
			КонецЕсли;
			
			Запрос.УстановитьПараметр("МассивОшибочныхДокументов", МассивОшибочныхДокументов);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если РезультатЗапроса.Пустой() Тогда
				Прервать;
			КонецЕсли;
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				ПоследнийДокумент = Выборка.Ссылка;
				
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ТабличнаяЧасть = ДокументОбъект[Выборка.ИмяТабЧасти];
				
				КлючСвязи = 0;
				Для Каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
					СтрокаТабЧасти.КлючСвязи = ОбщегоНазначенияБККлиентСервер.НовыйКлючСвязиСтрокиТаблицы(ТабличнаяЧасть);
				КонецЦикла;
				
				Попытка
					 
					ЗаписатьДокументБезПроведения(ДокументОбъект);
					
				Исключение
					
					МассивОшибочныхДокументов.Добавить(Выборка.Ссылка);
					
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
					
					ТекстСообщения = НСтр(
					"ru = 'Не удалось заполнить ключ связи в документе ""%1"",
					|так как при записи документа возникла ошибка:
					|%2'");
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ТекстСообщения, Выборка.Ссылка, ПредставлениеОшибки);
						
					СообщитьПользователю(ТекстСообщения, Выборка.Ссылка, , , ИмяСобытия, УровеньЖурналаРегистрации.Ошибка);
					
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого ОшибочныйДокумент ИЗ МассивОшибочныхДокументов Цикл
			ОбщийМассивОшибочныхДокументов.Добавить(ОшибочныйДокумент);
		КонецЦикла;
		
	КонецЦикла;
	
	Если ОбщийМассивОшибочныхДокументов.Количество() = 0 Тогда
		
		Результат.ВыполненоУспешно = Истина;
		Результат.ОписаниеЗавершения = НСтр("ru = 'Обработка выполнена успешно.'");
		
	Иначе
		
		Результат.ВыполненоУспешно = Ложь;
		ОписаниеЗавершения = НСтр("ru = 'Не удалось заполнить реквизит ""Ключ связи"" в документах (%1 шт.).'");
		ОписаниеЗавершения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеЗавершения, ОбщийМассивОшибочныхДокументов.Количество());
		Результат.ОписаниеЗавершения = ОписаниеЗавершения;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция НоваяТаблицаДокументовДляЗаполненияКлючаСвязи()
	
	ТаблицаДокументов = Новый ТаблицаЗначений;
	
	ТипСтрока = Новый ОписаниеТипов("Строка");	
	ТаблицаДокументов.Колонки.Добавить("Документ", ТипСтрока);
	ТаблицаДокументов.Колонки.Добавить("ТабличнаяЧасть", ТипСтрока);
		
	МакетДокументов = Обработки.ИзменениеНастроекУчета.ПолучитьМакет("ПереходНаРегистрТоварыОрганизацийБУ");	
	
	Для НомерСтрокиМакета = 1 По МакетДокументов.ВысотаТаблицы Цикл
		СтрокаМакета = МакетДокументов.ПолучитьОбласть(НомерСтрокиМакета, , НомерСтрокиМакета);
		СтрокаТаблицы = ТаблицаДокументов.Добавить();
		СтрокаТаблицы.Документ = СтрокаМакета.Область(1, 1, 1, 1).Текст;
		СтрокаТаблицы.ТабличнаяЧасть = СтрокаМакета.Область(1, 3, 1, 3).Текст;
	КонецЦикла;
	
	Возврат ТаблицаДокументов;
	
КонецФункции

Функция НовыйТекстЗапросаДляЗаполненияКлючаСвязи(ИмяДокумента, ИмяТабличнойЧасти)
		
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
	|	Документ.Ссылка,
	|	&ИмяДокумента КАК ИмяДокумента,
	|	&ИмяТабличнойЧасти КАК ИмяТабЧасти,
	|	Документ.Ссылка.МоментВремени КАК МоментВремени
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК Документ
	|ГДЕ
	|	Документ.Ссылка.Дата >= &НачалоПериода
	|	И Документ.Ссылка.Дата <= &КонецПериода
	|	И Документ.КлючСвязи = 0
	|	И Документ.Ссылка.МоментВремени < &МоментВремениПоследнегоДокумента
	|	И НЕ Документ.Ссылка В (&МассивОшибочныхДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	МоментВремени УБЫВ";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяДокумента", """" + ИмяДокумента + """");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТабличнойЧасти", """" + ИмяТабличнойЧасти + """");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РеализацияТоваровУслуг", ИмяДокумента);	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Товары", ИмяТабличнойЧасти);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецЕсли