#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция подготавливает структуру данных, необходимую для печати ценников и этикеток.
//
// Возвращаемое значение:
//  Стрруктура - данные, необходимые для печати этикеток и ценников.
//
Функция ПодготовитьСтруктуруДанных(СтруктураНастроек, Режим) Экспорт
	
	Если СтруктураНастроек.ИсходныеДанные <> Неопределено Тогда
		ИсходныеДанные = СтруктураНастроек.ИсходныеДанные.Скопировать();
	Иначе
		ИсходныеДанные = Неопределено;
	КонецЕсли;
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Таблица",                             Неопределено);
	СтруктураРезультата.Вставить("СоответствиеПолейСКДКолонкамТаблицы", Новый Соответствие);
	
	// Схема компоновки.
	СхемаКомпоновкиДанных = Обработки.ПечатьКодовМаркировкиИСМПТК.ПолучитьМакет(СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных);
	ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос;
	
	Если Режим = "ШтрихкодыУпаковок" Тогда
		// Добавляем поля в текст запроса СКД
		// Поля для GS1_128 и GS1_DataBarExpandedStacked одинаковы
		ИдентификаторыТипыКолонок = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПовтИсп.ТипыКолонокПечатиПоТипуШтрихкода(Перечисления.ТипыШтрихкодовИСМПТК.GS1_128);
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
		ТекстРазрешенныхПолейИсходный =
		"{ВЫБРАТЬ
		|	ШтрихкодУпаковкиТовара.*,
		|	Штрихкод,
		|	Номенклатура.*,
		|	Характеристика.*,
		|	ЦифраРасширения,
		|	ПрефиксКомпанииGS1,
		|	СерийныйНомер,
		|	КонтрольноеЧисло,
		|	ИдентификаторОрганизации,
		|	ДатаМаркировки,
		|	НомерПоПорядку}";
		ТекстРазрешенныхПолейДобавляемый = "";
		
		Для Каждого ИдентификаторИТипКолонки Из ИдентификаторыТипыКолонок Цикл
			ИдентификаторПрименения = ИдентификаторИТипКолонки.Ключ;
			ИмяКолонки  = "ИдентификаторПрименения_" + ИдентификаторПрименения;
			ТипЗначения = ИдентификаторИТипКолонки.Значение;
			Если ТипЗначения.СодержитТип(Тип("Число")) Тогда
				ВыражениеПоля = "0";
			ИначеЕсли ТипЗначения.СодержитТип(Тип("Дата")) Тогда
				ВыражениеПоля = "ДАТАВРЕМЯ(1, 1, 1)";
			Иначе
				ВыражениеПоля = """""";
			КонецЕсли;
			СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[0].Источник.Запрос.Операторы[0].ВыбираемыеПоля.Добавить(ВыражениеПоля);
			ИндексПоследнейКолонки = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[0].Источник.Запрос.Колонки.Количество() - 1;
			ДобавленнаяКолонка = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[0].Источник.Запрос.Колонки[ИндексПоследнейКолонки];
			ДобавленнаяКолонка.Псевдоним   = ИмяКолонки;
			СхемаЗапроса.ПакетЗапросов[0].Операторы[0].ВыбираемыеПоля.Добавить("ИсходныеДанные." + ИмяКолонки);
			СхемаЗапроса.ПакетЗапросов[1].Операторы[0].ВыбираемыеПоля.Добавить("ИсходныеДанныеПоследнийЗапрос." + ИмяКолонки);
			
			ТекстРазрешенныхПолейДобавляемый = ТекстРазрешенныхПолейДобавляемый
			+ 	",
				|	" + ИмяКолонки;
			
			ПолеНабора = ИнтеграцияИСМПТКПереопределяемый.НовоеПолеНабора(
				СхемаКомпоновкиДанных.НаборыДанных.НаборДанных,
				ИмяКолонки,
				"ПоляGS1." + ИмяКолонки,
				ИмяКолонки,
				ТипЗначения);
		КонецЦикла;
		
		ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
		ТекстРазрешенныхПолейДобавляемый = СтрЗаменить(ТекстРазрешенныхПолейИсходный, "}", ТекстРазрешенныхПолейДобавляемый + "}");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстРазрешенныхПолейИсходный, ТекстРазрешенныхПолейДобавляемый);
		
	КонецЕсли;
	
	СхемаКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос = ТекстЗапроса;
	
	// Подготовка компоновщика макета компоновки данных.
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Компоновщик.Настройки.Отбор.Элементы.Очистить();
	
	// Отбор компоновщика настроек.
	Если СтруктураНастроек.КомпоновщикНастроек <> Неопределено Тогда
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СкопироватьЭлементы(Компоновщик.Настройки.Отбор, СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор);
	КонецЕсли;
	
	// Выбранные поля компоновщика настроек.
	Для Каждого ОбязательноеПоле Из СтруктураНастроек.ОбязательныеПоля Цикл
		ПолеСКД = ОбщегоНазначенияИСМПТК.НайтиПолеСКДПоПолномуИмени(Компоновщик.Настройки.Выбор.ДоступныеПоляВыбора.Элементы, ОбязательноеПоле);
		Если ПолеСКД <> Неопределено Тогда
			ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = ПолеСКД.Поле;
		КонецЕсли;
	КонецЦикла;
		
	// Компоновка макета компоновки данных.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Компоновщик.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	Для каждого Поле Из МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Поля Цикл
		СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Вставить(Справочники.ХранилищеШаблоновИСМПТК.ИмяПоляВШаблоне(Поле.ПутьКДанным), Поле.Имя);
	КонецЦикла;
	
	Запрос = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос);
	
	// Заполнение параметров с полей отбора компоновщика настроек формы обработки.
	Для Каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	ПечатьКодовМаркировкиИСМПТК.ПриПодготовкеСтруктурыДанныхДляПечати(СтруктураНастроек, Режим, Запрос, ИсходныеДанные);

	СтруктураРезультата.Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат СтруктураРезультата;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Если ПечатьКодовМаркировкиИСМПТКПереопределяемый.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭтикеткаSSCC") Тогда
		
		ПечатнаяФорма = СформироватьПечатнуюФормуSSCC(МассивОбъектов, ПараметрыПечати, ПараметрыВывода.КодЯзыка);
		
		ПечатьКодовМаркировкиИСМПТКПереопределяемый.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"ЭтикеткаSSCC",
		НСтр("ru = 'Этикетка SSCC'"),
		ПечатнаяФорма);
		
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег("ЭтикеткаSSCC"), "ИмяВРЕГ");
		Если ОписаниеПечатнойФормы <> Неопределено Тогда
			ОписаниеПечатнойФормы.ДоступенВыводНаДругихЯзыках = Истина;
		КонецЕсли;
		
	Иначе
		ПечатьКодовМаркировкиИСМПТК.ПриПечати(КоллекцияПечатныхФорм, ПараметрыПечати, ОбъектыПечати);
	КонецЕсли;
		
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьПечатнуюФормуSSCC(МассивОбъектов, ПараметрыПечати, КодЯзыка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеПечатиМассив = ПараметрыПечати.ДанныеПечати;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Штрихкод_SSCC";
	
	Макет = ПечатьКодовМаркировкиИСМПТКПереопределяемый.МакетПечатнойФормы("Обработка.ПечатьКодовМаркировкиИСМПТК.SSCC", КодЯзыка);
		
	Для Каждого ДанныеПечати Из ДанныеПечатиМассив Цикл
	
		Область = Макет.ПолучитьОбласть("Организация");
		Область.Параметры.Организация = ДанныеПечати.Организация.НаименованиеПолное;
		ТабличныйДокумент.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть("ЦифраРасширения");
		Область.Параметры.ЦифраРасширения = ДанныеПечати.ЦифраРасширения;
		ТабличныйДокумент.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть("ПрефиксКомпанииGS1");
		Область.Параметры.ПрефиксКомпанииGS1 = ДанныеПечати.ПрефиксКомпанииGS1;
		ТабличныйДокумент.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть("СерийныйНомерSSCC");
		Область.Параметры.СерийныйНомерSSCC = ДанныеПечати.СерийныйНомерSSCC;
		ТабличныйДокумент.Вывести(Область);
	
		Эталон = Обработки.ПечатьКодовМаркировкиИСМПТК.ПолучитьМакет("Эталон");
		КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
		ОбластьКартинка = Макет.ПолучитьОбласть("ШтрихкодПечать");
		ЗначениеШтрихкодаДляКомпоненты = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.КодGS1ДляКомпонентыПечати(ДанныеПечати.Штрихкод, 2);
		
		УровеньЧеткости = 1;
		Высота = ОбластьКартинка.Рисунки.ШтрихкодSSCC.Высота;
		Ширина = ОбластьКартинка.Рисунки.ШтрихкодSSCC.Ширина;
		ПараметрыШтрихкода = Новый Структура;
		ПараметрыШтрихкода.Вставить("Ширина",          Окр(Ширина / КоличествоМиллиметровВПикселе) * УровеньЧеткости);
		ПараметрыШтрихкода.Вставить("Высота",          Окр(Высота / КоличествоМиллиметровВПикселе) * УровеньЧеткости);
		ПараметрыШтрихкода.Вставить("Штрихкод",        ЗначениеШтрихкодаДляКомпоненты);
		ПараметрыШтрихкода.Вставить("ТипКода",         2);
		ПараметрыШтрихкода.Вставить("ОтображатьТекст", Истина);
		ПараметрыШтрихкода.Вставить("НеGS1", 		   Ложь); //По умолчанию, в данном случае не нужен
		
		ОбластьКартинка.Рисунки.ШтрихкодSSCC.Картинка = ПечатьКодовМаркировкиИСМПТКВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
		ТабличныйДокумент.Вывести(ОбластьКартинка);
		
		Область = Макет.ПолучитьОбласть("Штрихкод");
		Область.Параметры.Штрихкод = ДанныеПечати.Штрихкод;
		ТабличныйДокумент.Вывести(Область);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;

КонецФункции

Функция НоваяТаблицаДанныхДляПечатиЭтикеток() Экспорт
	
	НаборВременный = РегистрыСведений.ШтрихкодыSSCCИСМПТК.СоздатьНаборЗаписей();
	
	ОписаниеТипаСтрока = ОбщегоНазначенияИСМПТКПереопределяемый.ОписаниеТипаСтрока(0);
	ОписаниеТипаЧисло  = ОбщегоНазначенияИСМПТКПереопределяемый.ОписаниеТипаЧисло(10);
	ОписаниеТипаДата   = ОбщегоНазначенияИСМПТКПереопределяемый.ОписаниеТипаДата(ЧастиДаты.ДатаВремя);
	ТаблицаИтог        = НаборВременный.Выгрузить(,"Организация, СерийныйНомерSSCC,ПрефиксКомпанииGS1,ЦифраРасширения");
		
	ТаблицаИтог.Колонки.Добавить("Штрихкод",      ОписаниеТипаСтрока);
	ТаблицаИтог.Колонки.Добавить("ТипШтрихкода",  Новый ОписаниеТипов("ПеречислениеСсылка.ТипыШтрихкодовИСМПТК"));
	ТаблицаИтог.Колонки.Добавить("ТипУпаковки",   Новый ОписаниеТипов("ПеречислениеСсылка.ТипыУпаковокИСМПТК"));
	ТаблицаИтог.Колонки.Добавить("ДатаГенерации", ОписаниеТипаДата);
		
	Возврат ТаблицаИтог;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Функция возвращает пустую структуру настроек
// 
// Параметры: 
//  Нет
// 
// Возвращаемое значение: 
//  Структура - структура настроек.
Функция СтруктураНастроек() Экспорт
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИсходныеДанные",                         Неопределено);
	СтруктураНастроек.Вставить("ОбязательныеПоля",                       Новый Массив);
	СтруктураНастроек.Вставить("СоответствиеШаблоновИСтруктурыШаблонов", Новый Соответствие);
	СтруктураНастроек.Вставить("ПараметрыДанных"    ,                    Новый Структура);
	СтруктураНастроек.Вставить("КомпоновщикНастроек",                    Неопределено);
	СтруктураНастроек.Вставить("ИмяМакетаСхемыКомпоновкиДанных",         Неопределено);
	
	Возврат СтруктураНастроек;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли