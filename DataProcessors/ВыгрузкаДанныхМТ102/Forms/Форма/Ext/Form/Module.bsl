
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
 
	Если НЕ ЗначениеЗаполнено(Параметры.Документ) Тогда
		ТекстСообщения = НСтр("ru='Обработка предназначена для служебного использования'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	Объект.Документ = Параметры.Документ;
	Объект.ПредставлениеНомераДокумента = Константы.ПредставлениеНомераДокументов.Получить();	
	
	ВидОперацииДокумента       = ПолучитьВидОперацииДокумента(Параметры.Документ);	
	ОбработкаОбъект 		   = РеквизитФормыВЗначение("Объект");
	
	ЭтоПеречислениеМедОтчислений = ОбработкаОбъект.ЭтоПеречислениеМедОтчислений();
	Если ВидОперацииДокумента = "ПеречислениеСоциальныхОтчислений" Тогда
		ПолеPERIODвЗаголовке = УстановитьЗначениеПоляPERIODвЗаголовке(ОбработкаОбъект, ЭтаФорма);
	КонецЕсли;
	ЭтоПеречислениеНаКартСчета   = ОбработкаОбъект.ЭтоПеречислениеНаКартСчета(); 
	
	ЗаполнитьСписокФорматовФайлов(ЭтаФорма, ОбработкаОбъект);
	
	Объект.Кодировка       = Элементы.Кодировка.СписокВыбора.Получить(0);			
	 	
	Если Не Элементы.ФорматФайлов.СписокВыбора.Количество() = 0 Тогда
		Объект.ФорматФайлов = Элементы.ФорматФайлов.СписокВыбора.Получить(0);
	КонецЕсли;
			
	Если ВидОперацииДокумента = "ПеречислениеПенсионныхВзносов" Тогда
		Заголовок = НСтр("ru='Выгрузка данных для перечисления пенсионных взносов работников'");
	ИначеЕсли ВидОперацииДокумента = "ПеречислениеСоциальныхОтчислений" Тогда
		Заголовок = НСтр("ru='Выгрузка данных для перечисления социальных отчислений работников'");
	Иначе // для других видов операций (перечисление зп и перечисление подотчетных сумм, т.к. больше не для 
		Заголовок = НСтр("ru='Выгрузка данных для зачисления на карт-счета работников'");
	КонецЕсли;	
	
	ЭтаФорма.Заголовок = Заголовок;	
	УправлениеФормой(ЭтаФорма); 
	Элементы.ВключатьПоляФорматаMX.Видимость = УправлениеДенежнымиСредствамиСервер.ИспользоватьФорматMX();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Для Каждого Настройка Из Настройки Цикл		
			
		Если  НЕ УправлениеДенежнымиСредствамиСервер.ИспользоватьФорматMX() И Настройка.Ключ = "ВключатьПоляФорматаMX" И Настройка.Значение Тогда
			Настройки.Вставить(Настройка.Ключ, Ложь);
		КонецЕсли;
		
		Если (Найти(Настройка.Ключ, "ФорматФайлов") <> 0 И Настройка.Ключ <> "Объект.ФорматФайлов") 
			ИЛИ (Найти(Настройка.Ключ, "ВключатьПолеFT")  <> 0  И Настройка.Ключ <> "ВключатьПолеFT")
			ИЛИ (Найти(Настройка.Ключ, "ВключатьПолеPRT") <> 0 И Настройка.Ключ <> "ВключатьПолеPRT")
			ИЛИ (Найти(Настройка.Ключ, "ВключатьПолеPSO") <> 0 И Настройка.Ключ <> "ВключатьПолеPSO")
			ИЛИ (Найти(Настройка.Ключ, "РассчитыватьКомиссиюБанкаПоКаждомуРаботнику") <> 0  И Настройка.Ключ <> "Объект.РассчитыватьКомиссиюБанкаПоКаждомуРаботнику") Тогда			
			
			НоваяСтрокаНастройки = НастройкиСохраненные.Добавить();
			НоваяСтрокаНастройки.Ключ = Настройка.Ключ;
			НоваяСтрокаНастройки.Значение = Настройка.Значение;
		КонецЕсли;

		Если Настройка.Ключ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ФорматФайлов%1", ВидОперацииДокумента) 
			 И ЗначениеЗаполнено(Настройка.Значение)Тогда
			Настройки.Вставить("Объект.ФорматФайлов",  Настройка.Значение);		
		КонецЕсли;
		Если Настройка.Ключ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ВключатьПолеFT%1", ВидОперацииДокумента) Тогда
			Настройки.Вставить("ВключатьПолеFT",  Настройка.Значение);		
		КонецЕсли;
		Если Настройка.Ключ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ВключатьПолеPRT%1", ВидОперацииДокумента) Тогда
			Настройки.Вставить("ВключатьПолеPRT",  Настройка.Значение);		
  		КонецЕсли;  
		Если Настройка.Ключ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ВключатьПолеPSO%1", ВидОперацииДокумента) Тогда			
			Настройки.Вставить("ВключатьПолеPSO",  Настройка.Значение);		
  		КонецЕсли;   
		Если Настройка.Ключ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("РассчитыватьКомиссиюБанкаПоКаждомуРаботнику%1", ВидОперацииДокумента) Тогда			
			Настройки.Вставить("Объект.РассчитыватьКомиссиюБанкаПоКаждомуРаботнику",  Настройка.Значение);		
		ИначеЕсли ТипЗнч(Настройка.Значение) = Тип("Строка") И НЕ ЗначениеЗаполнено(Настройка.Значение) Тогда
			Настройки.Удалить(Настройка.Ключ);
		КонецЕсли;  		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
		
	Настройки.Вставить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ФорматФайлов%1", ВидОперацииДокумента),    Объект.ФорматФайлов);
	Настройки.Вставить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ВключатьПолеFT%1", ВидОперацииДокумента),  ВключатьПолеFT);
	Настройки.Вставить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ВключатьПолеPRT%1", ВидОперацииДокумента), ВключатьПолеPRT);
	Настройки.Вставить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ВключатьПолеPSO%1", ВидОперацииДокумента), ВключатьПолеPSO);
	Настройки.Вставить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("РассчитыватьКомиссиюБанкаПоКаждомуРаботнику%1", ВидОперацииДокумента), Объект.РассчитыватьКомиссиюБанкаПоКаждомуРаботнику);		
	
	//удалим предопределенные настройки и дополним необходимыми по уже сохраненным видам операции
	Если Настройки.Получить("Объект.ФорматФайлов") <> Неопределено Тогда
		Настройки.Удалить("Объект.ФорматФайлов");
	КонецЕсли;
	
	Если Настройки.Получить("Объект.РассчитыватьКомиссиюБанкаПоКаждомуРаботнику") <> Неопределено Тогда
		Настройки.Удалить("Объект.РассчитыватьКомиссиюБанкаПоКаждомуРаботнику");
	КонецЕсли;
	               	
	Если Настройки.Получить("ВключатьПолеPRT") <> Неопределено Тогда
		Настройки.Удалить("ВключатьПолеPRT");
	КонецЕсли;

	Если Настройки.Получить("ВключатьПолеFT") <> Неопределено Тогда
		Настройки.Удалить("ВключатьПолеFT");
	КонецЕсли;

	Если Настройки.Получить("ВключатьПолеPSO") <> Неопределено Тогда
		Настройки.Удалить("ВключатьПолеPSO");
	КонецЕсли;   
	
	Для Каждого Настройка Из НастройкиСохраненные Цикл	
		Если Настройки.Получить(Настройка.Ключ) = Неопределено Тогда			
			Настройки.Вставить(Настройка.Ключ, Настройка.Значение);
		КонецЕсли;
	КонецЦикла;
				
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("ПодключениеРасширенияРаботыСФайламиЗавершение", ЭтотОбъект));
	
	Если  РаботаСФайламиСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		Если НЕ ЗначениеЗаполнено(Объект.КаталогВыгрузки) Тогда
			Объект.КаталогВыгрузки = РаботаСФайламиСлужебныйКлиент.КаталогВыгрузки();  
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодключениеРасширенияРаботыСФайламиЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	ВозможностьВыбораФайлов = Подключено;
	
	Если НЕ ВозможностьВыбораФайлов Тогда
		ПодключитьОбработчикОжидания("Подкючаемый_УстановкаРасширенияРаботыСФайлами", 0.1, Истина);
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура КаталогВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораКаталогВыгрузки = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталогВыгрузки.Заголовок = НСтр("ru='Открытие каталога для передачи файлов в банк'");
	ДиалогВыбораКаталогВыгрузки.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораКаталогВыгрузки.Каталог = Объект.КаталогВыгрузки;
	
	ДиалогВыбораКаталогВыгрузки.Показать(Новый ОписаниеОповещения("КаталогВыгрузкиНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("ДиалогВыбораКаталогВыгрузки", ДиалогВыбораКаталогВыгрузки)));
				
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораКаталогВыгрузки = ДополнительныеПараметры.ДиалогВыбораКаталогВыгрузки;
	   	
	Если Не (ВыбранныеФайлы <> Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.КаталогВыгрузки = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ДиалогВыбораКаталогВыгрузки.Каталог);
	//РаботаСФайламиСлужебныйКлиент.НормализоватьКаталог(ДиалогВыбораКаталогВыгрузки.Каталог);

КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.КаталогВыгрузки) Тогда
		
		Объект.КаталогВыгрузки = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Объект.КаталогВыгрузки)
		//РаботаСФайламиСлужебныйКлиент.НормализоватьКаталог(Объект.КаталогВыгрузки);
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения;

	НачатьЗапускПриложения(Оповещение, Объект.КаталогВыгрузки);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ЕстьОшибки = Ложь;
	Если ЭтоПеречислениеНаКартСчета Тогда  		
		Если НЕ ЗначениеЗаполнено(Объект.ФорматФайлов) Тогда
			
			ТекстСообщения = НСтр("ru='Не выбран формат файлов зачисления зарплаты'");
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				ТекстСообщения,
				,
				"ФорматФайлов",
				"Объект"
				);   		
		ЕстьОшибки = Истина;	
		КонецЕсли;
	КонецЕсли;
	
	Если ВозможностьВыбораФайлов Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.КаталогВыгрузки) Тогда
			
			ТекстСообщения = НСтр("ru='Не указан каталог выгрузки'");
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения,
			,
			"КаталогВыгрузки",
			"Объект"
			);   		
			
			ЕстьОшибки = Истина;		
		КонецЕсли;
		
		Если ЕстьОшибки Тогда
			ТекстСообщения = НСтр("ru='Выгрузка не выполнена!'");
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения,
			,
			,
			"Объект"
			);   		
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	УИДЗамера = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "Обработка ""выгрузка данных в формате мт-102""" +?(ЗначениеЗаполнено(Объект.Документ),ПолучитьВидОперацииДокумента(Объект.Документ),""));
	
	АдресСтруктурыФайловВоВременномХранилище = ВыгрузитьНаСервере(ФормироватьОтдельныеФайлы, ВключатьПолеFT, ВключатьПолеPSO, ВключатьПолеPRT, ПолеPERIODвЗаголовке, ВключатьПоляФорматаMX);;
	
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамера);
	
	ДанныеХранилищаФайлов = ПолучитьИзВременногоХранилища(АдресСтруктурыФайловВоВременномХранилище);	
	
	Если ВозможностьВыбораФайлов Тогда
		
		ПередаваемыеФайлы = Новый Массив;
		ПереданныеФайлы   = Новый Массив;
		МассивВызовов     = Новый Массив;
		
		Для Каждого ДанныеФайла Из ДанныеХранилищаФайлов Цикл
			
			АдресФайлаВоВременномХранилище = ДанныеФайла.Значение;
			ПолноеИмяФайла = ДанныеФайла.Ключ;
			
			ПозицияНачалоИмяФайла = СтрНайти(ПолноеИмяФайла,"\", НаправлениеПоиска.СКонца);
			ПолныйКаталогВыгрузки = Лев(ПолноеИмяФайла,ПозицияНачалоИмяФайла);
			
			ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, АдресФайлаВоВременномХранилище);
			
			ПередаваемыеФайлы.Добавить(ОписаниеФайла);
			
		КонецЦикла;
		
		Если ПередаваемыеФайлы.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru='Выгрузка не выполнена!'");
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения
			);   		
			Возврат;
		КонецЕсли;         		
		
		МассивВызовов.Добавить(Новый Массив);
		
		МассивВызовов[0].Добавить("ПолучитьФайлы");
		МассивВызовов[0].Добавить(ПередаваемыеФайлы);
		МассивВызовов[0].Добавить(ПереданныеФайлы);
		МассивВызовов[0].Добавить("");
		МассивВызовов[0].Добавить(Ложь);
		
		НачатьЗапросРазрешенияПользователя(Новый ОписаниеОповещения("ПолучениеФайловЗавершение", ЭтотОбъект, Новый Структура("ПередаваемыеФайлы, ПолноеИмяФайла, ПолныйКаталогВыгрузки", ПередаваемыеФайлы, ПолноеИмяФайла, ПолныйКаталогВыгрузки)), МассивВызовов);		
		
	Иначе
		
		Попытка 			
			
			//файлов может быть несколько, в зависимости от типа
			Для Каждого ДанныеФайла Из ДанныеХранилищаФайлов Цикл
				
				АдресВХранилище = ДанныеФайла.Значение;		
				
				ПолучитьФайл(АдресВХранилище, ДанныеФайла.Ключ, Истина);
				
			КонецЦикла;  
			
		Исключение
			
			ШаблонСообщения = НСтр("ru = 'При записи файла возникла ошибка
			|%1'");
			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
						
		КонецПопытки;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеФайловЗавершение(РазрешенияПолучены, ДополнительныеПараметры) Экспорт
	
	ПередаваемыеФайлы = ДополнительныеПараметры.ПередаваемыеФайлы;
	ПолныйКаталогВыгрузки = ДополнительныеПараметры.ПолныйКаталогВыгрузки;
	ПолноеИмяФайла = ДополнительныеПараметры.ПолноеИмяФайла;  	
	
	Если РазрешенияПолучены Тогда			
		НачатьПолучениеФайлов(Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект, Новый Структура("ПередаваемыеФайлы, ПолныйКаталогВыгрузки, ПолноеИмяФайла", ПередаваемыеФайлы, ПолныйКаталогВыгрузки, ПолноеИмяФайла)), ПередаваемыеФайлы,ПолноеИмяФайла,  Ложь);   			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	ПередаваемыеФайлы = ДополнительныеПараметры.ПередаваемыеФайлы;
	ПолныйКаталогВыгрузки = ДополнительныеПараметры.ПолныйКаталогВыгрузки;    	
	
	Если ПередаваемыеФайлы.Количество() > 0 Тогда
		ТекстСообщения = НСтр("ru = 'Данные успешно выгружены'");	
		#Если НЕ ВебКлиент Тогда
			НавигационнаяСсылка = "file://" + СтрЗаменить(СокрЛП(ПолныйКаталогВыгрузки), "\", "/");
			ПоказатьОповещениеПользователя(ТекстСообщения, НавигационнаяСсылка, ПолныйКаталогВыгрузки);
		#Иначе
			ПоказатьОповещениеПользователя(ТекстСообщения, , ПолныйКаталогВыгрузки);
		#КонецЕсли  							
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервереБезКонтекста
Функция ПолучитьВидОперацииДокумента(Документ)
		
	ИндексВидаОперации = Перечисления.ВидыОперацийППИсходящее.Индекс(Документ.ВидОперации);
	Если ИндексВидаОперации <> -1 Тогда
		ВидОперацииДокумента = Метаданные.Перечисления.ВидыОперацийППИсходящее.ЗначенияПеречисления[ИндексВидаОперации].Имя;
	КонецЕсли;
	
	Возврат  ВидОперацииДокумента;
	
КонецФункции

&НаСервереБезКонтекста
Функция УстановитьЗначениеПоляPERIODвЗаголовке(ОбработкаОбъект, Форма)    
	
	//Если ОСМС, ВОСМС то вегда период в списке
	Если Форма.ЭтоПеречислениеМедОтчислений Тогда     
		ПолеPERIODвЗаголовке = 0;
		Возврат ПолеPERIODвЗаголовке;
	КонецЕсли;
			
	РезультатЗапроса = ОбработкаОбъект.СформироватьЗапросПоПериодамПеречислениеСО();
		
	Если РезультатЗапроса.Пустой() Тогда
		ПолеPERIODвЗаголовке = 1;
	Иначе
		ВыборкаПоПериодам = РезультатЗапроса.Выбрать();		
		Если ВыборкаПоПериодам.Количество() > 1 Тогда
			ПолеPERIODвЗаголовке = 0;
		Иначе
			ПолеPERIODвЗаголовке = 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПолеPERIODвЗаголовке;

КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьСписокФорматовФайлов(Форма,ОбработкаОбъект)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	МассивЗначенийФормата = Новый Массив;	
	
	Если Форма.ЭтоПеречислениеНаКартСчета Тогда
		МассивЗначенийФормата.Добавить(ОбработкаОбъект.ФорматПеречисленияВНародныйБанк());		
	Иначе
		МассивЗначенийФормата.Добавить(ОбработкаОбъект.ФорматПеречисленияМТ102СПереносом());
		МассивЗначенийФормата.Добавить(ОбработкаОбъект.ФорматПеречисленияМТ102БезПереноса());
	КонецЕсли;
	
	Элементы.ФорматФайлов.СписокВыбора.ЗагрузитьЗначения(МассивЗначенийФормата);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.ГруппаКомиссияБанкаВФайле.Видимость = Форма.ЭтоПеречислениеНаКартСчета И Объект.Документ.ВключатьКомиссиюБанка;
	Элементы.ГруппаНастройкиФорматаДляПеречисленийЛевая.Видимость  = НЕ Форма.ЭтоПеречислениеНаКартСчета;		
	Элементы.ГруппаНастройкиФорматаДляПеречисленийПравая.Видимость = Объект.Документ.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений") ;
	Элементы.ПолеPERIODвЗаголовке.Доступность                      = НЕ Форма.ЭтоПеречислениеМедОтчислений;
		
КонецПроцедуры

&НаСервере
Функция ВыгрузитьНаСервере(ФормироватьОтдельныеФайлы, ВключатьПолеFT, ВключатьПолеPSO, ВключатьПолеPRT, ПолеPERIODвЗаголовке, ВключатьПоляФорматаMX)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ОбработкаОбъект.СоздатьФайлВФорматеМТ(ФормироватьОтдельныеФайлы, ВключатьПолеFT, ВключатьПолеPSO, ВключатьПолеPRT, ПолеPERIODвЗаголовке, УникальныйИдентификатор, ВозможностьВыбораФайлов, ВключатьПоляФорматаMX);
	
КонецФункции

&НаКлиенте
Процедура Подкючаемый_УстановкаРасширенияРаботыСФайлами()
	
	ОповещениеПриОткрытии = Новый ОписаниеОповещения("УстановкаРасширенияРаботыСФайламиЗавершение", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОповещениеПриОткрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановкаРасширенияРаботыСФайламиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВозможностьВыбораФайлов = Ложь;
	
	НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("УстановкаРасширенияРаботыСФайламиЗавершениеЗавершение", ЭтотОбъект));
		
КонецПроцедуры

&НаКлиенте
Процедура УстановкаРасширенияРаботыСФайламиЗавершениеЗавершение(Подключено, ДополнительныеПараметры1) Экспорт
	
	ВозможностьВыбораФайлов = Подключено;
	УстановитьВидимостьЭлементовВыбораФайлов();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементовВыбораФайлов()
	
	Элементы.КаталогВыгрузки.Видимость             = ВозможностьВыбораФайлов;
		
КонецПроцедуры


