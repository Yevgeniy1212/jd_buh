#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
 
Функция ФорматПеречисленияВНародныйБанк()Экспорт
	Возврат "МТ-102";
КонецФункции

Функция ФорматПеречисленияМТ102БезПереноса() Экспорт
	Возврат "МТ-102 (без переноса ключевых слов)"
КонецФункции

Функция ФорматПеречисленияМТ102СПереносом() Экспорт
	Возврат "МТ-102 (с переносом ключевых слов)"
КонецФункции

// Возвращает Истина, если вид операции связан с перечислением на карт-счета физлиц.
//
Функция ЭтоПеречислениеНаКартСчета() Экспорт

	Если Документ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов
			ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений
			ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа
			ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПрочихВыплат Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции // ЭтоПеречислениеНаКартСчета()

Функция ЭтоПеречислениеМедОтчислений() Экспорт
	
	ВидОперацииДокумента =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ВидОперации");    
	ЭтоПеречислениеМедОтчислений = Ложь;
	
	Если ВидОперацииДокумента = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений Тогда
		ТаблицаОтчисления = Документ.ПеречислениеСоциальныхОтчислений.Выгрузить();  
		Если ТаблицаОтчисления.Количество() > 0 Тогда
			ДокументОтчисления = ТаблицаОтчисления[0].Документ;
			ВидОперацииВедомости = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОтчисления, "ВидОперации");
			Если ВидОперацииВедомости = ПредопределенноеЗначение("Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС") 
				ИЛИ  ВидОперацииВедомости = ПредопределенноеЗначение("Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС") Тогда
				ЭтоПеречислениеМедОтчислений = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЭтоПеречислениеМедОтчислений;
	
КонецФункции

// Формирует запрос по платежному поручению для перечисления ОПВ и СО
//
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоПлатежномуПоручению()
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамДокументСсылка", Документ);
	Запрос.УстановитьПараметр("парамДата", Документ.Дата);
	Запрос.УстановитьПараметр("парамРуководитель", Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Запрос.УстановитьПараметр("парамГлавныйБухгалтер", Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтерДляПодписиБанковскихДокументов);
	
	ИмяРеквизитаБИК = Справочники.Банки.ПолучитьИмяРеквизитаБИКБанка(Документ.Дата);
	ИмяКодБанкаВПлатежнойСистеме = Справочники.Банки.ПолучитьИмяРеквизитаКодБанкаВПлатежнойСистеме(Документ.Дата);
	
	УчетСтруктурныхПодразделений = Документ.Метаданные().Реквизиты.Найти("СтруктурноеПодразделениеОтправитель") <> Неопределено;
	Если УчетСтруктурныхПодразделений Тогда
		Если ЗначениеЗаполнено(Документ.СтруктурноеПодразделениеОтправитель) Тогда
			Если Документ.СтруктурноеПодразделениеОтправитель.УказыватьРеквизитыГоловнойОрганизации Тогда
				СтруктурнаяЕдиница = "Организация";
			Иначе
				СтруктурнаяЕдиница = "СтруктурноеПодразделениеОтправитель";
			КонецЕсли;
		Иначе
			СтруктурнаяЕдиница = "Организация";
		КонецЕсли;		
	Иначе
		СтруктурнаяЕдиница = "Организация";
	КонецЕсли;
	
	ВидОперации = Документ.ВидОперации;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлатежноеПоручениеИсходящее.Организация КАК Организация,  
	|	ПлатежноеПоручениеИсходящее.ФактическийПлательщик КАК ФактическийПлательщик,
	|	ВЫБОР КОГДА ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.ТекстПлательщика КАК СТРОКА(1000)) = """" ТОГДА
	|		ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее." + СтруктурнаяЕдиница + ".НаименованиеПолное КАК СТРОКА(1000))	
	|	ИНАЧЕ 
	|		ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.ТекстПлательщика КАК СТРОКА(1000)) КОНЕЦ КАК ОрганизацияНаименованиеПолное,  
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации КАК ОрганизацияБанковскийСчетСсылка,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.НомерСчета КАК ОрганизацияБанковскийСчет,
	|		ПлатежноеПоручениеИсходящее." + СтруктурнаяЕдиница + ".ИдентификационныйНомер КАК ОрганизацияИдентификационныйНомер,  
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк КАК БанкОрганизацииСсылка,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк." + ИмяРеквизитаБИК + " КАК ОрганизацияБИК,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк." + ИмяКодБанкаВПлатежнойСистеме + " КАК ОрганизацияКодБанкаВПлатежнойСистеме,
	|	ПОДСТРОКА(ПлатежноеПоручениеИсходящее.Организация.КБЕ, 1, 1) КАК ОрганизацияПризнакРезидентства,
	|	ПОДСТРОКА(ПлатежноеПоручениеИсходящее.Организация.КБЕ, 2, 1) КАК ОрганизацияСекторЭкономики, 
	|	ВЫБОР КОГДА ПлатежноеПоручениеИсходящее.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо) ТОГДА
	|		ВЫБОР КОГДА ПлатежноеПоручениеИсходящее.Организация.ИностраннаяОрганизация = ЛОЖЬ ТОГДА
	|			""KZ""	
	|		ИНАЧЕ
	|			ЕСТЬNULL(ПлатежноеПоручениеИсходящее.Организация.СтранаРегистрации.КодАльфа2, """")
	|		КОНЕЦ
	|	ИНАЧЕ 
	|		ЕСТЬNULL(ГражданствоФизЛиц.Страна.КодАльфа2, """") КОНЕЦ КАК ОрганизацияКодСтраныРегистрации,
	|	ВЫБОР КОГДА (ФИОФизЛицСрезПоследнихРуководитель.ФизЛицо) ЕСТЬ NULL  ТОГДА ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.ФизическоеЛицо.Наименование ИНАЧЕ ФИОФизЛицСрезПоследнихРуководитель.Фамилия + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Имя, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Имя, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Отчество, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Отчество, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ КОНЕЦ КАК ФИОРуководителя,
	|	ВЫБОР КОГДА (ФИОФизЛицСрезПоследнихГлБухгалтер.ФизЛицо) ЕСТЬ NULL  ТОГДА ОтветственныеЛицаОрганизацийСрезПоследнихГлБухгалтер.ФизическоеЛицо.Наименование ИНАЧЕ ФИОФизЛицСрезПоследнихГлБухгалтер.Фамилия + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБухгалтер.Имя, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБухгалтер.Имя, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБухгалтер.Отчество, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБухгалтер.Отчество, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ КОНЕЦ КАК ФИОГлБухгалтера,
	|	ПлатежноеПоручениеИсходящее.Дата КАК ДатаПлатежногоПоручения,
	|	ПлатежноеПоручениеИсходящее.Номер КАК НомерПлатежногоПоручения,
	|	ПлатежноеПоручениеИсходящее.КодНазначенияПлатежа КАК КодНазначенияПлатежа,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.НазначениеПлатежа КАК СТРОКА(1000)) КАК НазначениеПлатежа,
	|	ПлатежноеПоручениеИсходящее.ВидОперации КАК ВидОперации,
	|	ПеречислениеВФонды.ВидПлатежа КАК ВидПлатежа,
	|	ПеречислениеВФонды.ПериодПлатежа КАК ПериодПлатежа,";
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов Тогда
		Запрос.Текст = Запрос.Текст + 
		"	ПлатежноеПоручениеИсходящее.СчетКонтрагента.НомерСчета КАК ГЦВПБанковскийСчет,
		|	ПлатежноеПоручениеИсходящее.СчетКонтрагента КАК ГЦВПБанковскийСчетСсылка,
		|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк." + ИмяРеквизитаБИК + " КАК ГЦВПБИК,
		|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк КАК ГЦВПБанкСсылка,
		|	ПлатежноеПоручениеИсходящее.Контрагент КАК ГЦВПСсылка,
		|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.Контрагент.НаименованиеПолное КАК СТРОКА(1000)) КАК ГЦВПНаименованиеПолное,
		|	ПлатежноеПоручениеИсходящее.Контрагент.ИдентификационныйКодЛичности КАК ГЦВПИдентификационныйНомер,
		|	ПОДСТРОКА(ПлатежноеПоручениеИсходящее.Контрагент.КБЕ, 1, 1) КАК ГЦВППризнакРезидентства,
		|	ПОДСТРОКА(ПлатежноеПоручениеИсходящее.Контрагент.КБЕ, 2, 1) КАК ГЦВПСекторЭкономики,
		|	ЕСТЬNULL(ПлатежноеПоручениеИсходящее.Контрагент.СтранаРезидентства.КодАльфа2, """") КАК ГЦВПСтранаРезидентства";
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений Тогда
		
		Запрос.Текст = Запрос.Текст + 
		"	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.Контрагент.НаименованиеПолное КАК СТРОКА(1000)) КАК ГЦВПНаименованиеПолное,
		|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.НомерСчета КАК ГЦВПБанковскийСчет,
		|	ПлатежноеПоручениеИсходящее.СчетКонтрагента КАК ГЦВПБанковскийСчетСсылка,
		|	ПлатежноеПоручениеИсходящее.Контрагент КАК ГЦВПСсылка,
		|	ПлатежноеПоручениеИсходящее.Контрагент.ИдентификационныйКодЛичности КАК ГЦВПИдентификационныйНомер,
		|	ПОДСТРОКА(ПлатежноеПоручениеИсходящее.Контрагент.КБЕ, 1, 1) КАК ГЦВППризнакРезидентства,
		|	ПОДСТРОКА(ПлатежноеПоручениеИсходящее.Контрагент.КБЕ, 2, 1) КАК ГЦВПСекторЭкономики,
		|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк." + ИмяРеквизитаБИК + " КАК ГЦВПБИК,
		|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк КАК ГЦВПБанкСсылка,
		|	ЕСТЬNULL(ПлатежноеПоручениеИсходящее.Контрагент.СтранаРезидентства.КодАльфа2, """") КАК ГЦВПСтранаРезидентства";
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа Тогда
		
		Запрос.Текст = Запрос.Текст + 
		"	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.Контрагент.НаименованиеПолное КАК СТРОКА(1000)) КАК ГЦВПНаименованиеПолное,
		|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.НомерСчета КАК ГЦВПБанковскийСчет,
		|	ПлатежноеПоручениеИсходящее.СчетКонтрагента КАК ГЦВПБанковскийСчетСсылка,
		|	ПлатежноеПоручениеИсходящее.Контрагент КАК ГЦВПСсылка,
		|	ПлатежноеПоручениеИсходящее.Контрагент.ИдентификационныйКодЛичности КАК ГЦВПИдентификационныйНомер,
		|	ПОДСТРОКА(ПлатежноеПоручениеИсходящее.Контрагент.КБЕ, 1, 1) КАК ГЦВППризнакРезидентства,
		|	ПОДСТРОКА(ПлатежноеПоручениеИсходящее.Контрагент.КБЕ, 2, 1) КАК ГЦВПСекторЭкономики,
		|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк." + ИмяРеквизитаБИК + " КАК ГЦВПБИК,
		|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк КАК ГЦВПБанкСсылка,
		|	ЕСТЬNULL(ПлатежноеПоручениеИсходящее.Контрагент.СтранаРезидентства.КодАльфа2, """") КАК ГЦВПСтранаРезидентства";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + 
	"
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&парамДата, ОтветственноеЛицо = &парамРуководитель) КАК ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДата, ) КАК ФИОФизЛицСрезПоследнихРуководитель
	|			ПО ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.ФизическоеЛицо = ФИОФизЛицСрезПоследнихРуководитель.ФизЛицо
	|		ПО ПлатежноеПоручениеИсходящее." + СтруктурнаяЕдиница + " = ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.СтруктурнаяЕдиница
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&парамДата, ОтветственноеЛицо = &парамГлавныйБухгалтер) КАК ОтветственныеЛицаОрганизацийСрезПоследнихГлБухгалтер
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДата, ) КАК ФИОФизЛицСрезПоследнихГлБухгалтер
	|			ПО ОтветственныеЛицаОрганизацийСрезПоследнихГлБухгалтер.ФизическоеЛицо = ФИОФизЛицСрезПоследнихГлБухгалтер.ФизЛицо
	|		ПО ПлатежноеПоручениеИсходящее." + СтруктурнаяЕдиница + " = ОтветственныеЛицаОрганизацийСрезПоследнихГлБухгалтер.СтруктурнаяЕдиница
	|		ЛЕВОЕ СОЕДИНЕНИЕ(ВЫБРАТЬ
	|					МИНИМУМ(ПеречислениеВФонды.ПериодРегистрации) КАК ПериодПлатежа,
	|					МИНИМУМ(ПеречислениеВФонды.ВидПлатежа) КАК ВидПлатежа
	|				ИЗ
	|					Документ.ОПВПеречислениеВФонды КАК ПеречислениеВФонды
	|	
	|	    		ГДЕ
	|					ПеречислениеВФонды.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							ПлатежноеПоручениеИсходящееПеречисление.Документ.Ссылка
	|						ИЗ
	|							Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПенсионныхВзносов КАК ПлатежноеПоручениеИсходящееПеречисление
	|			
	|						ГДЕ
	|							ПлатежноеПоручениеИсходящееПеречисление.Ссылка = &парамДокументСсылка)) КАК ПеречислениеВФонды
	|		ПО ИСТИНА
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамДата,) КАК ГражданствоФизЛиц	
	|		ПО ГражданствоФизЛиц.ФизЛицо = ПлатежноеПоручениеИсходящее.Организация.ИндивидуальныйПредприниматель 
	|ГДЕ
	|	ПлатежноеПоручениеИсходящее.Ссылка = &парамДокументСсылка";
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений Тогда
		Запрос.Текст = СтрЗаменить(СтрЗаменить(Запрос.Текст, "ОПВПеречислениеВФонды", "СОПеречислениеВФонды"), "ПеречислениеПенсионныхВзносов", "ПеречислениеСоциальныхОтчислений");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа Тогда
		Запрос.Текст = СтрЗаменить(СтрЗаменить(Запрос.Текст, "ОПВПеречислениеВФонды", "ЕППеречислениеВФонды"), "ПеречислениеПенсионныхВзносов", "ПеречислениеЕдиныхПлатежей");
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
	
КонецФункции //СформироватьЗапросПоПлатежномуПоручению()

// Формирует запрос по платежному поручению для перечисления на карт-счета.
//
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоПлатежномуПоручениюКартСчета()
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамДокументСсылка", Документ);
	Запрос.УстановитьПараметр("парамДата", Документ.Дата);
	Запрос.УстановитьПараметр("парамРуководитель", Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Запрос.УстановитьПараметр("парамГлавныйБухгалтер", Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтерДляПодписиБанковскихДокументов);
	
	ИмяРеквизитаБИК = Справочники.Банки.ПолучитьИмяРеквизитаБИКБанка(Документ.Дата);
	ИмяКодБанкаВПлатежнойСистеме = Справочники.Банки.ПолучитьИмяРеквизитаКодБанкаВПлатежнойСистеме(Документ.Дата);
	
	ВидОперации = Документ.ВидОперации;
	// список способов заполнения только зарплаты из текущих взаиморасчетов
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты Тогда
		СписокСпособовЗарплата = Новый СписокЗначений;
		СписокСпособовЗарплата.Добавить(Перечисления.СпособыРасчетаСуммКВыплате.ЗарплатаЗаМесяц);
		СписокСпособовЗарплата.Добавить(Перечисления.СпособыРасчетаСуммКВыплате.ОстаткиПоЗарплатеНаКонецМесяца);
		СписокСпособовЗарплата.Добавить(Перечисления.СпособыРасчетаСуммКВыплате.ПоВидуРасчета);
		Если Метаданные.Перечисления.СпособыРасчетаСуммКВыплате.ЗначенияПеречисления.Найти("АвансЗаМесяц") <> Неопределено Тогда
			СписокСпособовЗарплата.Добавить(Перечисления.СпособыРасчетаСуммКВыплате["АвансЗаМесяц"]);
			СписокСпособовЗарплата.Добавить(Перечисления.СпособыРасчетаСуммКВыплате["АвансЗаПервуюПоловинуМесяца"]);
		КонецЕсли;
				
		Запрос.УстановитьПараметр("парамСписокСпособовЗарплата", СписокСпособовЗарплата);
				
		// список способов заполнения только зарплаты из депонированных сумм
		СписокСпособовДепонированныеСуммы = Новый СписокЗначений;
		СписокСпособовДепонированныеСуммы.Добавить(Перечисления.СпособыРасчетаСуммКВыплате.ДепонированнаяЗарплатаЗаМесяц);
		СписокСпособовДепонированныеСуммы.Добавить(Перечисления.СпособыРасчетаСуммКВыплате.ОстаткиПоДепонированнойЗарплатеНаКонецМесяца);
				
		Запрос.УстановитьПараметр("парамСписокСпособовДепонированныеСуммы", СписокСпособовДепонированныеСуммы);
	КонецЕсли;
	
	УчетСтруктурныхПодразделений = Документ.Метаданные().Реквизиты.Найти("СтруктурноеПодразделениеОтправитель") <> Неопределено;
	Если УчетСтруктурныхПодразделений Тогда
		Если ЗначениеЗаполнено(Документ.СтруктурноеПодразделениеОтправитель) Тогда 
			Если Документ.СтруктурноеПодразделениеОтправитель.УказыватьРеквизитыГоловнойОрганизации Тогда
				СтруктурноеПодразделение = "Организация";
			Иначе 
				СтруктурноеПодразделение = "СтруктурноеПодразделениеОтправитель";
			КонецЕсли;
		Иначе 
			СтруктурноеПодразделение = "Организация";		
		КонецЕсли;
	Иначе
		СтруктурноеПодразделение = "Организация";
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// реквизиты организации
	|	ПлатежноеПоручениеИсходящее." + СтруктурноеПодразделение + " КАК Организация,
	|	ПлатежноеПоручениеИсходящее.ФактическийПлательщик КАК ФактическийПлательщик,
	|	ВЫБОР КОГДА ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.ТекстПлательщика КАК СТРОКА(1000)) = """" ТОГДА
	|		ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее." + СтруктурноеПодразделение + ".НаименованиеПолное КАК СТРОКА(1000))	
	|	ИНАЧЕ 
	|		ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.ТекстПлательщика КАК СТРОКА(1000)) КОНЕЦ КАК ОрганизацияНаименованиеПолное,  
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации КАК ОрганизацияБанковскийСчетСсылка,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.НомерСчета КАК ОрганизацияБанковскийСчет,
	|	ПлатежноеПоручениеИсходящее." + СтруктурноеПодразделение + ".ИдентификационныйНомер  КАК ОрганизацияИдентификационныйНомер,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.ВалютаДенежныхСредств.БуквенныйКод КАК БуквенныйКодВалюты,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.ВалютаДенежныхСредств КАК Валюта,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк КАК БанкОрганизацииСсылка,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк." + ИмяРеквизитаБИК + " КАК ОрганизацияБИК,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк." + ИмяКодБанкаВПлатежнойСистеме + " КАК ОрганизацияКодБанкаВПлатежнойСистеме,
	|	ПОДСТРОКА(ПлатежноеПоручениеИсходящее.Организация.КБЕ, 1, 1) КАК ОрганизацияПризнакРезидентства,
	|	ПОДСТРОКА(ПлатежноеПоручениеИсходящее.Организация.КБЕ, 2, 1) КАК ОрганизацияСекторЭкономики,    
	|	ВЫБОР КОГДА ПлатежноеПоручениеИсходящее.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо) ТОГДА
	|		ВЫБОР КОГДА ПлатежноеПоручениеИсходящее.Организация.ИностраннаяОрганизация = ЛОЖЬ ТОГДА
	|			""KZ""	
	|		ИНАЧЕ
	|			ЕСТЬNULL(ПлатежноеПоручениеИсходящее.Организация.СтранаРегистрации.КодАльфа2, """")
	|		КОНЕЦ
	|	ИНАЧЕ 
	|		ЕСТЬNULL(ГражданствоФизЛиц.Страна.КодАльфа2, """") КОНЕЦ КАК ОрганизацияКодСтраныРегистрации,
	|	ПлатежноеПоручениеИсходящее.ВключатьКомиссиюБанка КАК ВключатьКомиссиюБанка,
	|	ПлатежноеПоручениеИсходящее.СуммаДокумента КАК СуммаДокумента,
	|	ПлатежноеПоручениеИсходящее.СуммаКомиссии КАК СуммаКомиссии,	
	|   ВЫБОР
	|       КОГДА ПлатежноеПоручениеИсходящее.СуммаДокумента <> 0
	|           ТОГДА ПлатежноеПоручениеИсходящее.СуммаКомиссии / ПлатежноеПоручениеИсходящее.СуммаДокумента * 100
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПолучательПроцентКомиссииБанка,
	|	ВЫБОР КОГДА (ФИОФизЛицСрезПоследнихРуководитель.ФизЛицо) ЕСТЬ NULL  ТОГДА ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.ФизическоеЛицо.Наименование ИНАЧЕ ФИОФизЛицСрезПоследнихРуководитель.Фамилия + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Имя, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Имя, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Отчество, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Отчество, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ КОНЕЦ КАК ФИОРуководителя,
	|	ВЫБОР КОГДА (ФИОФизЛицСрезПоследнихГлБухгалтер.ФизЛицо) ЕСТЬ NULL  ТОГДА ОтветственныеЛицаОрганизацийСрезПоследнихГлБухгалтер.ФизическоеЛицо.Наименование ИНАЧЕ ФИОФизЛицСрезПоследнихГлБухгалтер.Фамилия + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБухгалтер.Имя, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБухгалтер.Имя, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБухгалтер.Отчество, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБухгалтер.Отчество, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ КОНЕЦ КАК ФИОГлБухгалтера,
	|	ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.Должность КАК ДолжностьРуководителя,
	|   ВЫБОР КОГДА ОтветственныеЛицаОрганизацийСрезПоследнихГлБухгалтер.Должность  ЕСТЬ NULL ТОГДА ""Не предусмотрен"" ИНАЧЕ ОтветственныеЛицаОрганизацийСрезПоследнихГлБухгалтер.Должность КОНЕЦ КАК ДолжностьГлБухгалтера,
	|	КодыОрганизацийВБанковскойСистеме.КодОрганизации КАК КодОрганизацииВБанковскойСистеме,
	// реквизиты платежного поручения
	|	ПлатежноеПоручениеИсходящее.Дата КАК ДатаПлатежногоПоручения,
	|	ПлатежноеПоручениеИсходящее.Номер КАК НомерПлатежногоПоручения,
	|	ПлатежноеПоручениеИсходящее.КодНазначенияПлатежа КАК КодНазначенияПлатежа,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.НазначениеПлатежа КАК СТРОКА(1000)) КАК НазначениеПлатежа,
	// реквизиты получателя
	|	ПлатежноеПоручениеИсходящее.Контрагент КАК ПолучательСсылка,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.Контрагент.НаименованиеПолное КАК СТРОКА(1000)) КАК ПолучательНаименованиеПолное,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента КАК ПолучательБанковскийСчетСсылка,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.НомерСчета КАК ПолучательБанковскийСчет,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк КАК ПолучательБанк,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк." + ИмяРеквизитаБИК + " КАК ПолучательБИК,
	|	ПлатежноеПоручениеИсходящее.Контрагент.ИдентификационныйКодЛичности КАК ПолучательИдентификационныйНомер,
	|	ПОДСТРОКА(ПлатежноеПоручениеИсходящее.Контрагент.КБЕ, 1, 1) КАК ПолучательПризнакРезидентства,
	|	ПОДСТРОКА(ПлатежноеПоручениеИсходящее.Контрагент.КБЕ, 2, 1) КАК ПолучательСекторЭкономики,
	|	ЕСТЬNULL(ПлатежноеПоручениеИсходящее.Контрагент.СтранаРезидентства.КодАльфа2, """") КАК ПолучательКодСтраныРегистрации";
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты Тогда
	Запрос.Текст = Запрос.Текст + ",
	// периоды выплаты
	|	ПериодыВыплаты.ПериодС,
	|	ПериодыВыплаты.ПериодПо";
	Иначе
	Запрос.Текст = Запрос.Текст + ",
	// периоды выплаты
	|	ПлатежноеПоручениеИсходящее.Дата КАК ПериодС,
	|	ПлатежноеПоручениеИсходящее.Дата КАК ПериодПо";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&парамДата, ОтветственноеЛицо = &парамРуководитель) КАК ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДата, ) КАК ФИОФизЛицСрезПоследнихРуководитель
	|			ПО ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.ФизическоеЛицо = ФИОФизЛицСрезПоследнихРуководитель.ФизЛицо
	|		ПО ПлатежноеПоручениеИсходящее." + СтруктурноеПодразделение + " = ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.СтруктурнаяЕдиница
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&парамДата, ОтветственноеЛицо = &парамГлавныйБухгалтер) КАК ОтветственныеЛицаОрганизацийСрезПоследнихГлБухгалтер
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДата, ) КАК ФИОФизЛицСрезПоследнихГлБухгалтер
	|			ПО ОтветственныеЛицаОрганизацийСрезПоследнихГлБухгалтер.ФизическоеЛицо = ФИОФизЛицСрезПоследнихГлБухгалтер.ФизЛицо
	|		ПО ПлатежноеПоручениеИсходящее." + СтруктурноеПодразделение + " = ОтветственныеЛицаОрганизацийСрезПоследнихГлБухгалтер.СтруктурнаяЕдиница
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыОрганизацийВБанковскойСистеме КАК КодыОрганизацийВБанковскойСистеме
	|		ПО КодыОрганизацийВБанковскойСистеме.Организация = ПлатежноеПоручениеИсходящее.Организация И КодыОрганизацийВБанковскойСистеме.Банк = ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамДата,) КАК ГражданствоФизЛиц	
	|		ПО ГражданствоФизЛиц.ФизЛицо = ПлатежноеПоручениеИсходящее.Организация.ИндивидуальныйПредприниматель";
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты Тогда
	Запрос.Текст = Запрос.Текст + "
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|							МИНИМУМ(ВЫБОР
	|										КОГДА ПеречислениеЗарплаты.ТекущиеВзаиморасчеты > 0 И ПеречислениеЗарплаты.ДепонированныеСуммы = 0
	|											ТОГДА ПеречислениеЗарплаты.МинПериодНачисленияЗарплаты
	|										КОГДА ПеречислениеЗарплаты.ДепонированныеСуммы > 0 И ПеречислениеЗарплаты.ТекущиеВзаиморасчеты = 0
	|											ТОГДА ПеречислениеЗарплаты.МинПериодНачисленияДепонированнойЗарплаты
	|										ИНАЧЕ ВЫБОР 
	|												КОГДА ПеречислениеЗарплаты.МинПериодНачисленияЗарплаты < ПеречислениеЗарплаты.МинПериодНачисленияДепонированнойЗарплаты
	|													ТОГДА ПеречислениеЗарплаты.МинПериодНачисленияЗарплаты
	|												ИНАЧЕ ПеречислениеЗарплаты.МинПериодНачисленияДепонированнойЗарплаты
	|					  						  КОНЕЦ
	|									КОНЕЦ) КАК ПериодС,
	|							МАКСИМУМ(ВЫБОР
	|										КОГДА ПеречислениеЗарплаты.ТекущиеВзаиморасчеты > 0 И ПеречислениеЗарплаты.ДепонированныеСуммы = 0
	|											ТОГДА ПеречислениеЗарплаты.МаксПериодНачисленияЗарплаты
	|										КОГДА ПеречислениеЗарплаты.ДепонированныеСуммы > 0 И ПеречислениеЗарплаты.ТекущиеВзаиморасчеты = 0
	|											ТОГДА ПеречислениеЗарплаты.МаксПериодНачисленияДепонированнойЗарплаты
	|										ИНАЧЕ ВЫБОР 
	|												КОГДА ПеречислениеЗарплаты.МаксПериодНачисленияЗарплаты > ПеречислениеЗарплаты.МаксПериодНачисленияДепонированнойЗарплаты
	|													ТОГДА ПеречислениеЗарплаты.МаксПериодНачисленияЗарплаты
	|												ИНАЧЕ ПеречислениеЗарплаты.МаксПериодНачисленияДепонированнойЗарплаты
	|					  						  КОНЕЦ
	|									КОНЕЦ) КАК ПериодПо
	|							ИЗ
	|								(ВЫБРАТЬ
	|										СУММА(ВЫБОР 
	|												КОГДА ПеречислениеЗарплаты.Ведомость.СпособРасчетаСуммКВыплате В (&парамСписокСпособовЗарплата)
	|													ТОГДА 1 
	|												ИНАЧЕ 0
	|								  		КОНЕЦ) КАК ТекущиеВзаиморасчеты,
	|										СУММА(ВЫБОР 
	|												КОГДА ПеречислениеЗарплаты.Ведомость.СпособРасчетаСуммКВыплате В (&парамСписокСпособовДепонированныеСуммы)
	|													ТОГДА 1 
	|												ИНАЧЕ 0
	|								  		КОНЕЦ) КАК ДепонированныеСуммы,
	|										МИНИМУМ(ПеречислениеЗарплаты.Ведомость.ПериодНачисленияЗарплаты) КАК МинПериодНачисленияЗарплаты,
	|										МАКСИМУМ(ПеречислениеЗарплаты.Ведомость.ПериодНачисленияЗарплаты) КАК МаксПериодНачисленияЗарплаты,	
	|										ВЫБОР КОГДА ПеречислениеЗарплаты.Ведомость.ПериодНачисленияДепонированнойЗарплаты = ДАТАВРЕМЯ(1,1,1) ТОГДА
	|				                        	МИНИМУМ(ПеречислениеЗарплаты.Ведомость.ПериодНачисленияЗарплаты)
	|                                       ИНАЧЕ 
	|											МИНИМУМ(ПеречислениеЗарплаты.Ведомость.ПериодНачисленияДепонированнойЗарплаты) КОНЕЦ КАК МинПериодНачисленияДепонированнойЗарплаты,
	|										ВЫБОР КОГДА ПеречислениеЗарплаты.Ведомость.ПериодНачисленияДепонированнойЗарплаты = ДАТАВРЕМЯ(1,1,1) ТОГДА
	|											МАКСИМУМ(ПеречислениеЗарплаты.Ведомость.ПериодНачисленияЗарплаты)		
	|										ИНАЧЕ МАКСИМУМ(ПеречислениеЗарплаты.Ведомость.ПериодНачисленияДепонированнойЗарплаты) КОНЕЦ КАК МаксПериодНачисленияДепонированнойЗарплаты
	|									
	|									ИЗ
	|										Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПеречислениеЗарплаты
	|									ГДЕ
	|										ПеречислениеЗарплаты.Ссылка = &парамДокументСсылка
	|									СГРУППИРОВАТЬ ПО
	|										ПеречислениеЗарплаты.Ведомость
	|								) КАК ПеречислениеЗарплаты
	|						) КАК ПериодыВыплаты
	|		ПО ИСТИНА";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "        
	|
	|ГДЕ
	|	ПлатежноеПоручениеИсходящее.Ссылка = &парамДокументСсылка";
	
	
	Возврат Запрос.Выполнить();
	
КонецФункции //СформироватьЗапросПоПлатежномуПоручениюКартСчета()

// Формирует запрос по платежному поручению для перечисления прочих выплат.
//
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоПлатежномуПоручениюПрочиеВыплаты()
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамДокументСсылка", Документ);
	Запрос.УстановитьПараметр("парамДата", Документ.Дата);
	Запрос.УстановитьПараметр("парамРуководитель", Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Запрос.УстановитьПараметр("парамГлавныйБухгалтер", Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтерДляПодписиБанковскихДокументов);
	Запрос.УстановитьПараметр("ВидПрочихВыплат", Справочники.ВидыПрочихВыплат.ПрофессиональнаяВыплатаЗаСчетРаботодателя);
	
	ИмяРеквизитаБИК = Справочники.Банки.ПолучитьИмяРеквизитаБИКБанка(Документ.Дата);
	ИмяКодБанкаВПлатежнойСистеме = Справочники.Банки.ПолучитьИмяРеквизитаКодБанкаВПлатежнойСистеме(Документ.Дата);
	
	УчетСтруктурныхПодразделений = Документ.Метаданные().Реквизиты.Найти("СтруктурноеПодразделениеОтправитель") <> Неопределено;
	Если УчетСтруктурныхПодразделений Тогда
		Если ЗначениеЗаполнено(Документ.СтруктурноеПодразделениеОтправитель) Тогда
			Если Документ.СтруктурноеПодразделениеОтправитель.УказыватьРеквизитыГоловнойОрганизации Тогда
				СтруктурнаяЕдиница = "Организация";
			Иначе
				СтруктурнаяЕдиница = "СтруктурноеПодразделениеОтправитель";
			КонецЕсли;
		Иначе
			СтруктурнаяЕдиница = "Организация";
		КонецЕсли;		
	Иначе
		СтруктурнаяЕдиница = "Организация";
	КонецЕсли;
	
	ВидОперации = Документ.ВидОперации;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлатежноеПоручениеИсходящее.Организация КАК Организация,                    
	|	ПлатежноеПоручениеИсходящее.ФактическийПлательщик КАК ФактическийПлательщик,
	|	ВЫБОР КОГДА ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.ТекстПлательщика КАК СТРОКА(1000)) = """" ТОГДА
	|		ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее." + СтруктурнаяЕдиница + ".НаименованиеПолное КАК СТРОКА(1000))	
	|	ИНАЧЕ 
	|		ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.ТекстПлательщика КАК СТРОКА(1000)) КОНЕЦ КАК ОрганизацияНаименованиеПолное,   
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации КАК ОрганизацияБанковскийСчетСсылка,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.НомерСчета КАК ОрганизацияБанковскийСчет,
	|	ПлатежноеПоручениеИсходящее." + СтруктурнаяЕдиница + ".ИдентификационныйНомер  КАК ОрганизацияИдентификационныйНомер,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк КАК БанкОрганизацииСсылка,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк." + ИмяРеквизитаБИК + " КАК ОрганизацияБИК,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк." + ИмяКодБанкаВПлатежнойСистеме + " КАК ОрганизацияКодБанкаВПлатежнойСистеме,
	|	ПОДСТРОКА(ПлатежноеПоручениеИсходящее.Организация.КБЕ, 1, 1) КАК ОрганизацияПризнакРезидентства,
	|	ПОДСТРОКА(ПлатежноеПоручениеИсходящее.Организация.КБЕ, 2, 1) КАК ОрганизацияСекторЭкономики,
	|	ВЫБОР КОГДА ПлатежноеПоручениеИсходящее.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо) ТОГДА
	|		ВЫБОР КОГДА ПлатежноеПоручениеИсходящее.Организация.ИностраннаяОрганизация = ЛОЖЬ ТОГДА
	|			""KZ""	
	|		ИНАЧЕ
	|			ЕСТЬNULL(ПлатежноеПоручениеИсходящее.Организация.СтранаРегистрации.КодАльфа2, """")
	|		КОНЕЦ
	|	ИНАЧЕ 
	|		ЕСТЬNULL(ГражданствоФизЛиц.Страна.КодАльфа2, """") КОНЕЦ КАК ОрганизацияКодСтраныРегистрации,
	|	ВЫБОР КОГДА (ФИОФизЛицСрезПоследнихРуководитель.ФизЛицо) ЕСТЬ NULL  ТОГДА ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.ФизическоеЛицо.Наименование ИНАЧЕ ФИОФизЛицСрезПоследнихРуководитель.Фамилия + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Имя, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Имя, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Отчество, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихРуководитель.Отчество, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ КОНЕЦ КАК ФИОРуководителя,
	|	ВЫБОР КОГДА (ФИОФизЛицСрезПоследнихГлБухгалтер.ФизЛицо) ЕСТЬ NULL  ТОГДА ОтветственныеЛицаОрганизацийСрезПоследнихГлБухгалтер.ФизическоеЛицо.Наименование ИНАЧЕ ФИОФизЛицСрезПоследнихГлБухгалтер.Фамилия + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБухгалтер.Имя, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБухгалтер.Имя, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБухгалтер.Отчество, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследнихГлБухгалтер.Отчество, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ КОНЕЦ КАК ФИОГлБухгалтера,
	|	ПлатежноеПоручениеИсходящее.Дата КАК ДатаПлатежногоПоручения,
	|	ПлатежноеПоручениеИсходящее.Номер КАК НомерПлатежногоПоручения,
	|	ПлатежноеПоручениеИсходящее.КодНазначенияПлатежа КАК КодНазначенияПлатежа,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.НазначениеПлатежа КАК СТРОКА(1000)) КАК НазначениеПлатежа,
	|	ПлатежноеПоручениеИсходящее.ВидОперации КАК ВидОперации,
	|	ВедомостьПеречислениеПрочихВыплат.ВидПрочихВыплат КАК ВидПлатежа,
	|	ВедомостьПеречислениеПрочихВыплат.ПериодВзаиморасчетов КАК ПериодПлатежа,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.НомерСчета КАК ГЦВПБанковскийСчет,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента КАК ГЦВПБанковскийСчетСсылка,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк." + ИмяРеквизитаБИК + " КАК ГЦВПБИК,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк КАК ГЦВПБанкСсылка,
	|	ПлатежноеПоручениеИсходящее.Контрагент КАК ГЦВПСсылка,
	|	ВЫРАЗИТЬ(ПлатежноеПоручениеИсходящее.Контрагент.НаименованиеПолное КАК СТРОКА(1000)) КАК ГЦВПНаименованиеПолное,
	|	ПлатежноеПоручениеИсходящее.Контрагент.ИдентификационныйКодЛичности КАК ГЦВПИдентификационныйНомер,
	|	ПОДСТРОКА(ПлатежноеПоручениеИсходящее.Контрагент.КБЕ, 1, 1) КАК ГЦВППризнакРезидентства,
	|	ПОДСТРОКА(ПлатежноеПоручениеИсходящее.Контрагент.КБЕ, 2, 1) КАК ГЦВПСекторЭкономики,
	|	ПлатежноеПоручениеИсходящее.Контрагент.СтранаРезидентства.КодАльфа2 КАК ГЦВПСтранаРезидентства
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&парамДата, ОтветственноеЛицо = &парамРуководитель) КАК ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДата, ) КАК ФИОФизЛицСрезПоследнихРуководитель
	|			ПО ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.ФизическоеЛицо = ФИОФизЛицСрезПоследнихРуководитель.ФизЛицо
	|		ПО ПлатежноеПоручениеИсходящее." + СтруктурнаяЕдиница + " = ОтветственныеЛицаОрганизацийСрезПоследнихРуководитель.СтруктурнаяЕдиница
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&парамДата, ОтветственноеЛицо = &парамГлавныйБухгалтер) КАК ОтветственныеЛицаОрганизацийСрезПоследнихГлБухгалтер
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДата, ) КАК ФИОФизЛицСрезПоследнихГлБухгалтер
	|			ПО ОтветственныеЛицаОрганизацийСрезПоследнихГлБухгалтер.ФизическоеЛицо = ФИОФизЛицСрезПоследнихГлБухгалтер.ФизЛицо
	|		ПО ПлатежноеПоручениеИсходящее." + СтруктурнаяЕдиница + " = ОтветственныеЛицаОрганизацийСрезПоследнихГлБухгалтер.СтруктурнаяЕдиница
	|		ЛЕВОЕ СОЕДИНЕНИЕ(ВЫБРАТЬ
	|					МИНИМУМ(ВедомостьПеречислениеПрочихВыплат.ПериодВзаиморасчетов) КАК ПериодВзаиморасчетов,
	|					МИНИМУМ(ВедомостьПеречислениеПрочихВыплат.ВидПрочихВыплат) КАК ВидПрочихВыплат
	|				ИЗ
	|					Документ.ВедомостьНаПеречислениеПрочихВыплат КАК ВедомостьПеречислениеПрочихВыплат
	|	
	|	    		ГДЕ
	|					ВедомостьПеречислениеПрочихВыплат.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							ПлатежноеПоручениеИсходящееПеречисление.Документ.Ссылка
	|						ИЗ
	|							Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПрочихВыплат КАК ПлатежноеПоручениеИсходящееПеречисление
	|			
	|						ГДЕ
	|							ПлатежноеПоручениеИсходящееПеречисление.Ссылка = &парамДокументСсылка)) КАК ВедомостьПеречислениеПрочихВыплат
	|		ПО ИСТИНА
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамДата,) КАК ГражданствоФизЛиц	
	|		ПО ГражданствоФизЛиц.ФизЛицо = ПлатежноеПоручениеИсходящее.Организация.ИндивидуальныйПредприниматель 
	|
	|ГДЕ
	|	ПлатежноеПоручениеИсходящее.Ссылка = &парамДокументСсылка";
		
	Возврат Запрос.Выполнить();
	
КонецФункции //СформироватьЗапросПоПлатежномуПоручениюКартСчета()

// Формирует запрос по спискам на перечисление из табличной части платежного поручения
//
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоСпискамНаПеречисление(ВидОперации, ВключатьПоляФорматаMX)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамДокументСсылка", Документ);
	Запрос.УстановитьПараметр("парамДата", Документ.Дата);  
	Запрос.УстановитьПараметр("ВключатьПоляФорматаMX", ВключатьПоляФорматаMX); 
	
	ВидОперацииДокумента =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ВидОперации");    
		  	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОПВПеречислениеВФонды.ФизЛицо КАК ФизЛицо,
	|	ОПВПеречислениеВФонды.ФизЛицо.Наименование КАК НаименованиеФизЛица,
	|	ВЫБОР
	|		КОГДА &ВключатьПоляФорматаMX
	|			ТОГДА ВЫБОР
	|					КОГДА ОПВПеречислениеВФонды.ФизЛицо.ИдентификационныйКодЛичности = """"
	|							И ОПВПеречислениеВФонды.Страна <> ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	|						ТОГДА ""000000000000""
	|					ИНАЧЕ ОПВПеречислениеВФонды.ФизЛицо.ИдентификационныйКодЛичности
	|				КОНЕЦ
	|		ИНАЧЕ ОПВПеречислениеВФонды.ФизЛицо.ИдентификационныйКодЛичности
	|	КОНЕЦ КАК ИдентификационныйНомер,
	|	ОПВПеречислениеВФонды.ФизЛицо.ДатаРождения КАК ДатаРождения,
	|	ВЫБОР
	|		КОГДА ОПВПеречислениеВФонды.Сумма ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ОПВПеречислениеВФонды.Сумма
	|	КОНЕЦ КАК СуммаКПеречислению,
	|	ФИОФизЛиц.Фамилия КАК Фамилия,
	|	ФИОФизЛиц.Имя КАК Имя,
	|	ФИОФизЛиц.Отчество КАК Отчество,
	|	ОПВПеречислениеВФонды.ПериодПлатежа КАК ПериодПлатежа
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо КАК ФизЛицо,
	|		ОПВПеречислениеВФондыПенсионныеВзносы.Страна,
	|		ОПВПеречислениеВФондыПенсионныеВзносы.ПериодПлатежа КАК ПериодПлатежа,
	|		СУММА(ОПВПеречислениеВФондыПенсионныеВзносы.Сумма) КАК Сумма
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВЫБОР
	|				КОГДА ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|					ТОГДА ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо
	|				ИНАЧЕ ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо.ФизЛицо
	|			КОНЕЦ КАК ФизЛицо,
	|			НАЧАЛОПЕРИОДА(ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК ПериодПлатежа,
	|			ОПВПеречислениеВФондыПенсионныеВзносы.Сумма КАК Сумма,
	|			ГражданствоФизЛиц.Страна КАК Страна
	|		ИЗ
	|			Документ.ОПВПеречислениеВФонды.ПенсионныеВзносы КАК ОПВПеречислениеВФондыПенсионныеВзносы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамДата, ) КАК ГражданствоФизЛиц
	|		ПО (ГражданствоФизЛиц.ФизЛицо = ВЫБОР
	|				КОГДА ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|					ТОГДА ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо
	|				ИНАЧЕ ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо.ФизЛицо
	|			КОНЕЦ)
	|		ГДЕ
	|			ОПВПеречислениеВФондыПенсионныеВзносы.Ссылка В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ.Ссылка
	|					ИЗ
	|						Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПенсионныхВзносов КАК ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов
	|					ГДЕ
	|						ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка = &парамДокументСсылка)) КАК ОПВПеречислениеВФондыПенсионныеВзносы
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ОПВПеречислениеВФондыПенсионныеВзносы.ФизЛицо,
	|		ОПВПеречислениеВФондыПенсионныеВзносы.Страна,
	|		ОПВПеречислениеВФондыПенсионныеВзносы.ПериодПлатежа) КАК ОПВПеречислениеВФонды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДата, ) КАК ФИОФизЛиц
	|		ПО (ФИОФизЛиц.ФизЛицо = ОПВПеречислениеВФонды.ФизЛицо)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФИОФизЛиц.Фамилия,
	|	ФИОФизЛиц.Имя,
	|	ФИОФизЛиц.Отчество";
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений Тогда
		Запрос.Текст = СтрЗаменить(СтрЗаменить(СтрЗаменить(Запрос.Текст, "ОПВПеречислениеВФонды", "СОПеречислениеВФонды"), "ПенсионныеВзносы", "СоциальныеОтчисления"), "ПеречислениеПенсионныхВзносов", "ПеречислениеСоциальныхОтчислений");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СОПеречислениеВФонды.ФизЛицо.ДатаРождения", "ВЫБОР 
																								|	КОГДА СОПеречислениеВФонды.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
																								|		ТОГДА СОПеречислениеВФонды.ФизЛицо.ДатаРождения 
																								|	ИНАЧЕ СОПеречислениеВФонды.ФизЛицо.ФизЛицо.ДатаРождения КОНЕЦ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФИОФизЛиц.ФизЛицо = СОПеречислениеВФонды.ФизЛицо", "ФИОФизЛиц.ФизЛицо = ВЫБОР 
																														|	КОГДА СОПеречислениеВФонды.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
																														|		ТОГДА СОПеречислениеВФонды.ФизЛицо 
																														|	ИНАЧЕ СОПеречислениеВФонды.ФизЛицо.ФизЛицо КОНЕЦ");  
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НАЧАЛОПЕРИОДА(СОПеречислениеВФондыСоциальныеОтчисления.Ссылка.ПериодРегистрации, МЕСЯЦ)", "ВЫБОР
																				               | КОГДА СОПеречислениеВФондыСоциальныеОтчисления.Ссылка.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОтчисленийОСМС))
																				               |	ТОГДА ВЫБОР
																				               |		КОГДА СОПеречислениеВФондыСоциальныеОтчисления.МесяцПериода = ДАТАВРЕМЯ(1, 1, 1)
																				               |			ТОГДА НАЧАЛОПЕРИОДА(СОПеречислениеВФондыСоциальныеОтчисления.Ссылка.ПериодРегистрации, МЕСЯЦ)
																				               |			ИНАЧЕ НАЧАЛОПЕРИОДА(СОПеречислениеВФондыСоциальныеОтчисления.МесяцПериода, МЕСЯЦ)
																				               |		КОНЕЦ
																				               |	ИНАЧЕ НАЧАЛОПЕРИОДА(СОПеречислениеВФондыСоциальныеОтчисления.Ссылка.ПериодРегистрации, МЕСЯЦ) КОНЕЦ");
			
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа Тогда 
		СписокПени = Новый Массив; 
		СписокПени.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.ПениАкт);
		СписокПени.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.ПениСам);
		Запрос.УстановитьПараметр("СписокПени", СписокПени);   	
		
		Запрос.Текст = СтрЗаменить(СтрЗаменить(СтрЗаменить(Запрос.Текст, "ОПВПеречислениеВФонды", "ЕППеречислениеВФонды"), "ПенсионныеВзносы", "ЕдиныеПлатежи"), "ПеречислениеПенсионныхВзносов", "ПеречислениеЕдиныхПлатежей");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЕППеречислениеВФонды.ФизЛицо.ДатаРождения", "ЕППеречислениеВФонды.ФизЛицо.ДатаРождения");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЕППеречислениеВФондыЕдиныеПлатежи.ФизЛицо.ФизЛицо", "ЕППеречислениеВФондыЕдиныеПлатежи.ФизЛицо");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НАЧАЛОПЕРИОДА(ЕППеречислениеВФондыЕдиныеПлатежи.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК ПериодПлатежа,", "НАЧАЛОПЕРИОДА(ЕППеречислениеВФондыЕдиныеПлатежи.МесяцНалоговогоПериода, МЕСЯЦ) КАК ПериодПлатежа,
																																					|ВЫБОР КОГДА ЕППеречислениеВФондыЕдиныеПлатежи.Ссылка.ВидПлатежа В(&СписокПени)ТОГДА ЕППеречислениеВФондыЕдиныеПлатежи.Сумма ИНАЧЕ ЕППеречислениеВФондыЕдиныеПлатежи.СуммаПлатежа КОНЕЦ КАК СуммаПлатежа,
																																					|ЕППеречислениеВФондыЕдиныеПлатежи.ВключаетОПВ КАК ВключаетОПВ,
																																					|ЕППеречислениеВФондыЕдиныеПлатежи.ВключаетВОСМС КАК ВключаетВОСМС,
																																					|ЕППеречислениеВФондыЕдиныеПлатежи.ВключаетСО КАК ВключаетСО,
																																					|ЕППеречислениеВФондыЕдиныеПлатежи.ВключаетООСМС КАК ВключаетООСМС,
																																					|ЕППеречислениеВФондыЕдиныеПлатежи.ВключаетОПВР КАК ВключаетОПВР,
																																					|");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЕППеречислениеВФондыЕдиныеПлатежи.ПериодПлатежа КАК ПериодПлатежа", "ЕППеречислениеВФондыЕдиныеПлатежи.ПериодПлатежа КАК ПериодПлатежа,
																														|СУММА(ЕППеречислениеВФондыЕдиныеПлатежи.СуммаПлатежа) КАК СуммаПлатежа,
																														|МАКСИМУМ(ЕППеречислениеВФондыЕдиныеПлатежи.ВключаетОПВ) КАК ВключаетОПВ,
																														|МАКСИМУМ(ЕППеречислениеВФондыЕдиныеПлатежи.ВключаетВОСМС) КАК ВключаетВОСМС,
																														|МАКСИМУМ(ЕППеречислениеВФондыЕдиныеПлатежи.ВключаетСО) КАК ВключаетСО,
																														|МАКСИМУМ(ЕППеречислениеВФондыЕдиныеПлатежи.ВключаетООСМС) КАК ВключаетООСМС,
																														|МАКСИМУМ(ЕППеречислениеВФондыЕдиныеПлатежи.ВключаетОПВР) КАК ВключаетОПВР
																														|");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЕППеречислениеВФонды.ПериодПлатежа КАК ПериодПлатежа", "ЕППеречислениеВФонды.ПериодПлатежа КАК ПериодПлатежа,
																														|ЕППеречислениеВФонды.СуммаПлатежа КАК СуммаПлатежа,
																														|ЕППеречислениеВФонды.ВключаетОПВ КАК ВключаетОПВ,
																														|ЕППеречислениеВФонды.ВключаетВОСМС КАК ВключаетВОСМС,
																														|ЕППеречислениеВФонды.ВключаетСО КАК ВключаетСО,
																														|ЕППеречислениеВФонды.ВключаетООСМС КАК ВключаетООСМС,
																														|ЕППеречислениеВФонды.ВключаетОПВР КАК ВключаетОПВР
																														|");
		
	КонецЕсли;
		
	Возврат Запрос.Выполнить();
	
КонецФункции //СформироватьЗапросПоСпискамНаПеречисление()

// Формирует запрос по платежным ведомостям из табличной части платежного поручения
//
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоКартСчетам(ВидОперации, ВключатьПоляФорматаMX)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("парамДокументСсылка", Документ);
	Запрос.УстановитьПараметр("парамДата", Документ.Дата);
	Запрос.УстановитьПараметр("ВключатьПоляФорматаMX", ВключатьПоляФорматаMX);
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗаработнойПлаты Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ВладелецСчета.Ссылка, ЕСТЬNULL(ФизическиеЛица.Ссылка, Значение(Справочник.ФизическиеЛица.ПустаяСсылка))) КАК ФизЛицо,
		|	ЕСТЬNULL(ВладелецСчета.Наименование, ЕСТЬNULL(ФизическиеЛица.Наименование, """")) КАК НаименованиеФизЛица,
		|	ВЫБОР
		|		КОГДА &ВключатьПоляФорматаMX
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(ВладелецСчета.ИдентификационныйКодЛичности, ЕСТЬNULL(ФизическиеЛица.ИдентификационныйКодЛичности, """")) = """"
		|							И ЕСТЬNULL(ГражданствоВладелецСчета.Страна, ЕСТЬNULL(ГражданствоФизЛиц.Страна, """")) <> ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
		|						ТОГДА ""000000000000""
		|					ИНАЧЕ ЕСТЬNULL(ВладелецСчета.ИдентификационныйКодЛичности, ЕСТЬNULL(ФизическиеЛица.ИдентификационныйКодЛичности, """"))
		|				КОНЕЦ
		|		ИНАЧЕ ЕСТЬNULL(ВладелецСчета.ИдентификационныйКодЛичности, ЕСТЬNULL(ФизическиеЛица.ИдентификационныйКодЛичности, """"))
		|	КОНЕЦ КАК ИдентификационныйНомер,
		|	ЕСТЬNULL(КартСчета.НомерСчета, """") КАК НомерКартСчета,
		|	ПлатежноеПоручениеИсходящее.СчетКонтрагента КАК СчетКонтрагентаСсылка,
		|	ЕСТЬNULL(БанковскиеСчета.Банк, ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)) КАК БанкКонтрагентаСсылка,
		|	ЕСТЬNULL(Банки.Наименование, """") КАК БанкКонтрагента,
		|	ЕСТЬNULL(ФИОВладелецСчета.Фамилия, ФИОФизЛиц.Фамилия) КАК Фамилия,
		|	ЕСТЬNULL(ФИОВладелецСчета.Имя, ФИОФизЛиц.Имя) КАК Имя,
		|	ЕСТЬNULL(ФИОВладелецСчета.Отчество, ФИОФизЛиц.Отчество) КАК Отчество,
		|	ЗарплатаКВыплатеОрганизаций.Сумма КАК СуммаКПеречислению,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(КартСчета.НеЯвляетсяВладельцемСчета, Ложь)
		|			ТОГДА ЕСТЬNULL(ГражданствоВладелецСчета.Страна.КодАльфа2, """")
		|		ИНАЧЕ ЕСТЬNULL(ГражданствоФизЛиц.Страна.КодАльфа2, """")
		|	КОНЕЦ КАК ФизЛицоКодСтраны,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(КартСчета.НеЯвляетсяВладельцемСчета, Ложь) ТОГДА
		|			ВЫБОР
		|				КОГДА ЕСТЬNULL(ГражданствоВладелецСчета.Страна, """") = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
		|					ТОГДА ""1""
		|				ИНАЧЕ ""2""
		|			КОНЕЦ
		|		ИНАЧЕ
		|			ВЫБОР
		|				КОГДА ЕСТЬNULL(ГражданствоФизЛиц.Страна, """") = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
		|					ТОГДА ""1""
		|				ИНАЧЕ ""2""
		|			КОНЕЦ
		|	КОНЕЦ КАК ФизЛицоПризнакРезидентства,
		|	""9"" КАК ФизЛицоСекторЭкономики
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо КАК ФизЛицо,
		|		ЗарплатаКВыплатеОрганизацийЗарплата.НомерКартСчета КАК НомерКартСчета,
		|		СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.СуммаКВыплате) КАК Сумма
		|	ИЗ
		|		Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
		|	ГДЕ
		|		ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость
		|				ИЗ
		|					Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты
		|				ГДЕ
		|					ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка = &парамДокументСсылка)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо,
		|		ЗарплатаКВыплатеОрганизацийЗарплата.НомерКартСчета) КАК ЗарплатаКВыплатеОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КартСчета КАК КартСчета
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ВладелецСчета
		|			ПО (КартСчета.НеЯвляетсяВладельцемСчета)
		|				И (ВладелецСчета.Ссылка = КартСчета.ФизЛицоВладелецСчета)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДата, ) КАК ФИОВладелецСчета
		|			ПО (КартСчета.НеЯвляетсяВладельцемСчета)
		|				И (ФИОВладелецСчета.ФизЛицо = КартСчета.ФизЛицоВладелецСчета)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамДата, ) КАК ГражданствоВладелецСчета
		|			ПО (КартСчета.НеЯвляетсяВладельцемСчета)
		|				И (ГражданствоВладелецСчета.ФизЛицо = КартСчета.ФизЛицоВладелецСчета)
		|		ПО (КартСчета.Ссылка = ЗарплатаКВыплатеОрганизаций.НомерКартСчета)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО (ФизическиеЛица.Ссылка = ЗарплатаКВыплатеОрганизаций.ФизЛицо)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДата, ) КАК ФИОФизЛиц
		|		ПО (ФИОФизЛиц.ФизЛицо = ЗарплатаКВыплатеОрганизаций.ФизЛицо)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
		|				ПО (Банки.Ссылка = БанковскиеСчета.Банк)
		|			ПО (БанковскиеСчета.Ссылка = ПлатежноеПоручениеИсходящее.СчетКонтрагента)
		|		ПО (ПлатежноеПоручениеИсходящее.Ссылка = &парамДокументСсылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамДата, ) КАК ГражданствоФизЛиц
		|		ПО (ГражданствоФизЛиц.ФизЛицо = ЗарплатаКВыплатеОрганизаций.ФизЛицо)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Фамилия,
		|	Имя,
		|	Отчество";
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ВладелецСчета.Ссылка, ЕСТЬNULL(ФизическиеЛица.Ссылка, Значение(Справочник.ФизическиеЛица.ПустаяСсылка))) КАК ФизЛицо,
		|	ЕСТЬNULL(ВладелецСчета.Наименование, ЕСТЬNULL(ФизическиеЛица.Наименование, """")) КАК НаименованиеФизЛица,
		|	ВЫБОР
		|		КОГДА &ВключатьПоляФорматаMX
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(ВладелецСчета.ИдентификационныйКодЛичности, ЕСТЬNULL(ФизическиеЛица.ИдентификационныйКодЛичности, """")) = """"
		|							И ЕСТЬNULL(ГражданствоВладелецСчета.Страна, ЕСТЬNULL(ГражданствоФизЛиц.Страна, """")) <> ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
		|						ТОГДА ""000000000000""
		|					ИНАЧЕ ЕСТЬNULL(ВладелецСчета.ИдентификационныйКодЛичности, ЕСТЬNULL(ФизическиеЛица.ИдентификационныйКодЛичности, """"))
		|				КОНЕЦ
		|		ИНАЧЕ ЕСТЬNULL(ВладелецСчета.ИдентификационныйКодЛичности, ЕСТЬNULL(ФизическиеЛица.ИдентификационныйКодЛичности, """"))
		|	КОНЕЦ КАК ИдентификационныйНомер,
		|	ЕСТЬNULL(КартСчета.НомерСчета, """") КАК НомерКартСчета,
		|	ПлатежноеПоручениеИсходящее.СчетКонтрагента КАК СчетКонтрагентаСсылка,
		|	ЕСТЬNULL(БанковскиеСчета.Банк, ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)) КАК БанкКонтрагентаСсылка,
		|	ЕСТЬNULL(Банки.Наименование, """") КАК БанкКонтрагента,
		|	ЕСТЬNULL(ФИОВладелецСчета.Фамилия, ФИОФизЛиц.Фамилия) КАК Фамилия,
		|	ЕСТЬNULL(ФИОВладелецСчета.Имя, ФИОФизЛиц.Имя) КАК Имя,
		|	ЕСТЬNULL(ФИОВладелецСчета.Отчество, ФИОФизЛиц.Отчество) КАК Отчество,
		|	СУММА(ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.СуммаПлатежа) КАК СуммаКПеречислению,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(КартСчета.НеЯвляетсяВладельцемСчета, Ложь)
		|			ТОГДА ЕСТЬNULL(ГражданствоВладелецСчета.Страна.КодАльфа2, """")
		|		ИНАЧЕ ЕСТЬNULL(ГражданствоФизЛиц.Страна.КодАльфа2, """")
		|	КОНЕЦ КАК ФизЛицоКодСтраны,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(КартСчета.НеЯвляетсяВладельцемСчета, Ложь) ТОГДА
		|			ВЫБОР
		|				КОГДА ЕСТЬNULL(ГражданствоВладелецСчета.Страна, """") = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
		|					ТОГДА ""1""
		|				ИНАЧЕ ""2""
		|			КОНЕЦ
		|		ИНАЧЕ
		|			ВЫБОР
		|				КОГДА ЕСТЬNULL(ГражданствоФизЛиц.Страна, """") = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
		|					ТОГДА ""1""
		|				ИНАЧЕ ""2""
		|			КОНЕЦ
		|	КОНЕЦ КАК ФизЛицоПризнакРезидентства,
		|	""9"" КАК ФизЛицоСекторЭкономики
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеВПодотчет КАК ПлатежноеПоручениеИсходящееПеречислениеВПодотчет
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
		|				ПО (Банки.Ссылка = БанковскиеСчета.Банк)
		|			ПО (БанковскиеСчета.Ссылка = ПлатежноеПоручениеИсходящее.СчетКонтрагента)
		|		ПО (ПлатежноеПоручениеИсходящее.Ссылка = ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КартСчета КАК КартСчета
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ВладелецСчета
		|			ПО (КартСчета.НеЯвляетсяВладельцемСчета)
		|				И (ВладелецСчета.Ссылка = КартСчета.ФизЛицоВладелецСчета)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДата, ) КАК ФИОВладелецСчета
		|			ПО (КартСчета.НеЯвляетсяВладельцемСчета)
		|				И (ФИОВладелецСчета.ФизЛицо = КартСчета.ФизЛицоВладелецСчета)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамДата, ) КАК ГражданствоВладелецСчета
		|			ПО (КартСчета.НеЯвляетсяВладельцемСчета)
		|				И (ГражданствоВладелецСчета.ФизЛицо = КартСчета.ФизЛицоВладелецСчета)
		|		ПО (КартСчета.Ссылка = ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.НомерКартСчета)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО (ФизическиеЛица.Ссылка = ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.ФизЛицо)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДата, ) КАК ФИОФизЛиц
		|		ПО (ФИОФизЛиц.ФизЛицо = ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.ФизЛицо)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамДата, ) КАК ГражданствоФизЛиц
		|		ПО (ГражданствоФизЛиц.ФизЛицо = ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.ФизЛицо)
		|ГДЕ
		|	ПлатежноеПоручениеИсходящееПеречислениеВПодотчет.Ссылка = &парамДокументСсылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(ВладелецСчета.Ссылка, ЕСТЬNULL(ФизическиеЛица.Ссылка, Значение(Справочник.ФизическиеЛица.ПустаяСсылка))),
		|	ЕСТЬNULL(ВладелецСчета.Наименование, ЕСТЬNULL(ФизическиеЛица.Наименование, """")),
		|	ЕСТЬNULL(КартСчета.НомерСчета, """"),
		|	ПлатежноеПоручениеИсходящее.СчетКонтрагента,
		|	ЕСТЬNULL(БанковскиеСчета.Банк, ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)),
		|	ЕСТЬNULL(Банки.Наименование, """"),
		|	ЕСТЬNULL(ФИОВладелецСчета.Фамилия, ФИОФизЛиц.Фамилия),
		|	ЕСТЬNULL(ФИОВладелецСчета.Имя, ФИОФизЛиц.Имя),
		|	ЕСТЬNULL(ФИОВладелецСчета.Отчество, ФИОФизЛиц.Отчество),
		|	ВЫБОР
		|		КОГДА &ВключатьПоляФорматаMX
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(ВладелецСчета.ИдентификационныйКодЛичности, ЕСТЬNULL(ФизическиеЛица.ИдентификационныйКодЛичности, """")) = """"
		|							И ЕСТЬNULL(ГражданствоВладелецСчета.Страна, ЕСТЬNULL(ГражданствоФизЛиц.Страна, """")) <> ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
		|						ТОГДА ""000000000000""
		|					ИНАЧЕ ЕСТЬNULL(ВладелецСчета.ИдентификационныйКодЛичности, ЕСТЬNULL(ФизическиеЛица.ИдентификационныйКодЛичности, """"))
		|				КОНЕЦ
		|		ИНАЧЕ ЕСТЬNULL(ВладелецСчета.ИдентификационныйКодЛичности, ЕСТЬNULL(ФизическиеЛица.ИдентификационныйКодЛичности, """"))
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(КартСчета.НеЯвляетсяВладельцемСчета, Ложь) ТОГДА
		|			ВЫБОР
		|				КОГДА ЕСТЬNULL(ГражданствоВладелецСчета.Страна, """") = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
		|					ТОГДА ""1""
		|				ИНАЧЕ ""2""
		|			КОНЕЦ
		|		ИНАЧЕ
		|			ВЫБОР
		|				КОГДА ЕСТЬNULL(ГражданствоФизЛиц.Страна, """") = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
		|					ТОГДА ""1""
		|				ИНАЧЕ ""2""
		|			КОНЕЦ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(КартСчета.НеЯвляетсяВладельцемСчета, Ложь)
		|			ТОГДА ЕСТЬNULL(ГражданствоВладелецСчета.Страна.КодАльфа2, """")
		|		ИНАЧЕ ЕСТЬNULL(ГражданствоФизЛиц.Страна.КодАльфа2, """")
		|	КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Фамилия,
		|	Имя,
		|	Отчество";
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
	
КонецФункции //СформироватьЗапросПоКартСчетам()

// Формирует запрос по платежным ведомостям из табличной части платежного поручения
//
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоПрочимВыплатам(ВидОперации, ВключатьПоляФорматаMX)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамДокументСсылка", Документ);
	Запрос.УстановитьПараметр("парамДата", Документ.Дата); 
	Запрос.УстановитьПараметр("ВидПрочихВыплат", Справочники.ВидыПрочихВыплат.ПрофессиональнаяВыплатаЗаСчетРаботодателя);     
	Запрос.УстановитьПараметр("ВключатьПоляФорматаMX", ВключатьПоляФорматаMX);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПеречислениеПрочихВыплат.ФизЛицо КАК ФизЛицо,
	|	ПеречислениеПрочихВыплат.ФизЛицо.Наименование КАК НаименованиеФизЛица,
	|	ВЫБОР
	|		КОГДА &ВключатьПоляФорматаMX
	|			ТОГДА ВЫБОР
	|					КОГДА ПеречислениеПрочихВыплат.ФизЛицо.ИдентификационныйКодЛичности = """"
	|							И ПеречислениеПрочихВыплат.Страна <> ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)
	|						ТОГДА ""000000000000""
	|					ИНАЧЕ ПеречислениеПрочихВыплат.ФизЛицо.ИдентификационныйКодЛичности
	|				КОНЕЦ
	|		ИНАЧЕ ПеречислениеПрочихВыплат.ФизЛицо.ИдентификационныйКодЛичности
	|	КОНЕЦ КАК ИдентификационныйНомер,
	|	ПеречислениеПрочихВыплат.ФизЛицо.ДатаРождения КАК ДатаРождения,
	|	ВЫБОР
	|		КОГДА ПеречислениеПрочихВыплат.Сумма ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ПеречислениеПрочихВыплат.Сумма
	|	КОНЕЦ КАК СуммаКПеречислению,
	|	ФИОФизЛиц.Фамилия КАК Фамилия,
	|	ФИОФизЛиц.Имя КАК Имя,
	|	ФИОФизЛиц.Отчество КАК Отчество,
	|	ПеречислениеПрочихВыплат.ПериодВзаиморасчетов КАК ПериодПлатежа,
	|	ПеречислениеПрочихВыплат.ВидПрочихВыплат КАК ВидПлатежа
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты.ФизЛицо КАК ФизЛицо,
	|		ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|		ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты.ВидПрочихВыплат КАК ВидПрочихВыплат,
	|		ГражданствоФизЛиц.Страна,
	|		СУММА(ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты.Сумма) КАК Сумма
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты.ФизЛицо КАК ФизЛицо,
	|			НАЧАЛОПЕРИОДА(ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты.ПериодВзаиморасчетов, МЕСЯЦ) КАК ПериодВзаиморасчетов,
	|			ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты.Ссылка.ВидПрочихВыплат КАК ВидПрочихВыплат,
	|			ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты.Сумма КАК Сумма
	|		ИЗ
	|			Документ.ВедомостьНаПеречислениеПрочихВыплат.ПрочиеВыплаты КАК ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты
	|		ГДЕ
	|			ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты.Ссылка В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ПлатежноеПоручениеИсходящееПеречислениеПрочихВыплат.Документ.Ссылка
	|					ИЗ
	|						Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПрочихВыплат КАК ПлатежноеПоручениеИсходящееПеречислениеПрочихВыплат
	|					ГДЕ
	|						ПлатежноеПоручениеИсходящееПеречислениеПрочихВыплат.Ссылка = &парамДокументСсылка)) КАК ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамДата, ) КАК ГражданствоФизЛиц
	|			ПО (ГражданствоФизЛиц.ФизЛицо = ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты.ФизЛицо)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты.ФизЛицо,
	|		ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты.ПериодВзаиморасчетов,
	|		ГражданствоФизЛиц.Страна,
	|		ВедомостьНаПеречислениеПрочихВыплатПрочиеВыплаты.ВидПрочихВыплат) КАК ПеречислениеПрочихВыплат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&парамДата, ) КАК ФИОФизЛиц
	|		ПО (ФИОФизЛиц.ФизЛицо = ПеречислениеПрочихВыплат.ФизЛицо)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФИОФизЛиц.Фамилия,
	|	ФИОФизЛиц.Имя,
	|	ФИОФизЛиц.Отчество";
			
	Возврат Запрос.Выполнить();
	
КонецФункции //СформироватьЗапросПоПрочимВыплатам()

// Проверяет правильность заполнения реквизитов платежного поручения
// Параметры: 
//  ВыборкаПоПлатежномуПоручению - выборка из результата запроса по платежному поручению,
//  Отказ 						 - флаг отказа в формировании файла
//
Процедура ПроверитьЗаполнениеРеквизитовПлатежногоПоручения(ВыборкаПоПлатежномуПоручению, Отказ, ВключатьПоляФорматаMX)
	
	ВидОперации = Документ.ВидОперации;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ОрганизацияНаименованиеПолное) Тогда
		ТекстСообщения = НСтр("ru = 'Не указана полное наименование организации %1, по которой формируется swift-файл'");
		ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаПоПлатежномуПоручению.Организация), ВыборкаПоПлатежномуПоручению.Организация);
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ОрганизацияИдентификационныйНомер) Тогда
		ТекстСообщения = НСтр("ru = 'Для организации %1 не указан ""БИН/ИИН""'");
		ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаПоПлатежномуПоручению.Организация), ВыборкаПоПлатежномуПоручению.Организация);
		Отказ = Истина;
		
	ИначеЕсли СтрДлина(СокрЛП(ВыборкаПоПлатежномуПоручению.ОрганизацияИдентификационныйНомер)) < 12 Тогда
		ТекстСообщения = НСтр("ru = 'Длина ""БИН/ИИН"", указанного для организации %1, менее 12 знаков'");
		ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаПоПлатежномуПоручению.Организация), ВыборкаПоПлатежномуПоручению.Организация);
		Отказ = Истина;
	КонецЕсли;
	
	// Признак резидентства и код сектора экономики организации
	Если Не ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ОрганизацияПризнакРезидентства) Или Не ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ОрганизацияСекторЭкономики) Тогда
		ТекстСообщения = НСтр("ru = 'Для организации %1 не указан КБе (состоит из 2-х знаков)'");
		ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаПоПлатежномуПоручению.Организация), ВыборкаПоПлатежномуПоручению.Организация);
		Отказ = Истина;
	КонецЕсли;
	
	Если ВключатьПоляФорматаMX Тогда
		// Признак резидентства и страна резиденства
		Если ВыборкаПоПлатежномуПоручению.ОрганизацияПризнакРезидентства = "2" И Не ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ОрганизацияКодСтраныРегистрации) Тогда
			ТекстСообщения = НСтр("ru = 'Для организации %1 с признаком резидентства ""2"" в поле ""КБе"", не заполнена страна регистрации/гражданства. Проверьте корректность заполненных данных.'");
			ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаПоПлатежномуПоручению.Организация), ВыборкаПоПлатежномуПоручению.Организация);
			Отказ = Истина;
		КонецЕсли;
		
		// Признак резидентства и страна резиденства
		Если ВыборкаПоПлатежномуПоручению.ОрганизацияПризнакРезидентства = "1" И ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ОрганизацияКодСтраныРегистрации) И ВыборкаПоПлатежномуПоручению.ОрганизацияКодСтраныРегистрации <> "KZ" Тогда
			ТекстСообщения = НСтр("ru = 'Для организации %1 с признаком резидентства ""1"" в поле ""КБе"", страна регистрации/гражданства должна быть не заполнена, или заполнена значением ""Казахстан"". Проверьте корректность заполненных данных.'");
			ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаПоПлатежномуПоручению.Организация), ВыборкаПоПлатежномуПоручению.Организация);
			Отказ = Истина;
		КонецЕсли;
		
		// Признак резидентства и страна резиденства
		Если ВыборкаПоПлатежномуПоручению.ОрганизацияПризнакРезидентства = "2" И ВыборкаПоПлатежномуПоручению.ОрганизацияКодСтраныРегистрации = "KZ" Тогда
			ТекстСообщения = НСтр("ru = 'Для организации %1 с признаком резидентства ""2"" в поле ""КБе"", страна регистрации/гражданства должна быть заполнена значением, отличным от ""Казахстан"". Проверьте корректность заполненных данных.'");
			ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаПоПлатежномуПоручению.Организация), ВыборкаПоПлатежномуПоручению.Организация);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Счет организации
	Если Не ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ОрганизацияБанковскийСчетСсылка) Тогда
		ТекстСообщения = НСтр("ru = 'В платежном поручении %1 не указан банковский счет'");
		ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Документ), Документ);
		Отказ = Истина;
		
	Иначе
		// номер счета
		Если Не ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ОрганизацияБанковскийСчет) Тогда
			ТекстСообщения = НСтр("ru = 'Для банковского счета %1 не указан номер расчетного счета'");
			ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаПоПлатежномуПоручению.ОрганизацияБанковскийСчетСсылка), ВыборкаПоПлатежномуПоручению.ОрганизацияБанковскийСчетСсылка);
			Отказ = Истина;
		КонецЕсли;
		
		// банк, в котором открыт расчетный счет
		Если Не ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.БанкОрганизацииСсылка) Тогда
			ТекстСообщения = НСтр("ru = 'Для банковского счета %1 не указан банк, в котором открыт расчетный счет организации'");
			ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаПоПлатежномуПоручению.ОрганизацияБанковскийСчетСсылка), ВыборкаПоПлатежномуПоручению.ОрганизацияБанковскийСчетСсылка);
			Отказ = Истина;
			
		Иначе
			// БИК банка организации
			Если Не ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ОрганизацияБИК) Тогда
				ТекстСообщения = НСтр("ru = 'Для банка %1 не указан БИК банка, в котором открыт расчетный счет организации'");
				ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаПоПлатежномуПоручению.БанкОрганизацииСсылка), ВыборкаПоПлатежномуПоручению.БанкОрганизацииСсылка);
				Отказ = Истина;
			КонецЕсли;
			
			// Код банка организации в платежной системе
			Если Не ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ОрганизацияКодБанкаВПлатежнойСистеме) Тогда
				ТекстСообщения = НСтр("ru = 'Не указан код в платежной системе банка %1, в котором открыт расчетный счет организации'");
				ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаПоПлатежномуПоручению.БанкОрганизацииСсылка), ВыборкаПоПлатежномуПоручению.БанкОрганизацииСсылка);
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Руководитель организации
	Если Не ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ФИОРуководителя) Тогда
		ТекстСообщения = НСтр("ru = 'В регистре сведений ""Ответственные лица организации"" не указан руководитель для организации'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов
		Или ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений
		Или ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа
		Или ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПрочихВыплат Тогда
		
		ЭтоЕП = (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа);
		
		// ГЦВП
		Если Не ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ГЦВПСсылка) Тогда
			
			Если ЭтоЕП Тогда
				ТекстСообщения = НСтр("ru = 'Не указана Госкорпорация в платежном поручении %1'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Не указан ГЦВП в платежном поручении %1'");
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Документ), Документ);
			Отказ = Истина;
			
		Иначе
			// Полное наименование ГЦВП
			Если Не ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ГЦВПНаименованиеПолное) Тогда
				ТекстСообщения = НСтр("ru = 'Не указано полное наименование для %1'");
				ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаПоПлатежномуПоручению.ГЦВПСсылка), ВыборкаПоПлатежномуПоручению.ГЦВПСсылка);
				Отказ = Истина;
			КонецЕсли;
			
			// ИдентификационныйНомер ГЦВП
			Если Не ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ГЦВПИдентификационныйНомер) Тогда
				ТекстСообщения = НСтр("ru = 'Не указан БИН/ИИН для %1'");
				ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаПоПлатежномуПоручению.ГЦВПСсылка), ВыборкаПоПлатежномуПоручению.ГЦВПСсылка);
				Отказ = Истина;
				
			ИначеЕсли СтрДлина(СокрЛП(ВыборкаПоПлатежномуПоручению.ГЦВПИдентификационныйНомер)) < 12 Тогда
				ТекстСообщения = НСтр("ru = 'Длина БИН/ИИН для %1 меньше 12 знаков'");
				ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаПоПлатежномуПоручению.ГЦВПСсылка), ВыборкаПоПлатежномуПоручению.ГЦВПСсылка);
				Отказ = Истина;
			КонецЕсли;
			
			// Признак резидентства и код сектора экономики ГЦВП
			Если Не ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ГЦВППризнакРезидентства) Или Не ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ГЦВПСекторЭкономики) Тогда
				ТекстСообщения = НСтр("ru = 'Для %1 не заполнен КБе (должен быть из 2 знаков)'");
				ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаПоПлатежномуПоручению.ГЦВПСсылка), ВыборкаПоПлатежномуПоручению.ГЦВПСсылка);
				Отказ = Истина;
			КонецЕсли;
			
			Если ВключатьПоляФорматаMX Тогда
				// Признак резидентства и страна резиденства
				Если ВыборкаПоПлатежномуПоручению.ГЦВППризнакРезидентства = "2" И Не ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ГЦВПСтранаРезидентства) Тогда
					ТекстСообщения = НСтр("ru = 'Для получателя %1 с признаком резидентства ""2"" в поле ""КБе"", не заполнена страна регистрации/гражданства. Проверьте корректность заполненных данных.'");
					ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаПоПлатежномуПоручению.ГЦВПСсылка), ВыборкаПоПлатежномуПоручению.ГЦВПСсылка);
					Отказ = Истина;
				КонецЕсли;
				
				// Признак резидентства и страна резиденства
				Если ВыборкаПоПлатежномуПоручению.ГЦВППризнакРезидентства = "1" И ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ГЦВПСтранаРезидентства) И ВыборкаПоПлатежномуПоручению.ГЦВПСтранаРезидентства <> "KZ" Тогда
					ТекстСообщения = НСтр("ru = 'Для получателя %1 с признаком резидентства ""1"" в поле ""КБе"", страна регистрации/гражданства должна быть не заполнена, или заполнена значением ""Казахстан"". Проверьте корректность заполненных данных.'");
					ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаПоПлатежномуПоручению.ГЦВПСсылка), ВыборкаПоПлатежномуПоручению.ГЦВПСсылка);
					Отказ = Истина;
				КонецЕсли;
				
				// Признак резидентства и страна резиденства
				Если ВыборкаПоПлатежномуПоручению.ГЦВППризнакРезидентства = "2" И ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ГЦВПСтранаРезидентства) И ВыборкаПоПлатежномуПоручению.ГЦВПСтранаРезидентства = "KZ" Тогда
					ТекстСообщения = НСтр("ru = 'Для получателя %1 с признаком резидентства ""2"" в поле ""КБе"", страна регистрации/гражданства должна быть заполнена значением, отличным от ""Казахстан"". Проверьте корректность заполненных данных.'");
					ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаПоПлатежномуПоручению.ГЦВПСсылка), ВыборкаПоПлатежномуПоручению.ГЦВПСсылка);
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		// Счет ГЦВП
		Если Не ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ГЦВПБанковскийСчетСсылка) Тогда
			Если ЭтоЕП Тогда
				ТекстСообщения = НСтр("ru = 'В платежном поручении %1 не указан расчетный счет Госкорпорации'");
			Иначе
				ТекстСообщения = НСтр("ru = 'В платежном поручении %1 не указан расчетный счет ГЦВП'");
			КонецЕсли;
			ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Документ));
			Отказ = Истина;
			
		Иначе
			// Номер счета ГЦВП
			Если Не ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ГЦВПБанковскийСчет) Тогда
				ТекстСообщения = НСтр("ru = 'Не указан номер расчетного счета %1'");
				ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаПоПлатежномуПоручению.ГЦВПБанковскийСчет), ВыборкаПоПлатежномуПоручению.ГЦВПБанковскийСчетСсылка);
				Отказ = Истина;
			КонецЕсли;
			
			// БИК ГЦВП
			Если Не ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ГЦВПБИК) Тогда
				ТекстСообщения = НСтр("ru = 'Для %1 не указан БИК банка'");
				ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаПоПлатежномуПоручению.ГЦВПБанкСсылка), ВыборкаПоПлатежномуПоручению.ГЦВПБанкСсылка);
				Отказ = Истина;
			КонецЕсли;
		
		КонецЕсли;
		
	Иначе
		
		// Получатель
		Если Не ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ПолучательСсылка) Тогда
			ТекстСообщения = НСтр("ru = 'В платежном поручении %1 не указан получатель'");
			ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Документ), Документ);
			Отказ = Истина;
			
		Иначе
			// Наименование получателя
			Если Не ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ПолучательНаименованиеПолное) Тогда
				ТекстСообщения = НСтр("ru = 'Для получателя %1 не указано полное наименование'");
				ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаПоПлатежномуПоручению.ПолучательСсылка), ВыборкаПоПлатежномуПоручению.ПолучательСсылка);
				Отказ = Истина;
			КонецЕсли;
			
			// ИдентификационныйНомер получателя
			Если Не ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ПолучательИдентификационныйНомер) Тогда
				ТекстСообщения = НСтр("ru = 'Для получателя %1 не указан БИН/ИИН'");
				ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаПоПлатежномуПоручению.ПолучательСсылка), ВыборкаПоПлатежномуПоручению.ПолучательСсылка);
				Отказ = Истина;
				
			ИначеЕсли СтрДлина(СокрЛП(ВыборкаПоПлатежномуПоручению.ПолучательИдентификационныйНомер)) < 12 Тогда
				ТекстСообщения = НСтр("ru = 'Для получателя %1 длина БИН/ИИН меньше 12 знаков'");
				ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаПоПлатежномуПоручению.ПолучательСсылка), ВыборкаПоПлатежномуПоручению.ПолучательСсылка);
				Отказ = Истина;
			КонецЕсли;
			
			// Признак резидентства и код сектора экономики получателя
			Если Не ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ПолучательПризнакРезидентства) Или Не ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ПолучательСекторЭкономики) Тогда
				ТекстСообщения = НСтр("ru = 'Для получателя %1 не заполнен КБе (должен быть из 2 знаков)'");
				ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаПоПлатежномуПоручению.ПолучательСсылка), ВыборкаПоПлатежномуПоручению.ПолучательСсылка);
				Отказ = Истина;
			КонецЕсли;
			
			Если ВключатьПоляФорматаMX Тогда
				// Признак резидентства и страна резиденства
				Если ВыборкаПоПлатежномуПоручению.ПолучательПризнакРезидентства = "2" И Не ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ПолучательКодСтраныРегистрации) Тогда
					ТекстСообщения = НСтр("ru = 'Для получателя %1 с признаком резидентства ""2"" в поле ""КБе"", не заполнена страна регистрации/гражданства. Проверьте корректность заполненных данных.'");
					ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаПоПлатежномуПоручению.ПолучательСсылка), ВыборкаПоПлатежномуПоручению.ПолучательСсылка);
					Отказ = Истина;
				КонецЕсли;
				
				// Признак резидентства и страна резиденства
				Если ВыборкаПоПлатежномуПоручению.ПолучательПризнакРезидентства = "1" И ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ПолучательКодСтраныРегистрации) И ВыборкаПоПлатежномуПоручению.ПолучательКодСтраныРегистрации <> "KZ" Тогда
					ТекстСообщения = НСтр("ru = 'Для получателя %1 с признаком резидентства ""1"" в поле ""КБе"", страна регистрации/гражданства должна быть не заполнена, или заполнена значением ""Казахстан"". Проверьте корректность заполненных данных.'");
					ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаПоПлатежномуПоручению.ПолучательСсылка), ВыборкаПоПлатежномуПоручению.ПолучательСсылка);
					Отказ = Истина;
				КонецЕсли;
				
				// Признак резидентства и страна резиденства
				Если ВыборкаПоПлатежномуПоручению.ПолучательПризнакРезидентства = "2" И ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ПолучательКодСтраныРегистрации) И ВыборкаПоПлатежномуПоручению.ПолучательКодСтраныРегистрации = "KZ" Тогда
					ТекстСообщения = НСтр("ru = 'Для получателя %1 с признаком резидентства ""2"" в поле ""КБе"", страна регистрации/гражданства должна быть заполнена значением, отличным от ""Казахстан"". Проверьте корректность заполненных данных.'");
					ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаПоПлатежномуПоручению.ПолучательСсылка), ВыборкаПоПлатежномуПоручению.ПолучательСсылка);
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		// расчетный счет получателя
		Если Не ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ПолучательБанковскийСчетСсылка) Тогда
			ТекстСообщения = НСтр("ru = 'В платежном поручении %1 не заполнен счет получателя'");
			ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Документ), Документ);
			Отказ = Истина;
			
		Иначе
			// номер счета получателя
			Если Не ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ПолучательБанковскийСчет) Тогда
				ТекстСообщения = НСтр("ru = 'Не указан номер счета получателя %1'");
				ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаПоПлатежномуПоручению.ПолучательБанковскийСчетСсылка), ВыборкаПоПлатежномуПоручению.ПолучательБанковскийСчетСсылка);
				Отказ = Истина;
			КонецЕсли;
			
			// Банк получателя
			Если Не ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ПолучательБанк) Тогда
				ТекстСообщения = НСтр("ru = 'Не указан банк, в котором открыт счет получателя %1'");
				ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаПоПлатежномуПоручению.ПолучательБанковскийСчетСсылка), ВыборкаПоПлатежномуПоручению.ПолучательБанковскийСчетСсылка);
				Отказ = Истина;
				
			Иначе
				// БИК получателя
				Если Не ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ПолучательБИК) Тогда
					ТекстСообщения = НСтр("ru = 'Не указан БИК банка %1, в котором открыт счет получателя %2'");
					ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаПоПлатежномуПоручению.ПолучательБанк, ВыборкаПоПлатежномуПоручению.ПолучательБанковскийСчетСсылка), ВыборкаПоПлатежномуПоручению.ПолучательБанк);
					Отказ = Истина;
				КонецЕсли;
				
				// Код организации в банковской системе
				Если Не ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.КодОрганизацииВБанковскойСистеме) Тогда
					ТекстСообщения = НСтр("ru = 'В регистре сведений ""Коды организаций в банковской системе"" для организации ""%1"" не указан код организации в банковской системе для банка ""%2"".'");
					ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаПоПлатежномуПоручению.Организация, ВыборкаПоПлатежномуПоручению.ПолучательБанк));
					Отказ = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения реквизитов работников
// Параметры: 
//  ВыборкаПоСпискуРаботников - выборка из результата запроса по спискам работников,
//  Отказ 					  - флаг отказа в формировании файла
//
Процедура ПроверитьЗаполнениеРеквизитовСтрокиСпискаРаботников(ВыборкаПоСпискуРаботников, Отказ, ВключатьПоляФорматаMX)
	
	ФИОРаботника = "" + ВыборкаПоСпискуРаботников.Фамилия + " " + ВыборкаПоСпискуРаботников.Имя + " " + ВыборкаПоСпискуРаботников.Отчество;
	ВидОперации = Документ.ВидОперации;
	Если ПустаяСтрока(ФИОРаботника) Тогда
		ФИОРаботника = ВыборкаПоСпискуРаботников.НаименованиеФизЛица;
		
		ТекстСообщения = НСтр("ru = 'Не указаны поля ФИО для физ.лица %1'");
		
		ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,ВыборкаПоСпискуРаботников.НаименованиеФизЛица),
														 ВыборкаПоСпискуРаботников.ФизЛицо);
		
		Отказ = Истина;
	КонецЕсли;
	               
	//  ИдентификационныйНомер
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСпискуРаботников.ИдентификационныйНомер) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указан ИИН  для физ.лица %1'");
		
		ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,ВыборкаПоСпискуРаботников.НаименованиеФизЛица),
														 ВыборкаПоСпискуРаботников.ФизЛицо);											 
	
	
		Отказ = Истина;
	ИначеЕсли СтрДлина(СокрЛП(ВыборкаПоСпискуРаботников.ИдентификационныйНомер)) < 12 Тогда
		ТекстСообщения = НСтр("ru = 'Для физ.лица %1 длина ИИН меньше 12 знаков'");
		
		ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,ВыборкаПоСпискуРаботников.НаименованиеФизЛица),
														 ВыборкаПоСпискуРаботников.ФизЛицо);											 
		                                   
		
		Отказ = Истина;
	КонецЕсли;
		

	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов
			Или ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений
			Или ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа
			Или ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПрочихВыплат Тогда

		//  Дата рождения
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСпискуРаботников.ДатаРождения) Тогда
			
			ТекстСообщения = НСтр("ru = 'Для физ.лица %1 не указана дата рождения'");
		
		    ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,ВыборкаПоСпискуРаботников.НаименованиеФизЛица),
														 ВыборкаПоСпискуРаботников.ФизЛицо);		
			
			Отказ = Истина;
		КонецЕсли; 
				
	Иначе
	
		//  Номер карт-счета
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСпискуРаботников.БанкКонтрагента) Тогда
			ТекстСообщения = НСтр("ru = 'Не указан банк в счете получателя %1, в котором открыт карт-счет %2'");
		
		    ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,ВыборкаПоСпискуРаботников.СчетКонтрагентаСсылка, ВыборкаПоСпискуРаботников.ФизЛицо),
														ВыборкаПоСпискуРаботников.СчетКонтрагентаСсылка);		

		    			
			Отказ = Истина;

		ИначеЕсли НЕ ЗначениеЗаполнено(ВыборкаПоСпискуРаботников.НомерКартСчета) Тогда
			ТекстСообщения = НСтр("ru = 'У физ.лица %1 не указан карт-счет, открытый в банке %2'");
			ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,ВыборкаПоСпискуРаботников.ФизЛицо, ВыборкаПоСпискуРаботников.БанкКонтрагентаСсылка),
														 ВыборкаПоСпискуРаботников.ФизЛицо);		

			
			Отказ = Истина;
		КонецЕсли;
	
		Если ВключатьПоляФорматаMX Тогда
			
			Если ВыборкаПоСпискуРаботников.ФизЛицоПризнакРезидентства = "2" Тогда
				Если НЕ ЗначениеЗаполнено(ВыборкаПоСпискуРаботников.ФизЛицоКодСтраны) Тогда
					ТекстСообщения = НСтр("ru = 'Не определен код страны гражданства для %1'");
					ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,ВыборкаПоСпискуРаботников.ФизЛицо),
																 ВыборкаПоСпискуРаботников.ФизЛицо);		
							
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеРеквизитовСтрокиСпискаРаботников()

// Записывает данные из текстового документа в файл в выбранной пользователем кодировке
//
Процедура ЗаписатьДанныеВФайл(СохраняемыйТекстовыйДокумент, ПолноеИмяФайла)

	ВыбраннаяКодировка = КодировкаТекста.ANSI;
	Если Кодировка = "Windows" Тогда
		ЗаписатьФайлЧерезКомпоненту(СохраняемыйТекстовыйДокумент.ПолучитьТекст(), ПолноеИмяФайла);
	ИначеЕсли Кодировка = "DOS" Тогда
		ВыбраннаяКодировка = КодировкаТекста.OEM;
		СохраняемыйТекстовыйДокумент.Записать(ПолноеИмяФайла, ВыбраннаяКодировка);
	ИначеЕсли Кодировка = "UTF8" Тогда
		ВыбраннаяКодировка = КодировкаТекста.UTF8;
		СохраняемыйТекстовыйДокумент.Записать(ПолноеИмяФайла, ВыбраннаяКодировка);
	КонецЕсли;

КонецПроцедуры // ЗаписатьДанныеВФайл()

// Записывает данные из текстового документа в файл через компонету
//
Процедура ЗаписатьФайлЧерезКомпоненту(СохраняемыйТекст, ПолноеИмяФайла)
	
	// Обеспечить возможность подключения TextWriter1048KZ из внешних обработок, заменив:
	// - "ВнешняяОбработкаОбъект.<Имя>" на "ВнешняяОбработка.<Имя>"
	// - "ОбработкаОбъект.<Имя>" на "Обработка.<Имя>"
	ИмяОбъекта = Строка(ЭтотОбъект);		
	ИмяОбъекта = СтрЗаменить(ИмяОбъекта, "ОбработкаОбъект.", "Обработка.");
	ИмяМакета = ИмяОбъекта + ".Макет.TextWriter1048KZ";
	
	УдалосьЗаписатьФайл = Ложь;
	ТекстОшибки = "";
	
	Попытка
		
		Если ПодключитьВнешнююКомпоненту(ИмяМакета, "TextWriter1048KZ", ТипВнешнейКомпоненты.Native, ТипПодключенияВнешнейКомпоненты.НеИзолированно) Тогда
			
			TextWriter1048KZ = Новый("AddIn.TextWriter1048KZ.TextWriter1048KZ");
			ТекстДляКонвертирования = СохраняемыйТекст;
			ДвоичныеДанныеТекст1048KZ = TextWriter1048KZ.Конвертировать(ТекстДляКонвертирования);
			ДвоичныеДанныеТекст1048KZ.Записать(ПолноеИмяФайла);
			
			УдалосьЗаписатьФайл = Истина;
			
		Иначе	
			
			УдалосьЗаписатьФайл = Ложь;
			ТекстОшибки = НСтр("ru = 'Не удалось подключить внешнюю компоненту TextWriter1048KZ.'");
			
		КонецЕсли;	
		
	Исключение
		
		УдалосьЗаписатьФайл = Ложь;
		ТекстОшибки = ОписаниеОшибки();
		
	КонецПопытки;
		
	Если НЕ УдалосьЗаписатьФайл Тогда
		
		ТекстСообщения = НСтр(
		"ru = 'Не удалось сохранить файл в кодировке Windows по причине:
		|[ТекстОшибки]
		|Попробуйте сохранить файл в другой кодировке.'");
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ТекстОшибки]", СокрЛП(ТекстОшибки));
		
		Сообщить(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьЗапросПоПериодамПеречислениеСО() Экспорт
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамДокументСсылка", Документ);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СОПеречислениеВФондыСоциальныеОтчисления.ПериодПлатежа КАК ПериодПлатежа,
	|	СУММА(СОПеречислениеВФондыСоциальныеОтчисления.Сумма) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(СОПеречислениеВФондыСоциальныеОтчисления.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК ПериодПлатежа,
	|		СОПеречислениеВФондыСоциальныеОтчисления.Сумма КАК Сумма
	|	ИЗ
	|		Документ.СОПеречислениеВФонды.СоциальныеОтчисления КАК СОПеречислениеВФондыСоциальныеОтчисления
	|	ГДЕ
	|		СОПеречислениеВФондыСоциальныеОтчисления.Ссылка В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Документ.Ссылка
	|				ИЗ
	|					Документ.ПлатежноеПоручениеИсходящее.ПеречислениеСоциальныхОтчислений КАК ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений
	|				ГДЕ
	|					ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Ссылка = &парамДокументСсылка)) КАК СОПеречислениеВФондыСоциальныеОтчисления
	|
	|СГРУППИРОВАТЬ ПО
	|	СОПеречислениеВФондыСоциальныеОтчисления.ПериодПлатежа
	|
	|ИМЕЮЩИЕ
	|	СУММА(СОПеречислениеВФондыСоциальныеОтчисления.Сумма) <> 0
	|";

	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ПолучитьКодВидаОперации(ВидОперации)
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений Тогда
		Запрос = Новый Запрос;
		
		// Установим параметры запроса
		Запрос.УстановитьПараметр("парамДокументСсылка", Документ);
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Ссылка КАК Ссылка,
		|	ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Документ.ВидОперации КАК ВидОперацииСО
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеСоциальныхОтчислений КАК ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений
		|ГДЕ
		|	ПлатежноеПоручениеИсходящееПеречислениеСоциальныхОтчислений.Ссылка = &парамДокументСсылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда 
			Если Выборка.ВидОперацииСО = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеОбязательныхСоциальныхОтчислений Тогда
				Возврат "S";
			ИначеЕсли Выборка.ВидОперацииСО = Перечисления.ВидыОперацийСОПеречислениеВФонды.ПеречислениеВзносовОСМС Тогда
				Возврат "M";
			Иначе 
				Возврат "R";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов Тогда
		Запрос = Новый Запрос;
		
		// Установим параметры запроса
		Запрос.УстановитьПараметр("парамДокументСсылка", Документ);
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка КАК Ссылка,
		|	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Документ.ВидОперации КАК ВидОперацииПВ
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеПенсионныхВзносов КАК ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов
		|ГДЕ
		|	ПлатежноеПоручениеИсходящееПеречислениеПенсионныхВзносов.Ссылка = &парамДокументСсылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда 
			Если Выборка.ВидОперацииПВ = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносов Тогда
				Возврат "C"; 
			ИначеЕсли Выборка.ВидОперацииПВ = Перечисления.ВидыОперацийОПВПеречислениеВФонды.ПеречислениеОбязательныхПенсионныхВзносовРаботодателя Тогда
				Возврат "E";
			Иначе
				Возврат "P";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа Тогда
		Возврат "H"; 
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПрочихВыплат Тогда
		Возврат "D";
	КонецЕсли;
		
	
КонецФункции //ПолучитьКодВидаОперации()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ SWIFT ФАЙЛА

Процедура СформироватьЗаголовокФайла(ФайлМТ102, ВыборкаПоПлатежномуПоручению, ВидОперации, ВключатьПолеPSO, ВключатьПолеPRT, ПолеPERIODвЗаголовке, ВключатьПоляФорматаMX)
	
	// паспорт банка
	ПаспортБанка = ?(СокрЛП(ВыборкаПоПлатежномуПоручению.ОрганизацияКодБанкаВПлатежнойСистеме) = "", "F01K059560000000001000001", "F01" + СокрЛП(ВыборкаПоПлатежномуПоручению.ОрганизацияКодБанкаВПлатежнойСистеме) + "00000001000001");
	
	// номер платежного поручения без префикса и ведущих нулей
	ПрефиксОрганизации		 = ?(ТипЗнч(ВыборкаПоПлатежномуПоручению.Организация) = Тип("СправочникСсылка.Организации"), ВыборкаПоПлатежномуПоручению.Организация.Префикс, ВыборкаПоПлатежномуПоручению.Организация.Владелец.Префикс);
	НомерПлатежногоПоручения = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Документ.Номер, Документ, ПредставлениеНомераДокумента);
			
	// строки файла
	ЗаголовокФайла = 
	"{1:"	   + ПаспортБанка + "}
	|{2:I102SGROSS000000"+?(ПриоритетСообщения, "U", "")+"3003}
	|{4:
	|:20:REFERENCE
	|:50:/D/"  + СокрЛП(ВыборкаПоПлатежномуПоручению.ОрганизацияБанковскийСчет) + "
	|/NAME/"   + СокрЛП(ВРег(ВыборкаПоПлатежномуПоручению.ОрганизацияНаименованиеПолное)) + "
	|/IDN/"	   + ВыборкаПоПлатежномуПоручению.ОрганизацияИдентификационныйНомер + "
	|/CHIEF/"  + СокрЛП(ВРег(ВыборкаПоПлатежномуПоручению.ФИОРуководителя)) + "
	|/MAINBK/" + СокрЛП(ВРег(?(ВыборкаПоПлатежномуПоручению.ФИОГлБухгалтера = Null, "Не предусмотрен", ВыборкаПоПлатежномуПоручению.ФИОГлБухгалтера))) + "
	|/IRS/"	   + ВыборкаПоПлатежномуПоручению.ОрганизацияПризнакРезидентства + "
	|/SECO/"   + ВыборкаПоПлатежномуПоручению.ОрганизацияСекторЭкономики;
	
	Если ВключатьПоляФорматаMX И ВыборкаПоПлатежномуПоручению.ОрганизацияПризнакРезидентства = "2" И ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ОрганизацияКодСтраныРегистрации) Тогда
		ЗаголовокФайла = ЗаголовокФайла + " 
		|/CTRYOFRES/" + ВыборкаПоПлатежномуПоручению.ОрганизацияКодСтраныРегистрации; 
	КонецЕсли; 
	
	
	Если ВключатьПоляФорматаMX И ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ФактическийПлательщик) Тогда
				
		СведенияОФактическомПлательщике = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ВыборкаПоПлатежномуПоручению.ФактическийПлательщик, ВыборкаПоПлатежномуПоручению.ДатаПлатежногоПоручения);
		Если ЗначениеЗаполнено(СведенияОФактическомПлательщике) Тогда
			ЗаголовокФайла = ЗаголовокФайла + " 
			|:80:" + " 
			|/NAME/" + СведенияОФактическомПлательщике.ПолноеНаименование + "
			|/IDN/" + ?(НЕ ПустаяСтрока(СведенияОФактическомПлательщике.БИН_ИИН), СведенияОФактическомПлательщике.БИН_ИИН,  "000000000000");	
		КонецЕсли;
		
	КонецЕсли;	 
	
	
	ЗаголовокФайла = ЗаголовокФайла + "
	|:52B:"    + СокрЛП(ВыборкаПоПлатежномуПоручению.ОрганизацияБИК) + "
	|:57B:"  + СокрЛП(ВыборкаПоПлатежномуПоручению.ГЦВПБИК) + "
	|:59:"   + СокрЛП(ВыборкаПоПлатежномуПоручению.ГЦВПБанковскийСчет) + "
	|/NAME/" + СокрЛП(ВыборкаПоПлатежномуПоручению.ГЦВПНаименованиеПолное) + "
	|/IDN/"  + ВыборкаПоПлатежномуПоручению.ГЦВПИдентификационныйНомер + "
	|/IRS/"  + ВыборкаПоПлатежномуПоручению.ГЦВППризнакРезидентства + "
	|/SECO/" + ВыборкаПоПлатежномуПоручению.ГЦВПСекторЭкономики; 
	
	Если ВключатьПоляФорматаMX И ВыборкаПоПлатежномуПоручению.ГЦВППризнакРезидентства = "2" И ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ГЦВПСтранаРезидентства) Тогда
		ЗаголовокФайла = ЗаголовокФайла + " 
		|/CTRYOFRES/" + ВыборкаПоПлатежномуПоручению.ГЦВПСтранаРезидентства; 
	КонецЕсли; 

	ЗаголовокФайла = ЗаголовокФайла + "
	|:70:";
	
	Если ФорматФайлов = ФорматПеречисленияМТ102БезПереноса() Тогда
		ЗаголовокФайла = ЗаголовокФайла + "/NUM/" 	+ НомерПлатежногоПоручения;
	Иначе
		ЗаголовокФайла = ЗаголовокФайла + "
		|/NUM/" 	+ НомерПлатежногоПоручения;
	КонецЕсли;
	
	ЗаголовокФайла = ЗаголовокФайла + "
	|/DATE/" 	+ Формат(ВыборкаПоПлатежномуПоручению.ДатаПлатежногоПоручения, "ДФ=""ггММдд""") + "
	|/VO/01
	|/SEND/07
	|/KNP/"		+ ВыборкаПоПлатежномуПоручению.КодНазначенияПлатежа;
		
	Если ВключатьПолеPSO Тогда
		ЗаголовокФайла = ЗаголовокФайла + "
		|/PSO/01";
	КонецЕсли;
	
	Если ВключатьПолеPRT Тогда
		ЗаголовокФайла = ЗаголовокФайла + "
		|/PRT/05";
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений И ПолеPERIODвЗаголовке Тогда
		ЗаголовокФайла = ЗаголовокФайла + "
		|/PERIOD/" + Формат(ВыборкаПоПлатежномуПоручению.ПериодПлатежа, "ДФ=""ММгггг""");
	КонецЕсли;
	
	ФайлМТ102.ДобавитьСтроку(ЗаголовокФайла);
	
	ТекстНазначенияПлатежа = "/ASSIGN/" + СокрЛП(ВыборкаПоПлатежномуПоручению.НазначениеПлатежа);
	Пока СтрДлина(ТекстНазначенияПлатежа) > 0 Цикл
		ФайлМТ102.ДобавитьСтроку(Сред(ТекстНазначенияПлатежа, 1, 60));
		ТекстНазначенияПлатежа = СокрЛП(Сред(ТекстНазначенияПлатежа, 61));
	КонецЦикла;
	
КонецПроцедуры //СформироватьЗаголовокФайла()

Процедура СформироватьСтрокуРаботникаФайла(ФайлМТ102, ВыборкаПоСпискуРаботников, НомерСтроки, ПолеPERIODвЗаголовке, ВключатьПолеFT, ВыборкаПоПлатежномуПоручению)
	
	ВидОперации = ВыборкаПоПлатежномуПоручению.ВидОперации;
	ПрефиксПоля = ПолучитьКодВидаОперации(ВидОперации);
	
	СтрокаФайла = 
	":21:" 		+ Формат(НомерСтроки, "ЧГ=") + "
	|:32B:KZT"  + Формат(ВыборкаПоСпискуРаботников.СуммаКПеречислению, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧРГ=; ЧГ=0,0") + "
	|:70:";
	
	ДобавитьКлючевоеСловоOPV = Истина;
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПрочихВыплат Тогда 
		
		ДобавитьКлючевоеСловоOPV = ?(ВыборкаПоСпискуРаботников.ВидПлатежа = Справочники.ВидыПрочихВыплат.ПрофессиональнаяВыплатаЗаСчетРаботодателя, Истина, Ложь);
		
	КонецЕсли;
	
	Если ДобавитьКлючевоеСловоOPV Тогда
		
		Если ФорматФайлов = ФорматПеречисленияМТ102БезПереноса() Тогда
			СтрокаФайла = СтрокаФайла + "/OPV/" + ПрефиксПоля;
		Иначе
			СтрокаФайла = СтрокаФайла + "
			|/OPV/" + ПрефиксПоля;
		КонецЕсли; 
		
	КонецЕсли;
	
	СтрокаФайла = СтрокаФайла + "
	|/FM/"		+ СокрЛП(ВРег(ВыборкаПоСпискуРаботников.Фамилия)) + "
	|/NM/"		+ СокрЛП(ВРег(ВыборкаПоСпискуРаботников.Имя));
	
	Если (ЗначениеЗаполнено(ВыборкаПоСпискуРаботников.Отчество)) Тогда
		СтрокаФайла = СтрокаФайла + "
		|/FT/" + СокрЛП(ВРег(ВыборкаПоСпискуРаботников.Отчество));
	Иначе
		Если ВключатьПолеFT Тогда
			СтрокаФайла = СтрокаФайла + "
			|/FT/";
		КонецЕсли;
	КонецЕсли;
		
	СтрокаФайла = СтрокаФайла + "
	|/DT/"  + Формат(ВыборкаПоСпискуРаботников.ДатаРождения, "ДФ=""ггггММдд""") + "
	|/IDN/" + ВыборкаПоСпискуРаботников.ИдентификационныйНомер;
	
	Если (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПенсионныхВзносов 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеСоциальныхОтчислений И НЕ ПолеPERIODвЗаголовке)
			ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа
			ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПрочихВыплат Тогда
		СтрокаФайла = СтрокаФайла + "
		|/PERIOD/" + Формат(ВыборкаПоСпискуРаботников.ПериодПлатежа, "ДФ=""ММгггг""");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЕдиногоПлатежа Тогда 
		
		ДанныеКНПЕП = Документы.ЕППеречислениеВФонды.ПолучитьТекстКНППлатежейДляЕП(ВыборкаПоСпискуРаботников, ВыборкаПоПлатежномуПоручению.ВидПлатежа);
		СтрокаФайла = СтрокаФайла + ДанныеКНПЕП.ТекстAssign;
		
	КонецЕсли;
	
	ФайлМТ102.ДобавитьСтроку(СтрокаФайла);
	
КонецПроцедуры //СформироватьСтрокуРаботникаФайла()

Процедура СформироватьКонецФайла(ФайлМТ102, ВыборкаПоПлатежномуПоручению, ОбщаяСумма)
	
	СтрокаКонцаФайла = 
	":32A:" + Формат(ВыборкаПоПлатежномуПоручению.ДатаПлатежногоПоручения, "ДФ=""ггММдд""") + "KZT" + Формат(ОбщаяСумма, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧРГ=; ЧГ=0,0") + "
	|-}"; 
	
	ФайлМТ102.ДобавитьСтроку(СтрокаКонцаФайла);
	
КонецПроцедуры //СформироватьКонецФайла()

Процедура ВыполнитьВыгрузкуДанных(ФайлМТ102, НомерФайла, СтруктураПередаваемыхФайлов, ДанныеДокумента, УникальныйИдентификатор, ИспользоватьПолныйПуть)
			
	ПолныйКаталогВыгрузки = КаталогВыгрузки + Формат(ОбщегоНазначения.ТекущаяДатаПользователя(), "ДФ=""дд-ММ-гг""") + "." + НомерФайла + "\";			
	//для идентификации   
	
	НомерДокумента = СокрЛП(ДанныеДокумента.Номер);
	ПредставлениеНомераОбъекта = Перечисления.ВидыПредставленийНомеровДокументов.БезПрефиксаБезНулей;
	ПрефиксацияОбъектовБКВызовСервера.ПриПолученииНомераНаПечать(НомерДокумента, Документ, Истина, ПредставлениеНомераОбъекта, );
	
	Если ДанныеДокумента.ВидОперации = "ПеречислениеНалога" Тогда
		ВидПеречисления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1_%2", НСтр("ru = 'Перечисление'"), ДанныеДокумента.ВидНалога);
	Иначе
		ВидПеречисления = ДанныеДокумента.ВидОперации;
	КонецЕсли;
	
	ИмяТранспортногоФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1_%2_%3.txt", ВидПеречисления, НомерДокумента, "Swift");

	Если ИспользоватьПолныйПуть Тогда
		ИмяФайла = ПолныйКаталогВыгрузки + ИмяТранспортногоФайла;
	Иначе
		ИмяФайла  = ИмяТранспортногоФайла;
	КонецЕсли;
	  	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();

	ЗаписатьДанныеВФайл(ФайлМТ102, ИмяВременногоФайла);
			
	СтруктураПередаваемыхФайлов.Вставить(ИмяФайла, ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла), УникальныйИдентификатор));
	
	ФайлМТ102.Очистить();
	
КонецПроцедуры //ВыполнитьВыгрузкуДанных()

Процедура СформироватьФайлОтчислений(ФормироватьОтдельныеФайлы,ПолеPERIODвЗаголовке,ВключатьПолеPSO, ВключатьПолеPRT,ВключатьПолеFT, НомерФайла, СтруктураПередаваемыхФайлов, УникальныйИдентификатор,ТекстВыгрузки = Неопределено, ИспользоватьПолныйПуть, ВключатьПоляФорматаMX)
	
	Отказ = Ложь;
	
	ВидОперации = Документ.ВидОперации;
	
	ДанныеДокумента = Новый Структура("ВидОперации, ВидНалога, Дата, Номер");
	ЗаполнитьЗначенияСвойств(ДанныеДокумента, Документ);
	
	КоличествоРаботниковВФайле = 500;
	
	РезультатЗапросаПоПлатежномуПоручению = ?(ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПрочихВыплат, СформироватьЗапросПоПлатежномуПоручениюПрочиеВыплаты(), СформироватьЗапросПоПлатежномуПоручению());
	ВыборкаПоПлатежномуПоручению = РезультатЗапросаПоПлатежномуПоручению.Выбрать();
	
	Если ВыборкаПоПлатежномуПоручению.Следующий() Тогда
		ПроверитьЗаполнениеРеквизитовПлатежногоПоручения(ВыборкаПоПлатежномуПоручению, Отказ, ВключатьПоляФорматаMX);
	
		ЗапросПоСпискуРаботников = ?(ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеПрочихВыплат, СформироватьЗапросПоПрочимВыплатам(ВидОперации, ВключатьПоляФорматаMX), СформироватьЗапросПоСпискамНаПеречисление(ВидОперации, ВключатьПоляФорматаMX));
		ВыборкаПоСпискуРаботников = ЗапросПоСпискуРаботников.Выбрать();
		 
		Пока ВыборкаПоСпискуРаботников.Следующий() Цикл
			ПроверитьЗаполнениеРеквизитовСтрокиСпискаРаботников(ВыборкаПоСпискуРаботников, Отказ, Ложь);
		КонецЦикла;
		
	КонецЕсли;      	
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ФайлМТ102 = Новый ТекстовыйДокумент;
	
	// формируем заголовок файла
	СформироватьЗаголовокФайла(ФайлМТ102, ВыборкаПоПлатежномуПоручению, ВидОперации, ВключатьПолеPSO, ВключатьПолеPRT, ПолеPERIODвЗаголовке, ВключатьПоляФорматаMX);
	
	// добавляем строки данных по сотрудникам
	НомерСтроки = 1; ОбщаяСумма = 0; 
	ВыборкаПоСпискуРаботников = ЗапросПоСпискуРаботников.Выбрать();
	
	Пока ВыборкаПоСпискуРаботников.Следующий() Цикл  
		
		Если ВыборкаПоСпискуРаботников.СуммаКПеречислению <= 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		Если (НомерСтроки > КоличествоРаботниковВФайле) И (ФормироватьОтдельныеФайлы) Тогда
			// формируем конец файла
			СформироватьКонецФайла(ФайлМТ102, ВыборкаПоПлатежномуПоручению, ОбщаяСумма);
			
			// запись файла
			ВыполнитьВыгрузкуДанных(ФайлМТ102, НомерФайла, СтруктураПередаваемыхФайлов, ДанныеДокумента, УникальныйИдентификатор,ИспользоватьПолныйПуть);
			
			// формируем заголовок нового файла
			СформироватьЗаголовокФайла(ФайлМТ102, ВыборкаПоПлатежномуПоручению, ВидОперации, ВключатьПолеPSO, ВключатьПолеPRT, ПолеPERIODвЗаголовке, ВключатьПоляФорматаMX);
			
			// инициализируем переменные
			НомерСтроки = 1; ОбщаяСумма = 0;
			НомерФайла = НомерФайла + 1;
		КонецЕсли;
		
		СформироватьСтрокуРаботникаФайла(ФайлМТ102, ВыборкаПоСпискуРаботников, НомерСтроки, ПолеPERIODвЗаголовке, ВключатьПолеFT, ВыборкаПоПлатежномуПоручению);
		ОбщаяСумма  = ОбщаяСумма + ВыборкаПоСпискуРаботников.СуммаКПеречислению;
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	// формируем конец файла
	СформироватьКонецФайла(ФайлМТ102, ВыборкаПоПлатежномуПоручению, ОбщаяСумма);
	
	Если ТекстВыгрузки <> Неопределено Тогда		
		// если программный вызов
		ТекстВыгрузки = ФайлМТ102;         		
	Иначе
		
		// если интерактивное формирование		
		// запись файла	
		ВыполнитьВыгрузкуДанных(ФайлМТ102,НомерФайла, СтруктураПередаваемыхФайлов, ДанныеДокумента, УникальныйИдентификатор, ИспользоватьПолныйПуть);
		
	КонецЕсли;
	
КонецПроцедуры //СформироватьФайлОтчислений()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ТРАНСПОРТНОГО ФАЙЛА И ФАЙЛА СПИСКА НАРОДНОГО БАНКА

Процедура СформироватьЗаголовокТранспортногоФайлаНБ(ФайлМТ102, ВыборкаПоПлатежномуПоручению, ВключатьПоляФорматаMX)
	
	// паспорт банка
	ПаспортБанка = ?(СокрЛП(ВыборкаПоПлатежномуПоручению.ОрганизацияКодБанкаВПлатежнойСистеме) = "", "F01K059560000000001000001", "F01" + СокрЛП(ВыборкаПоПлатежномуПоручению.ОрганизацияКодБанкаВПлатежнойСистеме) + "00000001000001");
	
	// номер платежного поручения без префикса и ведущих нулей
	ПрефиксОрганизации		 = ?(ТипЗнч(ВыборкаПоПлатежномуПоручению.Организация) = Тип("СправочникСсылка.Организации"), ВыборкаПоПлатежномуПоручению.Организация.Префикс, ВыборкаПоПлатежномуПоручению.Организация.Владелец.Префикс);
	НомерПлатежногоПоручения = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Документ.Номер, Документ,ПредставлениеНомераДокумента);
		
	// референс
	Референс = Лев(СокрЛП(ВыборкаПоПлатежномуПоручению.КодОрганизацииВБанковскойСистеме), 2) 	+
				Прав(СокрЛП(ВыборкаПоПлатежномуПоручению.КодОрганизацииВБанковскойСистеме), 4) 	+
				Формат(ВыборкаПоПлатежномуПоручению.ДатаПлатежногоПоручения, "ДФ=""ггММдд""") 	+ 
				СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Прав(НомерПлатежногоПоручения, 4), 4, "0");
	
	// строки файла
	ЗаголовокФайла = 
	"{1:"	   + ПаспортБанка + "}
	|{2:I102SGROSS000000"+?(ПриоритетСообщения, "U", "")+"3003}
	|{4:
	|:20:"	   + Референс + "
	|:50:/D/"  + СокрЛП(ВыборкаПоПлатежномуПоручению.ОрганизацияБанковскийСчет) + "
	|/NAME/"   + СокрЛП(ВРег(ВыборкаПоПлатежномуПоручению.ОрганизацияНаименованиеПолное)) + "
	|/IDN/"	   + ВыборкаПоПлатежномуПоручению.ОрганизацияИдентификационныйНомер + "
	|/CHIEF/"  + СокрЛП(ВРег(ВыборкаПоПлатежномуПоручению.ФИОРуководителя)) + "
	|/MAINBK/" + СокрЛП(ВРег(?(ВыборкаПоПлатежномуПоручению.ФИОГлБухгалтера = Null, "Не предусмотрен", ВыборкаПоПлатежномуПоручению.ФИОГлБухгалтера))) + "
	|/IRS/"	   + ВыборкаПоПлатежномуПоручению.ОрганизацияПризнакРезидентства + "
	|/SECO/"   + ВыборкаПоПлатежномуПоручению.ОрганизацияСекторЭкономики;
	
	Если ВключатьПоляФорматаMX И ВыборкаПоПлатежномуПоручению.ОрганизацияПризнакРезидентства = "2" И ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ОрганизацияКодСтраныРегистрации) Тогда
		ЗаголовокФайла = ЗаголовокФайла + " 
		|/CTRYOFRES/" + ВыборкаПоПлатежномуПоручению.ОрганизацияКодСтраныРегистрации; 
	КонецЕсли;     
	
	Если ВключатьПоляФорматаMX И ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ФактическийПлательщик) Тогда
						
		СведенияОФактическомПлательщике = ОбщегоНазначенияБКВызовСервера.СведенияОЮрФизЛице(ВыборкаПоПлатежномуПоручению.ФактическийПлательщик, ВыборкаПоПлатежномуПоручению.ДатаПлатежногоПоручения);
		Если ЗначениеЗаполнено(СведенияОФактическомПлательщике) Тогда
			ЗаголовокФайла = ЗаголовокФайла + " 
			|:80:" + "
			|/NAME/" + СведенияОФактическомПлательщике.ПолноеНаименование + "
			|/IDN/" + ?(НЕ ПустаяСтрока(СведенияОФактическомПлательщике.БИН_ИИН), СведенияОФактическомПлательщике.БИН_ИИН,  "000000000000");	
		КонецЕсли;
				
	КонецЕсли;	
	
	ЗаголовокФайла = ЗаголовокФайла + "
	|:52B:"    + СокрЛП(ВыборкаПоПлатежномуПоручению.ОрганизацияБИК) + "
	|:57B:"	   + СокрЛП(ВыборкаПоПлатежномуПоручению.ПолучательБИК) + "
	|:59:"     + СокрЛП(ВыборкаПоПлатежномуПоручению.ПолучательБанковскийСчет) + "
	|/NAME/"   + СокрЛП(ВыборкаПоПлатежномуПоручению.ПолучательНаименованиеПолное) + "
	|/IDN/"    + ВыборкаПоПлатежномуПоручению.ПолучательИдентификационныйНомер + "
	|/IRS/"    + ВыборкаПоПлатежномуПоручению.ПолучательПризнакРезидентства + "
	|/SECO/"   + ВыборкаПоПлатежномуПоручению.ПолучательСекторЭкономики;
	
	Если ВключатьПоляФорматаMX И ВыборкаПоПлатежномуПоручению.ПолучательПризнакРезидентства = "2" И ЗначениеЗаполнено(ВыборкаПоПлатежномуПоручению.ПолучательКодСтраныРегистрации) Тогда
		ЗаголовокФайла = ЗаголовокФайла + " 
		|/CTRYOFRES/" + ВыборкаПоПлатежномуПоручению.ПолучательКодСтраныРегистрации; 
	КонецЕсли;
	
	ЗаголовокФайла = ЗаголовокФайла + "
	|:70:
	|/NUM/" + СокрЛП(НомерПлатежногоПоручения) + "
	|/DATE/" 	+ Формат(ВыборкаПоПлатежномуПоручению.ДатаПлатежногоПоручения, "ДФ=""ггММдд""") + "
	|/VO/01
	|/SEND/07
	|/KNP/"		+ ВыборкаПоПлатежномуПоручению.КодНазначенияПлатежа;	
	
	ФайлМТ102.ДобавитьСтроку(ЗаголовокФайла);
	
	ТекстНазначенияПлатежа = "/ASSIGN/" + СокрЛП(ВыборкаПоПлатежномуПоручению.НазначениеПлатежа);
	Пока СтрДлина(ТекстНазначенияПлатежа) > 0 Цикл
		ФайлМТ102.ДобавитьСтроку(Сред(ТекстНазначенияПлатежа, 1, 60));
		ТекстНазначенияПлатежа = СокрЛП(Сред(ТекстНазначенияПлатежа, 61));
	КонецЦикла;
	
КонецПроцедуры //СформироватьЗаголовокТранспортногоФайлаНБ()

Процедура СформироватьСтрокуРаботникаТранспортногоФайлаНБ(ФайлМТ102,ВключатьПолеFT, ВыборкаПоПлатежномуПоручению, ВыборкаПоСпискуРаботников, НомерСтроки, ОбщаяСумма, ОбщаяСуммаКомиссии, ОбщаяСуммаРаспределеннойКомиссии, ЭтоПоследнийРаботник, ВключатьПоляФорматаMX)
	
	СуммаКПеречислению = ВыборкаПоСпискуРаботников.СуммаКПеречислению;
	Если РассчитыватьКомиссиюБанкаПоКаждомуРаботнику И ВыборкаПоПлатежномуПоручению.ВключатьКомиссиюБанка Тогда
		СуммаКомиссии = Окр(СуммаКПеречислению * ВыборкаПоПлатежномуПоручению.ПолучательПроцентКомиссииБанка / 100, 2);
		СуммаКПеречислению = СуммаКПеречислению + СуммаКомиссии;
		ОбщаяСуммаКомиссии = ОбщаяСуммаКомиссии + СуммаКомиссии;
		ОбщаяСуммаРаспределеннойКомиссии = ОбщаяСуммаРаспределеннойКомиссии + СуммаКомиссии;
		
		Если ЭтоПоследнийРаботник Тогда
			// на последнего работника скидываем разность в сумме комиссии банка
			СуммаКомиссииСПолнойСуммыПеречисления = ВыборкаПоПлатежномуПоручению.СуммаКомиссии;
			РазностьКомиссии = СуммаКомиссииСПолнойСуммыПеречисления - ОбщаяСуммаРаспределеннойКомиссии;			
			СуммаКомиссии = СуммаКомиссии + РазностьКомиссии;
			СуммаКПеречислению = СуммаКПеречислению + РазностьКомиссии;
			ОбщаяСуммаКомиссии = ОбщаяСуммаКомиссии + РазностьКомиссии;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаФайла = 
	":21:" 		+ Формат(НомерСтроки, "ЧГ=") + "
	|:32B:"  	+ СокрЛП(ВыборкаПоПлатежномуПоручению.БуквенныйКодВалюты) +  Формат(СуммаКПеречислению, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧРГ=; ЧГ=0,0") + "
	|:70:
	|/FM/"		+ СокрЛП(ВРег(ВыборкаПоСпискуРаботников.Фамилия)) + "
	|/NM/"		+ СокрЛП(ВРег(ВыборкаПоСпискуРаботников.Имя));
	
	Если (ЗначениеЗаполнено(ВыборкаПоСпискуРаботников.Отчество)) Тогда
		СтрокаФайла = СтрокаФайла + "
		|/FT/" + СокрЛП(ВРег(ВыборкаПоСпискуРаботников.Отчество));
	Иначе
		Если ВключатьПолеFT Тогда
			СтрокаФайла = СтрокаФайла + "
			|/FT/";
		КонецЕсли;
	КонецЕсли;
	
	СтрокаФайла = СтрокаФайла + "
	|/IDN/" + ВыборкаПоСпискуРаботников.ИдентификационныйНомер + "
	|/LA/"	+ СокрЛП(ВыборкаПоСпискуРаботников.НомерКартСчета);
	
	Если ВключатьПоляФорматаMX Тогда
		Если ЗначениеЗаполнено(ВыборкаПоСпискуРаботников.ФизЛицоПризнакРезидентства) Тогда
			СтрокаФайла = СтрокаФайла + "
			|/IRS/" + ВыборкаПоСпискуРаботников.ФизЛицоПризнакРезидентства;                
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаПоСпискуРаботников.ФизЛицоСекторЭкономики) Тогда
			СтрокаФайла = СтрокаФайла + "
			|/SECO/" + ВыборкаПоСпискуРаботников.ФизЛицоСекторЭкономики;              
		КонецЕсли;

		Если ВыборкаПоСпискуРаботников.ФизЛицоПризнакРезидентства = "2" И ЗначениеЗаполнено(ВыборкаПоСпискуРаботников.ФизЛицоКодСтраны) Тогда
			СтрокаФайла = СтрокаФайла + "
			|/CTRYOFRES/" + ВыборкаПоСпискуРаботников.ФизЛицоКодСтраны; 				
		КонецЕсли;      
	КонецЕсли;
	
	ФайлМТ102.ДобавитьСтроку(СтрокаФайла);
	
КонецПроцедуры //СформироватьСтрокуРаботникаТранспортногоФайлаНБ()

Процедура СформироватьКонецТранспортногоФайлаНБ(ФайлМТ102, ВыборкаПоПлатежномуПоручению, НомерСтроки, ОбщаяСумма, ОбщаяСуммаКомиссии, ЭтоПоследнийФайл = Истина)
	
	Если РассчитыватьКомиссиюБанкаПоКаждомуРаботнику И ВыборкаПоПлатежномуПоручению.ВключатьКомиссиюБанка Тогда
		СуммаКомиссии = ОбщаяСуммаКомиссии; 
	Иначе
		Если ЭтоПоследнийФайл Тогда
			СуммаКомиссии = ВыборкаПоПлатежномуПоручению.СуммаКомиссии;	
		Иначе
			СуммаКомиссии = 0;
		КонецЕсли;
	КонецЕсли;	
	ОбщаяСумма	  = ОбщаяСумма + СуммаКомиссии;
	
	Если СуммаКомиссии <> 0 И НЕ РассчитыватьКомиссиюБанкаПоКаждомуРаботнику И ЭтоПоследнийФайл Тогда
		СтрокаФайла = 
		":21:" 		+ НомерСтроки + "
		|:32B:"  	+ СокрЛП(ВыборкаПоПлатежномуПоручению.БуквенныйКодВалюты) + Формат(СуммаКомиссии, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧРГ=; ЧГ=0,0") + "
		|:70:
		|/FM/КОМИССИОННЫЕ
		|/NM/БАНКА
		|/IDN/" + ВыборкаПоПлатежномуПоручению.ПолучательИдентификационныйНомер + "
		|/LA/"	+ ВыборкаПоПлатежномуПоручению.ПолучательБанковскийСчет;
		
		ФайлМТ102.ДобавитьСтроку(СтрокаФайла);
	КонецЕсли;		
	
	СтрокаКонцаФайла = 
	":32A:" + Формат(ВыборкаПоПлатежномуПоручению.ДатаПлатежногоПоручения, "ДФ=""ггММдд""") + СокрЛП(ВыборкаПоПлатежномуПоручению.БуквенныйКодВалюты) + Формат(ОбщаяСумма, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧРГ=; ЧГ=0,0") + "
	|-}"; 
	
	ФайлМТ102.ДобавитьСтроку(СтрокаКонцаФайла);
	
КонецПроцедуры //СформироватьКонецТранспортногоФайлаНБ()

Процедура ВыполнитьВыгрузкуДанныхНБ(ФайлМТ102, НомерФайла, ВыборкаПоПлатежномуПоручению, СтруктураПередаваемыхФайлов, УникальныйИдентификатор,ИспользоватьПолныйПуть)
	
	ПолныйКаталогВыгрузки = КаталогВыгрузки + Формат(ОбщегоНазначения.ТекущаяДатаПользователя(), "ДФ=""дд-ММ-гг""") + "." + НомерФайла + "\";
		
	// номер платежного поручения без префикса и ведущих нулей
	ПрефиксОрганизации		 =  ?(ТипЗнч(ВыборкаПоПлатежномуПоручению.Организация) = Тип("СправочникСсылка.Организации"), ВыборкаПоПлатежномуПоручению.Организация.Префикс, ВыборкаПоПлатежномуПоручению.Организация.Владелец.Префикс);
	НомерПлатежногоПоручения = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Документ.Номер, Документ,ПредставлениеНомераДокумента);
	
	ИмяТранспортногоФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("MT %1 - %2.%3", Прав(СокрЛП(ВыборкаПоПлатежномуПоручению.КодОрганизацииВБанковскойСистеме), 4), НомерПлатежногоПоручения, СокрЛП(ДеньГода(ТекущаяДата())));
	
	//для идентификации
	//ИмяФайла = ПолныйКаталогВыгрузки + ИмяТранспортногоФайла;
	Если ИспользоватьПолныйПуть Тогда 
		ИмяФайла = ПолныйКаталогВыгрузки + ИмяТранспортногоФайла;
	Иначе
		ИмяФайла = ИмяТранспортногоФайла;
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();

	ЗаписатьДанныеВФайл(ФайлМТ102, ИмяВременногоФайла);
	
	СтруктураПередаваемыхФайлов.Вставить(ИмяФайла, ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла), УникальныйИдентификатор));
	                    	
	ФайлМТ102.Очистить();
	
КонецПроцедуры //ВыполнитьВыгрузкуДанныхНБ()

Процедура СформироватьФайлСпискаЗачисленияЗарплатыНБ(ВыборкаПоПлатежномуПоручению, ВыборкаПоСпискуРаботников, СтруктураПередаваемыхФайлов, УникальныйИдентификатор, ИспользоватьПолныйПуть)
			
				
	// список в текстовом формате
	ФайлСписка = Новый ТекстовыйДокумент;
	
	Макет = ПолучитьМакет("СписокДляЗачисленияНБ");
	ОбластьЗаголовка = Макет.ПолучитьОбласть("Заголовок");
	ОбластьСтроки    = Макет.ПолучитьОбласть("Строка");
	ОбластьКомиссияБанка   = Макет.ПолучитьОбласть("КомиссияБанка");
	ОбластьПодвала   = Макет.ПолучитьОбласть("Подвал");
	
	ОбластьЗаголовка.Параметры.Заполнить(ВыборкаПоПлатежномуПоручению);
	
	// номер платежного поручения без префикса и ведущих нулей
	ПрефиксОрганизации		 = ?(ТипЗнч(ВыборкаПоПлатежномуПоручению.Организация) = Тип("СправочникСсылка.Организации"), ВыборкаПоПлатежномуПоручению.Организация.Префикс, ВыборкаПоПлатежномуПоручению.Организация.Владелец.Префикс);
	НомерПлатежногоПоручения = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Документ.Номер, Документ,ПредставлениеНомераДокумента);
		
	ОбластьЗаголовка.Параметры.НомерПлатежногоПоручения = НомерПлатежногоПоручения;
	ФайлСписка.Вывести(ОбластьЗаголовка);
	
	ОбщаяСумма = 0; 
	НомерСтроки = 0;
	ОбщаяСуммаКомиссии = 0;
	Пока ВыборкаПоСпискуРаботников.Следующий() Цикл

	 	Если ВыборкаПоСпискуРаботников.СуммаКПеречислению <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьСтроки.Параметры.Заполнить(ВыборкаПоСпискуРаботников);
		ОбластьСтроки.Параметры.РеквизитыСотрудника = СокрЛП(ВыборкаПоСпискуРаботников.Фамилия) + " " + 
													  СокрЛП(ВыборкаПоСпискуРаботников.Имя) + " " + 
													  СокрЛП(ВыборкаПоСпискуРаботников.Отчество) + " " + 
													  СокрЛП(ВыборкаПоСпискуРаботников.ИдентификационныйНомер);
													  
		ЭтоПоследнийРаботник = Ложь;
		Если НомерСтроки + 1 = ВыборкаПоСпискуРаботников.Количество() Тогда
			ЭтоПоследнийРаботник = Истина;
		КонецЕсли;
		
		СуммаКПеречислению = ВыборкаПоСпискуРаботников.СуммаКПеречислению;
		Если РассчитыватьКомиссиюБанкаПоКаждомуРаботнику И ВыборкаПоПлатежномуПоручению.ВключатьКомиссиюБанка Тогда
			СуммаКомиссии = Окр(СуммаКПеречислению * ВыборкаПоПлатежномуПоручению.ПолучательПроцентКомиссииБанка / 100, 2);
			СуммаКПеречислению = СуммаКПеречислению + СуммаКомиссии;
			ОбщаяСуммаКомиссии = ОбщаяСуммаКомиссии + СуммаКомиссии;
			
			Если ЭтоПоследнийРаботник Тогда
				// на последнего работника скидываем разность в сумме комиссии банка
				СуммаКомиссииСПолнойСуммыПеречисления = ВыборкаПоПлатежномуПоручению.СуммаКомиссии;
				
				РазностьКомиссии = СуммаКомиссииСПолнойСуммыПеречисления - ОбщаяСуммаКомиссии;
				СуммаКомиссии = СуммаКомиссии + РазностьКомиссии;
				СуммаКПеречислению = СуммаКПеречислению + РазностьКомиссии;
				ОбщаяСуммаКомиссии = ОбщаяСуммаКомиссии + РазностьКомиссии;
			КонецЕсли;
			ОбластьСтроки.Параметры.СуммаКПеречислению = СуммаКПеречислению;
		КонецЕсли;

		
		ФайлСписка.Вывести(ОбластьСтроки);
		
		ОбщаяСумма  = ОбщаяСумма + СуммаКПеречислению;
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;   	

	Если ВыборкаПоПлатежномуПоручению.СуммаКомиссии <> 0 И НЕ РассчитыватьКомиссиюБанкаПоКаждомуРаботнику Тогда
		СуммаКомиссии   = ВыборкаПоПлатежномуПоручению.СуммаКомиссии;
		ОбщаяСумма	    = ОбщаяСумма + СуммаКомиссии;
		НомерСтроки		= НомерСтроки + 1;
		
		ОбластьКомиссияБанка.Параметры.Заполнить(ВыборкаПоПлатежномуПоручению);
		ОбластьКомиссияБанка.Параметры.НомерОрганизацииВБанковскойСистеме = Прав(ВыборкаПоПлатежномуПоручению.КодОрганизацииВБанковскойСистеме, 4);
		ОбластьКомиссияБанка.Параметры.СуммаКомиссии = СуммаКомиссии;
		ФайлСписка.Вывести(ОбластьКомиссияБанка);
	КонецЕсли;
	
	ОбластьПодвала.Параметры.Заполнить(ВыборкаПоПлатежномуПоручению);
	ОбластьПодвала.Параметры.КоличествоСтрок = НомерСтроки;
	ОбластьПодвала.Параметры.ОбщаяСумма = ОбщаяСумма;
	ФайлСписка.Вывести(ОбластьПодвала);
	
	ПолныйКаталогВыгрузки = КаталогВыгрузки + Формат(ОбщегоНазначения.ТекущаяДатаПользователя(), "ДФ=""дд-ММ-гг""") + ".1\";	
	ИмяФайлаСписка = "P" + Сред(СокрЛП(ВыборкаПоПлатежномуПоручению.КодОрганизацииВБанковскойСистеме),9 , 2) + Прав(СокрЛП(ВыборкаПоПлатежномуПоручению.КодОрганизацииВБанковскойСистеме), 4) + "1." + СокрЛП(ДеньГода(ТекущаяДата()));	
	
	Если ИспользоватьПолныйПуть Тогда
		ИмяФайла = ПолныйКаталогВыгрузки + ИмяФайлаСписка;
	Иначе                      		
		ИмяФайла =  ИмяФайлаСписка;
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ЗаписатьДанныеВФайл(ФайлСписка, ИмяВременногоФайла);
	
	СтруктураПередаваемыхФайлов.Вставить(ИмяФайла, ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла), УникальныйИдентификатор));


КонецПроцедуры //СформироватьФайлСпискаЗачисленияЗарплатыНБ()

Процедура СформироватьФайлыЗачисленияЗарплатыНБ(ФормироватьОтдельныеФайлы, ВключатьПолеFT, НомерФайла, СтруктураПередаваемыхФайлов, УникальныйИдентификатор, ТекстВыгрузки = Неопределено, ИспользоватьПолныйПуть, ВключатьПоляФорматаMX)
	
	Отказ = Ложь; 	
	КоличествоРаботниковВФайле = 500;	
	РезультатЗапросаПоПлатежномуПоручению = СформироватьЗапросПоПлатежномуПоручениюКартСчета();
	ВыборкаПоПлатежномуПоручению = РезультатЗапросаПоПлатежномуПоручению.Выбрать();
	
	ВидОперации = Документ.ВидОперации;
	
	ДанныеДокумента = Новый Структура("ВидОперации, ВидНалога, Дата, Номер");
	ЗаполнитьЗначенияСвойств(ДанныеДокумента, Документ);

	Если ВыборкаПоПлатежномуПоручению.Следующий() Тогда
		
		ПроверитьЗаполнениеРеквизитовПлатежногоПоручения(ВыборкаПоПлатежномуПоручению, Отказ, ВключатьПоляФорматаMX);	
	
		ЗапросПоСпискуРаботников = СформироватьЗапросПоКартСчетам(ВидОперации, ВключатьПоляФорматаMX);
		ВыборкаПоСпискуРаботников = ЗапросПоСпискуРаботников.Выбрать();
		 
		Пока ВыборкаПоСпискуРаботников.Следующий() Цикл
			ПроверитьЗаполнениеРеквизитовСтрокиСпискаРаботников(ВыборкаПоСпискуРаботников, Отказ, ВключатьПоляФорматаMX);
		КонецЦикла;
		
	КонецЕсли;
	
	Если Отказ Тогда
		ТекстСообщения = НСтр("ru = 'Файлы не сформированы!'");
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,
				,
				,
				,
				Отказ);   	
		
		Возврат;
	КонецЕсли;
	
	// транспортный файл в формате МТ-102
	ФайлМТ102 = Новый ТекстовыйДокумент;
	
	// формируем заголовок файла
	СформироватьЗаголовокТранспортногоФайлаНБ(ФайлМТ102, ВыборкаПоПлатежномуПоручению, ВключатьПоляФорматаMX);
	
	// добавляем строки данных по сотрудникам
	НомерСтроки = 1; 
	ОбщаяСумма = 0; 
	НомерППСНачала = 1;
	ОбщаяСуммаКомиссии = 0;
	ОбщаяСуммаРаспределеннойКомиссии = 0;
	ВыборкаПоСпискуРаботников = ЗапросПоСпискуРаботников.Выбрать();
	КоличествоРаботниковВСписке = ВыборкаПоСпискуРаботников.Количество();
	
	Пока ВыборкаПоСпискуРаботников.Следующий() Цикл
		
		Если ВыборкаПоСпискуРаботников.СуммаКПеречислению <= 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		Если (НомерСтроки > КоличествоРаботниковВФайле) И (ФормироватьОтдельныеФайлы) Тогда
			// формируем конец файла
			СформироватьКонецТранспортногоФайлаНБ(ФайлМТ102, ВыборкаПоПлатежномуПоручению, НомерСтроки, ОбщаяСумма, ОбщаяСуммаКомиссии, Ложь);
			
			// запрос на сохранение файла	
			ВыполнитьВыгрузкуДанных(ФайлМТ102, НомерФайла, СтруктураПередаваемыхФайлов, ДанныеДокумента, УникальныйИдентификатор,ИспользоватьПолныйПуть);
			
			// формируем заголовок нового файла
			СформироватьЗаголовокТранспортногоФайлаНБ(ФайлМТ102, ВыборкаПоПлатежномуПоручению, ВключатьПоляФорматаMX);
			
			// инициализируем переменные
			НомерСтроки = 1; ОбщаяСумма  = 0;
			ОбщаяСуммаКомиссии = 0;
			// здесь не обнуляем ОбщаяСуммаРаспределеннойКомиссии, т.к. она содержит общую сумму комиссии по всему документу 
			// и необходима для формирования остатка по комиссии на последнем работнике
			НомерФайла = НомерФайла + 1;
			
		КонецЕсли;
		
		// определим, является ли данный работник последним в списке, чтобы на него скинуть разницу в комиссии банка
		ЭтоПоследнийРаботник = Ложь;
		Если НомерППСНачала = КоличествоРаботниковВСписке Тогда
			ЭтоПоследнийРаботник = Истина;
		КонецЕсли;
		
		ОбщаяСумма  = ОбщаяСумма + ВыборкаПоСпискуРаботников.СуммаКПеречислению;
		СформироватьСтрокуРаботникаТранспортногоФайлаНБ(ФайлМТ102, ВключатьПолеFT, ВыборкаПоПлатежномуПоручению, ВыборкаПоСпискуРаботников, НомерСтроки, ОбщаяСумма, ОбщаяСуммаКомиссии, ОбщаяСуммаРаспределеннойКомиссии, ЭтоПоследнийРаботник, ВключатьПоляФорматаMX);
		
		НомерСтроки = НомерСтроки + 1;
		НомерППСНачала = НомерППСНачала + 1;
		
	КонецЦикла;
	
	// формируем конец файла
	СформироватьКонецТранспортногоФайлаНБ(ФайлМТ102, ВыборкаПоПлатежномуПоручению, НомерСтроки, ОбщаяСумма, ОбщаяСуммаКомиссии, Истина);
	
	Если ТекстВыгрузки <> Неопределено Тогда     	
		// если программный вызов	             
		ТекстВыгрузки = ФайлМТ102;	
	Иначе
		// если интерактивное формирование	
		// запись файла	
		ВыполнитьВыгрузкуДанных(ФайлМТ102,НомерФайла, СтруктураПередаваемыхФайлов, ДанныеДокумента, УникальныйИдентификатор,ИспользоватьПолныйПуть);
		
		// файл списка
		//ВыборкаПоСпискуРаботников = ЗапросПоСпискуРаботников.Выбрать();
		//СформироватьФайлСпискаЗачисленияЗарплатыНБ(ВыборкаПоПлатежномуПоручению, ВыборкаПоСпискуРаботников, СтруктураПередаваемыхФайлов, УникальныйИдентификатор, ИспользоватьПолныйПуть);
		
	КонецЕсли;
	
КонецПроцедуры //СформироватьФайлыЗачисленияЗарплатыНБ()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ФАЙЛОВ

Функция СоздатьФайлВФорматеМТ(ФормироватьОтдельныеФайлы = Ложь, ВключатьПолеFT = Ложь, ВключатьПолеPSO = Ложь, ВключатьПолеPRT = Ложь, ПолеPERIODвЗаголовке = 1, УникальныйИдентификатор, ИспользоватьПолныйПуть = Истина, ВключатьПоляФорматаMX = Ложь) Экспорт
	
	ФормироватьОтдельныеФайлы = ФормироватьОтдельныеФайлы;
	ВключатьПолеFT 	       = ВключатьПолеFT;
	ВключатьПолеPSO 	   = ВключатьПолеPSO;
	ВключатьПолеPRT 	   = ВключатьПолеPRT;          
	ВключатьПоляФорматаMX  = ВключатьПоляФорматаMX;
	ПолеPERIODвЗаголовке   = ?(ПолеPERIODвЗаголовке = 1, Истина, Ложь);
	НомерФайла = 1;
	АдресХранилищеДанных = Неопределено;
	СтруктураПередаваемыхФайлов = Новый Соответствие();
			
	Если ЭтоПеречислениеНаКартСчета() Тогда				
		Если СокрЛП(ФорматФайлов) = ФорматПеречисленияВНародныйБанк() Тогда
			СформироватьФайлыЗачисленияЗарплатыНБ(ФормироватьОтдельныеФайлы,ВключатьПолеFT, НомерФайла, СтруктураПередаваемыхФайлов, УникальныйИдентификатор,, ИспользоватьПолныйПуть, ВключатьПоляФорматаMX);				    
		КонецЕсли;		
	Иначе         		
		СформироватьФайлОтчислений(ФормироватьОтдельныеФайлы,ПолеPERIODвЗаголовке,ВключатьПолеPSO, ВключатьПолеPRT, ВключатьПолеFT, НомерФайла, СтруктураПередаваемыхФайлов, УникальныйИдентификатор,,ИспользоватьПолныйПуть, ВключатьПоляФорматаMX);		
	КонецЕсли;   	
	
	 АдресХранилищеДанных = ПоместитьВоВременноеХранилище(СтруктураПередаваемыхФайлов, УникальныйИдентификатор);
	 
	 Возврат АдресХранилищеДанных;
	
КонецФункции

// Функция создает текстовый документ в памяти, содержащий данные в формате МТ
// 
// Параметры:
//	ДокументВыгрузки- ссылка на платежное поручение исходящее, данные которого надо выгрузить
//	ФорматВыгрузки - строка с описанием одного из поддерживаемых форматов выгрузки (см. экспортные переменные модуля)
//
// Возвращаемое значение:
//	Текстовый документ, содержащий весь текст выгрузки
//
Функция СоздатьТекстовыйДокументВФорматеМТ(ДокументВыгрузки, ФорматВыгрузки, УникальныйИдентификатор) Экспорт

	ТекстВыгрузки = Новый ТекстовыйДокумент;
	
	Если ТипЗнч(ДокументВыгрузки) <> Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
		Возврат ТекстВыгрузки;
	КонецЕсли;
	
	// сохраняем переданные параметры в реквизиты обработки
	Документ = ДокументВыгрузки;
	ФорматФайлов = ФорматВыгрузки;
	
	// вызываем стандартный механизм формирования
	СоздатьФайлВФорматеМТ(Ложь,,,,,УникальныйИдентификатор); 
	
	Возврат ТекстВыгрузки;

КонецФункции

#КонецЕсли
