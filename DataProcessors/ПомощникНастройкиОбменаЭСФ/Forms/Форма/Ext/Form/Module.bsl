////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнформационнаяБазаФайловая = ЭСФСерверПереопределяемый.ИнформационнаяБазаФайловая();
	
	// Скрыть заголовки страниц.
	Элементы.СтраницыПодвал.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.ГруппаДоступ.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.ГруппаВерсия.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.ГруппаШапка.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.СтраницыAPI.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	БиблиотекаЗагружена = Ложь; // Заполним флаг расчете версий библиотеки
	
	// Установить переключатель МестоУстановкиБиблиотеки.
	МестоУстановкиБиблиотеки = Константы.МестоВыполненияКриптографическихОпераций.Получить();
	Если МестоУстановкиБиблиотеки = Перечисления.МестаВыполненияКриптографическихОпераций.ПустаяСсылка() Тогда
		МестоУстановкиБиблиотеки = Перечисления.МестаВыполненияКриптографическихОпераций.НаКлиенте;
		Константы.МестоВыполненияКриптографическихОпераций.Установить(МестоУстановкиБиблиотеки);
	КонецЕсли;
	
	Если ИнформационнаяБазаФайловая Тогда
		Элементы.МестоУстановкиБиблиотеки.Видимость = Ложь;	
	КонецЕсли;
	
	ПараметрыЭСФ = ЭСФСервер.ПолучитьПараметрыЭСФ();
	ИспользоватьКомпонентуНЦАДляПодписиДокументов = ПараметрыЭСФ.ИспользоватьПодписьНовойКомпоненты;
	ОткрыватьСессиюСПодписью = ПараметрыЭСФ.ИспользоватьОткрытиеСессииСПодписью;
	ИспользоватьВнешнююКриптографиюДляКомпоненты = ПараметрыЭСФ.ИспользоватьВнешнююКриптографиюДляКомпоненты;
	УстановитьДоступностьИспользоватьВнешнююКриптографиюДляКомпоненты();
	
	Элементы.СписокПользователейСоздатьНовогоПользователя.Видимость = РольДоступна("ПолныеПрава");
	
	ПрочитатьСпособыОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновленМодульКриптографии" Тогда
		ОбновитьПредставлениеСтатусаКриптобиблиотеки(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура НадписьДоступПодробнееНажатие(Элемент)
	
	Сообщить(ОшибкаСоединения, СтатусСообщения.Внимание);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьВерсияПодробнееНажатие(Элемент)
	
	Сообщить(ОшибкаВерсии, СтатусСообщения.Внимание);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПараметрыПодключенияКСерверуИСЭСФНажатие(Элемент)
	ДополнительныеПараметры = Новый Структура("ЦельОткрытияФормы", "НастройкаПодключенияКСерверуИСЭСФ");	
	ОткрытьФорму("Обработка.ОбменЭСФ.Форма.ПараметрыПодключенияКСерверуИСЭСФ", ДополнительныеПараметры, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОбменЭСФЧерезAPIПриИзменении(Элемент)
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОбменЭСФЧерезXMLПриИзменении(Элемент)
	ЗаписатьСпособыОбмена();
	ОбновитьИнтерфейс();
КонецПроцедуры

&НаКлиенте
Процедура МестоУстановкиБиблиотекиПриИзменении(Элемент)
	
	Если ЭтаФорма.МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаКлиенте") 
		И ЭСФКлиентСерверПереопределяемый.ПоказыватьОповещенияСервернаяКриптография() Тогда
		НовоеОповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаМестоУстановкиБиблиотекиПриИзменении",
			ЭтотОбъект);
		ПоказатьВопрос(НовоеОповещение,
			ЭСФКлиент.ТекстВопросаМестоУстановкиБиблиотекиПриИзменении(),
			РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	Иначе
		
		МестоУстановкиБиблиотекиПриИзмененииНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаМестоУстановкиБиблиотекиПриИзменении(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да
		И ЭтаФорма.МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаКлиенте") Тогда
		МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаСервере");
	Иначе
		
		МестоУстановкиБиблиотекиПриИзмененииНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МестоУстановкиБиблиотекиПриИзмененииНаКлиенте()
	
	Если МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаСервере") Тогда
		Если НЕ ЭтаФорма.ИспользоватьВнешнююКриптографиюДляКомпоненты И (ЭтаФорма.ОткрыватьСессиюСПодписью ИЛИ ЭтаФорма.ИспользоватьКомпонентуНЦАДляПодписиДокументов) Тогда
			МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаКлиенте");
			ТекстСообщения = НСтр("ru='Для выполнения криптографии на сервере 1C:Предприятие необходимо включение настройки использование внешней криптографии Kalkan.'", "ru");
			ЭСФКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	МестоУстановкиБиблиотекиПриИзмененииНаСервере();
	ОбновитьПредставлениеСтатусаКриптобиблиотеки(ЭтаФорма);
	ОбновитьПредставлениеСтатусаКомпонентыНЦАНаКлиентеНаСервере(ЭтаФорма);
	УстановитьДоступностьИспользоватьВнешнююКриптографиюДляКомпоненты();
	
КонецПроцедуры

&НаКлиенте
Процедура МестоУстановкиБиблиотекиПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ОбновитьПредставлениеСтатусаКриптобиблиотеки(ЭтаФорма);
		ОбновитьПредставлениеСтатусаКомпонентыНЦАНаКлиентеНаСервере(ЭтаФорма);
		МестоУстановкиБиблиотекиПриИзмененииНаСервере();		
		Если МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаКлиенте") Тогда
			ОчиститьНастройкиНЦА(ДополнительныеПараметры.ПараметрыЭСФ);			
		КонецЕсли;
	Иначе
	    МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаКлиенте");
		МестоУстановкиБиблиотекиПриИзмененииНаСервере();
		ОбновитьПредставлениеСтатусаКриптобиблиотеки(ЭтаФорма);
		ОбновитьПредставлениеСтатусаКомпонентыНЦАНаКлиентеНаСервере(ЭтаФорма);
	КонецЕсли;
	 
КонецПроцедуры

&НаСервере
Процедура ОчиститьНастройкиНЦА(ПараметрыЭСФ)
	Если ПараметрыЭСФ.ИспользоватьПодписьНовойКомпоненты ИЛИ ПараметрыЭСФ.ИспользоватьОткрытиеСессииСПодписью Тогда		
		ПараметрыЭСФ.ИспользоватьПодписьНовойКомпоненты = Ложь;
		ПараметрыЭСФ.ИспользоватьОткрытиеСессииСПодписью = Ложь;
		ЭСФСервер.СохранитьПараметрыЭСФ(ПараметрыЭСФ);		
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Процедура МестоУстановкиБиблиотекиПриИзмененииНаСервере()
	Константы.МестоВыполненияКриптографическихОпераций.Установить(МестоУстановкиБиблиотеки);
КонецПроцедуры


&НаКлиенте
Процедура ПоказатьНастройкиПрокси()
	ДополнительныеПараметры = Новый Структура("ЦельОткрытияФормы", "НастройкаПрокси");
	ОткрытьФорму("Обработка.ОбменЭСФ.Форма.ПараметрыПроксиСервера", ДополнительныеПараметры, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура НадписьОписаниеОбменаЧерезAPIПроксиНажатие(Элемент)
	ПоказатьНастройкиПрокси();
КонецПроцедуры

&НаКлиенте
Процедура УстановкаБиблиотекиОфертаНажатие(Элемент)
	ПоказатьПользовательскоеСоглашение("Ознакомление");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ СписокПользователей

&НаКлиенте
Процедура СписокПользователейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если НЕ Копирование Тогда 
		Отказ = Истина;
		ОткрытьФорму("Справочник.ПользователиИСЭСФ.Форма.ПомощникНового", , ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПроверитьДоступИВерсию(Команда)
	
	СтруктураПараметров = ЭСФВызовСервера.ПроверитьДоступИВерсиюНаСервере();
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураПараметров);
	                                                                                
	Если СтруктураПараметров.ВерсияИСЭСФ = Неопределено Тогда
		Элементы.ГруппаДоступ.ТекущаяСтраница = Элементы.СтраницаДоступОшибка;
		Элементы.ГруппаВерсия.ТекущаяСтраница = Элементы.СтраницаВерсияВопрос;
		
	Иначе
		Элементы.ГруппаДоступ.ТекущаяСтраница = Элементы.СтраницаДоступУспешно;
		Элементы.НадписьВерсияОшибка.Заголовок = СтруктураПараметров.ТекстВерсияОшибка;
		Элементы.НадписьВерсияПоддерживает.Заголовок = СтруктураПараметров.ТекстВерсияПоддерживает;
		
		Если НЕ СтруктураПараметров.ВерсияИСЭСФПоддерживается Тогда
			Элементы.ГруппаВерсия.ТекущаяСтраница = Элементы.СтраницаВерсияОшибка;
		Иначе
			Элементы.ГруппаВерсия.ТекущаяСтраница = Элементы.СтраницаВерсияУспешно;	
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	ПерейтиНаСледующуюСтраницу = Истина;
	
	Если Элементы.ГруппаШапка.ТекущаяСтраница = Элементы.СтраницаОписание Тогда
		
		Если НЕ ИспользоватьОбменЭСФЧерезAPI И НЕ ИспользоватьОбменЭСФЧерезXML Тогда
			Предупреждение(НСтр("ru = 'Выберите хотя бы один способ обмена электронными счетами-фактурами.'"));
			ПерейтиНаСледующуюСтраницу = Ложь;
		Иначе
			ЗаписатьСпособыОбмена();	
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы.ГруппаШапка.ТекущаяСтраница = Элементы.СтраницаКриптография Тогда		
		
		Если НЕ ЗначениеЗаполнено(ВерсияКриптобиблиотекиБД) 
			И НЕ (ЗначениеЗаполнено(ВерсияКомпонентыНЦА) И ИспользоватьКомпонентуНЦАДляПодписиДокументов) Тогда
			ТекстПредупреждения = НСтр("ru = 'Переход далее невозможен, так как не установлены средства криптографии.'") + Символы.ПС + 
			НСтр("ru = 'Необходимо использовать один из следующих вариантов:
			| - установить библиотеку криптографии;
			| - установить компоненту для работы со средствами криптографии НУЦ РК и включить настройку подписи документов при помощи данных средств;
			| - либо отключить признак использования прямого обмена данными с ИС ЭСФ.'");
			Предупреждение(ТекстПредупреждения);
			ПерейтиНаСледующуюСтраницу = Ложь;
		КонецЕсли;
		
		Если ПерейтиНаСледующуюСтраницу Тогда
			СохранитьНастройки();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПерейтиНаСледующуюСтраницу Тогда
	
		МаксимальныйИндексСтраницы = Элементы.ГруппаШапка.ПодчиненныеЭлементы.Количество() - 1;
		
		Если ИспользоватьОбменЭСФЧерезAPI Тогда		
			
			Если ИндексТекущейСтраницы() < МаксимальныйИндексСтраницы Тогда
				
				Элементы.ГруппаШапка.ТекущаяСтраница = Элементы.ГруппаШапка.ПодчиненныеЭлементы.Получить(ИндексТекущейСтраницы() + 1);
				
				// Криптография для файловой базы не настраивается, поэтому место установки выбирать не нужно.
				Если Элементы.ГруппаШапка.ТекущаяСтраница.Имя = "СтраницаКриптография" И ИнформационнаяБазаФайловая Тогда
					Элементы.МестоУстановкиБиблиотеки.Видимость = Ложь;					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			СледующаяСтраница = Элементы.ГруппаШапка.ПодчиненныеЭлементы.Получить(ИндексТекущейСтраницы() + 1);
			
			Если СледующаяСтраница.Имя = "СтраницаКриптография" 
				ИЛИ СледующаяСтраница.Имя = "СтраницаДоступ" 
				ИЛИ СледующаяСтраница.Имя = "СтраницаПользователи" Тогда
				
				Элементы.ГруппаШапка.ТекущаяСтраница = Элементы.СтраницаЗавершение;
				
			Иначе
				
				Элементы.ГруппаШапка.ТекущаяСтраница = СледующаяСтраница;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОбновитьПанельКнопокНазадДалееЗакрыть();
	
	КонецЕсли;
	
	Если Элементы.ГруппаШапка.ТекущаяСтраница = Элементы.СтраницаЗавершение Тогда
		ПоказатьРезультатНастройкиОбменаЧерезAPI();
	КонецЕсли;
	
	Если Элементы.ГруппаШапка.ТекущаяСтраница = Элементы.СтраницаКриптография Тогда
		ОбновитьПредставлениеСтатусаКриптобиблиотеки(ЭтаФорма);
		ОбновитьПредставлениеСтатусаКомпонентыНЦАНаКлиентеНаСервере(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ИндексТекущейСтраницы()
	Возврат Элементы.ГруппаШапка.ПодчиненныеЭлементы.Индекс(Элементы.ГруппаШапка.ТекущаяСтраница);	
КонецФункции

&НаКлиенте
Процедура Назад(Команда)
		
	Если ИндексТекущейСтраницы() > 0 Тогда
		
		Если ИспользоватьОбменЭСФЧерезAPI Тогда
			
			Элементы.ГруппаШапка.ТекущаяСтраница = Элементы.ГруппаШапка.ПодчиненныеЭлементы.Получить(ИндексТекущейСтраницы() - 1);
			
			// Криптография для файловой базы не настраивается, поэтому место установки выбирать не нужно.
			Если Элементы.ГруппаШапка.ТекущаяСтраница.Имя = "СтраницаКриптография" И ИнформационнаяБазаФайловая Тогда
				Элементы.МестоУстановкиБиблиотеки.Видимость = Ложь;					
			КонецЕсли;			
		Иначе
			
			ПредыдущаяСтраница = Элементы.ГруппаШапка.ПодчиненныеЭлементы.Получить(ИндексТекущейСтраницы() - 1);
			
			Если ПредыдущаяСтраница.Имя = "СтраницаКриптография" 
				ИЛИ ПредыдущаяСтраница.Имя = "СтраницаДоступ" 
				ИЛИ ПредыдущаяСтраница.Имя = "СтраницаПользователи" Тогда
				
				Элементы.ГруппаШапка.ТекущаяСтраница = Элементы.СтраницаОписание;
				
			Иначе
				
				Элементы.ГруппаШапка.ТекущаяСтраница = ПредыдущаяСтраница;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьПанельКнопокНазадДалееЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура НадписьНеДоступенСерверИСЭСФНажатие(Элемент)
	Элементы.ГруппаШапка.ТекущаяСтраница = Элементы.СтраницаДоступ;
	ОбновитьПанельКнопокНазадДалееЗакрыть();
КонецПроцедуры

&НаКлиенте
Процедура НадписьНеПоддерживаетсяВерсияИСЭСФНажатие(Элемент)
	Элементы.ГруппаШапка.ТекущаяСтраница = Элементы.СтраницаДоступ;
	ОбновитьПанельКнопокНазадДалееЗакрыть();
КонецПроцедуры

&НаКлиенте
Процедура НадписьНеСозданыПользователиИСЭСФНажатие(Элемент)
	Элементы.ГруппаШапка.ТекущаяСтраница = Элементы.СтраницаПользователи;
	ОбновитьПанельКнопокНазадДалееЗакрыть();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовогоПользователя(Команда)
	
	ОткрытьФорму("Справочник.ПользователиИСЭСФ.Форма.ФормаЭлемента", , ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьБиблиотекуИзБД(Команда)
	УдалитьБиблиотекуИзБДНаСервере();
	ОбновитьПредставлениеСтатусаКриптобиблиотеки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРаботуБиблиотеки(Команда)
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	
	Версия = "";
	Результат = Ложь;
	Попытка
		Результат = Контейнер.КриптопровайдерПодключается(Версия, Ложь, МестоУстановкиБиблиотеки,, Ложь);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
	КонецПопытки;
	
	Если Результат Тогда
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru = 'Библиотека успешно подключена! Версия: %1'"), СокрЛП(Версия));
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	Иначе	
		ВызватьИсключение НСтр("ru = 'Не удалось подключить библиотеку криптографии.'") + Символы.ПС + ОписаниеОшибки();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКриптобиблиотеку(Команда)	
	ПоказатьПользовательскоеСоглашение("Заключение");		
	ОбновитьПредставлениеСтатусаКриптобиблиотеки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьБиблиотеку(Команда)
	
	Если ВерсияКриптобиблиотекиНаСайте <> ВерсияКриптобиблиотекиБД Тогда
		ПоказатьПользовательскоеСоглашение("Обновление");		
		ОбновитьПредставлениеСтатусаКриптобиблиотеки(ЭтаФорма);
	Иначе
		ОткрытьФорму("Обработка.ОбменЭСФ.Форма.ОбновлениеКомпонентыКриптографии");
	КонецЕсли;
	
КонецПроцедуры

#Область КомандыКомпонентаWSCrypto

&НаКлиенте
Процедура ОбновитьКомпонентуНЦА(Команда)
	
	УникальныйИдентификаторФормыКлиента = ЭтаФорма.УникальныйИдентификатор;
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();
	СсылкаНаМодуль = Контейнер.АдресБиблиотекиКриптографииНЦА(УникальныйИдентификаторФормыКлиента);
	НачатьУстановкуВнешнейКомпоненты(, СсылкаНаМодуль);
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРаботуНЦА(Команда)	
	
	Если ЭтаФорма.МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаКлиенте") Тогда
		СистемнаяИнформация = ИнформацияОСистемеКлиент();
	Иначе
		СистемнаяИнформация = ИнформацияОСистемеСервер();
	КонецЕсли;
	ИнформацияОСистеме = Символы.ПС + "Сведения об аппаратном и программном обеспечении:";
	ИнформацияОСистеме = ИнформацияОСистеме + Символы.ПС + "ОС: " + СистемнаяИнформация.ВерсияОС;
	ИнформацияОСистеме = ИнформацияОСистеме + Символы.ПС + "Версия 1С:" + СистемнаяИнформация.ВерсияПриложения;
	ИнформацияОСистеме = ИнформацияОСистеме + Символы.ПС + "Тип платформы:" + СистемнаяИнформация.ТипПлатформы;	
	ИнформацияОСистеме = ИнформацияОСистеме + Символы.ПС + "Тип процессора:" + СистемнаяИнформация.Процессор;	
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Результат = Ложь;
	Попытка
		Результат = Контейнер.КриптопровайдерПодключается(ВерсияКомпонентыНЦА, Ложь, МестоУстановкиБиблиотеки, Истина, Истина);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
	КонецПопытки;
	ВерсияКомпонентыНЦА = СтрЗаменить(ВерсияКомпонентыНЦА, ",", ".");
	
	Если Результат Тогда
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru = 'Компонента успешно подключена! Версия: %1 %2'"), СокрЛП(ВерсияКомпонентыНЦА), Символы.ПС + ИнформацияОСистеме);
	Иначе	
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось подключить библиотеку криптографии. Возможно она не установлена или возникла ошибка при попытке ее подключения. %1 %2'"), Символы.ПС + ОписаниеОшибки(), ИнформацияОСистеме);
	КонецЕсли;
	ЭСФКлиентСервер.СообщитьПользователю(ТекстСообщения);

КонецПроцедуры

&НаКлиенте
Процедура ОткрыватьСессиюСПодписьюПриИзменении(Элемент)
	
	Если ОткрыватьСессиюСПодписью = Ложь Тогда
		Модифицированность = Истина;
	Иначе
		Если ЭтаФорма.МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаСервере")
			И НЕ ЭтаФорма.ИспользоватьВнешнююКриптографиюДляКомпоненты Тогда
			ТекстСообщения = НСтр("ru='Использование механизма открытия сессий с подписью возможно только при включеной внешней криптографии Kalkan.'", "ru");
			ЭСФКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ОткрыватьСессиюСПодписью = Ложь;
		Иначе
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьИспользоватьВнешнююКриптографиюДляКомпоненты();

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКомпонентуНЦАПриИзменении(Элемент)
	
	Если ИспользоватьКомпонентуНЦАДляПодписиДокументов = Ложь Тогда
		Модифицированность = Истина;
	Иначе
		Если ЭтаФорма.МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаСервере") 
			И НЕ ЭтаФорма.ИспользоватьВнешнююКриптографиюДляКомпоненты Тогда
			ТекстСообщения = НСтр("ru='Использование криптографии НУЦ РК для подписи возможно только при включеной внешней криптографии Kalkan.'", "ru");
			ЭСФКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ИспользоватьКомпонентуНЦАДляПодписиДокументов = Ложь;
		Иначе
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьИспользоватьВнешнююКриптографиюДляКомпоненты();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВнешнююКриптографиюДляКомпонентыПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ОбновитьПанельКнопокНазадДалееЗакрыть()
	
	ИндексТекущейСтраницы = Элементы.ГруппаШапка.ПодчиненныеЭлементы.Индекс(Элементы.ГруппаШапка.ТекущаяСтраница);
	МаксимальныйИндексСтраницы = Элементы.ГруппаШапка.ПодчиненныеЭлементы.Количество() - 1;
	
	Если ИндексТекущейСтраницы = 0 Тогда
		
		Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаДалее;
		Элементы.Далее.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли ИндексТекущейСтраницы > 0 И ИндексТекущейСтраницы < МаксимальныйИндексСтраницы Тогда
		
		Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаНазадДалее;
		Элементы.Далее2.КнопкаПоУмолчанию = Истина;
		
	Иначе // ИндексТекущейСтраницы = МаксимальныйИндексСтраницы
		
		Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаГотово;	
		Элементы.Готово.КнопкаПоУмолчанию = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьРезультатНастройкиОбменаЧерезAPI()
	
	// Скрыть обе страницы.
	Элементы.СтраницаAPIУспешно.Видимость = Ложь;
	Элементы.СтраницаAPIОшибка.Видимость = Ложь;
	
	ПользователиИСЭСФСозданы = ПользователиИСЭСФСозданы();
	
	Если СерверИСЭСФДоступен 
	   И ВерсияИСЭСФПоддерживается 
	   И ПользователиИСЭСФСозданы Тогда
	   
		Элементы.СтраницаAPIУспешно.Видимость = Истина;
	   
	Иначе
		
		Элементы.СтраницаAPIОшибка.Видимость = Истина;
		
		// Не доступен сервер ИС ЭСФ
		Если СерверИСЭСФДоступен Тогда 
			Элементы.НадписьНеДоступенСерверИСЭСФ.Видимость = Ложь;	
		Иначе
			Элементы.НадписьНеДоступенСерверИСЭСФ.Видимость = Истина;	
		КонецЕсли;
		
		// Программа не поддерживает текущую версию ИС ЭСФ
		Если СерверИСЭСФДоступен И НЕ ВерсияИСЭСФПоддерживается Тогда 
			Элементы.НадписьНеПоддерживаетсяВерсияИСЭСФ.Видимость = Истина;	
		Иначе
			Элементы.НадписьНеПоддерживаетсяВерсияИСЭСФ.Видимость = Ложь;	
		КонецЕсли;
		
		// Не созданы пользователи ИС ЭСФ
		Если ПользователиИСЭСФСозданы Тогда 
			Элементы.НадписьНеСозданыПользователиИСЭСФ.Видимость = Ложь;	
		Иначе
			Элементы.НадписьНеСозданыПользователиИСЭСФ.Видимость = Истина;	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПользователиИСЭСФСозданы() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ПользователиИСЭСФ.Ссылка
	|ИЗ
	|	Справочник.ПользователиИСЭСФ КАК ПользователиИСЭСФ
	|ГДЕ
	|	НЕ ПользователиИСЭСФ.ПометкаУдаления";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ПользователиСозданы = Ложь;
	Иначе
		ПользователиСозданы = Истина;	
	КонецЕсли;

	Возврат ПользователиСозданы;
	
КонецФункции

&НаСервере
Процедура ПрочитатьСпособыОбмена()
	
	ИспользоватьОбменЭСФЧерезAPI = Константы.ИспользоватьОбменЭСФЧерезAPI.Получить();
	ИспользоватьОбменЭСФЧерезXML = Константы.ИспользоватьОбменЭСФЧерезXML.Получить();
	
	УправлениеФормой(ЭтаФорма); 	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСпособыОбмена()
	
	Константы.ИспользоватьОбменЭСФЧерезAPI.Установить(ИспользоватьОбменЭСФЧерезAPI);
	Константы.ИспользоватьОбменЭСФЧерезXML.Установить(ИспользоватьОбменЭСФЧерезXML);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Если Форма.ИспользоватьОбменЭСФЧерезAPI Тогда
		Форма.Элементы.ГруппаAPI.Видимость = Истина;
	Иначе
		Форма.Элементы.ГруппаAPI.Видимость = Ложь;		
	КонецЕсли;
	
	Если Форма.ИспользоватьОбменЭСФЧерезXML Тогда
		Форма.Элементы.ГруппаXML.Видимость = Истина;
	Иначе
		Форма.Элементы.ГруппаXML.Видимость = Ложь;
	КонецЕсли;		

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПользовательскоеСоглашение(ЦельОткрытияСоглашения)
	ДополнительныеПараметры = Новый Структура("ЦельОткрытияСоглашения, ИспользоватьОбменЭСФЧерезAPI", ЦельОткрытияСоглашения, ИспользоватьОбменЭСФЧерезAPI);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаключениеПользовательскогоСоглашенияЗавершение", ЭтаФорма, ДополнительныеПараметры);		
	ОткрытьФорму("Обработка.ОбменЭСФ.Форма.ПользовательскоеСоглашение", ДополнительныеПараметры, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗаключениеПользовательскогоСоглашенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	// Если условия использования не приняты, то использование криптографии недоступно.
	Если ДополнительныеПараметры.ЦельОткрытияСоглашения = "Заключение" и Результат <> Истина Тогда		
		ИспользоватьОбменЭСФЧерезAPI = Ложь;		
		// откатываемся на предыдущую страницу
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(НСТР("ru='В связи с отказом от заключения Соглашения возможность прямого обмена данными с ИС ЭСФ отключена.'"));
		Элементы.ГруппаШапка.ТекущаяСтраница = Элементы.СтраницаОписание;
	КонецЕсли;	  
	
	ЗаписатьСпособыОбмена();
	ОбновитьИнтерфейс();
	ОбновитьПредставлениеСтатусаКриптобиблиотеки(ЭтаФорма);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеСтатусаКриптобиблиотеки(Форма)
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	// Данные о наличии загруженной библиотеки
	ВерсияВнешнегоМодуляКриптографии = Контейнер.ВерсияВнешнегоМодуляКриптографии();
	Форма.ВерсияКриптобиблиотекиБД = ВерсияВнешнегоМодуляКриптографии; 	
	БиблиотекаЗагружена = ЗначениеЗаполнено(ВерсияВнешнегоМодуляКриптографии); 	
	 
	СвойстваМодуляДляТекущегоРелиза = Неопределено;
	ШапкаОшибки = НСтр("ru = 'Ошибка получения версии модуля криптографии:'");
	ВерсияМодуляНаСайте = "";
	НужноОбновление =  ЭлектронноеВзаимодействиеССервисамиВызовСервера.ПроверитьНаличиеОбновлений(СвойстваМодуляДляТекущегоРелиза, ШапкаОшибки);		
	Если СвойстваМодуляДляТекущегоРелиза <> Неопределено Тогда
		ВерсияМодуляНаСайте = СвойстваМодуляДляТекущегоРелиза.Версия;
	КонецЕсли;
	
	Форма.ВерсияКриптобиблиотекиНаСайте = ВерсияМодуляНаСайте;
	
	Форма.Элементы.ГруппаБиблиотекаУстановлена.Видимость = БиблиотекаЗагружена;	
	Форма.Элементы.ГруппаБиблиотекаНеУстановлена.Видимость = НЕ БиблиотекаЗагружена;				
	
	РезультатПроверки = Ложь;
	Если БиблиотекаЗагружена Тогда
		// Обновление данные о наличии установленной библиотекии, 
		// заполнение реквизита ВерсияКриптобиблиотеки в форме настройки
		Попытка
			РезультатПроверки = Контейнер.КриптопровайдерПодключается(Форма.ВерсияКриптобиблиотеки,,, Истина, Ложь); // Без выдачи сообщения пользователю. Так как 	информация о статуске отображается визуально.
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		КонецПопытки;
		Форма.ВерсияКриптобиблиотеки = СтрЗаменить(Форма.ВерсияКриптобиблиотеки, ",", ".");
	Иначе
		РезультатПроверки = Ложь;
	КонецЕсли;  
	
	ВерсияИБОтличаетсяОтВерсииНаСайте = (ЗначениеЗаполнено(Форма.ВерсияКриптобиблиотекиБД) И ЗначениеЗаполнено(Форма.ВерсияКриптобиблиотекиНаСайте)
		И Форма.ВерсияКриптобиблиотекиБД <> Форма.ВерсияКриптобиблиотекиНаСайте);
		
	ВерсияНаКомпьютереПользователяОтличаетсяОтВерсииИБ = (ЗначениеЗаполнено(Форма.ВерсияКриптобиблиотекиБД)
		И Форма.ВерсияКриптобиблиотеки <> Форма.ВерсияКриптобиблиотекиБД);
	
	Форма.Элементы.КартинкаБиблиотекаУстановлена.Видимость = НЕ ВерсияИБОтличаетсяОтВерсииНаСайте И НЕ ВерсияНаКомпьютереПользователяОтличаетсяОтВерсииИБ;	
	Форма.Элементы.КартинкаБиблиотекаНеОбновлена.Видимость = ВерсияИБОтличаетсяОтВерсииНаСайте ИЛИ ВерсияНаКомпьютереПользователяОтличаетсяОтВерсииИБ;	
	Форма.Элементы.ГруппаБиблиотекаНеУстановлена.Видимость = НЕ БиблиотекаЗагружена;
	
	Форма.Элементы.ГруппаВерсияБиблиотекиНаСайте.Видимость = ВерсияИБОтличаетсяОтВерсииНаСайте;
	Форма.Элементы.ГруппаДанныеБД.Видимость = НЕ ВерсияИБОтличаетсяОтВерсииНаСайте;
	Форма.Элементы.ГруппаВерсияБиблиотеки.Видимость = НЕ ВерсияИБОтличаетсяОтВерсииНаСайте;
	Форма.Элементы.НадписьБиблиотекаУстановлена.Видимость = НЕ ВерсияИБОтличаетсяОтВерсииНаСайте;

	Если ВерсияИБОтличаетсяОтВерсииНаСайте Тогда
		Форма.Элементы.НадписьБиблиотекаУстановлена.Заголовок = НСтр("ru = 'Библиотека установлена, но требует обновления версии'");	
	ИначеЕсли ВерсияНаКомпьютереПользователяОтличаетсяОтВерсииИБ Тогда
		Форма.Элементы.НадписьБиблиотекаУстановлена.Заголовок = НСтр("ru = 'Библиотека загружена в информационную базу, требуется установка версии на клиенте'");	
	ИначеЕсли НЕ РезультатПроверки Тогда
		Форма.Элементы.НадписьБиблиотекаУстановлена.Заголовок = НСтр("ru = 'Библиотека получена, но не установлена'");	
	Иначе
		Форма.Элементы.НадписьБиблиотекаУстановлена.Заголовок = НСтр("ru = 'Библиотека получена и готова к использованию'");	
	КонецЕсли;
	
	Если ВерсияНаКомпьютереПользователяОтличаетсяОтВерсииИБ Тогда
		Форма.Элементы.ОбновитьКриптобиблиотеку.Заголовок = НСтр("ru = 'Установить криптобиблиотеку'");
	Иначе
		Форма.Элементы.ОбновитьКриптобиблиотеку.Заголовок = НСтр("ru = 'Обновить криптобиблиотеку'");
	КонецЕсли;

	СформироватьЗаголовокЛокальнаяВерсияБиблиотеки(Форма, Форма.МестоУстановкиБиблиотеки);
	
	Форма.Элементы.ОбновитьКриптобиблиотеку.Видимость = ВерсияИБОтличаетсяОтВерсииНаСайте ИЛИ ВерсияНаКомпьютереПользователяОтличаетсяОтВерсииИБ;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьЗаголовокЛокальнаяВерсияБиблиотеки(Форма, МестоУстановкиБиблиотеки)
	Если МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаСервере") Тогда
		Форма.Элементы.НадписьВерсияКриптобиблиотеки.Заголовок = "Версия на сервере:"
	Иначе	
		Форма.Элементы.НадписьВерсияКриптобиблиотеки.Заголовок = "Версия на машине пользователя:"
	КонецЕсли;		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьБиблиотекуИзБДНаСервере()
	Константы.ЭСФВерсияВнешнегоМодуля.Установить(Неопределено);	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОписаниеНастроекAPIНажатие(Элемент)
	ПоказатьНастройкиПодключенияAPI();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройкиПодключенияAPI()
	ДополнительныеПараметры = Новый Структура("ЦельОткрытияФормы", "НастройкаПрокси");	
	ОткрытьФорму("Обработка.ОбменЭСФ.Форма.ПараметрыПодключенияКСерверуИСЭСФ", ДополнительныеПараметры, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки(Отказ = Ложь)
	
	ПараметрыЭСФ = ЭСФСервер.ПолучитьПараметрыЭСФ();
	ПараметрыЭСФ.ИспользоватьПодписьНовойКомпоненты = ИспользоватьКомпонентуНЦАДляПодписиДокументов;
	ПараметрыЭСФ.ИспользоватьОткрытиеСессииСПодписью = ОткрыватьСессиюСПодписью;
	ПараметрыЭСФ.ИспользоватьВнешнююКриптографиюДляКомпоненты = ИспользоватьВнешнююКриптографиюДляКомпоненты;
	
	ЭСФСервер.СохранитьПараметрыЭСФ(ПараметрыЭСФ);
	
КонецПроцедуры

#Область СлужебныеПроцедурыКомпонентаWSCrypto

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеСтатусаКомпонентыНЦАНаКлиентеНаСервере(Форма)
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	РезультатПроверки = Ложь;
	Попытка
		РезультатПроверки = Контейнер.КриптопровайдерПодключается(Форма.ВерсияКомпонентыНЦА,,, Истина, Истина);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
	КонецПопытки;
	ВерсияВБазе = ЭСФКлиентСервер.ВерсияКомпонентыНЦАВБазе();	
	Форма.ВерсияКомпонентыНЦА = СтрЗаменить(Форма.ВерсияКомпонентыНЦА, ",", ".");
	Форма.Элементы.ОбновитьКомпонентуНЦА.Видимость = Истина;
	Форма.ВерсияКомпонентыНЦАВБД = ВерсияВБазе;
	
	Если НЕ РезультатПроверки Тогда
		Форма.Элементы.НадписьБиблиотекаНЦАУстановлена.Заголовок = НСтр("ru = 'Библиотека не установлена'");
		Форма.Элементы.ОбновитьКомпонентуНЦА.Заголовок = НСтр("ru = 'Установить компоненту'");
		Форма.Элементы.КартинкаКомпонентаНЦАУстановлена.Видимость = Ложь;	
		Форма.Элементы.КартинкаКомпонентаНЦАНеОбновлена.Видимость = Истина;	
	ИначеЕсли Форма.ВерсияКомпонентыНЦА < ВерсияВБазе Тогда
		Форма.Элементы.НадписьБиблиотекаНЦАУстановлена.Заголовок = НСтр("ru = 'Библиотека установлена, но требует обновления версии'");		
		Форма.Элементы.ОбновитьКомпонентуНЦА.Заголовок = НСтр("ru = 'Обновить компоненту'");
		Форма.Элементы.КартинкаКомпонентаНЦАУстановлена.Видимость = Ложь;
	Иначе
		Форма.Элементы.НадписьБиблиотекаНЦАУстановлена.Заголовок = НСтр("ru = 'Библиотека установлена и готова к использованию'");
		Форма.Элементы.ОбновитьКомпонентуНЦА.Видимость = Ложь;
		Форма.Элементы.КартинкаКомпонентаНЦАУстановлена.Видимость = Истина;
		Форма.Элементы.КартинкаКомпонентаНЦАНеОбновлена.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ИнформацияОСистемеКлиент()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Результат = Новый Структура("ВерсияОС, ВерсияПриложения, ТипПлатформы, Процессор");
	Результат.ТипПлатформы = Строка(СистемнаяИнформация.ТипПлатформы);
	ЗаполнитьЗначенияСвойств(Результат, СистемнаяИнформация);
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ИнформацияОСистемеСервер()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Результат = Новый Структура("ВерсияОС, ВерсияПриложения, ТипПлатформы, Процессор");
	ЗаполнитьЗначенияСвойств(Результат, СистемнаяИнформация);
	Результат.ТипПлатформы = Строка(СистемнаяИнформация.ТипПлатформы);
	Возврат Результат;
КонецФункции

&НаСервере
Процедура УстановитьДоступностьИспользоватьВнешнююКриптографиюДляКомпоненты()
	
	Если ЭтаФорма.МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаКлиенте") Тогда
		Элементы.ИспользоватьВнешнююКриптографиюДляКомпоненты.Доступность = ?(НЕ ЭтаФорма.ОткрыватьСессиюСПодписью И НЕ ЭтаФорма.ИспользоватьКомпонентуНЦАДляПодписиДокументов, Ложь, Истина);
	ИначеЕсли ЭтаФорма.МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаСервере") Тогда
		Элементы.ИспользоватьВнешнююКриптографиюДляКомпоненты.Доступность = Истина;
	КонецЕсли;
	
	ЭСФСервер.ПроверитьИспользованиеСервернойКриптографииФормыНастройки(ЭтаФорма, МестоУстановкиБиблиотеки);
	
КонецПроцедуры

#КонецОбласти