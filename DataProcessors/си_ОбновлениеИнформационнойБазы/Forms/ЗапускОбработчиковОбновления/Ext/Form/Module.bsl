#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если РольДоступна("ПолныеПрава") Тогда
		
		ИдентификаторЗадания = ПолучитьИдентификаторЗаданияИзПользовательскихНастроек();
		Если ЗначениеЗаполнено(ИдентификаторЗадания) И НЕ ЗаданиеВыполняется(ИдентификаторЗадания) Тогда
			ИдентификаторЗадания = Неопределено;
			УдалитьИдентификаторЗаданияИзПользовательскихНастроек();
		КонецЕсли;

		ЗаполнитьРеквизитОбработчикиОбновления();
		УправлениеФормой(); // Должно быть ниже заполнения реквизита формы ИдентификаторЗадания.
		
	Иначе
		
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Форма доступна только пользователю с ролью ""Полные права"".'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	АктивизироватьСтроку(ИдентификаторПоследнейСтрокиВерсия());
	РазвернутьПомеченныеСтроки();
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ПодключитьОбработчикОжиданияВыполненияОбработчиковОбновления();
	КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбработкаиОбновления

&НаКлиенте
Процедура ОбработчикиОбновленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = ОбработчикиОбновления.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если ТекущиеДанные <> Неопределено 
		И ЭтоСтрокаОбработки(ТекущиеДанные) 
		И НЕ ВыполняютсяОбработчики(ЭтаФорма) Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуОбработчикаОбновления(ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикиОбновленияПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбработчикиОбновления.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ЭтоСтрокаОбработки(ТекущиеДанные) Тогда
			
			// Если помечены все строки обработок, подчиненные строке версии, 
			// то пометить строку версии, иначе снять пометку строки версии.
			СтрокаВерсия = ТекущиеДанные.ПолучитьРодителя();
			Если ПомеченыВсеОбработчикиОбновления(СтрокаВерсия) Тогда
				СтрокаВерсия.Пометка = Истина;
			Иначе
				СтрокаВерсия.Пометка = Ложь;
			КонецЕсли;
			
		Иначе // ТекущиеДанные - это строка версии.
			
			// Изменить пометку у подчиненных строк обработок.	
			КоллекцияСтрокОбработок = ТекущиеДанные.ПолучитьЭлементы();
			Для Каждого СтрокаОбработки Из КоллекцияСтрокОбработок Цикл
				СтрокаОбработки.Пометка = ТекущиеДанные.Пометка;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьОбработки(Команда)
	
	НачатоВыполнение = ВыполнитьКоллекциюОбработчиковОбновленияНаСервере();

	Если НачатоВыполнение Тогда
		ПодключитьОбработчикОжиданияВыполненияОбработчиковОбновления();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбработку(Команда)
	
	ТекущиеДанные = Элементы.ОбработчикиОбновления.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если ЭтоСтрокаОбработки(ТекущиеДанные) Тогда
			ОткрытьФормуОбработчикаОбновления(ТекущиеДанные);	
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите обработку для открытия.'"));	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТехническаяИнформация(Команда)
	
	ТекущиеДанные = ОбработчикиОбновления.НайтиПоИдентификатору(Элементы.ОбработчикиОбновления.ТекущаяСтрока); 
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ЭтоСтрокаОбработки(ТекущиеДанные) Тогда
			ПараметрыЖурналаРегистрации = Новый Структура;
			ПараметрыЖурналаРегистрации.Вставить("СобытиеЖурналаРегистрации", ТекущиеДанные.Наименование);
			ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыЖурналаРегистрации);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Действие доступно только для обработок обновления.'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет реквизит формы ОбработчикиОбновления на основании макета ОбработчикиОбновления.
//
&НаСервере
Процедура ЗаполнитьРеквизитОбработчикиОбновления()
	
	ОбработчикиОбновления.ПолучитьЭлементы().Очистить(); 
	ТаблицаОбработчикиОбновления = Обработки.си_ОбновлениеИнформационнойБазы.ОбработчикиОбновленияИзМакета();
	
	// Строка дерева значений, которая хранит версию программы, для которой заполняются обработки.
	ТекущаяСтрокаВерсии = Неопределено;
	
	Для Каждого ОбработчикОбновления Из ТаблицаОбработчикиОбновления Цикл
		ДобавитьСтрокуВерсия(ОбработчикОбновления, ТекущаяСтрокаВерсии);
		ДобавитьСтрокуОбработка(ОбработчикОбновления, ТекущаяСтрокаВерсии);
	КонецЦикла;
	
	ЗаполнитьКолонкиРеквизитаОбработчикиОбновленияИзКонстанты(Истина);
	
КонецПроцедуры

// Добавляет строку версии, если она ещё не добавлена, например, 3.0.1.1.
//
&НаСервере
Процедура ДобавитьСтрокуВерсия(Знач ОбработчикОбновления, ТекущаяСтрокаВерсии)
	
	Версия = ОбработчикОбновления.Версия;
	
	Если ТекущаяСтрокаВерсии = Неопределено ИЛИ ТекущаяСтрокаВерсии.Версия <> Версия Тогда
		
		// Если ТекущаяСтрокаВерсии не задана или не соответствует версии обработчика,
		// то добавить в дерево значений новую строку версии и сделать ее текущей.
		ТекущаяСтрокаВерсии = ОбработчикиОбновления.ПолучитьЭлементы().Добавить();
		ТекущаяСтрокаВерсии.Версия = Версия;
		
		ПредставлениеВерсии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Обновление на версию %1'"), Версия);
		ТекущаяСтрокаВерсии.ПредставлениеВерсии = ПредставлениеВерсии;
		
		Описание = НСтр("ru = 'Обработки обновления, для выполнения при переходе на версию %1.'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, Версия);
		ТекущаяСтрокаВерсии.Описание = Описание;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет и заполняет строку обработки, например, "Обновление реквизитов счетов-фактур".
//
&НаСервере
Процедура ДобавитьСтрокуОбработка(Знач ОбработчикОбновления, Знач ТекущаяСтрокаВерсии)
	
	СтрокаОбработчикОбновления = ТекущаяСтрокаВерсии.ПолучитьЭлементы().Добавить();
	
	ЗаполнитьЗначенияСвойств(СтрокаОбработчикОбновления, ОбработчикОбновления); 
	
	// Если в строке обработки заполнить поле Версия,
	// строка будет выглядеть "<Версия>, <Наименование>",
	// поэтому реквизит Версия в строке обработки не заполняется.
	СтрокаОбработчикОбновления.Версия = "";
	
	// По умолчанию обработчик считается не выполненным.
	СтрокаОбработчикОбновления.Состояние = ОбновлениеИнформационнойБазыБККлиентСервер.СостояниеОбработчика_НеВыполнен();	
	
КонецПроцедуры

// Возвращает идентификатор последней строки версии.
// 
// Возвращаемое значение:
//  Число, Неопределено - Если есть строки, то Число - идентификатор последней строки, в противном случае Неопределено.
//
&НаКлиенте
Функция ИдентификаторПоследнейСтрокиВерсия()
	
	СтрокиДерева = ОбработчикиОбновления.ПолучитьЭлементы();
	ИндексПоследнейСтроки = СтрокиДерева.Количество() - 1;
	
	Если ИндексПоследнейСтроки >=0 Тогда
		ПоследнийЭлемент = СтрокиДерева[ИндексПоследнейСтроки];
		ИдентификаторПоследнейСтроки = ПоследнийЭлемент.ПолучитьИдентификатор();
	Иначе
		ИдентификаторПоследнейСтроки = Неопределено;
	КонецЕсли;
	
	Возврат ИдентификаторПоследнейСтроки;
	
КонецФункции

// Разворачивает строку дерева, если в ней есть хотя бы одна помеченная обработка.
//
&НаКлиенте
Процедура РазвернутьПомеченныеСтроки()
	
	КоллекцияСтрокВерсии = ОбработчикиОбновления.ПолучитьЭлементы();	
	Для Каждого СтрокаВерсия Из КоллекцияСтрокВерсии Цикл
		
		КоллекцияСтрокОбработки = СтрокаВерсия.ПолучитьЭлементы();
		Для Каждого СтрокаОбработка Из КоллекцияСтрокОбработки Цикл	
			
			Если СтрокаОбработка.Пометка Тогда
				Элементы.ОбработчикиОбновления.Развернуть(СтрокаВерсия.ПолучитьИдентификатор());
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Активизирует строку дерева ОбработчикиОбновления.
//
&НаКлиенте
Процедура АктивизироватьСтроку(ИдентификаторСтроки)
	
	Если ИдентификаторСтроки <> Неопределено Тогда	
		Элементы.ОбработчикиОбновления.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, что помечены все строки обработок для указанной строки версии.
//
// Параметры:
//  СтрокаВерсия - ДанныеФормыЭлементДерева - Строка, которой подчинены строки обработок.
//
// Возвращаемое значение:
//  Булево - Истина, если помечены все строки обработок, в противном случае Ложь.
//
&НаКлиентеНаСервереБезКонтекста
Функция ПомеченыВсеОбработчикиОбновления(СтрокаВерсия)
	
	КоллецияСтрокОбработок = СтрокаВерсия.ПолучитьЭлементы(); 
	
	ПомеченыВсеСтрокиОбработок = Истина;
	
	Для Каждого СтрокаОбработки Из КоллецияСтрокОбработок Цикл
		
		Если НЕ СтрокаОбработки.Пометка Тогда
			ПомеченыВсеСтрокиОбработок = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПомеченыВсеСтрокиОбработок;	
	
КонецФункции

// Проверяет чем является строка, строкой обработки или строкой версии.
//
// Параметры:
//  СтрокаДерева - ДанныеФормыЭлементДерева - Проверяемая строка.
//
// Возвращаемое значение:
//  Булево - Истина, если строка явялется строкой обработки. Ложь, если строка является строкой версии.
//
&НаКлиентеНаСервереБезКонтекста
Функция ЭтоСтрокаОбработки(СтрокаДерева)
		
	Если СтрокаДерева.ПолучитьРодителя() = Неопределено Тогда
		ЭтоСтрокаОбработки = Ложь;	
	Иначе
		ЭтоСтрокаОбработки = Истина;	
	КонецЕсли;
	
	Возврат ЭтоСтрокаОбработки
	
КонецФункции

&НаСервере
Функция МассивПомеченныхОбработчиковОбновления()
	
	МассивПомеченныхОбработчиковОбновления = Новый Массив;
	
	КоллекцияСтрокВерсии = ОбработчикиОбновления.ПолучитьЭлементы();
	
	Для Каждого СтрокаВерсия Из КоллекцияСтрокВерсии Цикл
		
		КоллекцияСтрокОбработки = СтрокаВерсия.ПолучитьЭлементы();
		
		Для Каждого СтрокаОбработка Из КоллекцияСтрокОбработки Цикл	
			Если СтрокаОбработка.Пометка Тогда
				МассивПомеченныхОбработчиковОбновления.Добавить(СтрокаОбработка);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат МассивПомеченныхОбработчиковОбновления;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКолонкиРеквизитаОбработчикиОбновленияИзКонстанты(ИзменятьПометку)
	
	// Очистить колонки реквизита ОбработчикиОбновления, которые заполняются из константы.
	КоллекцияСтрокВерсий = ОбработчикиОбновления.ПолучитьЭлементы();
	Для Каждого СтрокаВерсия Из КоллекцияСтрокВерсий Цикл
		КоллекцияСтрокОбработок = СтрокаВерсия.ПолучитьЭлементы();
		Для Каждого СтрокаОбработка Из КоллекцияСтрокОбработок Цикл
			Если ИзменятьПометку Тогда
				СтрокаОбработка.Пометка = Ложь;
			КонецЕсли;	
			СтрокаОбработка.Состояние = ОбновлениеИнформационнойБазыБККлиентСервер.СостояниеОбработчика_НеВыполнен();
			СтрокаОбработка.ОписаниеЗавершения = "";
			СтрокаОбработка.ВремяНачала = '0001-01-01';
			СтрокаОбработка.ВремяЗавершения = '0001-01-01';
		КонецЦикла;
	КонецЦикла;
	
	СведенияОбОбновленииИБ_СИ = Обработки.си_ОбновлениеИнформационнойБазы.ПрочитатьКонстантуСведенияОбОбновленииИБ_СИ();	
	ТаблицаОбработчиков = СведенияОбОбновленииИБ_СИ.РучныеОбработчики.ТаблицаОбработчиков;
	
	// Заполнить колонки реквизита ОбработчикиОбновления из константы СведенияОбОбновленииИБ_СИ.
	Для Каждого Обработчик Из ТаблицаОбработчиков Цикл
		
		// Найти в дереве обработчики с такой же процедурой.
		МассивСтрокДерева = Новый Массив;
		КоллекцияСтрокВерсий = ОбработчикиОбновления.ПолучитьЭлементы();
		Для Каждого СтрокаВерсия Из КоллекцияСтрокВерсий Цикл
			КоллекцияСтрокОбработок = СтрокаВерсия.ПолучитьЭлементы();
			Для Каждого СтрокаОбработка Из КоллекцияСтрокОбработок Цикл
				Если СтрокаОбработка.Процедура = Обработчик.Процедура Тогда
					МассивСтрокДерева.Добавить(СтрокаОбработка);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Заполнить реквизиты найденных строк из константы.
		Для Каждого СтрокаДерева Из МассивСтрокДерева Цикл
			
			// Заполнить реквизит Пометка.
			Если ИзменятьПометку
				И Обработчик.ТребуетсяВыполнить
				И Обработчик.Состояние <> ОбновлениеИнформационнойБазыБККлиентСервер.СостояниеОбработчика_ВыполненУспешно() Тогда
				СтрокаДерева.Пометка = Истина;
			КонецЕсли;
			
			// Заполнить реквизит Состояние.
			СтрокаДерева.Состояние = Обработчик.Состояние;
			
			// Заполнить реквизит ОписаниеЗавершения.
			СтрокаДерева.ОписаниеЗавершения = Обработчик.ОписаниеЗавершения;
			
			// Заполнить реквизиты ВремяНачала и ВремяЗавершения.
			СтрокаДерева.ВремяНачала = Обработчик.ВремяНачала;
			СтрокаДерева.ВремяЗавершения = Обработчик.ВремяЗавершения;
			
		КонецЦикла;
		
	КонецЦикла;
	
	УстановитьПометкиСтрокВерсий();
	
КонецПроцедуры

// Устанавливает пометку строки версии, если установлена пометка у всех обработок обновления этой версии.
//
&НаСервере
Процедура УстановитьПометкиСтрокВерсий()
	
	КоллецияСтрокВерсий = ОбработчикиОбновления.ПолучитьЭлементы();	
	Для Каждого СтрокаВерсия Из КоллецияСтрокВерсий Цикл
		
		Если ПомеченыВсеОбработчикиОбновления(СтрокаВерсия) Тогда
			СтрокаВерсия.Пометка = Истина;
		Иначе
			СтрокаВерсия.Пометка = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОбработчикаОбновления(ТекущиеДанные)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяПроцедуры", ТекущиеДанные.Процедура);	
	ДополнительныеПараметры.Вставить("ИмяСобытия", ТекущиеДанные.Наименование);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьОбработчикОбновления", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму(ТекущиеДанные.Форма, , ЭтаФорма, , , , ОписаниеОповещения);	
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьКоллекциюОбработчиковОбновленияНаСервере()
	
	МассивПомеченныхОбработчиковОбновления = МассивПомеченныхОбработчиковОбновления();
	
	Если МассивПомеченныхОбработчиковОбновления.Количество() <> 0 Тогда
		
		КоллекцияОбработчиковОбновления = Обработки.си_ОбновлениеИнформационнойБазы.ПустаяКоллекцияОбработчиковОбновления();
		
		Для Каждого ПомеченныйОбработчик Из МассивПомеченныхОбработчиковОбновления Цикл		
			ДобавитьОписаниеОбработчика(КоллекцияОбработчиковОбновления, ПомеченныйОбработчик.Наименование, ПомеченныйОбработчик.Процедура, Неопределено);		
		КонецЦикла;
		
		ЗапуститьВыполнениеОбработчиковОбновления(КоллекцияОбработчиковОбновления);
		НачатоВыполнение = Истина;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите хотя бы одну обработку для выполнения.'"));
		НачатоВыполнение = Ложь;
		
	КонецЕсли;
	
	Возврат НачатоВыполнение;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьОбработчикОбновления(ОсновныеПараметры, ДополнительныеПараметры) Экспорт
	
	Если ОсновныеПараметры <> Неопределено Тогда
		ВыполнитьОбработчикОбновленияНаСервере(ОсновныеПараметры, ДополнительныеПараметры);
		ПодключитьОбработчикОжиданияВыполненияОбработчиковОбновления();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбработчикОбновленияНаСервере(Знач ОсновныеПараметры, Знач ДополнительныеПараметры)
	
	КоллекцияОбработчиковОбновления = Обработки.си_ОбновлениеИнформационнойБазы.ПустаяКоллекцияОбработчиковОбновления();			
	ДобавитьОписаниеОбработчика(КоллекцияОбработчиковОбновления, ДополнительныеПараметры.ИмяСобытия, ДополнительныеПараметры.ИмяПроцедуры, ОсновныеПараметры);		
	ЗапуститьВыполнениеОбработчиковОбновления(КоллекцияОбработчиковОбновления);
	
КонецПроцедуры

&НаСервере
Процедура ЗапуститьВыполнениеОбработчиковОбновления(КоллекцияОбработчиковОбновления)
	
	// Записать в константу, что все обработчики, которые отправили на выполнение, теперь не выполнены.	
	СведенияОбОбновленииИБ_СИ = Обработки.си_ОбновлениеИнформационнойБазы.ПрочитатьКонстантуСведенияОбОбновленииИБ_СИ();	
	Для Каждого ОписаниеОбработчика Из КоллекцияОбработчиковОбновления Цикл
		
		// Найти в константе обработчик, который отправили на выполнение.
		ПараметрыОтбора = Новый Структура("Процедура", ОписаниеОбработчика.Процедура);
		МассивНайденныхСтрок = СведенияОбОбновленииИБ_СИ.РучныеОбработчики.ТаблицаОбработчиков.НайтиСтроки(ПараметрыОтбора);
		
		// Сделать обработчик, найденный в константе, не выполненным,
		// иначе пользователь не сможет узнать, что он выполнился.
		Для Каждого НайденнаяСтрока Из МассивНайденныхСтрок Цикл
			НайденнаяСтрока.Состояние = ОбновлениеИнформационнойБазыБККлиентСервер.СостояниеОбработчика_НеВыполнен();
			НайденнаяСтрока.ВремяНачала = '0001-01-01';
			НайденнаяСтрока.ВремяЗавершения = '0001-01-01';
			НайденнаяСтрока.ОписаниеЗавершения = "";
		КонецЦикла;
		
	КонецЦикла;	
	Обработки.си_ОбновлениеИнформационнойБазы.ЗаписатьКонстантуСведенияОбОбновленииИБ_СИ(СведенияОбОбновленииИБ_СИ);	
	
	// Перезаполнить колонки дерева, т.к. обработчики, которые отправили на выполнение, теперь считаются не выполненными.
	ЗаполнитьКолонкиРеквизитаОбработчикиОбновленияИзКонстанты(Ложь);
	
	// Запустить фоновое задание по выполнению обработчиков.
	Результат = Обработки.си_ОбновлениеИнформационнойБазы.ЗапуститьФоновоеВыполнениеОбработчиковОбновления(КоллекцияОбработчиковОбновления, ЭтаФорма.УникальныйИдентификатор);
	
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;	
	ЗаписатьИдентификаторЗаданияВПользовательскиеНастройки();
	
	УправлениеФормой(); // Должно быть ниже заполнения реквизита формы ИдентификаторЗадания.
	
КонецПроцедуры

&НаСервере
Функция ДобавитьОписаниеОбработчика(КоллекцияОбработчиковОбновления, ИмяСобытия, ИмяПроцедуры, ПараметрыПроцедуры)
	
	ОписаниеОбработчика = КоллекцияОбработчиковОбновления.Добавить();
	
	ОписаниеОбработчика.Процедура = ИмяПроцедуры;
	
	ОписаниеОбработчика.Параметры.Вставить("Основные", ПараметрыПроцедуры);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяСобытия", ИмяСобытия);	
	ОписаниеОбработчика.Параметры.Вставить("Дополнительные", ДополнительныеПараметры);
	
	Возврат ОписаниеОбработчика;
	
КонецФункции

&НаСервере
Процедура УправлениеФормой()
	
	ВыполняютсяОбработчики = ВыполняютсяОбработчики(ЭтаФорма);
	
	Элементы.ГруппаВыполнение.Видимость = ВыполняютсяОбработчики;
	Элементы.ОбработчикиОбновления.ТолькоПросмотр = ВыполняютсяОбработчики;
	Элементы.ОбработчикиОбновленияВыполнитьОбработки.Доступность = НЕ ВыполняютсяОбработчики;
	Элементы.ОбработчикиОбновленияОткрытьОбработку.Доступность = НЕ ВыполняютсяОбработчики;
	
КонецПроцедуры

// Работа с фоновыми заданиями, выполняющими обновление.

// Получает идентификатор фонового задания, выполняющего обработчики обновления,
// из хранилища настроек текущего пользователя.
//
&НаСервере
Функция ПолучитьИдентификаторЗаданияИзПользовательскихНастроек()
	
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ЭтаФорма.ИмяФормы, "ИдентификаторЗадания");
	
КонецФункции

// Записывает идентификатор фонового задания, выполняющего обработчики обновления,
// в хранилище настроек текущего пользователя.
//
&НаСервере
Процедура ЗаписатьИдентификаторЗаданияВПользовательскиеНастройки()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		ЭтаФорма.ИмяФормы, "ИдентификаторЗадания", ИдентификаторЗадания,
		НСтр("ru = 'Идентификатор фонового задания, выполняющего обработки обновления.'"));
	
КонецПроцедуры

// Удаляет идентификатор фонового задания, выполняющего обработчики обновления,
// из хранилища настроек текущего пользователя.
//
&НаСервере
Процедура УдалитьИдентификаторЗаданияИзПользовательскихНастроек()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекУдалить(ЭтаФорма.ИмяФормы, "ИдентификаторЗадания", ИмяПользователя());
	
КонецПроцедуры

// Возвращает Истина, если обработчики обновления сейчас выполняются, Ложь в противном случае.
// Считается, что если реквизит формы ИдентификаторЗадания заполнен, то обработчики выполняются.
//
&НаКлиентеНаСервереБезКонтекста
Функция ВыполняютсяОбработчики(Форма)
	
	Если ЗначениеЗаполнено(Форма.ИдентификаторЗадания) Тогда
		ВыполняютсяОбработчики = Истина;	
	Иначе
		ВыполняютсяОбработчики = Ложь;	
	КонецЕсли;
	
	Возврат ВыполняютсяОбработчики;
	
КонецФункции

&НаСервере
Функция ПолучитьФоновоеЗадание(Идентификатор)
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда	
		ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
	Иначе
		ФоновоеЗадание = Неопределено;	
	КонецЕсли;
	
	Возврат ФоновоеЗадание;
	
КонецФункции

// Возвращает Истина, если задание активно (выполняется).
// Во всех остальных случаях возвращает Ложь, например, если:
// Задание завершено, Задание не найдено, Идентификатор не заполнен.
//
&НаСервере
Функция ЗаданиеВыполняется(Идентификатор)
	
	ФоновоеЗадание = ПолучитьФоновоеЗадание(Идентификатор);
	
	Если ФоновоеЗадание = Неопределено Тогда
		ЗаданиеВыполняется = Ложь;	
	Иначе
		ЗаданиеВыполняется = ?(ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Активно, Истина, Ложь);	
	КонецЕсли;
	
	Возврат ЗаданиеВыполняется;
	
КонецФункции

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияВыполненияОбработчиковОбновления()
	ПодключитьОбработчикОжидания("Подключаемый_ОжидатьВыполненияОбработчиковОбновления", 5, Ложь); 	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОжидатьВыполненияОбработчиковОбновления()
	
	ОбработчикиОбновленияВыполнены = ОжидатьВыполненияОбработчиковОбновленияНаСервере();	
	
	Если ОбработчикиОбновленияВыполнены Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выполнение обработок обновления завершено.'"));
		ОтключитьОбработчикОжидания("Подключаемый_ОжидатьВыполненияОбработчиковОбновления");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОжидатьВыполненияОбработчиковОбновленияНаСервере()
	
	// Показать сообщения, накопленные за время выполнения задания.
	ФоновоеЗадание = ПолучитьФоновоеЗадание(ИдентификаторЗадания);
	Если ФоновоеЗадание <> Неопределено Тогда
		МассивСообщений = ФоновоеЗадание.ПолучитьСообщенияПользователю(Истина);
		Для Каждого Сообщение Из МассивСообщений Цикл 
			Сообщение.ИдентификаторНазначения = ЭтаФорма.УникальныйИдентификатор;
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	Если ЗаданиеВыполняется(ИдентификаторЗадания) Тогда
		ОбработчикиОбновленияВыполнены = Ложь;
	Иначе
		ОбработчикиОбновленияВыполнены = Истина;
		ИдентификаторЗадания = Неопределено;
		УдалитьИдентификаторЗаданияИзПользовательскихНастроек();		
	КонецЕсли;
	
	ЗаполнитьКолонкиРеквизитаОбработчикиОбновленияИзКонстанты(Ложь);	
	УправлениеФормой(); // Должно быть ниже заполнения реквизита формы ИдентификаторЗадания.
	
	Возврат ОбработчикиОбновленияВыполнены;
	
КонецФункции

#КонецОбласти
