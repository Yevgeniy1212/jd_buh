#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает заготовку коллекции обработчиков обновления, которые необходимо выполнить.
//  Запуск обработчиков выполняется функцией ЗапуститьФоновоеВыполнениеОбработчиковОбновления().
// 
// Возвращаемое значение:
//   ТаблицаЗначений 
//
Функция ПустаяКоллекцияОбработчиковОбновления() Экспорт
	
	ТаблицаОбработчиков = Новый ТаблицаЗначений;
	
	// Полное имя обработчика, например: "Обработки.ОбновлениеИнформационнойБазыБК.ОбновитьСчетаФактуры".
	ТаблицаОбработчиков.Колонки.Добавить("Процедура", Новый ОписаниеТипов("Строка"));
	
	// Параметры обработчика, должен содержать две структуры Основные и Дополнительные.
	// Основные - Это пользовательские параметры, например: ДатаНачала.
	// Дополнительные - Это параметры подсистемы, напрмиер: ИмяСобытия.
	ТаблицаОбработчиков.Колонки.Добавить("Параметры", Новый ОписаниеТипов("Структура"));
	
	Возврат ТаблицаОбработчиков;
	
КонецФункции

// Запускает фоновое задание, которое выполняет переданные обработчики обновления.
//
// Параметры:
//  КоллекцияОбработчиковОбновления - ТаблицаЗначений - Смотрите ПустаяКоллекцияОбработчиковОбновления().
//  УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор формы, из которой запущено выполнение.
//
// Возвращаемое значение:
//  Структура - Смотрите ДлительныеОперации.ЗапуститьВыполнениеВФоне().
//
Функция ЗапуститьФоновоеВыполнениеОбработчиковОбновления(Знач КоллекцияОбработчиковОбновления, УникальныйИдентификатор) Экспорт
	
	Параметры = Новый Структура("КоллекцияОбработчиковОбновления", КоллекцияОбработчиковОбновления);
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.си_ОбновлениеИнформационнойБазы.ВыполнитьОбработчикиОбновления",
		Параметры,
		НСтр("ru = 'Выполнение обработок обновления'"));
		
	Возврат Результат;
		
КонецФункции

// Возвращает необходимость выполнения ручных обработчиков обновления.
//
// Возвращаемое значение:
//  Булево - Истина, если есть ручные обработчики требующие выполнения. Ложь, в противном случае.
//                                     
Функция ЕстьРучныеОбработчикиОбновленияТребуещиеВыполнения() Экспорт
	
	ЕстьТребуещиеВыполнения = Ложь;
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		
		СведенияОбОбновленииИБ_СИ = ПрочитатьКонстантуСведенияОбОбновленииИБ_СИ();
		ТаблицаОбработчиков = СведенияОбОбновленииИБ_СИ.РучныеОбработчики.ТаблицаОбработчиков;
		
		ОбработчикТребующийВыполнения = ТаблицаОбработчиков.Найти(Истина, "ТребуетсяВыполнить");
		
		Если ОбработчикТребующийВыполнения = Неопределено Тогда
			ЕстьТребуещиеВыполнения = Ложь;	
		Иначе
			ЕстьТребуещиеВыполнения = Истина;	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЕстьТребуещиеВыполнения;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Работа с константой СведенияОбОбновленииИБ_БК

Функция ПрочитатьКонстантуСведенияОбОбновленииИБ_СИ() Экспорт
	
	// Прочитать константу.
	ХранилищеЗначения = Константы.си_СведенияОбОбновленииИБ.Получить();
	СведенияОбОбновленииИБ_СИ = ХранилищеЗначения.Получить();
	
	// Если константа еще не использовалась, то создать пустой шаблон константы.
	Если СведенияОбОбновленииИБ_СИ = Неопределено Тогда
		СведенияОбОбновленииИБ_СИ = ПустоеЗначениеКонстантыСведенияОбОбновленииИБ_СИ();
	КонецЕсли;
	
	Возврат СведенияОбОбновленииИБ_СИ;
	
КонецФункции

Функция ЗаписатьКонстантуСведенияОбОбновленииИБ_СИ(Знач СведенияОбОбновленииИБ_СИ) Экспорт
	
	ХранилищеЗначения = Новый ХранилищеЗначения(СведенияОбОбновленииИБ_СИ);
	Константы.си_СведенияОбОбновленииИБ.Установить(ХранилищеЗначения);
	
КонецФункции

// Добавляет новый или изменяет существующий ручной обработчик обновления ИБ.
// Проверяет СведенияОбОбновленииИБ_БК.РучныеОбработчики.ТаблицаОбработчиков,
// Если обработчик с указанным значением поля "Процедура" найден, то обновляет его,
// Иначе добавляет в таблицу новый обработчик и заполняет его.
//
// Параметры:
//  ОбработчикОбновления - Структура - Смотреть ПустоеОписаниеРучногоОбработчикаОбновления().
//  СведенияОбОбновленииИБ_БК - Структура - Смотреть ПустоеЗначениеКонстантыСведенияОбОбновленииИБ_БК().
//
// Возвращаемое значение:
//  СтрокаТаблицыЗначений - Добавленный или обновленный ручной обработчик обновления ИБ,
//   смотреть ПустоеОписаниеРучногоОбработчикаОбновления().
//
Функция ДобавитьОбновитьРучнойОбработчикОбновленияИБ(Знач ОписаниеОбработчика, СведенияОбОбновленииИБ_СИ) Экспорт
	
	ТаблицаОбработчиков = СведенияОбОбновленииИБ_СИ.РучныеОбработчики.ТаблицаОбработчиков;	
	РучнойОбработчик = ТаблицаОбработчиков.Найти(ОписаниеОбработчика.Процедура, "Процедура");
		
	Если РучнойОбработчик = Неопределено Тогда
		РучнойОбработчик = ТаблицаОбработчиков.Добавить();	
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(РучнойОбработчик, ОписаниеОбработчика);
	
	Возврат РучнойОбработчик;
	
КонецФункции

// Возвращает пустую заготовку константы СведенияОбОбновленииИБ_БК.
//
// Возвращаемое значение:
//  Структура - пустая заготовка константы СведенияОбОбновленииИБ_БК.
//
Функция ПустоеЗначениеКонстантыСведенияОбОбновленииИБ_СИ() Экспорт
	
	ТаблицаОбработчиков = ПустаяТаблицаРучныеОбработчики();

	РучныеОбработчики = Новый Структура;
	РучныеОбработчики.Вставить("ТаблицаОбработчиков", ТаблицаОбработчиков);	
	
	СведенияОбОбновленииИБ_СИ = Новый Структура;
	СведенияОбОбновленииИБ_СИ.Вставить("РучныеОбработчики", РучныеОбработчики);
	
	Возврат СведенияОбОбновленииИБ_СИ;
	
КонецФункции

// Возвращает заготовку описания ручного обработчика обновления.
//
// Возвращаемое значение:
//  Структура - Смотреть ПустаяТаблицаРучныеОбработчики().
//
Функция ПустоеОписаниеРучногоОбработчикаОбновления() Экспорт
	
	РучнойОбработчик = Новый Структура;
	
	РучнойОбработчик.Вставить("Процедура", "");	
	РучнойОбработчик.Вставить("Состояние", ОбновлениеИнформационнойБазыБККлиентСервер.СостояниеОбработчика_НеВыполнен());	
	РучнойОбработчик.Вставить("ТребуетсяВыполнить", Ложь);	
	РучнойОбработчик.Вставить("ВремяНачала", '0001-01-01');	
	РучнойОбработчик.Вставить("ВремяЗавершения", '0001-01-01');	
	РучнойОбработчик.Вставить("ОписаниеЗавершения", "");	
	
	Возврат РучнойОбработчик;
	
КонецФункции

Функция ПустаяТаблицаРучныеОбработчики() Экспорт
	
	ТаблицаОбработчиков = Новый ТаблицаЗначений;
	
	// Полное имя процедуры, например: "Обработки.ОбновлениеИнформационнойБазыБК.ОбновитьСчетаФактуры".
	ТаблицаОбработчиков.Колонки.Добавить("Процедура", Новый ОписаниеТипов("Строка"));
	
	// Одно из трех значений "НеВыполнен", "ВыполненУспешно", "ВыполненСОшибками".
	ТаблицаОбработчиков.Колонки.Добавить("Состояние", Новый ОписаниеТипов("Строка"));
	
	// Может быть установлен только при обновлении на новую версию. Снимается при успешном выполнении.
	// Обработчики, у которых установлен данный флаг будут помечены в форме ЗапускОбработчиковОбновления.
	ТаблицаОбработчиков.Колонки.Добавить("ТребуетсяВыполнить", Новый ОписаниеТипов("Булево"));
	
	ТипВремя = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	
	// Время начала выполнения обработчика.
	ТаблицаОбработчиков.Колонки.Добавить("ВремяНачала", ТипВремя);
	
	// Время завершения выполнения обработчика.
	ТаблицаОбработчиков.Колонки.Добавить("ВремяЗавершения", ТипВремя);
	
	// Строковое описание завершения, например: 
	// - "Все счета-фактуры успешно обновлены."
	// - "Не удалось обновить счетов-фактур: 10.".
	ТаблицаОбработчиков.Колонки.Добавить("ОписаниеЗавершения", Новый ОписаниеТипов("Строка"));
	
	Возврат ТаблицаОбработчиков;
	
КонецФункции

// Прочие служебные процедуры и функции

// Возвращает содержимое макета ОбработчикиОбновления в виде таблицы значений.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Обработчики обновлений из макета ОбработчикиОбновления.
//
Функция ОбработчикиОбновленияИзМакета() Экспорт
	
	МакетОбработчикиОбновления = Обработки.си_ОбновлениеИнформационнойБазы.ПолучитьМакет("ОбработчикиОбновления");	
	ТаблицаОбработчикиОбновления = Новый ТаблицаЗначений;	
	
	// Добавить колонки таблицы значений в порядке следования колонок в макете.
	ТаблицаОбработчикиОбновления.Колонки.Добавить("Версия");
	ТаблицаОбработчикиОбновления.Колонки.Добавить("Процедура");
	ТаблицаОбработчикиОбновления.Колонки.Добавить("Форма");
	ТаблицаОбработчикиОбновления.Колонки.Добавить("Наименование");
	ТаблицаОбработчикиОбновления.Колонки.Добавить("Описание");
	
	// Заполнить строки таблицы значений на основе строк макета.
	Для НомерСтрокиМакета = 1 По МакетОбработчикиОбновления.ВысотаТаблицы Цикл
		СтрокаМакета = МакетОбработчикиОбновления.ПолучитьОбласть(НомерСтрокиМакета, , НомерСтрокиМакета);
		СтрокаТаблицы = ТаблицаОбработчикиОбновления.Добавить();
		Для Каждого Колонка Из ТаблицаОбработчикиОбновления.Колонки Цикл
			ИндексКолонкиТаблицы = ТаблицаОбработчикиОбновления.Колонки.Индекс(Колонка);
			НомерКолонкиМакета = ИндексКолонкиТаблицы + 1; // Порядок колонок в макете и таблице значений совпадает.
			СтрокаТаблицы[ИндексКолонкиТаблицы] = СтрокаМакета.Область(1, НомерКолонкиМакета, 1, НомерКолонкиМакета).Текст;
		КонецЦикла;
	КонецЦикла;
	
	НаборЗаписей = РегистрыСведений.ВерсииПодсистем.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИмяПодсистемы.Значение = си_УчетСпецодеждыСерверПовтИсп.НаименованиеПодсистемы();
	НаборЗаписей.Отбор.ИмяПодсистемы.Использование = Истина;
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		НомерВерсииТекущейКонфигурации = "";
	Иначе
		НомерВерсииТекущейКонфигурации = НаборЗаписей[0].Версия;
	КонецЕсли;
	
	Если НомерВерсииТекущейКонфигурации = "" Тогда
		ТолькоПервыйЗапуск = Истина;
	Иначе
		ТолькоПервыйЗапуск = Ложь;
	КонецЕсли;
	Справочники.ИдентификаторыОбъектовМетаданных.ОбновитьДанныеСправочника(Неопределено,Неопределено);
	МассивДляУдаления = Новый Массив;
	Для Каждого СтрокаТЧ Из ТаблицаОбработчикиОбновления Цикл
		//Если СтрокаТЧ.Версия = "0.0.0.0" Тогда
		//	Если Не ТолькоПервыйЗапуск Тогда
		//		МассивДляУдаления.Добавить(СтрокаТЧ)
		//	КонецЕсли;
		//Иначе
		//	Если ТолькоПервыйЗапуск Тогда
		//		МассивДляУдаления.Добавить(СтрокаТЧ)
		//	КонецЕсли;
		//КонецЕсли;
	КонецЦикла;
	Пока Не МассивДляУдаления.Количество() = 0 Цикл
		ТаблицаОбработчикиОбновления.Удалить(МассивДляУдаления[0]);
		МассивДляУдаления.Удалить(0);
	КонецЦикла;
	
	// Добавить и заполнить колонку ВесВерсии, которую можно использовать для сортировки таблицы.
	ТаблицаОбработчикиОбновления.Колонки.Добавить("ВесВерсии", Новый ОписаниеТипов("Число"));
	Для Каждого СтрокаТаблицы Из ТаблицаОбработчикиОбновления Цикл
		СтрокаТаблицы.ВесВерсии = ОбновлениеИнформационнойБазыСлужебный.ВесВерсии(СтрокаТаблицы.Версия);	
	КонецЦикла;
	
	Возврат ТаблицаОбработчикиОбновления;
	
КонецФункции

// Выполняет обработки из обработки ОбновлениеИнформационнойБазыБК.
//
// Параметры:
//  Параметры - Структура - Содержит один элемент,
//   |- КоллекцияОбработчиковОбновления - ТаблицаЗначений - Обработчики обновления для выполнения.
//       Подробнее смотрите в функции ПустаяКоллекцияОбработчиковОбновления().
//  АдресХранилища - Строка - Данный параметр не используется.
//
Процедура ВыполнитьОбработчикиОбновления(Параметры, АдресХранилища) Экспорт
	
	Для Каждого ОписаниеОбработчика Из Параметры.КоллекцияОбработчиковОбновления Цикл
		
		ИмяСобытия = ОписаниеОбработчика.Параметры.Дополнительные.ИмяСобытия;
		
		ТекстНачало = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Начало ""%1"" (%2).'"), ИмяСобытия, ТекущаяДата());
		СообщитьПользователю(ТекстНачало, , , , ИмяСобытия, УровеньЖурналаРегистрации.Информация);
		
		Результат = Новый Структура;
		Результат.Вставить("ВыполненоУспешно", Ложь);
		Результат.Вставить("ОписаниеЗавершения", "");
		
		ПараметрыМетода = Новый Массив;
		ПараметрыМетода.Добавить(ОписаниеОбработчика.Параметры.Основные);
		ПараметрыМетода.Добавить(ИмяСобытия);
		ПараметрыМетода.Добавить(Результат);
		
		ВремяНачала = ТекущаяДата();
		
		Попытка
			
			ОбщегоНазначения.ВыполнитьМетодКонфигурации(ОписаниеОбработчика.Процедура, ПараметрыМетода);
						
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОшибкаКратко = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			ОшибкаПодробно = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			
			Результат.ВыполненоУспешно = Ложь;
			Результат.ОписаниеЗавершения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'При выполнении обработки возникла ошибка: %1.'"), ОшибкаКратко);
			
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ОшибкаПодробно);
			
		КонецПопытки;
		
		// Принудительно закрыть транзакцию, если ее открыли, но не закрыли в обработке обновления.
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ВремяЗавершения = ТекущаяДата();
		
		Результат.Вставить("Процедура", ОписаниеОбработчика.Процедура);
		Результат.Вставить("ВремяНачала", ВремяНачала);
		Результат.Вставить("ВремяЗавершения", ВремяЗавершения);
		
		ЗаписатьРезультатВыполненияОбработчикаОбновленияВКонстантуСведенияОбОбновленииИБ_СИ(Результат);
		
		ТекстЗавершение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Завершение ""%1"" (%2).'"), ИмяСобытия, ТекущаяДата());
		СообщитьПользователю(ТекстЗавершение, , , , ИмяСобытия, УровеньЖурналаРегистрации.Информация);
		
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаписатьРезультатВыполненияОбработчикаОбновленияВКонстантуСведенияОбОбновленииИБ_СИ(Знач РезультатВыполнения)
	
	СведенияОбОбновленииИБ_СИ = ПрочитатьКонстантуСведенияОбОбновленииИБ_СИ();
	ТаблицаОбработчиков = СведенияОбОбновленииИБ_СИ.РучныеОбработчики.ТаблицаОбработчиков;
	
	РучнойОбработчик = ТаблицаОбработчиков.Найти(РезультатВыполнения.Процедура, "Процедура");	
	
	Если РучнойОбработчик = Неопределено Тогда
		РучнойОбработчик = ТаблицаОбработчиков.Добавить();
	КонецЕсли;
	
	РучнойОбработчик.Процедура = РезультатВыполнения.Процедура;
	
	Если РезультатВыполнения.ВыполненоУспешно Тогда	
		РучнойОбработчик.Состояние = ОбновлениеИнформационнойБазыБККлиентСервер.СостояниеОбработчика_ВыполненУспешно();
	Иначе
		РучнойОбработчик.Состояние = ОбновлениеИнформационнойБазыБККлиентСервер.СостояниеОбработчика_ВыполненСОшибками();
	КонецЕсли;
	
	Если РучнойОбработчик.ТребуетсяВыполнить И РезультатВыполнения.ВыполненоУспешно Тогда
		РучнойОбработчик.ТребуетсяВыполнить = Ложь;
		// Иначе останется старое значение, т.е. если оно было Истина, то останется Истина.
	КонецЕсли;
	
	РучнойОбработчик.ВремяНачала = РезультатВыполнения.ВремяНачала;
	РучнойОбработчик.ВремяЗавершения = РезультатВыполнения.ВремяЗавершения;

	РучнойОбработчик.ОписаниеЗавершения = РезультатВыполнения.ОписаниеЗавершения;
	
	ЗаписатьКонстантуСведенияОбОбновленииИБ_СИ(СведенияОбОбновленииИБ_СИ);
	
КонецПроцедуры

// Показывает сообщение и создает запись в журнале регистрации.
//
// Параметры:
//  Текст - Строка - Текст сообщения.
//  Ссылка - ЛюбаяСсылка - Ссылка на объект с которым будет связано сообщение.
//  ПоказатьСообщение - Булево - Если Истина, то будет показано сообщение.
//  ЗаписатьЖурналРегистрации - Булево - Если Истина, то будет создана запись журнала регистрации.
//  ИмяСобытияЖурналаРегистрации - Строка - Имя события, которое будет в журнале регистрации.
//   Параметр должен быть обязательно указан, если ЗаписатьЖурналРегистрации = Истина.
//  УровеньСобытияЖурналаРегистрации - УровеньЖурналаРегистрации - Уровень события журнала регистрации.
//   По умолчанию уровень: Предупреждение.
//
Процедура СообщитьПользователю(
	Текст, 
	Ссылка = Неопределено, 
	ПоказатьСообщение = Истина, 
	ЗаписатьЖурналРегистрации = Истина, 
	ИмяСобытияЖурналаРегистрации = "",
	УровеньСобытияЖурналаРегистрации = Неопределено)
	
	Если ПоказатьСообщение Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Текст;
		Сообщение.КлючДанных = Ссылка;
		Сообщение.Сообщить();		
	КонецЕсли;
	
	Если ЗаписатьЖурналРегистрации Тогда
		УровеньСобытия = ?(УровеньСобытияЖурналаРегистрации = Неопределено, УровеньЖурналаРегистрации.Предупреждение, УровеньСобытияЖурналаРегистрации);			
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации, УровеньСобытия, , Ссылка, Текст);	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли