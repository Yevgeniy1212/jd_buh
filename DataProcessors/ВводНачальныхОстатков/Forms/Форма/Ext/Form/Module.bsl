
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
		Объект.Организация = Параметры.Организация;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = РегламентированнаяОтчетностьПереопределяемый.ПолучитьОрганизациюПоУмолчанию();
	КонецЕсли;

	ПодготовитьФормуНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ИзменениеУчетнойПолитикиБухгалтерскийУчет"
		ИЛИ ИмяСобытия = "ИзменениеУчетнойПолитикиНалоговыйУчет"
		ИЛИ ИмяСобытия = "ОбновитьФормуПомощникаВводаОстатков" И Параметр = Объект.Организация  
		И (Источник = "ВводНачальныхОстатков" 
			ИЛИ Источник = "ВводНачальныхОстатковОС"  
			ИЛИ Источник = "ВводНачальныхОстатковПоЗарплате") Тогда
		ОбновитьФормуНаСервере();
	ИначеЕсли ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
		Объект.Организация = Параметр;
		ОрганизацияПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Обновить(Команда)

	ОбновитьОстатки(Истина, ОрганизацияПлательщикНалогаНаПрибыль);

КонецПроцедуры

&НаКлиенте
Процедура КарточкаСчета(Команда)
	
	ИмяОтчета = "КарточкаСчета";
	СформироватьОтчет(ИмяОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСВпоСчету(Команда)
	
	ИмяОтчета = "ОборотноСальдоваяВедомостьПоСчету";
	СформироватьОтчет(ИмяОтчета);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ОрганизацияПриИзмененииСервер();

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()

	Объект.ДатаВводаОстатков = ПолучитьДатуНачалаУчета(Объект.Организация);
	КоличествоДокументовВводаОстатков = ПолучитьКоличествоДокументовВводаОстатков(Объект.Организация);

	ОбновитьФормуНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	Отказ = Истина;
	ВвестиОстатки();

КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСчетаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Если НЕ ЗначениеЗаполнено(ВыбраннаяСтрока) И МожноИзменятьОстатки Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаСчета  = Неопределено;
	СальдоНачальноеДт = "СальдоНачальноеДт";
	СальдоНачальноеКт = "СальдоНачальноеКт";
	Если Элементы.ГруппаСпискаСчетов.ТекущаяСтраница = Элементы.ГруппаОсновныеСчетаБУ Тогда
		СтрокаСчета = Элементы.ОсновныеСчетаБУ.ТекущиеДанные;
	ИначеЕсли Элементы.ГруппаСпискаСчетов.ТекущаяСтраница = Элементы.ГруппаОсновныеСчетаНУ Тогда
		СтрокаСчета = Элементы.ОсновныеСчетаНУ.ТекущиеДанные;
	ИначеЕсли Элементы.ГруппаСпискаСчетов.ТекущаяСтраница = Элементы.ГруппаЗабалансовыеСчетаБУ Тогда
		СтрокаСчета = Элементы.ЗабалансовыеСчетаБУ.ТекущиеДанные;
		СальдоНачальноеДт = "СальдоНачальноеЗабалансовоеДт";
		СальдоНачальноеКт = "СальдоНачальноеЗабалансовоеКт";
	Иначе
		Возврат;
	КонецЕсли;

	Если СтрокаСчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаСчета.ЗапретитьИспользоватьВПроводках Тогда
		ОткрытьСписокДокументов();
	Иначе
		Если СтрокаСчета[СальдоНачальноеДт] <> 0
			ИЛИ СтрокаСчета.СальдоНачальноеДтРазвернутое <> 0
			ИЛИ СтрокаСчета[СальдоНачальноеКт] <> 0
			ИЛИ СтрокаСчета.СальдоНачальноеКтРазвернутое <> 0 Тогда
			ОткрытьСписокДокументов();
		Иначе
			ВвестиОстатки();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСчетаПередНачаломИзменения(Элемент, Отказ)

	Отказ = Истина;
	ОткрытьСписокДокументов();

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервереБезКонтекста
Функция ПолучитьДатуНачалаУчета(Знач Организация)

	МенеджерЗаписиРегистра = РегистрыСведений.ДатыВводаНачальныхОстатков.СоздатьМенеджерЗаписи();
	МенеджерЗаписиРегистра.Организация = Организация;
	МенеджерЗаписиРегистра.Прочитать();
	Если МенеджерЗаписиРегистра.Выбран() Тогда
		Возврат МенеджерЗаписиРегистра.ДатаВводаНачальныхОстатков;
	Иначе
		Возврат '00010101';
	КонецЕсли;

КонецФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	Объект.ДатаВводаОстатков = ПолучитьДатуНачалаУчета(Объект.Организация);
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КоличествоДокументовВводаОстатков = ПолучитьКоличествоДокументовВводаОстатков(Объект.Организация);
	ЗначенияНастроекПользователя = ПользователиБКВызовСервераПовтИсп.ЗначенияНастроекПользователя(Пользователи.ТекущийПользователь(), "ПоказыватьВДокументахСчетаУчета,ОтражатьДокументыВНалоговомУчете");
	ИДКартинки = РаботаСДиалогами.ПолучитьИДКартинки(БиблиотекаКартинок.КартинкаВстроеннойСправкиФормы);
	ЗаполнитьСпискиСчетов();
	ОбновитьФормуНаСервере();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиСчетов()

	ОсновныеСчетаБУ.Очистить();
	ОсновныеСчетаНУ.Очистить();
	ЗабалансовыеСчетаБУ.Очистить();

	ЗаполнитьСписокРазделов();

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Типовой.Ссылка КАК Счет,
	|	Типовой.Наименование,
	|	Типовой.Валютный,
	|	Типовой.ЗапретитьИспользоватьВПроводках,
	|	Типовой.Вид КАК СчетВид,
	|	ВЫБОР
	|		КОГДА Типовой.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|			ТОГДА 0
	|		КОГДА Типовой.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК НомерКартинки
	|ИЗ
	|	ПланСчетов.Типовой КАК Типовой
	|ГДЕ
	|	Типовой.Забалансовый = ЛОЖЬ
	|	И Типовой.Ссылка <> ЗНАЧЕНИЕ(ПланСчетов.Типовой.Вспомогательный)
	|	И ВЫРАЗИТЬ(Типовой.Код КАК СТРОКА(1)) В (""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""0"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	Типовой.Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Типовой.Ссылка КАК Счет,
	|	Типовой.Наименование,
	|	Типовой.Валютный,
	|	Типовой.ЗапретитьИспользоватьВПроводках,
	|	Типовой.Вид КАК СчетВид,
	|	ВЫБОР
	|		КОГДА Типовой.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|			ТОГДА 0
	|		КОГДА Типовой.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК НомерКартинки
	|ИЗ
	|	ПланСчетов.Типовой КАК Типовой
	|ГДЕ
	|	Типовой.Забалансовый = ИСТИНА
	|	И Типовой.Ссылка <> ЗНАЧЕНИЕ(ПланСчетов.Типовой.Вспомогательный)
	|	И ВЫРАЗИТЬ(Типовой.Код КАК СТРОКА(1)) В (""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""0"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	Типовой.Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Налоговый.Ссылка КАК Счет,
	|	Налоговый.Наименование,
	|	Налоговый.ЗапретитьИспользоватьВПроводках,
	|	Налоговый.Вид КАК СчетВид,
	|	ВЫБОР
	|		КОГДА Налоговый.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|			ТОГДА 0
	|		КОГДА Налоговый.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК НомерКартинки
	|ИЗ
	|	ПланСчетов.Налоговый КАК Налоговый
	|ГДЕ
	|	ВЫРАЗИТЬ(Налоговый.Код КАК СТРОКА(1)) В (""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""0"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	Налоговый.Порядок";

	ПакетРезультатов = Запрос.ВыполнитьПакет();

	ОсновныеСчетаБУ.Загрузить(ПакетРезультатов[0].Выгрузить());
	ЗабалансовыеСчетаБУ.Загрузить(ПакетРезультатов[1].Выгрузить());
	ОсновныеСчетаНУ.Загрузить(ПакетРезультатов[2].Выгрузить());

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокРазделов()

	СписокРазделов.Очистить();

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ОсновныеСредства;
	СтрокаРаздела.КодыСчетов  = ",2310,2320,2330,2410,2420,2430,2100Н,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Запасы;
	СтрокаРаздела.КодыСчетов  = ",1310,1320,1330,1351,1310Н,1320Н,1330Н,1351Н,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства;
	СтрокаРаздела.КодыСчетов  = ",1010,1021,1022,1030,1040,1050,1060,1010Н,1021Н,1022Н,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками;
	СтрокаРаздела.КодыСчетов  = ",3310,3320,3330,3340,3360,3370,3380,3391,3392,3393,3397,3410,3420,3510,4110,4120,4130,4140,4150,4160,4171,4172,4173,1610,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками;
	СтрокаРаздела.КодыСчетов  = ",1210,1220,1230,1240,1281,1282,1284,1260,1271,3510,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам;
	СтрокаРаздела.КодыСчетов  = ",3110,3120,3130,3140,3150,3160,3170,3180,3190,3110Н,3120Н,3130Н,3190Н,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПерсоналомПоОплатеТрудаИДепонентам;
	СтрокаРаздела.КодыСчетов  = ",3350,2152,3350Н,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПодотчетнымиЛицами;
	СтрокаРаздела.КодыСчетов  = ",1251,2151,3391Н";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами;
	СтрокаРаздела.КодыСчетов  = ",1240,3340,";

КонецПроцедуры

&НаКлиенте
Функция ОпределитьРазделУчета(Счет)

	КодСчета = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет).Код;

	Для Каждого СтрокаРаздела Из СписокРазделов Цикл
		Если Найти(СтрокаРаздела.КодыСчетов, "," + КодСчета + ",") > 0 Тогда
			Если Найти(СтрокаРаздела.КодыИсключений, "," + КодСчета + ",") = 0 Тогда
				Возврат СтрокаРаздела.РазделУчета;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета");

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКоличествоДокументовВводаОстатков(Знач Организация)

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат 0;
	КонецЕсли;

	ЗапросПоДокументам = Новый Запрос;
	ЗапросПоДокументам.УстановитьПараметр("Организация", Организация);
	ЗапросПоДокументам.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                           |	КОЛИЧЕСТВО(ВводНачальныхОстатков.Ссылка) КАК Документов
	                           |ИЗ
	                           |	Документ.ВводНачальныхОстатков КАК ВводНачальныхОстатков
	                           |ГДЕ
	                           |	ВводНачальныхОстатков.Организация = &Организация";

	РезультатЗапроса = ЗапросПоДокументам.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Документов;
	КонецЕсли;

КонецФункции

&НаСервере
Процедура ОбновитьФормуНаСервере()

	ДатаУчетнойПолитики = ПолучитьДатуУчетнойПолитики(Объект.ДатаВводаОстатков);
	
	УчетнаяПолитикаБУСуществует = Ложь;
	Если ЗначениеЗаполнено(ДатаУчетнойПолитики) Тогда
		УчетнаяПолитикаБУСуществует = УчетнаяПолитикаСуществует(Объект.Организация, ДатаУчетнойПолитики, "БУ");
	КонецЕсли;
	
	УчетнаяПолитикаНУСуществует = Ложь;
	Если ЗначениеЗаполнено(ДатаУчетнойПолитики) Тогда
		УчетнаяПолитикаНУСуществует = УчетнаяПолитикаСуществует(Объект.Организация, ДатаУчетнойПолитики, "НУ");
	КонецЕсли;
	
	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.ДатаВводаОстатков);
	
	Если НЕ ОрганизацияПлательщикНалогаНаПрибыль И НЕ УчетнаяПолитикаСуществует(Объект.Организация, Объект.ДатаВводаОстатков, "НУ") Тогда
		ТекстСообщения = НСтр("ru='Не указаны параметры учетной политики налогового учета (%1) на %2.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СокрЛП(Объект.Организация), Формат(Объект.ДатаВводаОстатков, "ДЛФ=DD"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ УчетнаяПолитикаБУСуществует Тогда
		ТекстСообщения = НСтр("ru='Не указаны параметры учетной политики бухгалтерского учета (%1) на %2.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СокрЛП(Объект.Организация), Формат(ДатаУчетнойПолитики, "ДЛФ=DD"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ УчетнаяПолитикаНУСуществует Тогда
		ТекстСообщения = НСтр("ru='Не указаны параметры учетной политики налогового учета (%1) на %2.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СокрЛП(Объект.Организация), Формат(ДатаУчетнойПолитики, "ДЛФ=DD"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

	ВстроеннаяСправка = ПолучитьТекстВстроеннойСправки();
	
	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(
		ЭтаФорма,
		Объект.Организация,
		ДатаУчетнойПолитики);

	МожноИзменятьОстатки = ЗначениеЗаполнено(Объект.Организация) 
	                       И ЗначениеЗаполнено(Объект.ДатаВводаОстатков)
				           И УчетнаяПолитикаБУСуществует;

	ОбновитьОстатки(Истина, ОрганизацияПлательщикНалогаНаПрибыль);
	УправлениеФормой();

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДатуУчетнойПолитики(ДатаВводаОстатков)

	Возврат ДатаВводаОстатков + 86400;

КонецФункции

&НаКлиенте
Процедура ДатаВводаначальныхОстатковНажатиеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	РезультатУстановки = РезультатЗакрытия;
	
	Если РезультатУстановки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНачалаУчета = ДополнительныеПараметры.ДатаНачалаУчета;
	
	Объект.ДатаВводаОстатков = РезультатУстановки;
	Если Объект.ДатаВводаОстатков = ДатаНачалаУчета Тогда
		Возврат;
	КонецЕсли;
	
	ДатаУчетнойПолитики = ПолучитьДатуУчетнойПолитики(Объект.ДатаВводаОстатков);
	
	УчетнаяПолитикаБУСуществует = УчетнаяПолитикаСуществует(Объект.Организация, ДатаУчетнойПолитики, "БУ");
	
	Если НЕ УчетнаяПолитикаБУСуществует И КоличествоДокументовВводаОстатков > 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'На указанную дату не задана учетная политика организации!
		                                 |Операция не выполнена!'");
		ПоказатьПредупреждение( , ТекстПредупреждения);
		Объект.ДатаВводаОстатков = ДатаНачалаУчета;
		Возврат;
	КонецЕсли;
	
	Если КоличествоДокументовВводаОстатков > 0 И ЗначениеЗаполнено(Объект.ДатаВводаОстатков) Тогда
		ТекстВопроса = НСтр("ru = 'Изменена дата ввода начальных остатков.
		|
		|Документы ввода остатков текущей организации будут
		|перепроведены на новую дату. 
		|
		|Продолжить?'");
		ДополнительныеПараметры = Новый Структура("ДатаНачалаУчета", ДатаНачалаУчета);
		Оповещение = Новый ОписаниеОповещения(
			"ВопросИзмененияДатыВводаНачальныхОстатковЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ПриИзмененииДатыНачалаУчетаСервер();
		ОбновитьФормуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросИзмененияДатыВводаНачальныхОстатковЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПриИзмененииДатыНачалаУчетаСервер();
	Иначе
		Объект.ДатаВводаОстатков = ДополнительныеПараметры.ДатаНачалаУчета;
	КонецЕсли;
	
	ОбновитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОстатки(ЗаполнятьБУ = Истина, ЗаполнятьНУ = Ложь)

	ДатаВводаОстатков = Объект.ДатаВводаОстатков + 86400;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаВводаОстатков", ДатаВводаОстатков);
	Запрос.УстановитьПараметр("Организация",       Объект.Организация);
	
	ТекстЗапроса = "";
	
	Если ЗаполнятьБУ Тогда
		
		ТекстЗапроса = 	
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТиповойОстатки.Счет КАК Счет,
		|	ТиповойОстатки.Счет.Наименование,
		|	ТиповойОстатки.Счет.ЗапретитьИспользоватьВПроводках,
		|	ТиповойОстатки.Счет.Вид,
		|	ТиповойОстатки.Счет.Забалансовый КАК Забалансовый,
		|	ТиповойОстатки.Организация,
		|	СУММА(ВЫБОР
		|			КОГДА ТиповойОстатки.Счет.Забалансовый
		|				ТОГДА 0
		|			ИНАЧЕ ТиповойОстатки.СуммаОстатокДт
		|		КОНЕЦ) КАК СальдоНачальноеДт,
		|	СУММА(ВЫБОР
		|			КОГДА ТиповойОстатки.Счет.Забалансовый
		|				ТОГДА 0
		|			ИНАЧЕ ТиповойОстатки.СуммаОстатокКт
		|		КОНЕЦ) КАК СальдоНачальноеКт,
		|	СУММА(ВЫБОР
		|			КОГДА ТиповойОстатки.Счет.Забалансовый
		|				ТОГДА ТиповойОстатки.СуммаОстатокДт
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СальдоНачальноеЗабалансовоеДт,
		|	СУММА(ВЫБОР
		|			КОГДА ТиповойОстатки.Счет.Забалансовый
		|				ТОГДА ТиповойОстатки.СуммаОстатокКт
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СальдоНачальноеЗабалансовоеКт
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Остатки(&ДатаВводаОстатков, , , Организация = &Организация) КАК ТиповойОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ТиповойОстатки.Счет,
		|	ТиповойОстатки.Счет.Наименование,
		|	ТиповойОстатки.Счет.ЗапретитьИспользоватьВПроводках,
		|	ТиповойОстатки.Счет.Вид,
		|	ТиповойОстатки.Организация,
		|	ТиповойОстатки.Счет.Забалансовый
		|ИТОГИ
		|	СУММА(СальдоНачальноеДт),
		|	СУММА(СальдоНачальноеКт),
		|	СУММА(СальдоНачальноеЗабалансовоеДт),
		|	СУММА(СальдоНачальноеЗабалансовоеКт)
		|ПО
		|	ОБЩИЕ,
		|	Счет ИЕРАРХИЯ
		|АВТОУПОРЯДОЧИВАНИЕ";
		
	КонецЕсли;
	
	Если ЗаполнятьБУ И ЗаполнятьНУ Тогда
		ТекстЗапроса = ТекстЗапроса + " ; ";
	КонецЕсли;
	
	Если ЗаполнятьНУ Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НалоговыйОстатки.Счет КАК Счет,
		|	НалоговыйОстатки.Счет.Наименование,
		|	НалоговыйОстатки.Счет.ЗапретитьИспользоватьВПроводках,
		|	НалоговыйОстатки.Счет.Вид,
		|	НалоговыйОстатки.Организация,
		|	СУММА(НалоговыйОстатки.СуммаОстатокДт) КАК СальдоНачальноеДт,
		|	СУММА(НалоговыйОстатки.СуммаОстатокКт) КАК СальдоНачальноеКт
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.Остатки(&ДатаВводаОстатков, , , Организация = &Организация) КАК НалоговыйОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	НалоговыйОстатки.Счет,
		|	НалоговыйОстатки.Счет.Наименование,
		|	НалоговыйОстатки.Счет.ЗапретитьИспользоватьВПроводках,
		|	НалоговыйОстатки.Счет.Вид,
		|	НалоговыйОстатки.Организация
		|ИТОГИ
		|	СУММА(СальдоНачальноеДт),
		|	СУММА(СальдоНачальноеКт)
		|ПО
		|	ОБЩИЕ,
		|	Счет ИЕРАРХИЯ
		|АВТОУПОРЯДОЧИВАНИЕ";
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Если ЗаполнятьБУ Тогда
		
		ОсновныеСчетаБУ_ТЗ     = ДанныеФормыВЗначение(ОсновныеСчетаБУ, Тип("ТаблицаЗначений"));
		ЗабалансовыеСчетаБУ_ТЗ = ДанныеФормыВЗначение(ЗабалансовыеСчетаБУ, Тип("ТаблицаЗначений"));
		
		ОсновныеСчетаБУ_ТЗ.ЗаполнитьЗначения(0, "СальдоНачальноеДт, СальдоНачальноеКт");
		ЗабалансовыеСчетаБУ_ТЗ.ЗаполнитьЗначения(0, "СальдоНачальноеЗабалансовоеДт, СальдоНачальноеЗабалансовоеКт");
		
		ЗначениеВДанныеФормы(ОсновныеСчетаБУ_ТЗ, ОсновныеСчетаБУ);
		ЗначениеВДанныеФормы(ЗабалансовыеСчетаБУ_ТЗ, ЗабалансовыеСчетаБУ);
		
		ВыборкаГрупп = РезультатыЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "Счет");
		ОбработатьВыборкуОстатка(ВыборкаГрупп, "БУ", Неопределено);
		
		ВыборкаОбщие = РезультатыЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "ОБЩИЕ");
		ВыборкаОбщие.Следующий();
		Элементы.ОсновныеСчетаБУСальдоНачальноеДт.ТекстПодвала = Формат(ВыборкаОбщие.СальдоНачальноеДт, "ЧДЦ=2; ЧН=' '") ;
		Элементы.ОсновныеСчетаБУСальдоНачальноеКт.ТекстПодвала = Формат(ВыборкаОбщие.СальдоНачальноеКт, "ЧДЦ=2; ЧН=' '");
		Элементы.ЗабалансовыеСчетаБУСальдоНачальноеДт.ТекстПодвала = Формат(ВыборкаОбщие.СальдоНачальноеЗабалансовоеДт, "ЧДЦ=2; ЧН=' '");
		Элементы.ЗабалансовыеСчетаБУСальдоНачальноеКт.ТекстПодвала = Формат(ВыборкаОбщие.СальдоНачальноеЗабалансовоеКт, "ЧДЦ=2; ЧН=' '");
		
	КонецЕсли;
	
	Если ЗаполнятьНУ Тогда
		
		ОсновныеСчетаНУ_ТЗ = ДанныеФормыВЗначение(ОсновныеСчетаНУ, Тип("ТаблицаЗначений"));
		ОсновныеСчетаНУ_ТЗ.ЗаполнитьЗначения(0, "СальдоНачальноеДт, СальдоНачальноеКт");
		ЗначениеВДанныеФормы(ОсновныеСчетаНУ_ТЗ, ОсновныеСчетаНУ);
		
		ИндексПакетаНУ = 0 + ЗаполнятьБУ;
		
		ВыборкаГрупп = РезультатыЗапроса[ИндексПакетаНУ].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "Счет");
		ОбработатьВыборкуОстатка(ВыборкаГрупп, "НУ", Неопределено);
		
		ВыборкаОбщие = РезультатыЗапроса[ИндексПакетаНУ].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "ОБЩИЕ");
		ВыборкаОбщие.Следующий();
		Элементы.ОсновныеСчетаНУСальдоНачальноеДт.ТекстПодвала = Формат(ВыборкаОбщие.СальдоНачальноеДт, "ЧДЦ=2; ЧН=' '") ;
		Элементы.ОсновныеСчетаНУСальдоНачальноеКт.ТекстПодвала = Формат(ВыборкаОбщие.СальдоНачальноеКт, "ЧДЦ=2; ЧН=' '");
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборкуОстатка(ВыборкаГрупп, РазделУчета = "БУ", СчетРодитель)
	
	Пока ВыборкаГрупп.Следующий() Цикл

		ТипЗаписи = ВыборкаГрупп.ТипЗаписи();
		Если ТипЗаписи = ТипЗаписиЗапроса.ИтогПоГруппировке И СчетРодитель = ВыборкаГрупп.Счет Тогда
			Продолжить;
		КонецЕсли;
		
		СальдоКЗаполнению = "";

		Если РазделУчета = "БУ" Тогда
			Если ВыборкаГрупп.Забалансовый Тогда
				СтрокиОстатка = ЗабалансовыеСчетаБУ.НайтиСтроки(Новый Структура("Счет", ВыборкаГрупп.Счет));
				СальдоКЗаполнению = "СальдоНачальноеЗабалансовоеДт, СальдоНачальноеЗабалансовоеКт";
			Иначе
				СтрокиОстатка = ОсновныеСчетаБУ.НайтиСтроки(Новый Структура("Счет", ВыборкаГрупп.Счет));
				СальдоКЗаполнению = "СальдоНачальноеДт, СальдоНачальноеКт";
			КонецЕсли;
		Иначе
			СтрокиОстатка = ОсновныеСчетаНУ.НайтиСтроки(Новый Структура("Счет", ВыборкаГрупп.Счет));
			СальдоКЗаполнению = "СальдоНачальноеДт, СальдоНачальноеКт";
		КонецЕсли;

		Если СтрокиОстатка.Количество() > 0 Тогда
			СтрокаОстатка = СтрокиОстатка[0];
			ЗаполнитьЗначенияСвойств(СтрокаОстатка, ВыборкаГрупп, СальдоКЗаполнению);
		КонецЕсли;

		Если ТипЗаписи = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
			ОбработатьВыборкуОстатка(ВыборкаГрупп.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "Счет"), РазделУчета, ВыборкаГрупп.Счет);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДатыНачалаУчетаСервер()

	УстановитьДатуНачалаУчета(Объект.ДатаВводаОстатков);

	ДатаУчетнойПолитики = ПолучитьДатуУчетнойПолитики(Объект.ДатаВводаОстатков);
	
	УчетнаяПолитикаБУСуществует = УчетнаяПолитикаСуществует(Объект.Организация, ДатаУчетнойПолитики, "БУ");
	УчетнаяПолитикаНУСуществует = УчетнаяПолитикаСуществует(Объект.Организация, ДатаУчетнойПолитики, "НУ");

	МожноИзменятьОстатки = ЗначениеЗаполнено(Объект.Организация) 
	                       И ЗначениеЗаполнено(Объект.ДатаВводаОстатков)
				           И УчетнаяПолитикаБУСуществует;
				
	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.ДатаВводаОстатков);
	
	ОбновитьОстатки(Истина, ОрганизацияПлательщикНалогаНаПрибыль);
	УправлениеФормой();

КонецПроцедуры

&НаСервере
Процедура УстановитьДатуНачалаУчета(ДатаНачалаУчета)

	МенеджерЗаписиРегистра = РегистрыСведений.ДатыВводаНачальныхОстатков.СоздатьМенеджерЗаписи();
	МенеджерЗаписиРегистра.Организация = Объект.Организация;
	МенеджерЗаписиРегистра.Прочитать();
	Если НЕ МенеджерЗаписиРегистра.Выбран() Тогда
		МенеджерЗаписиРегистра.Организация = Объект.Организация;
	КонецЕсли;
	МенеджерЗаписиРегистра.ДатаВводаНачальныхОстатков = ДатаНачалаУчета;
	Если КоличествоДокументовВводаОстатков > 0 Тогда
		ПерезаписатьДокументыНаНовуюДату(Объект.Организация, ДатаНачалаУчета);
	КонецЕсли;
	МенеджерЗаписиРегистра.Записать();
	Объект.ДатаВводаОстатков = ПолучитьДатуНачалаУчета(Объект.Организация);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПерезаписатьДокументыНаНовуюДату(Знач Организация, Знач ДатаНачалаУчета, ПодсчитатьКоличество = Ложь)

	ЗапросПоДокументам = Новый Запрос;
	ЗапросПоДокументам.УстановитьПараметр("Организация", Организация);
	ЗапросПоДокументам.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                           |	ВводНачальныхОстатков.Ссылка,
	                           |	ВводНачальныхОстатков.Организация,
	                           |	ВводНачальныхОстатков.Проведен
	                           |ИЗ
	                           |	Документ.ВводНачальныхОстатков КАК ВводНачальныхОстатков
	                           |ГДЕ
	                           |	ВводНачальныхОстатков.Организация = &Организация";

	СписокДокументов = ЗапросПоДокументам.Выполнить().Выгрузить();

	Если СписокДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	НачатьТранзакцию();
	
	ТекстСообщения = НСтр("ru='Изменение даты введенных ранее документов.'");
	ТекстСообщения = ТекстСообщения + Символы.ПС + "------------------------------------------";
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

	ТекущийДокумент = Документы.ВводНачальныхОстатков.ПустаяСсылка();
	
	Попытка
		
		Для Каждого ДокументВводаОстатков Из СписокДокументов Цикл
			ТекущийДокумент = ДокументВводаОстатков.Ссылка;
			ДокументОбъект = ДокументВводаОстатков.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Дата = ДатаНачалаУчета;
			Если ДокументОбъект.Проведен Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			Иначе
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
			КонецЕсли;
		КонецЦикла;
		
	Исключение

		ОтменитьТранзакцию();

		ТекстСообщения = НСтр("ru='Не удалось заменить дату в документе: %1. По причине: '");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекущийДокумент);
		ТекстСообщения = ТекстСообщения + Символы.ПС + ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

		Возврат;

	КонецПопытки;

	ЗафиксироватьТранзакцию();

	ТекстСообщения = НСтр("ru='Изменение даты в документах ввода начальных остатков успешно завершено'");
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

КонецПроцедуры

&НаСервереБезКонтекста
Функция УчетнаяПолитикаСуществует(Знач Организация, Знач Дата, РазделУчета)
	
	Возврат УчетнаяПолитикаСервер.Существует(Организация, Дата, РазделУчета);
	
КонецФункции

&НаСервере
Процедура УправлениеФормой()

	ДатаУчетнойПолитики = ПолучитьДатуУчетнойПолитики(Объект.ДатаВводаОстатков);

	Элементы.ОсновныеСчетаБУ.ТолькоПросмотр = НЕ МожноИзменятьОстатки;
	Элементы.ОсновныеСчетаБУ.КонтекстноеМеню.Доступность = МожноИзменятьОстатки;
	Элементы.ОсновныеСчетаБУ.КоманднаяПанель.Доступность = МожноИзменятьОстатки;
	
	Элементы.ГруппаОсновныеСчетаНУ.Видимость = ОрганизацияПлательщикНалогаНаПрибыль;
	Элементы.ОсновныеСчетаНУ.ТолькоПросмотр = НЕ МожноИзменятьОстатки;
	Элементы.ОсновныеСчетаНУ.КонтекстноеМеню.Доступность = МожноИзменятьОстатки;
	Элементы.ОсновныеСчетаНУ.КоманднаяПанель.Доступность = МожноИзменятьОстатки;
	
	Элементы.ЗабалансовыеСчетаБУ.ТолькоПросмотр = НЕ МожноИзменятьОстатки;
	Элементы.ЗабалансовыеСчетаБУ.КонтекстноеМеню.Доступность = МожноИзменятьОстатки;
	Элементы.ЗабалансовыеСчетаБУ.КоманднаяПанель.Доступность = МожноИзменятьОстатки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокДокументов()
	
	Если НЕ МожноИзменятьОстатки Тогда
		Возврат;
	КонецЕсли;

	Счет = ОпределитьТекущийСчетВФорме();
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат;
	КонецЕсли;

	РазделУчета = ОпределитьРазделУчета(Счет);
	
	ПараметрыОтбора = Новый Структура("Дата, Организация", КонецДня(Объект.ДатаВводаОстатков), Объект.Организация);
	ПараметрыОтбора.Вставить("ПомощникВводаНачальныхОстатков", Истина);

	Если РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.ОсновныеСредства") Тогда
		ПараметрыФормы = Новый Структура("ПараметрыОтбораСписка", ПараметрыОтбора);
		ОткрытьФорму("Документ.ВводНачальныхОстатковОС.ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
	ИначеЕсли РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.РасчетыСПерсоналомПоОплатеТрудаИДепонентам") Тогда
		ПараметрыФормы = Новый Структура("ПараметрыОтбораСписка", ПараметрыОтбора);
		ОткрытьФорму("Документ.ВводНачальныхОстатковПоЗарплате.ФормаСписка", ПараметрыФормы, ЭтаФорма);
		
	Иначе
		Если РазделУчета <> Неопределено Тогда
			ПараметрыОтбора.Вставить("РазделУчета", РазделУчета);
		КонецЕсли;
		ПараметрыФормы = Новый Структура("ПараметрыОтбораСписка", ПараметрыОтбора);
		ОткрытьФорму("Документ.ВводНачальныхОстатков.ФормаСписка", ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ОпределитьТекущийСчетВФорме(БезГрупп = Ложь)

	СтрокаСчета  = Неопределено;
	Если Элементы.ГруппаСпискаСчетов.ТекущаяСтраница = Элементы.ГруппаОсновныеСчетаБУ Тогда
		СтрокаСчета = Элементы.ОсновныеСчетаБУ.ТекущиеДанные;
	ИначеЕсли Элементы.ГруппаСпискаСчетов.ТекущаяСтраница = Элементы.ГруппаОсновныеСчетаНУ Тогда
		СтрокаСчета = Элементы.ОсновныеСчетаНУ.ТекущиеДанные;
	ИначеЕсли Элементы.ГруппаСпискаСчетов.ТекущаяСтраница = Элементы.ГруппаЗабалансовыеСчетаБУ Тогда
		СтрокаСчета = Элементы.ЗабалансовыеСчетаБУ.ТекущиеДанные;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

	Если СтрокаСчета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если БезГрупп И СтрокаСчета.ЗапретитьИспользоватьВПроводках Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат СтрокаСчета.Счет;

КонецФункции

&НаКлиенте
Процедура ВвестиОстатки()
	
	Если НЕ МожноИзменятьОстатки Тогда
		Возврат;
	КонецЕсли;
	
	Счет = ОпределитьТекущийСчетВФорме(Истина);
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат;
	КонецЕсли;

	РазделУчета = ОпределитьРазделУчета(Счет);
	Если НЕ ЗначениеЗаполнено(РазделУчета) Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ГруппаСпискаСчетов.ТекущаяСтраница = Элементы.ГруппаОсновныеСчетаНУ Тогда
		ТолькоНУ = Истина;
	Иначе
		ТолькоНУ = Ложь;
	КонецЕсли;
	
	Организация = Объект.Организация;
	
	ПараметрыОтбора = Новый Структура("Дата, Организация", Объект.ДатаВводаОстатков, Организация);
	ПараметрыОтбора.Вставить("ПомощникВводаНачальныхОстатков", Истина);
	
	Если РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.ОсновныеСредства") Тогда
		КлючУникальностиДокумента = Новый Структура();
		КлючУникальностиДокумента.Вставить("Организация", Организация);
		
		Если ТолькоНУ Тогда
			ПараметрыОтбора.Вставить("ОтражатьВБухгалтерскомУчете", Ложь);
			ПараметрыОтбора.Вставить("УчитыватьКПН", Истина);
		Иначе
			ПараметрыОтбора.Вставить("ОтражатьВБухгалтерскомУчете", Истина);
			ПараметрыОтбора.Вставить("УчитыватьКПН", ОрганизацияПлательщикНалогаНаПрибыль);
		КонецЕсли;
		
		ОтражатьДокументыВНалоговомУчете = ЗначенияНастроекПользователя.ОтражатьДокументыВНалоговомУчете; 
		ВидУчетаНУ = ?(ОтражатьДокументыВНалоговомУчете, 
		               ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"),
					   ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НеОтражаетсяВНУ"));
		ПараметрыОтбора.Вставить("ВидУчетаНУ", ВидУчетаНУ);
		
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения, ОткрытиеИзОбработкиВводаНачальныхОстатков", ПараметрыОтбора, Истина);
		ОткрытьФорму("Документ.ВводначальныхОстатковОС.ФормаОбъекта", ПараметрыФормы, ЭтаФорма, КлючУникальностиДокумента);
		
	ИначеЕсли РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.РасчетыСПерсоналомПоОплатеТрудаИДепонентам") Тогда
		КлючУникальностиДокумента = Новый Структура();
		КлючУникальностиДокумента.Вставить("Организация", Организация);
		
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения, ОткрытиеИзОбработкиВводаНачальныхОстатков", ПараметрыОтбора, Истина);
		ОткрытьФорму("Документ.ВводНачальныхОстатковПоЗарплате.ФормаОбъекта", ПараметрыФормы, ЭтаФорма, КлючУникальностиДокумента);
		
	Иначе
		КлючУникальностиДокумента = Новый Структура();
		КлючУникальностиДокумента.Вставить("Организация", Организация);
		КлючУникальностиДокумента.Вставить("РазделУчета", РазделУчета);
		
		Если ТолькоНУ Тогда
			ПараметрыОтбора.Вставить("ОтражатьВБухгалтерскомУчете", Ложь);
			ПараметрыОтбора.Вставить("УчитыватьКПН", Истина);
		Иначе
			ПараметрыОтбора.Вставить("ОтражатьВБухгалтерскомУчете", Истина);
			ПараметрыОтбора.Вставить("УчитыватьКПН", ОрганизацияПлательщикНалогаНаПрибыль);
		КонецЕсли;
		
		Если РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.Запасы") Тогда
			ИмяТЧ = "Запасы";
			
		ИначеЕсли РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам") Тогда
			ИмяТЧ = "РасчетыПоНалогамИСборам";
			
		ИначеЕсли РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.РасчетыСПодотчетнымиЛицами") Тогда
			ИмяТЧ = "РасчетыСПодотчетнымиЛицами";
			
		ИначеЕсли РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками")
			ИЛИ РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками") Тогда
			ИмяТЧ = "РасчетыСКонтрагентами";
			
		Иначе
			ИмяТЧ = "БухСправка";
			
		КонецЕсли;
		ПараметрыОтбора.Вставить("ИмяТабличнойЧасти", ИмяТЧ);
		
		Если ТолькоНУ Тогда
			ПараметрыОтбора.Вставить("СчетУчетаНУ", Счет);
		Иначе
			ПараметрыОтбора.Вставить("СчетУчетаБУ", Счет);
			СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Счет));
			ПараметрыОтбора.Вставить("СчетУчетаНУ", СчетУчетаНУ);
		КонецЕсли;
		ПараметрыОтбора.Вставить("РазделУчета", РазделУчета);
		
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения, ОткрытиеИзОбработкиВводаНачальныхОстатков", ПараметрыОтбора, Истина);
		ОткрытьФорму("Документ.ВводНачальныхОстатков.ФормаОбъекта", ПараметрыФормы, ЭтаФорма, КлючУникальностиДокумента);
		
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстВстроеннойСправки()
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	
	Организация       = Объект.Организация;
	ДатаВводаОстатков = Объект.ДатаВводаОстатков;

	МакетПомощника = ОбъектОбработки.ПолучитьМакет("Справка");

	ОбластьТекстЗаголовок			= "Заголовок|Справка";
	ОбластьТекстаСправки = МакетПомощника.ПолучитьОбласть(ОбластьТекстЗаголовок);
	ТекстЗаголовок = ОбластьТекстаСправки.ТекущаяОбласть.Текст;
	
	ОбластьТекстОбщий			= "Общий|Справка";
	ОбластьТекстаСправки = МакетПомощника.ПолучитьОбласть(ОбластьТекстОбщий);
	ТекстОбщий = ОбластьТекстаСправки.ТекущаяОбласть.Текст + "
	|";
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ОбластьТекстОрганизация		= "ОрганизацияУстановить|Справка";
		ОбластьТекстаСправки = МакетПомощника.ПолучитьОбласть(ОбластьТекстОрганизация);
		ТекстОбласти = "<BODY><FONT color=#ff0000>" + ОбластьТекстаСправки.ТекущаяОбласть.Текст + "</FONT></BODY>";
		ТекстОбщий = ТекстОбщий + ТекстОбласти + "
		|";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Если ЗначениеЗаполнено(ДатаВводаОстатков) Тогда
			ОбластьТекстДата	= "ДатаВводаОстатковИзменить|Справка";
			ОбластьСсылкаДата	= "ДатаВводаОстатковИзменить|Ссылка";
		Иначе
			ОбластьТекстДата	= "ДатаВводаОстатковУстановить|Справка";
			ОбластьСсылкаДата	= "ДатаВводаОстатковУстановить|Ссылка";
		КонецЕсли;
		
		ОбластьТекстаСправки = МакетПомощника.ПолучитьОбласть(ОбластьТекстДата);
		ТекстОбласти = ОбластьТекстаСправки.ТекущаяОбласть.Текст;
		ТекстОбласти = СтрЗаменить(ТекстОбласти, "##ДАТА##", Формат(ДатаВводаОстатков, "ДЛФ=DD"));
		ТекстОбласти = СтрЗаменить(ТекстОбласти, "##ОРГАНИЗАЦИЯ##", СокрЛП(Организация.Наименование));
		
		Если НЕ ЗначениеЗаполнено(ДатаВводаОстатков) Тогда
			ТекстОбщий = ТекстОбщий + 
			"<BODY><FONT color=#ff0000>" + ТекстОбласти + "</FONT></BODY>
			|";
		Иначе
			ТекстОбщий = ТекстОбщий + ТекстОбласти + "
			|";
		КонецЕсли;
		
		ОбластьТекстаСсылки= МакетПомощника.ПолучитьОбласть(ОбластьСсылкаДата);
		ТекстОбласти = "<A id=Команда href=""1C:ВвестиДату"">" + ОбластьТекстаСсылки.ТекущаяОбласть.Текст + "</A>";
		ТекстОбщий = ТекстОбщий + ТекстОбласти + "
		|";
		
		Если ЗначениеЗаполнено(ДатаВводаОстатков) Тогда
			// гиперссылка на параметры учета			
			ОбластьТекстаСправки = МакетПомощника.ПолучитьОбласть("ЗадатьНастройкиПараметровУчета|Справка");
			ТекстОбщий = ТекстОбщий + ОбластьТекстаСправки.ТекущаяОбласть.Текст + "
				|";
			
			ОбластьТекстаСсылки = МакетПомощника.ПолучитьОбласть("ЗадатьНастройкиПараметровУчета|Ссылка");
			ТекстОбласти = "<A id=Команда href=""1C:ЗадатьНастройкиПараметровУчета"">" + ОбластьТекстаСсылки.ТекущаяОбласть.Текст + "</A>";
			ТекстОбщий = ТекстОбщий + ТекстОбласти + "
			|";
			
			// гипперссылка на учетную политику
			Если НЕ УчетнаяПолитикаБУСуществует Тогда
				ОбластьТекстУП = "УчетнаяПолитикаНеЗадана|Справка";
				ОбластьСсылкаУП = "УчетнаяПолитикаНеЗадана|Ссылка";
			Иначе
				ОбластьТекстУП = "УчетнаяПолитикаЗадана|Справка";
				ОбластьСсылкаУП = "УчетнаяПолитикаЗадана|Ссылка";
			КонецЕсли;
			
			ОбластьТекстаСправки = МакетПомощника.ПолучитьОбласть(ОбластьТекстУП);
			Если НЕ УчетнаяПолитикаБУСуществует Тогда
				ТекстОбщий = ТекстОбщий + 
				"<BODY><FONT color=#ff0000>" + ОбластьТекстаСправки.ТекущаяОбласть.Текст + "</FONT></BODY>
				|";
			Иначе
				ТекстОбщий = ТекстОбщий + ОбластьТекстаСправки.ТекущаяОбласть.Текст + "
				|";
			КонецЕсли;
			ОбластьТекстаСсылки = МакетПомощника.ПолучитьОбласть(ОбластьСсылкаУП);
			ТекстОбласти = "<A id=Команда href=""1C:ЗадатьУчетнуюПолитику"">" + ОбластьТекстаСсылки.ТекущаяОбласть.Текст + "</A>";
			ТекстОбщий = ТекстОбщий + ТекстОбласти + "
			|";
			
			// гипперссылка на учетную политику
			Если НЕ УчетнаяПолитикаНУСуществует Тогда
				ОбластьТекстУП = "УчетнаяПолитикаНалНеЗадана|Справка";
				ОбластьСсылкаУП = "УчетнаяПолитикаНалНеЗадана|Ссылка";
			Иначе
				ОбластьТекстУП = "УчетнаяПолитикаНалЗадана|Справка";
				ОбластьСсылкаУП = "УчетнаяПолитикаНалЗадана|Ссылка";
			КонецЕсли;
			

			ОбластьТекстаСправки = МакетПомощника.ПолучитьОбласть(ОбластьТекстУП);
			Если НЕ УчетнаяПолитикаНУСуществует Тогда
				ТекстОбщий = ТекстОбщий + 
				"<BODY><FONT color=#ff0000>" + ОбластьТекстаСправки.ТекущаяОбласть.Текст + "</FONT></BODY>
				|";
			Иначе
				ТекстОбщий = ТекстОбщий + ОбластьТекстаСправки.ТекущаяОбласть.Текст + "
				|";
			КонецЕсли;
			ОбластьТекстаСсылки = МакетПомощника.ПолучитьОбласть(ОбластьСсылкаУП);
			ТекстОбласти = "<A id=Команда href=""1C:ЗадатьУчетнуюПолитикуНал"">" + ОбластьТекстаСсылки.ТекущаяОбласть.Текст + "</A>";
			ТекстОбщий = ТекстОбщий + ТекстОбласти + "
			|";

		КонецЕсли;	
		
	КонецЕсли;
	
	ОбластьТекстОбщий = "ОбщееОписание|Справка";
	ОбластьТекстаСправки = МакетПомощника.ПолучитьОбласть(ОбластьТекстОбщий);
	ТекстОбщий = ТекстОбщий + ОбластьТекстаСправки.ТекущаяОбласть.Текст + "
	|";
	
	ЦветФонаСправки   = РаботаСДиалогамиКлиентСервер.ВернутьШестнадцатиричноеПредставлениеЦвета(РаботаСДиалогамиКлиентСервер.ВстроеннаяСправка_ЦветФона());
	ЦветСсылкиСправки = РаботаСДиалогамиКлиентСервер.ВернутьШестнадцатиричноеПредставлениеЦвета(Новый Цвет(51, 102, 255));
	
	ТекстВстроеннойСправки = 
	"<HTML>
	|	<HEAD>
	|		<META http-equiv=Content-Type content=""text/html; charset=utf-8"">" + РаботаСДиалогамиКлиентСервер.ВстроеннаяСправка_СтилиДокумента() + "
	|	</HEAD>
	|	<BODY aLink="+ЦветСсылкиСправки+" vLink="+ЦветСсылкиСправки+" link="+ЦветСсылкиСправки+" bgColor="+ЦветФонаСправки+" scroll=auto 
	|		style=""font-size: 8pt; font-family: MS Sans Serif"">
	|		<IMG src="+РаботаСДиалогамиКлиентСервер.ПолучитьПутьККартинкеДляHTML(ИДКартинки)+">
	|		<DIV class=""top"" id=true style=""DISPLAY:inline"">
	|			<DIV><STRONG>" + ТекстЗаголовок + "</STRONG></DIV>
	|		</DIV>";
	
	Если СтрЧислоСтрок(ТекстОбщий) > 0 Тогда
		Для НомСтроки = 1 По СтрЧислоСтрок(ТекстОбщий) Цикл
			ТекстСправки = СтрПолучитьСтроку(ТекстОбщий,НомСтроки);
			ТекстВстроеннойСправки = ТекстВстроеннойСправки + "
			|	<DIV>" + ТекстСправки + "</DIV>";
		КонецЦикла;
	КонецЕсли;
	
	ТекстВстроеннойСправки = ТекстВстроеннойСправки + "
	|	</BODY>
	|</HTML>";
		
	Возврат ТекстВстроеннойСправки;

КонецФункции

&НаКлиенте
Процедура ВстроеннаяСправкаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
		
	Если ДанныеСобытия.Href <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		РаботаСДиалогамиКлиентСервер.ПолеHTMLДокументаOnClick(Элементы.ВстроеннаяСправка, ДанныеСобытия, ЭтаФорма)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуФормы(Команда, Значение) Экспорт
	
	Если Команда = "ВвестиДату" Тогда
		
		ДатаНачалаУчета = Объект.ДатаВводаОстатков;
		Если Объект.ДатаВводаОстатков = '00010101' Тогда
			ТекстЗаголовка = НСтр("ru = 'Установка даты ввода остатков'");
		Иначе
			ТекстЗаголовка = НСтр("ru = 'Изменение даты ввода остатков'");
		КонецЕсли;
		ПараметрыФормы = Новый Структура("ДатаВводаОстатков, ТекстЗаголовка", Объект.ДатаВводаОстатков, ТекстЗаголовка);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ДатаНачалаУчета", ДатаНачалаУчета);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ДатаВводаначальныхОстатковНажатиеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Обработка.ВводНачальныхОстатков.Форма.ФормаУстановкиДатыНачалаВеденияУчета", ПараметрыФормы, ЭтаФорма,,,, ОповещениеОЗакрытии);
		
	ИначеЕсли Команда = "ЗадатьУчетнуюПолитику" Тогда
		
		ДатаУчетнойПолитики = ПолучитьДатуУчетнойПолитики(Объект.ДатаВводаОстатков);
		УчетнаяПолитикаБУСуществует = УчетнаяПолитикаСуществует(Объект.Организация, ДатаУчетнойПолитики, "БУ");
		Если УчетнаяПолитикаБУСуществует Тогда
			ПараметрыФормы = Новый Структура("Ключ", ПолучитьКлючЗаписиУчетнойПолитики(Объект.Организация, ДатаУчетнойПолитики, "БУ"));
		Иначе
			ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", Новый Структура("Организация, Период", Объект.Организация, ДатаУчетнойПолитики));
		КонецЕсли;
		ОткрытьФорму("РегистрСведений.УчетнаяПолитикаБухгалтерскийУчет.ФормаЗаписи",  ПараметрыФормы, ЭтаФорма);
		
	ИначеЕсли Команда = "ЗадатьУчетнуюПолитикуНал" Тогда
		
		ДатаУчетнойПолитики = ПолучитьДатуУчетнойПолитики(Объект.ДатаВводаОстатков);
		УчетнаяПолитикаНУСуществует = УчетнаяПолитикаСуществует(Объект.Организация, ДатаУчетнойПолитики, "НУ");
		Если УчетнаяПолитикаНУСуществует Тогда
			ПараметрыФормы = Новый Структура("Ключ", ПолучитьКлючЗаписиУчетнойПолитики(Объект.Организация, ДатаУчетнойПолитики, "НУ"));
		Иначе
			ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", Новый Структура("Организация, Период", Объект.Организация, ДатаУчетнойПолитики));
		КонецЕсли;
		ОткрытьФорму("РегистрСведений.УчетнаяПолитикаНалоговыйУчет.ФормаЗаписи",  ПараметрыФормы, ЭтаФорма);
		
	ИначеЕсли Команда = "ЗадатьНастройкиПараметровУчета" Тогда
		
		ПараметрыФормы = Новый Структура;
		ОткрытьФорму("ОбщаяФорма.НастройкаПараметровУчета", ПараметрыФормы, ЭтаФорма);
		
	Иначе

		ТекстСообщения = НСтр("ru='Неизвестная команда: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Команда);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКлючЗаписиУчетнойПолитики(Знач Организация, Знач ДатаНачалаУчета, РазделУчета = "БУ")
	
	ИмяРегистраУчетнойПолитики = ?(РазделУчета = "БУ", "УчетнаяПолитикаБухгалтерскийУчет", "УчетнаяПолитикаНалоговыйУчет");

	Отбор = Новый Структура("Организация", Организация);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",     Организация);
	Запрос.УстановитьПараметр("ДатаНачалаУчета", ДатаНачалаУчета);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизацийСрезПоследних.Период
	|ИЗ
	|	РегистрСведений." + ИмяРегистраУчетнойПолитики + ".СрезПоследних(&ДатаНачалаУчета, Организация = &Организация) КАК УчетнаяПолитикаОрганизацийСрезПоследних";
	
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		ПериодЗаписи = НачалоМесяца(ДатаНачалаУчета);
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ПериодЗаписи = Выборка.Период;
	КонецЕсли;

	СтруктураОтбора = Новый Структура("Период,Организация", ПериодЗаписи, Организация);
	
	Возврат РегистрыСведений[ИмяРегистраУчетнойПолитики].СоздатьКлючЗаписи(СтруктураОтбора);

КонецФункции

&НаКлиенте
Процедура СформироватьОтчет(ИмяОтчета)
	
	Счет = ОпределитьТекущийСчетВФорме();
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат;
	КонецЕсли;
	
	ПользовательскиеНастройки  = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ДополнительныеСвойства     = ПользовательскиеНастройки.ДополнительныеСвойства;
	
	Если ТипЗнч(Счет) = Тип("ПланСчетовСсылка.Типовой") Тогда
		ИмяОтчета = ИмяОтчета + "Типовой";
		ДополнительныеСвойства.Вставить("ПоказательБУ", Истина);
	Иначе
		ИмяОтчета = ИмяОтчета + "Налоговый";
		ДополнительныеСвойства.Вставить("ПоказательНУ", Истина);
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("Счет", Счет);
	ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
	
	СписокСтруктурныхЕдиниц = Новый СписокЗначений;
	СписокСтруктурныхЕдиниц.Добавить(Объект.Организация);
	ДополнительныеСвойства.Вставить("СписокСтруктурныхЕдиниц", СписокСтруктурныхЕдиниц);
	ПредставлениеСпискаОрганизаций = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(СписокСтруктурныхЕдиниц);
	ДополнительныеСвойства.Вставить("ПредставлениеСпискаОрганизаций", ПредставлениеСпискаОрганизаций);
	
	ДополнительныеСвойства.Вставить("НачалоПериода", НачалоДня(Объект.ДатаВводаОстатков));
	ДополнительныеСвойства.Вставить("КонецПериода" , КонецДня(Объект.ДатаВводаОстатков));
	ДополнительныеСвойства.Вставить("Периодичность" , 0);
	
	ЗаполняемыеНастройки = Новый Структура("Показатели, Группировка, Отбор, ВыводимыеДанные", Ложь, Истина, Истина, Истина);
	ПараметрыФормы = Новый Структура("ВидРасшифровки, ПользовательскиеНастройки, СформироватьПриОткрытии, ИДРасшифровки, ЗаполняемыеНастройки",
									 2, ПользовательскиеНастройки, Истина, ИмяОтчета, ЗаполняемыеНастройки);
	ОткрытьФорму("Отчет." + ИмяОтчета + ".Форма.ФормаОтчета", ПараметрыФормы,, Истина);
	
КонецПроцедуры

