#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
           
Функция ПоискЭлементаПоРеквизитам(Наименование, Источник = "", ЭтоГруппа = Ложь, Родитель = Неопределено)

	РегламОтчеты = Справочники.РегламентированныеОтчеты;

	Если ЭтоГруппа Тогда

		НайденнаяГруппа = РегламОтчеты.НайтиПоНаименованию(Наименование, Истина, Родитель);

		Если НайденнаяГруппа <> РегламОтчеты.ПустаяСсылка() Тогда

			Возврат НайденнаяГруппа;

		КонецЕсли;

	Иначе

		ВыборкаОтчеты = РегламОтчеты.Выбрать(Родитель);
		Пока ВыборкаОтчеты.Следующий() Цикл

			Если ВыборкаОтчеты.Родитель <> Родитель Тогда
				Продолжить;
			КонецЕсли;

			Если ВыборкаОтчеты.ИсточникОтчета <> Источник Тогда
				Продолжить;
			КонецЕсли;

			Возврат ВыборкаОтчеты.Ссылка;

		КонецЦикла;

	КонецЕсли;

	Возврат Неопределено;

КонецФункции

Процедура ПредупредитьПользователя(ТекстПредупреждения)
    	
	#Если ВнешнееСоединение Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ТекстПредупреждения);
	#ИначеЕсли Сервер Тогда
		ОбщегоНазначенияБККлиентСервер.СообщитьОбОшибке(ТекстПредупреждения);
	#КонецЕсли
	
КонецПроцедуры

Функция ПолучитьСписокОтчетов() Экспорт

	Перем ДеревоОтчетов;

	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000));

	ОписаниеТиповЧисло  = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1));

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);

	// Дерево значений содержит иерархию элементов справочника РегламентированныеОтчеты.
	// В колонках дерева значений отображается следующая информация:
	//   - наименование отчета;
	//   - описание отчета;
	//   - место нахождения отчета;
	//   - метка выбора отчета.
	ДеревоОтчетов = Новый ДеревоЗначений;
	ДеревоОтчетов.Колонки.Добавить( "Наименование", ОписаниеТиповСтрока );
	ДеревоОтчетов.Колонки.Добавить( "Описание",     ОписаниеТиповСтрока );
	ДеревоОтчетов.Колонки.Добавить( "Источник",     ОписаниеТиповСтрока );
	ДеревоОтчетов.Колонки.Добавить( "ЭтоГруппа",    ОписаниеТиповБулево );
	ДеревоОтчетов.Колонки.Добавить( "МеткаВыбора",  ОписаниеТиповЧисло  );
	ДеревоОтчетов.Колонки.Добавить( "Периоды",  	ОписаниеТиповСтрока );

	// Шаблон списка отчетов в макете имеет следующую структуру:
	//   Каждая именованная область макета содержит элементы одной группы.
	//   При отсутствии имени группы в первой колонке первой строки области
	//   элементы, содержащиеся в этой области, принимаются за элементы корневого
	//   уровня (0-уровня). Элементы создаются в том же порядке, в котором они
	//   перечислены в макете.
	
	//СписокРеглОтчетовИспользуемыхВТекущейКонфигурации = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСписокРегламентированныхОтчетов();
	
	// Получим макет со списком отчетов.
	МакетСписокОтчетов = ЭтотОбъект.ПолучитьМакет("СписокОтчетов");

	Для Инд = 0 По МакетСписокОтчетов.Области.Количество() - 1 Цикл

		ТекОбласть = МакетСписокОтчетов.Области[Инд];
		ИмяОбласти = ТекОбласть.Имя;

		// наименование группы определяется по первой колонке макета
		ИмяГруппы = СокрЛП(МакетСписокОтчетов.Область(ТекОбласть.Верх, 1).Текст);

		Если Не ПустаяСтрока(ИмяГруппы) Тогда

			СтрокаУровня1 = ДеревоОтчетов.Строки.Добавить();
			СтрокаУровня1.Наименование = ИмяГруппы;
			СтрокаУровня1.ЭтоГруппа    = Истина;
			СтрокаУровня1.МеткаВыбора  = 1;

			Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
				// перебираем элементы второго уровня

				// наименование отчета определяется по второй колонке макета
				Наименование = СокрЛП(МакетСписокОтчетов.Область(Ном, 2).Текст);

				Если ПустаяСтрока(Наименование) Тогда
					// пустые строки пропускаем
					Продолжить;
				КонецЕсли;

				// описание отчета  определяется по третьей колонке макета
				Описание     = СокрЛП(МакетСписокОтчетов.Область(Ном, 3).Текст);
				// место нахождения отчета  определяется по четвертой колонке макета
				Источник     = СокрЛП(МакетСписокОтчетов.Область(Ном, 4).Текст);
				
				Периоды		 = СокрЛП(МакетСписокОтчетов.Область(Ном, 5).Текст);
										
				СтрокаУровня2 = СтрокаУровня1.Строки.Добавить();
				СтрокаУровня2.Наименование = Наименование;
				СтрокаУровня2.Описание     = Описание;
				СтрокаУровня2.Источник     = Источник;
				СтрокаУровня2.ЭтоГруппа    = Ложь;
				СтрокаУровня2.МеткаВыбора  = 1;
				СтрокаУровня2.Периоды	   = Периоды;

			КонецЦикла;
			
			Если СтрокаУровня1.Строки.Количество() = 0 Тогда
				ДеревоОтчетов.Строки.Удалить(СтрокаУровня1);
			КонецЕсли;
			
		Иначе
			// для элемента корневого (0-уровня)
			Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
				// перебираем элементы второго уровня

				// наименование отчета определяется по второй колонке макета
				Наименование = СокрЛП(МакетСписокОтчетов.Область(Ном, 2).Текст);

				Если ПустаяСтрока(Наименование) Тогда
					// пустые строки пропускаем
					Продолжить;
				КонецЕсли;

				// описание отчета  определяется по третьей колонке макета
				Описание      = СокрЛП(МакетСписокОтчетов.Область(Ном, 3).Текст);
				// место нахождения отчета  определяется по четвертой колонке макета
				Источник      = СокрЛП(МакетСписокОтчетов.Область(Ном, 4).Текст);

				Периоды		 = СокрЛП(МакетСписокОтчетов.Область(Ном, 5).Текст);
				
								
				СтрокаУровня1 = ДеревоОтчетов.Строки.Добавить();
				СтрокаУровня1.Наименование = Наименование;
				СтрокаУровня1.Описание     = Описание;
				СтрокаУровня1.Источник     = Источник;
				СтрокаУровня1.ЭтоГруппа    = Ложь;
				СтрокаУровня1.МеткаВыбора  = 1;
				СтрокаУровня1.Периоды	   = Периоды;

			КонецЦикла;
			
		КонецЕсли;

	КонецЦикла;
	
	Возврат ДеревоОтчетов;
	
КонецФункции

Процедура ЗаполнитьСписокОтчетов(ДеревоОтчетов) Экспорт

	Перем НайденнаяГруппа;
	Перем НайденныйЭлемент;
	
	РегламОтчеты = Справочники.РегламентированныеОтчеты;
	
	// Открываем транзакцию
	НачатьТранзакцию();
	
	Для Каждого СтрокаУровня1 Из ДеревоОтчетов.Строки Цикл
		
		ИмяОтчета = СокрЛП(СтрокаУровня1.Наименование);
		Описание  = СокрЛП(СтрокаУровня1.Описание);
		Источник  = СокрЛП(СтрокаУровня1.Источник);
		ЭтоГруппа = СтрокаУровня1.ЭтоГруппа;
		Метка     = СтрокаУровня1.МеткаВыбора;
		Периоды   = СокрЛП(СтрокаУровня1.Периоды);
		
		Если Метка = 0 Тогда
			// пропускаем не помеченные отчеты
			Продолжить;
		КонецЕсли;
		
		Если ЭтоГруппа Тогда
			
			НайденнаяГруппа = ПоискЭлементаПоРеквизитам(ИмяОтчета, "", Истина);
			Родитель        = НайденнаяГруппа;
			
			Если НайденнаяГруппа = Неопределено Тогда
				
				// новая группа элементов справочника
				НоваяГруппа              = РегламОтчеты.СоздатьГруппу();
				НоваяГруппа.Наименование = ИмяОтчета;
				//НоваяГруппа.УстановитьНовыйКод();
				//НоваяГруппа.ГенерироватьНовыйКод();
				
				Попытка
					НоваяГруппа.Записать();
				Исключение
					ПредупредитьПользователя(НСтр("ru = 'Не удалось записать элемент справочника'") + ":
					|" + ОписаниеОшибки());
					
					ОтменитьТранзакцию();
					Возврат;
				КонецПопытки;
				
				Родитель = НоваяГруппа.Ссылка;
				
			Иначе
				
				ГруппаОбъект = НайденнаяГруппа.ПолучитьОбъект();
				ГруппаОбъект.Описание = Описание;
				Попытка
					ГруппаОбъект.Записать();
				Исключение
					ПредупредитьПользователя(НСтр("ru = 'Не удалось записать элемент справочника'") + ":
					|" + ОписаниеОшибки());
					
					ОтменитьТранзакцию();
					Возврат;
				КонецПопытки;
				
			КонецЕсли;
			
			Если СтрокаУровня1.Строки.Количество() > 0 Тогда
				Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
					
					ИмяОтчета = СокрЛП(СтрокаУровня2.Наименование);
					Описание  = СокрЛП(СтрокаУровня2.Описание);
					Источник  = СокрЛП(СтрокаУровня2.Источник);
					ЭтоГруппа = СтрокаУровня2.ЭтоГруппа;
					Метка     = СтрокаУровня2.МеткаВыбора;
					Периоды   = СокрЛП(СтрокаУровня2.Периоды);
					
					Если Метка = 0 Тогда
						// пропускаем не помеченные отчеты
						Продолжить;
					КонецЕсли;
					
					НайденныйЭлемент = ПоискЭлементаПоРеквизитам(ИмяОтчета, Источник,, Родитель);
					
					Если НайденныйЭлемент = Неопределено Тогда
						
						// создаем новый элемент справочника
						НовыйЭлемент                        = РегламОтчеты.СоздатьЭлемент();
						НовыйЭлемент.Родитель               = Родитель;
						НовыйЭлемент.Наименование           = ИмяОтчета;
						НовыйЭлемент.Описание               = Описание;
						НовыйЭлемент.ИсточникОтчета         = Источник;
						//НовыйЭлемент.Периоды				= Новый ХранилищеЗначения(РазложитьСтрокуПериодов(Периоды));
						//НовыйЭлемент.УстановитьНовыйКод(Лев(Родитель.Код, 3));
						//НовыйЭлемент.ГенерироватьНовыйКод();
						
						Попытка
							НовыйЭлемент.Записать();
						Исключение
							ПредупредитьПользователя(НСтр("ru = 'Не удалось записать элемент справочника'") + ":
							|" + ОписаниеОшибки());
							
							ОтменитьТранзакцию();
							Возврат;
						КонецПопытки;
						
					Иначе
						
						// обновляем реквизиты найденного элемента
						ТекЭлемент = НайденныйЭлемент.ПолучитьОбъект();
						ТекЭлемент.Наименование = ИмяОтчета;
						ТекЭлемент.Описание     = Описание;
						//ТекЭлемент.Периоды		= Новый ХранилищеЗначения(РазложитьСтрокуПериодов(Периоды));
						
						Попытка
							ТекЭлемент.Записать();
						Исключение
							ПредупредитьПользователя(НСтр("ru = 'Не удалось записать элемент справочника'") + ":
							|" + ОписаниеОшибки());
							
							ОтменитьТранзакцию();
							Возврат;
						КонецПопытки;
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			
			НайденныйЭлемент = ПоискЭлементаПоРеквизитам(ИмяОтчета, Источник,,РегламОтчеты.ПустаяСсылка());
			
			Если НайденныйЭлемент = Неопределено Тогда
				
				// создаем новый элемент справочника
				НовыйЭлемент                        = РегламОтчеты.СоздатьЭлемент();
				НовыйЭлемент.Наименование           = ИмяОтчета;
				НовыйЭлемент.Описание               = Описание;
				НовыйЭлемент.ИсточникОтчета         = Источник;
				//НовыйЭлемент.Периоды				= Новый ХранилищеЗначения(РазложитьСтрокуПериодов(Периоды));
				//НовыйЭлемент.УстановитьНовыйКод(Лев(Родитель.Код, 3));
				//НовыйЭлемент.ГенерироватьНовыйКод();
				
				Попытка
					НовыйЭлемент.Записать();
				Исключение
					ПредупредитьПользователя(НСтр("ru = 'Не удалось записать элемент справочника'") + ":
					|" + ОписаниеОшибки());
					
					ОтменитьТранзакцию();
					Возврат;
				КонецПопытки;
				
			Иначе
				
				// обновляем реквизиты найденного элемента
				ТекЭлемент = НайденныйЭлемент.ПолучитьОбъект();
				ТекЭлемент.Наименование = ИмяОтчета;
				ТекЭлемент.Описание     = Описание;
				//ТекЭлемент.Периоды		= Новый ХранилищеЗначения(РазложитьСтрокуПериодов(Периоды));
				
				Попытка
					ТекЭлемент.Записать();
				Исключение
					ПредупредитьПользователя(НСтр("ru = 'Не удалось записать элемент справочника'") + ":
					|" + ОписаниеОшибки());
					
					ОтменитьТранзакцию();
					Возврат;
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Завершаем транзакцию
	ЗафиксироватьТранзакцию();
		
КонецПроцедуры

Процедура УстановитьСнятьПометкуНаУдалениеИСкрытьВосстановитьОтчеты(ДеревоОтчетов) Экспорт
			
	РеглОтчеты = Справочники.РегламентированныеОтчеты.Выбрать();
		
	Пока РеглОтчеты.Следующий() Цикл
		
		Если РеглОтчеты.ЭтоГруппа Тогда
			
			РезультатПоиска = ДеревоОтчетов.Строки.Найти(РеглОтчеты.Наименование, "Наименование", Истина);
			
			Если РезультатПоиска = Неопределено	ИЛИ НЕ ЗначениеЗаполнено(РеглОтчеты.Наименование) Тогда
				
				Реквизиты = Новый Структура;
				Реквизиты.Вставить("ПометкаУдаления", Истина);
				
				ИзменитьРеквизитыОтчета(РеглОтчеты.ПолучитьОбъект(), Реквизиты, Истина);
				
			ИначеЕсли РеглОтчеты.ПометкаУдаления Тогда
				
				Реквизиты = Новый Структура;
				Реквизиты.Вставить("ПометкаУдаления", Ложь);
				
				ИзменитьРеквизитыОтчета(РеглОтчеты.ПолучитьОбъект(), Реквизиты, Истина);
				
			КонецЕсли;
			
		Иначе	
			
			РезультатПоиска = ДеревоОтчетов.Строки.Найти(РеглОтчеты.ИсточникОтчета, "Источник", Истина);
			
			//СкрытыеРегламентированныеОтчеты = РегистрыСведений.СкрытыеРегламентированныеОтчеты.СоздатьМенеджерЗаписи();
			//СкрытыеРегламентированныеОтчеты.РегламентированныйОтчет = РеглОтчеты.Ссылка;
			//СкрытыеРегламентированныеОтчеты.Прочитать();
									
			Если РезультатПоиска = Неопределено	ИЛИ НЕ ЗначениеЗаполнено(РеглОтчеты.ИсточникОтчета) Тогда
				
				Реквизиты = Новый Структура;
				Реквизиты.Вставить("СкрытьРеглОтчет", Истина);
				Реквизиты.Вставить("ПометкаУдаления", Истина);
				
				ИзменитьРеквизитыОтчета(РеглОтчеты.ПолучитьОбъект(), Реквизиты, Ложь);
				
			ИначеЕсли РеглОтчеты.ПометкаУдаления И РеглОтчеты.НеПоказыватьВСписке Тогда
				
				Реквизиты = Новый Структура;
				Реквизиты.Вставить("СкрытьРеглОтчет", Ложь);
				Реквизиты.Вставить("ПометкаУдаления", Ложь);
				
				ИзменитьРеквизитыОтчета(РеглОтчеты.ПолучитьОбъект(), Реквизиты, Ложь);
				
			КонецЕсли;
		
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры

Процедура ИзменитьРеквизитыОтчета(Отчет, Реквизиты, ЭтоГруппа)
	
	// Открываем транзакцию.
	НачатьТранзакцию();
	
	Отчет.ПометкаУдаления = Реквизиты.ПометкаУдаления;
	
	Попытка
		
		Если НЕ ЭтоГруппа Тогда
			Отчет.НеПоказыватьВСписке = Реквизиты.СкрытьРеглОтчет;
			Отчет.Записать();
		КонецЕсли;		
						
	Исключение
		
		ПредупредитьПользователя(НСтр("ru = 'Не удалось изменить признак видимости отчета'") + ":
		|" + ОписаниеОшибки());
		
		ОтменитьТранзакцию();
		
		Возврат;
		
	КонецПопытки;
	
	// Завершаем транзакцию.
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

#КонецЕсли