#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура СформироватьОтчет(Знач ПараметрыОтчета, АдресХранилища) Экспорт
	
	Результат = Новый ТабличныйДокумент;
	
	СформироватьОтчетПроверки(Результат, ПараметрыОтчета);
	
	ПоместитьВоВременноеХранилище(Новый Структура("Результат", Результат), АдресХранилища);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура СформироватьОтчетПроверки(ТабличныйДокумент, ПараметрыОтчета)
	
	ЗначениеТаймера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	ВремТабДокумент   = Новый ТабличныйДокумент;
	ВидимостьОбластей = Новый Структура;
	
	ДеревоПроверок = ПараметрыОтчета.ДеревоПроверок;
	
	КолВыполняемыхПроверок = ДеревоПроверок.Строки.НайтиСтроки(Новый Структура("Включить, ЭтоГруппа, ЭтоПараметр", 1, Ложь, Ложь), Истина).Количество();
	КолВыполненныхПроверок = 0;
	КолПроверокСОшибками   = 0;
	
	Макет = Обработки.ЭкспрессПроверкаВеденияУчета.ПолучитьМакет("МакетОтчета");
	
	ОбластьШапкиМакета              = Макет.ПолучитьОбласть("Шапка");
	ОбластьЗаголовкаМакета          = Макет.ПолучитьОбласть("Заголовок");
	ОбластьРазделаУчетаМакета       = Макет.ПолучитьОбласть("РазделУчета");
	ОбластьПроверкиМакета           = Макет.ПолучитьОбласть("Проверка");
	ОбластьПредметаКонтроляМакета   = Макет.ПолучитьОбласть("ПредметКонтроля");
	ОбластьКомментарияМакета        = Макет.ПолучитьОбласть("КомментарийРезультата");
	ОбластьПричинОшибокМакета       = Макет.ПолучитьОбласть("ПричиныОшибок");
	ОбластьРекомендацийМакета       = Макет.ПолучитьОбласть("Рекомендации");
	ОбластьПодвалаПроверкиМакета    = Макет.ПолучитьОбласть("ПодвалПроверки");
	ОбластьРазделителяРазделаМакета = Макет.ПолучитьОбласть("РазделительРазделаУчета");
	
	ВысотаОбластей = ПараметрыОтчета.ВысотаОбластей;
	ВысотаОбластей.Вставить("Шапка"                  , ОбластьШапкиМакета.ВысотаТаблицы);
	ВысотаОбластей.Вставить("Заголовок"              , ОбластьЗаголовкаМакета.ВысотаТаблицы);
	ВысотаОбластей.Вставить("РазделУчета"            , ОбластьРазделаУчетаМакета.ВысотаТаблицы);
	ВысотаОбластей.Вставить("Проверка"               , ОбластьПроверкиМакета.ВысотаТаблицы);
	ВысотаОбластей.Вставить("ПредметКонтроля"        , ОбластьПредметаКонтроляМакета.ВысотаТаблицы);
	ВысотаОбластей.Вставить("КомментарийРезультата"  , ОбластьКомментарияМакета.ВысотаТаблицы);
	ВысотаОбластей.Вставить("ПричиныОшибок"          , ОбластьПричинОшибокМакета.ВысотаТаблицы);
	ВысотаОбластей.Вставить("Рекомендации"           , ОбластьРекомендацийМакета.ВысотаТаблицы);
	ВысотаОбластей.Вставить("ПодвалПроверки"         , ОбластьПодвалаПроверкиМакета.ВысотаТаблицы);
	ВысотаОбластей.Вставить("РазделительРазделаУчета", ОбластьРазделителяРазделаМакета.ВысотаТаблицы);
	
	ЦветФонаОшибок      = Новый Цвет(253, 236, 229); // светло-розовый
	ЦветТекстаОшибок    = Новый Цвет(83 , 23 , 22 ); // темно-коричневый
	ЦветФонаКолОшибок   = Новый Цвет(240, 54 , 0  ); // красный
	ЦветТекстаКолОшибок = Новый Цвет(255, 240, 96 ); // ярко-желтый
	ЦветФонаБезОшибок   = Новый Цвет(249, 255, 236); // светло-зеленый
	
	Если ПараметрыОтчета.ВыполнятьПроверки Тогда
		
		КонецДатаКон = КонецДня(ПараметрыОтчета.ДатаКон);
		
		// Очищаем результаты прошлых вычислений, которые делали проверки, чтобы они не влияли на текущий цикл
		ПараметрыОтчета.ИсходящиеДанные = Новый Структура;
		
	КонецЕсли;
	
	// Общая ширина колонок для вывода детальных отчетов
	ОбщаяШиринаКолонокОтчета = 0;
	НомПервойКолонкиДетальногоОтчета = 6;
	Для НомКолонки = НомПервойКолонкиДетальногоОтчета По Макет.ШиринаТаблицы Цикл
		ОбщаяШиринаКолонокОтчета = ОбщаяШиринаКолонокОтчета + Макет.Область( , НомКолонки, , НомКолонки).ШиринаКолонки;
	КонецЦикла;
	
	// Выводим шапку и заголовок отчета
	НазваниеОрганизации = ПараметрыОтчета.Организация.НаименованиеПолное;
	Если ПустаяСтрока(НазваниеОрганизации) Тогда
		НазваниеОрганизации = ПараметрыОтчета.Организация.Наименование;
	КонецЕсли;
	ОбластьШапкиМакета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	ОбластьШапкиМакета.Параметры.ПериодПроверки      = ПараметрыОтчета.ПериодПроверкиСтрокой;
	ТабличныйДокумент.Вывести(ОбластьШапкиМакета);
	
	// Шапку скрываем
	ОбластьШапки = ТабличныйДокумент.Область(1, , ТабличныйДокумент.ВысотаТаблицы, );
	ОбластьШапки.Видимость = Ложь;
	
	ТабличныйДокумент.Вывести(ОбластьЗаголовкаМакета);
	
	ОбластьНадписиОПроверках 	  = ТабличныйДокумент.Область(ТабличныйДокумент.ВысотаТаблицы - 1, 2, ТабличныйДокумент.ВысотаТаблицы - 1, 2);
	ОбластьНадписиОбОшибках  	  = ТабличныйДокумент.Область(ТабличныйДокумент.ВысотаТаблицы, 2, ТабличныйДокумент.ВысотаТаблицы, 2);
	ОбластьСтрокиНадписиОбОшибках = ТабличныйДокумент.Область(ТабличныйДокумент.ВысотаТаблицы, 2, ТабличныйДокумент.ВысотаТаблицы, ТабличныйДокумент.ШиринаТаблицы);
	
	ОбластьНадписиОПроверках.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Проведено проверок: 0 из %1'"), КолВыполняемыхПроверок);
	ОбластьСтрокиНадписиОбОшибках.ЦветФона = ЦветФонаБезОшибок;
	
	// При открытии формы в отчете показываются только 2 верхние строки с количеством проверок
	Если НЕ ПараметрыОтчета.ВыполнятьПроверки Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = ?(ПараметрыОтчета.ВыполнятьПроверки, НСтр("ru = 'Выполняется проверка...'"), НСтр("ru = 'Проверка не выполнялась'"));
	
	НомерТекПроверки = 0;
	
	Для каждого СтрокаРаздела Из ДеревоПроверок.Строки Цикл
		
		//Полностью отключенные разделы пропускаем
		Если СтрокаРаздела.Включить = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеТаймераСтрокаРаздела = ОценкаПроизводительности.НачатьЗамерВремени();
		
		// Отделяем наименование раздела от проверок предыдущих разделов
		ТабличныйДокумент.Вывести(ОбластьРазделителяРазделаМакета, 1);
		
		ЗаполнитьЗначенияСвойств(ОбластьРазделаУчетаМакета.Параметры, СтрокаРаздела);
		ОбластьРазделаУчетаМакета.Параметры.РезультатПроверки = РезультатПроверки;
		ТабличныйДокумент.Вывести(ОбластьРазделаУчетаМакета, 1);
		
		//Задаем области раздела документа-результата имя - идентификатор раздела
		ОбластьРазделаУчета = ТабличныйДокумент.Область(ТабличныйДокумент.ВысотаТаблицы - ВысотаОбластей.РазделУчета + 1, , ТабличныйДокумент.ВысотаТаблицы, );
		ОбластьРазделаУчета.Имя = СтрокаРаздела.Идентификатор;
		Если ПараметрыОтчета.ВыполнятьПроверки Тогда
			// Выделяем выполняющийся раздел курсивом
			Курсив = Истина;
			ОбластьРазделаУчета.Шрифт = Новый Шрифт(ОбластьРазделаУчета.Шрифт, , , Курсив);
			
			ПроведеныПроверкиВРазделе = Ложь;
			КолОшибокВРазделе         = 0;
		КонецЕсли;
		
		РаскрыватьПроверкиРаздела = Ложь;
		ТабличныйДокумент.НачатьГруппуСтрок(, РаскрыватьПроверкиРаздела); // Заголовки проверок
		
		// Отделяем наименование раздела от проверок
		ТабличныйДокумент.Вывести(ОбластьРазделителяРазделаМакета, 2);
		
		Для каждого СтрокаПроверки Из СтрокаРаздела.Строки Цикл
			
			Если СтрокаПроверки.Включить = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеТаймераСтрокаПроверки = ОценкаПроизводительности.НачатьЗамерВремени();
			
			НомерТекПроверки = НомерТекПроверки + 1;
			НомерПервойСтрокиПроверки = ТабличныйДокумент.ВысотаТаблицы + 1;
			// Выводим область заголовка проверки
			ЗаполнитьЗначенияСвойств(ОбластьПроверкиМакета.Параметры, СтрокаПроверки);
			ОбластьПроверкиМакета.Параметры.РезультатПроверки = РезультатПроверки;
			ТабличныйДокумент.Вывести(ОбластьПроверкиМакета, 2);
			ОбластьСостоянияПроверки = ТабличныйДокумент.Область(НомерПервойСтрокиПроверки, 11, НомерПервойСтрокиПроверки, 13);
			
			РаскрыватьДеталиПроверки = Ложь;
			ТабличныйДокумент.НачатьГруппуСтрок(, РаскрыватьДеталиПроверки); // Детали проверки
			
			НомерПервойСтрокиДеталейПроверки = ТабличныйДокумент.ВысотаТаблицы + 1;
			// Выводим область предмета контроля
			//ЗаполнитьЗначенияСвойств(ОбластьПредметаКонтроляМакета.Параметры, СтрокаПроверки);
			ПредметКонтроля = СтрокаПроверки.ПредметКонтроля;
			Для Каждого СтрокаПараметра Из СтрокаПроверки.Строки Цикл
				ПредметКонтроляПараметра = "";
				Попытка
					ПредметКонтроляПараметра = Вычислить(СтрЗаменить(СтрокаПараметра.ПредметКонтроля, "%Параметр%", "СтрокаПараметра.ЗначениеПараметра"));
				Исключение
				КонецПопытки;
				Если Не ПустаяСтрока(ПредметКонтроляПараметра) Тогда
					ПредметКонтроля = ПредметКонтроля + Символы.ПС + ПредметКонтроляПараметра;
				КонецЕсли;
			КонецЦикла;
			ОбластьПредметаКонтроляМакета.Параметры.ПредметКонтроля = ПредметКонтроля;
			ТабличныйДокумент.Вывести(ОбластьПредметаКонтроляМакета, 3);
			
			//Если СтрокаПроверки.Строки.Количество() <> 0 Тогда
			//	ОбластьПараметры = Макет.ПолучитьОбласть("ПараметрыЗаголовок");
			//	ТабличныйДокумент.Вывести(ОбластьПараметры, 3);
			//	Для Каждого СтрокаПараметра Из СтрокаПроверки.Строки Цикл
			//		ОбластьПараметры = Макет.ПолучитьОбласть("ПараметрыСтрока");
			//		Если ТипЗнч(СтрокаПараметра.ЗначениеПараметра) = Тип("Булево") Тогда
			//			ОбластьПараметры.Параметры.ЗначениеПараметра = Формат(СтрокаПараметра.ЗначениеПараметра, НСтр("ru = 'БЛ=Нет; БИ=Да'"));
			//		Иначе
			//			ОбластьПараметры.Параметры.ЗначениеПараметра = СтрокаПараметра.ЗначениеПараметра;
			//		КонецЕсли;
			//		ОбластьПараметры.Параметры.ПредметКонтроля = СтрокаПараметра.ПредметКонтроля;
			//		ТабличныйДокумент.Вывести(ОбластьПараметры, 3);
			//	КонецЦикла;
			//КонецЕсли;
			
			ОбластьПроверки        = ТабличныйДокумент.Область(НомерПервойСтрокиПроверки, , ТабличныйДокумент.ВысотаТаблицы, );
			ОбластьДеталейПроверки = ТабличныйДокумент.Область(НомерПервойСтрокиДеталейПроверки, , ТабличныйДокумент.ВысотаТаблицы, );
			
			Если ПараметрыОтчета.ВыполнятьПроверки Тогда
				
				ОбластьЗаголовкаПроверки = ТабличныйДокумент.Область(НомерПервойСтрокиПроверки, , НомерПервойСтрокиПроверки, );
				Курсив = Истина;
				ОбластьЗаголовкаПроверки.Шрифт = Новый Шрифт(ОбластьЗаголовкаПроверки.Шрифт, , , Курсив);
				
				Если РаскрыватьПроверкиРаздела Тогда
					ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(ОбластьПроверки.Низ, 1, ОбластьПроверки.Низ, 1);
				КонецЕсли; 
				
				// Выполняем проверку правила
				ПроверитьПравило(СтрокаПроверки, ПараметрыОтчета); 
				ПроверкаВыполнена = СтрокаПроверки.ПроверкаВыполнена;
				ОбнаруженыОшибки  = СтрокаПроверки.ОбнаруженыОшибки;
				
				Если ОбнаруженыОшибки Тогда
					КолПроверокСОшибками = КолПроверокСОшибками + 1;
					КолОшибокВРазделе    = КолОшибокВРазделе + 1;
				КонецЕсли;
				Если ПроверкаВыполнена Тогда
					КолВыполненныхПроверок = КолВыполненныхПроверок + 1;
					ПроведеныПроверкиВРазделе = Истина;
				КонецЕсли;
				
				Курсив = Ложь;
				ОбластьЗаголовкаПроверки.Шрифт = Новый Шрифт(ОбластьЗаголовкаПроверки.Шрифт, , , Курсив);
				
				Если ПроверкаВыполнена И ОбнаруженыОшибки Тогда
					
					// Выделяем проверку с ошибками цветом фона
					ОбластьОшибки = ТабличныйДокумент.Область(ОбластьЗаголовкаПроверки.Верх, 2, 
									ОбластьЗаголовкаПроверки.Низ, ОбластьСостоянияПроверки.Лево - 1);
					ОбластьОшибки.ЦветФона   = ЦветФонаОшибок;
					ОбластьОшибки.ЦветТекста = ЦветТекстаОшибок;
					ОбластьСостоянияПроверки.Текст      = НСтр("ru = 'Обнаружены ошибки'");
					ОбластьСостоянияПроверки.ЦветФона   = ЦветФонаКолОшибок;
					ОбластьСостоянияПроверки.ЦветТекста = ЦветТекстаКолОшибок;
					
					// Добавляем комментарий результата
					ОбластьКомментарияМакета.Параметры.КомментарийРезультата = СтрокаПроверки.КомментарийРезультата;
					ТабличныйДокумент.Вывести(ОбластьКомментарияМакета);
					ОбластьКомментария = ТабличныйДокумент.Область(ТабличныйДокумент.ВысотаТаблицы - ВысотаОбластей.КомментарийРезультата + 1, 2, 
										 ТабличныйДокумент.ВысотаТаблицы, ТабличныйДокумент.ШиринаТаблицы);
					ОбластьКомментария.ЦветФона = ЦветФонаОшибок;
					
					// Добавляем возможные причины ошибок 
					ОбластьПричинОшибокМакета.Параметры.ПричиныОшибок = СтрокаПроверки.ПричиныОшибокРезультата;
					ТабличныйДокумент.Вывести(ОбластьПричинОшибокМакета);
					
					// Добавляем рекомендации по устранению ошибок
					ОбластьРекомендацийМакета.Параметры.Рекомендации = СтрокаПроверки.РекомендацииРезультата;
					ТабличныйДокумент.Вывести(ОбластьРекомендацийМакета);
					
					// Добавляем детальный отчет об ошибках
					ВремТабДокумент = Новый ТабличныйДокумент;
					СформироватьДетальныйОтчет(СтрокаПроверки, ВремТабДокумент, ПараметрыОтчета);
					
					Если ВремТабДокумент.ВысотаТаблицы > 0 Тогда
						
						ТабличныйДокумент.НачатьГруппуСтрок( , Ложь);
						
						ОбластьДетальногоОтчета      = ВремТабДокумент.Область(1, 1, 
													   ВремТабДокумент.ВысотаТаблицы, ВремТабДокумент.ШиринаТаблицы);
													   
													   
						ОбластьДетальногоОтчетаТаблица = ВремТабДокумент.Область(1, 2, 
												  		 ВремТабДокумент.ВысотаТаблицы, ВремТабДокумент.ШиринаТаблицы);
														 
						ОбластьДетальногоОтчетаТаблица.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
						ОбластьДетальногоОтчетаТаблица.ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
						ОбластьДетальногоОтчетаТаблица.ГраницаСлева  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
						ОбластьДетальногоОтчетаТаблица.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
						
						НомПервойСтрокиНовогоФормата = ТабличныйДокумент.ВысотаТаблицы + 1;
						ОбластьНовогоФорматаСтрок    = ТабличныйДокумент.Область(НомПервойСтрокиНовогоФормата, , 
													   НомПервойСтрокиНовогоФормата + ВремТабДокумент.ВысотаТаблицы, );
						ОбластьНовогоФорматаСтрок.СоздатьФорматСтрок();
						ОбщаяШиринаКолонокДетальногоОтчета = 0;
						Для НомКолонки = 2 По ВремТабДокумент.ШиринаТаблицы Цикл
							ШиринаТекКолонки = ВремТабДокумент.Область(1, НомКолонки).ШиринаКолонки;
							ОбщаяШиринаКолонокДетальногоОтчета = ОбщаяШиринаКолонокДетальногоОтчета + ШиринаТекКолонки;
						КонецЦикла;
						
						КоэффИзмененияШирины = ?(ОбщаяШиринаКолонокДетальногоОтчета = 0, 1, ОбщаяШиринаКолонокОтчета / ОбщаяШиринаКолонокДетальногоОтчета);
						
						ИзменятьШиринуКолонок = КоэффИзмененияШирины <= 1.2;
						НоваяОбщаяШирина = 0;
						Для НомКолонки = 2 По ВремТабДокумент.ШиринаТаблицы - 1 Цикл
							ШиринаТекКолонки = ВремТабДокумент.Область(1, НомКолонки).ШиринаКолонки;
							Если ИзменятьШиринуКолонок Тогда
								НужнаяШирина = Окр(ШиринаТекКолонки * КоэффИзмененияШирины,0);
							Иначе
								НужнаяШирина = ШиринаТекКолонки;
							КонецЕсли;
							ТабличныйДокумент.Область(НомПервойСтрокиНовогоФормата, НомКолонки + 4).ШиринаКолонки = НужнаяШирина;
							НоваяОбщаяШирина = НоваяОбщаяШирина + НужнаяШирина;
						КонецЦикла;
						
						ПоследняяЯчейка = ТабличныйДокумент.Область(НомПервойСтрокиНовогоФормата, ВремТабДокумент.ШиринаТаблицы + 4);
						Если ИзменятьШиринуКолонок Тогда
							ПоследняяЯчейка.ШиринаКолонки = ОбщаяШиринаКолонокОтчета - НоваяОбщаяШирина;
						Иначе
							ШиринаПоследнейКолонки = ВремТабДокумент.Область(1, ВремТабДокумент.ШиринаТаблицы).ШиринаКолонки;
							ПоследняяЯчейка.ШиринаКолонки = ШиринаПоследнейКолонки;
						КонецЕсли;
						
						ОбластьЗаголовка = ТабличныйДокумент.Область(НомПервойСтрокиНовогоФормата, 6, НомПервойСтрокиНовогоФормата, 6);
						ОбластьЗаголовка.Текст = НСтр("ru = 'Детальный отчет об ошибках'");
						ОбластьЗаголовка.Шрифт = Новый Шрифт(ОбластьЗаголовка.Шрифт, , 8, Истина);
						
						ОбластьПриемник = ТабличныйДокумент.Область(НомПервойСтрокиНовогоФормата + 1, 5);
						
						ТабличныйДокумент.ВставитьОбласть(ОбластьДетальногоОтчета, ОбластьПриемник);
						
						ТабличныйДокумент.ЗакончитьГруппуСтрок();
					КонецЕсли;
					
				ИначеЕсли НЕ ПроверкаВыполнена Тогда
					
					ОбластьСостоянияПроверки.Текст      = НСтр("ru = 'Проверка не выполнена'");
					
					// Добавляем комментарий результата
					ОбластьКомментарияМакета.Параметры.КомментарийРезультата = СтрокаПроверки.КомментарийРезультата;
					ТабличныйДокумент.Вывести(ОбластьКомментарияМакета);
					
				Иначе // ПроверкаВыполнена И НЕ ОбнаруженыОшибки
					
					ОбластьСостоянияПроверки.Текст      = НСтр("ru = 'Ошибок не обнаружено'");
					
					// Добавляем комментарий результата
					ОбластьКомментарияМакета.Параметры.КомментарийРезультата = СтрокаПроверки.КомментарийРезультата;
					ТабличныйДокумент.Вывести(ОбластьКомментарияМакета);
					
				КонецЕсли;
				
				// Переопределяем область проверки и область деталей проверки - включаем добавленные строки
				ОбластьПроверки        = ТабличныйДокумент.Область(НомерПервойСтрокиПроверки, , ТабличныйДокумент.ВысотаТаблицы, );
				ОбластьДеталейПроверки = ТабличныйДокумент.Область(НомерПервойСтрокиДеталейПроверки, , ТабличныйДокумент.ВысотаТаблицы, );
				
			КонецЕсли;
			
			// Добавляем область - разделитель
			ТабличныйДокумент.Вывести(ОбластьПодвалаПроверкиМакета);
			
			ТабличныйДокумент.ЗакончитьГруппуСтрок(); // Строки деталей проверки
			
			ОбластьПроверки.Имя = СтрокаПроверки.Идентификатор;
			ОбластьДеталейПроверки.Имя = "Детали"+СтрокаПроверки.Идентификатор;
				
			Если ПараметрыОтчета.ВыполнятьПроверки Тогда
				Если РаскрыватьПроверкиРаздела Тогда
					ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(ТабличныйДокумент.ВысотаТаблицы, 1, ТабличныйДокумент.ВысотаТаблицы, 1);
				КонецЕсли;
				
				ОбластьНадписиОПроверках.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Проведено проверок: %1 из %2 '"), КолВыполненныхПроверок, КолВыполняемыхПроверок);
				ОбластьНадписиОбОшибках.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Обнаружено ошибок: %1'"), КолПроверокСОшибками);
				Если КолПроверокСОшибками > 0 Тогда
					ОбластьСтрокиНадписиОбОшибках.ЦветФона = ЦветФонаОшибок;
				Иначе
					ОбластьСтрокиНадписиОбОшибках.ЦветФона = ЦветФонаБезОшибок;
				КонецЕсли;
				
				НомерПоследнейСтрокиПроверки = ТабличныйДокумент.ВысотаТаблицы;
				ТабличныйДокумент.Область(НомерПервойСтрокиПроверки, ,НомерПоследнейСтрокиПроверки, ).Видимость = Ложь;
				
			КонецЕсли; 
			
			КлючеваяОперация = "Экспресс проверка ведения учета" + " - " + НРег(СтрокаРаздела.Наименование) + " - " + НРег(СтрокаПроверки.Наименование);
			ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ЗначениеТаймераСтрокаПроверки);
			
		КонецЦикла;
		
		ТабличныйДокумент.ЗакончитьГруппуСтрок(); // Строки проверок раздела
		
		Если ПараметрыОтчета.ВыполнятьПроверки Тогда
			
			СтрокаРаздела.ОбнаруженыОшибки = КолОшибокВРазделе > 0;
			
			Курсив = Ложь;
			ОбластьРазделаУчета.Шрифт = Новый Шрифт(ОбластьРазделаУчета.Шрифт, , , Курсив);
			
			ОбластьСостоянияРаздела = ТабличныйДокумент.Область(ОбластьРазделаУчета.Верх, 11, ОбластьРазделаУчета.Верх, 13);
			Если СтрокаРаздела.ОбнаруженыОшибки Тогда
				// Выделяем раздел с ошибками цветом
				ОбластьОшибки = ТабличныйДокумент.Область(ОбластьРазделаУчета.Верх, 2, ОбластьРазделаУчета.Низ, ОбластьСостоянияРаздела.Лево - 1);
				ОбластьОшибки.ЦветФона   = ЦветФонаОшибок;
				ОбластьОшибки.ЦветТекста = ЦветТекстаОшибок;
				ОбластьСостоянияРаздела.Текст  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Обнаружены ошибки (%1)'"), КолОшибокВРазделе);
				ОбластьСостоянияРаздела.ЦветФона   = ЦветФонаКолОшибок;
				ОбластьСостоянияРаздела.ЦветТекста = ЦветТекстаКолОшибок;
			ИначеЕсли ПроведеныПроверкиВРазделе Тогда
				ОбластьСостоянияРаздела.Текст = НСтр("ru = 'Ошибок не обнаружено'");
			Иначе
				ОбластьСостоянияРаздела.Текст = НСтр("ru = 'Проверка не выполнена'");
			КонецЕсли;
			
		КонецЕсли;
		
		КлючеваяОперация = "Экспресс проверка ведения учета" + " - " + НРег(СтрокаРаздела.Наименование);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ЗначениеТаймераСтрокаРаздела);
		
	КонецЦикла;
	
	КлючеваяОперация = "Обработка ""Экспресс проверка ведения учета""";
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ЗначениеТаймера);
	
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	ТабличныйДокумент.ФиксацияСверху = ВысотаОбластей.Шапка + ВысотаОбластей.Заголовок;
	ТабличныйДокумент.ПовторятьПриПечатиСтроки = ТабличныйДокумент.Область(ВысотаОбластей.Шапка + 1, , ВысотаОбластей.Шапка + ВысотаОбластей.Заголовок);
	ТабличныйДокумент.ОбластьПечати = ТабличныйДокумент.Область(1, 2, ТабличныйДокумент.ВысотаТаблицы, ТабличныйДокумент.ШиринаТаблицы);
	ТабличныйДокумент.ИмяПараметровПечати = "ЭкспрессПроверкаВеденияУчета";
	
	ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1, 1, 1);
	
КонецПроцедуры

// Универсальная процедура 
Процедура СформироватьДетальныйОтчет(СтрокаПравила, ТабДокумент, ПараметрыОтчета)
	
	ИдентификаторПравила = СтрокаПравила.Идентификатор;
	
	СохраненРезультатЗапросаПроверки = ПараметрыОтчета.ИсходящиеДанные.Свойство(ИдентификаторПравила+"РезультатЗапроса");
	СохраненаТаблицаОшибокПроверки   = ПараметрыОтчета.ИсходящиеДанные.Свойство(ИдентификаторПравила+"ТаблицаЗначений");
	СохраненИсточникДанныхПроверки	 = ПараметрыОтчета.ИсходящиеДанные.Свойство(ИдентификаторПравила+"ИсточникДанных");
	
	Если СохраненРезультатЗапросаПроверки Тогда
		ИсточникДанных = ПараметрыОтчета.ИсходящиеДанные[ИдентификаторПравила+"РезультатЗапроса"];
		Если ТипЗнч(ИсточникДанных) <> Тип("РезультатЗапроса") Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Неправильный тип значения %1 ""%2"".'"),
				ИдентификаторПравила,
				"РезультатЗапроса!");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	ИначеЕсли СохраненаТаблицаОшибокПроверки Тогда
		ИсточникДанных = ПараметрыОтчета.ИсходящиеДанные[ИдентификаторПравила+"ТаблицаЗначений"];
		Если ТипЗнч(ИсточникДанных) <> Тип("ТаблицаЗначений") Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Неправильный тип значения %1 ""%2"".'"),
				ИдентификаторПравила,
				"ТаблицаЗначений!");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;		
	ИначеЕсли СохраненИсточникДанныхПроверки Тогда
		ОписаниеИсточникаДанных = ПараметрыОтчета.ИсходящиеДанные[ИдентификаторПравила+"ИсточникДанных"];
		Если ТипЗнч(ОписаниеИсточникаДанных) <> Тип("ОписаниеИсточникаДанных") Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Неправильный тип значения %1 ""%2"".'"),
				ИдентификаторПравила,
				"ОписаниеИсточникаДанных!");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	Иначе	
		Возврат;
	КонецЕсли;
	
	Если НЕ СохраненИсточникДанныхПроверки Тогда 
		ОписаниеИсточникаДанных = Новый ОписаниеИсточникаДанных(ИсточникДанных);
	КонецЕсли;	
	
	ЕстьСтруктураЗаголовков    = ПараметрыОтчета.ИсходящиеДанные.Свойство(ИдентификаторПравила+"СтруктураЗаголовков");
	Если ЕстьСтруктураЗаголовков Тогда
		СтруктураЗаголовков = ПараметрыОтчета.ИсходящиеДанные[ИдентификаторПравила+"СтруктураЗаголовков"];
	Иначе
		СтруктураЗаголовков = Новый Структура;
	КонецЕсли;
	ЕстьСтруктураФорматаПолей = ПараметрыОтчета.ИсходящиеДанные.Свойство(ИдентификаторПравила+"СтруктураФорматаПолей");
	Если ЕстьСтруктураФорматаПолей Тогда
		СтруктураФорматаПолей = ПараметрыОтчета.ИсходящиеДанные[ИдентификаторПравила+"СтруктураФорматаПолей"];
	Иначе
		СтруктураФорматаПолей = Новый Структура;
	КонецЕсли;
	ЕстьСтруктураШириныКолонок = ПараметрыОтчета.ИсходящиеДанные.Свойство(ИдентификаторПравила+"СтруктураШириныКолонок");
	Если ЕстьСтруктураШириныКолонок Тогда
		СтруктураШириныКолонок = ПараметрыОтчета.ИсходящиеДанные[ИдентификаторПравила+"СтруктураШириныКолонок"];
	Иначе
		СтруктураШириныКолонок = Новый Структура;
	КонецЕсли;
	ЕстьСтруктураРасшифровки  = ПараметрыОтчета.ИсходящиеДанные.Свойство(ИдентификаторПравила+"СтруктураРасшифровки");
	Если ЕстьСтруктураРасшифровки Тогда
		СтруктураРасшифровки  = ПараметрыОтчета.ИсходящиеДанные[ИдентификаторПравила+"СтруктураРасшифровки"];
	Иначе
		СтруктураРасшифровки  = Новый Структура;
	КонецЕсли;
		
	ЕстьМакет = ПараметрыОтчета.ИсходящиеДанные.Свойство(ИдентификаторПравила+"МакетОформления");	
	Если ЕстьМакет Тогда
		МакетОформления = ПараметрыОтчета.ИсходящиеДанные[ИдентификаторПравила+"МакетОформления"];	
	КонецЕсли;
	
	ЕстьМакетУО = ПараметрыОтчета.ИсходящиеДанные.Свойство(ИдентификаторПравила+"МакетОформленияУО");
	Если ЕстьМакетУО Тогда
		МакетОформленияУО = ПараметрыОтчета.ИсходящиеДанные[ИдентификаторПравила+"МакетОформленияУО"];
	КонецЕсли;
	
	Если ТипЗнч(ТабДокумент) <> Тип("ТабличныйДокумент") Тогда
		ТабДокумент = Новый ТабличныйДокумент;
	КонецЕсли;
	
	Построитель = Новый ПостроительОтчета;
	
	Построитель.ИсточникДанных = ОписаниеИсточникаДанных;
	Построитель.ЗаполнитьНастройки();
	Построитель.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Вместе;
	
	Построитель.Выполнить();
		
	Построитель.ВыводитьЗаголовокОтчета = Ложь;
	Построитель.ВыводитьПодвалТаблицы   = Ложь;
	Построитель.ВыводитьПодвалОтчета    = Ложь;
	
	ЦветФонаОшибок       = Новый Цвет(253, 236, 229); // светло-розовый

	Если ЕстьМакет Тогда
		Макет = ПолучитьМакет(МакетОформления);	
	ИначеЕсли ЕстьМакетУО Тогда
		МакетУО = МакетОформленияУО; 
	Иначе	
		Построитель.ОформитьМакет();		
		
		Макет = Построитель.Макет;
				
		ШапкаТаблицыМакета = Макет.Область("ШапкаТаблицы");
		Для НомСтроки = ШапкаТаблицыМакета.Верх По ШапкаТаблицыМакета.Низ Цикл
			Для НомКолонки = 2 По Макет.ШиринаТаблицы Цикл
				ТекОбласть = Макет.Область(НомСтроки, НомКолонки, НомСтроки, НомКолонки);
				ТекОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				ТекОбласть.Шрифт = Новый Шрифт(ТекОбласть.Шрифт, ,8);
				ТекОбласть.ЦветРамки = WebЦвета.Серый;
				ТекОбласть.ЦветФона  = ЦветФонаОшибок;
				
				ТекЗаголовок = ТекОбласть.Текст;
				Если СтруктураШириныКолонок.Свойство(ТекЗаголовок) Тогда
					ТекОбласть.ШиринаКолонки = СтруктураШириныКолонок[ТекЗаголовок];
				КонецЕсли;
				
				Если СтруктураЗаголовков.Свойство(ТекЗаголовок) Тогда
					ТекОбласть.Текст = СтруктураЗаголовков[ТекЗаголовок];
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
		ДеталиМакета = Макет.Область("Детали");
		ШапкаТаблицыМакета = Макет.Область("ШапкаТаблицы");
		Для НомСтроки = ДеталиМакета.Верх По ДеталиМакета.Низ Цикл
			Для НомКолонки = 2 По Макет.ШиринаТаблицы Цикл
				ТекОбласть = Макет.Область(НомСтроки, НомКолонки, НомСтроки, НомКолонки);
				ТекОбласть.ЦветРамки = WebЦвета.Серый;
				ТекИмяПараметра = ТекОбласть.Параметр;
				
				Если ТекИмяПараметра = Неопределено Тогда
					Продолжить;
				КонецЕсли;	
				
				Если СтруктураФорматаПолей.Свойство(ТекИмяПараметра) Тогда
					ТекОбласть.Формат = СтруктураФорматаПолей[ТекИмяПараметра];
				КонецЕсли;
				
				Если СтруктураРасшифровки.Свойство(ТекИмяПараметра) Тогда
					ТекОбласть.ПараметрРасшифровки = СтруктураРасшифровки[ТекИмяПараметра];
				КонецЕсли;   			
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЕстьМакетУО Тогда
		
		Построитель.Макет = МакетУО;
		
		Если ИдентификаторПравила = "СвоевременнаяВыпискаЭСФ" Тогда
			
			Построитель.УсловноеОформление.Очистить();
			НастройкаЦветаФона = Построитель.УсловноеОформление.Добавить("Детали");     
			НастройкаЦветаФона.Заголовок = "ОсталосьДней";       
			НастройкаЦветаФона.Использование = Истина;  
			
			ЭлементУсловия = НастройкаЦветаФона.Отбор.Добавить("ОсталосьДней");  
			ЗначениеОтбора = 1;
			ЭлементУсловия.Значение = ЗначениеОтбора; 
			ЭлементУсловия.ВидСравнения = ВидСравнения.МеньшеИлиРавно;
			ЭлементУсловия.Использование = Истина;
			
			НастройкаЦветаФона.Оформление.ЦветТекста.Значение = WebЦвета.Красный;   
			НастройкаЦветаФона.Оформление.ЦветТекста.Использование = Истина; 
			
		ИначеЕсли ИдентификаторПравила = "НаличиеЗацикливанияПроизводства" Тогда	
				
			Смещать = ТипСмещенияТабличногоДокумента.ПоВертикали;
			Область = МакетУО.Область("ОдинаковыеНоменклатурныеГруппыПРНУ");
			МакетУО.УдалитьОбласть(Область, Смещать);
			
		КонецЕсли;		
		
	Иначе	
		Построитель.Макет = Макет;   
	КонецЕсли;  

	Построитель.Вывести(ТабДокумент);
	
КонецПроцедуры

// Учетная политика

Процедура ПроверитьПравилоНаличиеУчПБухУчет(СтрокаПравила, ПараметрыОтчета)
	
	Перем Отказ;
	
	УчетнаяПолитикаБухУчет = УчетнаяПолитикаСервер.Существует(ПараметрыОтчета.Организация, ПараметрыОтчета.ДатаНач, "БУ",Истина);
	ПараметрыОтчета.ИсходящиеДанные.Вставить("УчетнаяПолитикаБухУчет", УчетнаяПолитикаБухУчет);
	НетУчетнойПолитики = НЕ УчетнаяПолитикаБухУчет;
	
	СтрокаПравила.ОбнаруженыОшибки  = НетУчетнойПолитики;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
КонецПроцедуры

Процедура ПроверитьПравилоНаличиеУчПНалУчет(СтрокаПравила, ПараметрыОтчета)
	
	Перем Отказ;
	
	УчетнаяПолитикаНалУчет =  УчетнаяПолитикаСервер.Существует(ПараметрыОтчета.Организация, ПараметрыОтчета.ДатаНач, "НУ", Истина);
	ПараметрыОтчета.ИсходящиеДанные.Вставить("УчетнаяПолитикаНалУчет", УчетнаяПолитикаНалУчет);
	НетУчетнойПолитики = НЕ УчетнаяПолитикаНалУчет;
	
	СтрокаПравила.ОбнаруженыОшибки  = НетУчетнойПолитики;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
КонецПроцедуры
        
Процедура ПроверитьПравилоНаличиеУчП_Перс(СтрокаПравила, ПараметрыОтчета)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация,
	|	УчетнаяПолитикаПоПерсоналу.ВестиУчетПоГоловнойОрганизации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналу
	|		ПО Организации.Ссылка = УчетнаяПолитикаПоПерсоналу.Организация
	|ГДЕ
	|	Организации.Ссылка = &Организация");
	
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Результат = Запрос.Выполнить();
	НетУчетнойПолитикиПоПерсоналу = Результат.Пустой();
	
	Если НетУчетнойПолитикиПоПерсоналу Тогда
		ПараметрыОтчета.ИсходящиеДанные.Вставить("УчетнаяПолитикаПоПерсоналу", Неопределено);
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		УчетнаяПолитикаПоПерсоналу = Новый Структура;
		УчетнаяПолитикаПоПерсоналу.Вставить("ВестиУчетПоГоловнойОрганизации", Выборка.ВестиУчетПоГоловнойОрганизации);
		
		ПараметрыОтчета.ИсходящиеДанные.Вставить("УчетнаяПолитикаПоПерсоналу", УчетнаяПолитикаПоПерсоналу);
	КонецЕсли;
	
	СтрокаПравила.ОбнаруженыОшибки  = НетУчетнойПолитикиПоПерсоналу;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
КонецПроцедуры

// Касса

Процедура ПроверитьПравилоНепроведенныеПКО_РКО(СтрокаПравила, ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПриходныйКассовыйОрдер.Ссылка КАК Документ,
	|	ПриходныйКассовыйОрдер.Дата КАК Дата,
	|	ПриходныйКассовыйОрдер.Номер,
	|	ПриходныйКассовыйОрдер.ВидОперации,
	|	ПриходныйКассовыйОрдер.СуммаДокумента,
	|	ПриходныйКассовыйОрдер.Ответственный
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|ГДЕ
	|	ПриходныйКассовыйОрдер.Проведен = ЛОЖЬ
	|	И ПриходныйКассовыйОрдер.ПометкаУдаления = ЛОЖЬ
	|	И ПриходныйКассовыйОрдер.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ПриходныйКассовыйОрдер.Организация = &Организация
	|	И ПриходныйКассовыйОрдер.СтруктурноеПодразделениеОтправитель = &СтруктурноеПодразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	РасходныйКассовыйОрдер.Ссылка,
	|	РасходныйКассовыйОрдер.Дата,
	|	РасходныйКассовыйОрдер.Номер,
	|	РасходныйКассовыйОрдер.ВидОперации,
	|	РасходныйКассовыйОрдер.СуммаДокумента,
	|	РасходныйКассовыйОрдер.Ответственный
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Проведен = ЛОЖЬ
	|	И РасходныйКассовыйОрдер.ПометкаУдаления = ЛОЖЬ
	|	И РасходныйКассовыйОрдер.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И РасходныйКассовыйОрдер.Организация = &Организация
	|	И РасходныйКассовыйОрдер.СтруктурноеПодразделениеОтправитель = &СтруктурноеПодразделение
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Документ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаНач", 				  ПараметрыОтчета.ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", 				  КонецДня(ПараметрыОтчета.ДатаКон));
	Запрос.УстановитьПараметр("Организация", 			  ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", ПараметрыОтчета.СтруктурноеПодразделение);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ПараметрыОтчета.ИсходящиеДанные.Вставить("НепроведенныеПКО_РКОРезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ВидОперации", НСтр("ru = 'Вид операции'"));
		СтруктураЗаголовков.Вставить("СуммаДокумента", НСтр("ru = 'Сумма документа'"));
		ПараметрыОтчета.ИсходящиеДанные.Вставить("НепроведенныеПКО_РКОСтруктураЗаголовков", СтруктураЗаголовков);
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("Документ" , 40);
		СтруктураШириныКолонок.Вставить("Дата", 20);
		СтруктураШириныКолонок.Вставить("Номер"  , 25);
		СтруктураШириныКолонок.Вставить("ВидОперации" , 25);
		СтруктураШириныКолонок.Вставить("СуммаДокумента"   , 25);
		СтруктураШириныКолонок.Вставить("Ответственный"   , 25);
		ПараметрыОтчета.ИсходящиеДанные.Вставить("НепроведенныеПКО_РКОСтруктураШириныКолонок", СтруктураШириныКолонок);
	   	СтруктураРасшифровки = Новый Структура;
	   	СтруктураРасшифровки.Вставить("Документ", "Документ");
    	ПараметрыОтчета.ИсходящиеДанные.Вставить("НепроведенныеПКО_РКОСтруктураРасшифровки", СтруктураРасшифровки);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоМинусыПоКассе(СтрокаПравила, ПараметрыОтчета)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТиповойОстаткиИОбороты.Период КАК Период,
	               |	ТиповойОстаткиИОбороты.Субконто1 КАК Касса,
	               |	ТиповойОстаткиИОбороты.СуммаКонечныйОстатокДт КАК Остаток
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.ОстаткиИОбороты(&ДатаНач, &ДатаКон, День, ДвиженияИГраницыПериода, Счет В ИЕРАРХИИ (&СчетКассы), , Организация = &Организация И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК ТиповойОстаткиИОбороты
	               |ГДЕ
	               |	ТиповойОстаткиИОбороты.СуммаКонечныйОстатокДт < 0
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период,
	               |	Касса";
	
	Запрос.УстановитьПараметр("ДатаНач", 				  ПараметрыОтчета.ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", 				  КонецДня(ПараметрыОтчета.ДатаКон));
	Запрос.УстановитьПараметр("СчетКассы", 				  ПланыСчетов.Типовой.ДенежныеСредстваВКассе);
	Запрос.УстановитьПараметр("Организация", 			  ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", ПараметрыОтчета.СтруктурноеПодразделение);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ПараметрыОтчета.ИсходящиеДанные.Вставить("МинусыПоКассеРезультатЗапроса", Результат);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоЛимитРасчетовСЮрЛицами(СтрокаПравила, ПараметрыОтчета)
	
	СтрокаПараметра = СтрокаПравила.Строки.Найти("ИсключатьФизЛицИзЛимитаРасчетов", "Идентификатор");
	Если СтрокаПараметра = Неопределено Или Не СтрокаПараметра.ЗначениеПараметра Тогда
		ДатаНачЛимитаДляИП = НачалоДня(Дата(2018, 01, 01));
	Иначе
		ДатаНачЛимитаДляИП = НачалоДня(Дата(2999, 01, 01));
	КонецЕсли;

	ОрганизацияЯвляетсяФизЛицом = ПараметрыОтчета.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
	ОрганизацияПлательщикНДС    = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНДС(ПараметрыОтчета.Организация, КонецДня(ПараметрыОтчета.ДатаКон));
	
	Если ОрганизацияЯвляетсяФизЛицом И КонецДня(ПараметрыОтчета.ДатаКон) < ДатаНачЛимитаДляИП Тогда
	
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Истина;
		СтрокаПравила.КомментарийРезультата = НСтр("ru = 'Проверяемая организация является физическим лицом, поэтому лимит расчетов между юридическими лицами на нее не распространяется'");
		Возврат;
	
	КонецЕсли;

	Если ОрганизацияЯвляетсяФизЛицом И КонецДня(ПараметрыОтчета.ДатаКон) >= ДатаНачЛимитаДляИП И НЕ ОрганизацияПлательщикНДС Тогда
	
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Истина;
		СтрокаПравила.КомментарийРезультата = НСтр("ru = 'Проверяемая организация является физическим лицом и не плательщиком НДС, поэтому лимит расчетов между юридическими лицами и индивидуальными предпринимателями на нее не распространяется'");
		Возврат;
	
	КонецЕсли;
	
	ДатаИзмененияЛимитаРасчетов = НачалоДня(Дата(2012, 09, 24));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач", ПараметрыОтчета.ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ПараметрыОтчета.ДатаКон));
	Запрос.УстановитьПараметр("ДатаНачЛимитаДляИП", МАКС(ПараметрыОтчета.ДатаНач, ДатаНачЛимитаДляИП));
	
	РазмерМРП = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	            |	РасчетныеПоказатели.Период,
	            |	ЕСТЬNULL(РасчетныеПоказатели.РазмерМРП, 0) * 1000 КАК Предел1000,
	            |	ЕСТЬNULL(РасчетныеПоказатели.РазмерМРП, 0) * 4000 КАК Предел4000
	            |ИЗ
	            |	РегистрСведений.РегламентированныеРасчетныеПоказатели.СрезПоследних(&ДатаНач, ) КАК РасчетныеПоказатели
	            |ГДЕ
	            |	ЕСТЬNULL(РасчетныеПоказатели.РазмерМРП, 0) <> 0
	            |
	            |ОБЪЕДИНИТЬ
	            |
	            |ВЫБРАТЬ
	            |	РасчетныеПоказатели.Период,
	            |	ЕСТЬNULL(РасчетныеПоказатели.РазмерМРП, 0) * 1000,
	            |	ЕСТЬNULL(РасчетныеПоказатели.РазмерМРП, 0) * 4000
	            |ИЗ
	            |	РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	            |ГДЕ
	            |	РасчетныеПоказатели.Период МЕЖДУ &ДатаНач И &ДатаКон
	            |	И ЕСТЬNULL(РасчетныеПоказатели.РазмерМРП, 0) <> 0";
			
	Запрос.Текст = РазмерМРП;		
	ТаблицаМРП = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаМРП.Количество() <> 0 Тогда
		Запрос.УстановитьПараметр("ДатаИзмененияЛимитаРасчетов", ДатаИзмененияЛимитаРасчетов);
		ТаблицаМРП.Сортировать("Период Убыв");
		Условие = " ГДЕ ВЫБОР ";
		НомерСтроки = 0;
		Для каждого СтрокаМРП Из ТаблицаМРП Цикл
			НомерСтроки = НомерСтроки + 1;
			ДатаМРП   = "ДатаМРП"    + Строка(НомерСтроки);
			Лимит1000 = "Лимит1000_" + Строка(НомерСтроки);
			Лимит4000 = "Лимит4000_" + Строка(НомерСтроки);
			Условие = Условие + " КОГДА ТиповойОбороты.Период >= &" + ДатаМРП + "
			        | ТОГДА ВЫБОР
					| КОГДА ТиповойОбороты.Период < &ДатаИзмененияЛимитаРасчетов
				    | ТОГДА ТиповойОбороты.СуммаОборотДт > &" + Лимит4000 + " 
				    | ИЛИ ТиповойОбороты.СуммаОборотКт > &"   + Лимит4000 + "
			        | КОГДА ТиповойОбороты.Период >= &ДатаИзмененияЛимитаРасчетов
				    | ТОГДА ТиповойОбороты.СуммаОборотДт > &" + Лимит1000 + " 
				    | ИЛИ ТиповойОбороты.СуммаОборотКт > &"   + Лимит1000 + "
		            | КОНЕЦ ";		      
			Запрос.УстановитьПараметр(ДатаМРП, СтрокаМРП.Период);
			Запрос.УстановитьПараметр(Лимит1000, СтрокаМРП.Предел1000);
			Запрос.УстановитьПараметр(Лимит4000, СтрокаМРП.Предел4000);
		КонецЦикла;
		Условие = Условие + " КОНЕЦ ";	
	Иначе
		СтрокаПравила.ОбнаруженыОшибки  = Истина;
		СтрокаПравила.ПроверкаВыполнена = Истина;
		СтрокаПравила.КомментарийРезультата = НСтр("ru = 'В регистре сведений ""Регламентированные расчетные показатели"" не задано значение МРП. Проверка не может быть осуществлена.'");
	    СтрокаПравила.ПричиныОшибокРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку
		(НСтр("ru = 'В регистре сведений ""Регламентированные расчетные показатели"" не задано значение минимального расчетного показателя на дату: %1'"), КонецДня(ПараметрыОтчета.ДатаКон));
		СтрокаПравила.РекомендацииРезультата = НСтр("ru = 'Задать значение минимального расчетного показателя.'");
		Возврат;
	КонецЕсли;
		
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТиповойОбороты.Период КАК Дата,
	|	ТиповойОбороты.Регистратор КАК Документ,
	|	ТиповойОбороты.Субконто1 КАК Контрагент,
	|	ТиповойОбороты.Субконто2 КАК Договор,
	|	ТиповойОбороты.СуммаОборотДт КАК Выдано,
	|	ТиповойОбороты.СуммаОборотКт КАК Получено
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			,
	|			&ВидыСубконтоКонтрагентыДоговоры,
	|			&Организация = Организация
	|				И Субконто1.ЮрФизЛицо = &ЮрЛицо
	|				И СтруктурноеПодразделение = &СтруктурноеПодразделение
	|				И СтруктурноеПодразделениеКор = &СтруктурноеПодразделениеКор,
	|			КорСчет В ИЕРАРХИИ (&СчетКассы),
	|			) КАК ТиповойОбороты" + Условие + "
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ТекстЗапросаИП =
	"ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТиповойОбороты.Период КАК Дата,
	|	ТиповойОбороты.Регистратор КАК Документ,
	|	ТиповойОбороты.Субконто1 КАК Контрагент,
	|	ТиповойОбороты.Субконто2 КАК Договор,
	|	ТиповойОбороты.СуммаОборотДт КАК Выдано,
	|	ТиповойОбороты.СуммаОборотКт КАК Получено
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Обороты(
	|			&ДатаНачЛимитаДляИП,
	|			&ДатаКон,
	|			Регистратор,
	|			,
	|			&ВидыСубконтоКонтрагентыДоговоры,
	|			&Организация = Организация
	|				И Субконто1.ЮрФизЛицо = &ФизЛицо И Субконто1.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус 
	|				И СтруктурноеПодразделение = &СтруктурноеПодразделение
	|				И СтруктурноеПодразделениеКор = &СтруктурноеПодразделениеКор,
	|			КорСчет В ИЕРАРХИИ (&СчетКассы),
	|			) КАК ТиповойОбороты
	|ГДЕ
	|	ТиповойОбороты.СуммаОборотДт > &" + Лимит1000 + " 
	|	ИЛИ ТиповойОбороты.СуммаОборотКт > &" + Лимит1000 + "
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ДополнениеКомментарияИП = "";
	Если ПараметрыОтчета.ДатаНач >= ДатаНачЛимитаДляИП И ДатаНачЛимитаДляИП <= КонецДня(ПараметрыОтчета.ДатаКон) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "АВТОУПОРЯДОЧИВАНИЕ", ТекстЗапросаИП);
		ДополнениеКомментарияИП = НСтр("ru = ' (инд. предпринимателями, плательщиками НДС)'");
	КонецЕсли;
	          	
	Запрос.УстановитьПараметр("СчетКассы", ПланыСчетов.Типовой.ДенежныеСредстваВКассе);
	ВидыСубконтоКонтрагентыДоговоры = Новый Массив;
	ВидыСубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	ВидыСубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Договоры);
	Запрос.УстановитьПараметр("ВидыСубконтоКонтрагентыДоговоры", ВидыСубконтоКонтрагентыДоговоры);
	Запрос.УстановитьПараметр("СчетКассы"					   , ПланыСчетов.Типовой.ДенежныеСредстваВКассе);
	Запрос.УстановитьПараметр("Организация"				   	   , ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ЮрЛицо"					       , Перечисления.ЮрФизЛицо.ЮрЛицо);
	Запрос.УстановитьПараметр("ФизЛицо"					       , Перечисления.ЮрФизЛицо.ФизЛицо);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение"       , ПараметрыОтчета.СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("СтруктурноеПодразделениеКор"    , ПараметрыОтчета.СтруктурноеПодразделение);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если ДатаИзмененияЛимитаРасчетов > ПараметрыОтчета.ДатаНач И ДатаИзмененияЛимитаРасчетов > КонецДня(ПараметрыОтчета.ДатаКон) Тогда
		ДополнениеКомментария = НСтр("ru = 'Лимит расчетов между юр.лицами установлен в размере 4000 МРП.'");  
	ИначеЕсли ДатаИзмененияЛимитаРасчетов >= ПараметрыОтчета.ДатаНач И ДатаИзмененияЛимитаРасчетов < КонецДня(ПараметрыОтчета.ДатаКон) Тогда	
		ДополнениеКомментария = НСтр("ru = 'До 24.09.2012 лимит расчетов между юр.лицами установлен в размере 4000 МРП. С 24.09.2012 лимит расчетов между юр.лицами установлен в размере 1000 МРП.'");  
	ИначеЕсли ДатаИзмененияЛимитаРасчетов < ПараметрыОтчета.ДатаНач И ДатаИзмененияЛимитаРасчетов < КонецДня(ПараметрыОтчета.ДатаКон) Тогда	
		ДополнениеКомментария = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Лимит расчетов между юр.лицами%1 установлен в размере 1000 МРП.'"), ДополнениеКомментарияИП); 
	КонецЕсли;						  
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		СтрокаПравила.КомментарийРезультата = ДополнениеКомментария + " " + СтрокаПравила.КомментарийРезультатаОшибка;
		
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ЛимитРасчетовСЮрЛицамиРезультатЗапроса", Результат);
		
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Контрагент", "Контрагент");
		СтруктураРасшифровки.Вставить("Договор", "Договор");
	   	СтруктураРасшифровки.Вставить("Документ", "Документ");
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ЛимитРасчетовСЮрЛицамиСтруктураРасшифровки", СтруктураРасшифровки);
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("Дата", 20);
		СтруктураШириныКолонок.Вставить("Документ" , 40);		
		СтруктураШириныКолонок.Вставить("Контрагент"  , 30);
		СтруктураШириныКолонок.Вставить("Договор" , 30);
		СтруктураШириныКолонок.Вставить("Выдано"   , 25);
		СтруктураШириныКолонок.Вставить("Получено"   , 25);
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ЛимитРасчетовСЮрЛицамиСтруктураШириныКолонок", СтруктураШириныКолонок);
	Иначе
		СтрокаПравила.КомментарийРезультата = ДополнениеКомментария + " " + СтрокаПравила.КомментарийРезультатаНетОшибок;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоНумерацияПКО_РКО(СтрокаПравила, ПараметрыОтчета)
	
	ТаблицаНарушений = Новый ТаблицаЗначений;
	ТаблицаНарушений.Колонки.Добавить("НомерДокумента");
	ТаблицаНарушений.Колонки.Добавить("ДатаДокумента");
	ТаблицаНарушений.Колонки.Добавить("Документ");
	ТаблицаНарушений.Колонки.Добавить("НомерСледующего");
	ТаблицаНарушений.Колонки.Добавить("ДатаСледующего");
	ТаблицаНарушений.Колонки.Добавить("СледДокумент");
	
	// Сначала проверяем последовательность нумерации приходных кассовых ордеров
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПриходныйКассовыйОрдер.Ссылка КАК Документ,
	|	ПриходныйКассовыйОрдер.Дата КАК Дата,
	|	ПриходныйКассовыйОрдер.Номер
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|ГДЕ
	|	ПриходныйКассовыйОрдер.ПометкаУдаления = ЛОЖЬ
	|	И ПриходныйКассовыйОрдер.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ПриходныйКассовыйОрдер.Организация = &Организация
	|	И ПриходныйКассовыйОрдер.СтруктурноеПодразделениеОтправитель = &СтруктурноеПодразделение";
	
	Запрос.УстановитьПараметр("ДатаНач"					, ПараметрыОтчета.ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон"					, КонецДня(ПараметрыОтчета.ДатаКон));
	Запрос.УстановитьПараметр("Организация"				, ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", ПараметрыОтчета.СтруктурноеПодразделение);
	
	
	Результат = Запрос.Выполнить();
	ТаблицаРезультата = Результат.Выгрузить();
	ТаблицаРезультата.Колонки.Добавить("НомерЧислом");
	
	Для каждого СтрокаТаблицы Из ТаблицаРезультата Цикл
		СтрокаТаблицы.НомерЧислом = ПолучитьНомерЧислом(СтрокаТаблицы.Номер);
	КонецЦикла;
	ТаблицаРезультата.Сортировать("НомерЧислом ВОЗР, Дата ВОЗР");
	
	Для ИндексСтроки = 1 По ТаблицаРезультата.Количество() - 1 Цикл
		
		ДатаТекущейСтроки    = ТаблицаРезультата[ИндексСтроки].Дата;
		ДатаПредыдущейСтроки = ТаблицаРезультата[ИндексСтроки - 1].Дата;
		НарушенаНумерация    = ДатаТекущейСтроки < ДатаПредыдущейСтроки;
		
		Если НарушенаНумерация Тогда
			
			СтрокаНарушения = ТаблицаНарушений.Добавить();
			СтрокаНарушения.НомерДокумента  = ТаблицаРезультата[ИндексСтроки].Номер;
			СтрокаНарушения.ДатаДокумента   = ТаблицаРезультата[ИндексСтроки].Дата;
			СтрокаНарушения.Документ        = ТаблицаРезультата[ИндексСтроки].Документ;
			СтрокаНарушения.НомерСледующего = ТаблицаРезультата[ИндексСтроки - 1].Номер;
			СтрокаНарушения.ДатаСледующего  = ТаблицаРезультата[ИндексСтроки - 1].Дата;
			СтрокаНарушения.СледДокумент    = ТаблицаРезультата[ИндексСтроки - 1].Документ;
		
		КонецЕсли; 
	КонецЦикла;
	
	// Затем проверяем последовательность нумерации расходных кассовых ордеров
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходныйКассовыйОрдер.Ссылка КАК Документ,
	|	РасходныйКассовыйОрдер.Дата КАК Дата,
	|	РасходныйКассовыйОрдер.Номер
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.ПометкаУдаления = ЛОЖЬ
	|	И РасходныйКассовыйОрдер.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И РасходныйКассовыйОрдер.Организация = &Организация
	|	И РасходныйКассовыйОрдер.СтруктурноеПодразделениеОтправитель = &СтруктурноеПодразделение";
	
	Запрос.УстановитьПараметр("ДатаНач"					, ПараметрыОтчета.ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон"					, КонецДня(ПараметрыОтчета.ДатаКон));
	Запрос.УстановитьПараметр("Организация"				, ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", ПараметрыОтчета.СтруктурноеПодразделение);
	
	
	Результат = Запрос.Выполнить();
	ТаблицаРезультата = Результат.Выгрузить();
	ТаблицаРезультата.Колонки.Добавить("НомерЧислом");
	
	Для каждого СтрокаТаблицы Из ТаблицаРезультата Цикл
		СтрокаТаблицы.НомерЧислом = ПолучитьНомерЧислом(СтрокаТаблицы.Номер);
	КонецЦикла;
	ТаблицаРезультата.Сортировать("НомерЧислом ВОЗР, Дата ВОЗР");
	
	Для ИндексСтроки = 1 По ТаблицаРезультата.Количество() - 1 Цикл
		
		ДатаТекущейСтроки    = ТаблицаРезультата[ИндексСтроки].Дата;
		ДатаПредыдущейСтроки = ТаблицаРезультата[ИндексСтроки - 1].Дата;
		НарушенаНумерация    = ДатаТекущейСтроки < ДатаПредыдущейСтроки;
		
		Если НарушенаНумерация Тогда
			
			СтрокаНарушения = ТаблицаНарушений.Добавить();
			СтрокаНарушения.НомерДокумента  = ТаблицаРезультата[ИндексСтроки].Номер;
			СтрокаНарушения.ДатаДокумента   = ТаблицаРезультата[ИндексСтроки].Дата;
			СтрокаНарушения.Документ        = ТаблицаРезультата[ИндексСтроки].Документ;
			СтрокаНарушения.НомерСледующего = ТаблицаРезультата[ИндексСтроки - 1].Номер;
			СтрокаНарушения.ДатаСледующего  = ТаблицаРезультата[ИндексСтроки - 1].Дата;
			СтрокаНарушения.СледДокумент    = ТаблицаРезультата[ИндексСтроки - 1].Документ;
		
		КонецЕсли; 
	КонецЦикла;
	
	СтрокаПравила.ОбнаруженыОшибки  = ТаблицаНарушений.Количество() > 0;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ПараметрыОтчета.ИсходящиеДанные.Вставить("НумерацияПКО_РКОТаблицаЗначений", ТаблицаНарушений);
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("НомерДокумента" , НСтр("ru = 'Номер документа'"));
		СтруктураЗаголовков.Вставить("ДатаДокумента"  , НСтр("ru = 'Дата документа'"));
		СтруктураЗаголовков.Вставить("Документ"  , 		НСтр("ru = 'Документ'"));
		СтруктураЗаголовков.Вставить("НомерСледующего", НСтр("ru = 'Номер след. документа'"));
		СтруктураЗаголовков.Вставить("ДатаСледующего" , НСтр("ru = 'Дата след. документа'"));
		СтруктураЗаголовков.Вставить("СледДокумент"   , НСтр("ru = 'Следующий документ'"));
		ПараметрыОтчета.ИсходящиеДанные.Вставить("НумерацияПКО_РКОСтруктураЗаголовков", СтруктураЗаголовков);
		
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("НомерДокумента" , 25);
		СтруктураШириныКолонок.Вставить("НомерСледующего", 25);
		СтруктураШириныКолонок.Вставить("ДатаДокумента"  , 20);
		СтруктураШириныКолонок.Вставить("Документ"  	 , 40);
		СтруктураШириныКолонок.Вставить("ДатаСледующего" , 20);
		СтруктураШириныКолонок.Вставить("СледДокумент"   , 40);
		ПараметрыОтчета.ИсходящиеДанные.Вставить("НумерацияПКО_РКОСтруктураШириныКолонок", СтруктураШириныКолонок);
		
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("СледДокумент", "СледДокумент");
	   	СтруктураРасшифровки.Вставить("Документ"	, "Документ");
		ПараметрыОтчета.ИсходящиеДанные.Вставить("НумерацияПКО_РКОСтруктураРасшифровки", СтруктураРасшифровки);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоРазницаКурсовВБанковскихДокументах(СтрокаПравила, ПараметрыОтчета)
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлатежныеДокументы.Ссылка,
	|	ПлатежныеДокументы.ВалютаДокумента,
	|	ПлатежныеДокументы.КурсВзаиморасчетов,
	|	ПлатежныеДокументы.Дата КАК Дата,
	|	ПлатежныеДокументы.НомерСтроки
	|ПОМЕСТИТЬ БанковскиеДокументы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПлатежныйОрдерПоступлениеДС.Ссылка КАК Ссылка,
	|		ВЫБОР
	|			КОГДА ПлатежныйОрдерПоступлениеДС.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты)
	|					ИЛИ ПлатежныйОрдерПоступлениеДС.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты)
	|				ТОГДА ПлатежныйОрдерПоступлениеДС.Ссылка.КурсНаДатуПриобретенияРеализацииВалюты
	|			ИНАЧЕ ПлатежныйОрдерПоступлениеДС.КурсВзаиморасчетов
	|		КОНЕЦ КАК КурсВзаиморасчетов,
	|		ПлатежныйОрдерПоступлениеДС.Ссылка.Дата КАК Дата,
	|		ПлатежныйОрдерПоступлениеДС.НомерСтроки КАК НомерСтроки,
	|		ПлатежныйОрдерПоступлениеДС.Ссылка.ВалютаДокумента КАК ВалютаДокумента
	|	ИЗ
	|		Документ.ПлатежныйОрдерПоступлениеДенежныхСредств.РасшифровкаПлатежа КАК ПлатежныйОрдерПоступлениеДС
	|	ГДЕ
	|		ПлатежныйОрдерПоступлениеДС.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
	|		И ПлатежныйОрдерПоступлениеДС.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств)
	|		И ПлатежныйОрдерПоступлениеДС.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ИнкассацияДенежныхСредств)
	|		И ПлатежныйОрдерПоступлениеДС.Ссылка.Проведен
	|		И ПлатежныйОрдерПоступлениеДС.Ссылка.Организация = &Организация
	|		И ПлатежныйОрдерПоступлениеДС.Ссылка.СтруктурноеПодразделениеОтправитель = &СтруктурноеПодразделение
	|		И ПлатежныйОрдерПоступлениеДС.Ссылка.ВалютаДокумента <> &ВалютаРегламентированногоУчета
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПлатОрдерСписаниеДС.Ссылка,
	|		ПлатОрдерСписаниеДС.КурсВзаиморасчетов,
	|		ПлатОрдерСписаниеДС.Ссылка.Дата,
	|		ПлатОрдерСписаниеДС.НомерСтроки,
	|		ПлатОрдерСписаниеДС.Ссылка.ВалютаДокумента
	|	ИЗ
	|		Документ.ПлатежныйОрдерСписаниеДенежныхСредств.РасшифровкаПлатежа КАК ПлатОрдерСписаниеДС
	|	ГДЕ
	|		ПлатОрдерСписаниеДС.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
	|		И ПлатОрдерСписаниеДС.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств)
	|		И ПлатОрдерСписаниеДС.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеЗаработнойПлаты)
	|		И ПлатОрдерСписаниеДС.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет)
	|		И ПлатОрдерСписаниеДС.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога)
	|		И ПлатОрдерСписаниеДС.Ссылка.Проведен
	|		И ПлатОрдерСписаниеДС.Ссылка.Организация = &Организация
	|		И ПлатОрдерСписаниеДС.Ссылка.СтруктурноеПодразделениеОтправитель = &СтруктурноеПодразделение
	|		И ПлатОрдерСписаниеДС.Ссылка.ВалютаДокумента <> &ВалютаРегламентированногоУчета
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПлатежноеПоручениеВходящее.Ссылка,
	|		ВЫБОР
	|			КОГДА ПлатежноеПоручениеВходящее.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты)
	|					ИЛИ ПлатежноеПоручениеВходящее.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты)
	|				ТОГДА ПлатежноеПоручениеВходящее.Ссылка.КурсНаДатуПриобретенияРеализацииВалюты
	|			ИНАЧЕ ПлатежноеПоручениеВходящее.КурсВзаиморасчетов
	|		КОНЕЦ,
	|		ПлатежноеПоручениеВходящее.Ссылка.Дата,
	|		ПлатежноеПоручениеВходящее.НомерСтроки,
	|		ПлатежноеПоручениеВходящее.Ссылка.ВалютаДокумента
	|	ИЗ
	|		Документ.ПлатежноеПоручениеВходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеВходящее
	|	ГДЕ
	|		ПлатежноеПоручениеВходящее.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
	|		И ПлатежноеПоручениеВходящее.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств)
	|		И ПлатежноеПоручениеВходящее.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратЗаработнойПлаты)
	|		И ПлатежноеПоручениеВходящее.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратПенсионныхВзносов)
	|		И ПлатежноеПоручениеВходящее.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратСоциальныхОтчислений)
	|		И ПлатежноеПоручениеВходящее.Ссылка.Проведен
	|		И ПлатежноеПоручениеВходящее.Ссылка.ВалютаДокумента <> &ВалютаРегламентированногоУчета
	|		И ПлатежноеПоручениеВходящее.Ссылка.Организация = &Организация
	|		И ПлатежноеПоручениеВходящее.Ссылка.СтруктурноеПодразделениеОтправитель = &СтруктурноеПодразделение
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПлатПорИсхРасшифровкаПлатежа.Ссылка,
	|		ПлатПорИсхРасшифровкаПлатежа.КурсВзаиморасчетов,
	|		ПлатПорИсхРасшифровкаПлатежа.Ссылка.Дата,
	|		ПлатПорИсхРасшифровкаПлатежа.НомерСтроки,
	|		ПлатПорИсхРасшифровкаПлатежа.Ссылка.ВалютаДокумента
	|	ИЗ
	|		Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ПлатПорИсхРасшифровкаПлатежа
	|	ГДЕ
	|		ПлатПорИсхРасшифровкаПлатежа.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
	|		И (ПлатПорИсхРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ОплатаПоставщику)
	|				ИЛИ ПлатПорИсхРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю)
	|				ИЛИ ПлатПорИсхРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ОплатаСтруктурномуПодразделению)
	|				ИЛИ ПлатПорИсхРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами)
	|				ИЛИ ПлатПорИсхРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами))
	|		И ПлатПорИсхРасшифровкаПлатежа.Ссылка.Проведен
	|		И ПлатПорИсхРасшифровкаПлатежа.Ссылка.Организация = &Организация
	|		И ПлатПорИсхРасшифровкаПлатежа.Ссылка.СтруктурноеПодразделениеОтправитель = &СтруктурноеПодразделение
	|		И ПлатПорИсхРасшифровкаПлатежа.Ссылка.ВалютаДокумента <> &ВалютаРегламентированногоУчета
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПКОРасшифровкаПлатежа.Ссылка,
	|		ПКОРасшифровкаПлатежа.КурсВзаиморасчетов,
	|		ПКОРасшифровкаПлатежа.Ссылка.Дата,
	|		ПКОРасшифровкаПлатежа.НомерСтроки,
	|		ПКОРасшифровкаПлатежа.Ссылка.ВалютаДокумента
	|	ИЗ
	|		Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПКОРасшифровкаПлатежа
	|	ГДЕ
	|		ПКОРасшифровкаПлатежа.Ссылка.Проведен
	|		И ПКОРасшифровкаПлатежа.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
	|		И ПКОРасшифровкаПлатежа.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке)
	|		И ПКОРасшифровкаПлатежа.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ПриходДенежныхСредствПрочее)
	|		И ПКОРасшифровкаПлатежа.Ссылка.Организация = &Организация
	|		И ПКОРасшифровкаПлатежа.Ссылка.СтруктурноеПодразделениеОтправитель = &СтруктурноеПодразделение
	|		И ПКОРасшифровкаПлатежа.Ссылка.ВалютаДокумента <> &ВалютаРегламентированногоУчета
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РКОРасшифровкаПлатежа.Ссылка,
	|		РКОРасшифровкаПлатежа.КурсВзаиморасчетов,
	|		РКОРасшифровкаПлатежа.Ссылка.Дата,
	|		РКОРасшифровкаПлатежа.НомерСтроки,
	|		РКОРасшифровкаПлатежа.Ссылка.ВалютаДокумента
	|	ИЗ
	|		Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РКОРасшифровкаПлатежа
	|	ГДЕ
	|		РКОРасшифровкаПлатежа.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
	|		И (РКОРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ОплатаПоставщику)
	|				ИЛИ РКОРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю)
	|				ИЛИ РКОРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ОплатаСтруктурномуПодразделению)
	|				ИЛИ РКОРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.РасчетыПоДоходуОтРазовыхВыплатСКонтрагентами)
	|				ИЛИ РКОРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами))
	|		И РКОРасшифровкаПлатежа.Ссылка.Проведен
	|		И РКОРасшифровкаПлатежа.Ссылка.Организация = &Организация
	|		И РКОРасшифровкаПлатежа.Ссылка.СтруктурноеПодразделениеОтправитель = &СтруктурноеПодразделение
	|		И РКОРасшифровкаПлатежа.Ссылка.ВалютаДокумента <> &ВалютаРегламентированногоУчета) КАК ПлатежныеДокументы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлатежныеДокументы.Ссылка КАК Документ,
	|	ПлатежныеДокументы.НомерСтроки,
	|	ПлатежныеДокументы.ВалютаДокумента,
	|	ПлатежныеДокументы.КурсВзаиморасчетов,
	|	ЕСТЬNULL(КурсыВалют.Курс, 1) КАК УстановленныйКурс
	|ИЗ
	|	БанковскиеДокументы КАК ПлатежныеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Док.Ссылка КАК Ссылка,
	|			Док.ВалютаДокумента КАК ВалютаДокумента,
	|			МАКСИМУМ(КурсыВалют.Период) КАК Период
	|		ИЗ
	|			БанковскиеДокументы КАК Док
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|				ПО Док.Дата >= КурсыВалют.Период
	|					И Док.ВалютаДокумента = КурсыВалют.Валюта
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Док.Ссылка,
	|			Док.ВалютаДокумента) КАК ВложенныйЗапрос
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|			ПО ВложенныйЗапрос.Период = КурсыВалют.Период
	|				И ВложенныйЗапрос.ВалютаДокумента = КурсыВалют.Валюта
	|		ПО ПлатежныеДокументы.Ссылка = ВложенныйЗапрос.Ссылка
	|ГДЕ
	|	КурсыВалют.Курс <> ПлатежныеДокументы.КурсВзаиморасчетов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПлатежныеДокументы.Дата";
	   
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("НачПериода"					  , ПараметрыОтчета.ДатаНач);
	Запрос.УстановитьПараметр("КонПериода"					  , КонецДня(ПараметрыОтчета.ДатаКон));
	Запрос.УстановитьПараметр("Организация"					  , ПараметрыОтчета.Организация); 
	Запрос.УстановитьПараметр("СтруктурноеПодразделение"	  , ПараметрыОтчета.СтруктурноеПодразделение); 

	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ПараметрыОтчета.ИсходящиеДанные.Вставить("РазницаКурсовВБанковскихДокументахРезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("НомерСтроки", НСтр("ru = 'Номер строки в ТЧ ""Расшифровка платежа""'"));
		СтруктураЗаголовков.Вставить("КурсВзаиморасчетов", НСтр("ru = 'Курс взаиморасчетов из документа'"));
		СтруктураЗаголовков.Вставить("УстановленныйКурс",  НСтр("ru = 'Установленный курс из регистра сведений ""Курсы валют""'"));
		ПараметрыОтчета.ИсходящиеДанные.Вставить("РазницаКурсовВБанковскихДокументахСтруктураЗаголовков", СтруктураЗаголовков);
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Документ", "Документ");			
		ПараметрыОтчета.ИсходящиеДанные.Вставить("РазницаКурсовВБанковскихДокументахСтруктураРасшифровки", СтруктураРасшифровки);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоСоответствиеСтатейДДСПоВидамОпераций(СтрокаПравила, ПараметрыОтчета)
		
	Запрос = Новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	ТиповойОбороты.Субконто1 КАК СтатьяДДС,
	             |	ТиповойОбороты.Счет КАК СЧЕТ,
	             |	ТиповойОбороты.Регистратор КАК Документ,
	             |	ТиповойОбороты.Субконто1.ВидДвижения КАК ВидДвиженияПоРегистратору,
	             |	ВЫБОР
	             |		КОГДА ТиповойОбороты.Счет.Валютный
	             |					И НЕ ЕСТЬNULL(ТиповойОбороты.ВалютнаяСуммаОборотДт, 0) = 0
	             |				ИЛИ НЕ ТиповойОбороты.Счет.Валютный
	             |					И НЕ ЕСТЬNULL(ТиповойОбороты.СуммаОборотДт, 0) = 0
	             |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.Поступление)
	             |		КОГДА ТиповойОбороты.Счет.Валютный
	             |					И НЕ ЕСТЬNULL(ТиповойОбороты.ВалютнаяСуммаОборотКт, 0) = 0
	             |				ИЛИ НЕ ТиповойОбороты.Счет.Валютный
	             |					И НЕ ЕСТЬNULL(ТиповойОбороты.СуммаОборотКт, 0) = 0
	             |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.Выбытие)
	             |	КОНЕЦ КАК ВидДвиженияПравильный
	             |ИЗ
	             |	РегистрБухгалтерии.Типовой.Обороты(
	             |			&ДатаНач,
	             |			&ДатаКон,
	             |			Регистратор,
	             |			Счет В ИЕРАРХИИ (&ДенежныеСредства),
	             |			&СтатьяДвиженияДенежныхСредств,
	             |			Организация = &Организация
	             |				И СтруктурноеПодразделение = &СтруктурноеПодразделение
	             |				И СтруктурноеПодразделениеКор = &СтруктурноеПодразделениеКор,
	             |			,
	             |			) КАК ТиповойОбороты
	             |ГДЕ
	             |	ТиповойОбороты.Субконто1.ВидДвижения <> ВЫБОР
	             |			КОГДА ТиповойОбороты.Счет.Валютный
	             |						И НЕ ЕСТЬNULL(ТиповойОбороты.ВалютнаяСуммаОборотДт, 0) = 0
	             |					ИЛИ НЕ ТиповойОбороты.Счет.Валютный
	             |						И НЕ ЕСТЬNULL(ТиповойОбороты.СуммаОборотДт, 0) = 0
	             |				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.Поступление)
	             |			КОГДА ТиповойОбороты.Счет.Валютный
	             |						И НЕ ЕСТЬNULL(ТиповойОбороты.ВалютнаяСуммаОборотКт, 0) = 0
	             |					ИЛИ НЕ ТиповойОбороты.Счет.Валютный
	             |						И НЕ ЕСТЬNULL(ТиповойОбороты.СуммаОборотКт, 0) = 0
	             |				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.Выбытие)
	             |		КОНЕЦ"; 
				 
	Запрос.УстановитьПараметр("ДенежныеСредства"			 , ПланыСчетов.Типовой.ДенежныеСредства);
	Запрос.УстановитьПараметр("ДатаНач"						 , ПараметрыОтчета.ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон"						 , КонецДня(ПараметрыОтчета.ДатаКон));
	Запрос.УстановитьПараметр("СтатьяДвиженияДенежныхСредств", ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиДвиженияДенежныхСредств);
	Запрос.УстановитьПараметр("Организация"					 , ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение"	 , ПараметрыОтчета.СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("СтруктурноеПодразделениеКор"	 , ПараметрыОтчета.СтруктурноеПодразделение);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ПараметрыОтчета.ИсходящиеДанные.Вставить("СоответствиеСтатейДДСПоВидамОперацийРезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("СтатьяДДС", НСтр("ru = 'Статья ДДС'"));
		СтруктураЗаголовков.Вставить("ВидДвиженияПоРегистратору", НСтр("ru = 'Вид движения, указанный в статье ДДС'"));
		СтруктураЗаголовков.Вставить("ВидДвиженияПравильный",  НСтр("ru = 'Вид движения, который необходимо установить в статье ДДС'"));
		ПараметрыОтчета.ИсходящиеДанные.Вставить("СоответствиеСтатейДДСПоВидамОперацийСтруктураЗаголовков", СтруктураЗаголовков);
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Документ", "Документ");			
		ПараметрыОтчета.ИсходящиеДанные.Вставить("СоответствиеСтатейДДСПоВидамОперацийСтруктураРасшифровки", СтруктураРасшифровки);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоЗаполнениеРеквизитаСтатьяДДСВДокументах(СтрокаПравила, ПараметрыОтчета)
	
	Запрос = Новый Запрос;
		
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТиповойОбороты.Регистратор КАК Документ
	|ИЗ
	|	РегистрБухгалтерии.Типовой.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			Счет В ИЕРАРХИИ (&ДенежныеСредства),
	|			&СтатьяДвиженияДенежныхСредств,
	|			Организация = &Организация
	|				И СтруктурноеПодразделение = &СтруктурноеПодразделение
	|				И СтруктурноеПодразделениеКор = &СтруктурноеПодразделениеКор,
	|			,
	|			) КАК ТиповойОбороты
	|ГДЕ
	|	ТиповойОбороты.Субконто1 = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|	И ТИПЗНАЧЕНИЯ(ТиповойОбороты.Регистратор) <> ТИП(Документ.ЗакрытиеМесяца)
	|	И ТИПЗНАЧЕНИЯ(ТиповойОбороты.Регистратор) <> ТИП(Документ.ЧекККМ)";
	
	// В документе ЗакрытиеМесяца при переоценки валютных сумм бывают ситуации,
	// когда не заполняются статьи движения денежных средств. Данные ситуации являются корректными.
	// Поэтому документы ЗакрытиеМесяца исключаются из проверки.
	
	Запрос.УстановитьПараметр("ДенежныеСредства"			 , ПланыСчетов.Типовой.ДенежныеСредства);
	Запрос.УстановитьПараметр("ДатаНач"						 , ПараметрыОтчета.ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон"						 , КонецДня(ПараметрыОтчета.ДатаКон));
	Запрос.УстановитьПараметр("СтатьяДвиженияДенежныхСредств", ПланыВидовХарактеристик.ВидыСубконтоТиповые.СтатьиДвиженияДенежныхСредств);
	Запрос.УстановитьПараметр("Организация"					 , ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение"	 , ПараметрыОтчета.СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("СтруктурноеПодразделениеКор"	 , ПараметрыОтчета.СтруктурноеПодразделение);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ЗаполнениеРеквизитаСтатьяДДСВДокументахРезультатЗапроса", Результат);	
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Документ", "Документ");			
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ЗаполнениеРеквизитаСтатьяДДСВДокументахСтруктураРасшифровки", СтруктураРасшифровки);

	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоЗаполнениеРеквизитовВСправочникеСтатьиДДС(СтрокаПравила, ПараметрыОтчета)
	
	Запрос = Новый Запрос;
		
	Запрос.Текст= "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	СтатьиДвиженияДенежныхСредств.Ссылка КАК Элемент,
	              |	ВЫБОР
	              |		КОГДА СтатьиДвиженияДенежныхСредств.Наименование = """"
	              |			ТОГДА ""-""
	              |		ИНАЧЕ ""+""
	              |	КОНЕЦ КАК Наименование,
	              |	ВЫБОР
	              |		КОГДА СтатьиДвиженияДенежныхСредств.РазрезДеятельности = ЗНАЧЕНИЕ(Перечисление.РазрезыДеятельности.ПустаяСсылка)
	              |			ТОГДА ""-""
	              |		ИНАЧЕ ""+""
	              |	КОНЕЦ КАК РазрезДеятельности,
	              |	ВЫБОР
	              |		КОГДА СтатьиДвиженияДенежныхСредств.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.ПустаяСсылка)
	              |			ТОГДА ""-""
	              |		ИНАЧЕ ""+""
	              |	КОНЕЦ КАК ВидДвижения,
	              |	ВЫБОР
	              |		КОГДА СтатьиДвиженияДенежныхСредств.ДвижениеДенежныхСредств = ЗНАЧЕНИЕ(Справочник.ДвиженияДенежныхСредств.ПустаяССылка)
	              |			ТОГДА ""-""
	              |		ИНАЧЕ ""+""
	              |	КОНЕЦ КАК ДвижениеДенежныхСредств
	              |ИЗ
	              |	Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
	              |ГДЕ
	              |	НЕ СтатьиДвиженияДенежныхСредств.ЭтоГруппа
	              |	И НЕ СтатьиДвиженияДенежныхСредств.ПометкаУдаления
	              |	И (ВЫБОР
	              |				КОГДА СтатьиДвиженияДенежныхСредств.Наименование = """"
	              |					ТОГДА ИСТИНА
	              |				ИНАЧЕ ЛОЖЬ
	              |			КОНЕЦ
	              |			ИЛИ ВЫБОР
	              |				КОГДА СтатьиДвиженияДенежныхСредств.РазрезДеятельности = ЗНАЧЕНИЕ(Перечисление.РазрезыДеятельности.ПустаяСсылка)
	              |					ТОГДА ИСТИНА
	              |				ИНАЧЕ ЛОЖЬ
	              |			КОНЕЦ
	              |			ИЛИ ВЫБОР
	              |				КОГДА СтатьиДвиженияДенежныхСредств.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.ПустаяСсылка)
	              |					ТОГДА ИСТИНА
	              |				ИНАЧЕ ЛОЖЬ
	              |			КОНЕЦ
	              |			ИЛИ ВЫБОР
	              |				КОГДА СтатьиДвиженияДенежныхСредств.ДвижениеДенежныхСредств = ЗНАЧЕНИЕ(Справочник.ДвиженияДенежныхСредств.ПустаяССылка)
	              |					ТОГДА ИСТИНА
	              |				ИНАЧЕ ЛОЖЬ
	              |			КОНЕЦ)";
	             			 
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ЗаполнениеРеквизитовВСправочникеСтатьиДДСРезультатЗапроса", Результат);		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("РазрезДеятельности", НСтр("ru = 'Заполнен реквизит ""Разрез деятельности""'"));
		СтруктураЗаголовков.Вставить("ВидДвижения",       НСтр("ru = 'Заполнен реквизит ""Вид движения""'"));
		СтруктураЗаголовков.Вставить("ДвижениеДенежныхСредств",  НСтр("ru = 'Заполнен реквизит ""Движение денежных средств""'"));
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ЗаполнениеРеквизитовВСправочникеСтатьиДДССтруктураЗаголовков", СтруктураЗаголовков);

	КонецЕсли; 
	
КонецПроцедуры

// Зарплата

Процедура ПроверитьПравилоЗаполненностьРегКалендаря(СтрокаПравила, ПараметрыОтчета)
	
	КалендарьЗаполнен = ПроцедурыУправленияПерсоналомСервер.РегламентированныйКалендарьЗаполнен(НачалоМесяца(ПараметрыОтчета.ДатаНач), КонецМесяца(ПараметрыОтчета.ДатаКон));
	
	ПараметрыОтчета.ИсходящиеДанные.Вставить("ЗаполненностьРегКалендаря", КалендарьЗаполнен);
		
	СтрокаПравила.ОбнаруженыОшибки  = НЕ КалендарьЗаполнен;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
КонецПроцедуры

Процедура ПроверитьПравилоОтражениеЗПРегУч(СтрокаПравила, ПараметрыОтчета)
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Налоги = Справочники.НалогиСборыОтчисления;
	Типовой = ПланыСчетов.Типовой;
	
	Запрос.УстановитьПараметр("СчетСО", ?(НЕ ЗначениеЗаполнено(Налоги.ОбязательныеСоциальныеОтчисления.СчетУчетаРасчетовСКонтрагентомБУ), Типовой.ОбязательстваПоСоциальномуСтрахованию, Налоги.ОбязательныеСоциальныеОтчисления.СчетУчетаРасчетовСКонтрагентомБУ));
	Запрос.УстановитьПараметр("СчетОПВ", ?(НЕ ЗначениеЗаполнено(Налоги.ОбязательныеПенсионныеВзносы.СчетУчетаРасчетовСКонтрагентомБУ), Типовой.ОбязательстваПоПенсионнымОтчислениям, Налоги.ОбязательныеПенсионныеВзносы.СчетУчетаРасчетовСКонтрагентомБУ));
	Запрос.УстановитьПараметр("СчетИПН", ?(НЕ ЗначениеЗаполнено(Налоги.ИндивидуальныйПодоходныйНалог.СчетУчетаРасчетовСКонтрагентомБУ), Типовой.ИндивидуальныйПодоходныйНалог, Налоги.ИндивидуальныйПодоходныйНалог.СчетУчетаРасчетовСКонтрагентомБУ));
	Запрос.УстановитьПараметр("СчетСН", ?(НЕ ЗначениеЗаполнено(Налоги.СоциальныйНалог.СчетУчетаРасчетовСКонтрагентомБУ), Типовой.СоциальныйНалог, Налоги.СоциальныйНалог.СчетУчетаРасчетовСКонтрагентомБУ));
	Запрос.УстановитьПараметр("СчетОПВР", ?(НЕ ЗначениеЗаполнено(Налоги.ОбязательныеПенсионныеВзносыРаботодателя.СчетУчетаРасчетовСКонтрагентомБУ), Типовой.ОбязательстваПоОбязательнымПенсионнымВзносамРаботодателя, Налоги.ОбязательныеПенсионныеВзносыРаботодателя.СчетУчетаРасчетовСКонтрагентомБУ));
	Запрос.УстановитьПараметр("СчетОППВ", ?(НЕ ЗначениеЗаполнено(Налоги.ОбязательныеПрофессиональныеПенсионныеВзносы.СчетУчетаРасчетовСКонтрагентомБУ), Типовой.ОбязательстваПоПенсионнымОтчислениям, Налоги.ОбязательныеПрофессиональныеПенсионныеВзносы.СчетУчетаРасчетовСКонтрагентомБУ));
	Запрос.УстановитьПараметр("СчетВОСМС", ?(НЕ ЗначениеЗаполнено(Налоги.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование.СчетУчетаРасчетовСКонтрагентомБУ), Типовой.ОбязательстваПоВзносамОСМС, Налоги.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование.СчетУчетаРасчетовСКонтрагентомБУ));
	Запрос.УстановитьПараметр("СчетООСМС", ?(НЕ ЗначениеЗаполнено(Налоги.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование.СчетУчетаРасчетовСКонтрагентомБУ), Типовой.ОбязательстваПоОтчислениямОСМС, Налоги.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование.СчетУчетаРасчетовСКонтрагентомБУ));
	Запрос.УстановитьПараметр("СчетЕП", ?(НЕ ЗначениеЗаполнено(Налоги.ЕдиныйПлатеж.СчетУчетаРасчетовСКонтрагентомБУ), Типовой.ОбязательстваПоЕдиномуПлатежу, Налоги.ЕдиныйПлатеж.СчетУчетаРасчетовСКонтрагентомБУ));
	
	Запрос.УстановитьПараметр("ДатаНач", ПараметрыОтчета.ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ПараметрыОтчета.ДатаКон));
	Запрос.УстановитьПараметр("Организация", 	ПараметрыОтчета.Организация);
	
	ДанныеЗПТекст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сторнирование.ДокументОснование КАК ДокументНачисления,
	|	Сторнирование.Дата КАК Дата,
	|	Сторнирование.Ссылка КАК ДокументСторно
	|ПОМЕСТИТЬ ВТ_Сторнирование_Начисления
	|ИЗ
	|	Документ.Сторнирование КАК Сторнирование
	|ГДЕ
	|	НЕ Сторнирование.ПометкаУдаления
	|	И Сторнирование.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ТИПЗНАЧЕНИЯ(Сторнирование.ДокументОснование) = ТИП(Документ.НачислениеЗарплатыРаботникамОрганизаций)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сторнирование.ДокументОснование КАК ДокументУдержания,
	|	Сторнирование.Дата КАК Дата,
	|	Сторнирование.Ссылка КАК ДокументСторно
	|ПОМЕСТИТЬ ВТ_Сторнирование_Удержания
	|ИЗ
	|	Документ.Сторнирование КАК Сторнирование
	|ГДЕ
	|	НЕ Сторнирование.ПометкаУдаления
	|	И Сторнирование.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ТИПЗНАЧЕНИЯ(Сторнирование.ДокументОснование) В (ТИП(Документ.РасчетУдержанийРаботниковОрганизаций), ТИП(Документ.РегистрацияРазовыхУдержанийРаботниковОрганизаций), ТИП(Документ.РасчетЕдиногоПлатежа))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументУдержания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.Ссылка.Организация КАК Организация,
	|	Начисления.Ссылка.ПериодРегистрации КАК ПериодРегистрации,
	|	Начисления.Физлицо КАК Физлицо,
	|	Начисления.Результат КАК Начислено,
	|	0 КАК НачисленоБух,
	|	Начисления.Результат КАК РазностьНачислено,
	|	0 КАК ИПН,
	|	0 КАК ИПНБух,
	|	0 КАК РазностьИПН,
	|	0 КАК ОПВ,
	|	0 КАК ОПВБух,
	|	0 КАК РазностьОПВ,
	|	0 КАК Удержано,
	|	0 КАК УдержаноБух,
	|	0 КАК РазностьУдержано,
	|	0 КАК СоциальныеОтчисления,
	|	0 КАК СоциальныеОтчисленияБух,
	|	0 КАК РазностьСоциальныеОтчисления,
	|	0 КАК СоциальныйНалог,
	|	0 КАК СоциальныйНалогБух,
	|	0 КАК РазностьСоциальныйНалог,
	|	0 КАК ОППВ,
	|	0 КАК ОППВБух,
	|	0 КАК РазностьОППВ,
	|	0 КАК ВОСМС,
	|	0 КАК ВОСМСБух,
	|	0 КАК РазностьВОСМС,
	|	0 КАК ООСМС,
	|	0 КАК ООСМСБух,
	|	0 КАК РазностьООСМС,
	|	0 КАК ПениОПВ,
	|	0 КАК ПениОПВБух,
	|	0 КАК РазностьПениОПВ,
	|	0 КАК ПениСО,
	|	0 КАК ПениСОБух,
	|	0 КАК РазностьПениСО,
	|	0 КАК ПениОППВ,
	|	0 КАК ПениОППВБух,
	|	0 КАК РазностьПениОППВ,
	|	0 КАК ПениВОСМС,
	|	0 КАК ПениВОСМСБух,
	|	0 КАК РазностьПениВОСМС,
	|	0 КАК ПениООСМС,
	|	0 КАК ПениООСМСБух,
	|	0 КАК РазностьПениООСМС,
	|	0 КАК ЕП,
	|	0 КАК ЕПБух,
	|	0 КАК РазностьЕП,
	|	0 КАК ПениЕП,
	|	0 КАК ПениЕПБух,
	|	0 КАК РазностьПениЕП,
	|	0 КАК ОПВР,
	|	0 КАК ОПВРБух,
	|	0 КАК РазностьОПВР,
	|	0 КАК ПениОПВР,
	|	0 КАК ПениОПВРБух,
	|	0 КАК РазностьПениОПВР
	|ПОМЕСТИТЬ ДанныеЗП
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
	|	И Начисления.Ссылка.Проведен
	|	И Начисления.Результат <> 0
	|	И Начисления.Ссылка.Организация В(&Организация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Начисления.Ссылка.Организация,
	|	НАЧАЛОПЕРИОДА(ВТ_Сторнирование_Начисления.Дата, МЕСЯЦ),
	|	Начисления.Физлицо,
	|	Начисления.Результат * -1,
	|	0,
	|	Начисления.Результат * -1,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Сторнирование_Начисления КАК ВТ_Сторнирование_Начисления
	|		ПО Начисления.Ссылка = ВТ_Сторнирование_Начисления.ДокументНачисления
	|ГДЕ
	|	Начисления.Ссылка.ПериодРегистрации МЕЖДУ ДОБАВИТЬКДАТЕ(&ДатаНач, МЕСЯЦ, -12) И &ДатаКон
	|	И Начисления.Ссылка.Проведен
	|	И Начисления.Результат <> 0
	|	И Начисления.Ссылка.Организация В(&Организация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИПНСведенияОДоходах.Организация,
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.ПериодРегистрации, МЕСЯЦ),
	|	ИПНСведенияОДоходах.ФизЛицо,
	|	ИПНСведенияОДоходах.СуммаДохода,
	|	0,
	|	ИПНСведенияОДоходах.СуммаДохода,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
	|ГДЕ
	|	ИПНСведенияОДоходах.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
	|	И ИПНСведенияОДоходах.Регистратор ССЫЛКА Документ.РегистрацияПрочихДоходовВЦеляхНалогообложения
	|	И ИПНСведенияОДоходах.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРегистрацияПрочихДоходов.ДоходыКонтрагентов)
	|	И ИПНСведенияОДоходах.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|	И ИПНСведенияОДоходах.СуммаДохода <> 0
	|	И ИПНСведенияОДоходах.Организация В(&Организация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Удержания.Ссылка.Организация,
	|	Удержания.Ссылка.ПериодРегистрации,
	|	Удержания.ФизЛицо,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	Удержания.Результат,
	|	0,
	|	Удержания.Результат,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	Документ.РасчетУдержанийРаботниковОрганизаций.Удержания КАК Удержания
	|ГДЕ
	|	Удержания.Ссылка.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
	|	И Удержания.Ссылка.Проведен
	|	И Удержания.Результат <> 0
	|	И Удержания.Ссылка.Организация В(&Организация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Удержания.Ссылка.Организация,
	|	НАЧАЛОПЕРИОДА(ВТ_Сторнирование_Удержания.Дата, МЕСЯЦ),
	|	Удержания.ФизЛицо,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	Удержания.Результат * -1,
	|	0,
	|	Удержания.Результат * -1,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	Документ.РасчетУдержанийРаботниковОрганизаций.Удержания КАК Удержания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Сторнирование_Удержания КАК ВТ_Сторнирование_Удержания
	|		ПО Удержания.Ссылка = ВТ_Сторнирование_Удержания.ДокументУдержания
	|ГДЕ
	|	Удержания.Ссылка.ПериодРегистрации МЕЖДУ ДОБАВИТЬКДАТЕ(&ДатаНач, МЕСЯЦ, -12) И &ДатаКон
	|	И Удержания.Ссылка.Проведен
	|	И Удержания.Результат <> 0
	|	И Удержания.Ссылка.Организация В(&Организация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетЕдиногоПлатежаУдержания.Ссылка.Организация,
	|	РасчетЕдиногоПлатежаУдержания.Ссылка.ПериодРегистрации,
	|	РасчетЕдиногоПлатежаУдержания.ФизЛицо,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	РасчетЕдиногоПлатежаУдержания.Результат,
	|	0,
	|	РасчетЕдиногоПлатежаУдержания.Результат,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	Документ.РасчетЕдиногоПлатежа.Удержания КАК РасчетЕдиногоПлатежаУдержания
	|ГДЕ
	|	РасчетЕдиногоПлатежаУдержания.Ссылка.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
	|	И РасчетЕдиногоПлатежаУдержания.Ссылка.Проведен
	|	И РасчетЕдиногоПлатежаУдержания.Результат <> 0
	|	И РасчетЕдиногоПлатежаУдержания.Ссылка.Организация В(&Организация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетЕдиногоПлатежаУдержания.Ссылка.Организация,
	|	НАЧАЛОПЕРИОДА(ВТ_Сторнирование_Удержания.Дата, МЕСЯЦ),
	|	РасчетЕдиногоПлатежаУдержания.ФизЛицо,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	РасчетЕдиногоПлатежаУдержания.Результат * -1,
	|	0,
	|	РасчетЕдиногоПлатежаУдержания.Результат * -1,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	Документ.РасчетЕдиногоПлатежа.Удержания КАК РасчетЕдиногоПлатежаУдержания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Сторнирование_Удержания КАК ВТ_Сторнирование_Удержания
	|		ПО РасчетЕдиногоПлатежаУдержания.Ссылка = ВТ_Сторнирование_Удержания.ДокументУдержания
	|ГДЕ
	|	РасчетЕдиногоПлатежаУдержания.Ссылка.ПериодРегистрации МЕЖДУ ДОБАВИТЬКДАТЕ(&ДатаНач, МЕСЯЦ, -12) И &ДатаКон
	|	И РасчетЕдиногоПлатежаУдержания.Ссылка.Проведен
	|	И РасчетЕдиногоПлатежаУдержания.Результат <> 0
	|	И РасчетЕдиногоПлатежаУдержания.Ссылка.Организация В(&Организация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Удержания.Ссылка.Организация,
	|	Удержания.Ссылка.ПериодРегистрации,
	|	Удержания.Физлицо,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	Удержания.Результат,
	|	0,
	|	Удержания.Результат,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	Документ.РегистрацияРазовыхУдержанийРаботниковОрганизаций.Удержания КАК Удержания
	|ГДЕ
	|	Удержания.Ссылка.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
	|	И Удержания.Ссылка.Проведен
	|	И Удержания.Результат <> 0
	|	И Удержания.Ссылка.Организация В(&Организация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Удержания.Ссылка.Организация,
	|	НАЧАЛОПЕРИОДА(ВТ_Сторнирование_Удержания.Дата, МЕСЯЦ),
	|	Удержания.Физлицо,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	Удержания.Результат * -1,
	|	0,
	|	Удержания.Результат * -1,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	Документ.РегистрацияРазовыхУдержанийРаботниковОрганизаций.Удержания КАК Удержания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Сторнирование_Удержания КАК ВТ_Сторнирование_Удержания
	|		ПО Удержания.Ссылка = ВТ_Сторнирование_Удержания.ДокументУдержания
	|ГДЕ
	|	Удержания.Ссылка.ПериодРегистрации МЕЖДУ ДОБАВИТЬКДАТЕ(&ДатаНач, МЕСЯЦ, -12) И &ДатаКон
	|	И Удержания.Ссылка.Проведен
	|	И Удержания.Результат <> 0
	|	И Удержания.Ссылка.Организация В(&Организация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИПНРасчетыСБюджетом.Организация,
	|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.Период, МЕСЯЦ),
	|	ИПНРасчетыСБюджетом.ФизЛицо,
	|	0,
	|	0,
	|	0,
	|	ИПНРасчетыСБюджетом.Налог,
	|	0,
	|	ИПНРасчетыСБюджетом.Налог,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	РегистрНакопления.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
	|ГДЕ
	|	ИПНРасчетыСБюджетом.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И ИПНРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ИПНРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И НЕ ИПНРасчетыСБюджетом.НеОтражатьВРеглУчете
	|	И ИПНРасчетыСБюджетом.Налог <> 0
	|	И ИПНРасчетыСБюджетом.Организация В(&Организация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОПВРасчетыСФондами.Организация,
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.Период, МЕСЯЦ),
	|	ВЫБОР
	|		КОГДА ОПВРасчетыСФондами.ВидПлатежа <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|				И ОПВРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ОПВРасчетыСФондами.ФизЛицо.ФизЛицо
	|		ИНАЧЕ ОПВРасчетыСФондами.ФизЛицо
	|	КОНЕЦ,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ВЫБОР
	|		КОГДА ОПВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОПВРасчетыСФондами.Взнос
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ОПВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОПВРасчетыСФондами.Взнос
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ВЫБОР
	|		КОГДА ОПВРасчетыСФондами.ВидПлатежа <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОПВРасчетыСФондами.Взнос
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ОПВРасчетыСФондами.ВидПлатежа <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОПВРасчетыСФондами.Взнос
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|ГДЕ
	|	ОПВРасчетыСФондами.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И ОПВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ОПВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И НЕ ОПВРасчетыСФондами.НеОтражатьВРеглУчете
	|	И ОПВРасчетыСФондами.Взнос <> 0
	|	И ОПВРасчетыСФондами.Организация В(&Организация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СОРасчетыСФондами.Организация,
	|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.Период, МЕСЯЦ),
	|	ВЫБОР
	|		КОГДА СОРасчетыСФондами.ВидПлатежа <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|				И СОРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|			ТОГДА СОРасчетыСФондами.ФизЛицо.ФизЛицо
	|		ИНАЧЕ СОРасчетыСФондами.ФизЛицо
	|	КОНЕЦ,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ВЫБОР
	|		КОГДА СОРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА СОРасчетыСФондами.Отчисление
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА СОРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА СОРасчетыСФондами.Отчисление
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ВЫБОР
	|		КОГДА СОРасчетыСФондами.ВидПлатежа <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА СОРасчетыСФондами.Отчисление
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА СОРасчетыСФондами.ВидПлатежа <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА СОРасчетыСФондами.Отчисление
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	|ГДЕ
	|	СОРасчетыСФондами.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И СОРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И СОРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И НЕ СОРасчетыСФондами.НеОтражатьВРеглУчете
	|	И СОРасчетыСФондами.Отчисление <> 0
	|	И СОРасчетыСФондами.Организация В(&Организация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СНИсчисленный.Организация,
	|	НАЧАЛОПЕРИОДА(СНИсчисленный.Период, МЕСЯЦ),
	|	СНИсчисленный.ФизЛицо,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	СНИсчисленный.Налог,
	|	0,
	|	СНИсчисленный.Налог,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	РегистрНакопления.СНИсчисленный КАК СНИсчисленный
	|ГДЕ
	|	СНИсчисленный.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И НЕ СНИсчисленный.НеОтражатьВРеглУчете
	|	И СНИсчисленный.Налог <> 0
	|	И СНИсчисленный.Организация В(&Организация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОППВРасчетыСФондами.Организация,
	|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.Период, МЕСЯЦ),
	|	ОППВРасчетыСФондами.ФизЛицо,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ВЫБОР
	|		КОГДА ОППВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОППВРасчетыСФондами.Взнос
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ОППВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОППВРасчетыСФондами.Взнос
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ВЫБОР
	|		КОГДА ОППВРасчетыСФондами.ВидПлатежа <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОППВРасчетыСФондами.Взнос
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ОППВРасчетыСФондами.ВидПлатежа <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОППВРасчетыСФондами.Взнос
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	РегистрНакопления.ОППВРасчетыСФондами КАК ОППВРасчетыСФондами
	|ГДЕ
	|	ОППВРасчетыСФондами.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И ОППВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ОППВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И ОППВРасчетыСФондами.Взнос <> 0
	|	И ОППВРасчетыСФондами.Организация В(&Организация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОПВРРасчетыСФондами.Организация,
	|	НАЧАЛОПЕРИОДА(ОПВРРасчетыСФондами.Период, МЕСЯЦ),
	|	ОПВРРасчетыСФондами.ФизЛицо,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ВЫБОР
	|		КОГДА ОПВРРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОПВРРасчетыСФондами.Взнос
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ОПВРРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОПВРРасчетыСФондами.Взнос
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ОПВРРасчетыСФондами.ВидПлатежа <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОПВРРасчетыСФондами.Взнос
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ОПВРРасчетыСФондами.ВидПлатежа <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОПВРРасчетыСФондами.Взнос
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	РегистрНакопления.ОПВРРасчетыСФондами КАК ОПВРРасчетыСФондами
	|ГДЕ
	|	ОПВРРасчетыСФондами.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И ОПВРРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ОПВРРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И ОПВРРасчетыСФондами.Взнос <> 0
	|	И ОПВРРасчетыСФондами.Организация В(&Организация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВОСМСРасчетыСФондами.Организация,
	|	НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.Период, МЕСЯЦ),
	|	ВЫБОР
	|		КОГДА ВОСМСРасчетыСФондами.ВидПлатежа <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|				И ВОСМСРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ВОСМСРасчетыСФондами.ФизЛицо.ФизЛицо
	|		ИНАЧЕ ВОСМСРасчетыСФондами.ФизЛицо
	|	КОНЕЦ,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ВЫБОР
	|		КОГДА ВОСМСРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ВОСМСРасчетыСФондами.Взнос
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ВОСМСРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ВОСМСРасчетыСФондами.Взнос
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ВЫБОР
	|		КОГДА ВОСМСРасчетыСФондами.ВидПлатежа <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ВОСМСРасчетыСФондами.Взнос
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ВОСМСРасчетыСФондами.ВидПлатежа <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ВОСМСРасчетыСФондами.Взнос
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
	|ГДЕ
	|	ВОСМСРасчетыСФондами.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И ВОСМСРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ВОСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И НЕ ВОСМСРасчетыСФондами.НеОтражатьВРеглУчете
	|	И ВОСМСРасчетыСФондами.Взнос <> 0
	|	И ВОСМСРасчетыСФондами.Организация В(&Организация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ООСМСРасчетыСФондами.Организация,
	|	НАЧАЛОПЕРИОДА(ООСМСРасчетыСФондами.Период, МЕСЯЦ),
	|	ООСМСРасчетыСФондами.ФизЛицо,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ВЫБОР
	|		КОГДА ООСМСРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ООСМСРасчетыСФондами.Отчисление
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ООСМСРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ООСМСРасчетыСФондами.Отчисление
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ВЫБОР
	|		КОГДА ООСМСРасчетыСФондами.ВидПлатежа <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ООСМСРасчетыСФондами.Отчисление
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ООСМСРасчетыСФондами.ВидПлатежа <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ООСМСРасчетыСФондами.Отчисление
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	РегистрНакопления.ООСМСРасчетыСФондами КАК ООСМСРасчетыСФондами
	|ГДЕ
	|	ООСМСРасчетыСФондами.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И ООСМСРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ООСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И ООСМСРасчетыСФондами.Отчисление <> 0
	|	И ООСМСРасчетыСФондами.Организация В(&Организация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕПРасчетыСФондами.Организация,
	|	НАЧАЛОПЕРИОДА(ЕПРасчетыСФондами.Период, МЕСЯЦ),
	|	ЕПРасчетыСФондами.ФизЛицо,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ВЫБОР
	|		КОГДА ЕПРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ЕПРасчетыСФондами.СуммаПлатежа
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ЕПРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ЕПРасчетыСФондами.СуммаПлатежа
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕПРасчетыСФондами.ВидПлатежа <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ЕПРасчетыСФондами.СуммаПлатежа
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ЕПРасчетыСФондами.ВидПлатежа <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ЕПРасчетыСФондами.СуммаПлатежа
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	РегистрНакопления.ЕПРасчетыСФондами КАК ЕПРасчетыСФондами
	|ГДЕ
	|	ЕПРасчетыСФондами.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И ЕПРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ЕПРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И ЕПРасчетыСФондами.СуммаПлатежа <> 0
	|	И ЕПРасчетыСФондами.Организация В(&Организация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтражениеВУчете.Ссылка.Организация,
	|	НАЧАЛОПЕРИОДА(ОтражениеВУчете.Ссылка.ПериодРегистрации, МЕСЯЦ),
	|	ВЫБОР
	|		КОГДА ОтражениеВУчете.СчетДт <> ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда)
	|				И ОтражениеВУчете.СчетКт <> ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда)
	|				И ОтражениеВУчете.СубконтоДт1 ССЫЛКА Справочник.Контрагенты
	|				И ОтражениеВУчете.СубконтоДт1 <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(ОтражениеВУчете.СубконтоДт1 КАК Справочник.Контрагенты)
	|		КОГДА ОтражениеВУчете.СчетДт <> ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда)
	|				И ОтражениеВУчете.СчетКт <> ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда)
	|				И ОтражениеВУчете.СубконтоКт1 ССЫЛКА Справочник.Контрагенты
	|				И ОтражениеВУчете.СубконтоКт1 <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(ОтражениеВУчете.СубконтоКт1 КАК Справочник.Контрагенты)
	|		ИНАЧЕ ОтражениеВУчете.ФизЛицо
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ОтражениеВУчете.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда)
	|			ТОГДА ОтражениеВУчете.Сумма
	|		КОГДА ОтражениеВУчете.СчетДт <> ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда)
	|				И ОтражениеВУчете.СчетКт <> ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда)
	|				И ОтражениеВУчете.СубконтоКт1 ССЫЛКА Справочник.Контрагенты
	|				И ОтражениеВУчете.СубконтоКт1 <> НЕОПРЕДЕЛЕНО
	|				И ОтражениеВУчете.СубконтоКт1 <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ОтражениеВУчете.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	-ВЫБОР
	|		КОГДА ОтражениеВУчете.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда)
	|			ТОГДА ОтражениеВУчете.Сумма
	|		КОГДА ОтражениеВУчете.СчетДт <> ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда)
	|				И ОтражениеВУчете.СчетКт <> ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда)
	|				И ОтражениеВУчете.СубконтоКт1 ССЫЛКА Справочник.Контрагенты
	|				И ОтражениеВУчете.СубконтоКт1 <> НЕОПРЕДЕЛЕНО
	|				И ОтражениеВУчете.СубконтоКт1 <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ОтражениеВУчете.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ОтражениеВУчете.СчетКт = &СчетИПН
	|			ТОГДА ОтражениеВУчете.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	-ВЫБОР
	|		КОГДА ОтражениеВУчете.СчетКт = &СчетИПН
	|			ТОГДА ОтражениеВУчете.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ОтражениеВУчете.ФизЛицо = ОтражениеВУчете.Ссылка.Организация.ИндивидуальныйПредприниматель
	|				И ОтражениеВУчете.СчетКт = &СчетОПВ
	|				И ОтражениеВУчете.СубконтоКт1 = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы)
	|				И ОтражениеВУчете.СубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОтражениеВУчете.Сумма
	|		КОГДА ОтражениеВУчете.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда)
	|				И ОтражениеВУчете.СчетКт = &СчетОПВ
	|				И ОтражениеВУчете.СубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОтражениеВУчете.Сумма
	|		КОГДА ОтражениеВУчете.СчетДт <> ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда)
	|				И ОтражениеВУчете.СчетКт = &СчетОПВ
	|				И ОтражениеВУчете.СубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|				И ОтражениеВУчете.СубконтоДт1 ССЫЛКА Справочник.Контрагенты
	|				И ОтражениеВУчете.СубконтоДт1 <> НЕОПРЕДЕЛЕНО
	|				И ОтражениеВУчете.СубконтоДт1 <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ОтражениеВУчете.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	-ВЫБОР
	|		КОГДА ОтражениеВУчете.ФизЛицо = ОтражениеВУчете.Ссылка.Организация.ИндивидуальныйПредприниматель
	|				И ОтражениеВУчете.СчетКт = &СчетОПВ
	|				И ОтражениеВУчете.СубконтоКт1 = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы)
	|				И ОтражениеВУчете.СубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОтражениеВУчете.Сумма
	|		КОГДА ОтражениеВУчете.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда)
	|				И ОтражениеВУчете.СчетКт = &СчетОПВ
	|				И ОтражениеВУчете.СубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОтражениеВУчете.Сумма
	|		КОГДА ОтражениеВУчете.СчетДт <> ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда)
	|				И ОтражениеВУчете.СчетКт = &СчетОПВ
	|				И ОтражениеВУчете.СубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|				И ОтражениеВУчете.СубконтоДт1 ССЫЛКА Справочник.Контрагенты
	|				И ОтражениеВУчете.СубконтоДт1 <> НЕОПРЕДЕЛЕНО
	|				И ОтражениеВУчете.СубконтоДт1 <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ОтражениеВУчете.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ОтражениеВУчете.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда)
	|				И ОтражениеВУчете.СчетКт <> &СчетОПВ
	|				И ОтражениеВУчете.СчетКт <> &СчетИПН
	|				И ОтражениеВУчете.СчетКт <> &СчетВОСМС
	|				И ОтражениеВУчете.СчетКт <> &СчетЕП
	|			ТОГДА ОтражениеВУчете.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	-ВЫБОР
	|		КОГДА ОтражениеВУчете.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда)
	|				И ОтражениеВУчете.СчетКт <> &СчетОПВ
	|				И ОтражениеВУчете.СчетКт <> &СчетИПН
	|				И ОтражениеВУчете.СчетКт <> &СчетВОСМС
	|				И ОтражениеВУчете.СчетКт <> &СчетЕП
	|			ТОГДА ОтражениеВУчете.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ОтражениеВУчете.СчетКт = &СчетСО
	|				И ОтражениеВУчете.СубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОтражениеВУчете.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	-ВЫБОР
	|		КОГДА ОтражениеВУчете.СчетКт = &СчетСО
	|				И ОтражениеВУчете.СубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОтражениеВУчете.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ОтражениеВУчете.СчетКт = &СчетСН
	|			ТОГДА ОтражениеВУчете.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	-ВЫБОР
	|		КОГДА ОтражениеВУчете.СчетКт = &СчетСН
	|			ТОГДА ОтражениеВУчете.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ОтражениеВУчете.СчетДт <> ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда)
	|				И ОтражениеВУчете.СчетКт = &СчетОППВ
	|				И ОтражениеВУчете.СубконтоКт1 = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы)
	|				И ОтражениеВУчете.СубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОтражениеВУчете.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	-ВЫБОР
	|		КОГДА ОтражениеВУчете.СчетДт <> ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда)
	|				И ОтражениеВУчете.СчетКт = &СчетОППВ
	|				И ОтражениеВУчете.СубконтоКт1 = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы)
	|				И ОтражениеВУчете.СубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОтражениеВУчете.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ОтражениеВУчете.СчетКт = &СчетВОСМС
	|				И ОтражениеВУчете.СубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОтражениеВУчете.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	-ВЫБОР
	|		КОГДА ОтражениеВУчете.СчетКт = &СчетВОСМС
	|				И ОтражениеВУчете.СубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОтражениеВУчете.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ОтражениеВУчете.СчетКт = &СчетООСМС
	|				И ОтражениеВУчете.СубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОтражениеВУчете.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	-ВЫБОР
	|		КОГДА ОтражениеВУчете.СчетКт = &СчетООСМС
	|				И ОтражениеВУчете.СубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОтражениеВУчете.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ОтражениеВУчете.СчетКт = &СчетОПВ
	|				И ОтражениеВУчете.СубконтоКт1 = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы)
	|				И ОтражениеВУчете.СубконтоКт2 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОтражениеВУчете.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	-ВЫБОР
	|		КОГДА ОтражениеВУчете.СчетКт = &СчетОПВ
	|				И ОтражениеВУчете.СубконтоКт1 = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы)
	|				И ОтражениеВУчете.СубконтоКт2 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОтражениеВУчете.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ОтражениеВУчете.СчетКт = &СчетСО
	|				И ОтражениеВУчете.СубконтоКт1 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОтражениеВУчете.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	-ВЫБОР
	|		КОГДА ОтражениеВУчете.СчетКт = &СчетСО
	|				И ОтражениеВУчете.СубконтоКт1 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОтражениеВУчете.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ОтражениеВУчете.СчетКт = &СчетОППВ
	|				И ОтражениеВУчете.СубконтоКт1 = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы)
	|				И ОтражениеВУчете.СубконтоКт2 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОтражениеВУчете.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	-ВЫБОР
	|		КОГДА ОтражениеВУчете.СчетКт = &СчетОППВ
	|				И ОтражениеВУчете.СубконтоКт1 = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы)
	|				И ОтражениеВУчете.СубконтоКт2 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОтражениеВУчете.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ОтражениеВУчете.СчетКт = &СчетВОСМС
	|				И ОтражениеВУчете.СубконтоКт1 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОтражениеВУчете.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	-ВЫБОР
	|		КОГДА ОтражениеВУчете.СчетКт = &СчетВОСМС
	|				И ОтражениеВУчете.СубконтоКт1 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОтражениеВУчете.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ОтражениеВУчете.СчетКт = &СчетООСМС
	|				И ОтражениеВУчете.СубконтоКт1 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОтражениеВУчете.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	-ВЫБОР
	|		КОГДА ОтражениеВУчете.СчетКт = &СчетООСМС
	|				И ОтражениеВУчете.СубконтоКт1 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОтражениеВУчете.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ОтражениеВУчете.СчетКт = &СчетЕП
	|				И ОтражениеВУчете.СубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОтражениеВУчете.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	-ВЫБОР
	|		КОГДА ОтражениеВУчете.СчетКт = &СчетЕП
	|				И ОтражениеВУчете.СубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОтражениеВУчете.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ОтражениеВУчете.СчетКт = &СчетЕП
	|				И ОтражениеВУчете.СубконтоКт1 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОтражениеВУчете.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	-ВЫБОР
	|		КОГДА ОтражениеВУчете.СчетКт = &СчетЕП
	|				И ОтражениеВУчете.СубконтоКт1 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОтражениеВУчете.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ОтражениеВУчете.СчетДт <> ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда)
	|				И ОтражениеВУчете.СчетКт = &СчетОПВР
	|				И ОтражениеВУчете.СубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОтражениеВУчете.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	-ВЫБОР
	|		КОГДА ОтражениеВУчете.СчетДт <> ЗНАЧЕНИЕ(ПланСчетов.Типовой.КраткосрочнаяЗадолженностьПоОплатеТруда)
	|				И ОтражениеВУчете.СчетКт = &СчетОПВР
	|				И ОтражениеВУчете.СубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОтражениеВУчете.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ОтражениеВУчете.СчетКт = &СчетОПВР
	|				И ОтражениеВУчете.СубконтоКт1 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОтражениеВУчете.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	-ВЫБОР
	|		КОГДА ОтражениеВУчете.СчетКт = &СчетОПВР
	|				И ОтражениеВУчете.СубконтоКт1 <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|			ТОГДА ОтражениеВУчете.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	Документ.ОтражениеЗарплатыВРеглУчете.ОтражениеВУчете КАК ОтражениеВУчете
	|ГДЕ
	|	ОтражениеВУчете.Ссылка.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
	|	И ОтражениеВУчете.Ссылка.Проведен
	|	И ОтражениеВУчете.Ссылка.Организация В(&Организация)
	|	И ОтражениеВУчете.Сумма <> 0";
	
	
	Запрос.Текст = ДанныеЗПТекст;
	Запрос.Выполнить();
	
	ДанныеЗПТекст = "ДанныеЗП";
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(Данные.Начислено) КАК Начислено,
	|	СУММА(Данные.НачисленоБух) КАК НачисленоБух,
	|	СУММА(Данные.РазностьНачислено) КАК РазностьНачислено,
	|	СУММА(Данные.ИПН) КАК ИПН,
	|	СУММА(Данные.ИПНБух) КАК ИПНБух,
	|	СУММА(Данные.РазностьИПН) КАК РазностьИПН,
	|	СУММА(Данные.ОПВ) КАК ОПВ,
	|	СУММА(Данные.ОПВБух) КАК ОПВБух,
	|	СУММА(Данные.РазностьОПВ) КАК РазностьОПВ,
	|	СУММА(Данные.Удержано) КАК Удержано,
	|	СУММА(Данные.УдержаноБух) КАК УдержаноБух,
	|	СУММА(Данные.РазностьУдержано) КАК РазностьУдержано,
	|	СУММА(Данные.СоциальныеОтчисления) КАК СоциальныеОтчисления,
	|	СУММА(Данные.СоциальныеОтчисленияБух) КАК СоциальныеОтчисленияБух,
	|	СУММА(Данные.РазностьСоциальныеОтчисления) КАК РазностьСоциальныеОтчисления,
	|	СУММА(Данные.СоциальныйНалог) КАК СоциальныйНалог,
	|	СУММА(Данные.СоциальныйНалогБух) КАК СоциальныйНалогБух,
	|	СУММА(Данные.РазностьСоциальныйНалог) КАК РазностьСоциальныйНалог,
	|	СУММА(Данные.ОППВ) КАК ОППВ,
	|	СУММА(Данные.ОППВБух) КАК ОППВБух,
	|	СУММА(Данные.РазностьОППВ) КАК РазностьОППВ,
	|	СУММА(Данные.ВОСМС) КАК ВОСМС,
	|	СУММА(Данные.ВОСМСБух) КАК ВОСМСБух,
	|	СУММА(Данные.РазностьВОСМС) КАК РазностьВОСМС,
	|	СУММА(Данные.ООСМС) КАК ООСМС,
	|	СУММА(Данные.ООСМСБух) КАК ООСМСБух,
	|	СУММА(Данные.РазностьООСМС) КАК РазностьООСМС,
	|	СУММА(Данные.ПениОПВ) КАК ПениОПВ,
	|	СУММА(Данные.ПениОПВБух) КАК ПениОПВБух,
	|	СУММА(Данные.РазностьПениОПВ) КАК РазностьПениОПВ,
	|	СУММА(Данные.ПениСО) КАК ПениСО,
	|	СУММА(Данные.ПениСОБух) КАК ПениСОБух,
	|	СУММА(Данные.РазностьПениСО) КАК РазностьПениСО,
	|	СУММА(Данные.ПениОППВ) КАК ПениОППВ,
	|	СУММА(Данные.ПениОППВБух) КАК ПениОППВБух,
	|	СУММА(Данные.РазностьПениОППВ) КАК РазностьПениОППВ,
	|	СУММА(Данные.ПениВОСМС) КАК ПениВОСМС,
	|	СУММА(Данные.ПениВОСМСБух) КАК ПениВОСМСБух,
	|	СУММА(Данные.РазностьПениВОСМС) КАК РазностьПениВОСМС,
	|	СУММА(Данные.ПениООСМС) КАК ПениООСМС,
	|	СУММА(Данные.ПениООСМСБух) КАК ПениООСМСБух,
	|	СУММА(Данные.РазностьПениООСМС) КАК РазностьПениООСМС,
	|	СУММА(Данные.ОПВР) КАК ОПВР,
	|	СУММА(Данные.ОПВРБух) КАК ОПВРБух,
	|	СУММА(Данные.РазностьОПВР) КАК РазностьОПВР,
	|	СУММА(Данные.ПениОПВР) КАК ПениОПВР,
	|	СУММА(Данные.ПениОПВРБух) КАК ПениОПВРБух,
	|	СУММА(Данные.РазностьПениОПВР) КАК РазностьПениОПВР,
	|	Данные.ФизЛицо КАК ФизЛицо,
	|	Данные.ПериодРегистрации КАК ПериодРегистрации
	|{ВЫБРАТЬ
	|	Данные.Организация КАК Организация,
	|	Данные.ПериодРегистрации КАК ПериодРегистрации,
	|	Данные.ФизЛицо КАК ФизЛицо}
	|ИЗ
	|	ДанныеЗП КАК Данные
	|{ГДЕ
	|	Данные.Организация КАК Организация,
	|	Данные.ПериодРегистрации КАК ПериодРегистрации,
	|	Данные.ФизЛицо КАК ФизЛицо}
	|
	|СГРУППИРОВАТЬ ПО
	|	Данные.ФизЛицо,
	|	Данные.ПериодРегистрации
	|{УПОРЯДОЧИТЬ ПО
	|	Данные.Организация КАК Организация,
	|	Данные.ПериодРегистрации КАК ПериодРегистрации,
	|	Данные.ФизЛицо КАК ФизЛицо}
	|ИТОГИ
	|	СУММА(Начислено),
	|	СУММА(НачисленоБух),
	|	СУММА(РазностьНачислено),
	|	СУММА(ИПН),
	|	СУММА(ИПНБух),
	|	СУММА(РазностьИПН),
	|	СУММА(ОПВ),
	|	СУММА(ОПВБух),
	|	СУММА(РазностьОПВ),
	|	СУММА(Удержано),
	|	СУММА(УдержаноБух),
	|	СУММА(РазностьУдержано),
	|	СУММА(СоциальныеОтчисления),
	|	СУММА(СоциальныеОтчисленияБух),
	|	СУММА(РазностьСоциальныеОтчисления),
	|	СУММА(СоциальныйНалог),
	|	СУММА(СоциальныйНалогБух),
	|	СУММА(РазностьСоциальныйНалог),
	|	СУММА(ОППВ),
	|	СУММА(ОППВБух),
	|	СУММА(РазностьОППВ),
	|	СУММА(ВОСМС),
	|	СУММА(ВОСМСБух),
	|	СУММА(РазностьВОСМС),
	|	СУММА(ООСМС),
	|	СУММА(ООСМСБух),
	|	СУММА(РазностьООСМС),
	|	СУММА(ПениОПВ),
	|	СУММА(ПениОПВБух),
	|	СУММА(РазностьПениОПВ),
	|	СУММА(ПениСО),
	|	СУММА(ПениСОБух),
	|	СУММА(РазностьПениСО),
	|	СУММА(ПениОППВ),
	|	СУММА(ПениОППВБух),
	|	СУММА(РазностьПениОППВ),
	|	СУММА(ПениВОСМС),
	|	СУММА(ПениВОСМСБух),
	|	СУММА(РазностьПениВОСМС),
	|	СУММА(ПениООСМС),
	|	СУММА(ПениООСМСБух),
	|	СУММА(РазностьПениООСМС),
	|	СУММА(ОПВР),
	|	СУММА(ОПВРБух),
	|	СУММА(РазностьОПВР),
	|	СУММА(ПениОПВР),
	|	СУММА(ПениОПВРБух),
	|	СУММА(РазностьПениОПВР)
	|ПО
	|	ОБЩИЕ,
	|	Данные.ПериодРегистрации,
	|	Данные.ФизЛицо
	|{ИТОГИ ПО
	|	Данные.Организация КАК Организация,
	|	Данные.ПериодРегистрации КАК ПериодРегистрации,
	|	Данные.ФизЛицо КАК ФизЛицо}";
	
	Результат = Запрос.Выполнить();	
	ДеревоРез = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ТаблицаРез = Новый ТаблицаЗначений;
	ЗаполнитьЗначенияСвойств(ТаблицаРез.Колонки, Результат.Колонки);
	Если ДеревоРез.Строки.Количество() <> 0 Тогда
		СтрокаГруппы = ДеревоРез.Строки[0];
		Для Каждого Колонка Из Результат.Колонки Цикл
			ТаблицаРез.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения,Колонка.Имя,Колонка.Ширина);		
		КонецЦикла;
		Для Каждого СтрокиПоПериодуРегистрации Из СтрокаГруппы.Строки Цикл
			Для Каждого Строка Из СтрокиПоПериодуРегистрации.Строки Цикл
				НовСтрока = ТаблицаРез.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока,Строка);			
			КонецЦикла;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ ТЧЗарПлата ИЗ &ВнешнийИсточник Как Внешний";
		Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаРез);
		Результат = Запрос.Выполнить();
		
		ИтоговыйЗапрос = Новый Запрос;
		ИтоговыйЗапрос.МенеджерВременныхТаблиц = МенеджерВТ;
		
		ТекстЗап = "ВЫБРАТЬ 
		|       ИтогТаблица.Период,
		|       ИтогТаблица.Работник,
		|       ИтогТаблица.Показатель,
		|       ИтогТаблица.Разница
		|  ИЗ
		|(ВЫБРАТЬ 
		|  ТЧЗарПлата.ПериодРегистрации КАК Период,
		|  ТЧЗарПлата.ФизЛицо КАК Работник,
		|  ""Начисления"" КАК Показатель,
		|  ТЧЗарПлата.РазностьНачислено КАК Разница
		|
		|ИЗ ТЧЗарПлата
		| ГДЕ ТЧЗарПлата.РазностьНачислено <> 0
		|
		| ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		| ТЧЗарПлата.ПериодРегистрации,
		| ТЧЗарПлата.ФизЛицо,
		| ""ИПН"",
		| ТЧЗарПлата.РазностьИПН
		|
		|ИЗ ТЧЗарПлата
		| ГДЕ ТЧЗарПлата.РазностьИПН <> 0
		|
		| ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		| ТЧЗарПлата.ПериодРегистрации,
		| ТЧЗарПлата.ФизЛицо,
		| ""ОПВ"",
		| ТЧЗарПлата.РазностьОПВ
		|
		|ИЗ ТЧЗарПлата
		| ГДЕ ТЧЗарПлата.РазностьОПВ <> 0				
		|
		| ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		| ТЧЗарПлата.ПериодРегистрации,
		| ТЧЗарПлата.ФизЛицо,
		| ""Прочие удержания"",
		| ТЧЗарПлата.РазностьУдержано
		|
		|ИЗ ТЧЗарПлата
		| ГДЕ ТЧЗарПлата.РазностьУдержано <> 0				
		|
		| ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		| ТЧЗарПлата.ПериодРегистрации,
		| ТЧЗарПлата.ФизЛицо,
		| ""Социальные отчисления"",
		| ТЧЗарПлата.РазностьСоциальныеОтчисления
		|
		|ИЗ ТЧЗарПлата
		| ГДЕ ТЧЗарПлата.РазностьСоциальныеОтчисления <> 0				
		|
		| ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		| ТЧЗарПлата.ПериодРегистрации,
		| ТЧЗарПлата.ФизЛицо,
		| ""Социальный налог"",
		| ТЧЗарПлата.РазностьСоциальныйНалог
		|
		|ИЗ ТЧЗарПлата
		| ГДЕ ТЧЗарПлата.РазностьСоциальныйНалог <> 0				
		|
		| ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		| ТЧЗарПлата.ПериодРегистрации,
		| ТЧЗарПлата.ФизЛицо,
		| ""ОППВ"",
		| ТЧЗарПлата.РазностьОППВ
		|
		|ИЗ ТЧЗарПлата
		| ГДЕ ТЧЗарПлата.РазностьОППВ <> 0
		|
		| ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		| ТЧЗарПлата.ПериодРегистрации,
		| ТЧЗарПлата.ФизЛицо,
		| ""ОПВР"",
		| ТЧЗарПлата.РазностьОПВР
		|
		|ИЗ ТЧЗарПлата
		| ГДЕ ТЧЗарПлата.РазностьОПВР <> 0		
		|
		| ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		| ТЧЗарПлата.ПериодРегистрации,
		| ТЧЗарПлата.ФизЛицо,
		| ""Взносы ОСМС"",
		| ТЧЗарПлата.РазностьВОСМС
		|
		|ИЗ ТЧЗарПлата
		| ГДЕ ТЧЗарПлата.РазностьВОСМС <> 0				
		|
		| ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		| ТЧЗарПлата.ПериодРегистрации,
		| ТЧЗарПлата.ФизЛицо,
		| ""Отчисления ОСМС"",
		| ТЧЗарПлата.РазностьООСМС
		|
		|ИЗ ТЧЗарПлата
		| ГДЕ ТЧЗарПлата.РазностьООСМС <> 0				
		|
		| ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		| ТЧЗарПлата.ПериодРегистрации,
		| ТЧЗарПлата.ФизЛицо,
		| ""Пени по ОПВ"",
		| ТЧЗарПлата.РазностьПениОПВ
		|
		|ИЗ ТЧЗарПлата
		| ГДЕ ТЧЗарПлата.РазностьПениОПВ <> 0				
		|
		| ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		| ТЧЗарПлата.ПериодРегистрации,
		| ТЧЗарПлата.ФизЛицо,
		| ""Пени по СО"",
		| ТЧЗарПлата.РазностьПениСО
		|
		|ИЗ ТЧЗарПлата
		| ГДЕ ТЧЗарПлата.РазностьПениСО <> 0 
		|
		| ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		| ТЧЗарПлата.ПериодРегистрации,
		| ТЧЗарПлата.ФизЛицо,
		| ""Пени по ОППВ"",
		| ТЧЗарПлата.РазностьПениОППВ
		|
		|ИЗ ТЧЗарПлата
		| ГДЕ ТЧЗарПлата.РазностьПениОППВ <> 0
		|
		| ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		| ТЧЗарПлата.ПериодРегистрации,
		| ТЧЗарПлата.ФизЛицо,
		| ""Пени по ОПВР"",
		| ТЧЗарПлата.РазностьПениОПВР
		|
		|ИЗ ТЧЗарПлата
		| ГДЕ ТЧЗарПлата.РазностьПениОПВР <> 0
		|
		| ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		| ТЧЗарПлата.ПериодРегистрации,
		| ТЧЗарПлата.ФизЛицо,
		| ""Пени по взносам ОСМС"",
		| ТЧЗарПлата.РазностьПениВОСМС
		|
		|ИЗ ТЧЗарПлата
		| ГДЕ ТЧЗарПлата.РазностьПениВОСМС <> 0				
		|
		| ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		| ТЧЗарПлата.ПериодРегистрации,
		| ТЧЗарПлата.ФизЛицо,
		| ""Пени по отчислениям ОСМС"",
		| ТЧЗарПлата.РазностьПениООСМС
		|
		|ИЗ ТЧЗарПлата
		| ГДЕ ТЧЗарПлата.РазностьПениООСМС <> 0				
		|
		|)  КАК ИтогТаблица
		| УПОРЯДОЧИТЬ ПО ИтогТаблица.Период, ИтогТаблица.Работник.Наименование, ИтогТаблица.Показатель ";
		
		ИтоговыйЗапрос.Текст = ТекстЗап;
		
		Результат = ИтоговыйЗапрос.Выполнить();	
		
		СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
		СтрокаПравила.ПроверкаВыполнена = Истина;
	Иначе
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Истина;
	КонецЕсли;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ОтражениеЗПРегУчРезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("Разница", НСтр("ru = 'Начислено(удержано) - отражено'"));
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ОтражениеЗПРегУчСтруктураЗаголовков", СтруктураЗаголовков);
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Работник", "Работник");
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ОтражениеЗПРегУчСтруктураРасшифровки", СтруктураРасшифровки);
		СтруктураФорматаПолей = Новый Структура;			
		СтруктураФорматаПолей.Вставить("Период", "ДФ = дд.ММ.гггг");
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ОтражениеЗПРегУчСтруктураФорматаПолей", СтруктураФорматаПолей);
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("Период",   20);
		СтруктураШириныКолонок.Вставить("Работник", 60);
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ОтражениеЗПРегУчСтруктураШириныКолонок", СтруктураШириныКолонок);
	КонецЕсли; 	
	
КонецПроцедуры

Процедура ПроверитьПравилоУдержаниеИПНиОПВ(СтрокаПравила, ПараметрыОтчета)
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Организация"				, ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", ПараметрыОтчета.СтруктурноеПодразделение);
	
	УпрощенныйУчетИПНиОПВ = УчетнаяПолитикаСервер.УпрощенныйУчетИПНиОПВ(ПараметрыОтчета.Организация, КонецДня(ПараметрыОтчета.ДатаКон));
	
	Если НЕ УпрощенныйУчетИПНиОПВ Тогда
		
		// проверим за все ли месяцы в периоде проверки есть документы
		// Сначала базовая таблица периодов
		ТекстЗапросаПоМесяцам = "";
		МесяцНачала = Месяц(ПараметрыОтчета.ДатаНач);
		МесяцКонца  = Месяц(ПараметрыОтчета.ДатаКон);
		Для Счетчик = МесяцНачала по МесяцКонца Цикл
			Если Не ТекстЗапросаПоМесяцам = "" ТОгда
				ТекстЗапросаПоМесяцам = ТекстЗапросаПоМесяцам + "
				| ОБЪЕДИНИТЬ ВСЕ
				| ";
			КонецЕсли;
			ТекстЗапросаПоМесяцам = ТекстЗапросаПоМесяцам +  "
									|	ВЫБРАТЬ
									|	&Дата" + СокрЛП(Счетчик) + " как Период		                        
									| ";
			Запрос.УстановитьПараметр("Дата" + СокрЛП(Счетчик), НачалоМесяца(ДобавитьМесяц(ПараметрыОтчета.ДатаНач,Счетчик - Месяц(ПараметрыОтчета.ДатаНач))));	
		КонецЦикла;	
		
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		               |	ИтоговаяТаблица.Период
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		ТаблицаПоМесяцам.Период КАК Период,
		               |		ДокУдержаниеИПНиОПВ.Ссылка КАК ДокументУдержание,
					   |		ДокУдержаниеИПНиОПВ.Организация КАК Организация,
					   |		ДокРасчетИПНиОПВ.Ссылка КАК ДокументНачисление
		               |	ИЗ
		               |		(" + ТекстЗапросаПоМесяцам + ") КАК ТаблицаПоМесяцам
		               |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.УдержаниеИПНиОПВНУ КАК ДокУдержаниеИПНиОПВ
		               |			ПО ТаблицаПоМесяцам.Период = ДокУдержаниеИПНиОПВ.ПериодРегистрации
		               |				И (ДокУдержаниеИПНиОПВ.Организация = &Организация)
					   |				И (ДокУдержаниеИПНиОПВ.СтруктурноеПодразделение = &СтруктурноеПодразделение)
					   |				И ДокУдержаниеИПНиОПВ.Проведен = ИСТИНА
		               |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасчетУдержанийРаботниковОрганизаций КАК ДокРасчетИПНиОПВ
		               |			ПО ТаблицаПоМесяцам.Период = ДокРасчетИПНиОПВ.ПериодРегистрации
		               |				И (ДокРасчетИПНиОПВ.Организация = &Организация)
					   |				И (ДокРасчетИПНиОПВ.СтруктурноеПодразделение = &СтруктурноеПодразделение)
					   |				И ДокРасчетИПНиОПВ.Проведен = ИСТИНА) КАК ИтоговаяТаблица
		               |ГДЕ
		               |	ИтоговаяТаблица.ДокументУдержание ЕСТЬ NULL И НЕ ИтоговаяТаблица.ДокументНачисление ЕСТЬ NULL";
					   
		Результат = Запрос.Выполнить();	
		
		СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
		СтрокаПравила.ПроверкаВыполнена = Истина;
		
		Если СтрокаПравила.ОбнаруженыОшибки Тогда
			ТаблицаРезультата = Результат.Выгрузить();
			ТаблицаИсходящихДанных = Новый ТаблицаЗначений;
			ТаблицаИсходящихДанных.Колонки.Добавить("Период");
			Для Каждого Строка Из ТаблицаРезультата Цикл 
				НоваяСтрока = ТаблицаИсходящихДанных.Добавить();
				НоваяСтрока.Период = Формат(Строка.Период, "ДФ='ММММ гггг'");
			КонецЦикла;
			ПараметрыОтчета.ИсходящиеДанные.Вставить("УдержаниеИПНиОПВТаблицаЗначений", ТаблицаИсходящихДанных);
			
			СтруктураЗаголовков = Новый Структура;
			СтруктураЗаголовков.Вставить("Период", НСтр("ru = 'Период, в котором не обнаружено документов ""Удержание ИПН, ОПВ и ВОСМС по налоговому учету"".'"));
			ПараметрыОтчета.ИсходящиеДанные.Вставить("УдержаниеИПНиОПВСтруктураЗаголовков", СтруктураЗаголовков);			
			
			СтруктураШириныКолонок = Новый Структура;
			СтруктураШириныКолонок.Вставить("Период" , 150);
			ПараметрыОтчета.ИсходящиеДанные.Вставить("УдержаниеИПНиОПВСтруктураШириныКолонок", СтруктураШириныКолонок);
		КонецЕсли; 
				
	Иначе
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Истина;
		СтрокаПравила.КомментарийРезультата = НСтр("ru = 'В учетной политике используется упрощенный учет ИПН, ОПВ и ВОСМС, поэтому необходимости в создании документов ""Удержание ИПН, ОПВ и ВОСМС по налоговому учету"" нет.'");
		
	КонецЕсли;	
	
КонецПроцедуры // ПроверитьПравилоУдержаниеИПНиОПВ()

Процедура ПроверитьПравилоРасчетНалогов(СтрокаПравила, ПараметрыОтчета)
	
	// проверим есть ли данные для проверки
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ИПНСведенияОДоходах.ФизЛицо КАК ФизЛицо,
	               |	ИПНСведенияОДоходах.ПериодРегистрации КАК ПериодРегистрации
	               |ИЗ
	               |	РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
	               |ГДЕ
	               |	ИПНСведенияОДоходах.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
	               |	И ИПНСведенияОДоходах.Организация = &Организация
	               |	И ИПНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ОПВСведенияОДоходах.ФизЛицо,
	               |	ОПВСведенияОДоходах.ПериодРегистрации
	               |ИЗ
	               |	РегистрНакопления.ОПВСведенияОДоходах КАК ОПВСведенияОДоходах
	               |ГДЕ
	               |	ОПВСведенияОДоходах.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
	               |	И ОПВСведенияОДоходах.Организация = &Организация
	               |	И ОПВСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СОСведенияОДоходах.ФизЛицо,
	               |	СОСведенияОДоходах.ПериодРегистрации
	               |ИЗ
	               |	РегистрНакопления.СОСведенияОДоходах КАК СОСведенияОДоходах
	               |ГДЕ
	               |	СОСведенияОДоходах.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
	               |	И СОСведенияОДоходах.Организация = &Организация
	               |	И СОСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СНСведенияОДоходах.ФизЛицо,
	               |	СНСведенияОДоходах.ПериодРегистрации
	               |ИЗ
	               |	РегистрНакопления.СНСведенияОДоходах КАК СНСведенияОДоходах
	               |ГДЕ
	               |	СНСведенияОДоходах.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
	               |	И СНСведенияОДоходах.Организация = &Организация
	               |	И СНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ОППВСведенияОДоходах.ФизЛицо,
	               |	ОППВСведенияОДоходах.ПериодРегистрации
	               |ИЗ
	               |	РегистрНакопления.ОППВСведенияОДоходах КАК ОППВСведенияОДоходах
	               |ГДЕ
	               |	ОППВСведенияОДоходах.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
	               |	И ОППВСведенияОДоходах.Организация = &Организация
	               |	И ОППВСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	               | 
				   |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ОПВРСведенияОДоходах.ФизЛицо,
	               |	ОПВРСведенияОДоходах.ПериодРегистрации
	               |ИЗ
	               |	РегистрНакопления.ОПВРСведенияОДоходах КАК ОПВРСведенияОДоходах
	               |ГДЕ
	               |	ОПВРСведенияОДоходах.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
	               |	И ОПВРСведенияОДоходах.Организация = &Организация
	               |	И ОПВРСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВОСМССведенияОДоходах.ФизЛицо,
	               |	ВОСМССведенияОДоходах.ПериодРегистрации
	               |ИЗ
	               |	РегистрНакопления.ВОСМССведенияОДоходах КАК ВОСМССведенияОДоходах
	               |ГДЕ
	               |	ВОСМССведенияОДоходах.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
	               |	И ВОСМССведенияОДоходах.Организация = &Организация
	               |	И ВОСМССведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ООСМССведенияОДоходах.ФизЛицо,
	               |	ООСМССведенияОДоходах.ПериодРегистрации
	               |ИЗ
	               |	РегистрНакопления.ООСМССведенияОДоходах КАК ООСМССведенияОДоходах
	               |ГДЕ
	               |	ООСМССведенияОДоходах.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
	               |	И ООСМССведенияОДоходах.Организация = &Организация
	               |	И ООСМССведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЕПСведенияОДоходах.ФизЛицо,
	               |	ЕПСведенияОДоходах.ПериодРегистрации
	               |ИЗ
	               |	РегистрНакопления.ЕПСведенияОДоходах КАК ЕПСведенияОДоходах
	               |ГДЕ
	               |	ЕПСведенияОДоходах.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
	               |	И ЕПСведенияОДоходах.Организация = &Организация
	               |	И ЕПСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)";
				   
	Запрос.УстановитьПараметр("ДатаНач",			 ПараметрыОтчета.ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон",			 КонецДня(ПараметрыОтчета.ДатаКон));
	Запрос.УстановитьПараметр("Организация", 		 ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ИПН", 		         НСтр("ru = 'ИПН'"));
	Запрос.УстановитьПараметр("ОПВ", 		         НСтр("ru = 'ОПВ'"));
	Запрос.УстановитьПараметр("СН", 		         НСтр("ru = 'СН'")); 
	Запрос.УстановитьПараметр("СО", 		         НСтр("ru = 'СО'"));
	Запрос.УстановитьПараметр("ОППВ", 		         НСтр("ru = 'ОППВ'"));
	Запрос.УстановитьПараметр("ОПВР", 		         НСтр("ru = 'ОПВР'"));
	Запрос.УстановитьПараметр("ВзносыОСМС", 		 НСтр("ru = 'Взносы ОСМС'"));
	Запрос.УстановитьПараметр("ОтчисленияОСМС", 	 НСтр("ru = 'Отчисления ОСМС'"));
	Запрос.УстановитьПараметр("ЕдиныйПлатеж", 	     НСтр("ru = 'Единый платеж'"));
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();	
	
	Если Результат.Пустой() Тогда
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Истина;
		СтрокаПравила.КомментарийРезультата = НСтр("ru = 'Данных для проверки не обнаружено.'");
		Возврат;
	КонецЕсли;	
			
	// ИПН
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ИПНСведенияОДоходах.ФизЛицо КАК ФизЛицо,
	               |	ИПНСведенияОДоходах.ПериодРегистрации КАК ПериодРегистрации
	               |ПОМЕСТИТЬ ВТИПНСведенияОДоходах
	               |ИЗ
	               |	РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
	               |ГДЕ
	               |	ИПНСведенияОДоходах.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
	               |	И ИПНСведенияОДоходах.Организация = &Организация
	               |	И ИПНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ИПНРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	               |	ИПНРасчетыСБюджетом.Период КАК Период
	               |ПОМЕСТИТЬ ВТИПНРасчетыСБюджетом
	               |ИЗ
	               |	РегистрНакопления.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
	               |ГДЕ
	               |	ИПНРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	               |	И ИПНРасчетыСБюджетом.Организация = &Организация
	               |	И ИПНРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ИПНСведенияОДоходахОбороты.ФизЛицо,
	               |	ИПНСведенияОДоходахОбороты.ПериодРегистрации
	               |ИЗ
	               |	РегистрНакопления.ИПНСведенияОДоходах.Обороты(, , Месяц, Организация = &Организация) КАК ИПНСведенияОДоходахОбороты
	               |ГДЕ
	               |	(ИПНСведенияОДоходахОбороты.ПримененныйВычетОборот <> 0
	               |			ИЛИ ИПНСведенияОДоходахОбороты.ПримененнаяЛьготаОборот <> 0)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо,
	               |	СведенияОбИсчисленииВычетовИПНОбороты.ПериодРегистрации
	               |ИЗ
	               |	РегистрНакопления.СведенияОбИсчисленииВычетовИПН.Обороты(, , Месяц, Организация = &Организация) КАК СведенияОбИсчисленииВычетовИПНОбороты
	               |ГДЕ
	               |	СведенияОбИсчисленииВычетовИПНОбороты.ПримененныйВычетОборот <> 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИПНСведенияОДоходах.ФизЛицо КАК ФизЛицо,
	               |	ИПНСведенияОДоходах.ПериодРегистрации,
	               |	&ИПН КАК ВидНалога
	               |ПОМЕСТИТЬ ВТ_НеИсчисленныйИПН
	               |ИЗ
	               |	ВТИПНСведенияОДоходах КАК ИПНСведенияОДоходах
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
	               |		ПО ИПНСведенияОДоходах.ФизЛицо = ИПНРасчетыСБюджетом.ФизЛицо
	               |			И (НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.Период, МЕСЯЦ))
	               |ГДЕ
	               |	ИПНРасчетыСБюджетом.Период ЕСТЬ NULL ";	
	
	Запрос.Выполнить();						
	
	НеИсчисленныйИПНТекст = "ВЫБРАТЬ
		                       |	ТаблицаИПН.ФизЛицо,
		                       |	ТаблицаИПН.ПериодРегистрации,
		                       |	ТаблицаИПН.ВидНалога
		                       |ИЗ
		                       |	ВТ_НеИсчисленныйИПН КАК ТаблицаИПН";
			
	// ОПВ						   
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ИтоговаяТаблица.ФизЛицо КАК ФизЛицо,
	               |	ИтоговаяТаблица.ПериодРегистрации КАК ПериодРегистрации,
	               |	ИтоговаяТаблица.ВидНалога КАК ВидНалога
	               |ПОМЕСТИТЬ ВТ_НеИсчисленныйОПВ
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ТаблицаСоСрезами.ФизЛицо КАК ФизЛицо,
	               |		ТаблицаСоСрезами.ПериодРегистрации КАК ПериодРегистрации,
	               |		ТаблицаСоСрезами.ВидНалога КАК ВидНалога,
	               |		ГражданствоФизЛиц.НеИмеетПравоНаПенсию КАК НеИмеетПравоНаПенсию,
	               |		СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер КАК Пенсионер,
	               |		СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности КАК ОтношениеКИнвалидности,
	               |		СведенияОбИнвалидностиФизлиц.ГруппаИнвалидности КАК ГруппаИнвалидности,
	               |		СведенияОбИнвалидностиФизлиц.СрокДействияСправки КАК СрокДействияСправки
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			НеИсчисленныйОПВ.ФизЛицо КАК ФизЛицо,
	               |			НеИсчисленныйОПВ.ПериодРегистрации КАК ПериодРегистрации,
	               |			НеИсчисленныйОПВ.ВидНалога КАК ВидНалога,
	               |			МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодСрезаГражданствоФизЛиц,
	               |			МАКСИМУМ(СведенияОПенсионномОбеспеченииФизЛиц.Период) КАК ПериодСрезаСведенияОПенсОбесп,
	               |			МАКСИМУМ(СведенияОбИнвалидностиФизлиц.Период) КАК ПериодСрезаСведенияОбИнвалидности
	               |		ИЗ
	               |			(ВЫБРАТЬ
	               |				ОПВСведенияОДоходах.ФизЛицо КАК ФизЛицо,
	               |				ОПВСведенияОДоходах.ПериодРегистрации КАК ПериодРегистрации,
	               |				&ОПВ КАК ВидНалога
	               |			ИЗ
	               |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |					ОПВСведенияОДоходах.ФизЛицо КАК ФизЛицо,
	               |					ОПВСведенияОДоходах.ПериодРегистрации КАК ПериодРегистрации
	               |				ИЗ
	               |					РегистрНакопления.ОПВСведенияОДоходах КАК ОПВСведенияОДоходах
	               |				ГДЕ
	               |					ОПВСведенияОДоходах.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
	               |					И ОПВСведенияОДоходах.Организация = &Организация
	               |					И ОПВСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)) КАК ОПВСведенияОДоходах
	               |					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |						ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	               |						ЕСТЬNULL(Контрагенты.ФизЛицо, ОПВРасчетыСФондами.ФизЛицо) КАК ФизФизЛицо,
	               |						ОПВРасчетыСФондами.Период КАК Период
	               |					ИЗ
	               |						РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	               |							ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	               |							ПО (Контрагенты.Ссылка = ОПВРасчетыСФондами.ФизЛицо)
	               |					ГДЕ
	               |						ОПВРасчетыСФондами.Организация = &Организация
	               |						И ОПВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |						И ОПВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	               |						И ОПВРасчетыСФондами.ВидПлатежа В(&ВидыПлатежей)) КАК ОПВРасчетыСФондами
	               |					ПО (ОПВСведенияОДоходах.ФизЛицо В (ОПВРасчетыСФондами.ФизЛицо, ОПВРасчетыСФондами.ФизФизЛицо))
	               |						И (НАЧАЛОПЕРИОДА(ОПВСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.Период, МЕСЯЦ))
	               |			ГДЕ
	               |				ОПВРасчетыСФондами.Период ЕСТЬ NULL) КАК НеИсчисленныйОПВ
	               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	               |				ПО (ВЫБОР
	               |						КОГДА НеИсчисленныйОПВ.ФизЛицо ССЫЛКА Справочник.Контрагенты
	               |							ТОГДА НеИсчисленныйОПВ.ФизЛицо.ФизЛицо
	               |						ИНАЧЕ НеИсчисленныйОПВ.ФизЛицо
	               |					КОНЕЦ = ГражданствоФизЛиц.ФизЛицо)
	               |					И (ГражданствоФизЛиц.Период <= КОНЕЦПЕРИОДА(НеИсчисленныйОПВ.ПериодРегистрации, МЕСЯЦ))
	               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц КАК СведенияОПенсионномОбеспеченииФизЛиц
	               |				ПО (ВЫБОР
	               |						КОГДА НеИсчисленныйОПВ.ФизЛицо ССЫЛКА Справочник.Контрагенты
	               |							ТОГДА НеИсчисленныйОПВ.ФизЛицо.ФизЛицо
	               |						ИНАЧЕ НеИсчисленныйОПВ.ФизЛицо
	               |					КОНЕЦ = СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо)
	               |					И (СведенияОПенсионномОбеспеченииФизЛиц.Период <= КОНЕЦПЕРИОДА(НеИсчисленныйОПВ.ПериодРегистрации, МЕСЯЦ))
	               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК СведенияОбИнвалидностиФизлиц
	               |				ПО (ВЫБОР
	               |						КОГДА НеИсчисленныйОПВ.ФизЛицо ССЫЛКА Справочник.Контрагенты
	               |							ТОГДА НеИсчисленныйОПВ.ФизЛицо.ФизЛицо
	               |						ИНАЧЕ НеИсчисленныйОПВ.ФизЛицо
	               |					КОНЕЦ = СведенияОбИнвалидностиФизлиц.Физлицо)
	               |					И (СведенияОбИнвалидностиФизлиц.Период <= КОНЕЦПЕРИОДА(НеИсчисленныйОПВ.ПериодРегистрации, МЕСЯЦ))
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			НеИсчисленныйОПВ.ФизЛицо,
	               |			НеИсчисленныйОПВ.ПериодРегистрации,
	               |			НеИсчисленныйОПВ.ВидНалога) КАК ТаблицаСоСрезами
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	               |			ПО ТаблицаСоСрезами.ПериодСрезаГражданствоФизЛиц = ГражданствоФизЛиц.Период
	               |				И (ВЫБОР
	               |					КОГДА ТаблицаСоСрезами.ФизЛицо ССЫЛКА Справочник.Контрагенты
	               |						ТОГДА ТаблицаСоСрезами.ФизЛицо.ФизЛицо
	               |					ИНАЧЕ ТаблицаСоСрезами.ФизЛицо
	               |				КОНЕЦ = ГражданствоФизЛиц.ФизЛицо)
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц КАК СведенияОПенсионномОбеспеченииФизЛиц
	               |			ПО ТаблицаСоСрезами.ПериодСрезаСведенияОПенсОбесп = СведенияОПенсионномОбеспеченииФизЛиц.Период
	               |				И (ВЫБОР
	               |					КОГДА ТаблицаСоСрезами.ФизЛицо ССЫЛКА Справочник.Контрагенты
	               |						ТОГДА ТаблицаСоСрезами.ФизЛицо.ФизЛицо
	               |					ИНАЧЕ ТаблицаСоСрезами.ФизЛицо
	               |				КОНЕЦ = СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо)
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК СведенияОбИнвалидностиФизлиц
	               |			ПО (ВЫБОР
	               |					КОГДА ТаблицаСоСрезами.ФизЛицо ССЫЛКА Справочник.Контрагенты
	               |						ТОГДА ТаблицаСоСрезами.ФизЛицо.ФизЛицо
	               |					ИНАЧЕ ТаблицаСоСрезами.ФизЛицо
	               |				КОНЕЦ = СведенияОбИнвалидностиФизлиц.Физлицо)
	               |				И ТаблицаСоСрезами.ПериодСрезаСведенияОбИнвалидности = СведенияОбИнвалидностиФизлиц.Период) КАК ИтоговаяТаблица
	               |ГДЕ
	               |	(НЕ ИтоговаяТаблица.НеИмеетПравоНаПенсию
	               |			ИЛИ ИтоговаяТаблица.НеИмеетПравоНаПенсию ЕСТЬ NULL)
	               |	И (НЕ ИтоговаяТаблица.Пенсионер
	               |			ИЛИ ИтоговаяТаблица.Пенсионер ЕСТЬ NULL)
	               |	И (НЕ(ИтоговаяТаблица.ОтношениеКИнвалидности = &парамИнвалид
	               |					И ИтоговаяТаблица.ГруппаИнвалидности В (&парамСписокГруппИнвалидности)
	               |					И ИтоговаяТаблица.СрокДействияСправки = &парамПустаяДата)
	               |			ИЛИ ИтоговаяТаблица.ОтношениеКИнвалидности ЕСТЬ NULL)";	
							
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("парамИнвалид", Перечисления.ОтношениеКИнвалидности.Инвалид);
	СписокГруппИнвалидности = Новый СписокЗначений;
	СписокГруппИнвалидности.Добавить("I");
	СписокГруппИнвалидности.Добавить("II");
	Запрос.УстановитьПараметр("парамСписокГруппИнвалидности",  СписокГруппИнвалидности);
	ВидыПлатежей = Новый СписокЗначений;
	ВидыПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	ВидыПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.НалогАкт);
	ВидыПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.НалогСам);
	Запрос.УстановитьПараметр("ВидыПлатежей", ВидыПлатежей);
	Запрос.УстановитьПараметр("парамПустаяДата", '00010101');
	Запрос.Выполнить();
	НеИсчисленныйОПВТекст = "ВЫБРАТЬ
		                       |	ТаблицаОПВ.ФизЛицо,
		                       |	ТаблицаОПВ.ПериодРегистрации,
		                       |	ТаблицаОПВ.ВидНалога
		                       |ИЗ
		                       |	ВТ_НеИсчисленныйОПВ КАК ТаблицаОПВ";
	
	// СН						   
	ОрганизацияЯвляетсяПлательщикомСН = УчетнаяПолитикаСервер.ОрганизацияЯвляетсяПлательщикомСН(ПараметрыОтчета.Организация, ПараметрыОтчета.ДатаКон);

	Если ОрганизацияЯвляетсяПлательщикомСН Тогда
		
		// тоже самое как для ИПН, только регистр то оборотный...
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СНСведенияОДоходах.ФизЛицо КАК ФизЛицо,
		|	СНСведенияОДоходах.ПериодРегистрации КАК ПериодРегистрации,
		|	&СН КАК ВидНалога
		|ПОМЕСТИТЬ ВТ_НеИсчисленныйСН
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		СНСведенияОДоходах.ФизЛицо КАК ФизЛицо,
		|		СНСведенияОДоходах.ПериодРегистрации КАК ПериодРегистрации
		|	ИЗ
		|		РегистрНакопления.СНСведенияОДоходах КАК СНСведенияОДоходах
		|	ГДЕ
		|		СНСведенияОДоходах.Организация = &Организация
		|		И СНСведенияОДоходах.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
		|		И СНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)) КАК СНСведенияОДоходах
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			СНИсчисленный.ФизЛицо КАК ФизЛицо,
		|			СНИсчисленный.Период КАК Период
		|		ИЗ
		|			РегистрНакопления.СНИсчисленный КАК СНИсчисленный
		|		ГДЕ
		|			СНИсчисленный.Организация = &Организация
		|		
		|		ОБЪЕДИНИТЬ
		|		
		|		ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			РасчетСНиСОИсчисленныйСН.ФизЛицо,
		|			РасчетСНиСО.ПериодРегистрации
		|		ИЗ
		|			Документ.РасчетСНиСО.ИсчисленныйСН КАК РасчетСНиСОИсчисленныйСН
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасчетСНиСО КАК РасчетСНиСО
		|				ПО РасчетСНиСОИсчисленныйСН.Ссылка = РасчетСНиСО.Ссылка
		|		ГДЕ
		|			РасчетСНиСО.Организация = &Организация
		|			И РасчетСНиСО.Проведен
		|			И РасчетСНиСОИсчисленныйСН.Налог = 0) КАК СНИсчисленный
		|		ПО СНСведенияОДоходах.ФизЛицо = СНИсчисленный.ФизЛицо
		|			И (НАЧАЛОПЕРИОДА(СНСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(СНИсчисленный.Период, МЕСЯЦ))
		|ГДЕ
		|	СНИсчисленный.Период ЕСТЬ NULL";
		
		Запрос.Выполнить();
		НеИсчисленныйСНТекст =
		"ВЫБРАТЬ
		|	ТаблицаСН.ФизЛицо КАК ФизЛицо,
		|	ТаблицаСН.ПериодРегистрации КАК ПериодРегистрации,
		|	ТаблицаСН.ВидНалога КАК ВидНалога
		|ИЗ
		|	ВТ_НеИсчисленныйСН КАК ТаблицаСН";
	КонецЕсли;
	
	// СО
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ИтоговаяТаблица.ФизЛицо,
	               |	ИтоговаяТаблица.ПериодРегистрации,
	               |	ИтоговаяТаблица.ВидНалога
	               |ПОМЕСТИТЬ ВТ_НеИсчисленныйСО
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ТаблицаСоСрезами.ФизЛицо КАК ФизЛицо,
	               |		ТаблицаСоСрезами.ПериодРегистрации КАК ПериодРегистрации,
	               |		ТаблицаСоСрезами.ВидНалога КАК ВидНалога,
	               |		ГражданствоФизЛиц.НеПодлежитСоциальномуСтрахованию КАК НеПодлежитСоциальномуСтрахованию,
	               |		СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер КАК Пенсионер
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			НеИсчисленныйСО.ФизЛицо КАК ФизЛицо,
	               |			НеИсчисленныйСО.ПериодРегистрации КАК ПериодРегистрации,
	               |			НеИсчисленныйСО.ВидНалога КАК ВидНалога,
	               |			МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодСрезаГражданствоФизЛиц,
	               |			МАКСИМУМ(СведенияОПенсионномОбеспеченииФизЛиц.Период) КАК ПериодСрезаСведенияОПенсОбесп
	               |		ИЗ
	               |			(ВЫБРАТЬ
	               |				СОСведенияОДоходах.ФизЛицо КАК ФизЛицо,
	               |				СОСведенияОДоходах.ПериодРегистрации КАК ПериодРегистрации,
	               |				&СО КАК ВидНалога
	               |			ИЗ
	               |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |					СОСведенияОДоходах.ФизЛицо КАК ФизЛицо,
	               |					СОСведенияОДоходах.ПериодРегистрации КАК ПериодРегистрации
	               |				ИЗ
	               |					РегистрНакопления.СОСведенияОДоходах КАК СОСведенияОДоходах
	               |				ГДЕ
	               |					СОСведенияОДоходах.Организация = &Организация
	               |					И СОСведенияОДоходах.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
	               |					И СОСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)) КАК СОСведенияОДоходах
	               |					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |						СОРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	               |						СОРасчетыСФондами.Период КАК Период
	               |					ИЗ
	               |						РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	               |					ГДЕ
	               |						СОРасчетыСФондами.Организация = &Организация
	               |						И СОРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |						И СОРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)) КАК СОРасчетыСФондами
	               |					ПО СОСведенияОДоходах.ФизЛицо = СОРасчетыСФондами.ФизЛицо
	               |						И (НАЧАЛОПЕРИОДА(СОСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(СОРасчетыСФондами.Период, МЕСЯЦ))
	               |			ГДЕ
	               |				СОРасчетыСФондами.Период ЕСТЬ NULL ) КАК НеИсчисленныйСО
	               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	               |				ПО (ГражданствоФизЛиц.ФизЛицо = НеИсчисленныйСО.ФизЛицо)
	               |					И (ГражданствоФизЛиц.Период <= КОНЕЦПЕРИОДА(НеИсчисленныйСО.ПериодРегистрации, МЕСЯЦ))
	               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц КАК СведенияОПенсионномОбеспеченииФизЛиц
	               |				ПО (СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо = НеИсчисленныйСО.ФизЛицо)
	               |					И (СведенияОПенсионномОбеспеченииФизЛиц.Период <= КОНЕЦПЕРИОДА(НеИсчисленныйСО.ПериодРегистрации, МЕСЯЦ))
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			НеИсчисленныйСО.ФизЛицо,
	               |			НеИсчисленныйСО.ПериодРегистрации,
	               |			НеИсчисленныйСО.ВидНалога) КАК ТаблицаСоСрезами
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	               |			ПО ТаблицаСоСрезами.ПериодСрезаГражданствоФизЛиц = ГражданствоФизЛиц.Период
	               |				И ТаблицаСоСрезами.ФизЛицо = ГражданствоФизЛиц.ФизЛицо
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц КАК СведенияОПенсионномОбеспеченииФизЛиц
	               |			ПО ТаблицаСоСрезами.ПериодСрезаСведенияОПенсОбесп = СведенияОПенсионномОбеспеченииФизЛиц.Период
	               |				И ТаблицаСоСрезами.ФизЛицо = СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо) КАК ИтоговаяТаблица
	               |ГДЕ
	               |	(НЕ ИтоговаяТаблица.НеПодлежитСоциальномуСтрахованию
	               |			ИЛИ ИтоговаяТаблица.НеПодлежитСоциальномуСтрахованию ЕСТЬ NULL )
	               |	И (НЕ ИтоговаяТаблица.Пенсионер
	               |			ИЛИ ИтоговаяТаблица.Пенсионер ЕСТЬ NULL )";
	
	Запрос.Выполнить();					   
	НеИсчисленныйСОТекст = "ВЫБРАТЬ
		                       |	ТаблицаСО.ФизЛицо,
		                       |	ТаблицаСО.ПериодРегистрации,
		                       |	ТаблицаСО.ВидНалога
		                       |ИЗ
		                       |	ВТ_НеИсчисленныйСО КАК ТаблицаСО";
	
	// ОППВ						   
  	ОрганизацияЯвляетсяВкладчикомОППВ = ПроцедурыНалоговогоУчета.ПолучитьПризнакВкладчикаПрофПенсионныхВзносов(ПараметрыОтчета.Организация, ПараметрыОтчета.ДатаКон);

	Если ОрганизацияЯвляетсяВкладчикомОППВ Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ИтоговаяТаблица.ФизЛицо,
		               |	ИтоговаяТаблица.ПериодРегистрации,
		               |	ИтоговаяТаблица.ВидНалога
		               |ПОМЕСТИТЬ ВТ_НеИсчисленныйОППВ
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		ТаблицаСоСрезами.ФизЛицо КАК ФизЛицо,
		               |		ТаблицаСоСрезами.ПериодРегистрации КАК ПериодРегистрации,
		               |		ТаблицаСоСрезами.ВидНалога КАК ВидНалога,
		               |		ГражданствоФизЛиц.НеИмеетПравоНаПенсию КАК НеИмеетПравоНаПенсию,
		               |		СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер КАК Пенсионер
		               |	ИЗ
		               |		(ВЫБРАТЬ
		               |			НеИсчисленныйОППВ.ФизЛицо КАК ФизЛицо,
		               |			НеИсчисленныйОППВ.ПериодРегистрации КАК ПериодРегистрации,
		               |			НеИсчисленныйОППВ.ВидНалога КАК ВидНалога,
		               |			МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодСрезаГражданствоФизЛиц,
		               |			МАКСИМУМ(СведенияОПенсионномОбеспеченииФизЛиц.Период) КАК ПериодСрезаСведенияОПенсОбесп
		               |		ИЗ
		               |			(ВЫБРАТЬ
		               |				ОППВСведенияОДоходах.ФизЛицо КАК ФизЛицо,
		               |				ОППВСведенияОДоходах.ПериодРегистрации КАК ПериодРегистрации,
		               |				&ОППВ КАК ВидНалога
		               |			ИЗ
		               |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |					ОППВСведенияОДоходах.ФизЛицо КАК ФизЛицо,
		               |					ОППВСведенияОДоходах.ПериодРегистрации КАК ПериодРегистрации
		               |				ИЗ
		               |					РегистрНакопления.ОППВСведенияОДоходах КАК ОППВСведенияОДоходах
		               |				ГДЕ
		               |					ОППВСведенияОДоходах.Организация = &Организация
		               |					И ОППВСведенияОДоходах.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
		               |					И ОППВСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)) КАК ОППВСведенияОДоходах
		               |					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |						ОППВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
		               |						ОППВРасчетыСФондами.Период КАК Период
		               |					ИЗ
		               |						РегистрНакопления.ОППВРасчетыСФондами КАК ОППВРасчетыСФондами
		               |					ГДЕ
		               |						ОППВРасчетыСФондами.Организация = &Организация
		               |						И ОППВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		               |						И ОППВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)) КАК ОППВРасчетыСФондами
		               |					ПО ОППВСведенияОДоходах.ФизЛицо = ОППВРасчетыСФондами.ФизЛицо
		               |						И (НАЧАЛОПЕРИОДА(ОППВСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.Период, МЕСЯЦ))
		               |			ГДЕ
		               |				ОППВРасчетыСФондами.Период ЕСТЬ NULL ) КАК НеИсчисленныйОППВ
		               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
		               |				ПО (ГражданствоФизЛиц.ФизЛицо = НеИсчисленныйОППВ.ФизЛицо)
		               |					И (ГражданствоФизЛиц.Период <= КОНЕЦПЕРИОДА(НеИсчисленныйОППВ.ПериодРегистрации, МЕСЯЦ))
		               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц КАК СведенияОПенсионномОбеспеченииФизЛиц
		               |				ПО (СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо = НеИсчисленныйОППВ.ФизЛицо)
		               |					И (СведенияОПенсионномОбеспеченииФизЛиц.Период <= КОНЕЦПЕРИОДА(НеИсчисленныйОППВ.ПериодРегистрации, МЕСЯЦ))
		               |		
		               |		СГРУППИРОВАТЬ ПО
		               |			НеИсчисленныйОППВ.ФизЛицо,
		               |			НеИсчисленныйОППВ.ПериодРегистрации,
		               |			НеИсчисленныйОППВ.ВидНалога) КАК ТаблицаСоСрезами
		               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
		               |			ПО ТаблицаСоСрезами.ПериодСрезаГражданствоФизЛиц = ГражданствоФизЛиц.Период
		               |				И ТаблицаСоСрезами.ФизЛицо = ГражданствоФизЛиц.ФизЛицо
		               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц КАК СведенияОПенсионномОбеспеченииФизЛиц
		               |			ПО ТаблицаСоСрезами.ПериодСрезаСведенияОПенсОбесп = СведенияОПенсионномОбеспеченииФизЛиц.Период
		               |				И ТаблицаСоСрезами.ФизЛицо = СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо) КАК ИтоговаяТаблица
		               |ГДЕ
		               |	(НЕ ИтоговаяТаблица.НеИмеетПравоНаПенсию
		               |			ИЛИ ИтоговаяТаблица.НеИмеетПравоНаПенсию ЕСТЬ NULL )
		               |	И (НЕ ИтоговаяТаблица.Пенсионер
		               |			ИЛИ ИтоговаяТаблица.Пенсионер ЕСТЬ NULL )";
	
	Запрос.Выполнить();					   
	НеИсчисленныйОППВТекст = "ВЫБРАТЬ
		                       |	ТаблицаОППВ.ФизЛицо,
		                       |	ТаблицаОППВ.ПериодРегистрации,
		                       |	ТаблицаОППВ.ВидНалога
		                       |ИЗ
		                       |	ВТ_НеИсчисленныйОППВ КАК ТаблицаОППВ";
	
	КонецЕсли;
	
	// ОПВР
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ИтоговаяТаблица.ФизЛицо,
	               |	ИтоговаяТаблица.ПериодРегистрации,
	               |	ИтоговаяТаблица.ВидНалога
	               |ПОМЕСТИТЬ ВТ_НеИсчисленныйОПВР
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ТаблицаСоСрезами.ФизЛицо КАК ФизЛицо,
	               |		ТаблицаСоСрезами.ПериодРегистрации КАК ПериодРегистрации,
	               |		ТаблицаСоСрезами.ВидНалога КАК ВидНалога,
	               |		ГражданствоФизЛиц.НеИмеетПравоНаПенсию КАК НеИмеетПравоНаПенсию,
	               |		СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности КАК ОтношениеКИнвалидности,
	               |		СведенияОбИнвалидностиФизлиц.ГруппаИнвалидности КАК ГруппаИнвалидности,
	               |		СведенияОбИнвалидностиФизлиц.СрокДействияСправки КАК СрокДействияСправки,
	               |		СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер КАК Пенсионер
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			НеИсчисленныйОПВР.ФизЛицо КАК ФизЛицо,
	               |			НеИсчисленныйОПВР.ПериодРегистрации КАК ПериодРегистрации,
	               |			НеИсчисленныйОПВР.ВидНалога КАК ВидНалога,
	               |			МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодСрезаГражданствоФизЛиц,
	               |			МАКСИМУМ(СведенияОПенсионномОбеспеченииФизЛиц.Период) КАК ПериодСрезаСведенияОПенсОбесп,
	               |			МАКСИМУМ(СведенияОбИнвалидностиФизлиц.Период) КАК ПериодСрезаСведенияОбИнвалидности
	               |		ИЗ
	               |			(ВЫБРАТЬ
	               |				ОПВРСведенияОДоходах.ФизЛицо КАК ФизЛицо,
	               |				ОПВРСведенияОДоходах.ПериодРегистрации КАК ПериодРегистрации,
	               |				&ОПВР КАК ВидНалога
	               |			ИЗ
	               |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |					ОПВРСведенияОДоходах.ФизЛицо КАК ФизЛицо,
	               |					ОПВРСведенияОДоходах.ПериодРегистрации КАК ПериодРегистрации
	               |				ИЗ
	               |					РегистрНакопления.ОПВРСведенияОДоходах КАК ОПВРСведенияОДоходах
	               |				ГДЕ
	               |					ОПВРСведенияОДоходах.Организация = &Организация
	               |					И ОПВРСведенияОДоходах.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
	               |					И ОПВРСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)) КАК ОПВРСведенияОДоходах
	               |					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |						ОПВРРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	               |						ОПВРРасчетыСФондами.Период КАК Период
	               |					ИЗ
	               |						РегистрНакопления.ОПВРРасчетыСФондами КАК ОПВРРасчетыСФондами
	               |					ГДЕ
	               |						ОПВРРасчетыСФондами.Организация = &Организация
	               |						И ОПВРРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |						И ОПВРРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)) КАК ОПВРРасчетыСФондами
	               |					ПО ОПВРСведенияОДоходах.ФизЛицо = ОПВРРасчетыСФондами.ФизЛицо
	               |						И (НАЧАЛОПЕРИОДА(ОПВРСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ОПВРРасчетыСФондами.Период, МЕСЯЦ))
	               |			ГДЕ
	               |				ОПВРРасчетыСФондами.Период ЕСТЬ NULL ) КАК НеИсчисленныйОПВР
	               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	               |				ПО (ГражданствоФизЛиц.ФизЛицо = НеИсчисленныйОПВР.ФизЛицо)
	               |					И (ГражданствоФизЛиц.Период <= КОНЕЦПЕРИОДА(НеИсчисленныйОПВР.ПериодРегистрации, МЕСЯЦ))
	               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц КАК СведенияОПенсионномОбеспеченииФизЛиц
	               |				ПО (СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо = НеИсчисленныйОПВР.ФизЛицо)
	               |					И (СведенияОПенсионномОбеспеченииФизЛиц.Период <= КОНЕЦПЕРИОДА(НеИсчисленныйОПВР.ПериодРегистрации, МЕСЯЦ))
	               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК СведенияОбИнвалидностиФизлиц
	               |				ПО НеИсчисленныйОПВР.ФизЛицо = СведенияОбИнвалидностиФизлиц.Физлицо
	               |					И (СведенияОбИнвалидностиФизлиц.Период <= КОНЕЦПЕРИОДА(НеИсчисленныйОПВР.ПериодРегистрации, МЕСЯЦ))
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			НеИсчисленныйОПВР.ФизЛицо,
	               |			НеИсчисленныйОПВР.ПериодРегистрации,
	               |			НеИсчисленныйОПВР.ВидНалога) КАК ТаблицаСоСрезами
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	               |			ПО ТаблицаСоСрезами.ПериодСрезаГражданствоФизЛиц = ГражданствоФизЛиц.Период
	               |				И ТаблицаСоСрезами.ФизЛицо = ГражданствоФизЛиц.ФизЛицо
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц КАК СведенияОПенсионномОбеспеченииФизЛиц
	               |			ПО ТаблицаСоСрезами.ПериодСрезаСведенияОПенсОбесп = СведенияОПенсионномОбеспеченииФизЛиц.Период
	               |				И ТаблицаСоСрезами.ФизЛицо = СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК СведенияОбИнвалидностиФизлиц
	               |			ПО ТаблицаСоСрезами.ФизЛицо = СведенияОбИнвалидностиФизлиц.ФизЛицо
	               |				И ТаблицаСоСрезами.ПериодСрезаСведенияОбИнвалидности = СведенияОбИнвалидностиФизлиц.Период) КАК ИтоговаяТаблица
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |			ПО ФизическиеЛица.Ссылка = ИтоговаяТаблица.ФизЛицо
	               |				И ФизическиеЛица.ДатаРождения >= ДАТАВРЕМЯ(1975, 1, 1)
	               |ГДЕ
	               |	(НЕ ИтоговаяТаблица.НеИмеетПравоНаПенсию
	               |			ИЛИ ИтоговаяТаблица.НеИмеетПравоНаПенсию ЕСТЬ NULL )
	               |	И (НЕ ИтоговаяТаблица.Пенсионер
	               |			ИЛИ ИтоговаяТаблица.Пенсионер ЕСТЬ NULL )
	               |	И (НЕ(ИтоговаяТаблица.ОтношениеКИнвалидности = &парамИнвалид
	               |					И ИтоговаяТаблица.ГруппаИнвалидности В (&парамСписокГруппИнвалидности)
	               |					И ИтоговаяТаблица.СрокДействияСправки = &парамПустаяДата)
	               |			ИЛИ ИтоговаяТаблица.ОтношениеКИнвалидности ЕСТЬ NULL)";	
	
	Запрос.УстановитьПараметр("парамИнвалид", Перечисления.ОтношениеКИнвалидности.Инвалид);
	СписокГруппИнвалидности = Новый СписокЗначений;
	СписокГруппИнвалидности.Добавить("I");
	СписокГруппИнвалидности.Добавить("II");
	Запрос.УстановитьПараметр("парамСписокГруппИнвалидности",  СписокГруппИнвалидности);
	Запрос.Выполнить();					   
	НеИсчисленныйОПВРТекст = "ВЫБРАТЬ
		                       |	ТаблицаОПВР.ФизЛицо,
		                       |	ТаблицаОПВР.ПериодРегистрации,
		                       |	ТаблицаОПВР.ВидНалога
		                       |ИЗ
		                       |	ВТ_НеИсчисленныйОПВР КАК ТаблицаОПВР";
	// ВОСМС
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ИтоговаяТаблица.ФизЛицо КАК ФизЛицо,
	               |	ИтоговаяТаблица.ПериодРегистрации КАК ПериодРегистрации,
	               |	ИтоговаяТаблица.ВидНалога КАК ВидНалога
	               |ПОМЕСТИТЬ ВТ_НеИсчисленныйВОСМС
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ТаблицаСоСрезами.ФизЛицо КАК ФизЛицо,
	               |		ТаблицаСоСрезами.ПериодРегистрации КАК ПериодРегистрации,
	               |		ТаблицаСоСрезами.ВидНалога КАК ВидНалога,
	               |		ГражданствоФизЛиц.НеПодлежитСоциальномуМедицинскомуСтрахованию КАК НеПодлежитСоциальномуМедицинскомуСтрахованию,
	               |		СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер КАК Пенсионер,
	               |		СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности КАК ОтношениеКИнвалидности,
	               |		СведенияОФизлицахУчастникахВОВ.Статус КАК СтатусУчастникаВОВ
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			НеИсчисленныйВОСМС.ФизЛицо КАК ФизЛицо,
	               |			НеИсчисленныйВОСМС.ПериодРегистрации КАК ПериодРегистрации,
	               |			НеИсчисленныйВОСМС.ВидНалога КАК ВидНалога,
	               |			МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодСрезаГражданствоФизЛиц,
	               |			МАКСИМУМ(СведенияОПенсионномОбеспеченииФизЛиц.Период) КАК ПериодСрезаСведенияОПенсОбесп,
	               |			МАКСИМУМ(СведенияОбИнвалидностиФизлиц.Период) КАК ПериодСрезаСведенияОбИнвалидности,
	               |			МАКСИМУМ(СведенияОФизлицахУчастникахВОВ.Период) КАК ПериодСрезаСведенияОбУчастникахВОВ
	               |		ИЗ
	               |			(ВЫБРАТЬ
	               |				ВОСМССведенияОДоходах.ФизЛицо КАК ФизЛицо,
	               |				ВОСМССведенияОДоходах.ПериодРегистрации КАК ПериодРегистрации,
	               |				&ВзносыОСМС КАК ВидНалога
	               |			ИЗ
	               |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |					ВОСМССведенияОДоходах.ФизЛицо КАК ФизЛицо,
	               |					ВОСМССведенияОДоходах.ПериодРегистрации КАК ПериодРегистрации
	               |				ИЗ
	               |					РегистрНакопления.ВОСМССведенияОДоходах КАК ВОСМССведенияОДоходах
	               |				ГДЕ
	               |					ВОСМССведенияОДоходах.Организация = &Организация
	               |					И ВОСМССведенияОДоходах.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
	               |					И ВОСМССведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)) КАК ВОСМССведенияОДоходах
	               |					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |						ВОСМСРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	               |						ЕСТЬNULL(Контрагенты.ФизЛицо, ВОСМСРасчетыСФондами.ФизЛицо) КАК ФизФизЛицо,
	               |						ВОСМСРасчетыСФондами.Период КАК Период
	               |					ИЗ
	               |						РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
	               |							ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	               |							ПО (Контрагенты.Ссылка = ВОСМСРасчетыСФондами.ФизЛицо)
	               |					ГДЕ
	               |						ВОСМСРасчетыСФондами.Организация = &Организация
	               |						И ВОСМСРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |						И ВОСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	               |					
	               |					ОБЪЕДИНИТЬ
	               |					
	               |					ВЫБРАТЬ
	               |						СведенияПредыдущегоМестаРаботыФизЛиц.ФизЛицо,
	               |						СведенияПредыдущегоМестаРаботыФизЛиц.ФизЛицо,
	               |						СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода
	               |					ИЗ
	               |						РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК СведенияПредыдущегоМестаРаботыФизЛиц
	               |					ГДЕ
	               |						СведенияПредыдущегоМестаРаботыФизЛиц.Налогоплательщик = &Организация
	               |						И СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода МЕЖДУ &ДатаНач И &ДатаКон
	               |						И СведенияПредыдущегоМестаРаботыФизЛиц.ВОСМС > 0) КАК ВОСМСРасчетыСФондами
	               |					ПО (ВОСМССведенияОДоходах.ФизЛицо В (ВОСМСРасчетыСФондами.ФизЛицо, ВОСМСРасчетыСФондами.ФизФизЛицо))
	               |						И (НАЧАЛОПЕРИОДА(ВОСМССведенияОДоходах.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.Период, МЕСЯЦ))
	               |			ГДЕ
	               |				ВОСМСРасчетыСФондами.Период ЕСТЬ NULL) КАК НеИсчисленныйВОСМС
	               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	               |				ПО (ВЫБОР
	               |						КОГДА НеИсчисленныйВОСМС.ФизЛицо ССЫЛКА Справочник.Контрагенты
	               |							ТОГДА НеИсчисленныйВОСМС.ФизЛицо.ФизЛицо
	               |						ИНАЧЕ НеИсчисленныйВОСМС.ФизЛицо
	               |					КОНЕЦ = ГражданствоФизЛиц.ФизЛицо)
	               |					И (ГражданствоФизЛиц.Период <= КОНЕЦПЕРИОДА(НеИсчисленныйВОСМС.ПериодРегистрации, МЕСЯЦ))
	               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц КАК СведенияОПенсионномОбеспеченииФизЛиц
	               |				ПО (СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо = НеИсчисленныйВОСМС.ФизЛицо)
	               |					И (СведенияОПенсионномОбеспеченииФизЛиц.Период <= КОНЕЦПЕРИОДА(НеИсчисленныйВОСМС.ПериодРегистрации, МЕСЯЦ))
	               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК СведенияОбИнвалидностиФизлиц
	               |				ПО (СведенияОбИнвалидностиФизлиц.Физлицо = НеИсчисленныйВОСМС.ФизЛицо)
	               |					И (СведенияОбИнвалидностиФизлиц.Период <= КОНЕЦПЕРИОДА(НеИсчисленныйВОСМС.ПериодРегистрации, МЕСЯЦ))
	               |					И (СведенияОбИнвалидностиФизлиц.СрокДействияСправки = ДАТАВРЕМЯ(1, 1, 1)
	               |						ИЛИ КОНЕЦПЕРИОДА(СведенияОбИнвалидностиФизлиц.СрокДействияСправки, ДЕНЬ) >= КОНЕЦПЕРИОДА(НеИсчисленныйВОСМС.ПериодРегистрации, МЕСЯЦ))
	               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФизлицахУчастникахВОВ КАК СведенияОФизлицахУчастникахВОВ
	               |				ПО (СведенияОФизлицахУчастникахВОВ.Физлицо = НеИсчисленныйВОСМС.ФизЛицо)
	               |					И (СведенияОФизлицахУчастникахВОВ.Период <= КОНЕЦПЕРИОДА(НеИсчисленныйВОСМС.ПериодРегистрации, МЕСЯЦ))
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			НеИсчисленныйВОСМС.ФизЛицо,
	               |			НеИсчисленныйВОСМС.ПериодРегистрации,
	               |			НеИсчисленныйВОСМС.ВидНалога) КАК ТаблицаСоСрезами
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	               |			ПО ТаблицаСоСрезами.ПериодСрезаГражданствоФизЛиц = ГражданствоФизЛиц.Период
	               |				И (ВЫБОР
	               |					КОГДА ТаблицаСоСрезами.ФизЛицо ССЫЛКА Справочник.Контрагенты
	               |						ТОГДА ТаблицаСоСрезами.ФизЛицо.ФизЛицо
	               |					ИНАЧЕ ТаблицаСоСрезами.ФизЛицо
	               |				КОНЕЦ = ГражданствоФизЛиц.ФизЛицо)
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц КАК СведенияОПенсионномОбеспеченииФизЛиц
	               |			ПО ТаблицаСоСрезами.ПериодСрезаСведенияОПенсОбесп = СведенияОПенсионномОбеспеченииФизЛиц.Период
	               |				И ТаблицаСоСрезами.ФизЛицо = СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК СведенияОбИнвалидностиФизлиц
	               |			ПО ТаблицаСоСрезами.ПериодСрезаСведенияОбИнвалидности = СведенияОбИнвалидностиФизлиц.Период
	               |				И ТаблицаСоСрезами.ФизЛицо = СведенияОбИнвалидностиФизлиц.Физлицо
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФизлицахУчастникахВОВ КАК СведенияОФизлицахУчастникахВОВ
	               |			ПО ТаблицаСоСрезами.ПериодСрезаСведенияОбУчастникахВОВ = СведенияОФизлицахУчастникахВОВ.Период
	               |				И ТаблицаСоСрезами.ФизЛицо = СведенияОФизлицахУчастникахВОВ.Физлицо) КАК ИтоговаяТаблица
	               |ГДЕ
	               |	(НЕ ИтоговаяТаблица.НеПодлежитСоциальномуМедицинскомуСтрахованию
	               |			ИЛИ ИтоговаяТаблица.НеПодлежитСоциальномуМедицинскомуСтрахованию ЕСТЬ NULL)
	               |	И (НЕ ИтоговаяТаблица.Пенсионер
	               |			ИЛИ ИтоговаяТаблица.Пенсионер ЕСТЬ NULL)
	               |	И (ИтоговаяТаблица.ОтношениеКИнвалидности <> ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.Инвалид)
	               |			ИЛИ ИтоговаяТаблица.ОтношениеКИнвалидности ЕСТЬ NULL)
	               |	И (ИтоговаяТаблица.СтатусУчастникаВОВ <> ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.УчастникВОВ)
	               |				И ИтоговаяТаблица.СтатусУчастникаВОВ <> ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.ИнвалидВОВ)
	               |			ИЛИ ИтоговаяТаблица.СтатусУчастникаВОВ ЕСТЬ NULL)";
	
	Запрос.Выполнить();					   
	НеИсчисленныйВОСМСТекст = "ВЫБРАТЬ
		                       |	ТаблицаВОСМС.ФизЛицо,
		                       |	ТаблицаВОСМС.ПериодРегистрации,
		                       |	ТаблицаВОСМС.ВидНалога
		                       |ИЗ
		                       |	ВТ_НеИсчисленныйВОСМС КАК ТаблицаВОСМС";
							   
	// ООСМС
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ИтоговаяТаблица.ФизЛицо,
	               |	ИтоговаяТаблица.ПериодРегистрации,
	               |	ИтоговаяТаблица.ВидНалога
	               |ПОМЕСТИТЬ ВТ_НеИсчисленныйООСМС
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ТаблицаСоСрезами.ФизЛицо КАК ФизЛицо,
	               |		ТаблицаСоСрезами.ПериодРегистрации КАК ПериодРегистрации,
	               |		ТаблицаСоСрезами.ВидНалога КАК ВидНалога,
	               |		ГражданствоФизЛиц.НеПодлежитСоциальномуМедицинскомуСтрахованию КАК НеПодлежитСоциальномуМедицинскомуСтрахованию,
	               |		СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер КАК Пенсионер,
	               |		СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности КАК ОтношениеКИнвалидности,
	               |		СведенияОФизлицахУчастникахВОВ.Статус КАК СтатусУчастникаВОВ
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			НеИсчисленныйООСМС.ФизЛицо КАК ФизЛицо,
	               |			НеИсчисленныйООСМС.ПериодРегистрации КАК ПериодРегистрации,
	               |			НеИсчисленныйООСМС.ВидНалога КАК ВидНалога,
	               |			МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодСрезаГражданствоФизЛиц,
	               |			МАКСИМУМ(СведенияОПенсионномОбеспеченииФизЛиц.Период) КАК ПериодСрезаСведенияОПенсОбесп,
	               |			МАКСИМУМ(СведенияОбИнвалидностиФизлиц.Период) КАК ПериодСрезаСведенияОбИнвалидности,
	               |			МАКСИМУМ(СведенияОФизлицахУчастникахВОВ.Период) КАК ПериодСрезаСведенияОбУчастникахВОВ
	               |		ИЗ
	               |			(ВЫБРАТЬ
	               |				ООСМССведенияОДоходах.ФизЛицо КАК ФизЛицо,
	               |				ООСМССведенияОДоходах.ПериодРегистрации КАК ПериодРегистрации,
	               |				&ОтчисленияОСМС КАК ВидНалога
	               |			ИЗ
	               |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |					ООСМССведенияОДоходах.ФизЛицо КАК ФизЛицо,
	               |					ООСМССведенияОДоходах.ПериодРегистрации КАК ПериодРегистрации
	               |				ИЗ
	               |					РегистрНакопления.ООСМССведенияОДоходах КАК ООСМССведенияОДоходах
	               |				ГДЕ
	               |					ООСМССведенияОДоходах.Организация = &Организация
	               |					И ООСМССведенияОДоходах.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
	               |					И ООСМССведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)) КАК ООСМССведенияОДоходах
	               |					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |						ООСМСРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	               |						ООСМСРасчетыСФондами.Период КАК Период
	               |					ИЗ
	               |						РегистрНакопления.ООСМСРасчетыСФондами КАК ООСМСРасчетыСФондами
	               |					ГДЕ
	               |						ООСМСРасчетыСФондами.Организация = &Организация
	               |						И ООСМСРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |						И ООСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)) КАК ООСМСРасчетыСФондами
	               |					ПО ООСМССведенияОДоходах.ФизЛицо = ООСМСРасчетыСФондами.ФизЛицо
	               |						И (НАЧАЛОПЕРИОДА(ООСМССведенияОДоходах.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ООСМСРасчетыСФондами.Период, МЕСЯЦ))
	               |			ГДЕ
	               |				ООСМСРасчетыСФондами.Период ЕСТЬ NULL ) КАК НеИсчисленныйООСМС
	               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	               |				ПО (ГражданствоФизЛиц.ФизЛицо = НеИсчисленныйООСМС.ФизЛицо)
	               |					И (ГражданствоФизЛиц.Период <= КОНЕЦПЕРИОДА(НеИсчисленныйООСМС.ПериодРегистрации, МЕСЯЦ))
	               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц КАК СведенияОПенсионномОбеспеченииФизЛиц
	               |				ПО (СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо = НеИсчисленныйООСМС.ФизЛицо)
	               |					И (СведенияОПенсионномОбеспеченииФизЛиц.Период <= КОНЕЦПЕРИОДА(НеИсчисленныйООСМС.ПериодРегистрации, МЕСЯЦ))
	               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК СведенияОбИнвалидностиФизлиц
	               |				ПО (СведенияОбИнвалидностиФизлиц.Физлицо = НеИсчисленныйООСМС.ФизЛицо)
	               |					И (СведенияОбИнвалидностиФизлиц.Период <= КОНЕЦПЕРИОДА(НеИсчисленныйООСМС.ПериодРегистрации, МЕСЯЦ))
	               |					И (СведенияОбИнвалидностиФизлиц.СрокДействияСправки = ДАТАВРЕМЯ(1, 1, 1)
	               |						ИЛИ КОНЕЦПЕРИОДА(СведенияОбИнвалидностиФизлиц.СрокДействияСправки, ДЕНЬ) >= КОНЕЦПЕРИОДА(НеИсчисленныйООСМС.ПериодРегистрации, МЕСЯЦ))
	               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФизлицахУчастникахВОВ КАК СведенияОФизлицахУчастникахВОВ
	               |				ПО (СведенияОФизлицахУчастникахВОВ.Физлицо = НеИсчисленныйООСМС.ФизЛицо)
	               |					И (СведенияОФизлицахУчастникахВОВ.Период <= КОНЕЦПЕРИОДА(НеИсчисленныйООСМС.ПериодРегистрации, МЕСЯЦ))
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			НеИсчисленныйООСМС.ФизЛицо,
	               |			НеИсчисленныйООСМС.ПериодРегистрации,
	               |			НеИсчисленныйООСМС.ВидНалога) КАК ТаблицаСоСрезами
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	               |			ПО ТаблицаСоСрезами.ПериодСрезаГражданствоФизЛиц = ГражданствоФизЛиц.Период
	               |				И ТаблицаСоСрезами.ФизЛицо = ГражданствоФизЛиц.ФизЛицо
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц КАК СведенияОПенсионномОбеспеченииФизЛиц
	               |			ПО ТаблицаСоСрезами.ПериодСрезаСведенияОПенсОбесп = СведенияОПенсионномОбеспеченииФизЛиц.Период
	               |				И ТаблицаСоСрезами.ФизЛицо = СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК СведенияОбИнвалидностиФизлиц
	               |			ПО ТаблицаСоСрезами.ПериодСрезаСведенияОбИнвалидности = СведенияОбИнвалидностиФизлиц.Период
	               |				И ТаблицаСоСрезами.ФизЛицо = СведенияОбИнвалидностиФизлиц.Физлицо
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФизлицахУчастникахВОВ КАК СведенияОФизлицахУчастникахВОВ
	               |			ПО ТаблицаСоСрезами.ПериодСрезаСведенияОбУчастникахВОВ = СведенияОФизлицахУчастникахВОВ.Период
	               |				И ТаблицаСоСрезами.ФизЛицо = СведенияОФизлицахУчастникахВОВ.Физлицо) КАК ИтоговаяТаблица
	               |ГДЕ
	               |	(НЕ ИтоговаяТаблица.НеПодлежитСоциальномуМедицинскомуСтрахованию
	               |			ИЛИ ИтоговаяТаблица.НеПодлежитСоциальномуМедицинскомуСтрахованию ЕСТЬ NULL )
	               |	И (НЕ ИтоговаяТаблица.Пенсионер
	               |			ИЛИ ИтоговаяТаблица.Пенсионер ЕСТЬ NULL )
	               |	И (ИтоговаяТаблица.ОтношениеКИнвалидности <> ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.Инвалид)
	               |			ИЛИ ИтоговаяТаблица.ОтношениеКИнвалидности ЕСТЬ NULL )
	               |	И (ИтоговаяТаблица.СтатусУчастникаВОВ <> ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.УчастникВОВ)
	               |				И ИтоговаяТаблица.СтатусУчастникаВОВ <> ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.ИнвалидВОВ)
	               |			ИЛИ ИтоговаяТаблица.СтатусУчастникаВОВ ЕСТЬ NULL )";
	
	Запрос.Выполнить();					   
	НеИсчисленныйООСМСТекст = "ВЫБРАТЬ
		                       |	ТаблицаООСМС.ФизЛицо,
		                       |	ТаблицаООСМС.ПериодРегистрации,
		                       |	ТаблицаООСМС.ВидНалога
		                       |ИЗ
		                       |	ВТ_НеИсчисленныйООСМС КАК ТаблицаООСМС";
	
	// ЕП
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ИтоговаяТаблица.ФизЛицо,
	               |	ИтоговаяТаблица.ПериодРегистрации,
	               |	ИтоговаяТаблица.ВидНалога
	               |ПОМЕСТИТЬ ВТ_НеИсчисленныйЕП
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |			НеИсчисленныйЕП.ФизЛицо КАК ФизЛицо,
	               |			НеИсчисленныйЕП.ПериодРегистрации КАК ПериодРегистрации,
	               |			НеИсчисленныйЕП.ВидНалога КАК ВидНалога
	               |		ИЗ
	               |			(ВЫБРАТЬ
	               |				ЕПСведенияОДоходах.ФизЛицо КАК ФизЛицо,
	               |				ЕПСведенияОДоходах.ПериодРегистрации КАК ПериодРегистрации,
	               |				&ЕдиныйПлатеж КАК ВидНалога
	               |			ИЗ
	               |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |					ЕПСведенияОДоходах.ФизЛицо КАК ФизЛицо,
	               |					ЕПСведенияОДоходах.ПериодРегистрации КАК ПериодРегистрации
	               |				ИЗ
	               |					РегистрНакопления.ЕПСведенияОДоходах КАК ЕПСведенияОДоходах
	               |				ГДЕ
	               |					ЕПСведенияОДоходах.Организация = &Организация
	               |					И ЕПСведенияОДоходах.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
	               |					И ЕПСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)) КАК ЕПСведенияОДоходах
	               |					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |						ЕПРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	               |						ЕПРасчетыСФондами.Период КАК Период
	               |					ИЗ
	               |						РегистрНакопления.ЕПРасчетыСФондами КАК ЕПРасчетыСФондами
	               |					ГДЕ
	               |						ЕПРасчетыСФондами.Организация = &Организация
	               |						И ЕПРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |						И ЕПРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)) КАК ЕПРасчетыСФондами
	               |					ПО ЕПСведенияОДоходах.ФизЛицо = ЕПРасчетыСФондами.ФизЛицо
	               |						И (НАЧАЛОПЕРИОДА(ЕПСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ЕПРасчетыСФондами.Период, МЕСЯЦ))
	               |			ГДЕ
	               |				ЕПРасчетыСФондами.Период ЕСТЬ NULL ) КАК НеИсчисленныйЕП
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			НеИсчисленныйЕП.ФизЛицо,
	               |			НеИсчисленныйЕП.ПериодРегистрации,
	               |			НеИсчисленныйЕП.ВидНалога) КАК ИтоговаяТаблица
				   |";
	
	Запрос.Выполнить();					   
	НеИсчисленныйЕПТекст = "ВЫБРАТЬ
		                       |	ТаблицаЕП.ФизЛицо,
		                       |	ТаблицаЕП.ПериодРегистрации,
		                       |	ТаблицаЕП.ВидНалога
		                       |ИЗ
		                       |	ВТ_НеИсчисленныйЕП КАК ТаблицаЕП";
	
	// ИТОГОВЫЙ ЗАПРОС
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |	ИтоговаяТаблица.ФизЛицо,
					|	ИтоговаяТаблица.ПериодРегистрации,
					|	ИтоговаяТаблица.ВидНалога
					|ИЗ 
					| (" + НеИсчисленныйИПНТекст + "		
	                |
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|" + НеИсчисленныйОПВТекст + ?(ОрганизацияЯвляетсяПлательщикомСН, "		
	                | 
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|" + НеИсчисленныйСНТекст, "") + "		
	                | 
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|" + НеИсчисленныйСОТекст + ?(ОрганизацияЯвляетсяВкладчикомОППВ, "		
	                | 
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|" + НеИсчисленныйОППВТекст, "") + "
					| 
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|" + НеИсчисленныйОПВРТекст + "
	                | 
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|" + НеИсчисленныйВОСМСТекст + "		
	                | 
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|" + НеИсчисленныйООСМСТекст + "
	                | 
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|" + НеИсчисленныйЕПТекст + ") КАК ИтоговаяТаблица
				    |  
				    |УПОРЯДОЧИТЬ ПО
	  			    |	ВидНалога, 
					|	ПериодРегистрации, 
					|	ФизЛицо";
														 
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();	
		
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
		
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ПараметрыОтчета.ИсходящиеДанные.Вставить("РасчетНалоговРезультатЗапроса", Результат);
			
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ФизЛицо",НСтр("ru = 'Работник'"));
		СтруктураЗаголовков.Вставить("ПериодРегистрации",НСтр("ru = 'Период регистрации'"));
		СтруктураЗаголовков.Вставить("ВидНалога",НСтр("ru = 'Вид налога'"));
		ПараметрыОтчета.ИсходящиеДанные.Вставить("РасчетНалоговСтруктураЗаголовков", СтруктураЗаголовков);			
			
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ФизЛицо", "ФизЛицо");
		ПараметрыОтчета.ИсходящиеДанные.Вставить("РасчетНалоговСтруктураРасшифровки", СтруктураРасшифровки);
		
	КонецЕсли;
		
КонецПроцедуры // ПроверитьПравилоРасчетНалогов()

Процедура ПроверитьПравилоРегистрацияОблагаемыхДоходовЗаИП(СтрокаПравила, ПараметрыОтчета)
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Организация"				, ПараметрыОтчета.Организация);
	
	Если ПараметрыОтчета.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		// проверим за все ли месяцы в периоде проверки есть документы
		// Сначала базовая таблица периодов
		ТекстЗапросаПоМесяцам = "";
		МесяцНачала = Месяц(ПараметрыОтчета.ДатаНач);
		МесяцКонца  = Месяц(ПараметрыОтчета.ДатаКон);
		Для Счетчик = МесяцНачала по МесяцКонца Цикл
			Если Не ТекстЗапросаПоМесяцам = "" Тогда
				ТекстЗапросаПоМесяцам = ТекстЗапросаПоМесяцам + "
				| ОБЪЕДИНИТЬ ВСЕ
				| 
				|	ВЫБРАТЬ
				|	&Дата" + СокрЛП(Счетчик) + " как Период		                        
				| ";
			Иначе
				ТекстЗапросаПоМесяцам = ТекстЗапросаПоМесяцам +  "
				|	ВЫБРАТЬ
				|	&Дата" + СокрЛП(Счетчик) + " как Период		                        
				| Поместить ВТ_ТаблицаПоМесяцам
				| ";
				
			КонецЕсли;
			
			Запрос.УстановитьПараметр("Дата" + СокрЛП(Счетчик), НачалоМесяца(ДобавитьМесяц(ПараметрыОтчета.ДатаНач,Счетчик - Месяц(ПараметрыОтчета.ДатаНач))));	
		КонецЦикла;	
		
		ТекстЗапросаПоМесяцам = ТекстЗапросаПоМесяцам + " 
		|ИНДЕКСИРОВАТЬ ПО
		|	Период";
		
		Запрос.Текст = ТекстЗапросаПоМесяцам + "; 
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_ТаблицаПоМесяцам.Период КАК Период,
		|	МАКСИМУМ(УчетнаяПолитикаНалоговыйУчет.Период) КАК ПериодУчетнаяПолитика,
		|	&Организация КАК Организация
		|ПОМЕСТИТЬ ПериодыУчетнаяПолитика
		|ИЗ
		|	ВТ_ТаблицаПоМесяцам КАК ВТ_ТаблицаПоМесяцам
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО ВТ_ТаблицаПоМесяцам.Период >= УчетнаяПолитикаНалоговыйУчет.Период
		|			И (УчетнаяПолитикаНалоговыйУчет.Организация = &Организация)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ТаблицаПоМесяцам.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	ПериодыУчетнаяПолитика.Период КАК Период,
		|	УчетнаяПолитикаНалоговыйУчет.ЕжемесячныйРасчетВзносовИОтчисленийЗаИП КАК ЕжемесячныйРасчетВзносовИОтчисленийЗаИП,
		|   ПериодыУчетнаяПолитика.Организация
		|ПОМЕСТИТЬ УчетнаяПолитика
		|ИЗ
		|	ПериодыУчетнаяПолитика КАК ПериодыУчетнаяПолитика
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
		|		ПО ПериодыУчетнаяПолитика.ПериодУчетнаяПолитика = УчетнаяПолитикаНалоговыйУчет.Период
		|			И (ПериодыУчетнаяПолитика.Организация = УчетнаяПолитикаНалоговыйУчет.Организация)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПериодыУчетнаяПолитика.Период,
		|   ПериодыУчетнаяПолитика.Организация,
		|	УчетнаяПолитикаНалоговыйУчет.ЕжемесячныйРасчетВзносовИОтчисленийЗаИП
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ 
		|	ДокРегистрация.Ссылка,
		|	УчетнаяПолитика.Период,
		|	УчетнаяПолитика.ЕжемесячныйРасчетВзносовИОтчисленийЗаИП
		|ИЗ
		|	УчетнаяПолитика КАК УчетнаяПолитика
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегистрацияПрочихДоходовВЦеляхНалогообложения КАК ДокРегистрация
		|		ПО УчетнаяПолитика.Период = НАЧАЛОПЕРИОДА(ДокРегистрация.ПериодРегистрации, МЕСЯЦ)
		|			И (УчетнаяПолитика.Организация = ДокРегистрация.Организация)
		|			И (ДокРегистрация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРегистрацияПрочихДоходов.ДоходыИП))
		|			И (ДокРегистрация.Проведен = ИСТИНА)
		|ГДЕ
		|	УчетнаяПолитика.ЕжемесячныйРасчетВзносовИОтчисленийЗаИП = ИСТИНА
		|	И ДокРегистрация.Ссылка ЕСТЬ NULL
		|";		
		
		Результат = Запрос.Выполнить();	
				
		СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
		СтрокаПравила.ПроверкаВыполнена = Истина;
		
		Если СтрокаПравила.ОбнаруженыОшибки Тогда
			ТаблицаРезультата = Результат.Выгрузить();
			ТаблицаИсходящихДанных = Новый ТаблицаЗначений;
			ТаблицаИсходящихДанных.Колонки.Добавить("Период");
			ТаблицаИсходящихДанных.Колонки.Добавить("ИндивидуальныйПредприниматель");
			ТаблицаИсходящихДанных.Колонки.Добавить("ВидОперации");
			Для Каждого Строка Из ТаблицаРезультата Цикл 
				НоваяСтрока = ТаблицаИсходящихДанных.Добавить();
				НоваяСтрока.Период = Формат(Строка.Период, "ДФ='ММММ гггг'");
				НоваяСтрока.ИндивидуальныйПредприниматель = ПараметрыОтчета.Организация.ИндивидуальныйПредприниматель;
				НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийРегистрацияПрочихДоходов.ДоходыИП;
			КонецЦикла;
			ПараметрыОтчета.ИсходящиеДанные.Вставить("РегистрацияОблагаемыхДоходовЗаИПТаблицаЗначений", ТаблицаИсходящихДанных);
			
			СтруктураЗаголовков = Новый Структура;
			СтруктураЗаголовков.Вставить("Период", НСтр("ru = 'Период регистрации'"));
			СтруктураЗаголовков.Вставить("ИндивидуальныйПредприниматель",НСтр("ru = 'Индивидуальный предприниматель'"));
			СтруктураЗаголовков.Вставить("ВидОперации",НСтр("ru = 'Вид операции'"));
			ПараметрыОтчета.ИсходящиеДанные.Вставить("РегистрацияОблагаемыхДоходовЗаИПСтруктураЗаголовков", СтруктураЗаголовков);					
			
			СтруктураШириныКолонок = Новый Структура;
			СтруктураШириныКолонок.Вставить("Период" , 25);
			СтруктураШириныКолонок.Вставить("ВидОперации" , 40);
			ПараметрыОтчета.ИсходящиеДанные.Вставить("РегистрацияОблагаемыхДоходовЗаИПСтруктураШириныКолонок", СтруктураШириныКолонок);
		КонецЕсли; 
		
	Иначе
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Истина;
		СтрокаПравила.КомментарийРезультата = НСтр("ru = 'Организация не являетя ИП, поэтому необходимости в создании документов ""Регистрация прочих доходов в целях налогообложения"" с видом операции ""Доходы индивидуального предпринимателя"" нет.'");
		
	КонецЕсли;	
		
КонецПроцедуры // ПроверитьПравилоРегистрацияОблагаемыхДоходовЗаИП()

// НДС
Процедура ПроверитьПравилоСверкаБухИРегистровНДС(СтрокаПравила, ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТаблицаВся.Счет КАК Счет,
	               |	ТаблицаВся.Регистр КАК Регистр,
	               |	ЕСТЬNULL(ТаблицаВся.Регистратор, ТаблицаВся.Регистратор1) КАК Документ,
	               |	СУММА(ЕСТЬNULL(ТаблицаВся.СуммаОборот, 0)) КАК СуммаПоДаннымБухУчета,
	               |	СУММА(ЕСТЬNULL(ТаблицаВся.СуммаНДСОборот, 0)) КАК СуммаВПодсистемеНДС
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		&Счет1420 КАК Счет,
	               |		&НДСКВозмещению КАК Регистр,
	               |		ТиповойОбороты.СуммаОборотДт КАК СуммаОборот,
	               |		ТиповойОбороты.Регистратор КАК Регистратор,
	               |		НДСКВозмещениюОбороты.СуммаНДСОборот КАК СуммаНДСОборот,
	               |		НДСКВозмещениюОбороты.Регистратор КАК Регистратор1
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			ТиповойОбороты.СуммаОборотДт КАК СуммаОборотДт,
	               |			ТиповойОбороты.Регистратор КАК Регистратор
	               |		ИЗ
	               |			РегистрБухгалтерии.Типовой.Обороты(
	               |					&ДатаНач,
	               |					&ДатаКон,
	               |					Регистратор,
	               |					Счет = &Счет1420,
	               |					&СубконтоПлатежиВБюджет,
	               |					Организация = &Организация
	               |						И Субконто1 В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВбюджетИФонды.Налог), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВбюджетИФонды.НалогСам), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВбюджетИФонды.НалогАкт))
	               |						И НЕ Субконто2 = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимостьСИзмененнымСрокомУплаты),
	               |					КорСчет <> &Счет3130,
	               |					) КАК ТиповойОбороты) КАК ТиповойОбороты
	               |			ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |				НДСКВозмещениюОбороты.СуммаНДСОборот КАК СуммаНДСОборот,
	               |				НДСКВозмещениюОбороты.Регистратор КАК Регистратор
	               |			ИЗ
	               |				РегистрНакопления.НДСКВозмещению.Обороты(&ДатаНач, &ДатаКон, Регистратор, Организация = &Организация) КАК НДСКВозмещениюОбороты) КАК НДСКВозмещениюОбороты
	               |			ПО ТиповойОбороты.СуммаОборотДт = НДСКВозмещениюОбороты.СуммаНДСОборот
	               |				И ТиповойОбороты.Регистратор = НДСКВозмещениюОбороты.Регистратор
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		&Счет1420,
	               |		&КорректировкаНДСКВозмещению,
	               |		ТиповойОбороты.СуммаОборотКт,
	               |		ТиповойОбороты.Регистратор,
	               |		КорректировкаНДСКВозмещениюОбороты.СуммаНДСОборот,
	               |		КорректировкаНДСКВозмещениюОбороты.Регистратор
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			ВЫБОР
	               |				КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.ЗакрытиеМесяца
	               |						И ТиповойОбороты.КорСчет = &Счет7210
	               |						И &ПропорциональныйМетодНДС
	               |					ТОГДА 0
	               |				ИНАЧЕ ТиповойОбороты.СуммаОборотКт
	               |			КОНЕЦ КАК СуммаОборотКт,
	               |			ТиповойОбороты.Регистратор КАК Регистратор
	               |		ИЗ
	               |			РегистрБухгалтерии.Типовой.Обороты(
	               |					&ДатаНач,
	               |					&ДатаКон,
	               |					Регистратор,
	               |					Счет = &Счет1420,
	               |					&СубконтоПлатежиВБюджет,
	               |					Организация = &Организация
	               |						И Субконто1 В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВбюджетИФонды.Налог), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВбюджетИФонды.НалогСам), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВбюджетИФонды.НалогАкт))
				   |						И НЕ Субконто2 = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.НалогНаДобавленнуюСтоимостьСИзмененнымСрокомУплаты),
	               |					КорСчет <> &Счет3130,
	               |					) КАК ТиповойОбороты) КАК ТиповойОбороты
	               |			ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |				КорректировкаНДСКВозмещениюОбороты.СуммаНДСОборот КАК СуммаНДСОборот,
	               |				КорректировкаНДСКВозмещениюОбороты.Регистратор КАК Регистратор
	               |			ИЗ
	               |				РегистрНакопления.КорректировкаНДСКВозмещению.Обороты(&ДатаНач, &ДатаКон, Регистратор, Организация = &Организация) КАК КорректировкаНДСКВозмещениюОбороты) КАК КорректировкаНДСКВозмещениюОбороты
	               |			ПО (ТиповойОбороты.СуммаОборотКт = -КорректировкаНДСКВозмещениюОбороты.СуммаНДСОборот)
	               |				И ТиповойОбороты.Регистратор = КорректировкаНДСКВозмещениюОбороты.Регистратор
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		&Счет3130,
	               |		&НДС,
	               |		ТиповойОбороты.СуммаОборотКт,
	               |		ТиповойОбороты.Регистратор,
	               |		НДСОбороты.СуммаНДСОборот,
	               |		НДСОбороты.Регистратор
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			ТиповойОбороты.СуммаОборотКт КАК СуммаОборотКт,
	               |			ТиповойОбороты.Регистратор КАК Регистратор
	               |		ИЗ
	               |			РегистрБухгалтерии.Типовой.Обороты(
	               |					&ДатаНач,
	               |					&ДатаКон,
	               |					Регистратор,
	               |					Счет = &Счет3130,
	               |					&СубконтоПлатежиВБюджет,
	               |					Организация = &Организация
	               |						И Субконто1 В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВбюджетИФонды.Налог), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВбюджетИФонды.НалогСам), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВбюджетИФонды.НалогАкт)),
	               |					КорСчет <> &Счет1420
	               |						И КорСчет <> &Счет1423
				   |						И КорСчет <> &Счет1424
	               |						И НЕ КорСчет В ИЕРАРХИИ (&Счет1000),
	               |					) КАК ТиповойОбороты) КАК ТиповойОбороты
	               |			ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |				НДСОбороты.СуммаНДСОборот КАК СуммаНДСОборот,
	               |				НДСОбороты.Регистратор КАК Регистратор
	               |			ИЗ
	               |				РегистрНакопления.НДС.Обороты(&ДатаНач, &ДатаКон, Регистратор, Организация = &Организация) КАК НДСОбороты) КАК НДСОбороты
	               |			ПО ТиповойОбороты.СуммаОборотКт = НДСОбороты.СуммаНДСОборот
	               |				И ТиповойОбороты.Регистратор = НДСОбороты.Регистратор
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		&Счет3130,
	               |		&КорректировкаНДС,
	               |		ТиповойОбороты.СуммаОборотДт,
	               |		ТиповойОбороты.Регистратор,
	               |		КорректировкаНДСОбороты.СуммаНДСОборот,
	               |		КорректировкаНДСОбороты.Регистратор
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			ТиповойОбороты.СуммаОборотДт КАК СуммаОборотДт,
	               |			ТиповойОбороты.Регистратор КАК Регистратор
	               |		ИЗ
	               |			РегистрБухгалтерии.Типовой.Обороты(
	               |					&ДатаНач,
	               |					&ДатаКон,
	               |					Регистратор,
	               |					Счет = &Счет3130,
	               |					&СубконтоПлатежиВБюджет,
	               |					Организация = &Организация
	               |						И Субконто1 В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВбюджетИФонды.Налог), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВбюджетИФонды.НалогСам), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВбюджетИФонды.НалогАкт)),
	               |					КорСчет <> &Счет1420
	               |						И КорСчет <> &Счет1423
				   |                        И КорСчет <> &Счет1424
	               |						И НЕ КорСчет В ИЕРАРХИИ (&Счет1000, &Счет1250, &Счет2150)
	               |					) КАК ТиповойОбороты) КАК ТиповойОбороты
	               |			ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |				КорректировкаНДСОбороты.СуммаНДСОборот КАК СуммаНДСОборот,
	               |				КорректировкаНДСОбороты.Регистратор КАК Регистратор
	               |			ИЗ
	               |				РегистрНакопления.КорректировкаНДС.Обороты(&ДатаНач, &ДатаКон, Регистратор, Организация = &Организация) КАК КорректировкаНДСОбороты) КАК КорректировкаНДСОбороты
	               |			ПО (ТиповойОбороты.СуммаОборотДт = -КорректировкаНДСОбороты.СуммаНДСОборот)
	               |				И ТиповойОбороты.Регистратор = КорректировкаНДСОбороты.Регистратор) КАК ТаблицаВся
	               |ГДЕ
	               |	(ТаблицаВся.Регистратор ЕСТЬ NULL
	               |			ИЛИ ТаблицаВся.Регистратор1 ЕСТЬ NULL)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаВся.Регистр,
	               |	ЕСТЬNULL(ТаблицаВся.Регистратор, ТаблицаВся.Регистратор1),
	               |	ТаблицаВся.Счет
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Документ
	               |ИТОГИ
	               |	СУММА(СуммаПоДаннымБухУчета),
	               |	СУММА(СуммаВПодсистемеНДС)
	               |ПО
	               |	Регистр
	               |АВТОУПОРЯДОЧИВАНИЕ";
				   
	Запрос.УстановитьПараметр("ДатаНач", 				ПараметрыОтчета.ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", 				КонецДня(ПараметрыОтчета.ДатаКон));
	Запрос.УстановитьПараметр("Организация", 			ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("Счет1420",				ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьКВозмещению);
	Запрос.УстановитьПараметр("Счет1423",				ПланыСчетов.Типовой.НДСУплачиваемыйНалоговымАгентом);
	Запрос.УстановитьПараметр("Счет1424",				ПланыСчетов.Типовой.ИзлишнеУплаченныеВБюджетСуммыНДС);
	Запрос.УстановитьПараметр("Счет3130",				ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимость);
	Запрос.УстановитьПараметр("Счет1000",				ПланыСчетов.Типовой.ДенежныеСредства);
	Запрос.УстановитьПараметр("Счет7210",				ПланыСчетов.Типовой.АдминистративныеРасходы);
	Запрос.УстановитьПараметр("ПропорциональныйМетодНДС", 
		?(УчетнаяПолитикаСервер.ПолучитьМетодОтнесенияНДСВЗачет(ПараметрыОтчета.Организация, ПараметрыОтчета.ДатаКон) = Перечисления.МетодыОтнесенияНДСВЗачет.Пропорциональный, Истина, Ложь));
	Запрос.УстановитьПараметр("НДСКВозмещению", 		НСтр("ru = 'НДС к возмещению'"));
	Запрос.УстановитьПараметр("КорректировкаНДСКВозмещению", НСтр("ru = 'Корректировка НДС к возмещению'"));
	Запрос.УстановитьПараметр("НДС", 		            НСтр("ru = 'НДС'"));
	Запрос.УстановитьПараметр("КорректировкаНДС", 		НСтр("ru = 'Корректировка НДС'"));

	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ВидыПлатежейВБюджетИФонды);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.НалогиСборыОтчисления);	
	Запрос.УстановитьПараметр("СубконтоПлатежиВБюджет", ВидыСубконто);

	Запрос.УстановитьПараметр("Счет1250", ПланыСчетов.Типовой.КраткосрочнаяДебиторскаяЗадолженностьРаботников);
	Запрос.УстановитьПараметр("Счет2150", ПланыСчетов.Типовой.ДолгосрочнаяДебиторскаяЗадолженностьРаботников);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		ВыборкаРезультата = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ОшибкиНайдены = Ложь;
		ТаблицаОшибок = Новый ТаблицаЗначений;
		ТаблицаОшибок.Колонки.Добавить("Счет");
		ТаблицаОшибок.Колонки.Добавить("Регистр");
		ТаблицаОшибок.Колонки.Добавить("Документ");
		ТаблицаОшибок.Колонки.Добавить("СуммаПоДаннымБухУчета");
		ТаблицаОшибок.Колонки.Добавить("СуммаВПодсистемеНДС");
		Пока ВыборкаРезультата.Следующий() Цикл
			// проверим данные по счету и определенному регистру НДС
			Если ВыборкаРезультата.Регистр = "НДС к возмещению" Тогда
				ДО1420 = ВыборкаРезультата.СуммаПоДаннымБухУчета;
				СуммаНДСкВозм = ВыборкаРезультата.СуммаВПодсистемеНДС;
				Если ДО1420 <> СуммаНДСкВозм Тогда // есть разница между бух.учетом Дт 1420 и оборотами рег-ра "НДС к возмещению"
					 ОшибкиНайдены = Истина;
					 ВыборкаДетали = ВыборкаРезультата.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					 Пока ВыборкаДетали.Следующий() Цикл
						 НовСтрока = ТаблицаОшибок.Добавить();
						 НовСтрока.Счет = ВыборкаДетали.Счет;
						 НовСтрока.Регистр = ВыборкаДетали.Регистр;
						 НовСтрока.Документ = ВыборкаДетали.Документ;
						 НовСтрока.СуммаПоДаннымБухУчета = ВыборкаДетали.СуммаПоДаннымБухУчета;
						 НовСтрока.СуммаВПодсистемеНДС = ВыборкаДетали.СуммаВПодсистемеНДС;						 
					 КонецЦикла;                                                           					
				КонецЕсли;				
				
			ИначеЕсли  ВыборкаРезультата.Регистр = "Корректировка НДС к возмещению" Тогда
			    КО1420 = ВыборкаРезультата.СуммаПоДаннымБухУчета;
				СуммаКорректировкаНДСкВозм = ВыборкаРезультата.СуммаВПодсистемеНДС;
				Если КО1420 <> - СуммаКорректировкаНДСкВозм Тогда // есть разница между бух.учетом Кт 1420 и оборотами рег-ра "Корректировка НДС к возмещению"
					 ОшибкиНайдены = Истина;
					 ВыборкаДетали = ВыборкаРезультата.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					 Пока ВыборкаДетали.Следующий() Цикл
						 НовСтрока = ТаблицаОшибок.Добавить();
						 НовСтрока.Счет = ВыборкаДетали.Счет;
						 НовСтрока.Регистр = ВыборкаДетали.Регистр;
						 НовСтрока.Документ = ВыборкаДетали.Документ;
						 НовСтрока.СуммаПоДаннымБухУчета = ВыборкаДетали.СуммаПоДаннымБухУчета;
						 НовСтрока.СуммаВПодсистемеНДС = ВыборкаДетали.СуммаВПодсистемеНДС;						 
					 КонецЦикла;                                                           					
				КонецЕсли; 
				 
			ИначеЕсли  ВыборкаРезультата.Регистр = "НДС" Тогда
			    КО3130 = ВыборкаРезультата.СуммаПоДаннымБухУчета;
				СуммаНДС = ВыборкаРезультата.СуммаВПодсистемеНДС;
				Если КО3130 <> СуммаНДС Тогда // есть разница между бух.учетом Кт 3130 и оборотами рег-ра "НДС"
					 ОшибкиНайдены = Истина;
					 ВыборкаДетали = ВыборкаРезультата.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					 Пока ВыборкаДетали.Следующий() Цикл
						 НовСтрока = ТаблицаОшибок.Добавить();
						 НовСтрока.Счет = ВыборкаДетали.Счет;
						 НовСтрока.Регистр = ВыборкаДетали.Регистр;
						 НовСтрока.Документ = ВыборкаДетали.Документ;
						 НовСтрока.СуммаПоДаннымБухУчета = ВыборкаДетали.СуммаПоДаннымБухУчета;
						 НовСтрока.СуммаВПодсистемеНДС = ВыборкаДетали.СуммаВПодсистемеНДС;						 
					 КонецЦикла;                                                           					
				КонецЕсли;
				
			ИначеЕсли  ВыборкаРезультата.Регистр = "Корректировка НДС" Тогда
			    ДО3130 = ВыборкаРезультата.СуммаПоДаннымБухУчета;
				СуммаКорректировкаНДС = ВыборкаРезультата.СуммаВПодсистемеНДС;
				Если ДО3130 <> - СуммаКорректировкаНДС Тогда // есть разница между бух.учетом Дт 3130 и оборотами рег-ра "Корректировка НДС"
					 ОшибкиНайдены = Истина;
					 ВыборкаДетали = ВыборкаРезультата.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					 Пока ВыборкаДетали.Следующий() Цикл
						 НовСтрока = ТаблицаОшибок.Добавить();
						 НовСтрока.Счет = ВыборкаДетали.Счет;
						 НовСтрока.Регистр = ВыборкаДетали.Регистр;
						 НовСтрока.Документ = ВыборкаДетали.Документ;
						 НовСтрока.СуммаПоДаннымБухУчета = ВыборкаДетали.СуммаПоДаннымБухУчета;
						 НовСтрока.СуммаВПодсистемеНДС = ВыборкаДетали.СуммаВПодсистемеНДС;						 
					 КонецЦикла;                                                           					
				КонецЕсли; 			 
				
			КонецЕсли;
			
		КонецЦикла;		
		
		СтрокаПравила.ОбнаруженыОшибки      = ОшибкиНайдены;
		СтрокаПравила.ПроверкаВыполнена     = Истина;		
		Если ТаблицаОшибок.Количество() <> 0 Тогда
			ПараметрыОтчета.ИсходящиеДанные.Вставить("СверкаБухИРегистровНДСТаблицаЗначений", ТаблицаОшибок);
			СтруктураЗаголовков = Новый Структура;
			СтруктураЗаголовков.Вставить("Документ", 			  НСтр("ru = 'Документ'"));
			СтруктураЗаголовков.Вставить("Регистр", 			  НСтр("ru = 'Регистр накопления'"));
			СтруктураЗаголовков.Вставить("СуммаПоДаннымБухУчета", НСтр("ru = 'Сумма по данным бух.учета'"));
			СтруктураЗаголовков.Вставить("СуммаВПодсистемеНДС",   НСтр("ru = 'Сумма в подсистеме НДС'"));			
			ПараметрыОтчета.ИсходящиеДанные.Вставить("СверкаБухИРегистровНДССтруктураЗаголовков", СтруктураЗаголовков);
			СтруктураРасшифровки = Новый Структура;
			СтруктураРасшифровки.Вставить("Документ", "Документ");			
			ПараметрыОтчета.ИсходящиеДанные.Вставить("СверкаБухИРегистровНДССтруктураРасшифровки", СтруктураРасшифровки);
			СтруктураШириныКолонок = Новый Структура;
			СтруктураШириныКолонок.Вставить("Счет", 30);
			СтруктураШириныКолонок.Вставить("Регистр", 40);
			СтруктураШириныКолонок.Вставить("Документ", 60);
			СтруктураШириныКолонок.Вставить("СуммаПоДаннымБухУчета", 40);
			СтруктураШириныКолонок.Вставить("СуммаВПодсистемеНДС", 40);
			ПараметрыОтчета.ИсходящиеДанные.Вставить("СверкаБухИРегистровНДССтруктураШириныКолонок", СтруктураШириныКолонок);
			
		КонецЕсли;
		
	Иначе
		СтрокаПравила.ОбнаруженыОшибки      = Ложь;
		СтрокаПравила.ПроверкаВыполнена     = Истина;		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьПравилоСверкаБухИРегистровНДС()

Процедура ПроверитьПравилоПроверкаВыданныхСчетовФактур(СтрокаПравила, ПараметрыОтчета)

	// Алгоритм проверки	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата", 		 ПараметрыОтчета.ДатаНач);
	Запрос.УстановитьПараметр("КонДата", 		 КонецДня(ПараметрыОтчета.ДатаКон));
	Запрос.УстановитьПараметр("Организация", 	 ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("Электронно", 	 Перечисления.СпособыОбменаДокументами.Электронно);
	Запрос.УстановитьПараметр("ПустаяСтавкаНДС", Справочники.СтавкиНДС.ПустаяСсылка());
	Запрос.УстановитьПараметр("Отсутствует",     НСтр("ru = '<Отсутствует>'"));
	Запрос.УстановитьПараметр("СФНаБумажномНосителе", НСтр("ru = '<СФ на бумажном носителе>'"));
	
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СписокСчетовФактурТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                          |	СчетФактураВыданный.Ссылка КАК Ссылка,
	                          |	СчетФактураВыданный.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	                          |	ВЫБОР
	                          |		КОГДА СчетФактураВыданный.КратностьВзаиморасчетов = 0
	                          |			ТОГДА 1
	                          |		ИНАЧЕ СчетФактураВыданный.КратностьВзаиморасчетов
	                          |	КОНЕЦ КАК КратностьВзаиморасчетов,
	                          |	СчетФактураВыданный.СпособВыставления = &Электронно КАК Электронно,
	                          |	ВЫБОР
	                          |		КОГДА СчетФактураВыданный.ВалютаДокумента = &ВалютаРегламентированногоУчета
	                          |			ТОГДА Ложь
	                          |		ИНАЧЕ Истина
	                          |	КОНЕЦ КАК РасчетыВВалюте,
	                          |	СчетФактураВыданный.УчитыватьНДС КАК УчитыватьНДС,
	                          |	СчетФактураВыданный.УчитыватьАкциз КАК УчитыватьАкциз,
	                          |	СчетФактураВыданный.СуммаВключаетНДС КАК СуммаВключаетНДС,
	                          |	СчетФактураВыданный.СуммаВключаетАкциз КАК СуммаВключаетАкциз
	                          |ПОМЕСТИТЬ СчетФактураВыданный
	                          |ИЗ
	                          |	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	                          |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаФактурыПрекратившиеДействие КАК СчетаФактурыПрекратившиеДействие
	                          |		ПО СчетФактураВыданный.Ссылка = СчетаФактурыПрекратившиеДействие.СчетФактура
	                          |ГДЕ
	                          |	СчетФактураВыданный.Дата МЕЖДУ &НачДата И &КонДата
	                          |	И СчетФактураВыданный.Проведен
	                          |	И СчетФактураВыданный.Организация В(&Организация)
	                          |	И СчетФактураВыданный.ПодтвержденДокументамиОтгрузки
	                          |	И СчетаФактурыПрекратившиеДействие.СчетФактура ЕСТЬ NULL
	                          |ИНДЕКСИРОВАТЬ ПО
	                          |	Ссылка
	                          |;
	                          |
	                          |////////////////////////////////////////////////////////////////////////////////
	                          |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                          |	СчетФактураВыданныйДокументыОснования.Ссылка КАК Ссылка,
	                          |	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование
	                          |ПОМЕСТИТЬ СчетФактураВыданныйДокументыОснования
	                          |ИЗ
	                          |	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	                          |ГДЕ
	                          |	СчетФактураВыданныйДокументыОснования.Ссылка В
	                          |			(ВЫБРАТЬ
	                          |				СчетФактураВыданный.Ссылка
	                          |			ИЗ
	                          |				СчетФактураВыданный)
	                          |ИНДЕКСИРОВАТЬ ПО
	                          |	ДокументОснование
	                          |;
	                          |
	                          |////////////////////////////////////////////////////////////////////////////////
	                          |ВЫБРАТЬ
	                          |	МИНИМУМ(СчетФактураВыданныйДокументыОснования.ДокументОснование.Дата) КАК МинДатаОснования
	                          |ИЗ
	                          |	СчетФактураВыданныйДокументыОснования КАК СчетФактураВыданныйДокументыОснования";
										  
	Запрос.Текст = СписокСчетовФактурТекст;
	
	РезультатНачДатаОснования = Запрос.Выполнить();
	Если РезультатНачДатаОснования.Пустой() Тогда
		НачДатаОснований = ПараметрыОтчета.ДатаНач;
	Иначе
		ВыборкаДат = РезультатНачДатаОснования.Выбрать();
		ВыборкаДат.Следующий();
		НачДатаОснований = ВыборкаДат.МинДатаОснования;
	КонецЕсли;
	Запрос.УстановитьПараметр("НачДатаОснований", НачДатаОснований);

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	АктуальныеЭСФ.СчетФактура КАК СчетФактура,
	               |	АктуальныеЭСФ.ЭСФ КАК ЭСФ,
	               |	ВЫБОР
	               |		КОГДА АктуальныеЭСФ.ЭСФ.Валюта <> &ВалютаРегламентированногоУчета
	               |			ТОГДА АктуальныеЭСФ.ЭСФ.КурсВалюты
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК КурсВалюты,
	               |	ВЫБОР
	               |		КОГДА АктуальныеЭСФ.ЭСФ.Валюта <> &ВалютаРегламентированногоУчета
	               |			ТОГДА Истина
	               |		ИНАЧЕ Ложь
	               |	КОНЕЦ КАК РасчетыВВалюте
	               |ПОМЕСТИТЬ АктуальныеЭСФ
	               |ИЗ
	               |	РегистрСведений.АктуальныеЭСФ КАК АктуальныеЭСФ
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетФактураВыданный КАК СчетФактураВыданный
	               |		ПО АктуальныеЭСФ.СчетФактура = СчетФактураВыданный.Ссылка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ЭСФ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	АктуальныеЭСФ.СчетФактура КАК СчетФактура,
	               |	АктуальныеЭСФ.ЭСФ КАК ЭСФ,
	               |	ЕСТЬNULL(ЭСФТовары.СуммаБезНалогов, 0) + ЕСТЬNULL(ЭСФТовары.СуммаАкциза, 0) КАК СуммаБезНДС,
	               |	ЕСТЬNULL(ЭСФТовары.СуммаНДС, 0) КАК СуммаНДС,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ЭСФТовары.СтавкаНДС, &ПустаяСтавкаНДС) = &ПустаяСтавкаНДС
	               |			ТОГДА ЕСТЬNULL(ЭСФТовары.СтавкаНДСЧисло, 0)
				   |		ИНАЧЕ ЕСТЬNULL(ЭСФТовары.СтавкаНДС.Ставка, 0)
	               |	КОНЕЦ КАК ПроцентНДС,
	               |	АктуальныеЭСФ.КурсВалюты КАК КурсВалюты,
	               |	АктуальныеЭСФ.РасчетыВВалюте КАК РасчетыВВалюте
	               |ПОМЕСТИТЬ АктуальныеЭСФРазвернуто
	               |ИЗ
	               |	АктуальныеЭСФ КАК АктуальныеЭСФ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭСФ.Товары КАК ЭСФТовары
	               |		ПО АктуальныеЭСФ.ЭСФ = ЭСФТовары.Ссылка
	               |
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	АктуальныеЭСФРазвернуто.СчетФактура КАК СчетФактура,
	               |	АктуальныеЭСФРазвернуто.ЭСФ КАК ЭСФ,
				   |	ВЫРАЗИТЬ(АктуальныеЭСФРазвернуто.СуммаБезНДС * АктуальныеЭСФРазвернуто.КурсВалюты КАК ЧИСЛО(15, 2)) КАК СуммаБезНДС,
	               |	ВЫБОР
	               |		КОГДА АктуальныеЭСФРазвернуто.РасчетыВВалюте
	               |			ТОГДА ВЫРАЗИТЬ((АктуальныеЭСФРазвернуто.СуммаБезНДС * АктуальныеЭСФРазвернуто.КурсВалюты) * АктуальныеЭСФРазвернуто.ПроцентНДС / 100 КАК ЧИСЛО(15, 2))
	               |		ИНАЧЕ ВЫРАЗИТЬ(АктуальныеЭСФРазвернуто.СуммаНДС * АктуальныеЭСФРазвернуто.КурсВалюты КАК ЧИСЛО(15, 2))
	               |	КОНЕЦ КАК СуммаНДС
	               |ПОМЕСТИТЬ АктуальныеЭСФРасчет
	               |ИЗ
	               |	АктуальныеЭСФРазвернуто КАК АктуальныеЭСФРазвернуто
	               |;
	               |
				   |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	АктуальныеЭСФРасчет.СчетФактура КАК СчетФактура,
	               |	АктуальныеЭСФРасчет.ЭСФ КАК ЭСФ,
	               |	СУММА(АктуальныеЭСФРасчет.СуммаБезНДС) КАК СуммаБезНДС,
	               |	СУММА(АктуальныеЭСФРасчет.СуммаНДС) КАК СуммаНДС
	               |ПОМЕСТИТЬ ДанныеЭСФ
	               |ИЗ
	               |	АктуальныеЭСФРасчет КАК АктуальныеЭСФРасчет
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	АктуальныеЭСФРасчет.СчетФактура,
	               |	АктуальныеЭСФРасчет.ЭСФ
	               |				
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СчетФактура";
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СчетФактураТовары.Ссылка КАК Ссылка,
	               |	СчетФактураТовары.СуммаНДС КАК СуммаНДС,
	               |	СчетФактураТовары.Сумма - ВЫБОР
	               |		КОГДА СчетФактураТовары.Ссылка.СуммаВключаетНДС
	               |			ТОГДА СчетФактураТовары.СуммаНДС
	               |		ИНАЧЕ 0
	               |	КОНЕЦ + ВЫБОР
	               |		КОГДА НЕ СчетФактураТовары.Ссылка.СуммаВключаетАкциз
	               |			ТОГДА СчетФактураТовары.СуммаАкциза
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК СуммаБезНалогов,
	               |	СчетФактураТовары.СтавкаНДС.Ставка КАК ПроцентНДС
	               |ПОМЕСТИТЬ ДанныеСчетовФактурТабЧасти
	               |ИЗ
	               |	Документ.СчетФактураВыданный.Товары КАК СчетФактураТовары
	               |ГДЕ
	               |	СчетФактураТовары.Ссылка В
	               |		(ВЫБРАТЬ
	               |			СчетФактураВыданный.Ссылка
	               |		ИЗ
	               |			СчетФактураВыданный)
	               |				
	               |ОБЪЕДИНИТЬ ВСЕ
	               |				
	               |ВЫБРАТЬ
	               |	СчетФактураУслуги.Ссылка,
	               |	СчетФактураУслуги.СуммаНДС,
	               |	СчетФактураУслуги.Сумма - ВЫБОР
	               |		КОГДА СчетФактураУслуги.Ссылка.СуммаВключаетНДС
	               |			ТОГДА СчетФактураУслуги.СуммаНДС
	               |		ИНАЧЕ 0
	               |	КОНЕЦ,
	               |	СчетФактураУслуги.СтавкаНДС.Ставка
	               |ИЗ
	               |	Документ.СчетФактураВыданный.Услуги КАК СчетФактураУслуги
	               |ГДЕ
	               |	СчетФактураУслуги.Ссылка В
	               |		(ВЫБРАТЬ
	               |			СчетФактураВыданный.Ссылка
	               |		ИЗ
	               |			СчетФактураВыданный)
	               |				
	               |ОБЪЕДИНИТЬ ВСЕ
	               |				
	               |ВЫБРАТЬ
	               |	СчетФактураОС.Ссылка,
	               |	СчетФактураОС.СуммаНДС,
	               |	СчетФактураОС.Сумма - ВЫБОР
	               |		КОГДА СчетФактураОС.Ссылка.СуммаВключаетНДС
	               |			ТОГДА СчетФактураОС.СуммаНДС
	               |		ИНАЧЕ 0
	               |	КОНЕЦ,
	               |	СчетФактураОС.СтавкаНДС.Ставка
	               |ИЗ
	               |	Документ.СчетФактураВыданный.ОС КАК СчетФактураОС
	               |ГДЕ
	               |	СчетФактураОС.Ссылка В
	               |		(ВЫБРАТЬ
	               |			СчетФактураВыданный.Ссылка
	               |		ИЗ
	               |			СчетФактураВыданный)
	               |				
	               |ОБЪЕДИНИТЬ ВСЕ
	               |				
	               |ВЫБРАТЬ
	               |	СчетФактураНМА.Ссылка,
	               |	СчетФактураНМА.СуммаНДС,
	               |	СчетФактураНМА.Сумма - ВЫБОР
	               |		КОГДА СчетФактураНМА.Ссылка.СуммаВключаетНДС
	               |			ТОГДА СчетФактураНМА.СуммаНДС
	               |		ИНАЧЕ 0
	               |	КОНЕЦ,
	               |	СчетФактураНМА.СтавкаНДС.Ставка
	               |ИЗ
	               |	Документ.СчетФактураВыданный.НМА КАК СчетФактураНМА
	               |ГДЕ
	               |	СчетФактураНМА.Ссылка В
	               |		(ВЫБРАТЬ
	               |			СчетФактураВыданный.Ссылка
	               |		ИЗ
	               |			СчетФактураВыданный)
	               |				
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка
	               |;
	               |
				   |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СчетФактураВыданный.Ссылка КАК Ссылка,
	               |	СчетФактураВыданный.Электронно КАК Электронно,
	               |	СчетФактураВыданный.РасчетыВВалюте КАК РасчетыВВалюте,
	               |	ВЫРАЗИТЬ(ЕСТЬNULL(ДанныеСчетовФактурТабЧасти.СуммаНДС, 0)*СчетФактураВыданный.КурсВзаиморасчетов/СчетФактураВыданный.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	               |	ВЫРАЗИТЬ(ЕСТЬNULL(ДанныеСчетовФактурТабЧасти.СуммаБезНалогов, 0)*СчетФактураВыданный.КурсВзаиморасчетов/СчетФактураВыданный.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК СуммаБезНДС,
	               |	ВЫРАЗИТЬ((ЕСТЬNULL(ДанныеСчетовФактурТабЧасти.СуммаБезНалогов, 0)*ЕСТЬNULL(ДанныеСчетовФактурТабЧасти.ПроцентНДС, 0)/100)*СчетФактураВыданный.КурсВзаиморасчетов/СчетФактураВыданный.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК СуммаНДСИзОборота
	               |ПОМЕСТИТЬ ДанныеСчетовФактурРазвернуто
	               |ИЗ
	               |	СчетФактураВыданный КАК СчетФактураВыданный
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеСчетовФактурТабЧасти КАК ДанныеСчетовФактурТабЧасти
	               |		ПО СчетФактураВыданный.Ссылка = ДанныеСчетовФактурТабЧасти.Ссылка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка
	               |;
	               |
				   |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеСчетовФактурРазвернуто.Ссылка КАК Ссылка,
	               |	ДанныеСчетовФактурРазвернуто.Электронно КАК Электронно,
	               |	ДанныеСчетовФактурРазвернуто.РасчетыВВалюте КАК РасчетыВВалюте,
	               |	СУММА(ДанныеСчетовФактурРазвернуто.СуммаНДС) КАК СуммаНДС,
	               |	СУММА(ДанныеСчетовФактурРазвернуто.СуммаБезНДС) КАК СуммаБезНДС,
	               |	СУММА(ДанныеСчетовФактурРазвернуто.СуммаНДСИзОборота) КАК СуммаНДСИзОборота
	               |ПОМЕСТИТЬ ДанныеСчетовФактур
	               |ИЗ
	               |	ДанныеСчетовФактурРазвернуто КАК ДанныеСчетовФактурРазвернуто
	               |	
	               |СГРУППИРОВАТЬ ПО
	               |	ДанныеСчетовФактурРазвернуто.Ссылка,
	               |	ДанныеСчетовФактурРазвернуто.РасчетыВВалюте,
	               |	ДанныеСчетовФактурРазвернуто.Электронно
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка
	               |;
	               |
				   |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	НДС.Регистратор КАК Регистратор,
	               |	СУММА(НДС.СуммаБезНДС) КАК СуммаБезНДС,
	               |	СУММА(НДС.ОборотПоРеализации) КАК ОборотПоРеализации,
	               |	СУММА(НДС.СуммаНДС) КАК СуммаНДС
	               |ПОМЕСТИТЬ ДвиженияРегистраторов
	               |ИЗ
	               |	РегистрНакопления.НДС КАК НДС
	               |ГДЕ
	               |	НДС.Период >= &НачДатаОснований
	               |	И НДС.Организация В(&Организация)
	               |	И НДС.Регистратор В(ВЫБРАТЬ СчетФактураВыданныйДокументыОснования.ДокументОснование ИЗ СчетФактураВыданныйДокументыОснования)
	               |				
	               |СГРУППИРОВАТЬ ПО
	               |	НДС.Регистратор
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |				
	               |ВЫБРАТЬ
	               |	КорректировкаНДС.Регистратор,
	               |	СУММА(КорректировкаНДС.СуммаКорректировкиОборота),
	               |	СУММА(КорректировкаНДС.СуммаКорректировкиОборота),
	               |	СУММА(КорректировкаНДС.СуммаНДС)
	               |ИЗ
	               |	РегистрНакопления.КорректировкаНДС КАК КорректировкаНДС
	               |ГДЕ
	               |	КорректировкаНДС.Период >= &НачДатаОснований
	               |	И КорректировкаНДС.Организация В(&Организация)
	               |	И КорректировкаНДС.Регистратор В(ВЫБРАТЬ СчетФактураВыданныйДокументыОснования.ДокументОснование ИЗ СчетФактураВыданныйДокументыОснования)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КорректировкаНДС.Регистратор
	               |				
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Регистратор
	               |;
	               |
				   |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДвиженияРегистраторов.Регистратор КАК Регистратор,
	               |	ДвиженияРегистраторов.СуммаБезНДС КАК СуммаБезНДС,
	               |	ДвиженияРегистраторов.ОборотПоРеализации КАК ОборотПоРеализации,
	               |	ДвиженияРегистраторов.СуммаНДС КАК СуммаНДС,
	               |	СчетФактураВыданныйДокументыОснования.Ссылка КАК СчетФактура,
	               |	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументРегистратор
	               |ПОМЕСТИТЬ ДанныеРегистраторов
	               |ИЗ
				   |	СчетФактураВыданныйДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ДвиженияРегистраторов КАК ДвиженияРегистраторов
	               |		ПО ДвиженияРегистраторов.Регистратор = СчетФактураВыданныйДокументыОснования.ДокументОснование
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СчетФактура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ДанныеСчетовФактур.Ссылка КАК Ссылка,
	               |	ЕСТЬNULL(ДанныеРегистраторов.Регистратор, &Отсутствует) КАК Регистратор,
	               |	ВЫБОР
	               |		КОГДА ДанныеСчетовФактур.Электронно
	               |			ТОГДА ЕСТЬNULL(ДанныеЭСФ.ЭСФ, &Отсутствует)
	               |		ИНАЧЕ &СФНаБумажномНосителе
	               |	КОНЕЦ КАК ЭСФ,
	               |	ДанныеСчетовФактур.Электронно КАК Электронно,
	               |	ВЫБОР
	               |		КОГДА ДанныеСчетовФактур.РасчетыВВалюте
	               |			ТОГДА ДанныеСчетовФактур.СуммаНДСИзОборота
	               |		ИНАЧЕ ДанныеСчетовФактур.СуммаНДС
	               |	КОНЕЦ КАК СуммаНДС,
	               |	ДанныеСчетовФактур.СуммаБезНДС КАК СуммаБезНДС,
	               |	ЕСТЬNULL(ДанныеРегистраторов.СуммаНДС, 0) КАК СуммаНДСОтгрузки,
	               |	ЕСТЬNULL(ДанныеРегистраторов.СуммаБезНДС, 0) КАК СуммаБезНДСОтгрузки,
	               |	ЕСТЬNULL(ДанныеЭСФ.СуммаНДС, 0) КАК СуммаНДСЭСФ,
	               |	ЕСТЬNULL(ДанныеЭСФ.СуммаБезНДС, 0) КАК СуммаБезНДСЭСФ
	               |ИЗ
	               |	ДанныеСчетовФактур КАК ДанныеСчетовФактур
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеРегистраторов КАК ДанныеРегистраторов
	               |		ПО (ДанныеРегистраторов.СчетФактура = ДанныеСчетовФактур.Ссылка)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеЭСФ КАК ДанныеЭСФ
	               |		ПО (ДанныеЭСФ.СчетФактура = ДанныеСчетовФактур.Ссылка)
	               |ГДЕ
	               |	(ЕСТЬNULL(ДанныеРегистраторов.СуммаБезНДС, 0) <> ДанныеСчетовФактур.СуммаБезНДС
	               |			ИЛИ ЕСТЬNULL(ДанныеРегистраторов.СуммаНДС, 0) <> ДанныеСчетовФактур.СуммаНДС
	               |			ИЛИ ДанныеСчетовФактур.Электронно
	               |				И ЕСТЬNULL(ДанныеЭСФ.СуммаНДС, 0) <> ДанныеСчетовФактур.СуммаНДС
	               |			ИЛИ ДанныеСчетовФактур.Электронно
	               |				И ЕСТЬNULL(ДанныеЭСФ.СуммаБезНДС, 0) <> ДанныеСчетовФактур.СуммаБезНДС)
	               |ИТОГИ
	               |	МАКСИМУМ(Электронно),
	               |	МАКСИМУМ(СуммаНДС),
	               |	МАКСИМУМ(СуммаБезНДС),
	               |	СУММА(СуммаНДСОтгрузки),
	               |	СУММА(СуммаБезНДСОтгрузки),
	               |	МАКСИМУМ(СуммаНДСЭСФ),
	               |	МАКСИМУМ(СуммаБезНДСЭСФ)
	               |ПО
	               |	Ссылка";
				 
	Результат = Запрос.Выполнить();	

	СтрокаПравила.ПроверкаВыполнена = Истина;
			
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТипЧисло = Новый ОписаниеТипов("Число");
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("Ссылка");
	ТаблицаОшибок.Колонки.Добавить("ЭСФ");
	ТаблицаОшибок.Колонки.Добавить("Регистратор");
	ТаблицаОшибок.Колонки.Добавить("СуммаНДС"            , ТипЧисло);
	ТаблицаОшибок.Колонки.Добавить("СуммаНДСОтгрузки"    , ТипЧисло);
	ТаблицаОшибок.Колонки.Добавить("СуммаНДСЭСФ"         , ТипЧисло);
	ТаблицаОшибок.Колонки.Добавить("СуммаБезНДС"         , ТипЧисло);
	ТаблицаОшибок.Колонки.Добавить("СуммаБезНДСОтгрузки" , ТипЧисло);
	ТаблицаОшибок.Колонки.Добавить("СуммаБезНДСЭСФ"      , ТипЧисло);
	
	СтрокаПараметра = СтрокаПравила.Строки.Найти("ДопустимаяПогрешностьВыданныеСФ", "Идентификатор");
	ДопустимаяПогрешность = ?(СтрокаПараметра = Неопределено, 0, СтрокаПараметра.ЗначениеПараметра);
	Если ДопустимаяПогрешность < 0 Тогда
		ДопустимаяПогрешность = -ДопустимаяПогрешность;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		СуммаНДСОтклонение    = Выборка.СуммаНДС    - Выборка.СуммаНДСОтгрузки;
		СуммаБезНДСОтклонение = Выборка.СуммаБезНДС - Выборка.СуммаБезНДСОтгрузки;
		Если Выборка.Электронно Тогда
			СуммаНДСОтклонениеЭСФ    = Выборка.СуммаНДС    - Выборка.СуммаНДСЭСФ;
			СуммаБезНДСОтклонениеЭСФ = Выборка.СуммаБезНДС - Выборка.СуммаБезНДСЭСФ;
		Иначе
			СуммаНДСОтклонениеЭСФ    = 0;
			СуммаБезНДСОтклонениеЭСФ = 0;
		КонецЕсли;
		
		//проверим если есть отклонения, в случае когда у Счет-фактуры оснований больше одного
		Если  -ДопустимаяПогрешность <= СуммаНДСОтклонение       И СуммаНДСОтклонение       <= ДопустимаяПогрешность
			И -ДопустимаяПогрешность <= СуммаБезНДСОтклонение    И СуммаБезНДСОтклонение    <= ДопустимаяПогрешность
			И -ДопустимаяПогрешность <= СуммаНДСОтклонениеЭСФ    И СуммаНДСОтклонениеЭСФ    <= ДопустимаяПогрешность
			И -ДопустимаяПогрешность <= СуммаБезНДСОтклонениеЭСФ И СуммаБезНДСОтклонениеЭСФ <= ДопустимаяПогрешность Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаПоРегистраторам = Выборка.Выбрать();
		Пока ВыборкаПоРегистраторам.Следующий() Цикл
			СтрокаОшибки = ТаблицаОшибок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОшибки, ВыборкаПоРегистраторам);
		КонецЦикла;
	КонецЦикла;
	
	Если Не ТаблицаОшибок.Количество() = 0 Тогда
		СтрокаПравила.ОбнаруженыОшибки  = Истина;
		
		ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаОшибок);
		ИсточникДанных.Колонки.Ссылка.Измерение = Истина;     
		ИсточникДанных.Колонки.ЭСФ.Измерение    = Истина;
		ИсточникДанных.Колонки.СуммаНДС.Итог 			= "МАКСИМУМ(СуммаНДС)";
		ИсточникДанных.Колонки.СуммаНДСОтгрузки.Итог 	= "СУММА(СуммаНДСОтгрузки)";
		ИсточникДанных.Колонки.СуммаНДСЭСФ.Итог         = "МАКСИМУМ(СуммаНДСЭСФ)";
		ИсточникДанных.Колонки.СуммаБезНДС.Итог  		= "МАКСИМУМ(СуммаБезНДС)";
		ИсточникДанных.Колонки.СуммаБезНДСОтгрузки.Итог = "СУММА(СуммаБезНДСОтгрузки)";
		ИсточникДанных.Колонки.СуммаБезНДСЭСФ.Итог      = "МАКСИМУМ(СуммаБезНДСЭСФ)";
	
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаВыданныхСчетовФактурИсточникДанных", ИсточникДанных);
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("Ссылка",              НСтр("ru = 'Счет-фактура'"));
		СтруктураЗаголовков.Вставить("Регистратор",         НСтр("ru = 'Документ отгрузки'"));
		СтруктураЗаголовков.Вставить("ЭСФ",                 НСтр("ru = 'ЭСФ'"));
		СтруктураЗаголовков.Вставить("СуммаНДС",            НСтр("ru = 'НДС по счету-фактуре'"));
		СтруктураЗаголовков.Вставить("СуммаНДСОтгрузки",    НСтр("ru = 'НДС по документам отгрузки'"));		
		СтруктураЗаголовков.Вставить("СуммаНДСЭСФ",         НСтр("ru = 'НДС по документам ЭСФ'"));		
		СтруктураЗаголовков.Вставить("СуммаБезНДС",         НСтр("ru = 'Без НДС по счету-фактуре'"));
		СтруктураЗаголовков.Вставить("СуммаБезНДСОтгрузки", НСтр("ru = 'Без НДС по документам отгрузки'"));		
		СтруктураЗаголовков.Вставить("СуммаБезНДСЭСФ",      НСтр("ru = 'Без НДС по документам ЭСФ'"));		
		
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаВыданныхСчетовФактурСтруктураЗаголовков", СтруктураЗаголовков);
		
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Ссылка",              "Ссылка");
		СтруктураРасшифровки.Вставить("СуммаНДС",            "Ссылка");
		СтруктураРасшифровки.Вставить("СуммаБезНДС",         "Ссылка");
		
		СтруктураРасшифровки.Вставить("Регистратор",         "Регистратор");		
		СтруктураРасшифровки.Вставить("СуммаНДСОтгрузки",    "Регистратор");		
		СтруктураРасшифровки.Вставить("СуммаБезНДСОтгрузки", "Регистратор");
		
		СтруктураРасшифровки.Вставить("ЭСФ",                 "ЭСФ");		
		СтруктураРасшифровки.Вставить("СуммаНДСЭСФ",         "ЭСФ");		
		СтруктураРасшифровки.Вставить("СуммаБезНДСЭСФ",      "ЭСФ");
		
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаВыданныхСчетовФактурСтруктураРасшифровки", СтруктураРасшифровки);
		
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("Ссылка", 				60);
		СтруктураШириныКолонок.Вставить("ЭСФ",                  60);
		СтруктураШириныКолонок.Вставить("Регистратор", 			120);
		СтруктураШириныКолонок.Вставить("СуммаНДС", 		  	40);
		СтруктураШириныКолонок.Вставить("СуммаБезНДС",	  		50);		
		СтруктураШириныКолонок.Вставить("СуммаНДСОтгрузки", 	40);		
		СтруктураШириныКолонок.Вставить("СуммаБезНДСОтгрузки",	50);		
		СтруктураШириныКолонок.Вставить("СуммаНДСЭСФ",          40);		
		СтруктураШириныКолонок.Вставить("СуммаБезНДСЭСФ",       50);		
				
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаВыданныхСчетовФактурСтруктураШириныКолонок", СтруктураШириныКолонок);	
		
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаВыданныхСчетовФактурМакетОформления", "ПроверкаВыпискиСчетовФактур");
	Иначе
		СтрокаПравила.ОбнаруженыОшибки = Ложь;	
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоПроверкаПолученныхСчетовФактур(СтрокаПравила, ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата", 		 ПараметрыОтчета.ДатаНач);
	Запрос.УстановитьПараметр("КонДата", 		 КонецДня(ПараметрыОтчета.ДатаКон));
	Запрос.УстановитьПараметр("Организация", 	 ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("Электронно", 	 Перечисления.СпособыОбменаДокументами.Электронно);
	Запрос.УстановитьПараметр("ПустаяСтавкаНДС", Справочники.СтавкиНДС.ПустаяСсылка());
	Запрос.УстановитьПараметр("Отсутствует",     НСтр("ru = '<Отсутствует>'"));
	Запрос.УстановитьПараметр("СФНаБумажномНосителе", НСтр("ru = '<СФ на бумажном носителе>'"));
    
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СписокСчетовФактурТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                          |	СчетФактураПолученный.Ссылка КАК Ссылка,
	                          |	СчетФактураПолученный.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	                          |	ВЫБОР
	                          |		КОГДА СчетФактураПолученный.КратностьВзаиморасчетов = 0
	                          |			ТОГДА 1
	                          |		ИНАЧЕ СчетФактураПолученный.КратностьВзаиморасчетов
	                          |	КОНЕЦ КАК КратностьВзаиморасчетов,
	                          |	СчетФактураПолученный.СпособПолучения = &Электронно КАК Электронно,
	                          |	ВЫБОР
	                          |		КОГДА СчетФактураПолученный.ВалютаДокумента = &ВалютаРегламентированногоУчета
	                          |			ТОГДА Ложь
	                          |		ИНАЧЕ Истина
	                          |	КОНЕЦ КАК РасчетыВВалюте
	                          |ПОМЕСТИТЬ СчетФактураПолученный
	                          |ИЗ
	                          |	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	                          |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаФактурыПрекратившиеДействие КАК СчетаФактурыПрекратившиеДействие
	                          |		ПО СчетФактураПолученный.Ссылка = СчетаФактурыПрекратившиеДействие.СчетФактура
	                          |ГДЕ
	                          |	СчетФактураПолученный.Дата МЕЖДУ &НачДата И &КонДата
	                          |	И СчетФактураПолученный.Проведен
	                          |	И СчетФактураПолученный.Организация В(&Организация)
	                          |	И СчетФактураПолученный.ПодтвержденДокументамиОтгрузки
	                          |	И СчетаФактурыПрекратившиеДействие.СчетФактура ЕСТЬ NULL
	                          |ИНДЕКСИРОВАТЬ ПО
	                          |	Ссылка
	                          |;
	                          |
	                          |////////////////////////////////////////////////////////////////////////////////
	                          |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                          |	СчетФактураВыданныйДокументыОснования.Ссылка КАК Ссылка,
	                          |	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование
	                          |ПОМЕСТИТЬ СчетФактураВыданныйДокументыОснования
	                          |ИЗ
	                          |	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	                          |ГДЕ
	                          |	СчетФактураВыданныйДокументыОснования.Ссылка В
	                          |			(ВЫБРАТЬ
	                          |				СчетФактураПолученный.Ссылка
	                          |			ИЗ
	                          |				СчетФактураПолученный)
	                          |ИНДЕКСИРОВАТЬ ПО
	                          |	ДокументОснование
	                          |;
	                          |
	                          |////////////////////////////////////////////////////////////////////////////////
	                          |ВЫБРАТЬ
	                          |	МИНИМУМ(СчетФактураВыданныйДокументыОснования.ДокументОснование.Дата) КАК МинДатаОснования
	                          |ИЗ
	                          |	СчетФактураВыданныйДокументыОснования КАК СчетФактураВыданныйДокументыОснования";
							  
	Запрос.Текст = СписокСчетовФактурТекст;

	РезультатНачДатаОснования = Запрос.Выполнить();
	Если РезультатНачДатаОснования.Пустой() Тогда
		НачДатаОснований = ПараметрыОтчета.ДатаНач;
	Иначе
		ВыборкаДат = РезультатНачДатаОснования.Выбрать();
		ВыборкаДат.Следующий();
		НачДатаОснований = ВыборкаДат.МинДатаОснования;
	КонецЕсли;
	Запрос.УстановитьПараметр("НачДатаОснований", НачДатаОснований);

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	АктуальныеЭСФ.СчетФактура КАК СчетФактура,
	               |	АктуальныеЭСФ.ЭСФ КАК ЭСФ,
	               |	ВЫБОР
	               |		КОГДА АктуальныеЭСФ.ЭСФ.Валюта <> &ВалютаРегламентированногоУчета
	               |			ТОГДА АктуальныеЭСФ.ЭСФ.КурсВалюты
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК КурсВалюты,
	               |	ВЫБОР
	               |		КОГДА АктуальныеЭСФ.ЭСФ.Валюта <> &ВалютаРегламентированногоУчета
	               |			ТОГДА Истина
	               |		ИНАЧЕ Ложь
	               |	КОНЕЦ КАК РасчетыВВалюте
	               |ПОМЕСТИТЬ АктуальныеЭСФ
	               |ИЗ
	               |	РегистрСведений.АктуальныеЭСФ КАК АктуальныеЭСФ
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетФактураПолученный КАК СчетФактураПолученный
	               |		ПО АктуальныеЭСФ.СчетФактура = СчетФактураПолученный.Ссылка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ЭСФ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	АктуальныеЭСФ.СчетФактура КАК СчетФактура,
	               |	АктуальныеЭСФ.ЭСФ КАК ЭСФ,
	               |	ЕСТЬNULL(ЭСФТовары.СуммаБезНалогов, 0) + ЕСТЬNULL(ЭСФТовары.СуммаАкциза, 0) КАК СуммаБезНДС,
	               |	ЕСТЬNULL(ЭСФТовары.СуммаНДС, 0) КАК СуммаНДС,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ЭСФТовары.СтавкаНДС, &ПустаяСтавкаНДС) = &ПустаяСтавкаНДС
	               |			ТОГДА ЕСТЬNULL(ЭСФТовары.СтавкаНДСЧисло, 0)
				   |		ИНАЧЕ ЕСТЬNULL(ЭСФТовары.СтавкаНДС.Ставка, 0)
	               |	КОНЕЦ КАК ПроцентНДС,
	               |	АктуальныеЭСФ.КурсВалюты КАК КурсВалюты,
	               |	АктуальныеЭСФ.РасчетыВВалюте КАК РасчетыВВалюте
	               |ПОМЕСТИТЬ АктуальныеЭСФРазвернуто
	               |ИЗ
	               |	АктуальныеЭСФ КАК АктуальныеЭСФ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭСФ.Товары КАК ЭСФТовары
	               |		ПО АктуальныеЭСФ.ЭСФ = ЭСФТовары.Ссылка
	               |
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	АктуальныеЭСФРазвернуто.СчетФактура КАК СчетФактура,
	               |	АктуальныеЭСФРазвернуто.ЭСФ КАК ЭСФ,
				   |	ВЫРАЗИТЬ(АктуальныеЭСФРазвернуто.СуммаБезНДС * АктуальныеЭСФРазвернуто.КурсВалюты КАК ЧИСЛО(15, 2)) КАК СуммаБезНДС,
	               |	ВЫБОР
	               |		КОГДА АктуальныеЭСФРазвернуто.РасчетыВВалюте
	               |			ТОГДА ВЫРАЗИТЬ((АктуальныеЭСФРазвернуто.СуммаБезНДС * АктуальныеЭСФРазвернуто.КурсВалюты) * АктуальныеЭСФРазвернуто.ПроцентНДС / 100 КАК ЧИСЛО(15, 2))
	               |		ИНАЧЕ ВЫРАЗИТЬ(АктуальныеЭСФРазвернуто.СуммаНДС * АктуальныеЭСФРазвернуто.КурсВалюты КАК ЧИСЛО(15, 2))
	               |	КОНЕЦ КАК СуммаНДС
	               |ПОМЕСТИТЬ АктуальныеЭСФРасчет
	               |ИЗ
	               |	АктуальныеЭСФРазвернуто КАК АктуальныеЭСФРазвернуто
	               |;
	               |
				   |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	АктуальныеЭСФРасчет.СчетФактура КАК СчетФактура,
	               |	АктуальныеЭСФРасчет.ЭСФ КАК ЭСФ,
	               |	СУММА(АктуальныеЭСФРасчет.СуммаБезНДС) КАК СуммаБезНДС,
	               |	СУММА(АктуальныеЭСФРасчет.СуммаНДС) КАК СуммаНДС
	               |ПОМЕСТИТЬ ДанныеЭСФ
	               |ИЗ
	               |	АктуальныеЭСФРасчет КАК АктуальныеЭСФРасчет
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	АктуальныеЭСФРасчет.СчетФактура,
	               |	АктуальныеЭСФРасчет.ЭСФ
	               |				
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СчетФактура";
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СчетФактураТовары.Ссылка КАК Ссылка,
	               |	СчетФактураТовары.СуммаНДС КАК СуммаНДС,
	               |	СчетФактураТовары.Сумма - ВЫБОР
	               |		КОГДА СчетФактураТовары.Ссылка.СуммаВключаетНДС
	               |			ТОГДА СчетФактураТовары.СуммаНДС
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК СуммаБезНалогов,
	               |	СчетФактураТовары.СтавкаНДС.Ставка КАК ПроцентНДС
	               |ПОМЕСТИТЬ ДанныеСчетовФактурТабЧасти
	               |ИЗ
	               |	Документ.СчетФактураПолученный.Товары КАК СчетФактураТовары
	               |ГДЕ
	               |	СчетФактураТовары.Ссылка В
	               |		(ВЫБРАТЬ
	               |			СчетФактураПолученный.Ссылка
	               |		ИЗ
	               |			СчетФактураПолученный)
	               |				
	               |ОБЪЕДИНИТЬ ВСЕ
	               |				
	               |ВЫБРАТЬ
	               |	СчетФактураУслуги.Ссылка,
	               |	СчетФактураУслуги.СуммаНДС,
	               |	СчетФактураУслуги.Сумма - ВЫБОР
	               |		КОГДА СчетФактураУслуги.Ссылка.СуммаВключаетНДС
	               |			ТОГДА СчетФактураУслуги.СуммаНДС
	               |		ИНАЧЕ 0
	               |	КОНЕЦ,
	               |	СчетФактураУслуги.СтавкаНДС.Ставка
	               |ИЗ
	               |	Документ.СчетФактураПолученный.Услуги КАК СчетФактураУслуги
	               |ГДЕ
	               |	СчетФактураУслуги.Ссылка В
	               |		(ВЫБРАТЬ
	               |			СчетФактураПолученный.Ссылка
	               |		ИЗ
	               |			СчетФактураПолученный)
	               |				
	               |ОБЪЕДИНИТЬ ВСЕ
	               |				
	               |ВЫБРАТЬ
	               |	СчетФактураОС.Ссылка,
	               |	СчетФактураОС.СуммаНДС,
	               |	СчетФактураОС.Сумма - ВЫБОР
	               |		КОГДА СчетФактураОС.Ссылка.СуммаВключаетНДС
	               |			ТОГДА СчетФактураОС.СуммаНДС
	               |		ИНАЧЕ 0
	               |	КОНЕЦ,
	               |	СчетФактураОС.СтавкаНДС.Ставка
	               |ИЗ
	               |	Документ.СчетФактураПолученный.ОС КАК СчетФактураОС
	               |ГДЕ
	               |	СчетФактураОС.Ссылка В
	               |		(ВЫБРАТЬ
	               |			СчетФактураПолученный.Ссылка
	               |		ИЗ
	               |			СчетФактураПолученный)
	               |				
	               |ОБЪЕДИНИТЬ ВСЕ
	               |				
	               |ВЫБРАТЬ
	               |	СчетФактураНМА.Ссылка,
	               |	СчетФактураНМА.СуммаНДС,
	               |	СчетФактураНМА.Сумма - ВЫБОР
	               |		КОГДА СчетФактураНМА.Ссылка.СуммаВключаетНДС
	               |			ТОГДА СчетФактураНМА.СуммаНДС
	               |		ИНАЧЕ 0
	               |	КОНЕЦ,
	               |	СчетФактураНМА.СтавкаНДС.Ставка
	               |ИЗ
	               |	Документ.СчетФактураПолученный.НМА КАК СчетФактураНМА
	               |ГДЕ
	               |	СчетФактураНМА.Ссылка В
	               |		(ВЫБРАТЬ
	               |			СчетФактураПолученный.Ссылка
	               |		ИЗ
	               |			СчетФактураПолученный)
	               |				
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка
	               |;
	               |
				   |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СчетФактураПолученный.Ссылка КАК Ссылка,
	               |	СчетФактураПолученный.Электронно КАК Электронно,
	               |	СчетФактураПолученный.РасчетыВВалюте КАК РасчетыВВалюте,
	               |	ВЫРАЗИТЬ(ЕСТЬNULL(ДанныеСчетовФактурТабЧасти.СуммаНДС, 0)*СчетФактураПолученный.КурсВзаиморасчетов/СчетФактураПолученный.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	               |	ВЫРАЗИТЬ(ЕСТЬNULL(ДанныеСчетовФактурТабЧасти.СуммаБезНалогов, 0)*СчетФактураПолученный.КурсВзаиморасчетов/СчетФактураПолученный.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК СуммаБезНДС,
	               |	ВЫРАЗИТЬ((ЕСТЬNULL(ДанныеСчетовФактурТабЧасти.СуммаБезНалогов, 0)*ЕСТЬNULL(ДанныеСчетовФактурТабЧасти.ПроцентНДС, 0)/100)*СчетФактураПолученный.КурсВзаиморасчетов/СчетФактураПолученный.КратностьВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК СуммаНДСИзОборота
	               |ПОМЕСТИТЬ ДанныеСчетовФактурРазвернуто
	               |ИЗ
	               |	СчетФактураПолученный КАК СчетФактураПолученный
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеСчетовФактурТабЧасти КАК ДанныеСчетовФактурТабЧасти
	               |		ПО СчетФактураПолученный.Ссылка = ДанныеСчетовФактурТабЧасти.Ссылка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка
	               |;
	               |
				   |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеСчетовФактурРазвернуто.Ссылка КАК Ссылка,
	               |	ДанныеСчетовФактурРазвернуто.Электронно КАК Электронно,
	               |	ДанныеСчетовФактурРазвернуто.РасчетыВВалюте КАК РасчетыВВалюте,
	               |	СУММА(ДанныеСчетовФактурРазвернуто.СуммаНДС) КАК СуммаНДС,
	               |	СУММА(ДанныеСчетовФактурРазвернуто.СуммаБезНДС) КАК СуммаБезНДС,
	               |	СУММА(ДанныеСчетовФактурРазвернуто.СуммаНДСИзОборота) КАК СуммаНДСИзОборота
	               |ПОМЕСТИТЬ ДанныеСчетовФактур
	               |ИЗ
	               |	ДанныеСчетовФактурРазвернуто КАК ДанныеСчетовФактурРазвернуто
	               |	
	               |СГРУППИРОВАТЬ ПО
	               |	ДанныеСчетовФактурРазвернуто.Ссылка,
	               |	ДанныеСчетовФактурРазвернуто.РасчетыВВалюте,
	               |	ДанныеСчетовФактурРазвернуто.Электронно
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка
	               |;
	               |
				   |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	НДС.Регистратор КАК Регистратор,
	               |	НДС.СчетФактура КАК СчетФактураСтроки,
	               |	СУММА(НДС.СуммаБезНДС) КАК СуммаБезНДС,
	               |	СУММА(НДС.УплаченныйНДС) КАК СуммаНДС
	               |ПОМЕСТИТЬ ДвиженияРегистраторов
	               |ИЗ
	               |	РегистрНакопления.НДСКВозмещению КАК НДС
	               |ГДЕ
	               |	НДС.Период >= &НачДатаОснований
	               |	И НДС.Организация В(&Организация)
	               |	И НДС.Регистратор В(ВЫБРАТЬ СчетФактураВыданныйДокументыОснования.ДокументОснование ИЗ СчетФактураВыданныйДокументыОснования)
	               |				
	               |СГРУППИРОВАТЬ ПО
	               |	НДС.Регистратор,
	               |	НДС.СчетФактура
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |				
	               |ВЫБРАТЬ
	               |	КорректировкаНДС.Регистратор,
	               |	NULL,
	               |	СУММА(КорректировкаНДС.СуммаКорректировкиОборота),
	               |	СУММА(КорректировкаНДС.УплаченныйНДС)
	               |ИЗ
	               |	РегистрНакопления.КорректировкаНДСКВозмещению КАК КорректировкаНДС
	               |ГДЕ
	               |	КорректировкаНДС.Период >= &НачДатаОснований
	               |	И КорректировкаНДС.Организация В(&Организация)
	               |	И КорректировкаНДС.Регистратор В(ВЫБРАТЬ СчетФактураВыданныйДокументыОснования.ДокументОснование ИЗ СчетФактураВыданныйДокументыОснования)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КорректировкаНДС.Регистратор
	               |				
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Регистратор,
	               |	СчетФактураСтроки
	               |;
	               |
				   |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДвиженияРегистраторов.Регистратор КАК Регистратор,
	               |	ДвиженияРегистраторов.СуммаБезНДС КАК СуммаБезНДС,
	               |	ДвиженияРегистраторов.СуммаНДС КАК СуммаНДС,
	               |	СчетФактураВыданныйДокументыОснования.Ссылка КАК СчетФактура,
	               |	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументРегистратор
	               |ПОМЕСТИТЬ ДанныеРегистраторов
	               |ИЗ
				   |	СчетФактураВыданныйДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ДвиженияРегистраторов КАК ДвиженияРегистраторов
	               |		ПО ДвиженияРегистраторов.Регистратор = СчетФактураВыданныйДокументыОснования.ДокументОснование
	               |			И (НЕ ДвиженияРегистраторов.Регистратор ССЫЛКА Документ.АвансовыйОтчет
	               |				ИЛИ ДвиженияРегистраторов.СчетФактураСтроки = СчетФактураВыданныйДокументыОснования.Ссылка)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СчетФактура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ДанныеСчетовФактур.Ссылка КАК Ссылка,
	               |	ЕСТЬNULL(ДанныеРегистраторов.Регистратор, &Отсутствует) КАК Регистратор,
	               |	ВЫБОР
	               |		КОГДА ДанныеСчетовФактур.Электронно
	               |			ТОГДА ЕСТЬNULL(ДанныеЭСФ.ЭСФ, &Отсутствует)
	               |		ИНАЧЕ &СФНаБумажномНосителе
	               |	КОНЕЦ КАК ЭСФ,
	               |	ДанныеСчетовФактур.Электронно КАК Электронно,
	               |	ВЫБОР
	               |		КОГДА ДанныеСчетовФактур.РасчетыВВалюте
	               |			ТОГДА ДанныеСчетовФактур.СуммаНДСИзОборота
	               |		ИНАЧЕ ДанныеСчетовФактур.СуммаНДС
	               |	КОНЕЦ КАК СуммаНДС,
	               |	ДанныеСчетовФактур.СуммаБезНДС КАК СуммаБезНДС,
	               |	ЕСТЬNULL(ДанныеРегистраторов.СуммаНДС, 0) КАК СуммаНДСОтгрузки,
	               |	ЕСТЬNULL(ДанныеРегистраторов.СуммаБезНДС, 0) КАК СуммаБезНДСОтгрузки,
	               |	ЕСТЬNULL(ДанныеЭСФ.СуммаНДС, 0) КАК СуммаНДСЭСФ,
	               |	ЕСТЬNULL(ДанныеЭСФ.СуммаБезНДС, 0) КАК СуммаБезНДСЭСФ
	               |ИЗ
	               |	ДанныеСчетовФактур КАК ДанныеСчетовФактур
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеРегистраторов КАК ДанныеРегистраторов
	               |		ПО (ДанныеРегистраторов.СчетФактура = ДанныеСчетовФактур.Ссылка)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеЭСФ КАК ДанныеЭСФ
	               |		ПО (ДанныеЭСФ.СчетФактура = ДанныеСчетовФактур.Ссылка)
	               |ГДЕ
	               |	(ЕСТЬNULL(ДанныеРегистраторов.СуммаБезНДС, 0) <> ДанныеСчетовФактур.СуммаБезНДС
	               |			ИЛИ ЕСТЬNULL(ДанныеРегистраторов.СуммаНДС, 0) <> ДанныеСчетовФактур.СуммаНДС
	               |			ИЛИ ДанныеСчетовФактур.Электронно
	               |				И ЕСТЬNULL(ДанныеЭСФ.СуммаНДС, 0) <> ДанныеСчетовФактур.СуммаНДС
	               |			ИЛИ ДанныеСчетовФактур.Электронно
	               |				И ЕСТЬNULL(ДанныеЭСФ.СуммаБезНДС, 0) <> ДанныеСчетовФактур.СуммаБезНДС)
	               |ИТОГИ
	               |	МАКСИМУМ(Электронно),
	               |	МАКСИМУМ(СуммаНДС),
	               |	МАКСИМУМ(СуммаБезНДС),
	               |	СУММА(СуммаНДСОтгрузки),
	               |	СУММА(СуммаБезНДСОтгрузки),
	               |	МАКСИМУМ(СуммаНДСЭСФ),
	               |	МАКСИМУМ(СуммаБезНДСЭСФ)
	               |ПО
	               |	Ссылка";
				   
	Результат = Запрос.Выполнить();	

	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТипЧисло = Новый ОписаниеТипов("Число");
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("Ссылка");
	ТаблицаОшибок.Колонки.Добавить("ЭСФ");
	ТаблицаОшибок.Колонки.Добавить("Регистратор");
	ТаблицаОшибок.Колонки.Добавить("СуммаНДС"            , ТипЧисло);
	ТаблицаОшибок.Колонки.Добавить("СуммаНДСОтгрузки"    , ТипЧисло);
	ТаблицаОшибок.Колонки.Добавить("СуммаНДСЭСФ"         , ТипЧисло);
	ТаблицаОшибок.Колонки.Добавить("СуммаБезНДС"         , ТипЧисло);
	ТаблицаОшибок.Колонки.Добавить("СуммаБезНДСОтгрузки" , ТипЧисло);
	ТаблицаОшибок.Колонки.Добавить("СуммаБезНДСЭСФ"      , ТипЧисло);    	
	
	СтрокаПараметра = СтрокаПравила.Строки.Найти("ДопустимаяПогрешностьПолученныеСФ", "Идентификатор");
	ДопустимаяПогрешность = ?(СтрокаПараметра = Неопределено, 0, СтрокаПараметра.ЗначениеПараметра);
	Если ДопустимаяПогрешность < 0 Тогда
		ДопустимаяПогрешность = -ДопустимаяПогрешность;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		СуммаНДСОтклонение = Выборка.СуммаНДС - Выборка.СуммаНДСОтгрузки;
		СуммаБезНДСОтклонение = Выборка.СуммаБезНДС - Выборка.СуммаБезНДСОтгрузки;
		Если Выборка.Электронно Тогда
			СуммаНДСОтклонениеЭСФ    = Выборка.СуммаНДС    - Выборка.СуммаНДСЭСФ;
			СуммаБезНДСОтклонениеЭСФ = Выборка.СуммаБезНДС - Выборка.СуммаБезНДСЭСФ;
		Иначе
			СуммаНДСОтклонениеЭСФ    = 0;
			СуммаБезНДСОтклонениеЭСФ = 0;
		КонецЕсли;
		
		//проверим если есть отклонения, в случае когда у Счет-фактуры оснований больше одного
		Если  -ДопустимаяПогрешность <= СуммаНДСОтклонение       И СуммаНДСОтклонение       <= ДопустимаяПогрешность
			И -ДопустимаяПогрешность <= СуммаБезНДСОтклонение    И СуммаБезНДСОтклонение    <= ДопустимаяПогрешность
			И -ДопустимаяПогрешность <= СуммаНДСОтклонениеЭСФ    И СуммаНДСОтклонениеЭСФ    <= ДопустимаяПогрешность
			И -ДопустимаяПогрешность <= СуммаБезНДСОтклонениеЭСФ И СуммаБезНДСОтклонениеЭСФ <= ДопустимаяПогрешность Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаПоРегистраторам = Выборка.Выбрать();
		Пока ВыборкаПоРегистраторам.Следующий() Цикл
			СтрокаОшибки = ТаблицаОшибок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОшибки, ВыборкаПоРегистраторам);			
		КонецЦикла;
	КонецЦикла;
	
	Если Не ТаблицаОшибок.Количество() = 0 Тогда
		СтрокаПравила.ОбнаруженыОшибки  = Истина;
		
		ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаОшибок);
		ИсточникДанных.Колонки.Ссылка.Измерение = Истина;	          				   
		ИсточникДанных.Колонки.ЭСФ.Измерение    = Истина;
		ИсточникДанных.Колонки.СуммаНДС.Итог 			= "МАКСИМУМ(СуммаНДС)";
		ИсточникДанных.Колонки.СуммаНДСОтгрузки.Итог 	= "СУММА(СуммаНДСОтгрузки)";
		ИсточникДанных.Колонки.СуммаНДСЭСФ.Итог         = "МАКСИМУМ(СуммаНДСЭСФ)";
		ИсточникДанных.Колонки.СуммаБезНДС.Итог  		= "МАКСИМУМ(СуммаБезНДС)";
		ИсточникДанных.Колонки.СуммаБезНДСОтгрузки.Итог = "СУММА(СуммаБезНДСОтгрузки)";
		ИсточникДанных.Колонки.СуммаБезНДСЭСФ.Итог      = "МАКСИМУМ(СуммаБезНДСЭСФ)";
	
	// Добавляем в ИсходящиеДанные данные, необходимые для формирования детального отчета по ошибкам
	// или данные для последующего использования другими проверками

		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаПолученныхСчетовФактурИсточникДанных", ИсточникДанных);
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("Ссылка",              НСтр("ru = 'Счет-фактура'"));
		СтруктураЗаголовков.Вставить("Регистратор",         НСтр("ru = 'Документ отгрузки'"));
		СтруктураЗаголовков.Вставить("ЭСФ",                 НСтр("ru = 'ЭСФ'"));
		СтруктураЗаголовков.Вставить("СуммаНДС",            НСтр("ru = 'НДС по счету-фактуре'"));
		СтруктураЗаголовков.Вставить("СуммаНДСОтгрузки",    НСтр("ru = 'НДС по документам отгрузки'"));		
		СтруктураЗаголовков.Вставить("СуммаНДСЭСФ",         НСтр("ru = 'НДС по документам ЭСФ'"));		
		СтруктураЗаголовков.Вставить("СуммаБезНДС",         НСтр("ru = 'Без НДС по счету-фактуре'"));
		СтруктураЗаголовков.Вставить("СуммаБезНДСОтгрузки", НСтр("ru = 'Без НДС по документам отгрузки'"));		
		СтруктураЗаголовков.Вставить("СуммаБезНДСЭСФ",      НСтр("ru = 'Без НДС по документам ЭСФ'"));		
		
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаПолученныхСчетовФактурСтруктураЗаголовков", СтруктураЗаголовков);
		
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Ссылка",              "Ссылка");
		СтруктураРасшифровки.Вставить("СуммаНДС",            "Ссылка");
		СтруктураРасшифровки.Вставить("СуммаБезНДС",         "Ссылка");
		
		СтруктураРасшифровки.Вставить("Регистратор",         "Регистратор");		
		СтруктураРасшифровки.Вставить("СуммаНДСОтгрузки",    "Регистратор");		
		СтруктураРасшифровки.Вставить("СуммаБезНДСОтгрузки", "Регистратор");		
		
		СтруктураРасшифровки.Вставить("ЭСФ",                 "ЭСФ");		
		СтруктураРасшифровки.Вставить("СуммаНДСЭСФ",         "ЭСФ");		
		СтруктураРасшифровки.Вставить("СуммаБезНДСЭСФ",      "ЭСФ");
		
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаПолученныхСчетовФактурСтруктураРасшифровки", СтруктураРасшифровки);
			
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("Ссылка", 				60);
		СтруктураШириныКолонок.Вставить("ЭСФ",                  60);
		СтруктураШириныКолонок.Вставить("Регистратор", 			120);
		СтруктураШириныКолонок.Вставить("СуммаНДС", 		  	40);
		СтруктураШириныКолонок.Вставить("СуммаБезНДС",	  		50);		
		СтруктураШириныКолонок.Вставить("СуммаНДСОтгрузки", 	40);		
		СтруктураШириныКолонок.Вставить("СуммаБезНДСОтгрузки",	50);		
		СтруктураШириныКолонок.Вставить("СуммаНДСЭСФ",          40);		
		СтруктураШириныКолонок.Вставить("СуммаБезНДСЭСФ",       50);		
				
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаПолученныхСчетовФактурСтруктураШириныКолонок", СтруктураШириныКолонок);	
		
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаПолученныхСчетовФактурМакетОформления", "ПроверкаВыпискиСчетовФактур");
	Иначе
		СтрокаПравила.ОбнаруженыОшибки = Ложь;
	КонецЕсли;
	 	
КонецПроцедуры

Процедура ПроверитьПравилоСвоевременнаяВыпискаЭСФ(СтрокаПравила, ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АктОбОказанииПроизводственныхУслуг.Ссылка КАК Ссылка,
	|	АктОбОказанииПроизводственныхУслуг.Дата КАК Дата,
	|	АктОбОказанииПроизводственныхУслуг.СпособВыпискиАктовВыполненныхРабот КАК СпособВыпискиАктовВыполненныхРабот,
	|	АктОбОказанииПроизводственныхУслуг.ДатаПодписанияГЗ КАК ДатаПодписанияГЗ
	|ПОМЕСТИТЬ ВТ_ДокументыОтгрузки
	|ИЗ
	|	Документ.АктОбОказанииПроизводственныхУслуг КАК АктОбОказанииПроизводственныхУслуг
	|ГДЕ
	|	АктОбОказанииПроизводственныхУслуг.Организация = &Организация
	|	И ВЫБОР
	|			КОГДА АктОбОказанииПроизводственныхУслуг.СпособВыпискиАктовВыполненныхРабот <> ЗНАЧЕНИЕ(Перечисление.СпособыВыпискиАктовВыполненныхРабот.ВБумажномВиде)
	|				ТОГДА АктОбОказанииПроизводственныхУслуг.ДатаПодписанияГЗ МЕЖДУ &НачалоПериода И &КонецПериода
	|			ИНАЧЕ АктОбОказанииПроизводственныхУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		КОНЕЦ
	|	И АктОбОказанииПроизводственныхУслуг.Проведен = ИСТИНА
	|	И АктОбОказанииПроизводственныхУслуг.СтруктурноеПодразделение = &СтруктурноеПодразделение
	|	И НЕ АктОбОказанииПроизводственныхУслуг.ОтложитьНачислениеНДС
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателя.Ссылка,
	|	ВозвратТоваровОтПокупателя.Дата,
	|	NULL,
	|	NULL
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Организация = &Организация
	|	И ВозвратТоваровОтПокупателя.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ВозвратТоваровОтПокупателя.Проведен = ИСТИНА
	|	И ВозвратТоваровОтПокупателя.СтруктурноеПодразделение = &СтруктурноеПодразделение
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажах.Ссылка,
	|	ОтчетОРозничныхПродажах.Дата,
	|	NULL,
	|	NULL
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Организация = &Организация
	|	И ОтчетОРозничныхПродажах.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ОтчетОРозничныхПродажах.Проведен = ИСТИНА
	|	И ОтчетОРозничныхПродажах.СтруктурноеПодразделение = &СтруктурноеПодразделение
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПередачаНМА.Ссылка,
	|	ПередачаНМА.Дата,
	|	NULL,
	|	NULL
	|ИЗ
	|	Документ.ПередачаНМА КАК ПередачаНМА
	|ГДЕ
	|	ПередачаНМА.Организация = &Организация
	|	И ПередачаНМА.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ПередачаНМА.Проведен = ИСТИНА
	|	И ПередачаНМА.СтруктурноеПодразделение = &СтруктурноеПодразделение
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПередачаОС.Ссылка,
	|	ПередачаОС.Дата,
	|	NULL,
	|	NULL
	|ИЗ
	|	Документ.ПередачаОС КАК ПередачаОС
	|ГДЕ
	|	ПередачаОС.Организация = &Организация
	|	И ПередачаОС.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ПередачаОС.Проведен = ИСТИНА
	|	И ПередачаОС.СтруктурноеПодразделение = &СтруктурноеПодразделение
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.СпособВыпискиАктовВыполненныхРабот,
	|	РеализацияТоваровУслуг.ДатаПодписанияГЗ
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Организация = &Организация
	|	И ВЫБОР
	|			КОГДА РеализацияТоваровУслуг.СпособВыпискиАктовВыполненныхРабот <> ЗНАЧЕНИЕ(Перечисление.СпособыВыпискиАктовВыполненныхРабот.ВБумажномВиде)
	|				ТОГДА РеализацияТоваровУслуг.ДатаПодписанияГЗ МЕЖДУ &НачалоПериода И &КонецПериода
	|			ИНАЧЕ РеализацияТоваровУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		КОНЕЦ
	|	И РеализацияТоваровУслуг.Проведен = ИСТИНА
	|	И РеализацияТоваровУслуг.СтруктурноеПодразделение = &СтруктурноеПодразделение
	|	И НЕ РеализацияТоваровУслуг.ОтложитьНачислениеНДС
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РеализацияУслугПоПереработке.Ссылка,
	|	РеализацияУслугПоПереработке.Дата,
	|	РеализацияУслугПоПереработке.СпособВыпискиАктовВыполненныхРабот,
	|	РеализацияУслугПоПереработке.ДатаПодписанияГЗ
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке КАК РеализацияУслугПоПереработке
	|ГДЕ
	|	РеализацияУслугПоПереработке.Организация = &Организация
	|	И ВЫБОР
	|			КОГДА РеализацияУслугПоПереработке.СпособВыпискиАктовВыполненныхРабот <> ЗНАЧЕНИЕ(Перечисление.СпособыВыпискиАктовВыполненныхРабот.ВБумажномВиде)
	|				ТОГДА РеализацияУслугПоПереработке.ДатаПодписанияГЗ МЕЖДУ &НачалоПериода И &КонецПериода
	|			ИНАЧЕ РеализацияУслугПоПереработке.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		КОНЕЦ
	|	И РеализацияУслугПоПереработке.Проведен = ИСТИНА
	|	И РеализацияУслугПоПереработке.СтруктурноеПодразделение = &СтруктурноеПодразделение
	|	И НЕ РеализацияУслугПоПереработке.ОтложитьНачислениеНДС
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС.Ссылка,
	|	РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС.Дата,
	|	NULL,
	|	NULL
	|ИЗ
	|	Документ.РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС КАК РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС
	|ГДЕ
	|	РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС.Организация = &Организация
	|	И РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС.Проведен = ИСТИНА
	|	И РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС.СтруктурноеПодразделение = &СтруктурноеПодразделение	
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка КАК Ссылка,
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ВТ_ДокументыОснованияСФ
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка.Проведен = ИСТИНА
	|	И СчетФактураВыданныйДокументыОснования.Ссылка.Дата >= ДОБАВИТЬКДАТЕ(&НачалоПериода, МЕСЯЦ, -2)
  	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АктуальныеЭСФ.ЭСФ КАК ЭСФ,
	|	АктуальныеЭСФ.Состояние КАК Состояние,
	|	АктуальныеЭСФ.ЭСФ.РегистрационныйНомер КАК ЭСФРегистрационныйНомер,
	|	СчетФактураВыданный.Ссылка КАК Ссылка,
	|	СчетФактураВыданный.ДокументОснование КАК ДокументОснование,
	|	СчетФактураВыданный.Дата КАК Дата,
	|	СчетФактураВыданный.Проведен КАК Проведен,
	|	СчетФактураВыданный.ДатаСовершенияОборотаПоРеализации КАК ДатаСовершенияОборотаПоРеализации,
	|	ВТ_ДокументыОснованияСФ.Ссылка КАК ТабЧастьСсылка,
	|	ВТ_ДокументыОснованияСФ.ДокументОснование КАК ТабЧастьДокументОснование
	|ПОМЕСТИТЬ ВТ_СФ
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АктуальныеЭСФ КАК АктуальныеЭСФ
	|		ПО СчетФактураВыданный.Ссылка = АктуальныеЭСФ.СчетФактура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаФактурыПрекратившиеДействие.СрезПоследних КАК СчетаФактурыПрекратившиеДействиеСрезПоследних
	|		ПО СчетФактураВыданный.Ссылка = СчетаФактурыПрекратившиеДействиеСрезПоследних.СчетФактура 
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДокументыОснованияСФ КАК ВТ_ДокументыОснованияСФ
	|		ПО СчетФактураВыданный.Ссылка = ВТ_ДокументыОснованияСФ.Ссылка
	|ГДЕ
	|	СчетФактураВыданный.Проведен = ИСТИНА
	|	И СчетаФактурыПрекратившиеДействиеСрезПоследних.СчетФактура ЕСТЬ NULL
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДокументыОтгрузки.Ссылка КАК ДокументОтгрузки,
	|	ВТ_СФ.ЭСФ КАК ЭСФ,
	|	ВТ_СФ.Ссылка КАК СчетФактура,
	|	ВЫБОР
	|		КОГДА ВТ_СФ.Ссылка ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_ДокументыОтгрузки.СпособВыпискиАктовВыполненныхРабот <> НЕОПРЕДЕЛЕНО
	|							И ВТ_ДокументыОтгрузки.СпособВыпискиАктовВыполненныхРабот <> ЗНАЧЕНИЕ(Перечисление.СпособыВыпискиАктовВыполненныхРабот.ВБумажномВиде)
	|						ТОГДА ВТ_ДокументыОтгрузки.ДатаПодписанияГЗ
	|					ИНАЧЕ ВТ_ДокументыОтгрузки.Дата
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_СФ.ДатаСовершенияОборотаПоРеализации
	|	КОНЕЦ КАК ДатаОборота,
	|	ВЫБОР
	|		КОГДА ВТ_ДокументыОтгрузки.Ссылка.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|			ТОГДА &ЮрЛицо
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_ДокументыОтгрузки.Ссылка.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|					ТОГДА ВЫБОР
	|							КОГДА ВТ_ДокументыОтгрузки.Ссылка.Контрагент.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус = ИСТИНА
	|								ТОГДА &ФизЛицоИП
	|							ИНАЧЕ &ФизЛицо
	|						КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК ТипКонтрагента,
	|	ВТ_ДокументыОтгрузки.Ссылка.Контрагент.ЮрФизЛицо КАК СсылкаКонтрагентЮрФизЛицо,
	|	ВТ_СФ.Ссылка.СпособВыставления КАК СсылкаСпособВыставления
	|ПОМЕСТИТЬ ВТ_ДатаОборота
	|ИЗ
	|	ВТ_ДокументыОтгрузки КАК ВТ_ДокументыОтгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СФ КАК ВТ_СФ
	|		ПО ВТ_ДокументыОтгрузки.Ссылка = ВТ_СФ.ТабЧастьДокументОснование
	|ГДЕ
	|	НЕ (&ИсключатьФизЛиц
	|	И ВТ_ДокументыОтгрузки.Ссылка.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|	И ВТ_ДокументыОтгрузки.Ссылка.Контрагент.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус = ЛОЖЬ)
	|	И ВЫБОР
	|		КОГДА НЕ ВТ_СФ.ЭСФ ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_СФ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭСФ.ОтклоненСервером)
	|							ИЛИ ВТ_СФ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭСФ.Отозван)
	|							ИЛИ ВТ_СФ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭСФ.ОтклоненПолучателем)
	|							ИЛИ ВТ_СФ.ЭСФРегистрационныйНомер ЕСТЬ NULL
	|							ИЛИ ВТ_СФ.ЭСФРегистрационныйНомер = """"
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДатаОборота.ДокументОтгрузки КАК ДокументОтгрузки,
	|	ВТ_ДатаОборота.СчетФактура КАК СчетФактура,
	|	ВТ_ДатаОборота.ЭСФ КАК ЭСФ,
	|	ВТ_ДатаОборота.ДатаОборота КАК ДатаОборота,
	|	ДОБАВИТЬКДАТЕ(ВТ_ДатаОборота.ДатаОборота, ДЕНЬ, 15) КАК КрайняяДатаВыпискиЭСФ,
	|	ВТ_ДатаОборота.ЭСФ.Состояние КАК ЭСФСостояние,
	|	ВТ_ДатаОборота.ЭСФ.РегистрационныйНомер КАК ЭСФРегистрационныйНомер,
	|	-(ВЫРАЗИТЬ(РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(ВТ_ДатаОборота.ДатаОборота, ДЕНЬ, 15), &ТекущаяДата, ДЕНЬ) КАК ЧИСЛО(15, 0))) КАК ОсталосьДней,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ВТ_ДатаОборота.ЭСФ) КАК ЭСФПредставление,
	|	ВТ_ДатаОборота.ТипКонтрагента КАК ТипКонтрагента
	|ИЗ
	|	ВТ_ДатаОборота КАК ВТ_ДатаОборота
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВТ_ДатаОборота.СсылкаСпособВыставления <> """"
	|					ИЛИ ВТ_ДатаОборота.СсылкаСпособВыставления <> NULL
	|				ТОГДА ВТ_ДатаОборота.СсылкаСпособВыставления <> ЗНАЧЕНИЕ(Перечисление.СпособыОбменаДокументами.Бумажно)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаОборота,
	|	ДокументОтгрузки";
	
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", ПараметрыОтчета.СтруктурноеПодразделение);  
	Запрос.УстановитьПараметр("КонецПериода"  , КонецДня(ПараметрыОтчета.ДатаКон));
	Запрос.УстановитьПараметр("НачалоПериода" , ПараметрыОтчета.ДатаНач);
	Запрос.УстановитьПараметр("Организация"   , ПараметрыОтчета.Организация);     
	Запрос.УстановитьПараметр("ТекущаяДата"   , ТекущаяДата()); 
	Запрос.УстановитьПараметр("ЮрЛицо"        , НСтр("ru = 'Юр. лицо'"));
	Запрос.УстановитьПараметр("ФизЛицоИП"     , НСтр("ru = 'Физ. лицо (ИП)'"));
	Запрос.УстановитьПараметр("ФизЛицо"       , НСтр("ru = 'Физ. лицо'"));
	
	СтрокаПараметра = СтрокаПравила.Строки.Найти("ИсключатьФизЛиц", "Идентификатор");
	Запрос.УстановитьПараметр("ИсключатьФизЛиц", ?(СтрокаПараметра = Неопределено, Ложь, СтрокаПараметра.ЗначениеПараметра));
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;   
		
	Если СтрокаПравила.ОбнаруженыОшибки Тогда 	

		ТаблицаОшибок = Новый ТаблицаЗначений;
		ТаблицаОшибок.Колонки.Добавить("ДокументОтгрузки");
		ТаблицаОшибок.Колонки.Добавить("СчетФактура");	
		ТаблицаОшибок.Колонки.Добавить("ЭСФ"); 
		ТаблицаОшибок.Колонки.Добавить("ЭСФПредставление");
		ТаблицаОшибок.Колонки.Добавить("ДатаОборота"); 
		ТаблицаОшибок.Колонки.Добавить("КрайняяДатаВыпискиЭСФ");
		ТаблицаОшибок.Колонки.Добавить("ОсталосьДней", Новый ОписаниеТипов("Число")); 
		ТаблицаОшибок.Колонки.Добавить("ТипКонтрагента");
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Макет = Обработки.ЭкспрессПроверкаВеденияУчета.ПолучитьМакет("СвоевременнаяВыпискаЭСФ");  
		ОбластьДетали = Макет.ПолучитьОбласть("Детали");         
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НоваяСтрока 				 	  = ТаблицаОшибок.Добавить();
			НоваяСтрока.ДокументОтгрузки 	  = ВыборкаДетальныеЗаписи.ДокументОтгрузки;
			НоваяСтрока.СчетФактура 	 	  = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СчетФактура), ВыборкаДетальныеЗаписи.СчетФактура, НСтр("ru = 'Отсутствует'"));			
			
			ПредставлениеЭСФ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (%2)'"), ВыборкаДетальныеЗаписи.ЭСФ, ВыборкаДетальныеЗаписи.ЭСФСостояние);  
			
			НоваяСтрока.ЭСФПредставление = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СчетФактура), ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЭСФ),ПредставлениеЭСФ,""), НСтр("ru = 'Отсутствует'"));
			НоваяСтрока.ЭСФ 	  = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СчетФактура), ВыборкаДетальныеЗаписи.ЭСФ, НСтр("ru = 'Отсутствует'"));   
			НоваяСтрока.ДатаОборота 	 	  = ВыборкаДетальныеЗаписи.ДатаОборота;
			НоваяСтрока.КрайняяДатаВыпискиЭСФ = ВыборкаДетальныеЗаписи.КрайняяДатаВыпискиЭСФ;   
			ОстатокДней = ВыборкаДетальныеЗаписи.ОсталосьДней;
			НоваяСтрока.ОсталосьДней 		  = Число(ОстатокДней);
			НоваяСтрока.ТипКонтрагента 		  = ВыборкаДетальныеЗаписи.ТипКонтрагента;
			
		КонецЦикла;
		
		ПараметрыОтчета.ИсходящиеДанные.Вставить("СвоевременнаяВыпискаЭСФТаблицаЗначений", ТаблицаОшибок);  
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ДокументОтгрузки", 	  НСтр("ru = 'Документ отгрузки'"));
		СтруктураЗаголовков.Вставить("СчетФактура",			  НСтр("ru = 'Счет-фактура'"));			
		СтруктураЗаголовков.Вставить("ЭСФ", 				  НСтр("ru = 'ЭСФ'"));
		СтруктураЗаголовков.Вставить("ДатаОборота", 		  НСтр("ru = 'Дата оборота'"));
		СтруктураЗаголовков.Вставить("КрайняяДатаВыпискиЭСФ", НСтр("ru = 'Крайняя дата выписки ЭСФ'"));      
		СтруктураЗаголовков.Вставить("ОсталосьДней", 		  НСтр("ru = 'Осталось дней'")); 
		СтруктураЗаголовков.Вставить("ТипКонтрагента", 		  НСтр("ru = 'Тип контрагента'")); 
		ПараметрыОтчета.ИсходящиеДанные.Вставить("СвоевременнаяВыпискаЭСФСтруктураЗаголовков", СтруктураЗаголовков);
		
		СтруктураФорматаПолей = Новый Структура;			               
		СтруктураФорматаПолей.Вставить("ДатаОборота", 			"ДФ = дд.ММ.гггг");     
		СтруктураФорматаПолей.Вставить("КрайняяДатаВыпискиЭСФ", "ДФ = дд.ММ.гггг");
		ПараметрыОтчета.ИсходящиеДанные.Вставить("СвоевременнаяВыпискаЭСФСтруктураФорматаПолей", СтруктураФорматаПолей);
	
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ДокументОтгрузки", "ДокументОтгрузки");
		СтруктураРасшифровки.Вставить("СчетФактура", 	  "СчетФактура");
		ПараметрыОтчета.ИсходящиеДанные.Вставить("СвоевременнаяВыпискаЭСФСтруктураРасшифровки", СтруктураРасшифровки);	
		
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("ДокументОтгрузки", 		 60);
		СтруктураШириныКолонок.Вставить("СчетФактура", 	     		 60);
		СтруктураШириныКолонок.Вставить("ЭСФ", 						 60);				
		ПараметрыОтчета.ИсходящиеДанные.Вставить("СвоевременнаяВыпискаЭСФСтруктураШириныКолонок", СтруктураШириныКолонок);	  	
		ПараметрыОтчета.ИсходящиеДанные.Вставить("СвоевременнаяВыпискаЭСФМакетОформленияУО", Макет);
	
	КонецЕсли;   
	
КонецПроцедуры

Процедура ПроверитьПравилоПроведенныеДокументыСРасторгнутымиЭАВР(СтрокаПравила, ПараметрыОтчета)
	
	Запрос = Новый Запрос;
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭлектронныйАктВыполненныхРабот.ДокументОснование КАК ДокументОснование,
	|	МАКСИМУМ(ЭлектронныйАктВыполненныхРабот.Дата) КАК Дата
	|ПОМЕСТИТЬ ВТ_ПоследняяДатаЭАВР
	|ИЗ
	|	Документ.ЭлектронныйАктВыполненныхРабот КАК ЭлектронныйАктВыполненныхРабот
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭлектронныйАктВыполненныхРабот.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПоследняяДатаЭАВР.ДокументОснование КАК ДокументОснование,
	|	ВТ_ПоследняяДатаЭАВР.Дата КАК Дата,
	|	ЭлектронныйАктВыполненныхРабот.Ссылка КАК Ссылка,
	|	ЭлектронныйАктВыполненныхРабот.Статус КАК Статус
	|ПОМЕСТИТЬ ВТ_ЭАВР
	|ИЗ
	|	Документ.ЭлектронныйАктВыполненныхРабот КАК ЭлектронныйАктВыполненныхРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПоследняяДатаЭАВР КАК ВТ_ПоследняяДатаЭАВР
	|		ПО ЭлектронныйАктВыполненныхРабот.ДокументОснование = ВТ_ПоследняяДатаЭАВР.ДокументОснование
	|			И ЭлектронныйАктВыполненныхРабот.Дата = ВТ_ПоследняяДатаЭАВР.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровУслуг.Ссылка КАК Документ,
	|	РеализацияТоваровУслуг.СпособВыпискиАктовВыполненныхРабот КАК СпособВыпискиАктовВыполненныхРабот,
	|	РеализацияТоваровУслуг.ДатаПодписанияГЗ КАК ДатаПодписанияГЗ
	|ПОМЕСТИТЬ ВТ_ОсновныеДокументы
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.СпособВыпискиАктовВыполненныхРабот = ЗНАЧЕНИЕ(Перечисление.СпособыВыпискиАктовВыполненныхРабот.НаПорталеИСЭСФ)
	|	И РеализацияТоваровУслуг.Проведен = ИСТИНА
	|	И РеализацияТоваровУслуг.ПометкаУдаления = ЛОЖЬ
	|	И РеализацияТоваровУслуг.Организация = &Организация
	|	И РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктОбОказанииПроизводственныхУслуг.Ссылка,
	|	АктОбОказанииПроизводственныхУслуг.СпособВыпискиАктовВыполненныхРабот,
	|	АктОбОказанииПроизводственныхУслуг.ДатаПодписанияГЗ
	|ИЗ
	|	Документ.АктОбОказанииПроизводственныхУслуг КАК АктОбОказанииПроизводственныхУслуг
	|ГДЕ
	|	АктОбОказанииПроизводственныхУслуг.СпособВыпискиАктовВыполненныхРабот = ЗНАЧЕНИЕ(Перечисление.СпособыВыпискиАктовВыполненныхРабот.НаПорталеИСЭСФ)
	|	И АктОбОказанииПроизводственныхУслуг.Проведен = ИСТИНА
	|	И АктОбОказанииПроизводственныхУслуг.ПометкаУдаления = ЛОЖЬ
	|	И АктОбОказанииПроизводственныхУслуг.Организация = &Организация
	|	И АктОбОказанииПроизводственныхУслуг.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияУслугПоПереработке.Ссылка,
	|	РеализацияУслугПоПереработке.СпособВыпискиАктовВыполненныхРабот,
	|	РеализацияУслугПоПереработке.ДатаПодписанияГЗ
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке КАК РеализацияУслугПоПереработке
	|ГДЕ
	|	РеализацияУслугПоПереработке.СпособВыпискиАктовВыполненныхРабот = ЗНАЧЕНИЕ(Перечисление.СпособыВыпискиАктовВыполненныхРабот.НаПорталеИСЭСФ)
	|	И РеализацияУслугПоПереработке.Проведен = ИСТИНА
	|	И РеализацияУслугПоПереработке.ПометкаУдаления = ЛОЖЬ
	|	И РеализацияУслугПоПереработке.Организация = &Организация
	|	И РеализацияУслугПоПереработке.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ОсновныеДокументы.ДатаПодписанияГЗ КАК ДатаПодписанияГЗ,
	|	ВТ_ОсновныеДокументы.СпособВыпискиАктовВыполненныхРабот КАК СпособВыпискиАктовВыполненныхРабот,
	|	ВТ_ЭАВР.ДокументОснование КАК ДокументОснование,
	|	ВТ_ЭАВР.Ссылка КАК ЭАВР,
	|	ВТ_ЭАВР.Статус КАК Статус
	|ИЗ
	|	ВТ_ОсновныеДокументы КАК ВТ_ОсновныеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЭАВР КАК ВТ_ЭАВР
	|		ПО ВТ_ОсновныеДокументы.Документ = ВТ_ЭАВР.ДокументОснование
	|ГДЕ
	|	ВТ_ЭАВР.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАВР.Расторгнут)";  
	
	
	Запрос.УстановитьПараметр("ДатаНачала", 			  ПараметрыОтчета.ДатаНач);
	Запрос.УстановитьПараметр("ДатаОкончания", 			  КонецДня(ПараметрыОтчета.ДатаКон));
	Запрос.УстановитьПараметр("Организация", 			  ПараметрыОтчета.Организация);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
	    //ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроведенныеДокументыСРасторгнутымиЭАВРРезультатЗапроса", Результат);
		
		ТаблицаОшибок = Новый ТаблицаЗначений;
		ТаблицаОшибок.Колонки.Добавить("ДокументОснование");
		ТаблицаОшибок.Колонки.Добавить("ДатаПодписанияГЗ"); 
		ТаблицаОшибок.Колонки.Добавить("Ссылка");
		ТаблицаОшибок.Колонки.Добавить("ЭАВР");
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл  
				
			НоваяСтрока 				 	  = ТаблицаОшибок.Добавить();
			НоваяСтрока.ДокументОснование 	  = ВыборкаДетальныеЗаписи.ДокументОснование;
			НоваяСтрока.ДатаПодписанияГЗ      = ВыборкаДетальныеЗаписи.ДатаПодписанияГЗ;
			НоваяСтрока.Ссылка      		  = ВыборкаДетальныеЗаписи.ЭАВР;
			НоваяСтрока.ЭАВР				  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (%2)'"), ВыборкаДетальныеЗаписи.ЭАВР, ВыборкаДетальныеЗаписи.Статус);
			
		КонецЦикла; 
		
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроведенныеДокументыСРасторгнутымиЭАВРТаблицаЗначений", ТаблицаОшибок);
    
	    СтруктураЗаголовков = Новый Структура;
		
		СтруктураЗаголовков.Вставить("ДокументОснование", НСтр("ru = 'Документ'"));
		СтруктураЗаголовков.Вставить("ДатаПодписанияГЗ", НСтр("ru = 'Дата подписания'")); 
        СтруктураЗаголовков.Вставить("ЭАВР", НСтр("ru = 'ЭАВР'"));
		СтруктураЗаголовков.Вставить("Статус", НСтр("ru = 'Статус'")); 
	    
	    ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроведенныеДокументыСРасторгнутымиЭАВРСтруктураЗаголовков", СтруктураЗаголовков);
	    СтруктураШириныКолонок = Новый Структура;
	    СтруктураШириныКолонок.Вставить("ДокументОснование" , 50);
		СтруктураШириныКолонок.Вставить("ДатаПодписанияГЗ" , 25);
		СтруктураШириныКолонок.Вставить("ЭАВР" , 50);
	    СтруктураШириныКолонок.Вставить("Ссылка" , 0);
	    
	    ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроведенныеДокументыСРасторгнутымиЭАВРСтруктураШириныКолонок", СтруктураШириныКолонок);
		
		СтруктураФорматаПолей = Новый Структура;			               
		СтруктураФорматаПолей.Вставить("ДатаПодписанияГЗ", "ДФ = дд.ММ.гггг");     
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроведенныеДокументыСРасторгнутымиЭАВРСтруктураФорматаПолей", СтруктураФорматаПолей);
	    
	    СтруктураРасшифровки = Новый Структура;
	    СтруктураРасшифровки.Вставить("ДокументОснование", "ДокументОснование");
	    СтруктураРасшифровки.Вставить("ЭАВР", "Ссылка");

	    ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроведенныеДокументыСРасторгнутымиЭАВРСтруктураРасшифровки", СтруктураРасшифровки);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоПроверкаПериодаОтнесенияНДСВЗачет(СтрокаПравила, ПараметрыОтчета)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФ.Дата КАК Дата,
	|	ЭСФ.Ссылка КАК Ссылка,
	|	ЭСФ.СчетФактура КАК СчетФактура
	|ПОМЕСТИТЬ ВТ_ЭСФ
	|ИЗ
	|	Документ.ЭСФ КАК ЭСФ
	|ГДЕ
	|	ЭСФ.Проведен
	|	И ЭСФ.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Входящий)
	|	И ЭСФ.Организация = &Организация
	|	И ЭСФ.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ЭСФ.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|	И ЭСФ.СчетФактура <> ЗНАЧЕНИЕ(Документ.СчетФактураПолученный.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА НЕ АвансовыйОтчет.Дата ЕСТЬ NULL
	|			ТОГДА АвансовыйОтчет.Дата
	|		КОГДА НЕ ВозвратТоваровПоставщику.Дата ЕСТЬ NULL
	|			ТОГДА ВозвратТоваровПоставщику.Дата
	|		КОГДА НЕ ПоступлениеДопРасходов.Дата ЕСТЬ NULL
	|			ТОГДА ПоступлениеДопРасходов.Дата
	|		КОГДА НЕ ПоступлениеИзПереработки.Дата ЕСТЬ NULL
	|			ТОГДА ПоступлениеИзПереработки.Дата
	|		КОГДА НЕ ПоступлениеНМА.Дата ЕСТЬ NULL
	|			ТОГДА ПоступлениеНМА.Дата
	|		КОГДА НЕ ПоступлениеТоваровУслуг.Дата ЕСТЬ NULL
	|			ТОГДА ПоступлениеТоваровУслуг.Дата
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ДокументПоступленияДата,
	|	ВЫБОР
	|		КОГДА НЕ АвансовыйОтчет.Ссылка ЕСТЬ NULL
	|			ТОГДА АвансовыйОтчет.Ссылка
	|		КОГДА НЕ ВозвратТоваровПоставщику.Ссылка ЕСТЬ NULL
	|			ТОГДА ВозвратТоваровПоставщику.Ссылка
	|		КОГДА НЕ ПоступлениеДопРасходов.Ссылка ЕСТЬ NULL
	|			ТОГДА ПоступлениеДопРасходов.Ссылка
	|		КОГДА НЕ ПоступлениеИзПереработки.Ссылка ЕСТЬ NULL
	|			ТОГДА ПоступлениеИзПереработки.Ссылка
	|		КОГДА НЕ ПоступлениеНМА.Ссылка ЕСТЬ NULL
	|			ТОГДА ПоступлениеНМА.Ссылка
	|		КОГДА НЕ ПоступлениеТоваровУслуг.Ссылка ЕСТЬ NULL
	|			ТОГДА ПоступлениеТоваровУслуг.Ссылка
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ДокументПоступленияСсылка,
	|	ЭСФ.Дата КАК ЭСФДата,
	|	ЭСФ.Ссылка КАК ЭСФСсылка
	|ИЗ
	|	ВТ_ЭСФ КАК ЭСФ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|			ПО (АвансовыйОтчет.Ссылка = СчетФактураПолученныйДокументыОснования.ДокументОснование)
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|			ПО (ВозвратТоваровПоставщику.Ссылка = СчетФактураПолученныйДокументыОснования.ДокументОснование)
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов
	|			ПО (ПоступлениеДопРасходов.Ссылка = СчетФактураПолученныйДокументыОснования.ДокументОснование)
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеИзПереработки КАК ПоступлениеИзПереработки
	|			ПО (ПоступлениеИзПереработки.Ссылка = СчетФактураПолученныйДокументыОснования.ДокументОснование)
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеНМА КАК ПоступлениеНМА
	|			ПО (ПоступлениеНМА.Ссылка = СчетФактураПолученныйДокументыОснования.ДокументОснование)
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|			ПО (ПоступлениеТоваровУслуг.Ссылка = СчетФактураПолученныйДокументыОснования.ДокументОснование)
	|		ПО (СчетФактураПолученныйДокументыОснования.Ссылка = ЭСФ.СчетФактура)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА НЕ АвансовыйОтчет.Дата ЕСТЬ NULL
	|				ТОГДА НАЧАЛОПЕРИОДА(АвансовыйОтчет.Дата, КВАРТАЛ) <> НАЧАЛОПЕРИОДА(ЭСФ.Дата, КВАРТАЛ)
	|			КОГДА НЕ ВозвратТоваровПоставщику.Дата ЕСТЬ NULL
	|				ТОГДА НАЧАЛОПЕРИОДА(ВозвратТоваровПоставщику.Дата, КВАРТАЛ) <> НАЧАЛОПЕРИОДА(ЭСФ.Дата, КВАРТАЛ)
	|			КОГДА НЕ ПоступлениеДопРасходов.Дата ЕСТЬ NULL
	|				ТОГДА НАЧАЛОПЕРИОДА(ПоступлениеДопРасходов.Дата, КВАРТАЛ) <> НАЧАЛОПЕРИОДА(ЭСФ.Дата, КВАРТАЛ)
	|			КОГДА НЕ ПоступлениеИзПереработки.Дата ЕСТЬ NULL
	|				ТОГДА НАЧАЛОПЕРИОДА(ПоступлениеИзПереработки.Дата, КВАРТАЛ) <> НАЧАЛОПЕРИОДА(ЭСФ.Дата, КВАРТАЛ)
	|			КОГДА НЕ ПоступлениеНМА.Дата ЕСТЬ NULL
	|				ТОГДА НАЧАЛОПЕРИОДА(ПоступлениеНМА.Дата, КВАРТАЛ) <> НАЧАЛОПЕРИОДА(ЭСФ.Дата, КВАРТАЛ)
	|			КОГДА НЕ ПоступлениеТоваровУслуг.Дата ЕСТЬ NULL
	|				ТОГДА НАЧАЛОПЕРИОДА(ПоступлениеТоваровУслуг.Дата, КВАРТАЛ) <> НАЧАЛОПЕРИОДА(ЭСФ.Дата, КВАРТАЛ)
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ");
	
	Запрос.УстановитьПараметр("ДатаНач"    , ПараметрыОтчета.ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон"    , КонецДня(ПараметрыОтчета.ДатаКон));
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = Не Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаПериодаОтнесенияНДСВЗачетРезультатЗапроса", Результат);
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ДокументПоступленияДата"  , НСтр("ru = 'Дата документа поступления'"));
		СтруктураЗаголовков.Вставить("ДокументПоступленияСсылка", НСтр("ru = 'Документ поступления'")); 
		СтруктураЗаголовков.Вставить("ЭСФДата"                  , НСтр("ru = 'Дата ЭСФ'"));
		СтруктураЗаголовков.Вставить("ЭСФСсылка"                , НСтр("ru = 'ЭСФ'"));
		
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаПериодаОтнесенияНДСВЗачетСтруктураЗаголовков", СтруктураЗаголовков);
		
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("ДокументПоступленияДата"  , 16);
		СтруктураШириныКолонок.Вставить("ДокументПоступленияСсылка", 38);
		СтруктураШириныКолонок.Вставить("ЭСФДата"                  , 16);
		СтруктураШириныКолонок.Вставить("ЭСФСсылка"                , 30);
		
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаПериодаОтнесенияНДСВЗачетСтруктураШириныКолонок", СтруктураШириныКолонок);
		
		СтруктураФорматаПолей = Новый Структура;
		СтруктураФорматаПолей.Вставить("ДокументПоступленияДата", "ДФ='дд.ММ.гггг (к ""кв"")'");
		СтруктураФорматаПолей.Вставить("ЭСФДата"                , "ДФ='дд.ММ.гггг (к ""кв"")'");
		
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаПериодаОтнесенияНДСВЗачетСтруктураФорматаПолей", СтруктураФорматаПолей);
		
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ДокументПоступленияСсылка", "ДокументПоступленияСсылка");
		СтруктураРасшифровки.Вставить("ЭСФСсылка"                , "ЭСФСсылка");
		
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаПериодаОтнесенияНДСВЗачетСтруктураРасшифровки", СтруктураРасшифровки);
		
	КонецЕсли;
	
КонецПроцедуры

// Для зачета по НДС поставщик должен являться плательщиком НДС
// Проверим его регистрационные данные
Процедура ПроверитьПравилоПроверкаРеквизитовПоставщиковПоНДС(СтрокаПравила, ПараметрыОтчета)
		
	ЗапросПоСтранам = Новый Запрос;
	ЗапросПоСтранам.УстановитьПараметр("Код", "398");
	ЗапросПоСтранам.Текст = "ВЫБРАТЬ
	                        |	КлассификаторСтранМира.Ссылка
	                        |ИЗ
	                        |	Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
	                        |ГДЕ
	                        |	КлассификаторСтранМира.Код = &Код ИЛИ КлассификаторСтранМира.Ссылка = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Казахстан)";
							
	Результат = ЗапросПоСтранам.Выполнить();
	
	Страна = Новый Массив;
	
	Если НЕ Результат.Пустой() Тогда
		Результат = Результат.Выбрать();
		Пока Результат.Следующий() Цикл 
			Страна.Добавить(Результат.Ссылка)
		КонецЦикла;	
	КонецЕсли;

	Страна.Добавить(Справочники.КлассификаторСтранМира.ПустаяСсылка());

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Поставщики.Контрагент КАК Контрагент,
	               |	Поставщики.Регистратор КАК Регистратор,
	               |	Контрагенты.СерияСвидетельстваПоНДС КАК СерияСвидетельстваПоНДС,
	               |	Контрагенты.НомерСвидетельстваПоНДС КАК НомерСвидетельстваПоНДС,
	               |	Контрагенты.ДатаСвидетельстваПоНДС КАК ДатаСвидетельстваПоНДС,
	               |	Поставщики.СуммаБезНДСОборот КАК СуммаБезНДСОборот,
	               |	Поставщики.УплаченныйНДСОборот КАК УплаченныйНДСОборот,
	               |	Поставщики.СуммаНДСОборот КАК СуммаНДСОборот
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		НДСКВозмещениюОбороты.Контрагент КАК Контрагент,
	               |		НДСКВозмещениюОбороты.Регистратор КАК Регистратор,
	               |		НДСКВозмещениюОбороты.УплаченныйНДСОборот КАК УплаченныйНДСОборот,
	               |		НДСКВозмещениюОбороты.СуммаНДСОборот КАК СуммаНДСОборот,
	               |		НДСКВозмещениюОбороты.СуммаБезНДСОборот КАК СуммаБезНДСОборот
	               |	ИЗ
	               |		РегистрНакопления.НДСКВозмещению.Обороты(&ДатаНач, &ДатаКон, Регистратор, Налогоплательщик = &Организация) КАК НДСКВозмещениюОбороты
	               |	ГДЕ
	               |		НЕ НДСКВозмещениюОбороты.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |		И НДСКВозмещениюОбороты.СуммаНДСОборот <> 0
	               |		И (НДСКВозмещениюОбороты.Контрагент.ДатаСвидетельстваПоНДС = ДАТАВРЕМЯ(1, 1, 1)
	               |				ИЛИ НДСКВозмещениюОбороты.Контрагент.НомерСвидетельстваПоНДС = """"
	               |				ИЛИ НДСКВозмещениюОбороты.Контрагент.СерияСвидетельстваПоНДС = """")
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		КорректировкаНДСКВозмещениюОбороты.Контрагент,
	               |		КорректировкаНДСКВозмещениюОбороты.Регистратор,
	               |		КорректировкаНДСКВозмещениюОбороты.УплаченныйНДСОборот,
	               |		КорректировкаНДСКВозмещениюОбороты.СуммаНДСОборот,
	               |		КорректировкаНДСКВозмещениюОбороты.СуммаКорректировкиОборотаОборот
	               |	ИЗ
	               |		РегистрНакопления.КорректировкаНДСКВозмещению.Обороты(&ДатаНач, &ДатаКон, Регистратор, Налогоплательщик = &Организация) КАК КорректировкаНДСКВозмещениюОбороты
	               |	ГДЕ
	               |		НЕ КорректировкаНДСКВозмещениюОбороты.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |		И КорректировкаНДСКВозмещениюОбороты.СуммаНДСОборот <> 0
	               |		И (КорректировкаНДСКВозмещениюОбороты.Контрагент.ДатаСвидетельстваПоНДС = ДАТАВРЕМЯ(1, 1, 1)
	               |				ИЛИ КорректировкаНДСКВозмещениюОбороты.Контрагент.НомерСвидетельстваПоНДС = """"
	               |				ИЛИ КорректировкаНДСКВозмещениюОбороты.Контрагент.СерияСвидетельстваПоНДС = """")) КАК Поставщики
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	               |		ПО Поставщики.Контрагент = Контрагенты.Ссылка
	               |ГДЕ
	               |	(Контрагенты.КБЕ = &ПустаяСтрока
	               |				И Контрагенты.СтранаРезидентства В (&Страна)
	               |			ИЛИ Контрагенты.КБЕ <> &ПустаяСтрока
	               |				И ПОДСТРОКА(Контрагенты.КБЕ, 1, 1) <> ""2"")
				   |	И НЕ Контрагенты.ГосударственноеУчреждение
				   |	И НЕ Поставщики.Регистратор ССЫЛКА Документ.ГТДИмпорт
				   |	И НЕ Поставщики.Регистратор ССЫЛКА Документ.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов
				   |	И НЕ Поставщики.Регистратор ССЫЛКА Документ.РегистрацияНДСЗаНерезидента
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Контрагент,
	               |	Регистратор";   
				   
	Запрос.УстановитьПараметр("ДатаНач",	  ПараметрыОтчета.ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон",	  КонецДня(ПараметрыОтчета.ДатаКон));
	Запрос.УстановитьПараметр("Организация",  ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("Страна",       Страна);	
	Запрос.УстановитьПараметр("ПустаяСтрока", "");	
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		ТаблицаОшибок = Результат.Выгрузить();
		
		// обработаем результаты проверки
		Если ТаблицаОшибок.Количество() = 0 Тогда
			СтрокаПравила.ОбнаруженыОшибки      = Ложь;
			СтрокаПравила.ПроверкаВыполнена     = Истина;
		Иначе
			СтрокаПравила.ОбнаруженыОшибки      = Истина;
			СтрокаПравила.ПроверкаВыполнена     = Истина;
			ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаРеквизитовПоставщиковПоНДСТаблицаЗначений", ТаблицаОшибок);
			
			СтруктураЗаголовков = Новый Структура;
			СтруктураЗаголовков.Вставить("Регистратор", 			НСтр("ru = 'Документ'"));
			СтруктураЗаголовков.Вставить("Контрагент", 				НСтр("ru = 'Поставщик'"));			
			СтруктураЗаголовков.Вставить("СерияСвидетельстваПоНДС", НСтр("ru = 'Серия'"));
			СтруктураЗаголовков.Вставить("НомерСвидетельстваПоНДС", НСтр("ru = 'Номер'"));
			СтруктураЗаголовков.Вставить("ДатаСвидетельстваПоНДС", 	НСтр("ru = 'Дата выдачи'"));
			
			СтруктураЗаголовков.Вставить("УплаченныйНДСОборот", 	НСтр("ru = 'Уплаченный НДС'"));	   
			СтруктураЗаголовков.Вставить("СуммаНДСОборот", 			НСтр("ru = 'НДС, принятый к зачету'"));
			СтруктураЗаголовков.Вставить("СуммаБезНДСОборот", 		НСтр("ru = 'Сумма приобретения без НДС'"));				
			ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаРеквизитовПоставщиковПоНДССтруктураЗаголовков", СтруктураЗаголовков);
			
			СтруктураРасшифровки = Новый Структура;
			СтруктураРасшифровки.Вставить("Регистратор", 		 		"Регистратор");
			СтруктураРасшифровки.Вставить("Контрагент", 			 	"Контрагент");			
			СтруктураРасшифровки.Вставить("СерияСвидетельстваПоНДС", 	"Контрагент");
			СтруктураРасшифровки.Вставить("НомерСвидетельстваПоНДС", 	"Контрагент");
			СтруктураРасшифровки.Вставить("ДатаСвидетельстваПоНДС", 	"Контрагент");
			
			СтруктураРасшифровки.Вставить("УплаченныйНДСОборот", 		"Регистратор");
			СтруктураРасшифровки.Вставить("СуммаБезНДСОборот", 	 		"Регистратор");
			СтруктураРасшифровки.Вставить("СуммаНДСОборот", 	 		"Регистратор");				
			
			ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаРеквизитовПоставщиковПоНДССтруктураРасшифровки", СтруктураРасшифровки);
			
			СтруктураШириныКолонок = Новый Структура;
			СтруктураШириныКолонок.Вставить("Регистратор", 35);
			СтруктураШириныКолонок.Вставить("Контрагент",  30);
			
			СтруктураШириныКолонок.Вставить("СерияСвидетельстваПоНДС", 15);
			СтруктураШириныКолонок.Вставить("НомерСвидетельстваПоНДС", 15);
			СтруктураШириныКолонок.Вставить("ДатаСвидетельстваПоНДС",  15);
			
			СтруктураШириныКолонок.Вставить("УплаченныйНДСОборот", 	25);
			СтруктураШириныКолонок.Вставить("СуммаБезНДСОборот", 	27);
			СтруктураШириныКолонок.Вставить("СуммаНДСОборот", 	 	25);							
			
			ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаРеквизитовПоставщиковПоНДССтруктураШириныКолонок", СтруктураШириныКолонок);
			
			СтруктураФорматаПолей = Новый Структура;			
			СтруктураФорматаПолей.Вставить("ДатаСвидетельстваПоНДС", "ДФ = дд.ММ.гггг");
			ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаРеквизитовПоставщиковПоНДССтруктураФорматаПолей", СтруктураФорматаПолей);
		
		КонецЕсли;
		
	Иначе
		
		СтрокаПравила.ОбнаруженыОшибки      = Ложь;
		СтрокаПравила.ПроверкаВыполнена     = Истина;
		СтрокаПравила.КомментарийРезультата = НСтр("ru = 'Нарушений не обнаружено.'");
		
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьПравилоМинусыПоТоварамОрганизацийБУ(СтрокаПравила, ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыОрганизацийБУОстаткиИОбороты.Товар КАК Номенклатура,
	|	ТоварыОрганизацийБУОстаткиИОбороты.Склад КАК Склад,
	|	ТоварыОрганизацийБУОстаткиИОбороты.НомерГТД КАК ИсточникПроисхождения,
	|	ТоварыОрганизацийБУОстаткиИОбороты.Регистратор КАК ДокументВыбытия,
	|	ТоварыОрганизацийБУОстаткиИОбороты.КоличествоНачальныйОстаток КАК НачОстаток,
	|	-ТоварыОрганизацийБУОстаткиИОбороты.КоличествоОборот КАК Расход,
	|	ТоварыОрганизацийБУОстаткиИОбороты.КоличествоКонечныйОстаток КАК КонОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизацийБУ.ОстаткиИОбороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			Движения,
	|			Организация = &Организация
	|				И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК ТоварыОрганизацийБУОстаткиИОбороты
	|ГДЕ
	|	ТоварыОрганизацийБУОстаткиИОбороты.КоличествоКонечныйОстаток < 0
	|	И ТоварыОрганизацийБУОстаткиИОбороты.КоличествоОборот < 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	ТоварыОрганизацийБУОстаткиИОбороты.Период";
	
	Запрос.УстановитьПараметр("ДатаНач", 				  ПараметрыОтчета.ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", 				  КонецДня(ПараметрыОтчета.ДатаКон));
	Запрос.УстановитьПараметр("Организация", 			  ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", ПараметрыОтчета.СтруктурноеПодразделение);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ПараметрыОтчета.ИсходящиеДанные.Вставить("МинусыПоТоварамОрганизацийБУРезультатЗапроса", Результат);
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ДокументВыбытия", "ДокументВыбытия");
		СтруктураРасшифровки.Вставить("Номенклатура", "Номенклатура");
		СтруктураРасшифровки.Вставить("ИсточникПроисхождения", "ИсточникПроисхождения");
		ПараметрыОтчета.ИсходящиеДанные.Вставить("МинусыПоТоварамОрганизацийБУСтруктураРасшифровки", СтруктураРасшифровки);	
		
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("ДокументВыбытия", 		 60);
		СтруктураШириныКолонок.Вставить("Номенклатура", 	     60);
		СтруктураШириныКолонок.Вставить("ИсточникПроисхождения", 60);
				
		ПараметрыОтчета.ИсходящиеДанные.Вставить("МинусыПоТоварамОрганизацийБУСтруктураШириныКолонок", СтруктураШириныКолонок);	

	КонецЕсли; 
	  
КонецПроцедуры

Процедура ПроверитьПравилоПроверкаВыпискиЭСФИИП(СтрокаПравила, ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВЫРАЗИТЬ(ЭСФТовары.КодТНВЭД КАК СТРОКА(10)) КАК КодТНВЭД,
	               |	ЭСФТовары.НомерПозицииВДекларацииИлиЗаявлении КАК НомерСтрокиГТД,
	               |	ЭСФТовары.ТоварНаименованиеВРамкахТС КАК ТоварНаименованиеВРамкахТС,
	               |	ЭСФТовары.НомерЗаявленияВРамкахТС КАК НомерЗаявленияВРамкахТС,
	               |	ЭСФ.Ссылка КАК СсылкаЭСФ,
	               |	ЭСФ.Дата КАК ЭСФДата,
	               |	ЭСФТовары.НомерГТД КАК НомерГТД,
	               |	ЕСТЬNULL(НомераГТД.ГСВС, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяССылка)) КАК ГСВС,
	               |	ЛОЖЬ КАК ТоварВКлюченВПеречень,
	               |	ЭСФТовары.Товар КАК Товар
	               |ПОМЕСТИТЬ ВТ_ЭСФБезПеречня
	               |ИЗ
	               |	Документ.ЭСФ КАК ЭСФ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭСФ.Товары КАК ЭСФТовары
	               |		ПО (ЭСФТовары.Ссылка = ЭСФ.Ссылка)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК НомераГТД
	               |		ПО (ЭСФТовары.НомерГТД = НомераГТД.Ссылка)
	               |ГДЕ
	               |	ЭСФ.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Исходящий)
	               |	И ЭСФ.Дата >= &ДатаНач
	               |	И ЭСФ.Дата <= &ДатаКон
	               |	И ЭСФ.Организация = &Организация
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	МАКСИМУМ(СведенияОНоменклатуреГСВС.Период) КАК Период,
	               |	ВТ_ЭСФ.Товар КАК Товар,
	               |	ВТ_ЭСФ.ГСВС КАК ГСВС,
	               |	ВТ_ЭСФ.СсылкаЭСФ КАК СсылкаЭСФ
	               |ПОМЕСТИТЬ ВТ_ПереченьИзъятийПериоды
	               |ИЗ
	               |	ВТ_ЭСФБезПеречня КАК ВТ_ЭСФ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	               |		ПО ВТ_ЭСФ.Товар = СправочникНоменклатура.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураГСВС КАК СправочникНоменклатураГСВС
	               |		ПО (ВЫБОР
	               |				КОГДА ВТ_ЭСФ.ГСВС <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяССылка)
	               |					ТОГДА ВТ_ЭСФ.ГСВС = СправочникНоменклатураГСВС.Ссылка
	               |				ИНАЧЕ СправочникНоменклатура.КодТНВЭД = ВТ_ЭСФ.ГСВС.КодГСВС
	               |			КОНЕЦ)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОНоменклатуреГСВС КАК СведенияОНоменклатуреГСВС
	               |		ПО (СправочникНоменклатураГСВС.Ссылка = СведенияОНоменклатуреГСВС.НоменклатураГСВС)
	               |			И (СведенияОНоменклатуреГСВС.ПризнакАктивности = ИСТИНА)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ЭСФ.СсылкаЭСФ,
	               |	ВТ_ЭСФ.Товар,
	               |	ВТ_ЭСФ.ГСВС
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПереченьИзъятий.Товар КАК Товар,
	               |	ПереченьИзъятий.СсылкаЭСФ КАК СсылкаЭСФ,
	               |	ВЫБОР
	               |		КОГДА СведенияОНоменклатуреГСВС.ПризнакПеречняИзьятий ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ СведенияОНоменклатуреГСВС.ПризнакПеречняИзьятий
	               |	КОНЕЦ КАК ВходитВПеречень
	               |ПОМЕСТИТЬ ВТ_ПереченьИзъятий
	               |ИЗ
	               |	ВТ_ПереченьИзъятийПериоды КАК ПереченьИзъятий
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	               |		ПО ПереченьИзъятий.Товар = СправочникНоменклатура.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураГСВС КАК СправочникНоменклатураГСВС
	               |		ПО (ВЫБОР
	               |				КОГДА ПереченьИзъятий.ГСВС <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяССылка)
	               |					ТОГДА ПереченьИзъятий.ГСВС = СправочникНоменклатураГСВС.Ссылка
	               |				ИНАЧЕ СправочникНоменклатура.КодТНВЭД = ПереченьИзъятий.ГСВС.КодГСВС
	               |			КОНЕЦ)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОНоменклатуреГСВС КАК СведенияОНоменклатуреГСВС
	               |		ПО (СправочникНоменклатураГСВС.Ссылка = СведенияОНоменклатуреГСВС.НоменклатураГСВС)
	               |			И ПереченьИзъятий.Период = СведенияОНоменклатуреГСВС.Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ЭСФ.КодТНВЭД КАК КодТНВЭД,
	               |	ВТ_ЭСФ.НомерСтрокиГТД КАК НомерСтрокиГТД,
	               |	ВТ_ЭСФ.ТоварНаименованиеВРамкахТС КАК ТоварНаименованиеВРамкахТС,
	               |	ВТ_ЭСФ.НомерЗаявленияВРамкахТС КАК НомерЗаявленияВРамкахТС,
	               |	ВТ_ЭСФ.СсылкаЭСФ КАК СсылкаЭСФ,
	               |	ВТ_ЭСФ.НомерГТД КАК НомерГТД,
	               |	ВТ_ЭСФ.Товар КАК Товар,
	               |	ВТ_ПереченьИзъятий.ВходитВПеречень КАК ТоварВКлюченВПеречень
	               |ПОМЕСТИТЬ ВТ_ЭСФ
	               |ИЗ
	               |	ВТ_ЭСФБезПеречня КАК ВТ_ЭСФ
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПереченьИзъятий КАК ВТ_ПереченьИзъятий
	               |		ПО ВТ_ЭСФ.Товар = ВТ_ПереченьИзъятий.Товар
	               |			И ВТ_ЭСФ.СсылкаЭСФ = ВТ_ПереченьИзъятий.СсылкаЭСФ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВЫРАЗИТЬ(НомераГТД.КодТНВЭД КАК СТРОКА(10)) КАК КодТНВЭД,
	               |	НомераГТД.СпособПроисхожденияТовара КАК СпособПроисхожденияТовара,
	               |	НомераГТД.НомерСтрокиГТД КАК НомерСтрокиГТД,
	               |	НомераГТД.НаименованиеТовара КАК НаименованиеТовара,
	               |	НомераГТД.Код КАК НомерЗаявленияВРамкахТС,
	               |	НомераГТД.Ссылка КАК НомерГТД
	               |ПОМЕСТИТЬ ВТ_ИсточникиПроисхождения
	               |ИЗ
	               |	Справочник.НомераГТД КАК НомераГТД
	               |ГДЕ
	               |	НомераГТД.Ссылка В
	               |			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |				ЭСФ.НомерГТД
	               |			ИЗ
	               |				ВТ_ЭСФ КАК ЭСФ)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ЭСФ.СсылкаЭСФ КАК ЭСФ,
	               |	ВТ_ЭСФ.НомерГТД КАК ИсточникПроисхождения,
	               |	ВТ_ЭСФ.Товар КАК Товар,
	               |	ВЫБОР
	               |		КОГДА ВТ_ЭСФ.КодТНВЭД = ВТ_ИсточникиПроисхождения.КодТНВЭД
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК СоответствуетКодТНВЭД,
	               |	ВЫБОР
	               |		КОГДА ВТ_ЭСФ.НомерСтрокиГТД = ВТ_ИсточникиПроисхождения.НомерСтрокиГТД
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК СоответствуетНомерСтрокиГТД,
	               |	ВЫБОР
	               |		КОГДА ВТ_ЭСФ.ТоварНаименованиеВРамкахТС <> ВТ_ИсточникиПроисхождения.НаименованиеТовара
	               |				И ВТ_ИсточникиПроисхождения.СпособПроисхожденияТовара <> &СпособПроисхожденияСТ1
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК СоответствуетНаименованиеТовара,
	               |	ВЫБОР
	               |		КОГДА ВТ_ЭСФ.НомерЗаявленияВРамкахТС = ВТ_ИсточникиПроисхождения.НомерЗаявленияВРамкахТС
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК СоответствуетНомерЗаявленияВРамкахТС
	               |ИЗ
	               |	ВТ_ЭСФ КАК ВТ_ЭСФ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсточникиПроисхождения КАК ВТ_ИсточникиПроисхождения
	               |		ПО ВТ_ЭСФ.НомерГТД = ВТ_ИсточникиПроисхождения.НомерГТД
	               |ГДЕ
	               |	(ВТ_ЭСФ.КодТНВЭД <> ВТ_ИсточникиПроисхождения.КодТНВЭД
	               |			ИЛИ ВТ_ЭСФ.НомерСтрокиГТД <> ВТ_ИсточникиПроисхождения.НомерСтрокиГТД
	               |			ИЛИ ВТ_ЭСФ.ТоварНаименованиеВРамкахТС <> ВТ_ИсточникиПроисхождения.НаименованиеТовара
	               |				И ВТ_ИсточникиПроисхождения.СпособПроисхожденияТовара <> &СпособПроисхожденияСТ1
	               |			ИЛИ ВТ_ЭСФ.НомерЗаявленияВРамкахТС <> ВТ_ИсточникиПроисхождения.НомерЗаявленияВРамкахТС)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВТ_ЭСФ.СсылкаЭСФ.Дата";
	
	Запрос.УстановитьПараметр("ДатаНач", 				  ПараметрыОтчета.ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", 				  КонецДня(ПараметрыОтчета.ДатаКон));
	Запрос.УстановитьПараметр("Организация", 			  ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("СпособПроисхожденияСТ1",   Перечисления.СпособыПроисхожденияТоваров.СТ1);
	
	Результат = Запрос.Выполнить();
	//
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаВыпискиЭСФИИПРезультатЗапроса", Результат);
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ЭСФ", "ЭСФ");
		СтруктураРасшифровки.Вставить("ИсточникПроисхождения", "ИсточникПроисхождения");
		СтруктураРасшифровки.Вставить("Товар", "Товар");		

		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаВыпискиЭСФИИПСтруктураРасшифровки", СтруктураРасшифровки);	
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ИсточникПроисхождения" ,                   НСтр("ru = 'Источник происхождения'"));
		СтруктураЗаголовков.Вставить("СоответствуетКодТНВЭД"  ,                  НСтр("ru = 'Соответ. КодТНВЭД'"));
		СтруктураЗаголовков.Вставить("СоответствуетНомерСтрокиГТД"  ,            НСтр("ru = 'Соответ. Номер строки ГТД'"));
		СтруктураЗаголовков.Вставить("СоответствуетНаименованиеТовара"  , 	     НСтр("ru = 'Соответ. Наименование товара'"));
		СтруктураЗаголовков.Вставить("СоответствуетНомерЗаявленияВРамкахТС" ,    НСтр("ru = 'Соответ. Номер заявления в рамках ТС'"));
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаВыпискиЭСФИИПСтруктураЗаголовков", СтруктураЗаголовков);
		
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("ЭСФ", 		                            60);
		СтруктураШириныКолонок.Вставить("ИсточникПроисхождения",                60);
		СтруктураШириныКолонок.Вставить("Товар",                                60);
		СтруктураШириныКолонок.Вставить("СоответствуетКодТНВЭД",                40);
		СтруктураШириныКолонок.Вставить("СоответствуетНомерСтрокиГТД",          40);		
		СтруктураШириныКолонок.Вставить("СоответствуетНаименованиеТовара"  ,    40);
		СтруктураШириныКолонок.Вставить("СоответствуетНомерЗаявленияВРамкахТС" ,40);
				
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаВыпискиЭСФИИПСтруктураШириныКолонок", СтруктураШириныКолонок);	

	КонецЕсли; 
	 
КонецПроцедуры

Процедура ПроверитьПравилоПроверкаОтложенногоНДС(СтрокаПравила, ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТиповойОбороты.Счет,
		|	ТиповойОбороты.КорСчет,
		|	ТиповойОбороты.Субконто1 КАК Контрагент,
		|	ТиповойОбороты.Субконто2 КАК ДокументПоступления,
		|	ТиповойОбороты.СуммаОборотДт,
		|	ТиповойОбороты.СуммаОборотКт,
		|	ТиповойОбороты.Регистратор,
		|	ВЫБОР
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.АвансовыйОтчет
		|			ТОГДА ""ЭтоДокументПоступления""
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
		|			ТОГДА ""ЭтоВозвратПоставщику""
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.ПоступлениеДопРасходов
		|			ТОГДА ""ЭтоДокументПоступления""
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.ПоступлениеИзПереработки
		|			ТОГДА ""ЭтоДокументПоступления""
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.ПоступлениеНМА
		|			ТОГДА ""ЭтоДокументПоступления""
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг
		|			ТОГДА ""ЭтоДокументПоступления""
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС
		|			ТОГДА ""ЭтоРегистрацияПрочихОпераций""
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.ОперацияБух
		|			ТОГДА ""ЭтоОперацияБух""
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.ВводНачальныхОстатков
		|			ТОГДА ""ЭтоВводОстатков""
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.ГТДИмпорт
		|			ТОГДА ""ЭтоГТД""
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.ЗаявлениеОВвозеТоваровИУплатеКосвенныхНалогов
		|			ТОГДА ""ЭтоЗаявлениеОВвозе""
		|		ИНАЧЕ ""ЭтоИнойДокумент""
		|	КОНЕЦ КАК ВидДокументаРегистратора,
		|	ВЫБОР
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.АвансовыйОтчет
		|			ТОГДА ВЫРАЗИТЬ(ТиповойОбороты.Регистратор КАК Документ.АвансовыйОтчет).ОтложитьПринятиеНДСКЗачету
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
		|			ТОГДА ВЫРАЗИТЬ(ТиповойОбороты.Регистратор КАК Документ.ВозвратТоваровПоставщику).ОтложитьПринятиеНДСКЗачету
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.ПоступлениеДопРасходов
		|			ТОГДА ВЫРАЗИТЬ(ТиповойОбороты.Регистратор КАК Документ.ПоступлениеДопРасходов).ОтложитьПринятиеНДСКЗачету
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.ПоступлениеИзПереработки
		|			ТОГДА ВЫРАЗИТЬ(ТиповойОбороты.Регистратор КАК Документ.ПоступлениеИзПереработки).ОтложитьПринятиеНДСКЗачету
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.ПоступлениеНМА
		|			ТОГДА ВЫРАЗИТЬ(ТиповойОбороты.Регистратор КАК Документ.ПоступлениеНМА).ОтложитьПринятиеНДСКЗачету
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг
		|			ТОГДА ВЫРАЗИТЬ(ТиповойОбороты.Регистратор КАК Документ.ПоступлениеТоваровУслуг).ОтложитьПринятиеНДСКЗачету
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОтложитьПринятиеНДСКЗачетуРегистратор,
		|	ВЫБОР
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС
		|			ТОГДА ВЫРАЗИТЬ(ТиповойОбороты.Регистратор КАК Документ.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС).СчетУчетаРасчетовСКонтрагентом
		|		ИНАЧЕ &ПустойСчет
		|	КОНЕЦ КАК СчетРасчетовСКонтрагентомРегистрацияПоступления,
		|	ВЫБОР
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС
		|			ТОГДА ВЫРАЗИТЬ(ТиповойОбороты.Регистратор КАК Документ.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС).ВидОперации
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ВидОперацииРегистрацияПоступления
		|ПОМЕСТИТЬ ВТ_ТиповойОбороты
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Обороты(&ДатаНач, &ДатаКон, Авто, Счет = &Счет1422, &ВидыСубконто, Организация = &Организация, , ) КАК ТиповойОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_ТиповойОбороты.Счет,
		|	ВТ_ТиповойОбороты.КорСчет,
		|	ВТ_ТиповойОбороты.Регистратор КАК Документ,
		|	ВТ_ТиповойОбороты.ВидДокументаРегистратора,
		|	ВТ_ТиповойОбороты.Контрагент,
		|	ВТ_ТиповойОбороты.ДокументПоступления,
		|	ВТ_ТиповойОбороты.СуммаОборотДт,
		|	ВТ_ТиповойОбороты.СуммаОборотКт,
		|	&ВПроводкахПоСчету1422НеЗаполненаАналитика КАК Ошибка,
		|	ВТ_ТиповойОбороты.ОтложитьПринятиеНДСКЗачетуРегистратор,
		|	ВТ_ТиповойОбороты.СчетРасчетовСКонтрагентомРегистрацияПоступления,
		|	ВТ_ТиповойОбороты.ВидОперацииРегистрацияПоступления
		|ИЗ
		|	ВТ_ТиповойОбороты КАК ВТ_ТиповойОбороты
		|ГДЕ
		|	(ВТ_ТиповойОбороты.Контрагент = НЕОПРЕДЕЛЕНО
		|			ИЛИ ВТ_ТиповойОбороты.Контрагент = &ПустойКонтрагент
		|			ИЛИ ВТ_ТиповойОбороты.ДокументПоступления = НЕОПРЕДЕЛЕНО)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ТиповойОбороты.Счет,
		|	ВТ_ТиповойОбороты.КорСчет,
		|	ВТ_ТиповойОбороты.Регистратор,
		|	ВТ_ТиповойОбороты.ВидДокументаРегистратора,
		|	ВТ_ТиповойОбороты.Контрагент,
		|	ВТ_ТиповойОбороты.ДокументПоступления,
		|	ВТ_ТиповойОбороты.СуммаОборотДт,
		|	ВТ_ТиповойОбороты.СуммаОборотКт,
		|	&НекорректныйВидДокумента,
		|	ВТ_ТиповойОбороты.ОтложитьПринятиеНДСКЗачетуРегистратор,
		|	ВТ_ТиповойОбороты.СчетРасчетовСКонтрагентомРегистрацияПоступления,
		|	ВТ_ТиповойОбороты.ВидОперацииРегистрацияПоступления
		|ИЗ
		|	ВТ_ТиповойОбороты КАК ВТ_ТиповойОбороты
		|ГДЕ
		|	ВТ_ТиповойОбороты.ВидДокументаРегистратора = ""ЭтоИнойДокумент""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ТиповойОбороты.Счет,
		|	ВТ_ТиповойОбороты.КорСчет,
		|	ВТ_ТиповойОбороты.Регистратор,
		|	ВТ_ТиповойОбороты.ВидДокументаРегистратора,
		|	ВТ_ТиповойОбороты.Контрагент,
		|	ВТ_ТиповойОбороты.ДокументПоступления,
		|	ВТ_ТиповойОбороты.СуммаОборотДт,
		|	ВТ_ТиповойОбороты.СуммаОборотКт,
		|	&ВКачествеСчетаУчетаРасчетовНеВыбран1422,
		|	ВТ_ТиповойОбороты.ОтложитьПринятиеНДСКЗачетуРегистратор,
		|	ВТ_ТиповойОбороты.СчетРасчетовСКонтрагентомРегистрацияПоступления,
		|	ВТ_ТиповойОбороты.ВидОперацииРегистрацияПоступления
		|ИЗ
		|	ВТ_ТиповойОбороты КАК ВТ_ТиповойОбороты
		|ГДЕ
		|	ВТ_ТиповойОбороты.ВидДокументаРегистратора = ""ЭтоРегистрацияПрочихОпераций""
		|	И ВТ_ТиповойОбороты.СчетРасчетовСКонтрагентомРегистрацияПоступления <> &Счет1422
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ТиповойОбороты.Счет,
		|	ВТ_ТиповойОбороты.КорСчет,
		|	ВТ_ТиповойОбороты.Регистратор,
		|	ВТ_ТиповойОбороты.ВидДокументаРегистратора,
		|	ВТ_ТиповойОбороты.Контрагент,
		|	ВТ_ТиповойОбороты.ДокументПоступления,
		|	ВТ_ТиповойОбороты.СуммаОборотДт,
		|	ВТ_ТиповойОбороты.СуммаОборотКт,
		|	&УДокументаПоступленияНеУстановленПризнакОтложитьПринятиеНДСКЗачету,
		|	ВТ_ТиповойОбороты.ОтложитьПринятиеНДСКЗачетуРегистратор,
		|	ВТ_ТиповойОбороты.СчетРасчетовСКонтрагентомРегистрацияПоступления,
		|	ВТ_ТиповойОбороты.ВидОперацииРегистрацияПоступления
		|ИЗ
		|	ВТ_ТиповойОбороты КАК ВТ_ТиповойОбороты
		|ГДЕ
		|	ВТ_ТиповойОбороты.СуммаОборотДт <> 0
		|	И ВТ_ТиповойОбороты.ВидДокументаРегистратора = ""ЭтоДокументПоступления""
		|	И НЕ ВТ_ТиповойОбороты.ОтложитьПринятиеНДСКЗачетуРегистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ТиповойОбороты.Счет,
		|	ВТ_ТиповойОбороты.КорСчет,
		|	ВТ_ТиповойОбороты.Регистратор,
		|	ВТ_ТиповойОбороты.ВидДокументаРегистратора,
		|	ВТ_ТиповойОбороты.Контрагент,
		|	ВТ_ТиповойОбороты.ДокументПоступления,
		|	ВТ_ТиповойОбороты.СуммаОборотДт,
		|	ВТ_ТиповойОбороты.СуммаОборотКт,
		|	&НеКорректноУказанСчетУчетаНДС,
		|	ВТ_ТиповойОбороты.ОтложитьПринятиеНДСКЗачетуРегистратор,
		|	ВТ_ТиповойОбороты.СчетРасчетовСКонтрагентомРегистрацияПоступления,
		|	ВТ_ТиповойОбороты.ВидОперацииРегистрацияПоступления
		|ИЗ
		|	ВТ_ТиповойОбороты КАК ВТ_ТиповойОбороты
		|ГДЕ
		|	ВТ_ТиповойОбороты.СуммаОборотДт <> 0
		|	И ВТ_ТиповойОбороты.ВидДокументаРегистратора = ""ЭтоРегистрацияПрочихОпераций""
		|	И ВТ_ТиповойОбороты.ВидОперацииРегистрацияПоступления = &ВидОперацииРегистрацияОборота
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ТиповойОбороты.Счет,
		|	ВТ_ТиповойОбороты.КорСчет,
		|	ВТ_ТиповойОбороты.Регистратор,
		|	ВТ_ТиповойОбороты.ВидДокументаРегистратора,
		|	ВТ_ТиповойОбороты.Контрагент,
		|	ВТ_ТиповойОбороты.ДокументПоступления,
		|	ВТ_ТиповойОбороты.СуммаОборотДт,
		|	ВТ_ТиповойОбороты.СуммаОборотКт,
		|	&НекорректныйВидДокументаДляОборотаПоДт,
		|	ВТ_ТиповойОбороты.ОтложитьПринятиеНДСКЗачетуРегистратор,
		|	ВТ_ТиповойОбороты.СчетРасчетовСКонтрагентомРегистрацияПоступления,
		|	ВТ_ТиповойОбороты.ВидОперацииРегистрацияПоступления
		|ИЗ
		|	ВТ_ТиповойОбороты КАК ВТ_ТиповойОбороты
		|ГДЕ
		|	ВТ_ТиповойОбороты.СуммаОборотДт <> 0
		|	И ВТ_ТиповойОбороты.ВидДокументаРегистратора = ""ЭтоВозвратПоставщику""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ТиповойОбороты.Счет,
		|	ВТ_ТиповойОбороты.КорСчет,
		|	ВТ_ТиповойОбороты.Регистратор,
		|	ВТ_ТиповойОбороты.ВидДокументаРегистратора,
		|	ВТ_ТиповойОбороты.Контрагент,
		|	ВТ_ТиповойОбороты.ДокументПоступления,
		|	ВТ_ТиповойОбороты.СуммаОборотДт,
		|	ВТ_ТиповойОбороты.СуммаОборотКт,
		|	&УДокументаПоступленияНеУстановленПризнакОтложитьПринятиеНДСКЗачету,
		|	ВТ_ТиповойОбороты.ОтложитьПринятиеНДСКЗачетуРегистратор,
		|	ВТ_ТиповойОбороты.СчетРасчетовСКонтрагентомРегистрацияПоступления,
		|	ВТ_ТиповойОбороты.ВидОперацииРегистрацияПоступления
		|ИЗ
		|	ВТ_ТиповойОбороты КАК ВТ_ТиповойОбороты
		|ГДЕ
		|	ВТ_ТиповойОбороты.СуммаОборотКт <> 0
		|	И ВТ_ТиповойОбороты.ВидДокументаРегистратора = ""ЭтоВозвратПоставщику""
		|	И НЕ ВТ_ТиповойОбороты.ОтложитьПринятиеНДСКЗачетуРегистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ТиповойОбороты.Счет,
		|	ВТ_ТиповойОбороты.КорСчет,
		|	ВТ_ТиповойОбороты.Регистратор,
		|	ВТ_ТиповойОбороты.ВидДокументаРегистратора,
		|	ВТ_ТиповойОбороты.Контрагент,
		|	ВТ_ТиповойОбороты.ДокументПоступления,
		|	ВТ_ТиповойОбороты.СуммаОборотДт,
		|	ВТ_ТиповойОбороты.СуммаОборотКт,
		|	&НеКорректноУказанСчетУчетаНДС,
		|	ВТ_ТиповойОбороты.ОтложитьПринятиеНДСКЗачетуРегистратор,
		|	ВТ_ТиповойОбороты.СчетРасчетовСКонтрагентомРегистрацияПоступления,
		|	ВТ_ТиповойОбороты.ВидОперацииРегистрацияПоступления
		|ИЗ
		|	ВТ_ТиповойОбороты КАК ВТ_ТиповойОбороты
		|ГДЕ
		|	ВТ_ТиповойОбороты.СуммаОборотКт <> 0
		|	И ВТ_ТиповойОбороты.ВидДокументаРегистратора = ""ЭтоРегистрацияПрочихОпераций""
		|	И ВТ_ТиповойОбороты.ВидОперацииРегистрацияПоступления <> &ВидОперацииРегистрацияОборота
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ТиповойОбороты.Счет,
		|	ВТ_ТиповойОбороты.КорСчет,
		|	ВТ_ТиповойОбороты.Регистратор,
		|	ВТ_ТиповойОбороты.ВидДокументаРегистратора,
		|	ВТ_ТиповойОбороты.Контрагент,
		|	ВТ_ТиповойОбороты.ДокументПоступления,
		|	ВТ_ТиповойОбороты.СуммаОборотДт,
		|	ВТ_ТиповойОбороты.СуммаОборотКт,
		|	&НекорректныйВидДокументаДляОборотаПоКт,
		|	ВТ_ТиповойОбороты.ОтложитьПринятиеНДСКЗачетуРегистратор,
		|	ВТ_ТиповойОбороты.СчетРасчетовСКонтрагентомРегистрацияПоступления,
		|	ВТ_ТиповойОбороты.ВидОперацииРегистрацияПоступления
		|ИЗ
		|	ВТ_ТиповойОбороты КАК ВТ_ТиповойОбороты
		|ГДЕ
		|	ВТ_ТиповойОбороты.СуммаОборотКт <> 0
		|	И ВТ_ТиповойОбороты.ВидДокументаРегистратора = ""ЭтоДокументПоступления""
		|
		|УПОРЯДОЧИТЬ ПО
		|	Документ
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаНач"     , ПараметрыОтчета.ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон"     , КонецДня(ПараметрыОтчета.ДатаКон));
	Запрос.УстановитьПараметр("Организация" , ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("Счет1422"    , ПланыСчетов.Типовой.НДСНачисленныйПриПокупке);
	Запрос.УстановитьПараметр("ПустойСчет"  , ПланыСчетов.Типовой.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойКонтрагент"             , Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВидОперацииРегистрацияОборота", Перечисления.ВидыОперацийВЦеляхНДС.РегистрацияОборотаПоРеализации);
    Запрос.УстановитьПараметр("ВПроводкахПоСчету1422НеЗаполненаАналитика"     , НСтр("ru = 'В проводках по счету <1422> не заполнена аналитика'"));
	Запрос.УстановитьПараметр("НекорректныйВидДокумента"     , НСтр("ru = 'Некорректный вид документа'"));
    Запрос.УстановитьПараметр("ВКачествеСчетаУчетаРасчетовНеВыбран1422"     , НСтр("ru = 'В качестве счета учета расчетов с контрагентами не выбран счет <1422>'"));
    Запрос.УстановитьПараметр("УДокументаПоступленияНеУстановленПризнакОтложитьПринятиеНДСКЗачету"     , НСтр("ru = 'У ""Документа поступления"" не установлен признак ""Отложить принятие к зачету""'"));
    Запрос.УстановитьПараметр("НеКорректноУказанСчетУчетаНДС"     , НСтр("ru = 'Не корректно указан счет учета НДС'"));
    Запрос.УстановитьПараметр("НекорректныйВидДокументаДляОборотаПоДт"     , НСтр("ru = 'Некорректный вид документа для оборота по Дт'"));
    Запрос.УстановитьПараметр("НекорректныйВидДокументаДляОборотаПоКт"     , НСтр("ru = 'Некорректный вид документа для оборота по Кт'"));

	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыПоступления);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаОшибок = РезультатЗапроса[1].Выгрузить();
	
	ТаблицаОшибок.Колонки.Удалить("ВидДокументаРегистратора");
	ТаблицаОшибок.Колонки.Удалить("ОтложитьПринятиеНДСКЗачетуРегистратор");
	ТаблицаОшибок.Колонки.Удалить("ВидОперацииРегистрацияПоступления");
	ТаблицаОшибок.Колонки.Удалить("СчетРасчетовСКонтрагентомРегистрацияПоступления");
	
	Если ТаблицаОшибок.Количество() > 0 Тогда
		
		СтрокаПравила.ОбнаруженыОшибки  = Истина;
		СтрокаПравила.ПроверкаВыполнена = Истина;		
		
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаОтложенногоНДСТаблицаЗначений", ТаблицаОшибок);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("Документ"            , НСтр("ru = 'Документ'"));
		СтруктураЗаголовков.Вставить("Счет"                , НСтр("ru = 'Счет'"));
		СтруктураЗаголовков.Вставить("КорСчет"             , НСтр("ru = 'Кор. счет'"));
		СтруктураЗаголовков.Вставить("Контрагент"          , НСтр("ru = 'Контрагент'"));
		СтруктураЗаголовков.Вставить("ДокументПоступления" , НСтр("ru = 'Документ поступления'"));
		СтруктураЗаголовков.Вставить("СуммаОборотДт"       , НСтр("ru = 'Оборот Дт'"));
		СтруктураЗаголовков.Вставить("СуммаОборотКт"       , НСтр("ru = 'Оборот Кт'"));
		СтруктураЗаголовков.Вставить("Ошибка"              , НСтр("ru = 'Описание ошибки'"));
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаОтложенногоНДССтруктураЗаголовков", СтруктураЗаголовков);
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Документ", "Документ");			
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаОтложенногоНДССтруктураРасшифровки", СтруктураРасшифровки);
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("Документ"            , 60);
		СтруктураШириныКолонок.Вставить("Счет"                , 30);
		СтруктураШириныКолонок.Вставить("КорСчет"             , 30);
		СтруктураШириныКолонок.Вставить("Контрагент"          , 60);
		СтруктураШириныКолонок.Вставить("ДокументПоступления" , 60);
		СтруктураШириныКолонок.Вставить("СуммаОборотДт"       , 40);
		СтруктураШириныКолонок.Вставить("СуммаОборотКт"       , 40);
		СтруктураШириныКолонок.Вставить("Ошибка"              , 80);
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаОтложенногоНДССтруктураШириныКолонок", СтруктураШириныКолонок);
		
	Иначе
		
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПравилоПроверкаСчетовФактурОтложенногоНДС(СтрокаПравила, ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТиповойОбороты.Счет,
		|	ТиповойОбороты.СуммаОборот,
		|	ТиповойОбороты.Регистратор,
		|	ВЫБОР
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.АвансовыйОтчет
		|			ТОГДА ВЫРАЗИТЬ(ТиповойОбороты.Регистратор КАК Документ.АвансовыйОтчет).ОтложитьПринятиеНДСКЗачету
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
		|			ТОГДА ВЫРАЗИТЬ(ТиповойОбороты.Регистратор КАК Документ.ВозвратТоваровПоставщику).ОтложитьПринятиеНДСКЗачету
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.ПоступлениеДопРасходов
		|			ТОГДА ВЫРАЗИТЬ(ТиповойОбороты.Регистратор КАК Документ.ПоступлениеДопРасходов).ОтложитьПринятиеНДСКЗачету
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.ПоступлениеИзПереработки
		|			ТОГДА ВЫРАЗИТЬ(ТиповойОбороты.Регистратор КАК Документ.ПоступлениеИзПереработки).ОтложитьПринятиеНДСКЗачету
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.ПоступлениеНМА
		|			ТОГДА ВЫРАЗИТЬ(ТиповойОбороты.Регистратор КАК Документ.ПоступлениеНМА).ОтложитьПринятиеНДСКЗачету
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг
		|			ТОГДА ВЫРАЗИТЬ(ТиповойОбороты.Регистратор КАК Документ.ПоступлениеТоваровУслуг).ОтложитьПринятиеНДСКЗачету
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОтложитьПринятиеНДСКЗачетуРегистратор,
		|	ВЫБОР
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС
		|			ТОГДА ВЫРАЗИТЬ(ТиповойОбороты.Регистратор КАК Документ.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС).СчетУчетаРасчетовСКонтрагентом
		|		ИНАЧЕ &ПустойСчет
		|	КОНЕЦ КАК СчетРасчетовСКонтрагентомРегистрацияПоступления
		|ПОМЕСТИТЬ ВТ_ТиповойОбороты
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Обороты(&ДатаНач, &ДатаКон, Авто, Счет = &Счет1422, &ВидыСубконто, Организация = &Организация, , ) КАК ТиповойОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СчетФактураПолученныйДокументыОснования.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ ВТ_СчетаФактуры
		|ИЗ
		|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
		|ГДЕ
		|	СчетФактураПолученныйДокументыОснования.ДокументОснование В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ВТ_ТиповойОбороты.Регистратор
		|			ИЗ
		|				ВТ_ТиповойОбороты)
		|	И НЕ СчетФактураПолученныйДокументыОснования.Ссылка.ПометкаУдаления
		|	И СчетФактураПолученныйДокументыОснования.Ссылка.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТиповойОбороты.Регистратор КАК Документ,
		|	ВТ_СчетаФактуры.ДокументОснование КАК ДокументОснованиеДляСФ,
		|	&ДляДокументаОтложитьПринятиеНДСКЗачетуЗарегистрированСчетфактура КАК Ошибка,
		|	ВТ_ТиповойОбороты.ОтложитьПринятиеНДСКЗачетуРегистратор,
		|	ВТ_ТиповойОбороты.СчетРасчетовСКонтрагентомРегистрацияПоступления
		|ИЗ
		|	ВТ_ТиповойОбороты КАК ВТ_ТиповойОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СчетаФактуры КАК ВТ_СчетаФактуры
		|		ПО ВТ_ТиповойОбороты.Регистратор = ВТ_СчетаФактуры.ДокументОснование
		|			И (НЕ ВТ_ТиповойОбороты.Регистратор ССЫЛКА Документ.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС)
		|			И (ВТ_ТиповойОбороты.ОтложитьПринятиеНДСКЗачетуРегистратор)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ТиповойОбороты.Регистратор,
		|	ВТ_СчетаФактуры.ДокументОснование,
		|	&ДляДокументаРегистрацииОтложенногоНДСНеЗарегистрированСчетфактура,
		|	ВТ_ТиповойОбороты.ОтложитьПринятиеНДСКЗачетуРегистратор,
		|	ВТ_ТиповойОбороты.СчетРасчетовСКонтрагентомРегистрацияПоступления
		|ИЗ
		|	ВТ_ТиповойОбороты КАК ВТ_ТиповойОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаФактуры КАК ВТ_СчетаФактуры
		|		ПО ВТ_ТиповойОбороты.Регистратор = ВТ_СчетаФактуры.ДокументОснование
		|ГДЕ
		|	ВТ_СчетаФактуры.ДокументОснование ЕСТЬ NULL 
		|	И ВТ_ТиповойОбороты.Регистратор ССЫЛКА Документ.РегистрацияПрочихОперацийПоПриобретеннымТоварамВЦеляхНДС
		|	И ВТ_ТиповойОбороты.СчетРасчетовСКонтрагентомРегистрацияПоступления = &Счет1422
		|
		|УПОРЯДОЧИТЬ ПО
		|	Документ
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаНач"     , ПараметрыОтчета.ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон"     , КонецДня(ПараметрыОтчета.ДатаКон));
	Запрос.УстановитьПараметр("Организация" , ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("Счет1422"    , ПланыСчетов.Типовой.НДСНачисленныйПриПокупке);
	Запрос.УстановитьПараметр("ПустойСчет"  , ПланыСчетов.Типовой.ПустаяСсылка());
	Запрос.УстановитьПараметр("ДляДокументаОтложитьПринятиеНДСКЗачетуЗарегистрированСчетфактура", НСтр("ru = 'Для документа с признаком ""Отложить принятие НДС к зачету"" зарегистрирован Счет-фактура'"));
	Запрос.УстановитьПараметр("ДляДокументаРегистрацииОтложенногоНДСНеЗарегистрированСчетфактура", НСтр("ru = 'Для документа регистрации отложенного НДС НЕ зарегистрирован Счет-фактура'"));

	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыПоступления);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаОшибок = РезультатЗапроса.Выгрузить();
	
	ТаблицаОшибок.Колонки.Удалить("ДокументОснованиеДляСФ");
	ТаблицаОшибок.Колонки.Удалить("ОтложитьПринятиеНДСКЗачетуРегистратор");
	ТаблицаОшибок.Колонки.Удалить("СчетРасчетовСКонтрагентомРегистрацияПоступления");
	
	Если ТаблицаОшибок.Количество() > 0 Тогда
		
		СтрокаПравила.ОбнаруженыОшибки  = Истина;
		СтрокаПравила.ПроверкаВыполнена = Истина;		
		
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаСчетовФактурОтложенногоНДСТаблицаЗначений", ТаблицаОшибок);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("Документ"            , НСтр("ru = 'Документ'"));
		СтруктураЗаголовков.Вставить("Ошибка"              , НСтр("ru = 'Описание ошибки'"));
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаСчетовФактурОтложенногоНДССтруктураЗаголовков", СтруктураЗаголовков);
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Документ", "Документ");			
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаСчетовФактурОтложенногоНДССтруктураРасшифровки", СтруктураРасшифровки);
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("Документ"            , 80);
		СтруктураШириныКолонок.Вставить("Ошибка"              , 80);
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаСчетовФактурОтложенногоНДССтруктураШириныКолонок", СтруктураШириныКолонок);
		
	Иначе
		
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПравилоПроверкаОтложенногоНДСДляУслуг(СтрокаПравила, ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТиповойОбороты.Счет,
		|	ТиповойОбороты.КорСчет,
		|	ТиповойОбороты.Субконто1 КАК Контрагент,
		|	ТиповойОбороты.Субконто2 КАК ДокументРеализации,
		|	ТиповойОбороты.СуммаОборотДт,
		|	ТиповойОбороты.СуммаОборотКт,
		|	ТиповойОбороты.Регистратор,
		|	ВЫБОР
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.АктОбОказанииПроизводственныхУслуг
		|			ТОГДА ""ЭтоДокументРеализации""
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
		|			ТОГДА ""ЭтоВозвратОтПокупателя""
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
		|			ТОГДА ""ЭтоДокументРеализации""
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.РеализацияУслугПоПереработке
		|			ТОГДА ""ЭтоДокументРеализации""
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС
		|			ТОГДА ""ЭтоРегистрацияПрочихОпераций""
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.ОперацияБух
		|			ТОГДА ""ЭтоОперацияБух""
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.ВводНачальныхОстатков
		|			ТОГДА ""ЭтоВводОстатков""
		|		ИНАЧЕ ""ЭтоИнойДокумент""
		|	КОНЕЦ КАК ВидДокументаРегистратора,
		|	ВЫБОР
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.АктОбОказанииПроизводственныхУслуг
		|			ТОГДА ВЫРАЗИТЬ(ТиповойОбороты.Регистратор КАК Документ.АктОбОказанииПроизводственныхУслуг).ОтложитьНачислениеНДС
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
		|			ТОГДА ВЫРАЗИТЬ(ТиповойОбороты.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).ОтложитьНачислениеНДС
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
		|			ТОГДА ВЫРАЗИТЬ(ТиповойОбороты.Регистратор КАК Документ.РеализацияТоваровУслуг).ОтложитьНачислениеНДС
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.РеализацияУслугПоПереработке
		|			ТОГДА ВЫРАЗИТЬ(ТиповойОбороты.Регистратор КАК Документ.РеализацияУслугПоПереработке).ОтложитьНачислениеНДС
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОтложитьНачислениеНДСРегистратор,
		|	ВЫБОР
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС
		|			ТОГДА ВЫРАЗИТЬ(ТиповойОбороты.Регистратор КАК Документ.РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС).СчетУчетаРасчетовСКонтрагентом
		|		ИНАЧЕ &ПустойСчет
		|	КОНЕЦ КАК СчетРасчетовСКонтрагентомРегистрацияРеализации,
		|	ВЫБОР
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС
		|			ТОГДА ВЫРАЗИТЬ(ТиповойОбороты.Регистратор КАК Документ.РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС).ВидОперации
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ВидОперацииРегистрацияРеализации
		|ПОМЕСТИТЬ ВТ_ТиповойОбороты
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Обороты(&ДатаНач, &ДатаКон, Авто, Счет = &Счет3132, &ВидыСубконто, Организация = &Организация, , ) КАК ТиповойОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_ТиповойОбороты.Счет,
		|	ВТ_ТиповойОбороты.КорСчет,
		|	ВТ_ТиповойОбороты.Регистратор КАК Документ,
		|	ВТ_ТиповойОбороты.ВидДокументаРегистратора,
		|	ВТ_ТиповойОбороты.Контрагент,
		|	ВТ_ТиповойОбороты.ДокументРеализации,
		|	ВТ_ТиповойОбороты.СуммаОборотДт,
		|	ВТ_ТиповойОбороты.СуммаОборотКт,
		|	&ВПроводкахПоСчету3132НеЗаполненаАналитика КАК Ошибка,
		|	ВТ_ТиповойОбороты.ОтложитьНачислениеНДСРегистратор,
		|	ВТ_ТиповойОбороты.СчетРасчетовСКонтрагентомРегистрацияРеализации,
		|	ВТ_ТиповойОбороты.ВидОперацииРегистрацияРеализации
		|ИЗ
		|	ВТ_ТиповойОбороты КАК ВТ_ТиповойОбороты
		|ГДЕ
		|	(ВТ_ТиповойОбороты.Контрагент = НЕОПРЕДЕЛЕНО
		|			ИЛИ ВТ_ТиповойОбороты.Контрагент = &ПустойКонтрагент
		|			ИЛИ ВТ_ТиповойОбороты.ДокументРеализации = НЕОПРЕДЕЛЕНО)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ТиповойОбороты.Счет,
		|	ВТ_ТиповойОбороты.КорСчет,
		|	ВТ_ТиповойОбороты.Регистратор,
		|	ВТ_ТиповойОбороты.ВидДокументаРегистратора,
		|	ВТ_ТиповойОбороты.Контрагент,
		|	ВТ_ТиповойОбороты.ДокументРеализации,
		|	ВТ_ТиповойОбороты.СуммаОборотДт,
		|	ВТ_ТиповойОбороты.СуммаОборотКт,
		|	&НекорректныйВидДокумента,
		|	ВТ_ТиповойОбороты.ОтложитьНачислениеНДСРегистратор,
		|	ВТ_ТиповойОбороты.СчетРасчетовСКонтрагентомРегистрацияРеализации,
		|	ВТ_ТиповойОбороты.ВидОперацииРегистрацияРеализации
		|ИЗ
		|	ВТ_ТиповойОбороты КАК ВТ_ТиповойОбороты
		|ГДЕ
		|	ВТ_ТиповойОбороты.ВидДокументаРегистратора = ""ЭтоИнойДокумент""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ТиповойОбороты.Счет,
		|	ВТ_ТиповойОбороты.КорСчет,
		|	ВТ_ТиповойОбороты.Регистратор,
		|	ВТ_ТиповойОбороты.ВидДокументаРегистратора,
		|	ВТ_ТиповойОбороты.Контрагент,
		|	ВТ_ТиповойОбороты.ДокументРеализации,
		|	ВТ_ТиповойОбороты.СуммаОборотДт,
		|	ВТ_ТиповойОбороты.СуммаОборотКт,
		|	&ВКкачествеСчетаУчетаРасчетовНеВыбранСчет3132,
		|	ВТ_ТиповойОбороты.ОтложитьНачислениеНДСРегистратор,
		|	ВТ_ТиповойОбороты.СчетРасчетовСКонтрагентомРегистрацияРеализации,
		|	ВТ_ТиповойОбороты.ВидОперацииРегистрацияРеализации
		|ИЗ
		|	ВТ_ТиповойОбороты КАК ВТ_ТиповойОбороты
		|ГДЕ
		|	ВТ_ТиповойОбороты.ВидДокументаРегистратора = ""ЭтоРегистрацияПрочихОпераций""
		|	И ВТ_ТиповойОбороты.СчетРасчетовСКонтрагентомРегистрацияРеализации <> &Счет3132
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ТиповойОбороты.Счет,
		|	ВТ_ТиповойОбороты.КорСчет,
		|	ВТ_ТиповойОбороты.Регистратор,
		|	ВТ_ТиповойОбороты.ВидДокументаРегистратора,
		|	ВТ_ТиповойОбороты.Контрагент,
		|	ВТ_ТиповойОбороты.ДокументРеализации,
		|	ВТ_ТиповойОбороты.СуммаОборотДт,
		|	ВТ_ТиповойОбороты.СуммаОборотКт,
		|	&УДокументаРеализацииНеУстановленПризнакОтложитьНачислениеНДС,
		|	ВТ_ТиповойОбороты.ОтложитьНачислениеНДСРегистратор,
		|	ВТ_ТиповойОбороты.СчетРасчетовСКонтрагентомРегистрацияРеализации,
		|	ВТ_ТиповойОбороты.ВидОперацииРегистрацияРеализации
		|ИЗ
		|	ВТ_ТиповойОбороты КАК ВТ_ТиповойОбороты
		|ГДЕ
		|	ВТ_ТиповойОбороты.СуммаОборотКт <> 0
		|	И ВТ_ТиповойОбороты.ВидДокументаРегистратора = ""ЭтоДокументРеализации""
		|	И НЕ ВТ_ТиповойОбороты.ОтложитьНачислениеНДСРегистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ТиповойОбороты.Счет,
		|	ВТ_ТиповойОбороты.КорСчет,
		|	ВТ_ТиповойОбороты.Регистратор,
		|	ВТ_ТиповойОбороты.ВидДокументаРегистратора,
		|	ВТ_ТиповойОбороты.Контрагент,
		|	ВТ_ТиповойОбороты.ДокументРеализации,
		|	ВТ_ТиповойОбороты.СуммаОборотДт,
		|	ВТ_ТиповойОбороты.СуммаОборотКт,
		|	&НекорректноУказанСчетУчетаНДС,
		|	ВТ_ТиповойОбороты.ОтложитьНачислениеНДСРегистратор,
		|	ВТ_ТиповойОбороты.СчетРасчетовСКонтрагентомРегистрацияРеализации,
		|	ВТ_ТиповойОбороты.ВидОперацииРегистрацияРеализации
		|ИЗ
		|	ВТ_ТиповойОбороты КАК ВТ_ТиповойОбороты
		|ГДЕ
		|	ВТ_ТиповойОбороты.СуммаОборотКт <> 0
		|	И ВТ_ТиповойОбороты.ВидДокументаРегистратора = ""ЭтоРегистрацияПрочихОпераций""
		|	И ВТ_ТиповойОбороты.ВидОперацииРегистрацияРеализации = &ВидОперацииРегистрацияОборота
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ТиповойОбороты.Счет,
		|	ВТ_ТиповойОбороты.КорСчет,
		|	ВТ_ТиповойОбороты.Регистратор,
		|	ВТ_ТиповойОбороты.ВидДокументаРегистратора,
		|	ВТ_ТиповойОбороты.Контрагент,
		|	ВТ_ТиповойОбороты.ДокументРеализации,
		|	ВТ_ТиповойОбороты.СуммаОборотДт,
		|	ВТ_ТиповойОбороты.СуммаОборотКт,
		|	&НекорректныйВидДокументаДляОборотаКт,
		|	ВТ_ТиповойОбороты.ОтложитьНачислениеНДСРегистратор,
		|	ВТ_ТиповойОбороты.СчетРасчетовСКонтрагентомРегистрацияРеализации,
		|	ВТ_ТиповойОбороты.ВидОперацииРегистрацияРеализации
		|ИЗ
		|	ВТ_ТиповойОбороты КАК ВТ_ТиповойОбороты
		|ГДЕ
		|	ВТ_ТиповойОбороты.СуммаОборотКт <> 0
		|	И ВТ_ТиповойОбороты.ВидДокументаРегистратора = ""ЭтоВозвратОтПокупателя""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ТиповойОбороты.Счет,
		|	ВТ_ТиповойОбороты.КорСчет,
		|	ВТ_ТиповойОбороты.Регистратор,
		|	ВТ_ТиповойОбороты.ВидДокументаРегистратора,
		|	ВТ_ТиповойОбороты.Контрагент,
		|	ВТ_ТиповойОбороты.ДокументРеализации,
		|	ВТ_ТиповойОбороты.СуммаОборотДт,
		|	ВТ_ТиповойОбороты.СуммаОборотКт,
		|	&УДокументаРеализацииНеУстановленПризнакОтложитьНачислениеНДС,
		|	ВТ_ТиповойОбороты.ОтложитьНачислениеНДСРегистратор,
		|	ВТ_ТиповойОбороты.СчетРасчетовСКонтрагентомРегистрацияРеализации,
		|	ВТ_ТиповойОбороты.ВидОперацииРегистрацияРеализации
		|ИЗ
		|	ВТ_ТиповойОбороты КАК ВТ_ТиповойОбороты
		|ГДЕ
		|	ВТ_ТиповойОбороты.СуммаОборотДт <> 0
		|	И ВТ_ТиповойОбороты.ВидДокументаРегистратора = ""ЭтоВозвратОтПокупателя""
		|	И НЕ ВТ_ТиповойОбороты.ОтложитьНачислениеНДСРегистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ТиповойОбороты.Счет,
		|	ВТ_ТиповойОбороты.КорСчет,
		|	ВТ_ТиповойОбороты.Регистратор,
		|	ВТ_ТиповойОбороты.ВидДокументаРегистратора,
		|	ВТ_ТиповойОбороты.Контрагент,
		|	ВТ_ТиповойОбороты.ДокументРеализации,
		|	ВТ_ТиповойОбороты.СуммаОборотДт,
		|	ВТ_ТиповойОбороты.СуммаОборотКт,
		|	&НекорректноУказанСчетУчетаНДС,
		|	ВТ_ТиповойОбороты.ОтложитьНачислениеНДСРегистратор,
		|	ВТ_ТиповойОбороты.СчетРасчетовСКонтрагентомРегистрацияРеализации,
		|	ВТ_ТиповойОбороты.ВидОперацииРегистрацияРеализации
		|ИЗ
		|	ВТ_ТиповойОбороты КАК ВТ_ТиповойОбороты
		|ГДЕ
		|	ВТ_ТиповойОбороты.СуммаОборотДт <> 0
		|	И ВТ_ТиповойОбороты.ВидДокументаРегистратора = ""ЭтоРегистрацияПрочихОпераций""
		|	И ВТ_ТиповойОбороты.ВидОперацииРегистрацияРеализации <> &ВидОперацииРегистрацияОборота
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ТиповойОбороты.Счет,
		|	ВТ_ТиповойОбороты.КорСчет,
		|	ВТ_ТиповойОбороты.Регистратор,
		|	ВТ_ТиповойОбороты.ВидДокументаРегистратора,
		|	ВТ_ТиповойОбороты.Контрагент,
		|	ВТ_ТиповойОбороты.ДокументРеализации,
		|	ВТ_ТиповойОбороты.СуммаОборотДт,
		|	ВТ_ТиповойОбороты.СуммаОборотКт,
		|	&НекорректныйВидДокументаДляОборотаДт,
		|	ВТ_ТиповойОбороты.ОтложитьНачислениеНДСРегистратор,
		|	ВТ_ТиповойОбороты.СчетРасчетовСКонтрагентомРегистрацияРеализации,
		|	ВТ_ТиповойОбороты.ВидОперацииРегистрацияРеализации
		|ИЗ
		|	ВТ_ТиповойОбороты КАК ВТ_ТиповойОбороты
		|ГДЕ
		|	ВТ_ТиповойОбороты.СуммаОборотДт <> 0
		|	И ВТ_ТиповойОбороты.ВидДокументаРегистратора = ""ЭтоДокументРеализации""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ТиповойОбороты.Счет,
		|	ВТ_ТиповойОбороты.КорСчет,
		|	ВТ_ТиповойОбороты.Регистратор,
		|	ВТ_ТиповойОбороты.ВидДокументаРегистратора,
		|	ВТ_ТиповойОбороты.Контрагент,
		|	ВТ_ТиповойОбороты.ДокументРеализации,
		|	ВТ_ТиповойОбороты.СуммаОборотДт,
		|	ВТ_ТиповойОбороты.СуммаОборотКт,
		|	&ДатаПодписанияДатаДокументаРегистрацииНДСРасходятся,
		|	ВТ_ТиповойОбороты.ОтложитьНачислениеНДСРегистратор,
		|	ВТ_ТиповойОбороты.СчетРасчетовСКонтрагентомРегистрацияРеализации,
		|	ВТ_ТиповойОбороты.ВидОперацииРегистрацияРеализации
		|ИЗ
		|	ВТ_ТиповойОбороты КАК ВТ_ТиповойОбороты
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияПоАктамВыполненныхРабот КАК СведенияПоАктамВыполненныхРабот
		|	ПО СведенияПоАктамВыполненныхРабот.ДокументРеализацииУслуг = ВТ_ТиповойОбороты.ДокументРеализации
		|ГДЕ 
		|	НАЧАЛОПЕРИОДА(СведенияПоАктамВыполненныхРабот.ДатаПодписания) <> НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(ВТ_ТиповойОбороты.Регистратор КАК Документ.РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС).Дата)
		|	И ВТ_ТиповойОбороты.ВидДокументаРегистратора = ""ЭтоРегистрацияПрочихОпераций""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ТиповойОбороты.Счет,
		|	ВТ_ТиповойОбороты.КорСчет,
		|	ВТ_ТиповойОбороты.Регистратор,
		|	ВТ_ТиповойОбороты.ВидДокументаРегистратора,
		|	ВТ_ТиповойОбороты.Контрагент,
		|	ВТ_ТиповойОбороты.ДокументРеализации,
		|	ВТ_ТиповойОбороты.СуммаОборотДт,
		|	ВТ_ТиповойОбороты.СуммаОборотКт,
		|   &УДокументаРеализацииДляКоторогоВведенДокументРегистрацииНДСНеУстановленПризнакОтложитьНачислениеНДС,
		|	ВТ_ТиповойОбороты.ОтложитьНачислениеНДСРегистратор,
		|	ВТ_ТиповойОбороты.СчетРасчетовСКонтрагентомРегистрацияРеализации,
		|	ВТ_ТиповойОбороты.ВидОперацииРегистрацияРеализации
		|ИЗ
		|	ВТ_ТиповойОбороты КАК ВТ_ТиповойОбороты
		|ГДЕ 
		|	ВТ_ТиповойОбороты.ВидДокументаРегистратора = ""ЭтоРегистрацияПрочихОпераций""
		|	И НЕ ВТ_ТиповойОбороты.ДокументРеализации.ОтложитьНачислениеНДС
		|
		|УПОРЯДОЧИТЬ ПО
		|	Документ
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаНач"     , ПараметрыОтчета.ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон"     , КонецДня(ПараметрыОтчета.ДатаКон));
	Запрос.УстановитьПараметр("Организация" , ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("Счет3132"    , ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьОтложенный);
	Запрос.УстановитьПараметр("ПустойСчет"  , ПланыСчетов.Типовой.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойКонтрагент"             , Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВидОперацииРегистрацияОборота", Перечисления.ВидыОперацийВЦеляхНДС.РегистрацияОборотаПоРеализации);
	Запрос.УстановитьПараметр("ВПроводкахПоСчету3132НеЗаполненаАналитика", НСтр("ru = 'В проводках по счету <3132> не заполнена аналитика'"));
    Запрос.УстановитьПараметр("НекорректныйВидДокумента", НСтр("ru = 'Некорректный вид документа'"));
    Запрос.УстановитьПараметр("ВКкачествеСчетаУчетаРасчетовНеВыбранСчет3132", НСтр("ru = 'В качестве счета учета расчетов с контрагентами не выбран счет <3132>'"));
	Запрос.УстановитьПараметр("УДокументаРеализацииНеУстановленПризнакОтложитьНачислениеНДС", НСтр("ru = 'У ""Документа реализации"" не установлен признак ""Отложить начисление НДС""'"));
    Запрос.УстановитьПараметр("НекорректноУказанСчетУчетаНДС", НСтр("ru = 'Не корректно указан счет учета НДС'"));
    Запрос.УстановитьПараметр("НекорректныйВидДокументаДляОборотаКт", НСтр("ru = 'Некорректный вид документа для оборота по Кт'"));
    Запрос.УстановитьПараметр("НекорректныйВидДокументаДляОборотаДт", НСтр("ru = 'Некорректный вид документа для оборота по Дт'"));
    Запрос.УстановитьПараметр("ДатаПодписанияДатаДокументаРегистрацииНДСРасходятся", НСтр("ru = 'Дата подписания и дата документа регистрации НДС расходятся'"));
    Запрос.УстановитьПараметр("УДокументаРеализацииДляКоторогоВведенДокументРегистрацииНДСНеУстановленПризнакОтложитьНачислениеНДС", НСтр("ru = 'У ""Документа реализации"", для которого введен документ регистрации НДС, не установлен признак ""Отложить начисление НДС""'"));

	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРеализации);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаОшибок = РезультатЗапроса[1].Выгрузить();
	
	ТаблицаОшибок.Колонки.Удалить("ВидДокументаРегистратора");
	ТаблицаОшибок.Колонки.Удалить("ОтложитьНачислениеНДСРегистратор");
	ТаблицаОшибок.Колонки.Удалить("ВидОперацииРегистрацияРеализации");
	ТаблицаОшибок.Колонки.Удалить("СчетРасчетовСКонтрагентомРегистрацияРеализации");
	
	Если ТаблицаОшибок.Количество() > 0 Тогда
		
		СтрокаПравила.ОбнаруженыОшибки  = Истина;
		СтрокаПравила.ПроверкаВыполнена = Истина;		
		
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаОтложенногоНДСДляУслугТаблицаЗначений", ТаблицаОшибок);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("Документ"            , НСтр("ru = 'Документ'"));
		СтруктураЗаголовков.Вставить("Счет"                , НСтр("ru = 'Счет'"));
		СтруктураЗаголовков.Вставить("КорСчет"             , НСтр("ru = 'Кор. счет'"));
		СтруктураЗаголовков.Вставить("Контрагент"          , НСтр("ru = 'Контрагент'"));
		СтруктураЗаголовков.Вставить("ДокументРеализации"  , НСтр("ru = 'Документ реализации'"));
		СтруктураЗаголовков.Вставить("СуммаОборотДт"       , НСтр("ru = 'Оборот Дт'"));
		СтруктураЗаголовков.Вставить("СуммаОборотКт"       , НСтр("ru = 'Оборот Кт'"));
		СтруктураЗаголовков.Вставить("Ошибка"              , НСтр("ru = 'Описание ошибки'"));
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаОтложенногоНДСДляУслугСтруктураЗаголовков", СтруктураЗаголовков);
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Документ", "Документ");			
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаОтложенногоНДСДляУслугСтруктураРасшифровки", СтруктураРасшифровки);
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("Документ"            , 60);
		СтруктураШириныКолонок.Вставить("Счет"                , 30);
		СтруктураШириныКолонок.Вставить("КорСчет"             , 30);
		СтруктураШириныКолонок.Вставить("Контрагент"          , 60);
		СтруктураШириныКолонок.Вставить("ДокументРеализации" , 60);
		СтруктураШириныКолонок.Вставить("СуммаОборотДт"       , 40);
		СтруктураШириныКолонок.Вставить("СуммаОборотКт"       , 40);
		СтруктураШириныКолонок.Вставить("Ошибка"              , 80);
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаОтложенногоНДСДляУслугСтруктураШириныКолонок", СтруктураШириныКолонок);
		
	Иначе
		
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПравилоПроверкаСчетовФактурОтложенногоНДСДляУслуг(СтрокаПравила, ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТиповойОбороты.Счет,
		|	ТиповойОбороты.СуммаОборот,
		|	ТиповойОбороты.Регистратор,
		|	ВЫБОР
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.АктОбОказанииПроизводственныхУслуг
		|			ТОГДА ВЫРАЗИТЬ(ТиповойОбороты.Регистратор КАК Документ.АктОбОказанииПроизводственныхУслуг).ОтложитьНачислениеНДС
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
		|			ТОГДА ВЫРАЗИТЬ(ТиповойОбороты.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).ОтложитьНачислениеНДС
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
		|			ТОГДА ВЫРАЗИТЬ(ТиповойОбороты.Регистратор КАК Документ.РеализацияТоваровУслуг).ОтложитьНачислениеНДС
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.РеализацияУслугПоПереработке
		|			ТОГДА ВЫРАЗИТЬ(ТиповойОбороты.Регистратор КАК Документ.РеализацияУслугПоПереработке).ОтложитьНачислениеНДС
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОтложитьНачислениеНДСРегистратор,
		|	ВЫБОР
		|		КОГДА ТиповойОбороты.Регистратор ССЫЛКА Документ.РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС
		|			ТОГДА ВЫРАЗИТЬ(ТиповойОбороты.Регистратор КАК Документ.РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС).СчетУчетаРасчетовСКонтрагентом
		|		ИНАЧЕ &ПустойСчет
		|	КОНЕЦ КАК СчетРасчетовСКонтрагентомРегистрацияРеализации
		|ПОМЕСТИТЬ ВТ_ТиповойОбороты
		|ИЗ
		|	РегистрБухгалтерии.Типовой.Обороты(&ДатаНач, &ДатаКон, Авто, Счет = &Счет3132, &ВидыСубконто, Организация = &Организация, , ) КАК ТиповойОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СчетФактуравыданныйДокументыОснования.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ ВТ_СчетаФактуры
		|ИЗ
		|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактуравыданныйДокументыОснования
		|ГДЕ
		|	СчетФактуравыданныйДокументыОснования.ДокументОснование В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ВТ_ТиповойОбороты.Регистратор
		|			ИЗ
		|				ВТ_ТиповойОбороты)
		|	И НЕ СчетФактуравыданныйДокументыОснования.Ссылка.ПометкаУдаления
		|	И СчетФактуравыданныйДокументыОснования.Ссылка.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТиповойОбороты.Регистратор КАК Документ,
		|	ВТ_СчетаФактуры.ДокументОснование КАК ДокументОснованиеДляСФ,
		|	&ДляДокументаОтложитьПринятиеНДСКЗачетуЗарегистрированСчетфактура КАК Ошибка,
		|	ВТ_ТиповойОбороты.ОтложитьНачислениеНДСРегистратор,
		|	ВТ_ТиповойОбороты.СчетРасчетовСКонтрагентомРегистрацияРеализации
		|ИЗ
		|	ВТ_ТиповойОбороты КАК ВТ_ТиповойОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СчетаФактуры КАК ВТ_СчетаФактуры
		|		ПО ВТ_ТиповойОбороты.Регистратор = ВТ_СчетаФактуры.ДокументОснование
		|			И (НЕ ВТ_ТиповойОбороты.Регистратор ССЫЛКА Документ.РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС)
		|			И (ВТ_ТиповойОбороты.ОтложитьНачислениеНДСРегистратор)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ТиповойОбороты.Регистратор,
		|	ВТ_СчетаФактуры.ДокументОснование,
		|	&ДляДокументаРегистрацииОтложенногоНДСНеЗарегистрированСчетфактура,
		|	ВТ_ТиповойОбороты.ОтложитьНачислениеНДСРегистратор,
		|	ВТ_ТиповойОбороты.СчетРасчетовСКонтрагентомРегистрацияРеализации
		|ИЗ
		|	ВТ_ТиповойОбороты КАК ВТ_ТиповойОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаФактуры КАК ВТ_СчетаФактуры
		|		ПО ВТ_ТиповойОбороты.Регистратор = ВТ_СчетаФактуры.ДокументОснование
		|ГДЕ
		|	ВТ_СчетаФактуры.ДокументОснование ЕСТЬ NULL 
		|	И ВТ_ТиповойОбороты.Регистратор ССЫЛКА Документ.РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС
		|	И ВТ_ТиповойОбороты.СчетРасчетовСКонтрагентомРегистрацияРеализации = &Счет3132
		|
		|УПОРЯДОЧИТЬ ПО
		|	Документ
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаНач"     , ПараметрыОтчета.ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон"     , КонецДня(ПараметрыОтчета.ДатаКон));
	Запрос.УстановитьПараметр("Организация" , ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("Счет3132"    , ПланыСчетов.Типовой.НалогНаДобавленнуюСтоимостьОтложенный);
	Запрос.УстановитьПараметр("ПустойСчет"  , ПланыСчетов.Типовой.ПустаяСсылка());
	Запрос.УстановитьПараметр("ДляДокументаОтложитьПринятиеНДСКЗачетуЗарегистрированСчетфактура", НСтр("ru = 'Для документа с признаком ""Отложить принятие НДС к зачету"" зарегистрирован Счет-фактура'"));
	Запрос.УстановитьПараметр("ДляДокументаРегистрацииОтложенногоНДСНеЗарегистрированСчетфактура", НСтр("ru = 'Для документа регистрации отложенного НДС НЕ зарегистрирован Счет-фактура'"));

	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ДокументыРеализации);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаОшибок = РезультатЗапроса.Выгрузить();
	
	ТаблицаОшибок.Колонки.Удалить("ДокументОснованиеДляСФ");
	ТаблицаОшибок.Колонки.Удалить("ОтложитьНачислениеНДСРегистратор");
	ТаблицаОшибок.Колонки.Удалить("СчетРасчетовСКонтрагентомРегистрацияРеализации");
	
	Если ТаблицаОшибок.Количество() > 0 Тогда
		
		СтрокаПравила.ОбнаруженыОшибки  = Истина;
		СтрокаПравила.ПроверкаВыполнена = Истина;		
		
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаСчетовФактурОтложенногоНДСДляУслугТаблицаЗначений", ТаблицаОшибок);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("Документ"            , НСтр("ru = 'Документ'"));
		СтруктураЗаголовков.Вставить("Ошибка"              , НСтр("ru = 'Описание ошибки'"));
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаСчетовФактурОтложенногоНДСДляУслугСтруктураЗаголовков", СтруктураЗаголовков);
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Документ", "Документ");			
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаСчетовФактурОтложенногоНДСДляУслугСтруктураРасшифровки", СтруктураРасшифровки);
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("Документ"            , 80);
		СтруктураШириныКолонок.Вставить("Ошибка"              , 80);
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроверкаСчетовФактурОтложенногоНДСДляУслугСтруктураШириныКолонок", СтруктураШириныКолонок);
		
	Иначе
		
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Регламентные операции
Процедура ПроверитьПравилоОтрицательноеСальдо(СтрокаПравила, ПараметрыОтчета)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТиповойОстаткиИОбороты.Счет КАК Счет,
	|	ТиповойОстаткиИОбороты.Счет.Вид КАК СчетВид,
	|	ТиповойОстаткиИОбороты.Счет.Наименование КАК СчетНаименование,
	|	ТиповойОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СуммаНачальныйОстатокДт,
	|	ТиповойОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СуммаНачальныйОстатокКт,
	|	ТиповойОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКонечныйОстатокДт,
	|	ТиповойОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СуммаКонечныйОстатокКт
	|ИЗ
	|	РегистрБухгалтерии.Типовой.ОстаткиИОбороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			,
	|			НЕ Счет В ИЕРАРХИИ (&СчетаИсключения),
	|			,
	|			Организация В (&Организация)
	|				И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК ТиповойОстаткиИОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Счет
	|АВТОУПОРЯДОЧИВАНИЕ");
	
	Запрос.УстановитьПараметр("ДатаНач", ПараметрыОтчета.ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ПараметрыОтчета.ДатаКон));
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", ПараметрыОтчета.СтруктурноеПодразделение);
	
	СчетаИсключения = Новый Массив;
	СчетаИсключения.Добавить(ПланыСчетов.Типовой.НераспределеннаяПрибыльНепокрытыйУбыток); // 5600
	СчетаИсключения.Добавить(ПланыСчетов.Типовой.ИтоговаяПрибыльИтоговыйУбыток_); // 5700
	Запрос.УстановитьПараметр("СчетаИсключения", СчетаИсключения);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Истина;
		Возврат;
	КонецЕсли;
	
	// Проверим сводные данные по счетам
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("Счет");
	ТаблицаОшибок.Колонки.Добавить("СчетНаименование");
	ТаблицаОшибок.Колонки.Добавить("ОстатокДт");
	ТаблицаОшибок.Колонки.Добавить("ОстатокКт");
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.СчетВид = ВидСчета.АктивноПассивный Тогда
			// не определим "правильную" сторону контроля остатков,
			// поэтому пропустим этот класс счетов
			Продолжить;
		КонецЕсли;
		
		ЕстьОшибка = Ложь;
		Если Выборка.СчетВид = ВидСчета.Активный И Выборка.СуммаКонечныйОстатокДт<0 Тогда
			ЕстьОшибка = Истина;
		КонецЕсли;
		Если Выборка.СчетВид = ВидСчета.Пассивный  И Выборка.СуммаКонечныйОстатокКт<0 Тогда
			ЕстьОшибка = Истина;
		КонецЕсли;
		// Добавим данные в таблицу ошибок
		Если ЕстьОшибка Тогда
			НоваяСтрока = ТаблицаОшибок.Добавить();
			НоваяСтрока.Счет = Выборка.Счет;
			НоваяСтрока.СчетНаименование = Выборка.СчетНаименование;
			НоваяСтрока.ОстатокДт =  Выборка.СуммаКонечныйОстатокДт;
			НоваяСтрока.ОстатокКт =  Выборка.СуммаКонечныйОстатокКт;
		КонецЕсли;
	КонецЦикла;
	
	// обработаем результаты проверки
	Если ТаблицаОшибок.Количество() = 0 Тогда
		СтрокаПравила.ОбнаруженыОшибки      = Ложь;
		СтрокаПравила.ПроверкаВыполнена     = Истина;
	Иначе
		СтрокаПравила.ОбнаруженыОшибки      = Истина;
		СтрокаПравила.ПроверкаВыполнена     = Истина;
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ОтрицательноеСальдоТаблицаЗначений", ТаблицаОшибок);
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("Счет", НСтр("ru = 'Счет'"));
		СтруктураЗаголовков.Вставить("СчетНаименование", НСтр("ru = 'Наименование счета'"));
		СтруктураЗаголовков.Вставить("ОстатокДт", НСтр("ru = 'Остаток Дт'"));
		СтруктураЗаголовков.Вставить("ОстатокКт", НСтр("ru = 'Остаток Кт'"));
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ОтрицательноеСальдоСтруктураЗаголовков", СтруктураЗаголовков);
		
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Счет", "Счет");
		СтруктураРасшифровки.Вставить("СчетНаименование", "Счет");
		СтруктураРасшифровки.Вставить("ОстатокДт", "Счет");
		СтруктураРасшифровки.Вставить("ОстатокКт", "Счет");
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ОтрицательноеСальдоСтруктураРасшифровки", СтруктураРасшифровки);
		
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("Счет", 				20);
		СтруктураШириныКолонок.Вставить("СчетНаименование", 	100);
		СтруктураШириныКолонок.Вставить("ОстатокДт", 		  	50);
		СтруктураШириныКолонок.Вставить("ОстатокКт", 		  	50);
		
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ОтрицательноеСальдоСтруктураШириныКолонок", СтруктураШириныКолонок);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПравилоРеформацияБаланса(СтрокаПравила, ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗакрытиеМесяца.Ссылка КАК Документ,
	               |	КОНЕЦПЕРИОДА(ЗакрытиеМесяца.Дата, МЕСЯЦ) КАК Дата
	               |ИЗ
	               |	Документ.ЗакрытиеМесяца КАК ЗакрытиеМесяца
	               |ГДЕ
	               |	ЗакрытиеМесяца.Дата МЕЖДУ &ДатаНач И &ДатаКон
	               |	И ЗакрытиеМесяца.РеформацияБалансаБУ
	               |	И ЗакрытиеМесяца.Проведен
	               |	И НЕ ЗакрытиеМесяца.ПометкаУдаления
	               |	И ЗакрытиеМесяца.Организация = &Организация
	               |	И ЗакрытиеМесяца.СтруктурноеПодразделение = &СтруктурноеПодразделение";   
				   
	Запрос.УстановитьПараметр("ДатаНач"					, ПараметрыОтчета.ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон"					, КонецДня(ПараметрыОтчета.ДатаКон));
	Запрос.УстановитьПараметр("Организация"				, ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", ПараметрыОтчета.СтруктурноеПодразделение);
		
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		// Проверим были ли введены документы задним числом что
		//образовало остатки на доходных или расходных счетах
		ТаблицаОшибок = Новый ТаблицаЗначений;
		ТаблицаОшибок.Колонки.Добавить("Документ");
		ТаблицаОшибок.Колонки.Добавить("Дата");
		ТаблицаОшибок.Колонки.Добавить("ОстатокНаДоходныхСчетах");
		ТаблицаОшибок.Колонки.Добавить("ОстатокНаРасходныхСчетах");
		
		ЗапросОстатки = Новый Запрос;
		ЗапросОстатки.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |	ТиповойОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток,
		                      |	ТиповойОстаткиИОбороты.Период КАК Период,
		                      |	ВЫБОР
		                      |		КОГДА ТиповойОстаткиИОбороты.Счет В ИЕРАРХИИ (&СчетаДоходов)
		                      |			ТОГДА ""6000""
		                      |		ИНАЧЕ ""7000""
		                      |	КОНЕЦ КАК Счет
		                      |ИЗ
		                      |	РегистрБухгалтерии.Типовой.ОстаткиИОбороты(
		                      |			&ДатаНач,
		                      |			&ДатаКон,
		                      |			Месяц,
		                      |			,
		                      |			Счет В ИЕРАРХИИ (&СчетаДоходов)
		                      |				ИЛИ Счет В ИЕРАРХИИ (&СчетаРасходов),
		                      |			,
		                      |			Организация = &Организация
		                      |				И СтруктурноеПодразделение = &СтруктурноеПодразделение) КАК ТиповойОстаткиИОбороты
		                      |ИТОГИ
		                      |	СУММА(СуммаКонечныйОстаток)
		                      |ПО
		                      |	Период ПЕРИОДАМИ(МЕСЯЦ, &ДатаНач, &ДатаКон),
		                      |	Счет";
					   
		ЗапросОстатки.УстановитьПараметр("ДатаНач"				   , ПараметрыОтчета.ДатаНач);
		ЗапросОстатки.УстановитьПараметр("ДатаКон"				   , КонецДня(ПараметрыОтчета.ДатаКон));
		ЗапросОстатки.УстановитьПараметр("Организация"			   , ПараметрыОтчета.Организация);
		ЗапросОстатки.УстановитьПараметр("СтруктурноеПодразделение", ПараметрыОтчета.СтруктурноеПодразделение);
		
		СчетаДоходов = Новый СписокЗначений;
		СчетаДоходов.Добавить(ПланыСчетов.Типовой.ДоходОтРеализацииПродукцииИОказанияУслуг_);                 // 6000
		СчетаДоходов.Добавить(ПланыСчетов.Типовой.ДоходыОтФинансирования);                                    // 6100
		СчетаДоходов.Добавить(ПланыСчетов.Типовой.ПрочиеДоходы_);                                             // 6200
		СчетаДоходов.Добавить(ПланыСчетов.Типовой.ДоходыСвязанныеСПрекращаемойДеятельностью_);                // 6300
		СчетаДоходов.Добавить(ПланыСчетов.Типовой.ДоляПрибылиОрганизацийУчитываемыхПоМетодуДолевогоУчастия);  // 6400
		ЗапросОстатки.УстановитьПараметр("СчетаДоходов", СчетаДоходов);
		СчетаРасходов = Новый СписокЗначений;
		СчетаРасходов.Добавить(ПланыСчетов.Типовой.СебестоимостьРеализованнойПродукцииИОказанныхУслуг_);       // 7000
		СчетаРасходов.Добавить(ПланыСчетов.Типовой.РасходыПоРеализацииПродукцииИОказаниюУслуг_);               // 7100
		СчетаРасходов.Добавить(ПланыСчетов.Типовой.АдминистративныеРасходы_);                 				   // 7200
		СчетаРасходов.Добавить(ПланыСчетов.Типовой.РасходыНаФинансирование);                 				   // 7300
		СчетаРасходов.Добавить(ПланыСчетов.Типовой.ПрочиеРасходы_);                 						   // 7400
		СчетаРасходов.Добавить(ПланыСчетов.Типовой.РасходыСвязанныеСПрекращаемойДеятельностью_);               // 7500
		СчетаРасходов.Добавить(ПланыСчетов.Типовой.ДоляВУбыткеОрганизацийУчитываемыхМетодомДолевогоУчастия);   // 7600
		СчетаРасходов.Добавить(ПланыСчетов.Типовой.РасходыПоКорпоративномуПодоходномуНалогу_);                 // 7700
		ЗапросОстатки.УстановитьПараметр("СчетаРасходов", СчетаРасходов);

		РезультатЗапросаОстатки = ЗапросОстатки.Выполнить();
		
		ВыборкаЗапросаОстатки = РезультатЗапросаОстатки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		ВыборкаДокументов = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаДокументов.Следующий() Цикл
			
			Документ   = ВыборкаДокументов.Документ;
			ДатаКонМес = ВыборкаДокументов.Дата;
			
			ВыборкаЗапросаОстатки.Сбросить();
			Пока ВыборкаЗапросаОстатки.Следующий() Цикл
				
				Если НачалоМесяца(ДатаКонМес) = ВыборкаЗапросаОстатки.Период Тогда
					
					ВыборкаПериода = ВыборкаЗапросаОстатки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					ОстатокРасх = 0;
					ОстатокДох = 0;
					Пока ВыборкаПериода.Следующий() Цикл
						Если ВыборкаПериода.Счет = "7000" И НЕ (ВыборкаПериода.СуммаКонечныйОстаток =0 ИЛИ  ВыборкаПериода.СуммаКонечныйОстаток = NULL) Тогда
							//есть остатки на расходных счетах
							ОстатокРасх = ВыборкаПериода.СуммаКонечныйОстаток;
						ИначеЕсли ВыборкаПериода.Счет = "6000" И НЕ (ВыборкаПериода.СуммаКонечныйОстаток =0 ИЛИ  ВыборкаПериода.СуммаКонечныйОстаток = NULL) Тогда
							ОстатокДох = ВыборкаПериода.СуммаКонечныйОстаток;
						КонецЕсли;					
					КонецЦикла;
					Если ОстатокРасх <> 0 ИЛИ ОстатокДох <> 0 Тогда
						НовСтрока = ТаблицаОшибок.Добавить();
						НовСтрока.Документ                 = Документ; 
						НовСтрока.Дата                     = ДатаКонМес; 
						НовСтрока.ОстатокНаДоходныхСчетах  = ОстатокДох; 
						НовСтрока.ОстатокНаРасходныхСчетах = ОстатокРасх; 
					КонецЕсли;
					
					Прервать;
				КонецЕсли;				
				
			КонецЦикла;      			
			
		КонецЦикла;         		 
		
		// обработаем результаты проверки
		Если ТаблицаОшибок.Количество() = 0 Тогда
			СтрокаПравила.ОбнаруженыОшибки      = Ложь;
			СтрокаПравила.ПроверкаВыполнена     = Истина;
		Иначе
			СтрокаПравила.ОбнаруженыОшибки      = Истина;
			СтрокаПравила.ПроверкаВыполнена     = Истина;
			ПараметрыОтчета.ИсходящиеДанные.Вставить("РеформацияБалансаТаблицаЗначений", ТаблицаОшибок);
			СтруктураЗаголовков = Новый Структура;
			СтруктураЗаголовков.Вставить("Документ", НСтр("ru = 'Документ закрытия месяца'"));
			СтруктураЗаголовков.Вставить("Дата", НСтр("ru = 'Дата конца месяца реформации баланса'"));
			СтруктураЗаголовков.Вставить("ОстатокНаДоходныхСчетах",  НСтр("ru = 'Остаток на доходных счетах'"));
			СтруктураЗаголовков.Вставить("ОстатокНаРасходныхСчетах", НСтр("ru = 'Остаток на расходных счетах'"));			
			ПараметрыОтчета.ИсходящиеДанные.Вставить("РеформацияБалансаСтруктураЗаголовков", СтруктураЗаголовков);
			СтруктураРасшифровки = Новый Структура;
			СтруктураРасшифровки.Вставить("Документ", "Документ");
			ПараметрыОтчета.ИсходящиеДанные.Вставить("РеформацияБалансаСтруктураРасшифровки", СтруктураРасшифровки);
			СтруктураШириныКолонок = Новый Структура;
			СтруктураШириныКолонок.Вставить("Документ",	 				40);
			СтруктураШириныКолонок.Вставить("Дата", 					30);
			ПараметрыОтчета.ИсходящиеДанные.Вставить("РеформацияБалансаСтруктураШириныКолонок", СтруктураШириныКолонок);	
		КонецЕсли;
		
	Иначе
		
		СтрокаПравила.ОбнаруженыОшибки      = Ложь;
		СтрокаПравила.ПроверкаВыполнена     = Истина;
		СтрокаПравила.КомментарийРезультата = "Реформация баланса не была произведена в период проверки.";
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьПравилоРеформацияБаланса()

Процедура ПроверитьПравилоКорректностьПроводки(СтрокаПравила, ПараметрыОтчета)
	
    Запрос = Новый Запрос;
    Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
                   |	ТиповойОбороты.Регистратор,
                   |	ТиповойОбороты.СчетДт,
                   |	ТиповойОбороты.СчетКт,
                   |	ТиповойОбороты.СуммаОборот КАК Сумма,
                   |	ВЫБОР
                   |		КОГДА ТиповойОбороты.СчетДт.ЗапретитьИспользоватьВПроводках
                   |				И ТиповойОбороты.СчетКт.ЗапретитьИспользоватьВПроводках
                   |			ТОГДА ""Проводка""
                   |		КОГДА ТиповойОбороты.СчетДт.ЗапретитьИспользоватьВПроводках
                   |			ТОГДА ТиповойОбороты.СчетДт
                   |		ИНАЧЕ ТиповойОбороты.СчетКт
                   |	КОНЕЦ КАК ЗапретныйСчет
                   |ИЗ
                   |	РегистрБухгалтерии.Типовой.ОборотыДтКт(
                   |			&ДатаНач,
                   |			&ДатаКон,
                   |			Регистратор,
                   |			,
                   |			,
                   |			,
                   |			,
                   |			Организация = &Организация
                   |				И СтруктурноеПодразделениеДт = &СтруктурноеПодразделениеДт
                   |				И СтруктурноеПодразделениеКт = &СтруктурноеПодразделениеКт) КАК ТиповойОбороты
                   |ГДЕ
                   |	(ТиповойОбороты.СчетДт.ЗапретитьИспользоватьВПроводках
                   |			ИЛИ ТиповойОбороты.СчетКт.ЗапретитьИспользоватьВПроводках)";   
    			   
    Запрос.УстановитьПараметр("ДатаНач"					  , ПараметрыОтчета.ДатаНач);
    Запрос.УстановитьПараметр("ДатаКон"					  , КонецДня(ПараметрыОтчета.ДатаКон));
    Запрос.УстановитьПараметр("Организация"				  , ПараметрыОтчета.Организация);
    Запрос.УстановитьПараметр("СтруктурноеПодразделениеДт", ПараметрыОтчета.СтруктурноеПодразделение);
    Запрос.УстановитьПараметр("СтруктурноеПодразделениеКт", ПараметрыОтчета.СтруктурноеПодразделение);
    
    Результат = Запрос.Выполнить();

    СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
    СтрокаПравила.ПроверкаВыполнена = Истина;
    
    ТаблицаОшибок = Новый ТаблицаЗначений;
    ТаблицаОшибок.Колонки.Добавить("Регистратор");
    ТаблицаОшибок.Колонки.Добавить("СчетДт");
    ТаблицаОшибок.Колонки.Добавить("СчетКт");
    ТаблицаОшибок.Колонки.Добавить("Сумма");
    ТаблицаОшибок.Колонки.Добавить("ЗапретныйСчет");
        
    Если СтрокаПравила.ОбнаруженыОшибки Тогда
    	Выборка = Результат.Выбрать();
    	Пока Выборка.Следующий() Цикл
    		СтрокаОшибки = ТаблицаОшибок.Добавить();
    		ЗаполнитьЗначенияСвойств(СтрокаОшибки, Выборка);
    		Если Выборка.ЗапретныйСчет = "Проводка" Тогда
    			СтрокаОшибки.ЗапретныйСчет = "" + Выборка.СчетДт + ", " + Выборка.СчетКт;
    		КонецЕсли;  			
    	КонецЦикла;
    	
    	ПараметрыОтчета.ИсходящиеДанные.Вставить("КорректностьПроводкиТаблицаЗначений", ТаблицаОшибок);		
    	СтруктураЗаголовков = Новый Структура;
    	СтруктураЗаголовков.Вставить("Регистратор", НСтр("ru = 'Документ'"));
    	СтруктураЗаголовков.Вставить("СчетДт",       НСтр("ru = 'Счет Дт'"));
    	СтруктураЗаголовков.Вставить("СчетКт",      НСтр("ru = 'Счет Кт'"));
    	СтруктураЗаголовков.Вставить("Сумма",   НСтр("ru = 'Сумма проводки'"));
    	СтруктураЗаголовков.Вставить("ЗапретныйСчет", НСтр("ru = 'Счет, который запрещено использовать в проводках'"));
    	ПараметрыОтчета.ИсходящиеДанные.Вставить("КорректностьПроводкиСтруктураЗаголовков", СтруктураЗаголовков);
    	
    	
    	СтруктураШириныКолонок = Новый Структура;
    	СтруктураШириныКолонок.Вставить("Регистратор" ,    60);
    	СтруктураШириныКолонок.Вставить("СчетДт"      ,    30);
    	СтруктураШириныКолонок.Вставить("СчетКт"      ,    30);
    	СтруктураШириныКолонок.Вставить("Сумма"       ,    30);
    	СтруктураШириныКолонок.Вставить("ЗапретныйСчет"  , 40);
    	ПараметрыОтчета.ИсходящиеДанные.Вставить("КорректностьПроводкиСтруктураШириныКолонок", СтруктураШириныКолонок);
    	
    	СтруктураРасшифровки = Новый Структура;
    	СтруктураРасшифровки.Вставить("Регистратор", "Регистратор");
    	ПараметрыОтчета.ИсходящиеДанные.Вставить("КорректностьПроводкиСтруктураРасшифровки", СтруктураРасшифровки);

   КонецЕсли;
	
КонецПроцедуры // ПроверитьПравилоКорректностьПроводки()

//ОС и НМА

Процедура ПроверитьПравилоПринятиеКУчетуОС(СтрокаПравила, ПараметрыОтчета)
	
	Запрос = Новый Запрос;
		
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
	               |	МАКСИМУМ(СостоянияОСОрганизаций.ДатаСостояния) КАК ДатаСостояния
	               |ПОМЕСТИТЬ ТекДатаСостояния
	               |ИЗ
	               |	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	               |ГДЕ
	               |	СостоянияОСОрганизаций.ДатаСостояния <= &ДатаКон
	               |	И СостоянияОСОрганизаций.Организация = &Организация
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СостоянияОСОрганизаций.ОсновноеСредство
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОсновноеСредство,
	               |	ДатаСостояния
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
	               |	ТекДатаСостояния.ДатаСостояния КАК ДатаСостояния,
	               |	МАКСИМУМ(СостоянияОСОрганизаций.Регистратор) КАК Регистратор
	               |ПОМЕСТИТЬ ТекРегистратор
	               |ИЗ
	               |	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТекДатаСостояния КАК ТекДатаСостояния
	               |		ПО СостоянияОСОрганизаций.ОсновноеСредство = ТекДатаСостояния.ОсновноеСредство
	               |			И СостоянияОСОрганизаций.ДатаСостояния = ТекДатаСостояния.ДатаСостояния
	               |ГДЕ
	               |	СостоянияОСОрганизаций.Организация = &Организация
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СостоянияОСОрганизаций.ОсновноеСредство,
	               |	ТекДатаСостояния.ДатаСостояния
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОсновноеСредство,
	               |	ДатаСостояния
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СостояниеОС.ОсновноеСредство КАК ОсновноеСредство,
	               |	СостояниеОС.Состояние КАК Состояние,
	               |	ТекРегистратор.ДатаСостояния КАК ДатаСостояния,
	               |	ТекРегистратор.Регистратор КАК Регистратор
	               |ПОМЕСТИТЬ ТекущееСостояние
	               |ИЗ
	               |	РегистрСведений.СостоянияОСОрганизаций КАК СостояниеОС
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТекРегистратор КАК ТекРегистратор
	               |		ПО СостояниеОС.ОсновноеСредство = ТекРегистратор.ОсновноеСредство
	               |			И СостояниеОС.Регистратор = ТекРегистратор.Регистратор
	               |			И СостояниеОС.ДатаСостояния = ТекРегистратор.ДатаСостояния
	               |ГДЕ
	               |	СостояниеОС.Организация = &Организация
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОсновноеСредство
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТиповойОстатки.Субконто1 КАК ОС,
	               |	ТиповойОстатки.СуммаОстатокДт КАК СтоимостьБУ,
	               |	ВЫБОР
	               |		КОГДА ТекущееСостояние.Состояние ЕСТЬ NULL 
	               |			ТОГДА ""Не определено""
	               |		ИНАЧЕ ТекущееСостояние.Состояние
	               |	КОНЕЦ КАК Состояние,
	               |	ТекущееСостояние.Регистратор
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.Остатки(&КонГраница, Счет В ИЕРАРХИИ (&СчетаУчетаОС), &ВидСубконто, Организация = &Организация) КАК ТиповойОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТекущееСостояние КАК ТекущееСостояние
	               |		ПО ТиповойОстатки.Субконто1 = ТекущееСостояние.ОсновноеСредство
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА ТиповойОстатки.СуммаОстатокДт <> 0
	               |					И ЕСТЬNULL(ТекущееСостояние.Состояние, """") <> ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.ПринятоКУчету)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ОС";

	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ДатаКон"	   , КонецДня(ПараметрыОтчета.ДатаКон));
	Запрос.УстановитьПараметр("КонГраница" , Новый Граница(КонецДня(ПараметрыОтчета.ДатаКон), ВидГраницы.Включая));
		
	СчетаУчетаОС = Новый СписокЗначений;
	СчетаУчетаОС.Добавить(ПланыСчетов.Типовой.ОсновныеСредства);
	СчетаУчетаОС.Добавить(ПланыСчетов.Типовой.ИнвестицииВНедвижимость);
	СчетаУчетаОС.Добавить(ПланыСчетов.Типовой.АрендованныеОсновныеСредства);
	
	Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);
	Запрос.УстановитьПараметр("СчетаУчетаОС", СчетаУчетаОС);
	
	Результат = Запрос.Выполнить();
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
		
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПринятиеКУчетуОСРезультатЗапроса", Результат);		
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ОС", 			НСтр("ru = 'Основное средство'"));
		СтруктураЗаголовков.Вставить("СтоимостьБУ", НСтр("ru = 'Стоимость'"));
		СтруктураЗаголовков.Вставить("Состояние",   НСтр("ru = 'Текущее состояние'"));
		СтруктураЗаголовков.Вставить("Регистратор", НСтр("ru = 'Регистратор состояния'"));
		
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПринятиеКУчетуОССтруктураЗаголовков", СтруктураЗаголовков);
		
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ОС", 		 "ОС");
		СтруктураРасшифровки.Вставить("СтоимостьБУ", "ОС");
		СтруктураРасшифровки.Вставить("Состояние", 	 "Регистратор");
		СтруктураРасшифровки.Вставить("Регистратор", "Регистратор");
		
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПринятиеКУчетуОССтруктураРасшифровки", СтруктураРасшифровки);

	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоСнятиеСУчетаОС(СтрокаПравила, ПараметрыОтчета)
	
	Запрос = Новый Запрос;
		
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
	               |	МАКСИМУМ(СостоянияОСОрганизаций.ДатаСостояния) КАК ДатаСостояния
	               |ПОМЕСТИТЬ ТекДатаСостояния
	               |ИЗ
	               |	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	               |ГДЕ
	               |	СостоянияОСОрганизаций.ДатаСостояния <= &ДатаКон
	               |	И СостоянияОСОрганизаций.Организация = &Организация
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СостоянияОСОрганизаций.ОсновноеСредство
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОсновноеСредство,
	               |	ДатаСостояния
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
	               |	ТекДатаСостояния.ДатаСостояния КАК ДатаСостояния,
	               |	МАКСИМУМ(СостоянияОСОрганизаций.Регистратор) КАК Регистратор
	               |ПОМЕСТИТЬ ТекРегистратор
	               |ИЗ
	               |	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТекДатаСостояния КАК ТекДатаСостояния
	               |		ПО СостоянияОСОрганизаций.ОсновноеСредство = ТекДатаСостояния.ОсновноеСредство
	               |			И СостоянияОСОрганизаций.ДатаСостояния = ТекДатаСостояния.ДатаСостояния
	               |ГДЕ
	               |	СостоянияОСОрганизаций.Организация = &Организация
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СостоянияОСОрганизаций.ОсновноеСредство,
	               |	ТекДатаСостояния.ДатаСостояния
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОсновноеСредство,
	               |	ДатаСостояния
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СостояниеОС.ОсновноеСредство КАК ОсновноеСредство,
	               |	СостояниеОС.Состояние КАК Состояние,
	               |	ТекРегистратор.ДатаСостояния КАК ДатаСостояния,
	               |	ТекРегистратор.Регистратор КАК Регистратор
	               |ПОМЕСТИТЬ ТекущееСостояние
	               |ИЗ
	               |	РегистрСведений.СостоянияОСОрганизаций КАК СостояниеОС
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТекРегистратор КАК ТекРегистратор
	               |		ПО СостояниеОС.ОсновноеСредство = ТекРегистратор.ОсновноеСредство
	               |			И СостояниеОС.Регистратор = ТекРегистратор.Регистратор
	               |			И СостояниеОС.ДатаСостояния = ТекРегистратор.ДатаСостояния
	               |ГДЕ
	               |	СостояниеОС.Организация = &Организация
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОсновноеСредство
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТекущееСостояние.ОсновноеСредство КАК ОС,
	               |	ТекущееСостояние.Состояние,
	               |	ТекущееСостояние.Регистратор
	               |ИЗ
	               |	ТекущееСостояние КАК ТекущееСостояние
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(&КонГраница, Счет В ИЕРАРХИИ (&СчетаУчетаОС), &ВидСубконто, Организация = &Организация) КАК ТиповойОстатки
	               |		ПО ТекущееСостояние.ОсновноеСредство = ТиповойОстатки.Субконто1 
				   |        ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(&КонГраница, Счет В ИЕРАРХИИ (&СчетаУчетаАмортизацииОС), &ВидСубконто, Организация = &Организация) КАК ТиповойОстаткиАмортизации
				   |        ПО (ТекущееСостояние.ОсновноеСредство = ТиповойОстаткиАмортизации.Субконто1) 
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА ТекущееСостояние.Состояние <> ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.СнятоСУчета)
	               |					И ТекущееСостояние.Состояние <> ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.Поступило)
	               |					И ЕСТЬNULL(ТиповойОстатки.СуммаОстатокДт, 0) <= ТиповойОстаткиАмортизации.СуммаОстатокКт
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ОС";

	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ДатаКон"	   , КонецДня(ПараметрыОтчета.ДатаКон));
	Запрос.УстановитьПараметр("КонГраница" , Новый Граница(КонецДня(ПараметрыОтчета.ДатаКон), ВидГраницы.Включая));
		
	СчетаУчетаОС = Новый СписокЗначений;
	СчетаУчетаОС.Добавить(ПланыСчетов.Типовой.ОсновныеСредства);
	СчетаУчетаОС.Добавить(ПланыСчетов.Типовой.ИнвестицииВНедвижимость);
	СчетаУчетаОС.Добавить(ПланыСчетов.Типовой.АрендованныеОсновныеСредства);
	
	СчетаУчетаАмортизацииОС = Новый СписокЗначений;
	СчетаУчетаАмортизацииОС.Добавить(ПланыСчетов.Типовой.АмортизацияОсновныхСредств);
	СчетаУчетаАмортизацииОС.Добавить(ПланыСчетов.Типовой.АмортизацияИнвестицийВНедвижимость);
	СчетаУчетаАмортизацииОС.Добавить(ПланыСчетов.Типовой.АмортизацияАрендованныхОсновныхСредств);
	
	Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);
	Запрос.УстановитьПараметр("СчетаУчетаОС", СчетаУчетаОС);
	Запрос.УстановитьПараметр("СчетаУчетаАмортизацииОС", СчетаУчетаАмортизацииОС);
	
	Результат = Запрос.Выполнить();
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;

	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ПараметрыОтчета.ИсходящиеДанные.Вставить("СнятиеСУчетаОСРезультатЗапроса", Результат);		
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ОС",			НСтр("ru = 'Основное средство'"));
		СтруктураЗаголовков.Вставить("Состояние",   НСтр("ru = 'Текущее состояние'"));
		СтруктураЗаголовков.Вставить("Регистратор", НСтр("ru = 'Регистратор состояния'"));
		
		ПараметрыОтчета.ИсходящиеДанные.Вставить("СнятиеСУчетаОССтруктураЗаголовков", СтруктураЗаголовков);
		
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ОС",			"ОС");
		СтруктураРасшифровки.Вставить("Состояние", 	"Регистратор");
		СтруктураРасшифровки.Вставить("Регистратор","Регистратор");
		
		ПараметрыОтчета.ИсходящиеДанные.Вставить("СнятиеСУчетаОССтруктураРасшифровки", СтруктураРасшифровки);

	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоСоответствиеМестонахожденияНаСчетахИРегистрах(СтрокаПравила, ПараметрыОтчета)
	
	ВедетсяАналитУчетОсПоПодразделениям = УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоПодразделениям(ПараметрыОтчета.ДатаКон);
	ВедетсяАналитУчетОсПоМОЛ = УправлениеВнеоборотнымиАктивамиСервер.ВедетсяАналитическийУчетОСПоМОЛ(ПараметрыОтчета.ДатаКон);
	
	Если Не (ВедетсяАналитУчетОсПоМОЛ Или ВедетсяАналитУчетОсПоПодразделениям) Тогда
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Истина;
		Возврат;
	КонецЕсли;	
		
	Запрос = Новый Запрос;
		
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
	               |ПОМЕСТИТЬ ВТ_ОС_СнятыеСУчета
	               |ИЗ
	               |	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизацииСрезПоследних
	               |ГДЕ
	               |	СостоянияОСОрганизацииСрезПоследних.ДатаСостояния < &Дата
	               |	И СостоянияОСОрганизацииСрезПоследних.Организация = &Организация
	               |	И СостоянияОСОрганизацииСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийОС.СнятоСУчета)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОсновноеСредство
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОС,
	               |	СчетаУчетаОССрезПоследних.СчетУчетаБУ,
	               |	СчетаУчетаОССрезПоследних.СчетНачисленияАмортизацииБУ,
	               |	ВЫБОР
	               |		КОГДА ОС_СнятыеСУчета.ОсновноеСредство ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК СнятоСУчета
	               |ПОМЕСТИТЬ СписокОС
	               |ИЗ
	               |	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&Дата, Организация = &Организация) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаОС.СрезПоследних КАК СчетаУчетаОССрезПоследних
	               |		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СчетаУчетаОССрезПоследних.ОсновноеСредство
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОС_СнятыеСУчета КАК ОС_СнятыеСУчета
	               |		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ОС_СнятыеСУчета.ОсновноеСредство
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОС
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СписокОС.ОС КАК ОС,
	               |	СписокОС.СчетУчетаБУ КАК СчетУчетаБУ,
				   |	ТиповойОстатки.Субконто2 " + ?(ВедетсяАналитУчетОсПоПодразделениям, " КАК ПодразделениеСтоимость ", " КАК МОЛСтоимость ") + 
	               ?(ВедетсяАналитУчетОсПоПодразделениям И ВедетсяАналитУчетОсПоМОЛ, ",
				   |	ТиповойОстатки.Субконто3 КАК МОЛСтоимость ", "") + "
	               |ПОМЕСТИТЬ ОстаткиСтоимостьБУ
	               |ИЗ
	               |	СписокОС КАК СписокОС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(&КонГраница, , &ВидыСубконто, Организация = &Организация) КАК ТиповойОстатки
	               |		ПО СписокОС.ОС = ТиповойОстатки.Субконто1
	               |			И СписокОС.СчетУчетаБУ = ТиповойОстатки.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СписокОС.ОС,
	               |	СписокОС.СчетНачисленияАмортизацииБУ КАК СчетНачисленияАмортизацииБУ,
				   |	ТиповойОстатки.Субконто2 " + ?(ВедетсяАналитУчетОсПоПодразделениям, " КАК ПодразделениеАмортизация ", " КАК МОЛАмортизация ") + 
	               ?(ВедетсяАналитУчетОсПоПодразделениям И ВедетсяАналитУчетОсПоМОЛ, ",
				   |	ТиповойОстатки.Субконто3 КАК МОЛАмортизация ", "") + "
				   |ПОМЕСТИТЬ ОстаткиАмортизацияБУ
	               |ИЗ
	               |	СписокОС КАК СписокОС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Типовой.Остатки(&КонГраница, , &ВидыСубконто, Организация = &Организация) КАК ТиповойОстатки
	               |		ПО СписокОС.ОС = ТиповойОстатки.Субконто1
	               |			И СписокОС.СчетНачисленияАмортизацииБУ = ТиповойОстатки.Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СписокОС.ОС КАК ОС,
	               |	ОстаткиСтоимостьБУ.СчетУчетаБУ КАК СчетУчетаБУ, 
				   |	ОстаткиАмортизацияБУ.СчетНачисленияАмортизацииБУ КАК СчетНачисленияАмортизацииБУ " + 
	               ?(ВедетсяАналитУчетОсПоПодразделениям, ",
				   |	ОстаткиСтоимостьБУ.ПодразделениеСтоимость КАК ПодразделениеСтоимость,
				   |	ОстаткиАмортизацияБУ.ПодразделениеАмортизация КАК ПодразделениеАмортизация,
				   |	МестонахождениеОС.Местонахождение КАК ПодразделениеМестонахождение ", "") + 
				   ?(ВедетсяАналитУчетОсПоМОЛ, ",
	               |	ОстаткиСтоимостьБУ.МОЛСтоимость КАК МОЛСтоимость,
	               |	ОстаткиАмортизацияБУ.МОЛАмортизация КАК МОЛАмортизация,
				   |	МестонахождениеОС.МОЛ КАК МОЛМестонахождение ", "") + "
	               |ИЗ
	               |	СписокОС КАК СписокОС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиСтоимостьБУ КАК ОстаткиСтоимостьБУ
	               |		ПО СписокОС.ОС = ОстаткиСтоимостьБУ.ОС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиАмортизацияБУ КАК ОстаткиАмортизацияБУ
	               |		ПО СписокОС.ОС = ОстаткиАмортизацияБУ.ОС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&Дата, Организация = &Организация) КАК МестонахождениеОС
	               |		ПО СписокОС.ОС = МестонахождениеОС.ОсновноеСредство
	               |ГДЕ
	               |	СписокОС.СнятоСУчета = ЛОЖЬ И " + 
				   ?(ВедетсяАналитУчетОсПоПодразделениям, "
				   |	(ОстаткиСтоимостьБУ.ПодразделениеСтоимость <> МестонахождениеОС.Местонахождение
	               |			ИЛИ ОстаткиАмортизацияБУ.ПодразделениеАмортизация <> МестонахождениеОС.Местонахождение", "") +
				   ?(ВедетсяАналитУчетОсПоПодразделениям И Не ВедетсяАналитУчетОсПоМОЛ, " ) ", "") + 
				   ?(ВедетсяАналитУчетОсПоПодразделениям И ВедетсяАналитУчетОсПоМОЛ, " ИЛИ ", "") + 
				   ?(Не ВедетсяАналитУчетОсПоПодразделениям И ВедетсяАналитУчетОсПоМОЛ, " ( ", "") + 
				   ?(ВедетсяАналитУчетОсПоМОЛ, "
	               |	ОстаткиСтоимостьБУ.МОЛСтоимость <> МестонахождениеОС.МОЛ
	               |			ИЛИ ОстаткиАмортизацияБУ.МОЛАмортизация <> МестонахождениеОС.МОЛ)", "");
				   
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("Дата"	   , КонецДня(ПараметрыОтчета.ДатаКон));
	Запрос.УстановитьПараметр("КонГраница" , Новый Граница(КонецДня(ПараметрыОтчета.ДатаКон), ВидГраницы.Включая));
	 
	МассивВидыСубконто = Новый Массив;
	МассивВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.ОсновныеСредства);
	Если ВедетсяАналитУчетОсПоПодразделениям Тогда
		МассивВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Подразделения);
	КонецЕсли;
	
	Если ВедетсяАналитУчетОсПоМОЛ Тогда
		МассивВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.РаботникиОрганизаций);
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ВидыСубконто", МассивВидыСубконто);
		
	Результат = Запрос.Выполнить();
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;

	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ПараметрыОтчета.ИсходящиеДанные.Вставить("СоответствиеМестонахожденияНаСчетахИРегистрахРезультатЗапроса", Результат);		
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ОС",							 НСтр("ru = 'Основное средство'"));
		СтруктураЗаголовков.Вставить("СчетУчетаБУ",					 НСтр("ru = 'Счет учета ОС'"));
		СтруктураЗаголовков.Вставить("ПодразделениеСтоимость",		 НСтр("ru = 'Подразделение (стоим.)'"));
		СтруктураЗаголовков.Вставить("МОЛСтоимость",				 НСтр("ru = 'МОЛ (стоим.)'"));
		СтруктураЗаголовков.Вставить("СчетНачисленияАмортизацииБУ",	 НСтр("ru = 'Счет начисл. амортизации'"));
		СтруктураЗаголовков.Вставить("ПодразделениеАмортизация",	 НСтр("ru = 'Подразделение (амортиз.)'"));
		СтруктураЗаголовков.Вставить("МОЛАмортизация",				 НСтр("ru = 'МОЛ (амортиз.)'"));
		СтруктураЗаголовков.Вставить("ПодразделениеМестонахождение", НСтр("ru = 'Подразделение (рег. свед.)'"));
		СтруктураЗаголовков.Вставить("МОЛМестонахождение",			 НСтр("ru = 'МОЛ (рег. свед.)'"));
	                             	    
		ПараметрыОтчета.ИсходящиеДанные.Вставить("СоответствиеМестонахожденияНаСчетахИРегистрахСтруктураЗаголовков", СтруктураЗаголовков);
		
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ОС",							 "ОС");
		СтруктураРасшифровки.Вставить("СчетУчетаБУ",				 "СчетУчетаБУ");
		СтруктураРасшифровки.Вставить("ПодразделениеСтоимость",		 "ПодразделениеСтоимость");
		СтруктураРасшифровки.Вставить("МОЛСтоимость",				 "МОЛСтоимость");
		СтруктураРасшифровки.Вставить("СчетНачисленияАмортизацииБУ", "СчетНачисленияАмортизацииБУ");
		СтруктураРасшифровки.Вставить("ПодразделениеАмортизация",	 "ПодразделениеАмортизация)");
		СтруктураРасшифровки.Вставить("МОЛАмортизация",				 "МОЛАмортизация");
		СтруктураРасшифровки.Вставить("ПодразделениеМестонахождение","ПодразделениеМестонахождение");
		СтруктураРасшифровки.Вставить("МОЛМестонахождение",			 "МОЛМестонахождение");
	    
		ПараметрыОтчета.ИсходящиеДанные.Вставить("СоответствиеМестонахожденияНаСчетахИРегистрахСтруктураРасшифровки", СтруктураРасшифровки);
		
	КонецЕсли; 
	
КонецПроцедуры

//Взаиморасчеты с контрагентами

Процедура ПроверитьПравилоАктыВыполненныхРабот(СтрокаПравила, ПараметрыОтчета)
	
	Запрос = Новый Запрос;
		
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровУслуг.Ссылка КАК Документ,
	|	РеализацияТоваровУслуг.Дата КАК Дата,
	|	ЕСТЬNULL(СведенияПоАктамВыполненныхРабот.ДатаПодписания, &ПустаяДата) КАК ДатаПодписанияПоДаннымРегистра,
	|	ЭлектронныйАктВыполненныхРабот.Ссылка КАК ЭАВР,
	|	ЭлектронныйАктВыполненныхРабот.ДатаПодписиПолучателя КАК ДатаПодписиЭАВР
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйАктВыполненныхРабот КАК ЭлектронныйАктВыполненныхРабот
	|		ПО (РеализацияТоваровУслуг.Ссылка = ЭлектронныйАктВыполненныхРабот.ДокументОснование)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияПоАктамВыполненныхРабот КАК СведенияПоАктамВыполненныхРабот
	|		ПО (РеализацияТоваровУслуг.Ссылка = СведенияПоАктамВыполненныхРабот.ДокументРеализацииУслуг)
	|ГДЕ
	|	РеализацияТоваровУслуг.ПометкаУдаления = ЛОЖЬ
	|	И РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И РеализацияТоваровУслуг.СпособВыпискиАктовВыполненныхРабот = &НаПорталеИСЭСФ
	|	И РеализацияТоваровУслуг.Организация = &Организация
	|	И НАЧАЛОПЕРИОДА(ЕСТЬNULL(СведенияПоАктамВыполненныхРабот.ДатаПодписания, &ПустаяДата), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ЭлектронныйАктВыполненныхРабот.ДатаПодписиПолучателя, ДЕНЬ)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	АктОбОказанииПроизводственныхУслуг.Ссылка,
	|	АктОбОказанииПроизводственныхУслуг.Дата,
	|	ЕСТЬNULL(СведенияПоАктамВыполненныхРабот.ДатаПодписания, &ПустаяДата),
	|	ЭлектронныйАктВыполненныхРабот.Ссылка,
	|	ЭлектронныйАктВыполненныхРабот.ДатаПодписиПолучателя
	|ИЗ
	|	Документ.АктОбОказанииПроизводственныхУслуг КАК АктОбОказанииПроизводственныхУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйАктВыполненныхРабот КАК ЭлектронныйАктВыполненныхРабот
	|		ПО АктОбОказанииПроизводственныхУслуг.Ссылка = ЭлектронныйАктВыполненныхРабот.ДокументОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияПоАктамВыполненныхРабот КАК СведенияПоАктамВыполненныхРабот
	|		ПО (АктОбОказанииПроизводственныхУслуг.Ссылка = СведенияПоАктамВыполненныхРабот.ДокументРеализацииУслуг)
	|ГДЕ
	|	АктОбОказанииПроизводственныхУслуг.ПометкаУдаления = ЛОЖЬ
	|	И АктОбОказанииПроизводственныхУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И АктОбОказанииПроизводственныхУслуг.СпособВыпискиАктовВыполненныхРабот = &НаПорталеИСЭСФ
	|	И АктОбОказанииПроизводственныхУслуг.Организация = &Организация
	|	И НАЧАЛОПЕРИОДА(ЕСТЬNULL(СведенияПоАктамВыполненныхРабот.ДатаПодписания, &ПустаяДата), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ЭлектронныйАктВыполненныхРабот.ДатаПодписиПолучателя, ДЕНЬ)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РеализацияУслугПоПереработке.Ссылка,
	|	РеализацияУслугПоПереработке.Дата,
	|	ЕСТЬNULL(СведенияПоАктамВыполненныхРабот.ДатаПодписания, &ПустаяДата),
	|	ЭлектронныйАктВыполненныхРабот.Ссылка,
	|	ЭлектронныйАктВыполненныхРабот.ДатаПодписиПолучателя
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке КАК РеализацияУслугПоПереработке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйАктВыполненныхРабот КАК ЭлектронныйАктВыполненныхРабот
	|		ПО РеализацияУслугПоПереработке.Ссылка = ЭлектронныйАктВыполненныхРабот.ДокументОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияПоАктамВыполненныхРабот КАК СведенияПоАктамВыполненныхРабот
	|		ПО (РеализацияУслугПоПереработке.Ссылка = СведенияПоАктамВыполненныхРабот.ДокументРеализацииУслуг)
	|ГДЕ
	|	РеализацияУслугПоПереработке.ПометкаУдаления = ЛОЖЬ
	|	И РеализацияУслугПоПереработке.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И РеализацияУслугПоПереработке.СпособВыпискиАктовВыполненныхРабот = &НаПорталеИСЭСФ
	|	И РеализацияУслугПоПереработке.Организация = &Организация
	|	И НАЧАЛОПЕРИОДА(ЕСТЬNULL(СведенияПоАктамВыполненныхРабот.ДатаПодписания, &ПустаяДата), ДЕНЬ) <> НАЧАЛОПЕРИОДА(ЭлектронныйАктВыполненныхРабот.ДатаПодписиПолучателя, ДЕНЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Документ
	|АВТОУПОРЯДОЧИВАНИЕ";	
	
	Запрос.УстановитьПараметр("ДатаНач", 				  ПараметрыОтчета.ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", 				  КонецДня(ПараметрыОтчета.ДатаКон));
	Запрос.УстановитьПараметр("Организация", 			  ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("СтатусЭАВР", 			  Перечисления.СтатусыАВР.Подтвержденный);
	Запрос.УстановитьПараметр("НаПорталеИСЭСФ", 		  Перечисления.СпособыВыпискиАктовВыполненныхРабот.НаПорталеИСЭСФ);
	Запрос.УстановитьПараметр("ПустаяДата",     		  '00010101000000');

	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ПараметрыОтчета.ИсходящиеДанные.Вставить("АктыВыполненныхРаботРезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ДатаПодписанияПоДаннымРегистра", НСтр("ru = 'Дата подписания'"));
	 	СтруктураЗаголовков.Вставить("ДатаПодписиЭАВР",  НСтр("ru = 'Дата подписания ЭАВР'"));
		
		ПараметрыОтчета.ИсходящиеДанные.Вставить("АктыВыполненныхРаботСтруктураЗаголовков", СтруктураЗаголовков);
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("Документ" , 50);
		СтруктураШириныКолонок.Вставить("ЭАВР" , 50);

		СтруктураШириныКолонок.Вставить("ДатаПодписанияПоДаннымРегистра" , 25);
		СтруктураШириныКолонок.Вставить("ДатаПодписиЭАВР" , 25);

		СтруктураШириныКолонок.Вставить("Дата", 20);
		СтруктураШириныКолонок.Вставить("Номер"  , 25);
		
		ПараметрыОтчета.ИсходящиеДанные.Вставить("АктыВыполненныхРаботСтруктураШириныКолонок", СтруктураШириныКолонок);
	   	СтруктураРасшифровки = Новый Структура;
	   	СтруктураРасшифровки.Вставить("Документ", "Документ");
		СтруктураРасшифровки.Вставить("ЭАВР", "ЭАВР");

    	ПараметрыОтчета.ИсходящиеДанные.Вставить("АктыВыполненныхРаботСтруктураРасшифровки", СтруктураРасшифровки);
	КонецЕсли; 
	
КонецПроцедуры

//Производство

Процедура ПроверитьПравилоНаличиеЗацикливанияПроизводства(СтрокаПравила, ПараметрыОтчета) 
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
    Запрос.Текст =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
                    |	НАЧАЛОПЕРИОДА(ВыпускПродукцииУслугБухгалтерскийУчетОбороты.Период, МЕСЯЦ) КАК ПериодВыпуска,
                    |	ВыпускПродукцииУслугБухгалтерскийУчетОбороты.Организация КАК Организация,
                    |	ВыпускПродукцииУслугБухгалтерскийУчетОбороты.Подразделение КАК Подразделение,
                    |	ВыпускПродукцииУслугБухгалтерскийУчетОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
                    |	ВыпускПродукцииУслугБухгалтерскийУчетОбороты.Продукция КАК Продукция,
                    |	ВыпускПродукцииУслугБухгалтерскийУчетОбороты.СчетЗатрат КАК СчетЗатрат,
                    |	ВыпускПродукцииУслугБухгалтерскийУчетОбороты.СчетСписания КАК СчетСписания,
                    |	ВыпускПродукцииУслугБухгалтерскийУчетОбороты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
                    |	ВыпускПродукцииУслугБухгалтерскийУчетОбороты.Регистратор КАК РегистраторВыпуска
                    |ПОМЕСТИТЬ ВТ_ПродукцияВыпуск
                    |ИЗ
                    |	РегистрНакопления.ВыпускПродукцииУслугБухгалтерскийУчет.Обороты(&ДатаНач, &ДатаКон, Регистратор, Организация=&Организация) КАК ВыпускПродукцииУслугБухгалтерскийУчетОбороты
                    |
                    |ИНДЕКСИРОВАТЬ ПО
                    |	ПериодВыпуска,
                    |	СчетСписания,
                    |	НоменклатурнаяГруппа,
                    |	Продукция,
                    |	Подразделение";
    									
	Запрос.УстановитьПараметр("ДатаНач"					  , ПараметрыОтчета.ДатаНач);
    Запрос.УстановитьПараметр("ДатаКон"					  , КонецДня(ПараметрыОтчета.ДатаКон));
			
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
		
	СписокСчетов = Новый СписокЗначений;
	СписокСчетов.Добавить(ПланыСчетов.Типовой.ОсновноеПроизводство);
	СписокСчетов.Добавить(ПланыСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства);
	СписокСчетов.Добавить(ПланыСчетов.Типовой.ВспомогательныеПроизводства);

	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	
	Запрос.Выполнить();
								
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	НАЧАЛОПЕРИОДА(ТиповойОборотыДтКт.Период, МЕСЯЦ) КАК Период,
	               |	ТиповойОборотыДтКт.Регистратор КАК ДокументСписания,
	               |	ПРЕДСТАВЛЕНИЕ(ТиповойОборотыДтКт.Регистратор) КАК ДокументСписанияПредставление,
	               |	ВТ_ПродукцияВыпуск.Подразделение КАК Подразделение,
	               |	ПРЕДСТАВЛЕНИЕ(ВТ_ПродукцияВыпуск.Подразделение) КАК ПодразделениеПредставление,
	               |	ВТ_ПродукцияВыпуск.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	               |	ПРЕДСТАВЛЕНИЕ(ВТ_ПродукцияВыпуск.НоменклатурнаяГруппа) КАК НоменклатурнаяГруппаПредставление,
	               |	ВТ_ПродукцияВыпуск.Продукция КАК ВыпущеннаяПродукция,
	               |	СУММА(ВЫБОР
	               |			КОГДА НЕ ВТ_ПродукцияВыпуск.РегистраторВыпуска ЕСТЬ NULL
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК ЭтоЗацикливание
	               |ИЗ
	               |	РегистрБухгалтерии.Типовой.ОборотыДтКт(&ДатаНач, &ДатаКон, Регистратор, СчетДт В (&СписокСчетов), , , , &УсловиеОрганизация) КАК ТиповойОборотыДтКт
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПродукцияВыпуск КАК ВТ_ПродукцияВыпуск
	               |		ПО (ВТ_ПродукцияВыпуск.ПериодВыпуска = НАЧАЛОПЕРИОДА(ТиповойОборотыДтКт.Период, МЕСЯЦ))
	               |			И ТиповойОборотыДтКт.СчетКт = ВТ_ПродукцияВыпуск.СчетСписания
	               |			И ТиповойОборотыДтКт.СубконтоДт2 = ВТ_ПродукцияВыпуск.НоменклатурнаяГруппа
	               |			И ТиповойОборотыДтКт.СубконтоКт1 = ВТ_ПродукцияВыпуск.Продукция
	               |			И ТиповойОборотыДтКт.СубконтоДт1 = ВТ_ПродукцияВыпуск.Подразделение
	               |ГДЕ
	               |	ТИПЗНАЧЕНИЯ(ТиповойОборотыДтКт.Регистратор) <> ТИП(Документ.ЗакрытиеМесяца)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ПродукцияВыпуск.НоменклатурнаяГруппа,
	               |	НАЧАЛОПЕРИОДА(ТиповойОборотыДтКт.Период, МЕСЯЦ),
	               |	ВТ_ПродукцияВыпуск.Продукция,
	               |	ВТ_ПродукцияВыпуск.Подразделение,
	               |	ТиповойОборотыДтКт.Регистратор
	               |
				   |УПОРЯДОЧИТЬ ПО
				   |	НАЧАЛОПЕРИОДА(Период, МЕСЯЦ)
	               |ИТОГИ
	               |	СУММА(ЭтоЗацикливание)
	               |ПО
	               |	Период,
	               |	ВыпущеннаяПродукция";
		
	УсловиеОрганизация = "Организация = &Организация";
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.СтруктурноеПодразделение) Тогда
		УсловиеОрганизация = УсловиеОрганизация + " И СтруктурноеПодразделениеДт = &СтруктурноеПодразделение 
														|И СтруктурноеПодразделениеКт = &СтруктурноеПодразделение";
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", ПараметрыОтчета.СтруктурноеПодразделение);	
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОрганизация", УсловиеОрганизация);
 			    
    Результат = Запрос.Выполнить();

    СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
    СтрокаПравила.ПроверкаВыполнена = Истина; 
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипСписокЗначений = Новый ОписаниеТипов("СписокЗначений");
    ТаблицаОшибок = Новый ТаблицаЗначений;
    ТаблицаОшибок.Колонки.Добавить("ДокументСписания"); 
    ТаблицаОшибок.Колонки.Добавить("Подразделение");
    ТаблицаОшибок.Колонки.Добавить("НоменклатурнаяГруппа");
	ТаблицаОшибок.Колонки.Добавить("Период");
    ТаблицаОшибок.Колонки.Добавить("ВыпущеннаяПродукция");
	ТаблицаОшибок.Колонки.Добавить("ДокументСписанияПредставление"); 
    ТаблицаОшибок.Колонки.Добавить("ПодразделениеПредставление");
    ТаблицаОшибок.Колонки.Добавить("НоменклатурнаяГруппаПредставление");
   	 
    Пока Выборка.Следующий() Цикл
	   
		ВыборкаВыпущеннаяПродукция = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаВыпущеннаяПродукция.Следующий() Цикл
			
			ВыборкаПоВыпущеннойПродукции = ВыборкаВыпущеннаяПродукция.Выбрать();
												 
			Пока ВыборкаПоВыпущеннойПродукции.Следующий() Цикл
				
				СтрокаОшибки = ТаблицаОшибок.Добавить();   
				
				ЗаполнитьЗначенияСвойств(СтрокаОшибки, ВыборкаПоВыпущеннойПродукции); 
								 
			КонецЦикла; 
	
		КонецЦикла; 
		
	КонецЦикла;
	
	Если Не ТаблицаОшибок.Количество() = 0 Тогда
		СтрокаПравила.ОбнаруженыОшибки  = Истина;
		
		ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаОшибок);   
		ИсточникДанных.Колонки.Период.Измерение    = Истина; 
		ИсточникДанных.Колонки.ВыпущеннаяПродукция.Измерение    = Истина;
		
		ПараметрыОтчета.ИсходящиеДанные.Вставить("НаличиеЗацикливанияПроизводстваИсточникДанных", ИсточникДанных); 
						
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ДокументСписания",          НСтр("ru = 'Документ списания'"));
		СтруктураЗаголовков.Вставить("Подразделение",             НСтр("ru = 'Подразделение'"));
		СтруктураЗаголовков.Вставить("НоменклатурнаяГруппа",      НСтр("ru = 'Номенклатурная группа'"));			
		
		ПараметрыОтчета.ИсходящиеДанные.Вставить("НаличиеЗацикливанияПроизводстваСтруктураЗаголовков", СтруктураЗаголовков);
					
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("ДокументСписания", 				 60);
		СтруктураШириныКолонок.Вставить("Подразделение",                     60);
		СтруктураШириныКолонок.Вставить("НоменклатурнаяГруппа", 			120);	
				
		ПараметрыОтчета.ИсходящиеДанные.Вставить("НаличиеЗацикливанияПроизводстваСтруктураШириныКолонок", СтруктураШириныКолонок);	
		
		Макет = Обработки.ЭкспрессПроверкаВеденияУчета.ПолучитьМакет("ПроверкаНаличияЗацикливанияПроизводства");  
						
		ПараметрыОтчета.ИсходящиеДанные.Вставить("НаличиеЗацикливанияПроизводстваМакетОформленияУО", Макет);	
	Иначе
		СтрокаПравила.ОбнаруженыОшибки = Ложь;	
	КонецЕсли;
		
КонецПроцедуры  

Процедура ПроверитьПравилоОдинаковыеНоменклатурныеГруппыПРНУ(СтрокаПравила, ПараметрыОтчета) 
		
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |	НАЧАЛОПЕРИОДА(ВыпускПродукцииУслугНалоговыйУчетОбороты.Период, МЕСЯЦ) КАК ПериодВыпуска,
	                |	ВыпускПродукцииУслугНалоговыйУчетОбороты.Организация КАК Организация,
	                |	ВыпускПродукцииУслугНалоговыйУчетОбороты.Подразделение КАК Подразделение,
	                |	ВыпускПродукцииУслугНалоговыйУчетОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	                |	ВыпускПродукцииУслугНалоговыйУчетОбороты.Продукция КАК Продукция,
	                |	ВыпускПродукцииУслугНалоговыйУчетОбороты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	                |	ВыпускПродукцииУслугНалоговыйУчетОбороты.Регистратор КАК РегистраторВыпуска
	                |ПОМЕСТИТЬ ВТ_ПродукцияВыпускНУ
	                |ИЗ
	                |	РегистрНакопления.ВыпускПродукцииУслугНалоговыйУчет.Обороты(
	                |			&ДатаНач,
	                |			&ДатаКон,
	                |			Регистратор,
	                |			&УсловиеОрганизация
	                |				И ВидУчета = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.НУ)) КАК ВыпускПродукцииУслугНалоговыйУчетОбороты
	                |
	                |ИНДЕКСИРОВАТЬ ПО
	                |	ПериодВыпуска,
	                |	Подразделение,
	                |	Продукция,
	                |	НоменклатурнаяГруппа
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |	НАЧАЛОПЕРИОДА(ВыпускПродукцииУслугНалоговыйУчетОбороты.Период, МЕСЯЦ) КАК ПериодВыпуска,
	                |	ВыпускПродукцииУслугНалоговыйУчетОбороты.Организация КАК Организация,
	                |	ВыпускПродукцииУслугНалоговыйУчетОбороты.Подразделение КАК Подразделение,
	                |	ВыпускПродукцииУслугНалоговыйУчетОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	                |	ВыпускПродукцииУслугНалоговыйУчетОбороты.Продукция КАК Продукция,
	                |	ВыпускПродукцииУслугНалоговыйУчетОбороты.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	                |	ВыпускПродукцииУслугНалоговыйУчетОбороты.Регистратор КАК РегистраторВыпуска
	                |ПОМЕСТИТЬ ВТ_ПродукцияВыпускПР
	                |ИЗ
	                |	РегистрНакопления.ВыпускПродукцииУслугНалоговыйУчет.Обороты(
	                |			&ДатаНач,
	                |			&ДатаКон,
	                |			Регистратор,
	                |			&УсловиеОрганизация
	                |				И ВидУчета В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.ПР))) КАК ВыпускПродукцииУслугНалоговыйУчетОбороты
	                |
	                |ИНДЕКСИРОВАТЬ ПО
	                |	ПериодВыпуска,
	                |	Подразделение,
	                |	Продукция,
	                |	НоменклатурнаяГруппа
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ВТ_ПродукцияВыпускНУ.ПериодВыпуска КАК Период,
	                |	ВТ_ПродукцияВыпускНУ.Организация КАК Организация,
	                |	ВТ_ПродукцияВыпускНУ.Подразделение КАК Подразделение,
	                |	ПРЕДСТАВЛЕНИЕ(ВТ_ПродукцияВыпускНУ.Подразделение) КАК ПодразделениеПредставление,
	                |	ВТ_ПродукцияВыпускНУ.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	                |	ПРЕДСТАВЛЕНИЕ(ВТ_ПродукцияВыпускНУ.НоменклатурнаяГруппа) КАК НоменклатурнаяГруппаПредставление,
	                |	ВТ_ПродукцияВыпускНУ.Продукция КАК ВыпущеннаяПродукция,
	                |	ВТ_ПродукцияВыпускНУ.РегистраторВыпуска КАК ДокументСписания,
	                |	ПРЕДСТАВЛЕНИЕ(ВТ_ПродукцияВыпускНУ.РегистраторВыпуска) КАК ДокументСписанияПредставление,
	                |	ВТ_ПродукцияВыпускПР.РегистраторВыпуска КАК РегистраторВыпускаПР,
	                |	ПРЕДСТАВЛЕНИЕ(ВТ_ПродукцияВыпускПР.РегистраторВыпуска) КАК РегистраторВыпускаПРПредставление
	                |ИЗ
	                |	ВТ_ПродукцияВыпускНУ КАК ВТ_ПродукцияВыпускНУ
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПродукцияВыпускПР КАК ВТ_ПродукцияВыпускПР
	                |		ПО ВТ_ПродукцияВыпускНУ.ПериодВыпуска = ВТ_ПродукцияВыпускПР.ПериодВыпуска
	                |			И ВТ_ПродукцияВыпускНУ.Подразделение = ВТ_ПродукцияВыпускПР.Подразделение
	                |			И ВТ_ПродукцияВыпускНУ.Продукция = ВТ_ПродукцияВыпускПР.Продукция
	                |			И ВТ_ПродукцияВыпускНУ.НоменклатурнаяГруппа = ВТ_ПродукцияВыпускПР.НоменклатурнаяГруппа
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Период
	                |ИТОГИ ПО
	                |	Период,
	                |	ВыпущеннаяПродукция";
				    	 
	Запрос.УстановитьПараметр("ДатаНач"	   , ПараметрыОтчета.ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон"	   , КонецДня(ПараметрыОтчета.ДатаКон)); 
	
	УсловиеОрганизация = "Организация = &Организация";
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.СтруктурноеПодразделение) Тогда
		УсловиеОрганизация = УсловиеОрганизация + " И СтруктурноеПодразделение = &СтруктурноеПодразделение";
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", ПараметрыОтчета.СтруктурноеПодразделение);	
	КонецЕсли;   
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОрганизация", УсловиеОрганизация);
			 
	Результат = Запрос.Выполнить();

    СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
    СтрокаПравила.ПроверкаВыполнена = Истина; 
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
    ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("Период");
    ТаблицаОшибок.Колонки.Добавить("ДокументСписания");
	ТаблицаОшибок.Колонки.Добавить("ДокументСписанияПредставление"); 
    ТаблицаОшибок.Колонки.Добавить("Подразделение");   
	ТаблицаОшибок.Колонки.Добавить("ПодразделениеПредставление");
    ТаблицаОшибок.Колонки.Добавить("НоменклатурнаяГруппа");
	ТаблицаОшибок.Колонки.Добавить("НоменклатурнаяГруппаПредставление"); 
    ТаблицаОшибок.Колонки.Добавить("ВыпущеннаяПродукция");
	ТаблицаОшибок.Колонки.Добавить("РегистраторВыпускаПР");
	ТаблицаОшибок.Колонки.Добавить("РегистраторВыпускаПРПредставление");
   	 
    Пока Выборка.Следующий() Цикл
	   
		ВыборкаВыпущеннаяПродукция = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаВыпущеннаяПродукция.Следующий() Цикл
			
			ВыборкаПоВыпущеннойПродукции = ВыборкаВыпущеннаяПродукция.Выбрать();
												 
			Пока ВыборкаПоВыпущеннойПродукции.Следующий() Цикл
				
				СтрокаОшибки = ТаблицаОшибок.Добавить();   
				
				ЗаполнитьЗначенияСвойств(СтрокаОшибки, ВыборкаПоВыпущеннойПродукции); 
								 
			КонецЦикла; 
	
		КонецЦикла; 
		
	КонецЦикла;
	
	Если Не ТаблицаОшибок.Количество() = 0 Тогда
		СтрокаПравила.ОбнаруженыОшибки  = Истина;
		
		ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаОшибок);   
		ИсточникДанных.Колонки.Период.Измерение    = Истина; 
		ИсточникДанных.Колонки.ВыпущеннаяПродукция.Измерение    = Истина;
		
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ОдинаковыеНоменклатурныеГруппыПРНУИсточникДанных", ИсточникДанных); 
						
		Макет = Обработки.ЭкспрессПроверкаВеденияУчета.ПолучитьМакет("ПроверкаНаличияЗацикливанияПроизводства");  
				
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ОдинаковыеНоменклатурныеГруппыПРНУМакетОформленияУО", Макет);	
	Иначе
		СтрокаПравила.ОбнаруженыОшибки = Ложь;	
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьПравилоПроизводственныеЗатратыРавныБУНУ(СтрокаПравила, ПараметрыОтчета)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СоответствиеСчетовБУиНУСрезПоследних.СчетБУ КАК СчетБУ,
		|	СоответствиеСчетовБУиНУСрезПоследних.СчетНУ КАК СчетНУ
		|ПОМЕСТИТЬ ВТ_СоответствиеПроизводственныхСчетовБУНУ
		|ИЗ
		|	РегистрСведений.СоответствиеСчетовБУиНУ.СрезПоследних(
		|			&ДатаКон,
		|				СчетНУ В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ОсновноеПроизводство_), ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПолуфабрикатыСобственногоПроизводства), ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ВспомогательныеПроизводства), ЗНАЧЕНИЕ(ПланСчетов.Налоговый.НакладныеРасходы))
		|				И СчетБУ В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ОсновноеПроизводство_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ВспомогательныеПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.НакладныеРасходы_))) КАК СоответствиеСчетовБУиНУСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетБУ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТиповойОборотыДтКт.СчетКт КАК СчетКтБУ,
		|	ТиповойОборотыДтКт.СубконтоКт1 КАК СубконтоКтБУ1,
		|	ТиповойОборотыДтКт.СубконтоКт2 КАК СубконтоКтБУ2,
		|	ТиповойОборотыДтКт.СубконтоКт3 КАК СубконтоКтБУ3,
		|	ТиповойОборотыДтКт.СуммаОборот КАК СуммаЗатратБУ,
		|	ВТ_СоответствиеПроизводственныхСчетовБУНУ.СчетНУ КАК СчетНУ,
		|	ТиповойОборотыДтКт.Период КАК Период
		|ПОМЕСТИТЬ ВТ_ПроизводственныеЗатратыБУ
		|ИЗ
		|	РегистрБухгалтерии.Типовой.ОборотыДтКт(&ДатаНач, &ДатаКон, Месяц, , , СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Типовой.ОсновноеПроизводство_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ПолуфабрикатыСобственногоПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.ВспомогательныеПроизводства_), ЗНАЧЕНИЕ(ПланСчетов.Типовой.НакладныеРасходы_)), , &УсловиеОрганизация) КАК ТиповойОборотыДтКт
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СоответствиеПроизводственныхСчетовБУНУ КАК ВТ_СоответствиеПроизводственныхСчетовБУНУ
		|		ПО ТиповойОборотыДтКт.СчетКт = ВТ_СоответствиеПроизводственныхСчетовБУНУ.СчетБУ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	СчетНУ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НалоговыйОборотыДтКт.СчетКт КАК СчетКтНУ,
		|	НалоговыйОборотыДтКт.СубконтоКт1 КАК СубконтоКтНУ1,
		|	НалоговыйОборотыДтКт.СубконтоКт2 КАК СубконтоКтНУ2,
		|	НалоговыйОборотыДтКт.СубконтоКт3 КАК СубконтоКтНУ3,
		|	НалоговыйОборотыДтКт.СуммаОборот КАК СуммаЗатратНУ,
		|	НалоговыйОборотыДтКт.Период КАК Период
		|ПОМЕСТИТЬ ВТ_ПроизводственныеЗатратыНУ
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.ОборотыДтКт(&ДатаНач, &ДатаКон, Месяц, , , СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ОсновноеПроизводство_), ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПолуфабрикатыСобственногоПроизводства), ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ВспомогательныеПроизводства), ЗНАЧЕНИЕ(ПланСчетов.Налоговый.НакладныеРасходы)), , &УсловиеОрганизация) КАК НалоговыйОборотыДтКт
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	СчетКтНУ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПроизводственныеЗатратыБУ.Период КАК Период,
		|	ВТ_ПроизводственныеЗатратыБУ.СчетКтБУ КАК СчетКтБУ,
		|	ВТ_ПроизводственныеЗатратыНУ.СчетКтНУ КАК СчетКтНУ,
		|	ВТ_ПроизводственныеЗатратыБУ.СубконтоКтБУ1 КАК СубконтоКтБУ1,
		|	ВТ_ПроизводственныеЗатратыБУ.СубконтоКтБУ2 КАК СубконтоКтБУ2,
		|	ВТ_ПроизводственныеЗатратыБУ.СубконтоКтБУ3 КАК СубконтоКтБУ3,
		|	ВТ_ПроизводственныеЗатратыБУ.СчетНУ КАК СчетНУ,
		|	ВТ_ПроизводственныеЗатратыБУ.СуммаЗатратБУ КАК СуммаЗатратБУ,
		|	ЕСТЬNULL(ВТ_ПроизводственныеЗатратыНУ.СуммаЗатратНУ, 0) КАК СуммаЗатратНУ
		|ИЗ
		|	ВТ_ПроизводственныеЗатратыБУ КАК ВТ_ПроизводственныеЗатратыБУ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПроизводственныеЗатратыНУ КАК ВТ_ПроизводственныеЗатратыНУ
		|		ПО ВТ_ПроизводственныеЗатратыБУ.Период = ВТ_ПроизводственныеЗатратыНУ.Период
		|			И ВТ_ПроизводственныеЗатратыБУ.СчетНУ = ВТ_ПроизводственныеЗатратыНУ.СчетКтНУ
		|			И ВТ_ПроизводственныеЗатратыБУ.СубконтоКтБУ1 = ВТ_ПроизводственныеЗатратыНУ.СубконтоКтНУ1
		|			И ЕСТЬNULL(ВТ_ПроизводственныеЗатратыБУ.СубконтоКтБУ2, Неопределено) = ЕСТЬNULL(ВТ_ПроизводственныеЗатратыНУ.СубконтоКтНУ2, Неопределено)
		|			И ЕСТЬNULL(ВТ_ПроизводственныеЗатратыБУ.СубконтоКтБУ3, Неопределено) = ЕСТЬNULL(ВТ_ПроизводственныеЗатратыНУ.СубконтоКтНУ3, Неопределено)
		|ГДЕ
		|	НЕ ВТ_ПроизводственныеЗатратыБУ.СуммаЗатратБУ = ЕСТЬNULL(ВТ_ПроизводственныеЗатратыНУ.СуммаЗатратНУ, 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
		
	Запрос.УстановитьПараметр("ДатаНач"					  , ПараметрыОтчета.ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон"					  , КонецДня(ПараметрыОтчета.ДатаКон)); 
		
	УсловиеОрганизация = "Организация = &Организация";
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.СтруктурноеПодразделение) Тогда
		УсловиеОрганизация = УсловиеОрганизация + " И СтруктурноеПодразделениеКт = &СтруктурноеПодразделение";
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", ПараметрыОтчета.СтруктурноеПодразделение);	
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОрганизация", УсловиеОрганизация);
		
    Результат = Запрос.Выполнить();

    СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
    СтрокаПравила.ПроверкаВыполнена = Истина;   
		
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		
		ТаблицаОшибок = Новый ТаблицаЗначений;
		ТаблицаОшибок.Колонки.Добавить("Период");
		ТаблицаОшибок.Колонки.Добавить("СчетКтБУ");
		ТаблицаОшибок.Колонки.Добавить("СчетКтНУ"); 
		ТаблицаОшибок.Колонки.Добавить("СубконтоКтБУ1");
		ТаблицаОшибок.Колонки.Добавить("СубконтоКтБУ2");
		ТаблицаОшибок.Колонки.Добавить("СубконтоКтБУ3");
		ТаблицаОшибок.Колонки.Добавить("СуммаЗатратБУ"); 
		ТаблицаОшибок.Колонки.Добавить("СуммаЗатратНУ");
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл  
				
			НоваяСтрока 				 	  = ТаблицаОшибок.Добавить();  
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
			
		КонецЦикла; 
		
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроизводственныеЗатратыРавныБУНУТаблицаЗначений", ТаблицаОшибок);
    
	    СтруктураЗаголовков = Новый Структура;
		
		СтруктураЗаголовков.Вставить("СчетКтБУ",      НСтр("ru = 'Счет затрат БУ'"));
		СтруктураЗаголовков.Вставить("СчетКтНУ",      НСтр("ru = 'Счет затрат НУ'")); 
		СтруктураЗаголовков.Вставить("СубконтоКтБУ1", НСтр("ru = 'Субконто 1 (БУ)'"));
		СтруктураЗаголовков.Вставить("СубконтоКтБУ2", НСтр("ru = 'Субконто 2 (БУ)'"));
		СтруктураЗаголовков.Вставить("СубконтоКтБУ3", НСтр("ru = 'Субконто 3 (БУ)'"));
		СтруктураЗаголовков.Вставить("СуммаЗатратБУ", НСтр("ru = 'Сумма затрат (БУ)'")); 
		СтруктураЗаголовков.Вставить("СуммаЗатратНУ", НСтр("ru = 'Сумма затрат (НУ + ПР)'"));
	    
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроизводственныеЗатратыРавныБУНУСтруктураЗаголовков", СтруктураЗаголовков);
		
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("СчетКтБУ", 20);
		СтруктураШириныКолонок.Вставить("СчетКтНУ", 20); 
		СтруктураШириныКолонок.Вставить("СубконтоКтБУ1", 35);
		СтруктураШириныКолонок.Вставить("СубконтоКтБУ2", 35);
		СтруктураШириныКолонок.Вставить("СубконтоКтБУ3", 35);
		СтруктураШириныКолонок.Вставить("СуммаЗатратБУ", 30); 
		СтруктураШириныКолонок.Вставить("СуммаЗатратНУ", 30);
	    
	    ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроизводственныеЗатратыРавныБУНУСтруктураШириныКолонок", СтруктураШириныКолонок);
		
		СтруктураФорматаПолей = Новый Структура;			               
		СтруктураФорматаПолей.Вставить("Период", "ДФ='MMMM гггг'");     
		ПараметрыОтчета.ИсходящиеДанные.Вставить("ПроизводственныеЗатратыРавныБУНУСтруктураФорматаПолей", СтруктураФорматаПолей);
	
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоНаличиеПроизводственныхЗатратВР(СтрокаПравила, ПараметрыОтчета)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НалоговыйОборотыДтКт.Период КАК Период,
		|	НалоговыйОборотыДтКт.Регистратор КАК Регистратор,
		|	НалоговыйОборотыДтКт.СчетКт КАК СчетКтНУ,
		|	НалоговыйОборотыДтКт.СубконтоКт1 КАК СубконтоКтНУ1,
		|	НалоговыйОборотыДтКт.СубконтоКт2 КАК СубконтоКтНУ2,
		|	НалоговыйОборотыДтКт.СубконтоКт3 КАК СубконтоКтНУ3,
		|	0 КАК СуммаЗатратНУДт,
		|	НалоговыйОборотыДтКт.СуммаОборот КАК СуммаЗатратНУКт
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.ОборотыДтКт(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Регистратор,
		|			,
		|			,
		|			СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ОсновноеПроизводство_), ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПолуфабрикатыСобственногоПроизводства), ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ВспомогательныеПроизводства), ЗНАЧЕНИЕ(ПланСчетов.Налоговый.НакладныеРасходы)),
		|			,
		|			&УсловиеОрганизация
		|				И ВидУчетаКт = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.ВР)) КАК НалоговыйОборотыДтКт
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НалоговыйОборотыДтКт.Период,
		|	НалоговыйОборотыДтКт.Регистратор,
		|	НалоговыйОборотыДтКт.СчетДт,
		|	НалоговыйОборотыДтКт.СубконтоДт1,
		|	НалоговыйОборотыДтКт.СубконтоДт2,
		|	НалоговыйОборотыДтКт.СубконтоДт3,
		|	НалоговыйОборотыДтКт.СуммаОборот,
		|	0
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.ОборотыДтКт(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Регистратор,
		|			СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ОсновноеПроизводство_), ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ПолуфабрикатыСобственногоПроизводства), ЗНАЧЕНИЕ(ПланСчетов.Налоговый.ВспомогательныеПроизводства), ЗНАЧЕНИЕ(ПланСчетов.Налоговый.НакладныеРасходы)),
		|			,
		|			,
		|			,
		|			&УсловиеОрганизация
		|				И ВидУчетаДт = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.ВР)) КАК НалоговыйОборотыДтКт
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
		
	Запрос.УстановитьПараметр("ДатаНач"					  , ПараметрыОтчета.ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон"					  , КонецДня(ПараметрыОтчета.ДатаКон)); 
	
	УсловиеОрганизация = "Организация = &Организация";
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.СтруктурноеПодразделение) Тогда
		УсловиеОрганизация = УсловиеОрганизация + " И СтруктурноеПодразделениеКт = &СтруктурноеПодразделение";
		Запрос.УстановитьПараметр("СтруктурноеПодразделение", ПараметрыОтчета.СтруктурноеПодразделение);	
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОрганизация", УсловиеОрганизация);
		
    Результат = Запрос.Выполнить();

    СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
    СтрокаПравила.ПроверкаВыполнена = Истина;   
		
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		
		ТаблицаОшибок = Новый ТаблицаЗначений;
		ТаблицаОшибок.Колонки.Добавить("Период"); 
		ТаблицаОшибок.Колонки.Добавить("Регистратор");
		ТаблицаОшибок.Колонки.Добавить("СчетКтНУ"); 
		ТаблицаОшибок.Колонки.Добавить("СубконтоКтНУ1");
		ТаблицаОшибок.Колонки.Добавить("СубконтоКтНУ2");
		ТаблицаОшибок.Колонки.Добавить("СубконтоКтНУ3");
		ТаблицаОшибок.Колонки.Добавить("СуммаЗатратНУДт");
		ТаблицаОшибок.Колонки.Добавить("СуммаЗатратНУКт");
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл  
				
			НоваяСтрока 				 	  = ТаблицаОшибок.Добавить();  
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
			
		КонецЦикла; 
		
		ПараметрыОтчета.ИсходящиеДанные.Вставить("НаличиеПроизводственныхЗатратВРТаблицаЗначений", ТаблицаОшибок);
    
	    СтруктураЗаголовков = Новый Структура;
		
		СтруктураЗаголовков.Вставить("Период",          НСтр("ru = 'Период'"));
		СтруктураЗаголовков.Вставить("СчетКтНУ",        НСтр("ru = 'Счет затрат НУ'")); 
		СтруктураЗаголовков.Вставить("СубконтоКтНУ1",   НСтр("ru = 'Субконто 1 (НУ)'"));
		СтруктураЗаголовков.Вставить("СубконтоКтНУ2",   НСтр("ru = 'Субконто 2 (НУ)'"));
		СтруктураЗаголовков.Вставить("СубконтоКтНУ3",   НСтр("ru = 'Субконто 3 (НУ)'"));
		СтруктураЗаголовков.Вставить("СуммаЗатратНУДт", НСтр("ru = 'Сумма Дт (ВР)'"));
		СтруктураЗаголовков.Вставить("СуммаЗатратНУКт", НСтр("ru = 'Сумма Кт (ВР)'"));
	    
		ПараметрыОтчета.ИсходящиеДанные.Вставить("НаличиеПроизводственныхЗатратВРСтруктураЗаголовков", СтруктураЗаголовков);
		
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("СчетКтНУ", 20);  
		СтруктураШириныКолонок.Вставить("СубконтоКтНУ1", 35);
		СтруктураШириныКолонок.Вставить("СубконтоКтНУ2", 35);
		СтруктураШириныКолонок.Вставить("СубконтоКтНУ3", 35);
		СтруктураШириныКолонок.Вставить("СуммаЗатратНУДт", 30);
		СтруктураШириныКолонок.Вставить("СуммаЗатратНУКт", 30);
	    
	    ПараметрыОтчета.ИсходящиеДанные.Вставить("НаличиеПроизводственныхЗатратВРСтруктураШириныКолонок", СтруктураШириныКолонок);
		
		СтруктураФорматаПолей = Новый Структура;			               
		СтруктураФорматаПолей.Вставить("Период", "ДФ='MMMM гггг'");     
		ПараметрыОтчета.ИсходящиеДанные.Вставить("НаличиеПроизводственныхЗатратВРСтруктураФорматаПолей", СтруктураФорматаПолей);
		
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Регистратор", "Регистратор");

		ПараметрыОтчета.ИсходящиеДанные.Вставить("НаличиеПроизводственныхЗатратВРСтруктураРасшифровки", СтруктураРасшифровки);
	КонецЕсли;	
	
КонецПроцедуры

// Процедура-оболочка, вызывающая другие процедуры на выполнение или выполняющая текст алгоритма
Процедура ПроверитьПравило(СтрокаПравила, ПараметрыОтчета)
	
	СтрокаПравила.КомментарийРезультата   = "";
	СтрокаПравила.ПричиныОшибокРезультата = "";
	СтрокаПравила.РекомендацииРезультата  = "";
	
	РежимОтладки = СтрокаПравила.РежимОтладки ИЛИ ПустаяСтрока(СтрокаПравила.ТекстАлгоритма);
	
	Если РежимОтладки Тогда
		Попытка
			Выполнить("ПроверитьПравило"+СтрокаПравила.Идентификатор+"(СтрокаПравила, ПараметрыОтчета)");
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка при попытке выполнения процедуры %1 %2'"),
				"ПроверитьПравило",
				СтрокаПравила.Идентификатор);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
			СтрокаПравила.ПроверкаВыполнена = Ложь;
			СтрокаПравила.ОбнаруженыОшибки = Ложь;
		КонецПопытки;
	Иначе
		Попытка
			Выполнить(СтрокаПравила.ТекстАлгоритма);
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru=Ошибка при попытке выполнения алгоритма правила %1'"),
				СтрокаПравила.Идентификатор);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

			СтрокаПравила.ПроверкаВыполнена = Ложь;
			СтрокаПравила.ОбнаруженыОшибки = Ложь;
		КонецПопытки;
	КонецЕсли;

	КомментарийЗаданВАлгоритме = НЕ ПустаяСтрока(СтрокаПравила.КомментарийРезультата);
	Если НЕ КомментарийЗаданВАлгоритме Тогда
		Если СтрокаПравила.ОбнаруженыОшибки Тогда
			СтрокаПравила.КомментарийРезультата = СтрокаПравила.КомментарийРезультатаОшибка;
		ИначеЕсли СтрокаПравила.ПроверкаВыполнена Тогда
			СтрокаПравила.КомментарийРезультата = СтрокаПравила.КомментарийРезультатаНетОшибок;
		Иначе
			СтрокаПравила.КомментарийРезультата = СтрокаПравила.КомментарийРезультатаНеВыполнена;
		КонецЕсли;
	КонецЕсли;
	
	ПричиныОшибокЗаданыВАлгоритме = НЕ ПустаяСтрока(СтрокаПравила.ПричиныОшибокРезультата);
	Если НЕ ПричиныОшибокЗаданыВАлгоритме Тогда
		СтрокаПравила.ПричиныОшибокРезультата = СтрокаПравила.ПричиныОшибок;
	КонецЕсли;
	
	РекомендацииЗаданыВАлгоритме = НЕ ПустаяСтрока(СтрокаПравила.РекомендацииРезультата);
	Если НЕ РекомендацииЗаданыВАлгоритме Тогда
		СтрокаПравила.РекомендацииРезультата = СтрокаПравила.Рекомендации;
	КонецЕсли;
	
КонецПроцедуры
 
Функция ПолучитьНомерЧислом(НомерСтрокой)

	ЧисловаяЧастьНомера = "";
	ДлинаСтроки = СтрДлина(НомерСтрокой);
	Для Счетчик = 0 По ДлинаСтроки - 1 Цикл
		НомерСимвола = ДлинаСтроки - Счетчик;
		ТекСимвол = Сред(НомерСтрокой, НомерСимвола, 1);
		ЭтоЧисло = Найти("0123456789", ТекСимвол) > 0;
		Если ЭтоЧисло Тогда
			ЧисловаяЧастьНомера = ТекСимвол + ЧисловаяЧастьНомера;
		ИначеЕсли НЕ ПустаяСтрока(ЧисловаяЧастьНомера) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НомерЧислом = Число("0"+ЧисловаяЧастьНомера);
	Возврат НомерЧислом;

КонецФункции 

Процедура ДобавитьПравилаВДерево(МакетПравил, НомерПервойСтрокиОбласти, НомерПоследнейСтрокиОбласти, СтрокиДерева, ПараметрыЗаполнения)
	
	НомерПервойСтрокиГруппы = НомерПервойСтрокиОбласти;
	
	Для НомерСтроки = НомерПервойСтрокиОбласти По НомерПоследнейСтрокиОбласти Цикл
		
		ОбластьГруппы = МакетПравил.Область(НомерПервойСтрокиГруппы, , НомерСтроки, );
		
		ИмяГруппы = ОбластьГруппы.Имя;
		
		Если Не СтрНачинаетсяС(ИмяГруппы, "R") Тогда
			
			НоваяСтрокаДерева = ЗаполнитьСтрокуДерева(МакетПравил, НомерПервойСтрокиГруппы, ИмяГруппы, СтрокиДерева, ПараметрыЗаполнения);
			
			Если НоваяСтрокаДерева <> Неопределено И НомерПервойСтрокиГруппы <> НомерСтроки Тогда // есть вложенные подгруппы
				ДобавитьПравилаВДерево(МакетПравил, НомерПервойСтрокиГруппы + 1, НомерСтроки, НоваяСтрокаДерева.Строки, ПараметрыЗаполнения);
			КонецЕсли;
			
			НомерПервойСтрокиГруппы = НомерСтроки + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьСтрокуДерева(МакетПравил, НомерСтрокиПравила, ИмяПравила, СтрокиДерева, ПараметрыЗаполнения)
	
	ИмяСтроки = "R" + Формат(НомерСтрокиПравила, "ЧГ=");
	
	// Отключенные правила не выводим в дерево
	Если МакетПравил.Область(ИмяСтроки + "|Отключено").Текст = "1" Тогда
		Возврат Неопределено
	КонецЕсли;
	
	// проверка ФО
	ЗначениеФО = Истина;
	ФО = МакетПравил.Область(ИмяСтроки + "|ФункциональнаяОпция").Текст;
	Если ЗначениеЗаполнено(ФО) Тогда
		ЗначениеФО = ПолучитьФункциональнуюОпцию(ФО);
		Если Не ЗначениеФО Тогда
			Возврат Неопределено
		КонецЕсли;
	КонецЕсли;
	
	// частные проверки необходимости включениия правила в проверку
	ДатаПроверки = '00010101';
	Если ПараметрыЗаполнения.Свойство("ДатаПроверки") Тогда
		ДатаПроверки = ПараметрыЗаполнения.ДатаПроверки;
	КонецЕсли;
	Если (ИмяПравила = "МинусыПоТоварамОрганизацийБУ" Или ИмяПравила = "ПроверкаВыпискиЭСФИИП") Тогда
		ДатаПереходаНаУчетПоТоварамОрганизацийНаВС = Константы.ДатаПереходаНаУчетПоТоварамОрганизацийНаВиртуальныхСкладах.Получить();
		Если ЗначениеЗаполнено(ДатаПереходаНаУчетПоТоварамОрганизацийНаВС) И (ДатаПереходаНаУчетПоТоварамОрганизацийНаВС <= ДатаПроверки Или Не ЗначениеЗаполнено(ДатаПроверки)) Тогда
			Возврат Неопределено
		КонецЕсли;
	КонецЕсли;
	
	// добавление и заполнение строки
	СтрокаДерева = СтрокиДерева.Добавить();
	
	УровеньДерева = СтрокаДерева.Уровень();
	
	ЭтоГруппа   = УровеньДерева = 0;
	ЭтоПравило  = УровеньДерева = 1;
	ЭтоПараметр = УровеньДерева = 2;
	
	СтрокаДерева.Включить        = Истина;
	СтрокаДерева.ЭтоГруппа       = ЭтоГруппа;
	СтрокаДерева.ЭтоПараметр     = ЭтоПараметр;
	СтрокаДерева.Идентификатор   = ИмяПравила;
	СтрокаДерева.Наименование    = МакетПравил.Область(ИмяСтроки + "|Наименование").Текст;
	СтрокаДерева.ПредметКонтроля = МакетПравил.Область(ИмяСтроки + "|ПредметКонтроля").Текст;
	
	Если ЭтоПараметр Тогда
		
		ТекстЗначенияПоУмолчанию = МакетПравил.Область(ИмяСтроки + "|КомментарийРезультатаНетОшибок").Текст;
		ТекстТипаЗначения        = МакетПравил.Область(ИмяСтроки + "|КомментарийРезультатаОшибка").Текст;
		Если ПустаяСтрока(ТекстЗначенияПоУмолчанию) Тогда
			Если Не ПустаяСтрока(ТекстТипаЗначения) Тогда
				Попытка
					ОписаниеТипаПараметра = Новый ОписаниеТипов(ТекстТипаЗначения);
					СтрокаДерева.ЗначениеПараметра = ОписаниеТипаПараметра.ПривестиЗначение(Неопределено);
				Исключение
				КонецПопытки;
			КонецЕсли;
		Иначе
			Попытка
				СтрокаДерева.ЗначениеПараметра = Вычислить(ТекстЗначенияПоУмолчанию);
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	ИначеЕсли ЭтоПравило Тогда
		
		СтрокаДерева.КомментарийРезультатаНетОшибок   = МакетПравил.Область(ИмяСтроки + "|КомментарийРезультатаНетОшибок").Текст;
		СтрокаДерева.КомментарийРезультатаОшибка      = МакетПравил.Область(ИмяСтроки + "|КомментарийРезультатаОшибка").Текст;
		СтрокаДерева.КомментарийРезультатаНеВыполнена = МакетПравил.Область(ИмяСтроки + "|КомментарийРезультатаНеВыполнена").Текст;
		СтрокаДерева.ПричиныОшибок                    = МакетПравил.Область(ИмяСтроки + "|ПричиныОшибок").Текст;
		СтрокаДерева.Рекомендации                     = МакетПравил.Область(ИмяСтроки + "|Рекомендации").Текст;
		СтрокаДерева.ТекстАлгоритма                   = МакетПравил.Область(ИмяСтроки + "|ТекстАлгоритма").Текст;
		СтрокаДерева.РежимОтладки                     = МакетПравил.Область(ИмяСтроки + "|РежимОтладки").Текст = "1";
		
	КонецЕсли;
	
	Возврат СтрокаДерева
	
КонецФункции

Процедура ЗаполнитьДеревоПроверокИзМакетаMXL(ДеревоПроверок, ПараметрыЗаполнения) Экспорт
	
	ДеревоПроверок.Строки.Очистить();
	МакетПравил   = Обработки.ЭкспрессПроверкаВеденияУчета.ПолучитьМакет("НаборПравилПроверки");
	ОбластьПравил = МакетПравил.Область("Правила");
	
	НомПервойСтрокиПравил    = ОбластьПравил.Верх;
	НомПоследнейСтрокиПравил = ОбластьПравил.Низ;
	
	ДобавитьПравилаВДерево(МакетПравил, НомПервойСтрокиПравил, НомПоследнейСтрокиПравил, ДеревоПроверок.Строки, ПараметрыЗаполнения);
	
КонецПроцедуры

#КонецЕсли
